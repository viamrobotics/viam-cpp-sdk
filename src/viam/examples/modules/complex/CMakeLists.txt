# Copyright 2023 Viam Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Much of this `CMakeLists.txt` file is dedicated to generating the correct C++
# files from `proto/gizmo.proto` and  proto/summation.proto`. We use `buf
# generate` with a custom `buf.gen.yaml` (there are two versions in the config
# directory depending on whether you've opted for offline or online proto
# generation), add the generated files as sources for our executables, and
# `target_include` the directory to get `#include` statements to work.
#
# Note that this `CMakeLists.txt` file is part of the larger cmake system for
# the Viam C++ SDK and you'll have to adjust the logic below based on your
# local build system setup.

set(MODULE_PROTO_DIR ${CMAKE_CURRENT_SOURCE_DIR}/proto)
set(MODULE_PROTO_GEN_DIR ${CMAKE_CURRENT_BINARY_DIR}/gen)
set(MODULE_PROTO_OUTPUT_FILES
  ${MODULE_PROTO_GEN_DIR}/gizmo.grpc.pb.cc
  ${MODULE_PROTO_GEN_DIR}/gizmo.grpc.pb.h
  ${MODULE_PROTO_GEN_DIR}/gizmo.pb.cc
  ${MODULE_PROTO_GEN_DIR}/gizmo.pb.h
  ${MODULE_PROTO_GEN_DIR}/summation.grpc.pb.cc
  ${MODULE_PROTO_GEN_DIR}/summation.grpc.pb.h
  ${MODULE_PROTO_GEN_DIR}/summation.pb.cc
  ${MODULE_PROTO_GEN_DIR}/summation.pb.h
)

# Try to find buf in the path or get it online.
# See the definition of this function for logic that can be adapted to other project files.
viamcppsdk_get_buf()

if ((NOT VIAMCPPSDK_OFFLINE_PROTO_GENERATION) AND VIAMCPPSDK_BUF_REMOTE_PLUGIN_SUPPORTED)
  configure_file(
    config/buf.gen.remote.plugin.yaml.in
    buf.gen.yaml
  )
else()
  configure_file(
    config/buf.gen.local.yaml.in
    buf.gen.yaml
  )
endif()

add_custom_command(
  OUTPUT
  # Unfortunately, there isn't a good way to know in advance what files will be
  # generated by invoking `buf generate`. Instead, we just include all proto
  # output files here that we know we need in the `add_executable` calls below.
  ${MODULE_PROTO_OUTPUT_FILES}

  # We must run `buf mod update` before generating to download google APIs.
  COMMAND ${BUF_COMMAND} mod update ${MODULE_PROTO_DIR}
  COMMAND ${BUF_COMMAND} generate ${MODULE_PROTO_DIR} --template buf.gen.yaml
  MAIN_DEPENDENCY buf.gen.yaml
)

add_custom_target(
  generate_complex_module_protos
  # This must be one of the files listed in `add_custom_command` above, but it
  # doesn't matter which one, we just need to have a dependency edge into the
  # files produced by that command.
  DEPENDS ${MODULE_PROTO_GEN_DIR}/gizmo.grpc.pb.cc
)

# Create an OBJECT library for the generated output files. Include the whole
# generated directory so libraries that link to complex_module_sources
# transitively include all generated files. Also link to the viamsdk library
# so following executables do not have to.
add_library(complex_module_sources
  OBJECT
    gizmo/api.cpp
    summation/api.cpp
    ${MODULE_PROTO_OUTPUT_FILES}
)
target_include_directories(complex_module_sources
  PUBLIC
    ${MODULE_PROTO_GEN_DIR}
)
target_link_libraries(complex_module_sources
  viam-cpp-sdk::viamsdk
)

viamcppsdk_link_viam_api(complex_module_sources)

add_executable(complex_module)
target_sources(complex_module
  PRIVATE
    main.cpp
    base/impl.cpp
    gizmo/impl.cpp
    summation/impl.cpp
)
target_link_libraries(complex_module
  PRIVATE Threads::Threads
  complex_module_sources
)
install(
  TARGETS complex_module
  COMPONENT examples
)

add_executable(complex_module_client)
target_sources(complex_module_client
  PRIVATE
    client.cpp
)
target_link_libraries(complex_module_client complex_module_sources)
install(
  TARGETS complex_module_client
  COMPONENT examples
)

# Testing related cmake logic; the section below is likely irrelevant for users
# writing their own modules. We are simply integrating tests from
# `test_complex_module.cpp` into the Viam C++ SDK testing suite.

if (VIAMCPPSDK_BUILD_TESTS)
 enable_testing()
 viamcppsdk_add_boost_test(test_complex_module.cpp)
 target_sources(test_complex_module
   PRIVATE
     gizmo/impl.cpp
     summation/impl.cpp
 )
 target_link_libraries(test_complex_module complex_module_sources)
endif()
