// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: summation.proto

#include "summation.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace viam {
namespace service {
namespace summation {
namespace v1 {
        template <typename>
PROTOBUF_CONSTEXPR SumRequest::SumRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.numbers_)*/ {},
      /*decltype(_impl_.name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SumRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SumRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SumRequestDefaultTypeInternal() {}
  union {
    SumRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SumRequestDefaultTypeInternal _SumRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SumResponse::SumResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.sum_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct SumResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SumResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SumResponseDefaultTypeInternal() {}
  union {
    SumResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SumResponseDefaultTypeInternal _SumResponse_default_instance_;
}  // namespace v1
}  // namespace summation
}  // namespace service
}  // namespace viam
static ::_pb::Metadata file_level_metadata_summation_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_summation_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_summation_2eproto = nullptr;
const ::uint32_t TableStruct_summation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::viam::service::summation::v1::SumRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::viam::service::summation::v1::SumRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::viam::service::summation::v1::SumRequest, _impl_.numbers_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::viam::service::summation::v1::SumResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::viam::service::summation::v1::SumResponse, _impl_.sum_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::viam::service::summation::v1::SumRequest)},
        {10, -1, -1, sizeof(::viam::service::summation::v1::SumResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::viam::service::summation::v1::_SumRequest_default_instance_._instance,
    &::viam::service::summation::v1::_SumResponse_default_instance_._instance,
};
const char descriptor_table_protodef_summation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017summation.proto\022\031viam.service.summatio"
    "n.v1\032\034google/api/annotations.proto\":\n\nSu"
    "mRequest\022\022\n\004name\030\001 \001(\tR\004name\022\030\n\007numbers\030"
    "\002 \003(\001R\007numbers\"\037\n\013SumResponse\022\020\n\003sum\030\001 \001"
    "(\001R\003sum2\234\001\n\020SummationService\022\207\001\n\003Sum\022%.v"
    "iam.service.summation.v1.SumRequest\032&.vi"
    "am.service.summation.v1.SumResponse\"1\202\323\344"
    "\223\002+\")/viam/api/v1/service/summation/{nam"
    "e}/sumb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_summation_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_summation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_summation_2eproto = {
    false,
    false,
    334,
    descriptor_table_protodef_summation_2eproto,
    "summation.proto",
    &descriptor_table_summation_2eproto_once,
    descriptor_table_summation_2eproto_deps,
    1,
    2,
    schemas,
    file_default_instances,
    TableStruct_summation_2eproto::offsets,
    file_level_metadata_summation_2eproto,
    file_level_enum_descriptors_summation_2eproto,
    file_level_service_descriptors_summation_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_summation_2eproto_getter() {
  return &descriptor_table_summation_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_summation_2eproto(&descriptor_table_summation_2eproto);
namespace viam {
namespace service {
namespace summation {
namespace v1 {
// ===================================================================

class SumRequest::_Internal {
 public:
};

SumRequest::SumRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:viam.service.summation.v1.SumRequest)
}
SumRequest::SumRequest(const SumRequest& from) : ::google::protobuf::Message() {
  SumRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.numbers_){from._impl_.numbers_},
      decltype(_impl_.name_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:viam.service.summation.v1.SumRequest)
}
inline void SumRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.numbers_){arena},
      decltype(_impl_.name_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SumRequest::~SumRequest() {
  // @@protoc_insertion_point(destructor:viam.service.summation.v1.SumRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SumRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.numbers_.~RepeatedField();
  _impl_.name_.Destroy();
}
void SumRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SumRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.summation.v1.SumRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_numbers()->Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SumRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 49, 2> SumRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SumRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated double numbers = 2 [json_name = "numbers"];
    {::_pbi::TcParser::FastF64P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SumRequest, _impl_.numbers_)}},
    // string name = 1 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SumRequest, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(SumRequest, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated double numbers = 2 [json_name = "numbers"];
    {PROTOBUF_FIELD_OFFSET(SumRequest, _impl_.numbers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
  }},
  // no aux_entries
  {{
    "\44\4\0\0\0\0\0\0"
    "viam.service.summation.v1.SumRequest"
    "name"
  }},
};

::uint8_t* SumRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.summation.v1.SumRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "viam.service.summation.v1.SumRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated double numbers = 2 [json_name = "numbers"];
  if (this->_internal_numbers_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_numbers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.summation.v1.SumRequest)
  return target;
}

::size_t SumRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.summation.v1.SumRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double numbers = 2 [json_name = "numbers"];
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_numbers_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SumRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SumRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*SumRequest::GetClassData() const { return &_class_data_; }


void SumRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SumRequest*>(&to_msg);
  auto& from = static_cast<const SumRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.summation.v1.SumRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_numbers()->MergeFrom(from._internal_numbers());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SumRequest::CopyFrom(const SumRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.summation.v1.SumRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SumRequest::IsInitialized() const {
  return true;
}

void SumRequest::InternalSwap(SumRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.numbers_.InternalSwap(&other->_impl_.numbers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

::google::protobuf::Metadata SumRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_summation_2eproto_getter, &descriptor_table_summation_2eproto_once,
      file_level_metadata_summation_2eproto[0]);
}
// ===================================================================

class SumResponse::_Internal {
 public:
};

SumResponse::SumResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:viam.service.summation.v1.SumResponse)
}
SumResponse::SumResponse(const SumResponse& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.summation.v1.SumResponse)
}
inline void SumResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
}
SumResponse::~SumResponse() {
  // @@protoc_insertion_point(destructor:viam.service.summation.v1.SumResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SumResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void SumResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SumResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.summation.v1.SumResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sum_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SumResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SumResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SumResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // double sum = 1 [json_name = "sum"];
    {::_pbi::TcParser::FastF64S1,
     {9, 63, 0, PROTOBUF_FIELD_OFFSET(SumResponse, _impl_.sum_)}},
  }}, {{
    65535, 65535
  }}, {{
    // double sum = 1 [json_name = "sum"];
    {PROTOBUF_FIELD_OFFSET(SumResponse, _impl_.sum_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SumResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.summation.v1.SumResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // double sum = 1 [json_name = "sum"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_sum = this->_internal_sum();
  ::uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        1, this->_internal_sum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.summation.v1.SumResponse)
  return target;
}

::size_t SumResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.summation.v1.SumResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double sum = 1 [json_name = "sum"];
  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_sum = this->_internal_sum();
  ::uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    total_size += 9;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SumResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SumResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*SumResponse::GetClassData() const { return &_class_data_; }


void SumResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SumResponse*>(&to_msg);
  auto& from = static_cast<const SumResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.summation.v1.SumResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint64_t) == sizeof(double),
                "Code assumes ::uint64_t and double are the same size.");
  double tmp_sum = from._internal_sum();
  ::uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    _this->_internal_set_sum(from._internal_sum());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SumResponse::CopyFrom(const SumResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.summation.v1.SumResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SumResponse::IsInitialized() const {
  return true;
}

void SumResponse::InternalSwap(SumResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.sum_, other->_impl_.sum_);
}

::google::protobuf::Metadata SumResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_summation_2eproto_getter, &descriptor_table_summation_2eproto_once,
      file_level_metadata_summation_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace summation
}  // namespace service
}  // namespace viam
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
