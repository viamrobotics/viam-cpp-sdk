// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: summation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_summation_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_summation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4024000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4024003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_summation_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_summation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_summation_2eproto;
namespace viam {
namespace service {
namespace summation {
namespace v1 {
class SumRequest;
struct SumRequestDefaultTypeInternal;
extern SumRequestDefaultTypeInternal _SumRequest_default_instance_;
class SumResponse;
struct SumResponseDefaultTypeInternal;
extern SumResponseDefaultTypeInternal _SumResponse_default_instance_;
}  // namespace v1
}  // namespace summation
}  // namespace service
}  // namespace viam
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace viam {
namespace service {
namespace summation {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class SumRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.summation.v1.SumRequest) */ {
 public:
  inline SumRequest() : SumRequest(nullptr) {}
  ~SumRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SumRequest(::google::protobuf::internal::ConstantInitialized);

  SumRequest(const SumRequest& from);
  SumRequest(SumRequest&& from) noexcept
    : SumRequest() {
    *this = ::std::move(from);
  }

  inline SumRequest& operator=(const SumRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SumRequest& operator=(SumRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SumRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SumRequest* internal_default_instance() {
    return reinterpret_cast<const SumRequest*>(
               &_SumRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SumRequest& a, SumRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SumRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SumRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SumRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SumRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SumRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SumRequest& from) {
    SumRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SumRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.summation.v1.SumRequest";
  }
  protected:
  explicit SumRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumbersFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated double numbers = 2 [json_name = "numbers"];
  int numbers_size() const;
  private:
  int _internal_numbers_size() const;

  public:
  void clear_numbers() ;
  double numbers(int index) const;
  void set_numbers(int index, double value);
  void add_numbers(double value);
  const ::google::protobuf::RepeatedField<double>& numbers() const;
  ::google::protobuf::RepeatedField<double>* mutable_numbers();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_numbers() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_numbers();

  public:
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:viam.service.summation.v1.SumRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 49, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::RepeatedField<double> numbers_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_summation_2eproto;
};// -------------------------------------------------------------------

class SumResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.summation.v1.SumResponse) */ {
 public:
  inline SumResponse() : SumResponse(nullptr) {}
  ~SumResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SumResponse(::google::protobuf::internal::ConstantInitialized);

  SumResponse(const SumResponse& from);
  SumResponse(SumResponse&& from) noexcept
    : SumResponse() {
    *this = ::std::move(from);
  }

  inline SumResponse& operator=(const SumResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SumResponse& operator=(SumResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SumResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SumResponse* internal_default_instance() {
    return reinterpret_cast<const SumResponse*>(
               &_SumResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SumResponse& a, SumResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SumResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SumResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SumResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SumResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SumResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SumResponse& from) {
    SumResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SumResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.summation.v1.SumResponse";
  }
  protected:
  explicit SumResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSumFieldNumber = 1,
  };
  // double sum = 1 [json_name = "sum"];
  void clear_sum() ;
  double sum() const;
  void set_sum(double value);

  private:
  double _internal_sum() const;
  void _internal_set_sum(double value);

  public:
  // @@protoc_insertion_point(class_scope:viam.service.summation.v1.SumResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double sum_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_summation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SumRequest

// string name = 1 [json_name = "name"];
inline void SumRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SumRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.summation.v1.SumRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SumRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.summation.v1.SumRequest.name)
}
inline std::string* SumRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.summation.v1.SumRequest.name)
  return _s;
}
inline const std::string& SumRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void SumRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SumRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* SumRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.summation.v1.SumRequest.name)
  return _impl_.name_.Release();
}
inline void SumRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.summation.v1.SumRequest.name)
}

// repeated double numbers = 2 [json_name = "numbers"];
inline int SumRequest::_internal_numbers_size() const {
  return _internal_numbers().size();
}
inline int SumRequest::numbers_size() const {
  return _internal_numbers_size();
}
inline void SumRequest::clear_numbers() {
  _internal_mutable_numbers()->Clear();
}
inline double SumRequest::numbers(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.summation.v1.SumRequest.numbers)
  return _internal_numbers().Get(index);
}
inline void SumRequest::set_numbers(int index, double value) {
  _internal_mutable_numbers()->Set(index, value);
  // @@protoc_insertion_point(field_set:viam.service.summation.v1.SumRequest.numbers)
}
inline void SumRequest::add_numbers(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_numbers()->Add(value);
  // @@protoc_insertion_point(field_add:viam.service.summation.v1.SumRequest.numbers)
}
inline const ::google::protobuf::RepeatedField<double>& SumRequest::numbers() const {
  // @@protoc_insertion_point(field_list:viam.service.summation.v1.SumRequest.numbers)
  return _internal_numbers();
}
inline ::google::protobuf::RepeatedField<double>* SumRequest::mutable_numbers() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.summation.v1.SumRequest.numbers)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_numbers();
}

inline const ::google::protobuf::RepeatedField<double>& SumRequest::_internal_numbers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.numbers_;
}
inline ::google::protobuf::RepeatedField<double>* SumRequest::_internal_mutable_numbers() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.numbers_;
}

// -------------------------------------------------------------------

// SumResponse

// double sum = 1 [json_name = "sum"];
inline void SumResponse::clear_sum() {
  _impl_.sum_ = 0;
}
inline double SumResponse::sum() const {
  // @@protoc_insertion_point(field_get:viam.service.summation.v1.SumResponse.sum)
  return _internal_sum();
}
inline void SumResponse::set_sum(double value) {
  _internal_set_sum(value);
  // @@protoc_insertion_point(field_set:viam.service.summation.v1.SumResponse.sum)
}
inline double SumResponse::_internal_sum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sum_;
}
inline void SumResponse::_internal_set_sum(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.sum_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace summation
}  // namespace service
}  // namespace viam


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_summation_2eproto_2epb_2eh
