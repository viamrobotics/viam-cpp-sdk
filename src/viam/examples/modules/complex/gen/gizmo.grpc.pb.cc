// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gizmo.proto

#include "gizmo.pb.h"
#include "gizmo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace viam {
namespace component {
namespace gizmo {
namespace v1 {

static const char* GizmoService_method_names[] = {
  "/viam.component.gizmo.v1.GizmoService/DoOne",
  "/viam.component.gizmo.v1.GizmoService/DoOneClientStream",
  "/viam.component.gizmo.v1.GizmoService/DoOneServerStream",
  "/viam.component.gizmo.v1.GizmoService/DoOneBiDiStream",
  "/viam.component.gizmo.v1.GizmoService/DoTwo",
};

std::unique_ptr< GizmoService::Stub> GizmoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< GizmoService::Stub> stub(new GizmoService::Stub(channel, options));
  return stub;
}

GizmoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DoOne_(GizmoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoOneClientStream_(GizmoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_DoOneServerStream_(GizmoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DoOneBiDiStream_(GizmoService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_DoTwo_(GizmoService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status GizmoService::Stub::DoOne(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoOneRequest& request, ::viam::component::gizmo::v1::DoOneResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::component::gizmo::v1::DoOneRequest, ::viam::component::gizmo::v1::DoOneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoOne_, context, request, response);
}

void GizmoService::Stub::async::DoOne(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoOneRequest* request, ::viam::component::gizmo::v1::DoOneResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::component::gizmo::v1::DoOneRequest, ::viam::component::gizmo::v1::DoOneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoOne_, context, request, response, std::move(f));
}

void GizmoService::Stub::async::DoOne(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoOneRequest* request, ::viam::component::gizmo::v1::DoOneResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoOne_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::component::gizmo::v1::DoOneResponse>* GizmoService::Stub::PrepareAsyncDoOneRaw(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoOneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::component::gizmo::v1::DoOneResponse, ::viam::component::gizmo::v1::DoOneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoOne_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::component::gizmo::v1::DoOneResponse>* GizmoService::Stub::AsyncDoOneRaw(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoOneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoOneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::viam::component::gizmo::v1::DoOneClientStreamRequest>* GizmoService::Stub::DoOneClientStreamRaw(::grpc::ClientContext* context, ::viam::component::gizmo::v1::DoOneClientStreamResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::viam::component::gizmo::v1::DoOneClientStreamRequest>::Create(channel_.get(), rpcmethod_DoOneClientStream_, context, response);
}

void GizmoService::Stub::async::DoOneClientStream(::grpc::ClientContext* context, ::viam::component::gizmo::v1::DoOneClientStreamResponse* response, ::grpc::ClientWriteReactor< ::viam::component::gizmo::v1::DoOneClientStreamRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::viam::component::gizmo::v1::DoOneClientStreamRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_DoOneClientStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::viam::component::gizmo::v1::DoOneClientStreamRequest>* GizmoService::Stub::AsyncDoOneClientStreamRaw(::grpc::ClientContext* context, ::viam::component::gizmo::v1::DoOneClientStreamResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::viam::component::gizmo::v1::DoOneClientStreamRequest>::Create(channel_.get(), cq, rpcmethod_DoOneClientStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::viam::component::gizmo::v1::DoOneClientStreamRequest>* GizmoService::Stub::PrepareAsyncDoOneClientStreamRaw(::grpc::ClientContext* context, ::viam::component::gizmo::v1::DoOneClientStreamResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::viam::component::gizmo::v1::DoOneClientStreamRequest>::Create(channel_.get(), cq, rpcmethod_DoOneClientStream_, context, response, false, nullptr);
}

::grpc::ClientReader< ::viam::component::gizmo::v1::DoOneServerStreamResponse>* GizmoService::Stub::DoOneServerStreamRaw(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoOneServerStreamRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::viam::component::gizmo::v1::DoOneServerStreamResponse>::Create(channel_.get(), rpcmethod_DoOneServerStream_, context, request);
}

void GizmoService::Stub::async::DoOneServerStream(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoOneServerStreamRequest* request, ::grpc::ClientReadReactor< ::viam::component::gizmo::v1::DoOneServerStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::viam::component::gizmo::v1::DoOneServerStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DoOneServerStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::viam::component::gizmo::v1::DoOneServerStreamResponse>* GizmoService::Stub::AsyncDoOneServerStreamRaw(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoOneServerStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::viam::component::gizmo::v1::DoOneServerStreamResponse>::Create(channel_.get(), cq, rpcmethod_DoOneServerStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::viam::component::gizmo::v1::DoOneServerStreamResponse>* GizmoService::Stub::PrepareAsyncDoOneServerStreamRaw(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoOneServerStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::viam::component::gizmo::v1::DoOneServerStreamResponse>::Create(channel_.get(), cq, rpcmethod_DoOneServerStream_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::viam::component::gizmo::v1::DoOneBiDiStreamRequest, ::viam::component::gizmo::v1::DoOneBiDiStreamResponse>* GizmoService::Stub::DoOneBiDiStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::viam::component::gizmo::v1::DoOneBiDiStreamRequest, ::viam::component::gizmo::v1::DoOneBiDiStreamResponse>::Create(channel_.get(), rpcmethod_DoOneBiDiStream_, context);
}

void GizmoService::Stub::async::DoOneBiDiStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::viam::component::gizmo::v1::DoOneBiDiStreamRequest,::viam::component::gizmo::v1::DoOneBiDiStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::viam::component::gizmo::v1::DoOneBiDiStreamRequest,::viam::component::gizmo::v1::DoOneBiDiStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_DoOneBiDiStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::viam::component::gizmo::v1::DoOneBiDiStreamRequest, ::viam::component::gizmo::v1::DoOneBiDiStreamResponse>* GizmoService::Stub::AsyncDoOneBiDiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::viam::component::gizmo::v1::DoOneBiDiStreamRequest, ::viam::component::gizmo::v1::DoOneBiDiStreamResponse>::Create(channel_.get(), cq, rpcmethod_DoOneBiDiStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::viam::component::gizmo::v1::DoOneBiDiStreamRequest, ::viam::component::gizmo::v1::DoOneBiDiStreamResponse>* GizmoService::Stub::PrepareAsyncDoOneBiDiStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::viam::component::gizmo::v1::DoOneBiDiStreamRequest, ::viam::component::gizmo::v1::DoOneBiDiStreamResponse>::Create(channel_.get(), cq, rpcmethod_DoOneBiDiStream_, context, false, nullptr);
}

::grpc::Status GizmoService::Stub::DoTwo(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoTwoRequest& request, ::viam::component::gizmo::v1::DoTwoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::component::gizmo::v1::DoTwoRequest, ::viam::component::gizmo::v1::DoTwoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoTwo_, context, request, response);
}

void GizmoService::Stub::async::DoTwo(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoTwoRequest* request, ::viam::component::gizmo::v1::DoTwoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::component::gizmo::v1::DoTwoRequest, ::viam::component::gizmo::v1::DoTwoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoTwo_, context, request, response, std::move(f));
}

void GizmoService::Stub::async::DoTwo(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoTwoRequest* request, ::viam::component::gizmo::v1::DoTwoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoTwo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::component::gizmo::v1::DoTwoResponse>* GizmoService::Stub::PrepareAsyncDoTwoRaw(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoTwoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::component::gizmo::v1::DoTwoResponse, ::viam::component::gizmo::v1::DoTwoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoTwo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::component::gizmo::v1::DoTwoResponse>* GizmoService::Stub::AsyncDoTwoRaw(::grpc::ClientContext* context, const ::viam::component::gizmo::v1::DoTwoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoTwoRaw(context, request, cq);
  result->StartCall();
  return result;
}

GizmoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GizmoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GizmoService::Service, ::viam::component::gizmo::v1::DoOneRequest, ::viam::component::gizmo::v1::DoOneResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GizmoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::component::gizmo::v1::DoOneRequest* req,
             ::viam::component::gizmo::v1::DoOneResponse* resp) {
               return service->DoOne(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GizmoService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< GizmoService::Service, ::viam::component::gizmo::v1::DoOneClientStreamRequest, ::viam::component::gizmo::v1::DoOneClientStreamResponse>(
          [](GizmoService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::viam::component::gizmo::v1::DoOneClientStreamRequest>* reader,
             ::viam::component::gizmo::v1::DoOneClientStreamResponse* resp) {
               return service->DoOneClientStream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GizmoService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< GizmoService::Service, ::viam::component::gizmo::v1::DoOneServerStreamRequest, ::viam::component::gizmo::v1::DoOneServerStreamResponse>(
          [](GizmoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::component::gizmo::v1::DoOneServerStreamRequest* req,
             ::grpc::ServerWriter<::viam::component::gizmo::v1::DoOneServerStreamResponse>* writer) {
               return service->DoOneServerStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GizmoService_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< GizmoService::Service, ::viam::component::gizmo::v1::DoOneBiDiStreamRequest, ::viam::component::gizmo::v1::DoOneBiDiStreamResponse>(
          [](GizmoService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::viam::component::gizmo::v1::DoOneBiDiStreamResponse,
             ::viam::component::gizmo::v1::DoOneBiDiStreamRequest>* stream) {
               return service->DoOneBiDiStream(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      GizmoService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< GizmoService::Service, ::viam::component::gizmo::v1::DoTwoRequest, ::viam::component::gizmo::v1::DoTwoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](GizmoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::component::gizmo::v1::DoTwoRequest* req,
             ::viam::component::gizmo::v1::DoTwoResponse* resp) {
               return service->DoTwo(ctx, req, resp);
             }, this)));
}

GizmoService::Service::~Service() {
}

::grpc::Status GizmoService::Service::DoOne(::grpc::ServerContext* context, const ::viam::component::gizmo::v1::DoOneRequest* request, ::viam::component::gizmo::v1::DoOneResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GizmoService::Service::DoOneClientStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::viam::component::gizmo::v1::DoOneClientStreamRequest>* reader, ::viam::component::gizmo::v1::DoOneClientStreamResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GizmoService::Service::DoOneServerStream(::grpc::ServerContext* context, const ::viam::component::gizmo::v1::DoOneServerStreamRequest* request, ::grpc::ServerWriter< ::viam::component::gizmo::v1::DoOneServerStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GizmoService::Service::DoOneBiDiStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::viam::component::gizmo::v1::DoOneBiDiStreamResponse, ::viam::component::gizmo::v1::DoOneBiDiStreamRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status GizmoService::Service::DoTwo(::grpc::ServerContext* context, const ::viam::component::gizmo::v1::DoTwoRequest* request, ::viam::component::gizmo::v1::DoTwoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viam
}  // namespace component
}  // namespace gizmo
}  // namespace v1

