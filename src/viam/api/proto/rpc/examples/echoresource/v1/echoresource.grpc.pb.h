// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/rpc/examples/echoresource/v1/echoresource.proto
#ifndef GRPC_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto__INCLUDED
#define GRPC_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto__INCLUDED

#include "proto/rpc/examples/echoresource/v1/echoresource.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace proto {
namespace rpc {
namespace examples {
namespace echoresource {
namespace v1 {

class EchoResourceService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.rpc.examples.echoresource.v1.EchoResourceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status EchoResource(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest& request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>> AsyncEchoResource(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>>(AsyncEchoResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>> PrepareAsyncEchoResource(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>>(PrepareAsyncEchoResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>> EchoResourceMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>>(EchoResourceMultipleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>> AsyncEchoResourceMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>>(AsyncEchoResourceMultipleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>> PrepareAsyncEchoResourceMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>>(PrepareAsyncEchoResourceMultipleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>> EchoResourceBiDi(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>>(EchoResourceBiDiRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>> AsyncEchoResourceBiDi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>>(AsyncEchoResourceBiDiRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>> PrepareAsyncEchoResourceBiDi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>>(PrepareAsyncEchoResourceBiDiRaw(context, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void EchoResource(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EchoResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void EchoResource(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void EchoResource(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void EchoResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void EchoResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void EchoResourceMultiple(::grpc::ClientContext* context, ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* request, ::grpc::ClientReadReactor< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* reactor) = 0;
      #else
      virtual void EchoResourceMultiple(::grpc::ClientContext* context, ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* request, ::grpc::experimental::ClientReadReactor< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void EchoResourceBiDi(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest,::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>* reactor) = 0;
      #else
      virtual void EchoResourceBiDi(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest,::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>* AsyncEchoResourceRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>* PrepareAsyncEchoResourceRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* EchoResourceMultipleRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* AsyncEchoResourceMultipleRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* PrepareAsyncEchoResourceMultipleRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>* EchoResourceBiDiRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>* AsyncEchoResourceBiDiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>* PrepareAsyncEchoResourceBiDiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status EchoResource(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest& request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>> AsyncEchoResource(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>>(AsyncEchoResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>> PrepareAsyncEchoResource(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>>(PrepareAsyncEchoResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>> EchoResourceMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>>(EchoResourceMultipleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>> AsyncEchoResourceMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>>(AsyncEchoResourceMultipleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>> PrepareAsyncEchoResourceMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>>(PrepareAsyncEchoResourceMultipleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>> EchoResourceBiDi(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>>(EchoResourceBiDiRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>> AsyncEchoResourceBiDi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>>(AsyncEchoResourceBiDiRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>> PrepareAsyncEchoResourceBiDi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>>(PrepareAsyncEchoResourceBiDiRaw(context, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void EchoResource(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response, std::function<void(::grpc::Status)>) override;
      void EchoResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void EchoResource(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void EchoResource(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void EchoResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void EchoResource(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void EchoResourceMultiple(::grpc::ClientContext* context, ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* request, ::grpc::ClientReadReactor< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* reactor) override;
      #else
      void EchoResourceMultiple(::grpc::ClientContext* context, ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* request, ::grpc::experimental::ClientReadReactor< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void EchoResourceBiDi(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest,::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>* reactor) override;
      #else
      void EchoResourceBiDi(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest,::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>* AsyncEchoResourceRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>* PrepareAsyncEchoResourceRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* EchoResourceMultipleRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest& request) override;
    ::grpc::ClientAsyncReader< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* AsyncEchoResourceMultipleRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* PrepareAsyncEchoResourceMultipleRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>* EchoResourceBiDiRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>* AsyncEchoResourceBiDiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>* PrepareAsyncEchoResourceBiDiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_EchoResource_;
    const ::grpc::internal::RpcMethod rpcmethod_EchoResourceMultiple_;
    const ::grpc::internal::RpcMethod rpcmethod_EchoResourceBiDi_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status EchoResource(::grpc::ServerContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response);
    virtual ::grpc::Status EchoResourceMultiple(::grpc::ServerContext* context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* request, ::grpc::ServerWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* writer);
    virtual ::grpc::Status EchoResourceBiDi(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_EchoResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EchoResource() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_EchoResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResource(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* /*request*/, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoResource(::grpc::ServerContext* context, ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EchoResourceMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EchoResourceMultiple() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_EchoResourceMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResourceMultiple(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoResourceMultiple(::grpc::ServerContext* context, ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* request, ::grpc::ServerAsyncWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EchoResourceBiDi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EchoResourceBiDi() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_EchoResourceBiDi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResourceBiDi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoResourceBiDi(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_EchoResource<WithAsyncMethod_EchoResourceMultiple<WithAsyncMethod_EchoResourceBiDi<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EchoResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_EchoResource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::rpc::examples::echoresource::v1::EchoResourceRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* request, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* response) { return this->EchoResource(context, request, response); }));}
    void SetMessageAllocatorFor_EchoResource(
        ::grpc::experimental::MessageAllocator< ::proto::rpc::examples::echoresource::v1::EchoResourceRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::rpc::examples::echoresource::v1::EchoResourceRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EchoResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResource(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* /*request*/, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* EchoResource(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* /*request*/, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* EchoResource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* /*request*/, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EchoResourceMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_EchoResourceMultiple() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* request) { return this->EchoResourceMultiple(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_EchoResourceMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResourceMultiple(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* EchoResourceMultiple(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* EchoResourceMultiple(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EchoResourceBiDi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_EchoResourceBiDi() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->EchoResourceBiDi(context); }));
    }
    ~ExperimentalWithCallbackMethod_EchoResourceBiDi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResourceBiDi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>* EchoResourceBiDi(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>* EchoResourceBiDi(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_EchoResource<ExperimentalWithCallbackMethod_EchoResourceMultiple<ExperimentalWithCallbackMethod_EchoResourceBiDi<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_EchoResource<ExperimentalWithCallbackMethod_EchoResourceMultiple<ExperimentalWithCallbackMethod_EchoResourceBiDi<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_EchoResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EchoResource() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_EchoResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResource(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* /*request*/, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EchoResourceMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EchoResourceMultiple() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_EchoResourceMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResourceMultiple(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EchoResourceBiDi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EchoResourceBiDi() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_EchoResourceBiDi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResourceBiDi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_EchoResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EchoResource() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_EchoResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResource(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* /*request*/, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EchoResourceMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EchoResourceMultiple() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_EchoResourceMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResourceMultiple(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoResourceMultiple(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EchoResourceBiDi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EchoResourceBiDi() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_EchoResourceBiDi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResourceBiDi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoResourceBiDi(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EchoResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_EchoResource() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EchoResource(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_EchoResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResource(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* /*request*/, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* EchoResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* EchoResource(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EchoResourceMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_EchoResourceMultiple() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->EchoResourceMultiple(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_EchoResourceMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResourceMultiple(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* EchoResourceMultiple(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* EchoResourceMultiple(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EchoResourceBiDi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_EchoResourceBiDi() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->EchoResourceBiDi(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_EchoResourceBiDi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoResourceBiDi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse, ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* EchoResourceBiDi(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* EchoResourceBiDi(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EchoResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EchoResource() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::rpc::examples::echoresource::v1::EchoResourceRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::proto::rpc::examples::echoresource::v1::EchoResourceRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse>* streamer) {
                       return this->StreamedEchoResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EchoResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EchoResource(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* /*request*/, ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEchoResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::rpc::examples::echoresource::v1::EchoResourceRequest,::proto::rpc::examples::echoresource::v1::EchoResourceResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_EchoResource<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_EchoResourceMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_EchoResourceMultiple() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest, ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* streamer) {
                       return this->StreamedEchoResourceMultiple(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_EchoResourceMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EchoResourceMultiple(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedEchoResourceMultiple(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest,::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_EchoResourceMultiple<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_EchoResource<WithSplitStreamingMethod_EchoResourceMultiple<Service > > StreamedService;
};

}  // namespace v1
}  // namespace echoresource
}  // namespace examples
}  // namespace rpc
}  // namespace proto


#endif  // GRPC_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto__INCLUDED
