// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/rpc/examples/fileupload/v1/fileupload.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto;
namespace proto {
namespace rpc {
namespace examples {
namespace fileupload {
namespace v1 {
class UploadFileRequest;
struct UploadFileRequestDefaultTypeInternal;
extern UploadFileRequestDefaultTypeInternal _UploadFileRequest_default_instance_;
class UploadFileResponse;
struct UploadFileResponseDefaultTypeInternal;
extern UploadFileResponseDefaultTypeInternal _UploadFileResponse_default_instance_;
}  // namespace v1
}  // namespace fileupload
}  // namespace examples
}  // namespace rpc
}  // namespace proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace proto {
namespace rpc {
namespace examples {
namespace fileupload {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class UploadFileResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.rpc.examples.fileupload.v1.UploadFileResponse) */ {
 public:
  inline UploadFileResponse() : UploadFileResponse(nullptr) {}
  ~UploadFileResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UploadFileResponse(::google::protobuf::internal::ConstantInitialized);

  inline UploadFileResponse(const UploadFileResponse& from)
      : UploadFileResponse(nullptr, from) {}
  UploadFileResponse(UploadFileResponse&& from) noexcept
    : UploadFileResponse() {
    *this = ::std::move(from);
  }

  inline UploadFileResponse& operator=(const UploadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadFileResponse& operator=(UploadFileResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadFileResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadFileResponse* internal_default_instance() {
    return reinterpret_cast<const UploadFileResponse*>(
               &_UploadFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UploadFileResponse& a, UploadFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadFileResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadFileResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadFileResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadFileResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadFileResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UploadFileResponse& from) {
    UploadFileResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UploadFileResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.rpc.examples.fileupload.v1.UploadFileResponse";
  }
  protected:
  explicit UploadFileResponse(::google::protobuf::Arena* arena);
  UploadFileResponse(::google::protobuf::Arena* arena, const UploadFileResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int64 size = 2 [json_name = "size"];
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:proto.rpc.examples.fileupload.v1.UploadFileResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int64_t size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto;
};// -------------------------------------------------------------------

class UploadFileRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.rpc.examples.fileupload.v1.UploadFileRequest) */ {
 public:
  inline UploadFileRequest() : UploadFileRequest(nullptr) {}
  ~UploadFileRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UploadFileRequest(::google::protobuf::internal::ConstantInitialized);

  inline UploadFileRequest(const UploadFileRequest& from)
      : UploadFileRequest(nullptr, from) {}
  UploadFileRequest(UploadFileRequest&& from) noexcept
    : UploadFileRequest() {
    *this = ::std::move(from);
  }

  inline UploadFileRequest& operator=(const UploadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadFileRequest& operator=(UploadFileRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadFileRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kName = 1,
    kChunkData = 2,
    DATA_NOT_SET = 0,
  };

  static inline const UploadFileRequest* internal_default_instance() {
    return reinterpret_cast<const UploadFileRequest*>(
               &_UploadFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UploadFileRequest& a, UploadFileRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadFileRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadFileRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadFileRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadFileRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadFileRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UploadFileRequest& from) {
    UploadFileRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UploadFileRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "proto.rpc.examples.fileupload.v1.UploadFileRequest";
  }
  protected:
  explicit UploadFileRequest(::google::protobuf::Arena* arena);
  UploadFileRequest(::google::protobuf::Arena* arena, const UploadFileRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kChunkDataFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bytes chunk_data = 2 [json_name = "chunkData"];
  bool has_chunk_data() const;
  void clear_chunk_data() ;
  const std::string& chunk_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk_data(Arg_&& arg, Args_... args);
  std::string* mutable_chunk_data();
  PROTOBUF_NODISCARD std::string* release_chunk_data();
  void set_allocated_chunk_data(std::string* value);

  private:
  const std::string& _internal_chunk_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk_data(
      const std::string& value);
  std::string* _internal_mutable_chunk_data();

  public:
  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:proto.rpc.examples.fileupload.v1.UploadFileRequest)
 private:
  class _Internal;
  void set_has_name();
  void set_has_chunk_data();

  inline bool has_data() const;
  inline void clear_has_data();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 0,
      63, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr name_;
      ::google::protobuf::internal::ArenaStringPtr chunk_data_;
    } data_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UploadFileRequest

// string name = 1 [json_name = "name"];
inline bool UploadFileRequest::has_name() const {
  return data_case() == kName;
}
inline void UploadFileRequest::set_has_name() {
  _impl_._oneof_case_[0] = kName;
}
inline void UploadFileRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() == kName) {
    _impl_.data_.name_.Destroy();
    clear_has_data();
  }
}
inline const std::string& UploadFileRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.fileupload.v1.UploadFileRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadFileRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() != kName) {
    clear_data();

    set_has_name();
    _impl_.data_.name_.InitDefault();
  }
  _impl_.data_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.rpc.examples.fileupload.v1.UploadFileRequest.name)
}
inline std::string* UploadFileRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.rpc.examples.fileupload.v1.UploadFileRequest.name)
  return _s;
}
inline const std::string& UploadFileRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (data_case() != kName) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.data_.name_.Get();
}
inline void UploadFileRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() != kName) {
    clear_data();

    set_has_name();
    _impl_.data_.name_.InitDefault();
  }
  _impl_.data_.name_.Set(value, GetArena());
}
inline std::string* UploadFileRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() != kName) {
    clear_data();

    set_has_name();
    _impl_.data_.name_.InitDefault();
  }
  return _impl_.data_.name_.Mutable( GetArena());
}
inline std::string* UploadFileRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.rpc.examples.fileupload.v1.UploadFileRequest.name)
  if (data_case() != kName) {
    return nullptr;
  }
  clear_has_data();
  return _impl_.data_.name_.Release();
}
inline void UploadFileRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_data()) {
    clear_data();
  }
  if (value != nullptr) {
    set_has_name();
    _impl_.data_.name_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.examples.fileupload.v1.UploadFileRequest.name)
}

// bytes chunk_data = 2 [json_name = "chunkData"];
inline bool UploadFileRequest::has_chunk_data() const {
  return data_case() == kChunkData;
}
inline void UploadFileRequest::set_has_chunk_data() {
  _impl_._oneof_case_[0] = kChunkData;
}
inline void UploadFileRequest::clear_chunk_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() == kChunkData) {
    _impl_.data_.chunk_data_.Destroy();
    clear_has_data();
  }
}
inline const std::string& UploadFileRequest::chunk_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.fileupload.v1.UploadFileRequest.chunk_data)
  return _internal_chunk_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadFileRequest::set_chunk_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() != kChunkData) {
    clear_data();

    set_has_chunk_data();
    _impl_.data_.chunk_data_.InitDefault();
  }
  _impl_.data_.chunk_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.rpc.examples.fileupload.v1.UploadFileRequest.chunk_data)
}
inline std::string* UploadFileRequest::mutable_chunk_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chunk_data();
  // @@protoc_insertion_point(field_mutable:proto.rpc.examples.fileupload.v1.UploadFileRequest.chunk_data)
  return _s;
}
inline const std::string& UploadFileRequest::_internal_chunk_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (data_case() != kChunkData) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.data_.chunk_data_.Get();
}
inline void UploadFileRequest::_internal_set_chunk_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() != kChunkData) {
    clear_data();

    set_has_chunk_data();
    _impl_.data_.chunk_data_.InitDefault();
  }
  _impl_.data_.chunk_data_.Set(value, GetArena());
}
inline std::string* UploadFileRequest::_internal_mutable_chunk_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() != kChunkData) {
    clear_data();

    set_has_chunk_data();
    _impl_.data_.chunk_data_.InitDefault();
  }
  return _impl_.data_.chunk_data_.Mutable( GetArena());
}
inline std::string* UploadFileRequest::release_chunk_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.rpc.examples.fileupload.v1.UploadFileRequest.chunk_data)
  if (data_case() != kChunkData) {
    return nullptr;
  }
  clear_has_data();
  return _impl_.data_.chunk_data_.Release();
}
inline void UploadFileRequest::set_allocated_chunk_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_data()) {
    clear_data();
  }
  if (value != nullptr) {
    set_has_chunk_data();
    _impl_.data_.chunk_data_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.examples.fileupload.v1.UploadFileRequest.chunk_data)
}

inline bool UploadFileRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void UploadFileRequest::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline UploadFileRequest::DataCase UploadFileRequest::data_case() const {
  return UploadFileRequest::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UploadFileResponse

// string name = 1 [json_name = "name"];
inline void UploadFileResponse::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& UploadFileResponse::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.fileupload.v1.UploadFileResponse.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadFileResponse::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:proto.rpc.examples.fileupload.v1.UploadFileResponse.name)
}
inline std::string* UploadFileResponse::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.rpc.examples.fileupload.v1.UploadFileResponse.name)
  return _s;
}
inline const std::string& UploadFileResponse::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void UploadFileResponse::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* UploadFileResponse::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* UploadFileResponse::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:proto.rpc.examples.fileupload.v1.UploadFileResponse.name)
  return _impl_.name_.Release();
}
inline void UploadFileResponse::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.examples.fileupload.v1.UploadFileResponse.name)
}

// int64 size = 2 [json_name = "size"];
inline void UploadFileResponse::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.size_ = ::int64_t{0};
}
inline ::int64_t UploadFileResponse::size() const {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.fileupload.v1.UploadFileResponse.size)
  return _internal_size();
}
inline void UploadFileResponse::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:proto.rpc.examples.fileupload.v1.UploadFileResponse.size)
}
inline ::int64_t UploadFileResponse::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void UploadFileResponse::_internal_set_size(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.size_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fileupload
}  // namespace examples
}  // namespace rpc
}  // namespace proto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto_2epb_2eh
