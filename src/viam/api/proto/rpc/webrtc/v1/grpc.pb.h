// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/rpc/webrtc/v1/grpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
namespace proto {
namespace rpc {
namespace webrtc {
namespace v1 {
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class Metadata_MdEntry_DoNotUse;
struct Metadata_MdEntry_DoNotUseDefaultTypeInternal;
extern Metadata_MdEntry_DoNotUseDefaultTypeInternal _Metadata_MdEntry_DoNotUse_default_instance_;
class PacketMessage;
struct PacketMessageDefaultTypeInternal;
extern PacketMessageDefaultTypeInternal _PacketMessage_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class RequestHeaders;
struct RequestHeadersDefaultTypeInternal;
extern RequestHeadersDefaultTypeInternal _RequestHeaders_default_instance_;
class RequestMessage;
struct RequestMessageDefaultTypeInternal;
extern RequestMessageDefaultTypeInternal _RequestMessage_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class ResponseHeaders;
struct ResponseHeadersDefaultTypeInternal;
extern ResponseHeadersDefaultTypeInternal _ResponseHeaders_default_instance_;
class ResponseMessage;
struct ResponseMessageDefaultTypeInternal;
extern ResponseMessageDefaultTypeInternal _ResponseMessage_default_instance_;
class ResponseTrailers;
struct ResponseTrailersDefaultTypeInternal;
extern ResponseTrailersDefaultTypeInternal _ResponseTrailers_default_instance_;
class Stream;
struct StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class Strings;
struct StringsDefaultTypeInternal;
extern StringsDefaultTypeInternal _Strings_default_instance_;
}  // namespace v1
}  // namespace webrtc
}  // namespace rpc
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::rpc::webrtc::v1::Metadata* Arena::CreateMaybeMessage<::proto::rpc::webrtc::v1::Metadata>(Arena*);
template<> ::proto::rpc::webrtc::v1::Metadata_MdEntry_DoNotUse* Arena::CreateMaybeMessage<::proto::rpc::webrtc::v1::Metadata_MdEntry_DoNotUse>(Arena*);
template<> ::proto::rpc::webrtc::v1::PacketMessage* Arena::CreateMaybeMessage<::proto::rpc::webrtc::v1::PacketMessage>(Arena*);
template<> ::proto::rpc::webrtc::v1::Request* Arena::CreateMaybeMessage<::proto::rpc::webrtc::v1::Request>(Arena*);
template<> ::proto::rpc::webrtc::v1::RequestHeaders* Arena::CreateMaybeMessage<::proto::rpc::webrtc::v1::RequestHeaders>(Arena*);
template<> ::proto::rpc::webrtc::v1::RequestMessage* Arena::CreateMaybeMessage<::proto::rpc::webrtc::v1::RequestMessage>(Arena*);
template<> ::proto::rpc::webrtc::v1::Response* Arena::CreateMaybeMessage<::proto::rpc::webrtc::v1::Response>(Arena*);
template<> ::proto::rpc::webrtc::v1::ResponseHeaders* Arena::CreateMaybeMessage<::proto::rpc::webrtc::v1::ResponseHeaders>(Arena*);
template<> ::proto::rpc::webrtc::v1::ResponseMessage* Arena::CreateMaybeMessage<::proto::rpc::webrtc::v1::ResponseMessage>(Arena*);
template<> ::proto::rpc::webrtc::v1::ResponseTrailers* Arena::CreateMaybeMessage<::proto::rpc::webrtc::v1::ResponseTrailers>(Arena*);
template<> ::proto::rpc::webrtc::v1::Stream* Arena::CreateMaybeMessage<::proto::rpc::webrtc::v1::Stream>(Arena*);
template<> ::proto::rpc::webrtc::v1::Strings* Arena::CreateMaybeMessage<::proto::rpc::webrtc::v1::Strings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace rpc {
namespace webrtc {
namespace v1 {

// ===================================================================

class PacketMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.webrtc.v1.PacketMessage) */ {
 public:
  inline PacketMessage() : PacketMessage(nullptr) {}
  ~PacketMessage() override;
  explicit PROTOBUF_CONSTEXPR PacketMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketMessage(const PacketMessage& from);
  PacketMessage(PacketMessage&& from) noexcept
    : PacketMessage() {
    *this = ::std::move(from);
  }

  inline PacketMessage& operator=(const PacketMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketMessage& operator=(PacketMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketMessage* internal_default_instance() {
    return reinterpret_cast<const PacketMessage*>(
               &_PacketMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketMessage& a, PacketMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PacketMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PacketMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PacketMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.webrtc.v1.PacketMessage";
  }
  protected:
  explicit PacketMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kEomFieldNumber = 2,
  };
  // bytes data = 1 [json_name = "data"];
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bool eom = 2 [json_name = "eom"];
  void clear_eom();
  bool eom() const;
  void set_eom(bool value);
  private:
  bool _internal_eom() const;
  void _internal_set_eom(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.rpc.webrtc.v1.PacketMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  bool eom_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
};
// -------------------------------------------------------------------

class Stream final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.webrtc.v1.Stream) */ {
 public:
  inline Stream() : Stream(nullptr) {}
  ~Stream() override;
  explicit PROTOBUF_CONSTEXPR Stream(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stream(const Stream& from);
  Stream(Stream&& from) noexcept
    : Stream() {
    *this = ::std::move(from);
  }

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stream& operator=(Stream&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stream& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stream* internal_default_instance() {
    return reinterpret_cast<const Stream*>(
               &_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stream& a, Stream& b) {
    a.Swap(&b);
  }
  inline void Swap(Stream* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stream>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stream& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Stream& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stream* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.webrtc.v1.Stream";
  }
  protected:
  explicit Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1 [json_name = "id"];
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.rpc.webrtc.v1.Stream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.webrtc.v1.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kHeaders = 2,
    kMessage = 3,
    kRstStream = 4,
    TYPE_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.webrtc.v1.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFieldNumber = 1,
    kHeadersFieldNumber = 2,
    kMessageFieldNumber = 3,
    kRstStreamFieldNumber = 4,
  };
  // .proto.rpc.webrtc.v1.Stream stream = 1 [json_name = "stream"];
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::proto::rpc::webrtc::v1::Stream& stream() const;
  PROTOBUF_NODISCARD ::proto::rpc::webrtc::v1::Stream* release_stream();
  ::proto::rpc::webrtc::v1::Stream* mutable_stream();
  void set_allocated_stream(::proto::rpc::webrtc::v1::Stream* stream);
  private:
  const ::proto::rpc::webrtc::v1::Stream& _internal_stream() const;
  ::proto::rpc::webrtc::v1::Stream* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::proto::rpc::webrtc::v1::Stream* stream);
  ::proto::rpc::webrtc::v1::Stream* unsafe_arena_release_stream();

  // .proto.rpc.webrtc.v1.RequestHeaders headers = 2 [json_name = "headers"];
  bool has_headers() const;
  private:
  bool _internal_has_headers() const;
  public:
  void clear_headers();
  const ::proto::rpc::webrtc::v1::RequestHeaders& headers() const;
  PROTOBUF_NODISCARD ::proto::rpc::webrtc::v1::RequestHeaders* release_headers();
  ::proto::rpc::webrtc::v1::RequestHeaders* mutable_headers();
  void set_allocated_headers(::proto::rpc::webrtc::v1::RequestHeaders* headers);
  private:
  const ::proto::rpc::webrtc::v1::RequestHeaders& _internal_headers() const;
  ::proto::rpc::webrtc::v1::RequestHeaders* _internal_mutable_headers();
  public:
  void unsafe_arena_set_allocated_headers(
      ::proto::rpc::webrtc::v1::RequestHeaders* headers);
  ::proto::rpc::webrtc::v1::RequestHeaders* unsafe_arena_release_headers();

  // .proto.rpc.webrtc.v1.RequestMessage message = 3 [json_name = "message"];
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::proto::rpc::webrtc::v1::RequestMessage& message() const;
  PROTOBUF_NODISCARD ::proto::rpc::webrtc::v1::RequestMessage* release_message();
  ::proto::rpc::webrtc::v1::RequestMessage* mutable_message();
  void set_allocated_message(::proto::rpc::webrtc::v1::RequestMessage* message);
  private:
  const ::proto::rpc::webrtc::v1::RequestMessage& _internal_message() const;
  ::proto::rpc::webrtc::v1::RequestMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::proto::rpc::webrtc::v1::RequestMessage* message);
  ::proto::rpc::webrtc::v1::RequestMessage* unsafe_arena_release_message();

  // bool rst_stream = 4 [json_name = "rstStream"];
  bool has_rst_stream() const;
  private:
  bool _internal_has_rst_stream() const;
  public:
  void clear_rst_stream();
  bool rst_stream() const;
  void set_rst_stream(bool value);
  private:
  bool _internal_rst_stream() const;
  void _internal_set_rst_stream(bool value);
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:proto.rpc.webrtc.v1.Request)
 private:
  class _Internal;
  void set_has_headers();
  void set_has_message();
  void set_has_rst_stream();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::rpc::webrtc::v1::Stream* stream_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::proto::rpc::webrtc::v1::RequestHeaders* headers_;
    ::proto::rpc::webrtc::v1::RequestMessage* message_;
    bool rst_stream_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
};
// -------------------------------------------------------------------

class RequestHeaders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.webrtc.v1.RequestHeaders) */ {
 public:
  inline RequestHeaders() : RequestHeaders(nullptr) {}
  ~RequestHeaders() override;
  explicit PROTOBUF_CONSTEXPR RequestHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestHeaders(const RequestHeaders& from);
  RequestHeaders(RequestHeaders&& from) noexcept
    : RequestHeaders() {
    *this = ::std::move(from);
  }

  inline RequestHeaders& operator=(const RequestHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestHeaders& operator=(RequestHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestHeaders* internal_default_instance() {
    return reinterpret_cast<const RequestHeaders*>(
               &_RequestHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestHeaders& a, RequestHeaders& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestHeaders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestHeaders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestHeaders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestHeaders& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHeaders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.webrtc.v1.RequestHeaders";
  }
  protected:
  explicit RequestHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodFieldNumber = 1,
    kMetadataFieldNumber = 2,
    kTimeoutFieldNumber = 3,
  };
  // string method = 1 [json_name = "method"];
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // .proto.rpc.webrtc.v1.Metadata metadata = 2 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::proto::rpc::webrtc::v1::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::proto::rpc::webrtc::v1::Metadata* release_metadata();
  ::proto::rpc::webrtc::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::proto::rpc::webrtc::v1::Metadata* metadata);
  private:
  const ::proto::rpc::webrtc::v1::Metadata& _internal_metadata() const;
  ::proto::rpc::webrtc::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::proto::rpc::webrtc::v1::Metadata* metadata);
  ::proto::rpc::webrtc::v1::Metadata* unsafe_arena_release_metadata();

  // .google.protobuf.Duration timeout = 3 [json_name = "timeout"];
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  const ::PROTOBUF_NAMESPACE_ID::Duration& timeout() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_timeout();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_timeout();
  void set_allocated_timeout(::PROTOBUF_NAMESPACE_ID::Duration* timeout);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_timeout() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_timeout();
  public:
  void unsafe_arena_set_allocated_timeout(
      ::PROTOBUF_NAMESPACE_ID::Duration* timeout);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_timeout();

  // @@protoc_insertion_point(class_scope:proto.rpc.webrtc.v1.RequestHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::proto::rpc::webrtc::v1::Metadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::Duration* timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
};
// -------------------------------------------------------------------

class RequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.webrtc.v1.RequestMessage) */ {
 public:
  inline RequestMessage() : RequestMessage(nullptr) {}
  ~RequestMessage() override;
  explicit PROTOBUF_CONSTEXPR RequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestMessage(const RequestMessage& from);
  RequestMessage(RequestMessage&& from) noexcept
    : RequestMessage() {
    *this = ::std::move(from);
  }

  inline RequestMessage& operator=(const RequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMessage& operator=(RequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestMessage* internal_default_instance() {
    return reinterpret_cast<const RequestMessage*>(
               &_RequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RequestMessage& a, RequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.webrtc.v1.RequestMessage";
  }
  protected:
  explicit RequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketMessageFieldNumber = 2,
    kHasMessageFieldNumber = 1,
    kEosFieldNumber = 3,
  };
  // .proto.rpc.webrtc.v1.PacketMessage packet_message = 2 [json_name = "packetMessage"];
  bool has_packet_message() const;
  private:
  bool _internal_has_packet_message() const;
  public:
  void clear_packet_message();
  const ::proto::rpc::webrtc::v1::PacketMessage& packet_message() const;
  PROTOBUF_NODISCARD ::proto::rpc::webrtc::v1::PacketMessage* release_packet_message();
  ::proto::rpc::webrtc::v1::PacketMessage* mutable_packet_message();
  void set_allocated_packet_message(::proto::rpc::webrtc::v1::PacketMessage* packet_message);
  private:
  const ::proto::rpc::webrtc::v1::PacketMessage& _internal_packet_message() const;
  ::proto::rpc::webrtc::v1::PacketMessage* _internal_mutable_packet_message();
  public:
  void unsafe_arena_set_allocated_packet_message(
      ::proto::rpc::webrtc::v1::PacketMessage* packet_message);
  ::proto::rpc::webrtc::v1::PacketMessage* unsafe_arena_release_packet_message();

  // bool has_message = 1 [json_name = "hasMessage"];
  void clear_has_message();
  bool has_message() const;
  void set_has_message(bool value);
  private:
  bool _internal_has_message() const;
  void _internal_set_has_message(bool value);
  public:

  // bool eos = 3 [json_name = "eos"];
  void clear_eos();
  bool eos() const;
  void set_eos(bool value);
  private:
  bool _internal_eos() const;
  void _internal_set_eos(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.rpc.webrtc.v1.RequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::rpc::webrtc::v1::PacketMessage* packet_message_;
  bool has_message_;
  bool eos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.webrtc.v1.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kHeaders = 2,
    kMessage = 3,
    kTrailers = 4,
    TYPE_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.webrtc.v1.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFieldNumber = 1,
    kHeadersFieldNumber = 2,
    kMessageFieldNumber = 3,
    kTrailersFieldNumber = 4,
  };
  // .proto.rpc.webrtc.v1.Stream stream = 1 [json_name = "stream"];
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::proto::rpc::webrtc::v1::Stream& stream() const;
  PROTOBUF_NODISCARD ::proto::rpc::webrtc::v1::Stream* release_stream();
  ::proto::rpc::webrtc::v1::Stream* mutable_stream();
  void set_allocated_stream(::proto::rpc::webrtc::v1::Stream* stream);
  private:
  const ::proto::rpc::webrtc::v1::Stream& _internal_stream() const;
  ::proto::rpc::webrtc::v1::Stream* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::proto::rpc::webrtc::v1::Stream* stream);
  ::proto::rpc::webrtc::v1::Stream* unsafe_arena_release_stream();

  // .proto.rpc.webrtc.v1.ResponseHeaders headers = 2 [json_name = "headers"];
  bool has_headers() const;
  private:
  bool _internal_has_headers() const;
  public:
  void clear_headers();
  const ::proto::rpc::webrtc::v1::ResponseHeaders& headers() const;
  PROTOBUF_NODISCARD ::proto::rpc::webrtc::v1::ResponseHeaders* release_headers();
  ::proto::rpc::webrtc::v1::ResponseHeaders* mutable_headers();
  void set_allocated_headers(::proto::rpc::webrtc::v1::ResponseHeaders* headers);
  private:
  const ::proto::rpc::webrtc::v1::ResponseHeaders& _internal_headers() const;
  ::proto::rpc::webrtc::v1::ResponseHeaders* _internal_mutable_headers();
  public:
  void unsafe_arena_set_allocated_headers(
      ::proto::rpc::webrtc::v1::ResponseHeaders* headers);
  ::proto::rpc::webrtc::v1::ResponseHeaders* unsafe_arena_release_headers();

  // .proto.rpc.webrtc.v1.ResponseMessage message = 3 [json_name = "message"];
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::proto::rpc::webrtc::v1::ResponseMessage& message() const;
  PROTOBUF_NODISCARD ::proto::rpc::webrtc::v1::ResponseMessage* release_message();
  ::proto::rpc::webrtc::v1::ResponseMessage* mutable_message();
  void set_allocated_message(::proto::rpc::webrtc::v1::ResponseMessage* message);
  private:
  const ::proto::rpc::webrtc::v1::ResponseMessage& _internal_message() const;
  ::proto::rpc::webrtc::v1::ResponseMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::proto::rpc::webrtc::v1::ResponseMessage* message);
  ::proto::rpc::webrtc::v1::ResponseMessage* unsafe_arena_release_message();

  // .proto.rpc.webrtc.v1.ResponseTrailers trailers = 4 [json_name = "trailers"];
  bool has_trailers() const;
  private:
  bool _internal_has_trailers() const;
  public:
  void clear_trailers();
  const ::proto::rpc::webrtc::v1::ResponseTrailers& trailers() const;
  PROTOBUF_NODISCARD ::proto::rpc::webrtc::v1::ResponseTrailers* release_trailers();
  ::proto::rpc::webrtc::v1::ResponseTrailers* mutable_trailers();
  void set_allocated_trailers(::proto::rpc::webrtc::v1::ResponseTrailers* trailers);
  private:
  const ::proto::rpc::webrtc::v1::ResponseTrailers& _internal_trailers() const;
  ::proto::rpc::webrtc::v1::ResponseTrailers* _internal_mutable_trailers();
  public:
  void unsafe_arena_set_allocated_trailers(
      ::proto::rpc::webrtc::v1::ResponseTrailers* trailers);
  ::proto::rpc::webrtc::v1::ResponseTrailers* unsafe_arena_release_trailers();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:proto.rpc.webrtc.v1.Response)
 private:
  class _Internal;
  void set_has_headers();
  void set_has_message();
  void set_has_trailers();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::rpc::webrtc::v1::Stream* stream_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::proto::rpc::webrtc::v1::ResponseHeaders* headers_;
    ::proto::rpc::webrtc::v1::ResponseMessage* message_;
    ::proto::rpc::webrtc::v1::ResponseTrailers* trailers_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
};
// -------------------------------------------------------------------

class ResponseHeaders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.webrtc.v1.ResponseHeaders) */ {
 public:
  inline ResponseHeaders() : ResponseHeaders(nullptr) {}
  ~ResponseHeaders() override;
  explicit PROTOBUF_CONSTEXPR ResponseHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseHeaders(const ResponseHeaders& from);
  ResponseHeaders(ResponseHeaders&& from) noexcept
    : ResponseHeaders() {
    *this = ::std::move(from);
  }

  inline ResponseHeaders& operator=(const ResponseHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseHeaders& operator=(ResponseHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseHeaders* internal_default_instance() {
    return reinterpret_cast<const ResponseHeaders*>(
               &_ResponseHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResponseHeaders& a, ResponseHeaders& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseHeaders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseHeaders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseHeaders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseHeaders& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseHeaders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.webrtc.v1.ResponseHeaders";
  }
  protected:
  explicit ResponseHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .proto.rpc.webrtc.v1.Metadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::proto::rpc::webrtc::v1::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::proto::rpc::webrtc::v1::Metadata* release_metadata();
  ::proto::rpc::webrtc::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::proto::rpc::webrtc::v1::Metadata* metadata);
  private:
  const ::proto::rpc::webrtc::v1::Metadata& _internal_metadata() const;
  ::proto::rpc::webrtc::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::proto::rpc::webrtc::v1::Metadata* metadata);
  ::proto::rpc::webrtc::v1::Metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:proto.rpc.webrtc.v1.ResponseHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::rpc::webrtc::v1::Metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
};
// -------------------------------------------------------------------

class ResponseMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.webrtc.v1.ResponseMessage) */ {
 public:
  inline ResponseMessage() : ResponseMessage(nullptr) {}
  ~ResponseMessage() override;
  explicit PROTOBUF_CONSTEXPR ResponseMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseMessage(const ResponseMessage& from);
  ResponseMessage(ResponseMessage&& from) noexcept
    : ResponseMessage() {
    *this = ::std::move(from);
  }

  inline ResponseMessage& operator=(const ResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMessage& operator=(ResponseMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMessage* internal_default_instance() {
    return reinterpret_cast<const ResponseMessage*>(
               &_ResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ResponseMessage& a, ResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.webrtc.v1.ResponseMessage";
  }
  protected:
  explicit ResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketMessageFieldNumber = 1,
  };
  // .proto.rpc.webrtc.v1.PacketMessage packet_message = 1 [json_name = "packetMessage"];
  bool has_packet_message() const;
  private:
  bool _internal_has_packet_message() const;
  public:
  void clear_packet_message();
  const ::proto::rpc::webrtc::v1::PacketMessage& packet_message() const;
  PROTOBUF_NODISCARD ::proto::rpc::webrtc::v1::PacketMessage* release_packet_message();
  ::proto::rpc::webrtc::v1::PacketMessage* mutable_packet_message();
  void set_allocated_packet_message(::proto::rpc::webrtc::v1::PacketMessage* packet_message);
  private:
  const ::proto::rpc::webrtc::v1::PacketMessage& _internal_packet_message() const;
  ::proto::rpc::webrtc::v1::PacketMessage* _internal_mutable_packet_message();
  public:
  void unsafe_arena_set_allocated_packet_message(
      ::proto::rpc::webrtc::v1::PacketMessage* packet_message);
  ::proto::rpc::webrtc::v1::PacketMessage* unsafe_arena_release_packet_message();

  // @@protoc_insertion_point(class_scope:proto.rpc.webrtc.v1.ResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::rpc::webrtc::v1::PacketMessage* packet_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
};
// -------------------------------------------------------------------

class ResponseTrailers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.webrtc.v1.ResponseTrailers) */ {
 public:
  inline ResponseTrailers() : ResponseTrailers(nullptr) {}
  ~ResponseTrailers() override;
  explicit PROTOBUF_CONSTEXPR ResponseTrailers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseTrailers(const ResponseTrailers& from);
  ResponseTrailers(ResponseTrailers&& from) noexcept
    : ResponseTrailers() {
    *this = ::std::move(from);
  }

  inline ResponseTrailers& operator=(const ResponseTrailers& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseTrailers& operator=(ResponseTrailers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseTrailers& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseTrailers* internal_default_instance() {
    return reinterpret_cast<const ResponseTrailers*>(
               &_ResponseTrailers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResponseTrailers& a, ResponseTrailers& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseTrailers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseTrailers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseTrailers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseTrailers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseTrailers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseTrailers& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseTrailers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.webrtc.v1.ResponseTrailers";
  }
  protected:
  explicit ResponseTrailers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // .google.rpc.Status status = 1 [json_name = "status"];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  PROTOBUF_NODISCARD ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // .proto.rpc.webrtc.v1.Metadata metadata = 2 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::proto::rpc::webrtc::v1::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::proto::rpc::webrtc::v1::Metadata* release_metadata();
  ::proto::rpc::webrtc::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::proto::rpc::webrtc::v1::Metadata* metadata);
  private:
  const ::proto::rpc::webrtc::v1::Metadata& _internal_metadata() const;
  ::proto::rpc::webrtc::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::proto::rpc::webrtc::v1::Metadata* metadata);
  ::proto::rpc::webrtc::v1::Metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:proto.rpc.webrtc.v1.ResponseTrailers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::rpc::Status* status_;
  ::proto::rpc::webrtc::v1::Metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
};
// -------------------------------------------------------------------

class Strings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.webrtc.v1.Strings) */ {
 public:
  inline Strings() : Strings(nullptr) {}
  ~Strings() override;
  explicit PROTOBUF_CONSTEXPR Strings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Strings(const Strings& from);
  Strings(Strings&& from) noexcept
    : Strings() {
    *this = ::std::move(from);
  }

  inline Strings& operator=(const Strings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Strings& operator=(Strings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Strings& default_instance() {
    return *internal_default_instance();
  }
  static inline const Strings* internal_default_instance() {
    return reinterpret_cast<const Strings*>(
               &_Strings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Strings& a, Strings& b) {
    a.Swap(&b);
  }
  inline void Swap(Strings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Strings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Strings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Strings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Strings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Strings& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Strings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.webrtc.v1.Strings";
  }
  protected:
  explicit Strings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // @@protoc_insertion_point(class_scope:proto.rpc.webrtc.v1.Strings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
};
// -------------------------------------------------------------------

class Metadata_MdEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metadata_MdEntry_DoNotUse, 
    std::string, ::proto::rpc::webrtc::v1::Strings,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metadata_MdEntry_DoNotUse, 
    std::string, ::proto::rpc::webrtc::v1::Strings,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Metadata_MdEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Metadata_MdEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Metadata_MdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Metadata_MdEntry_DoNotUse& other);
  static const Metadata_MdEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Metadata_MdEntry_DoNotUse*>(&_Metadata_MdEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "proto.rpc.webrtc.v1.Metadata.MdEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
};

// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.webrtc.v1.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit PROTOBUF_CONSTEXPR Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.webrtc.v1.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMdFieldNumber = 1,
  };
  // map<string, .proto.rpc.webrtc.v1.Strings> md = 1 [json_name = "md"];
  int md_size() const;
  private:
  int _internal_md_size() const;
  public:
  void clear_md();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto::rpc::webrtc::v1::Strings >&
      _internal_md() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto::rpc::webrtc::v1::Strings >*
      _internal_mutable_md();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto::rpc::webrtc::v1::Strings >&
      md() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto::rpc::webrtc::v1::Strings >*
      mutable_md();

  // @@protoc_insertion_point(class_scope:proto.rpc.webrtc.v1.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Metadata_MdEntry_DoNotUse,
      std::string, ::proto::rpc::webrtc::v1::Strings,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> md_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PacketMessage

// bytes data = 1 [json_name = "data"];
inline void PacketMessage::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& PacketMessage::data() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.PacketMessage.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PacketMessage::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.rpc.webrtc.v1.PacketMessage.data)
}
inline std::string* PacketMessage::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.PacketMessage.data)
  return _s;
}
inline const std::string& PacketMessage::_internal_data() const {
  return data_.Get();
}
inline void PacketMessage::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* PacketMessage::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* PacketMessage::release_data() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.PacketMessage.data)
  return data_.Release();
}
inline void PacketMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.PacketMessage.data)
}

// bool eom = 2 [json_name = "eom"];
inline void PacketMessage::clear_eom() {
  eom_ = false;
}
inline bool PacketMessage::_internal_eom() const {
  return eom_;
}
inline bool PacketMessage::eom() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.PacketMessage.eom)
  return _internal_eom();
}
inline void PacketMessage::_internal_set_eom(bool value) {
  
  eom_ = value;
}
inline void PacketMessage::set_eom(bool value) {
  _internal_set_eom(value);
  // @@protoc_insertion_point(field_set:proto.rpc.webrtc.v1.PacketMessage.eom)
}

// -------------------------------------------------------------------

// Stream

// uint64 id = 1 [json_name = "id"];
inline void Stream::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t Stream::_internal_id() const {
  return id_;
}
inline uint64_t Stream::id() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.Stream.id)
  return _internal_id();
}
inline void Stream::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void Stream::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.rpc.webrtc.v1.Stream.id)
}

// -------------------------------------------------------------------

// Request

// .proto.rpc.webrtc.v1.Stream stream = 1 [json_name = "stream"];
inline bool Request::_internal_has_stream() const {
  return this != internal_default_instance() && stream_ != nullptr;
}
inline bool Request::has_stream() const {
  return _internal_has_stream();
}
inline void Request::clear_stream() {
  if (GetArenaForAllocation() == nullptr && stream_ != nullptr) {
    delete stream_;
  }
  stream_ = nullptr;
}
inline const ::proto::rpc::webrtc::v1::Stream& Request::_internal_stream() const {
  const ::proto::rpc::webrtc::v1::Stream* p = stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::rpc::webrtc::v1::Stream&>(
      ::proto::rpc::webrtc::v1::_Stream_default_instance_);
}
inline const ::proto::rpc::webrtc::v1::Stream& Request::stream() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.Request.stream)
  return _internal_stream();
}
inline void Request::unsafe_arena_set_allocated_stream(
    ::proto::rpc::webrtc::v1::Stream* stream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_);
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.Request.stream)
}
inline ::proto::rpc::webrtc::v1::Stream* Request::release_stream() {
  
  ::proto::rpc::webrtc::v1::Stream* temp = stream_;
  stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::rpc::webrtc::v1::Stream* Request::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.Request.stream)
  
  ::proto::rpc::webrtc::v1::Stream* temp = stream_;
  stream_ = nullptr;
  return temp;
}
inline ::proto::rpc::webrtc::v1::Stream* Request::_internal_mutable_stream() {
  
  if (stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::rpc::webrtc::v1::Stream>(GetArenaForAllocation());
    stream_ = p;
  }
  return stream_;
}
inline ::proto::rpc::webrtc::v1::Stream* Request::mutable_stream() {
  ::proto::rpc::webrtc::v1::Stream* _msg = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.Request.stream)
  return _msg;
}
inline void Request::set_allocated_stream(::proto::rpc::webrtc::v1::Stream* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stream_;
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    
  } else {
    
  }
  stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.Request.stream)
}

// .proto.rpc.webrtc.v1.RequestHeaders headers = 2 [json_name = "headers"];
inline bool Request::_internal_has_headers() const {
  return type_case() == kHeaders;
}
inline bool Request::has_headers() const {
  return _internal_has_headers();
}
inline void Request::set_has_headers() {
  _oneof_case_[0] = kHeaders;
}
inline void Request::clear_headers() {
  if (_internal_has_headers()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.headers_;
    }
    clear_has_type();
  }
}
inline ::proto::rpc::webrtc::v1::RequestHeaders* Request::release_headers() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.Request.headers)
  if (_internal_has_headers()) {
    clear_has_type();
    ::proto::rpc::webrtc::v1::RequestHeaders* temp = type_.headers_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.headers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::rpc::webrtc::v1::RequestHeaders& Request::_internal_headers() const {
  return _internal_has_headers()
      ? *type_.headers_
      : reinterpret_cast< ::proto::rpc::webrtc::v1::RequestHeaders&>(::proto::rpc::webrtc::v1::_RequestHeaders_default_instance_);
}
inline const ::proto::rpc::webrtc::v1::RequestHeaders& Request::headers() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.Request.headers)
  return _internal_headers();
}
inline ::proto::rpc::webrtc::v1::RequestHeaders* Request::unsafe_arena_release_headers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.rpc.webrtc.v1.Request.headers)
  if (_internal_has_headers()) {
    clear_has_type();
    ::proto::rpc::webrtc::v1::RequestHeaders* temp = type_.headers_;
    type_.headers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_headers(::proto::rpc::webrtc::v1::RequestHeaders* headers) {
  clear_type();
  if (headers) {
    set_has_headers();
    type_.headers_ = headers;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.Request.headers)
}
inline ::proto::rpc::webrtc::v1::RequestHeaders* Request::_internal_mutable_headers() {
  if (!_internal_has_headers()) {
    clear_type();
    set_has_headers();
    type_.headers_ = CreateMaybeMessage< ::proto::rpc::webrtc::v1::RequestHeaders >(GetArenaForAllocation());
  }
  return type_.headers_;
}
inline ::proto::rpc::webrtc::v1::RequestHeaders* Request::mutable_headers() {
  ::proto::rpc::webrtc::v1::RequestHeaders* _msg = _internal_mutable_headers();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.Request.headers)
  return _msg;
}

// .proto.rpc.webrtc.v1.RequestMessage message = 3 [json_name = "message"];
inline bool Request::_internal_has_message() const {
  return type_case() == kMessage;
}
inline bool Request::has_message() const {
  return _internal_has_message();
}
inline void Request::set_has_message() {
  _oneof_case_[0] = kMessage;
}
inline void Request::clear_message() {
  if (_internal_has_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.message_;
    }
    clear_has_type();
  }
}
inline ::proto::rpc::webrtc::v1::RequestMessage* Request::release_message() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.Request.message)
  if (_internal_has_message()) {
    clear_has_type();
    ::proto::rpc::webrtc::v1::RequestMessage* temp = type_.message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::rpc::webrtc::v1::RequestMessage& Request::_internal_message() const {
  return _internal_has_message()
      ? *type_.message_
      : reinterpret_cast< ::proto::rpc::webrtc::v1::RequestMessage&>(::proto::rpc::webrtc::v1::_RequestMessage_default_instance_);
}
inline const ::proto::rpc::webrtc::v1::RequestMessage& Request::message() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.Request.message)
  return _internal_message();
}
inline ::proto::rpc::webrtc::v1::RequestMessage* Request::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.rpc.webrtc.v1.Request.message)
  if (_internal_has_message()) {
    clear_has_type();
    ::proto::rpc::webrtc::v1::RequestMessage* temp = type_.message_;
    type_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_message(::proto::rpc::webrtc::v1::RequestMessage* message) {
  clear_type();
  if (message) {
    set_has_message();
    type_.message_ = message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.Request.message)
}
inline ::proto::rpc::webrtc::v1::RequestMessage* Request::_internal_mutable_message() {
  if (!_internal_has_message()) {
    clear_type();
    set_has_message();
    type_.message_ = CreateMaybeMessage< ::proto::rpc::webrtc::v1::RequestMessage >(GetArenaForAllocation());
  }
  return type_.message_;
}
inline ::proto::rpc::webrtc::v1::RequestMessage* Request::mutable_message() {
  ::proto::rpc::webrtc::v1::RequestMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.Request.message)
  return _msg;
}

// bool rst_stream = 4 [json_name = "rstStream"];
inline bool Request::_internal_has_rst_stream() const {
  return type_case() == kRstStream;
}
inline bool Request::has_rst_stream() const {
  return _internal_has_rst_stream();
}
inline void Request::set_has_rst_stream() {
  _oneof_case_[0] = kRstStream;
}
inline void Request::clear_rst_stream() {
  if (_internal_has_rst_stream()) {
    type_.rst_stream_ = false;
    clear_has_type();
  }
}
inline bool Request::_internal_rst_stream() const {
  if (_internal_has_rst_stream()) {
    return type_.rst_stream_;
  }
  return false;
}
inline void Request::_internal_set_rst_stream(bool value) {
  if (!_internal_has_rst_stream()) {
    clear_type();
    set_has_rst_stream();
  }
  type_.rst_stream_ = value;
}
inline bool Request::rst_stream() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.Request.rst_stream)
  return _internal_rst_stream();
}
inline void Request::set_rst_stream(bool value) {
  _internal_set_rst_stream(value);
  // @@protoc_insertion_point(field_set:proto.rpc.webrtc.v1.Request.rst_stream)
}

inline bool Request::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Request::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Request::TypeCase Request::type_case() const {
  return Request::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RequestHeaders

// string method = 1 [json_name = "method"];
inline void RequestHeaders::clear_method() {
  method_.ClearToEmpty();
}
inline const std::string& RequestHeaders::method() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.RequestHeaders.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestHeaders::set_method(ArgT0&& arg0, ArgT... args) {
 
 method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.rpc.webrtc.v1.RequestHeaders.method)
}
inline std::string* RequestHeaders::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.RequestHeaders.method)
  return _s;
}
inline const std::string& RequestHeaders::_internal_method() const {
  return method_.Get();
}
inline void RequestHeaders::_internal_set_method(const std::string& value) {
  
  method_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestHeaders::_internal_mutable_method() {
  
  return method_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestHeaders::release_method() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.RequestHeaders.method)
  return method_.Release();
}
inline void RequestHeaders::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.RequestHeaders.method)
}

// .proto.rpc.webrtc.v1.Metadata metadata = 2 [json_name = "metadata"];
inline bool RequestHeaders::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool RequestHeaders::has_metadata() const {
  return _internal_has_metadata();
}
inline void RequestHeaders::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::proto::rpc::webrtc::v1::Metadata& RequestHeaders::_internal_metadata() const {
  const ::proto::rpc::webrtc::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::rpc::webrtc::v1::Metadata&>(
      ::proto::rpc::webrtc::v1::_Metadata_default_instance_);
}
inline const ::proto::rpc::webrtc::v1::Metadata& RequestHeaders::metadata() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.RequestHeaders.metadata)
  return _internal_metadata();
}
inline void RequestHeaders::unsafe_arena_set_allocated_metadata(
    ::proto::rpc::webrtc::v1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.RequestHeaders.metadata)
}
inline ::proto::rpc::webrtc::v1::Metadata* RequestHeaders::release_metadata() {
  
  ::proto::rpc::webrtc::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::rpc::webrtc::v1::Metadata* RequestHeaders::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.RequestHeaders.metadata)
  
  ::proto::rpc::webrtc::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::proto::rpc::webrtc::v1::Metadata* RequestHeaders::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::rpc::webrtc::v1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::proto::rpc::webrtc::v1::Metadata* RequestHeaders::mutable_metadata() {
  ::proto::rpc::webrtc::v1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.RequestHeaders.metadata)
  return _msg;
}
inline void RequestHeaders::set_allocated_metadata(::proto::rpc::webrtc::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.RequestHeaders.metadata)
}

// .google.protobuf.Duration timeout = 3 [json_name = "timeout"];
inline bool RequestHeaders::_internal_has_timeout() const {
  return this != internal_default_instance() && timeout_ != nullptr;
}
inline bool RequestHeaders::has_timeout() const {
  return _internal_has_timeout();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RequestHeaders::_internal_timeout() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RequestHeaders::timeout() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.RequestHeaders.timeout)
  return _internal_timeout();
}
inline void RequestHeaders::unsafe_arena_set_allocated_timeout(
    ::PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.RequestHeaders.timeout)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RequestHeaders::release_timeout() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = timeout_;
  timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RequestHeaders::unsafe_arena_release_timeout() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.RequestHeaders.timeout)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = timeout_;
  timeout_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RequestHeaders::_internal_mutable_timeout() {
  
  if (timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    timeout_ = p;
  }
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RequestHeaders::mutable_timeout() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_timeout();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.RequestHeaders.timeout)
  return _msg;
}
inline void RequestHeaders::set_allocated_timeout(::PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout));
    if (message_arena != submessage_arena) {
      timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.RequestHeaders.timeout)
}

// -------------------------------------------------------------------

// RequestMessage

// bool has_message = 1 [json_name = "hasMessage"];
inline void RequestMessage::clear_has_message() {
  has_message_ = false;
}
inline bool RequestMessage::_internal_has_message() const {
  return has_message_;
}
inline bool RequestMessage::has_message() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.RequestMessage.has_message)
  return _internal_has_message();
}
inline void RequestMessage::_internal_set_has_message(bool value) {
  
  has_message_ = value;
}
inline void RequestMessage::set_has_message(bool value) {
  _internal_set_has_message(value);
  // @@protoc_insertion_point(field_set:proto.rpc.webrtc.v1.RequestMessage.has_message)
}

// .proto.rpc.webrtc.v1.PacketMessage packet_message = 2 [json_name = "packetMessage"];
inline bool RequestMessage::_internal_has_packet_message() const {
  return this != internal_default_instance() && packet_message_ != nullptr;
}
inline bool RequestMessage::has_packet_message() const {
  return _internal_has_packet_message();
}
inline void RequestMessage::clear_packet_message() {
  if (GetArenaForAllocation() == nullptr && packet_message_ != nullptr) {
    delete packet_message_;
  }
  packet_message_ = nullptr;
}
inline const ::proto::rpc::webrtc::v1::PacketMessage& RequestMessage::_internal_packet_message() const {
  const ::proto::rpc::webrtc::v1::PacketMessage* p = packet_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::rpc::webrtc::v1::PacketMessage&>(
      ::proto::rpc::webrtc::v1::_PacketMessage_default_instance_);
}
inline const ::proto::rpc::webrtc::v1::PacketMessage& RequestMessage::packet_message() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.RequestMessage.packet_message)
  return _internal_packet_message();
}
inline void RequestMessage::unsafe_arena_set_allocated_packet_message(
    ::proto::rpc::webrtc::v1::PacketMessage* packet_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packet_message_);
  }
  packet_message_ = packet_message;
  if (packet_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.RequestMessage.packet_message)
}
inline ::proto::rpc::webrtc::v1::PacketMessage* RequestMessage::release_packet_message() {
  
  ::proto::rpc::webrtc::v1::PacketMessage* temp = packet_message_;
  packet_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::rpc::webrtc::v1::PacketMessage* RequestMessage::unsafe_arena_release_packet_message() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.RequestMessage.packet_message)
  
  ::proto::rpc::webrtc::v1::PacketMessage* temp = packet_message_;
  packet_message_ = nullptr;
  return temp;
}
inline ::proto::rpc::webrtc::v1::PacketMessage* RequestMessage::_internal_mutable_packet_message() {
  
  if (packet_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::rpc::webrtc::v1::PacketMessage>(GetArenaForAllocation());
    packet_message_ = p;
  }
  return packet_message_;
}
inline ::proto::rpc::webrtc::v1::PacketMessage* RequestMessage::mutable_packet_message() {
  ::proto::rpc::webrtc::v1::PacketMessage* _msg = _internal_mutable_packet_message();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.RequestMessage.packet_message)
  return _msg;
}
inline void RequestMessage::set_allocated_packet_message(::proto::rpc::webrtc::v1::PacketMessage* packet_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete packet_message_;
  }
  if (packet_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(packet_message);
    if (message_arena != submessage_arena) {
      packet_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_message, submessage_arena);
    }
    
  } else {
    
  }
  packet_message_ = packet_message;
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.RequestMessage.packet_message)
}

// bool eos = 3 [json_name = "eos"];
inline void RequestMessage::clear_eos() {
  eos_ = false;
}
inline bool RequestMessage::_internal_eos() const {
  return eos_;
}
inline bool RequestMessage::eos() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.RequestMessage.eos)
  return _internal_eos();
}
inline void RequestMessage::_internal_set_eos(bool value) {
  
  eos_ = value;
}
inline void RequestMessage::set_eos(bool value) {
  _internal_set_eos(value);
  // @@protoc_insertion_point(field_set:proto.rpc.webrtc.v1.RequestMessage.eos)
}

// -------------------------------------------------------------------

// Response

// .proto.rpc.webrtc.v1.Stream stream = 1 [json_name = "stream"];
inline bool Response::_internal_has_stream() const {
  return this != internal_default_instance() && stream_ != nullptr;
}
inline bool Response::has_stream() const {
  return _internal_has_stream();
}
inline void Response::clear_stream() {
  if (GetArenaForAllocation() == nullptr && stream_ != nullptr) {
    delete stream_;
  }
  stream_ = nullptr;
}
inline const ::proto::rpc::webrtc::v1::Stream& Response::_internal_stream() const {
  const ::proto::rpc::webrtc::v1::Stream* p = stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::rpc::webrtc::v1::Stream&>(
      ::proto::rpc::webrtc::v1::_Stream_default_instance_);
}
inline const ::proto::rpc::webrtc::v1::Stream& Response::stream() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.Response.stream)
  return _internal_stream();
}
inline void Response::unsafe_arena_set_allocated_stream(
    ::proto::rpc::webrtc::v1::Stream* stream) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_);
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.Response.stream)
}
inline ::proto::rpc::webrtc::v1::Stream* Response::release_stream() {
  
  ::proto::rpc::webrtc::v1::Stream* temp = stream_;
  stream_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::rpc::webrtc::v1::Stream* Response::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.Response.stream)
  
  ::proto::rpc::webrtc::v1::Stream* temp = stream_;
  stream_ = nullptr;
  return temp;
}
inline ::proto::rpc::webrtc::v1::Stream* Response::_internal_mutable_stream() {
  
  if (stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::rpc::webrtc::v1::Stream>(GetArenaForAllocation());
    stream_ = p;
  }
  return stream_;
}
inline ::proto::rpc::webrtc::v1::Stream* Response::mutable_stream() {
  ::proto::rpc::webrtc::v1::Stream* _msg = _internal_mutable_stream();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.Response.stream)
  return _msg;
}
inline void Response::set_allocated_stream(::proto::rpc::webrtc::v1::Stream* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stream_;
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    
  } else {
    
  }
  stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.Response.stream)
}

// .proto.rpc.webrtc.v1.ResponseHeaders headers = 2 [json_name = "headers"];
inline bool Response::_internal_has_headers() const {
  return type_case() == kHeaders;
}
inline bool Response::has_headers() const {
  return _internal_has_headers();
}
inline void Response::set_has_headers() {
  _oneof_case_[0] = kHeaders;
}
inline void Response::clear_headers() {
  if (_internal_has_headers()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.headers_;
    }
    clear_has_type();
  }
}
inline ::proto::rpc::webrtc::v1::ResponseHeaders* Response::release_headers() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.Response.headers)
  if (_internal_has_headers()) {
    clear_has_type();
    ::proto::rpc::webrtc::v1::ResponseHeaders* temp = type_.headers_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.headers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::rpc::webrtc::v1::ResponseHeaders& Response::_internal_headers() const {
  return _internal_has_headers()
      ? *type_.headers_
      : reinterpret_cast< ::proto::rpc::webrtc::v1::ResponseHeaders&>(::proto::rpc::webrtc::v1::_ResponseHeaders_default_instance_);
}
inline const ::proto::rpc::webrtc::v1::ResponseHeaders& Response::headers() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.Response.headers)
  return _internal_headers();
}
inline ::proto::rpc::webrtc::v1::ResponseHeaders* Response::unsafe_arena_release_headers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.rpc.webrtc.v1.Response.headers)
  if (_internal_has_headers()) {
    clear_has_type();
    ::proto::rpc::webrtc::v1::ResponseHeaders* temp = type_.headers_;
    type_.headers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_headers(::proto::rpc::webrtc::v1::ResponseHeaders* headers) {
  clear_type();
  if (headers) {
    set_has_headers();
    type_.headers_ = headers;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.Response.headers)
}
inline ::proto::rpc::webrtc::v1::ResponseHeaders* Response::_internal_mutable_headers() {
  if (!_internal_has_headers()) {
    clear_type();
    set_has_headers();
    type_.headers_ = CreateMaybeMessage< ::proto::rpc::webrtc::v1::ResponseHeaders >(GetArenaForAllocation());
  }
  return type_.headers_;
}
inline ::proto::rpc::webrtc::v1::ResponseHeaders* Response::mutable_headers() {
  ::proto::rpc::webrtc::v1::ResponseHeaders* _msg = _internal_mutable_headers();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.Response.headers)
  return _msg;
}

// .proto.rpc.webrtc.v1.ResponseMessage message = 3 [json_name = "message"];
inline bool Response::_internal_has_message() const {
  return type_case() == kMessage;
}
inline bool Response::has_message() const {
  return _internal_has_message();
}
inline void Response::set_has_message() {
  _oneof_case_[0] = kMessage;
}
inline void Response::clear_message() {
  if (_internal_has_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.message_;
    }
    clear_has_type();
  }
}
inline ::proto::rpc::webrtc::v1::ResponseMessage* Response::release_message() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.Response.message)
  if (_internal_has_message()) {
    clear_has_type();
    ::proto::rpc::webrtc::v1::ResponseMessage* temp = type_.message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::rpc::webrtc::v1::ResponseMessage& Response::_internal_message() const {
  return _internal_has_message()
      ? *type_.message_
      : reinterpret_cast< ::proto::rpc::webrtc::v1::ResponseMessage&>(::proto::rpc::webrtc::v1::_ResponseMessage_default_instance_);
}
inline const ::proto::rpc::webrtc::v1::ResponseMessage& Response::message() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.Response.message)
  return _internal_message();
}
inline ::proto::rpc::webrtc::v1::ResponseMessage* Response::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.rpc.webrtc.v1.Response.message)
  if (_internal_has_message()) {
    clear_has_type();
    ::proto::rpc::webrtc::v1::ResponseMessage* temp = type_.message_;
    type_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_message(::proto::rpc::webrtc::v1::ResponseMessage* message) {
  clear_type();
  if (message) {
    set_has_message();
    type_.message_ = message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.Response.message)
}
inline ::proto::rpc::webrtc::v1::ResponseMessage* Response::_internal_mutable_message() {
  if (!_internal_has_message()) {
    clear_type();
    set_has_message();
    type_.message_ = CreateMaybeMessage< ::proto::rpc::webrtc::v1::ResponseMessage >(GetArenaForAllocation());
  }
  return type_.message_;
}
inline ::proto::rpc::webrtc::v1::ResponseMessage* Response::mutable_message() {
  ::proto::rpc::webrtc::v1::ResponseMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.Response.message)
  return _msg;
}

// .proto.rpc.webrtc.v1.ResponseTrailers trailers = 4 [json_name = "trailers"];
inline bool Response::_internal_has_trailers() const {
  return type_case() == kTrailers;
}
inline bool Response::has_trailers() const {
  return _internal_has_trailers();
}
inline void Response::set_has_trailers() {
  _oneof_case_[0] = kTrailers;
}
inline void Response::clear_trailers() {
  if (_internal_has_trailers()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.trailers_;
    }
    clear_has_type();
  }
}
inline ::proto::rpc::webrtc::v1::ResponseTrailers* Response::release_trailers() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.Response.trailers)
  if (_internal_has_trailers()) {
    clear_has_type();
    ::proto::rpc::webrtc::v1::ResponseTrailers* temp = type_.trailers_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.trailers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::proto::rpc::webrtc::v1::ResponseTrailers& Response::_internal_trailers() const {
  return _internal_has_trailers()
      ? *type_.trailers_
      : reinterpret_cast< ::proto::rpc::webrtc::v1::ResponseTrailers&>(::proto::rpc::webrtc::v1::_ResponseTrailers_default_instance_);
}
inline const ::proto::rpc::webrtc::v1::ResponseTrailers& Response::trailers() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.Response.trailers)
  return _internal_trailers();
}
inline ::proto::rpc::webrtc::v1::ResponseTrailers* Response::unsafe_arena_release_trailers() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.rpc.webrtc.v1.Response.trailers)
  if (_internal_has_trailers()) {
    clear_has_type();
    ::proto::rpc::webrtc::v1::ResponseTrailers* temp = type_.trailers_;
    type_.trailers_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_trailers(::proto::rpc::webrtc::v1::ResponseTrailers* trailers) {
  clear_type();
  if (trailers) {
    set_has_trailers();
    type_.trailers_ = trailers;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.Response.trailers)
}
inline ::proto::rpc::webrtc::v1::ResponseTrailers* Response::_internal_mutable_trailers() {
  if (!_internal_has_trailers()) {
    clear_type();
    set_has_trailers();
    type_.trailers_ = CreateMaybeMessage< ::proto::rpc::webrtc::v1::ResponseTrailers >(GetArenaForAllocation());
  }
  return type_.trailers_;
}
inline ::proto::rpc::webrtc::v1::ResponseTrailers* Response::mutable_trailers() {
  ::proto::rpc::webrtc::v1::ResponseTrailers* _msg = _internal_mutable_trailers();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.Response.trailers)
  return _msg;
}

inline bool Response::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Response::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Response::TypeCase Response::type_case() const {
  return Response::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ResponseHeaders

// .proto.rpc.webrtc.v1.Metadata metadata = 1 [json_name = "metadata"];
inline bool ResponseHeaders::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool ResponseHeaders::has_metadata() const {
  return _internal_has_metadata();
}
inline void ResponseHeaders::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::proto::rpc::webrtc::v1::Metadata& ResponseHeaders::_internal_metadata() const {
  const ::proto::rpc::webrtc::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::rpc::webrtc::v1::Metadata&>(
      ::proto::rpc::webrtc::v1::_Metadata_default_instance_);
}
inline const ::proto::rpc::webrtc::v1::Metadata& ResponseHeaders::metadata() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.ResponseHeaders.metadata)
  return _internal_metadata();
}
inline void ResponseHeaders::unsafe_arena_set_allocated_metadata(
    ::proto::rpc::webrtc::v1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.ResponseHeaders.metadata)
}
inline ::proto::rpc::webrtc::v1::Metadata* ResponseHeaders::release_metadata() {
  
  ::proto::rpc::webrtc::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::rpc::webrtc::v1::Metadata* ResponseHeaders::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.ResponseHeaders.metadata)
  
  ::proto::rpc::webrtc::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::proto::rpc::webrtc::v1::Metadata* ResponseHeaders::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::rpc::webrtc::v1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::proto::rpc::webrtc::v1::Metadata* ResponseHeaders::mutable_metadata() {
  ::proto::rpc::webrtc::v1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.ResponseHeaders.metadata)
  return _msg;
}
inline void ResponseHeaders::set_allocated_metadata(::proto::rpc::webrtc::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.ResponseHeaders.metadata)
}

// -------------------------------------------------------------------

// ResponseMessage

// .proto.rpc.webrtc.v1.PacketMessage packet_message = 1 [json_name = "packetMessage"];
inline bool ResponseMessage::_internal_has_packet_message() const {
  return this != internal_default_instance() && packet_message_ != nullptr;
}
inline bool ResponseMessage::has_packet_message() const {
  return _internal_has_packet_message();
}
inline void ResponseMessage::clear_packet_message() {
  if (GetArenaForAllocation() == nullptr && packet_message_ != nullptr) {
    delete packet_message_;
  }
  packet_message_ = nullptr;
}
inline const ::proto::rpc::webrtc::v1::PacketMessage& ResponseMessage::_internal_packet_message() const {
  const ::proto::rpc::webrtc::v1::PacketMessage* p = packet_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::rpc::webrtc::v1::PacketMessage&>(
      ::proto::rpc::webrtc::v1::_PacketMessage_default_instance_);
}
inline const ::proto::rpc::webrtc::v1::PacketMessage& ResponseMessage::packet_message() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.ResponseMessage.packet_message)
  return _internal_packet_message();
}
inline void ResponseMessage::unsafe_arena_set_allocated_packet_message(
    ::proto::rpc::webrtc::v1::PacketMessage* packet_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packet_message_);
  }
  packet_message_ = packet_message;
  if (packet_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.ResponseMessage.packet_message)
}
inline ::proto::rpc::webrtc::v1::PacketMessage* ResponseMessage::release_packet_message() {
  
  ::proto::rpc::webrtc::v1::PacketMessage* temp = packet_message_;
  packet_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::rpc::webrtc::v1::PacketMessage* ResponseMessage::unsafe_arena_release_packet_message() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.ResponseMessage.packet_message)
  
  ::proto::rpc::webrtc::v1::PacketMessage* temp = packet_message_;
  packet_message_ = nullptr;
  return temp;
}
inline ::proto::rpc::webrtc::v1::PacketMessage* ResponseMessage::_internal_mutable_packet_message() {
  
  if (packet_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::rpc::webrtc::v1::PacketMessage>(GetArenaForAllocation());
    packet_message_ = p;
  }
  return packet_message_;
}
inline ::proto::rpc::webrtc::v1::PacketMessage* ResponseMessage::mutable_packet_message() {
  ::proto::rpc::webrtc::v1::PacketMessage* _msg = _internal_mutable_packet_message();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.ResponseMessage.packet_message)
  return _msg;
}
inline void ResponseMessage::set_allocated_packet_message(::proto::rpc::webrtc::v1::PacketMessage* packet_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete packet_message_;
  }
  if (packet_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(packet_message);
    if (message_arena != submessage_arena) {
      packet_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_message, submessage_arena);
    }
    
  } else {
    
  }
  packet_message_ = packet_message;
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.ResponseMessage.packet_message)
}

// -------------------------------------------------------------------

// ResponseTrailers

// .google.rpc.Status status = 1 [json_name = "status"];
inline bool ResponseTrailers::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ResponseTrailers::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& ResponseTrailers::_internal_status() const {
  const ::google::rpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& ResponseTrailers::status() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.ResponseTrailers.status)
  return _internal_status();
}
inline void ResponseTrailers::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.ResponseTrailers.status)
}
inline ::google::rpc::Status* ResponseTrailers::release_status() {
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* ResponseTrailers::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.ResponseTrailers.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* ResponseTrailers::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::google::rpc::Status* ResponseTrailers::mutable_status() {
  ::google::rpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.ResponseTrailers.status)
  return _msg;
}
inline void ResponseTrailers::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.ResponseTrailers.status)
}

// .proto.rpc.webrtc.v1.Metadata metadata = 2 [json_name = "metadata"];
inline bool ResponseTrailers::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool ResponseTrailers::has_metadata() const {
  return _internal_has_metadata();
}
inline void ResponseTrailers::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::proto::rpc::webrtc::v1::Metadata& ResponseTrailers::_internal_metadata() const {
  const ::proto::rpc::webrtc::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::rpc::webrtc::v1::Metadata&>(
      ::proto::rpc::webrtc::v1::_Metadata_default_instance_);
}
inline const ::proto::rpc::webrtc::v1::Metadata& ResponseTrailers::metadata() const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.ResponseTrailers.metadata)
  return _internal_metadata();
}
inline void ResponseTrailers::unsafe_arena_set_allocated_metadata(
    ::proto::rpc::webrtc::v1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.rpc.webrtc.v1.ResponseTrailers.metadata)
}
inline ::proto::rpc::webrtc::v1::Metadata* ResponseTrailers::release_metadata() {
  
  ::proto::rpc::webrtc::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::rpc::webrtc::v1::Metadata* ResponseTrailers::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:proto.rpc.webrtc.v1.ResponseTrailers.metadata)
  
  ::proto::rpc::webrtc::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::proto::rpc::webrtc::v1::Metadata* ResponseTrailers::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::rpc::webrtc::v1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::proto::rpc::webrtc::v1::Metadata* ResponseTrailers::mutable_metadata() {
  ::proto::rpc::webrtc::v1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.ResponseTrailers.metadata)
  return _msg;
}
inline void ResponseTrailers::set_allocated_metadata(::proto::rpc::webrtc::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.ResponseTrailers.metadata)
}

// -------------------------------------------------------------------

// Strings

// repeated string values = 1 [json_name = "values"];
inline int Strings::_internal_values_size() const {
  return values_.size();
}
inline int Strings::values_size() const {
  return _internal_values_size();
}
inline void Strings::clear_values() {
  values_.Clear();
}
inline std::string* Strings::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:proto.rpc.webrtc.v1.Strings.values)
  return _s;
}
inline const std::string& Strings::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& Strings::values(int index) const {
  // @@protoc_insertion_point(field_get:proto.rpc.webrtc.v1.Strings.values)
  return _internal_values(index);
}
inline std::string* Strings::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:proto.rpc.webrtc.v1.Strings.values)
  return values_.Mutable(index);
}
inline void Strings::set_values(int index, const std::string& value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto.rpc.webrtc.v1.Strings.values)
}
inline void Strings::set_values(int index, std::string&& value) {
  values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto.rpc.webrtc.v1.Strings.values)
}
inline void Strings::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.rpc.webrtc.v1.Strings.values)
}
inline void Strings::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.rpc.webrtc.v1.Strings.values)
}
inline std::string* Strings::_internal_add_values() {
  return values_.Add();
}
inline void Strings::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.rpc.webrtc.v1.Strings.values)
}
inline void Strings::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.rpc.webrtc.v1.Strings.values)
}
inline void Strings::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.rpc.webrtc.v1.Strings.values)
}
inline void Strings::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.rpc.webrtc.v1.Strings.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Strings::values() const {
  // @@protoc_insertion_point(field_list:proto.rpc.webrtc.v1.Strings.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Strings::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:proto.rpc.webrtc.v1.Strings.values)
  return &values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Metadata

// map<string, .proto.rpc.webrtc.v1.Strings> md = 1 [json_name = "md"];
inline int Metadata::_internal_md_size() const {
  return md_.size();
}
inline int Metadata::md_size() const {
  return _internal_md_size();
}
inline void Metadata::clear_md() {
  md_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto::rpc::webrtc::v1::Strings >&
Metadata::_internal_md() const {
  return md_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto::rpc::webrtc::v1::Strings >&
Metadata::md() const {
  // @@protoc_insertion_point(field_map:proto.rpc.webrtc.v1.Metadata.md)
  return _internal_md();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto::rpc::webrtc::v1::Strings >*
Metadata::_internal_mutable_md() {
  return md_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto::rpc::webrtc::v1::Strings >*
Metadata::mutable_md() {
  // @@protoc_insertion_point(field_mutable_map:proto.rpc.webrtc.v1.Metadata.md)
  return _internal_mutable_md();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace webrtc
}  // namespace rpc
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto
