// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/rpc/webrtc/v1/signaling.proto
#ifndef GRPC_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto__INCLUDED
#define GRPC_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto__INCLUDED

#include "proto/rpc/webrtc/v1/signaling.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace proto {
namespace rpc {
namespace webrtc {
namespace v1 {

// A SignalingService provides the means to have one client "call" another
// client using the Session Description Protocol (SDP).
class SignalingService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.rpc.webrtc.v1.SignalingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Call makes an offer to a client that it expects an answer to. The host
    // of the client in question should be identified in the rpc-host metadata
    // field.
    // Note: Based on how this is a server streaming responnse to the caller,
    // we do not have a good way of knowing if the caller has disappeared.
    // Depending on answerer timeouts and concurrency limits, this can result in
    // hangs on the answerer waiting for a connection to establish, which in turn
    // can result in the caller waiting for an answerer to be listening.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::rpc::webrtc::v1::CallResponse>> Call(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::rpc::webrtc::v1::CallResponse>>(CallRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::rpc::webrtc::v1::CallResponse>> AsyncCall(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::rpc::webrtc::v1::CallResponse>>(AsyncCallRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::rpc::webrtc::v1::CallResponse>> PrepareAsyncCall(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::rpc::webrtc::v1::CallResponse>>(PrepareAsyncCallRaw(context, request, cq));
    }
    // CallUpdate is used to send additional info in relation to a Call.
    // The host of the client for the call in question should be identified
    // in the rpc-host metadata field.
    // In a world where https://github.com/grpc/grpc-web/issues/24 is fixed,
    // this should be removed in favor of a bidirectional stream on Call.
    virtual ::grpc::Status CallUpdate(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest& request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::webrtc::v1::CallUpdateResponse>> AsyncCallUpdate(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::webrtc::v1::CallUpdateResponse>>(AsyncCallUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::webrtc::v1::CallUpdateResponse>> PrepareAsyncCallUpdate(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::webrtc::v1::CallUpdateResponse>>(PrepareAsyncCallUpdateRaw(context, request, cq));
    }
    // Answer sets up an answering service where the caller answers call offers
    // and responds with answers.
    // The host(s) to answer for should be in the rpc-host metadata field.
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>> Answer(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>>(AnswerRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>> AsyncAnswer(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>>(AsyncAnswerRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>> PrepareAsyncAnswer(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>>(PrepareAsyncAnswerRaw(context, cq));
    }
    // OptionalWebRTCConfig returns any WebRTC configuration the caller may want to use.
    // The host to get a config for must be in the rpc-host metadata field.
    virtual ::grpc::Status OptionalWebRTCConfig(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest& request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>> AsyncOptionalWebRTCConfig(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>>(AsyncOptionalWebRTCConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>> PrepareAsyncOptionalWebRTCConfig(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>>(PrepareAsyncOptionalWebRTCConfigRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Call makes an offer to a client that it expects an answer to. The host
      // of the client in question should be identified in the rpc-host metadata
      // field.
      // Note: Based on how this is a server streaming responnse to the caller,
      // we do not have a good way of knowing if the caller has disappeared.
      // Depending on answerer timeouts and concurrency limits, this can result in
      // hangs on the answerer waiting for a connection to establish, which in turn
      // can result in the caller waiting for an answerer to be listening.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Call(::grpc::ClientContext* context, ::proto::rpc::webrtc::v1::CallRequest* request, ::grpc::ClientReadReactor< ::proto::rpc::webrtc::v1::CallResponse>* reactor) = 0;
      #else
      virtual void Call(::grpc::ClientContext* context, ::proto::rpc::webrtc::v1::CallRequest* request, ::grpc::experimental::ClientReadReactor< ::proto::rpc::webrtc::v1::CallResponse>* reactor) = 0;
      #endif
      // CallUpdate is used to send additional info in relation to a Call.
      // The host of the client for the call in question should be identified
      // in the rpc-host metadata field.
      // In a world where https://github.com/grpc/grpc-web/issues/24 is fixed,
      // this should be removed in favor of a bidirectional stream on Call.
      virtual void CallUpdate(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CallUpdate(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CallUpdate(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CallUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CallUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Answer sets up an answering service where the caller answers call offers
      // and responds with answers.
      // The host(s) to answer for should be in the rpc-host metadata field.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Answer(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::rpc::webrtc::v1::AnswerResponse,::proto::rpc::webrtc::v1::AnswerRequest>* reactor) = 0;
      #else
      virtual void Answer(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::rpc::webrtc::v1::AnswerResponse,::proto::rpc::webrtc::v1::AnswerRequest>* reactor) = 0;
      #endif
      // OptionalWebRTCConfig returns any WebRTC configuration the caller may want to use.
      // The host to get a config for must be in the rpc-host metadata field.
      virtual void OptionalWebRTCConfig(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OptionalWebRTCConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OptionalWebRTCConfig(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OptionalWebRTCConfig(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void OptionalWebRTCConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void OptionalWebRTCConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::proto::rpc::webrtc::v1::CallResponse>* CallRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::rpc::webrtc::v1::CallResponse>* AsyncCallRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::rpc::webrtc::v1::CallResponse>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::webrtc::v1::CallUpdateResponse>* AsyncCallUpdateRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::webrtc::v1::CallUpdateResponse>* PrepareAsyncCallUpdateRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>* AnswerRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>* AsyncAnswerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>* PrepareAsyncAnswerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>* AsyncOptionalWebRTCConfigRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>* PrepareAsyncOptionalWebRTCConfigRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::proto::rpc::webrtc::v1::CallResponse>> Call(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::rpc::webrtc::v1::CallResponse>>(CallRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::rpc::webrtc::v1::CallResponse>> AsyncCall(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::rpc::webrtc::v1::CallResponse>>(AsyncCallRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::rpc::webrtc::v1::CallResponse>> PrepareAsyncCall(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::rpc::webrtc::v1::CallResponse>>(PrepareAsyncCallRaw(context, request, cq));
    }
    ::grpc::Status CallUpdate(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest& request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::webrtc::v1::CallUpdateResponse>> AsyncCallUpdate(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::webrtc::v1::CallUpdateResponse>>(AsyncCallUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::webrtc::v1::CallUpdateResponse>> PrepareAsyncCallUpdate(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::webrtc::v1::CallUpdateResponse>>(PrepareAsyncCallUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>> Answer(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>>(AnswerRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>> AsyncAnswer(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>>(AsyncAnswerRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>> PrepareAsyncAnswer(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>>(PrepareAsyncAnswerRaw(context, cq));
    }
    ::grpc::Status OptionalWebRTCConfig(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest& request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>> AsyncOptionalWebRTCConfig(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>>(AsyncOptionalWebRTCConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>> PrepareAsyncOptionalWebRTCConfig(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>>(PrepareAsyncOptionalWebRTCConfigRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Call(::grpc::ClientContext* context, ::proto::rpc::webrtc::v1::CallRequest* request, ::grpc::ClientReadReactor< ::proto::rpc::webrtc::v1::CallResponse>* reactor) override;
      #else
      void Call(::grpc::ClientContext* context, ::proto::rpc::webrtc::v1::CallRequest* request, ::grpc::experimental::ClientReadReactor< ::proto::rpc::webrtc::v1::CallResponse>* reactor) override;
      #endif
      void CallUpdate(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void CallUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CallUpdate(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CallUpdate(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CallUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CallUpdate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Answer(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::rpc::webrtc::v1::AnswerResponse,::proto::rpc::webrtc::v1::AnswerRequest>* reactor) override;
      #else
      void Answer(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::proto::rpc::webrtc::v1::AnswerResponse,::proto::rpc::webrtc::v1::AnswerRequest>* reactor) override;
      #endif
      void OptionalWebRTCConfig(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void OptionalWebRTCConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OptionalWebRTCConfig(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OptionalWebRTCConfig(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void OptionalWebRTCConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void OptionalWebRTCConfig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::proto::rpc::webrtc::v1::CallResponse>* CallRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallRequest& request) override;
    ::grpc::ClientAsyncReader< ::proto::rpc::webrtc::v1::CallResponse>* AsyncCallRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::rpc::webrtc::v1::CallResponse>* PrepareAsyncCallRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::rpc::webrtc::v1::CallUpdateResponse>* AsyncCallUpdateRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::rpc::webrtc::v1::CallUpdateResponse>* PrepareAsyncCallUpdateRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>* AnswerRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>* AsyncAnswerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>* PrepareAsyncAnswerRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>* AsyncOptionalWebRTCConfigRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>* PrepareAsyncOptionalWebRTCConfigRaw(::grpc::ClientContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Call_;
    const ::grpc::internal::RpcMethod rpcmethod_CallUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_Answer_;
    const ::grpc::internal::RpcMethod rpcmethod_OptionalWebRTCConfig_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Call makes an offer to a client that it expects an answer to. The host
    // of the client in question should be identified in the rpc-host metadata
    // field.
    // Note: Based on how this is a server streaming responnse to the caller,
    // we do not have a good way of knowing if the caller has disappeared.
    // Depending on answerer timeouts and concurrency limits, this can result in
    // hangs on the answerer waiting for a connection to establish, which in turn
    // can result in the caller waiting for an answerer to be listening.
    virtual ::grpc::Status Call(::grpc::ServerContext* context, const ::proto::rpc::webrtc::v1::CallRequest* request, ::grpc::ServerWriter< ::proto::rpc::webrtc::v1::CallResponse>* writer);
    // CallUpdate is used to send additional info in relation to a Call.
    // The host of the client for the call in question should be identified
    // in the rpc-host metadata field.
    // In a world where https://github.com/grpc/grpc-web/issues/24 is fixed,
    // this should be removed in favor of a bidirectional stream on Call.
    virtual ::grpc::Status CallUpdate(::grpc::ServerContext* context, const ::proto::rpc::webrtc::v1::CallUpdateRequest* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response);
    // Answer sets up an answering service where the caller answers call offers
    // and responds with answers.
    // The host(s) to answer for should be in the rpc-host metadata field.
    virtual ::grpc::Status Answer(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::proto::rpc::webrtc::v1::AnswerRequest, ::proto::rpc::webrtc::v1::AnswerResponse>* stream);
    // OptionalWebRTCConfig returns any WebRTC configuration the caller may want to use.
    // The host to get a config for must be in the rpc-host metadata field.
    virtual ::grpc::Status OptionalWebRTCConfig(::grpc::ServerContext* context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Call() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::webrtc::v1::CallResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::proto::rpc::webrtc::v1::CallRequest* request, ::grpc::ServerAsyncWriter< ::proto::rpc::webrtc::v1::CallResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CallUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CallUpdate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CallUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallUpdate(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallUpdateRequest* /*request*/, ::proto::rpc::webrtc::v1::CallUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallUpdate(::grpc::ServerContext* context, ::proto::rpc::webrtc::v1::CallUpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::rpc::webrtc::v1::CallUpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Answer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Answer() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Answer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Answer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::webrtc::v1::AnswerRequest, ::proto::rpc::webrtc::v1::AnswerResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnswer(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::proto::rpc::webrtc::v1::AnswerRequest, ::proto::rpc::webrtc::v1::AnswerResponse>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OptionalWebRTCConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OptionalWebRTCConfig() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_OptionalWebRTCConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptionalWebRTCConfig(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* /*request*/, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOptionalWebRTCConfig(::grpc::ServerContext* context, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Call<WithAsyncMethod_CallUpdate<WithAsyncMethod_Answer<WithAsyncMethod_OptionalWebRTCConfig<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Call() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::proto::rpc::webrtc::v1::CallRequest, ::proto::rpc::webrtc::v1::CallResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::rpc::webrtc::v1::CallRequest* request) { return this->Call(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::webrtc::v1::CallResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::proto::rpc::webrtc::v1::CallResponse>* Call(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::proto::rpc::webrtc::v1::CallResponse>* Call(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CallUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CallUpdate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::rpc::webrtc::v1::CallUpdateRequest, ::proto::rpc::webrtc::v1::CallUpdateResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::rpc::webrtc::v1::CallUpdateRequest* request, ::proto::rpc::webrtc::v1::CallUpdateResponse* response) { return this->CallUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_CallUpdate(
        ::grpc::experimental::MessageAllocator< ::proto::rpc::webrtc::v1::CallUpdateRequest, ::proto::rpc::webrtc::v1::CallUpdateResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::rpc::webrtc::v1::CallUpdateRequest, ::proto::rpc::webrtc::v1::CallUpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CallUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallUpdate(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallUpdateRequest* /*request*/, ::proto::rpc::webrtc::v1::CallUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CallUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallUpdateRequest* /*request*/, ::proto::rpc::webrtc::v1::CallUpdateResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CallUpdate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallUpdateRequest* /*request*/, ::proto::rpc::webrtc::v1::CallUpdateResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Answer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Answer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Answer(context); }));
    }
    ~ExperimentalWithCallbackMethod_Answer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Answer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::webrtc::v1::AnswerRequest, ::proto::rpc::webrtc::v1::AnswerResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>* Answer(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::proto::rpc::webrtc::v1::AnswerResponse, ::proto::rpc::webrtc::v1::AnswerRequest>* Answer(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_OptionalWebRTCConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_OptionalWebRTCConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* request, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* response) { return this->OptionalWebRTCConfig(context, request, response); }));}
    void SetMessageAllocatorFor_OptionalWebRTCConfig(
        ::grpc::experimental::MessageAllocator< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_OptionalWebRTCConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptionalWebRTCConfig(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* /*request*/, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OptionalWebRTCConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* /*request*/, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OptionalWebRTCConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* /*request*/, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Call<ExperimentalWithCallbackMethod_CallUpdate<ExperimentalWithCallbackMethod_Answer<ExperimentalWithCallbackMethod_OptionalWebRTCConfig<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Call<ExperimentalWithCallbackMethod_CallUpdate<ExperimentalWithCallbackMethod_Answer<ExperimentalWithCallbackMethod_OptionalWebRTCConfig<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Call() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::webrtc::v1::CallResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CallUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CallUpdate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CallUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallUpdate(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallUpdateRequest* /*request*/, ::proto::rpc::webrtc::v1::CallUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Answer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Answer() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Answer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Answer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::webrtc::v1::AnswerRequest, ::proto::rpc::webrtc::v1::AnswerResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OptionalWebRTCConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OptionalWebRTCConfig() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_OptionalWebRTCConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptionalWebRTCConfig(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* /*request*/, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Call() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::webrtc::v1::CallResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCall(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CallUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CallUpdate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CallUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallUpdate(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallUpdateRequest* /*request*/, ::proto::rpc::webrtc::v1::CallUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Answer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Answer() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Answer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Answer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::webrtc::v1::AnswerRequest, ::proto::rpc::webrtc::v1::AnswerResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnswer(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OptionalWebRTCConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OptionalWebRTCConfig() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_OptionalWebRTCConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptionalWebRTCConfig(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* /*request*/, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOptionalWebRTCConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Call() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Call(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::webrtc::v1::CallResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Call(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Call(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CallUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CallUpdate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CallUpdate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CallUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallUpdate(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallUpdateRequest* /*request*/, ::proto::rpc::webrtc::v1::CallUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CallUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CallUpdate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Answer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Answer() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context) { return this->Answer(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_Answer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Answer(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::webrtc::v1::AnswerRequest, ::proto::rpc::webrtc::v1::AnswerResponse>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Answer(
      ::grpc::CallbackServerContext* /*context*/)
    #else
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Answer(
      ::grpc::experimental::CallbackServerContext* /*context*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_OptionalWebRTCConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_OptionalWebRTCConfig() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OptionalWebRTCConfig(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_OptionalWebRTCConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OptionalWebRTCConfig(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* /*request*/, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* OptionalWebRTCConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* OptionalWebRTCConfig(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CallUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CallUpdate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::rpc::webrtc::v1::CallUpdateRequest, ::proto::rpc::webrtc::v1::CallUpdateResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::proto::rpc::webrtc::v1::CallUpdateRequest, ::proto::rpc::webrtc::v1::CallUpdateResponse>* streamer) {
                       return this->StreamedCallUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CallUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CallUpdate(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallUpdateRequest* /*request*/, ::proto::rpc::webrtc::v1::CallUpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::rpc::webrtc::v1::CallUpdateRequest,::proto::rpc::webrtc::v1::CallUpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OptionalWebRTCConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OptionalWebRTCConfig() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>* streamer) {
                       return this->StreamedOptionalWebRTCConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OptionalWebRTCConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OptionalWebRTCConfig(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest* /*request*/, ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOptionalWebRTCConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest,::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CallUpdate<WithStreamedUnaryMethod_OptionalWebRTCConfig<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Call : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Call() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::proto::rpc::webrtc::v1::CallRequest, ::proto::rpc::webrtc::v1::CallResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::proto::rpc::webrtc::v1::CallRequest, ::proto::rpc::webrtc::v1::CallResponse>* streamer) {
                       return this->StreamedCall(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Call() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Call(::grpc::ServerContext* /*context*/, const ::proto::rpc::webrtc::v1::CallRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::webrtc::v1::CallResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedCall(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::rpc::webrtc::v1::CallRequest,::proto::rpc::webrtc::v1::CallResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Call<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Call<WithStreamedUnaryMethod_CallUpdate<WithStreamedUnaryMethod_OptionalWebRTCConfig<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace webrtc
}  // namespace rpc
}  // namespace proto


#endif  // GRPC_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto__INCLUDED
