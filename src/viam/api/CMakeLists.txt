set(PROTO_GEN_DIR ${CMAKE_CURRENT_SOURCE_DIR})


if (VIAMCPPSDK_USE_DYNAMIC_PROTOS)
  # reads in buf.lock and grabs the commit hashes supported by this version of C++ SDK
  if (NOT EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/buf.lock)
    message(FATAL_ERROR "No `buf.lock` file was found in the src/viam/api directory")
  endif()
  file(READ ${CMAKE_CURRENT_SOURCE_DIR}/buf.lock lockfile)

  string(REGEX MATCH "googleapis[ \t\r\n]*commit: ([A-Za-z0-9_]*)" _ ${lockfile})
  set(BUF_GOOGLE_API_SOURCE buf.build/googleapis/googleapis:${CMAKE_MATCH_1})

  string(REGEX MATCH "goutils[ \t\r\n]*commit: ([A-Za-z0-9_]*)" _ ${lockfile})
  set(BUF_VIAM_GOUTILS_SOURCE buf.build/viamrobotics/goutils:${CMAKE_MATCH_1})

  string(REGEX MATCH "api[ \t\r\n]*commit: ([A-Za-z0-9_]*)" _ ${lockfile})
  set(BUF_VIAM_API_SOURCE buf.build/viamrobotics/api:${CMAKE_MATCH_1})
endif()

set(BUF_PROTO_COMPONENTS
  app/mltraining
  app/packages
  app/v1
  common
  component
  module
  robot
  service
  tagger
)

# If we are using local proto generation, rework the
# `BUF_VIAM_API_SOURCE` and `BUF_PROTO_COMPONENTS` as required to make
# use of the API repo as positioned relative to us.
if (VIAMCPPSDK_USE_LOCAL_PROTOS)
  if (NOT VIAMCPPSDK_USE_DYNAMIC_PROTOS)
    message(FATAL_ERROR "The VIAMCPPSDK_USE_LOCAL_PROTOS option requires VIAMCPPSDK_USE_DYNAMIC_PROTOS=ON")
  endif()

  if (NOT EXISTS ${PROJECT_SOURCE_DIR}/../buf.work.yaml)
    message(FATAL_ERROR "No `buf.work.yaml` file was found in the parent directory")
  endif()

  if (NOT EXISTS ${PROJECT_SOURCE_DIR}/../api/proto/viam)
    message(FATAL_ERROR "No Viam api repository was found in the parent directory")
  endif()

  file(RELATIVE_PATH BUF_LOCAL_PROTO_PATH ${CMAKE_CURRENT_BINARY_DIR} ${PROJECT_SOURCE_DIR}/..)
  set(BUF_VIAM_API_SOURCE ${BUF_LOCAL_PROTO_PATH})
  list(TRANSFORM BUF_PROTO_COMPONENTS PREPEND ${BUF_LOCAL_PROTO_PATH}/api/proto/viam/)
endif()

list(JOIN BUF_PROTO_COMPONENTS , BUF_PROTO_COMPONENTS_JOINED)

if (VIAMCPPSDK_USE_DYNAMIC_PROTOS)

  # Look for the `buf` command in the usual places, and use it if
  # found. If we can't find it, try to download it and use that.
  #
  # TODO: File an upstream issue with `buf.build` to add
  # `find_package` support for it, then use it.
  #
  find_program(BUF_COMMAND buf)
  if (NOT BUF_COMMAND)
    file(
      DOWNLOAD
      https://github.com/bufbuild/buf/releases/latest/download/buf-${CMAKE_HOST_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_PROCESSOR}
      ${CMAKE_CURRENT_BINARY_DIR}/buf_latest
      STATUS buf_status
    )
    list(GET buf_status 0 buf_status_code)
    list(GET buf_status 1 buf_status_string)

    if(NOT buf_status_code EQUAL 0)
      message(FATAL_ERROR "No local `buf` program found (try setting PATH?) and failed to download: ${buf_status_string}")
    endif()

    set(BUF_COMMAND ${CMAKE_CURRENT_BINARY_DIR}/buf_latest)
    file(CHMOD ${BUF_COMMAND} PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE)
  endif()

  # TODO: IDeally we could just generate to `CMAKE_CURRENT_BINARY_DIR`
  # and everything would work just fine. However, that directory also
  # has intermediate cmake state in it, so we can't use it as a source
  # for a directory copy to update the static protos, as we do
  # below. By creating a `gen` directory, we have an isolated root
  # that can be safely directory copied over the static
  # protos. However, we need the include prefix on there to so
  # includes work. If we find a way to get the list of generated
  # files, then we can avoid doing a directory copy entirely, and then
  # we can remove the subdirectory here.
  set(PROTO_GEN_DIR ${CMAKE_CURRENT_BINARY_DIR}/gen/viam/api)

  # Buf only goes back to 1.41.1 for generation against their "custom
  # remote" registry (see https://buf.build/grpc/plugins/cpp), and we
  # need a differently shaped file to do local generation if we must
  # handle versions older than that. For versions newer than 1.51,
  # "remote plugins" seem to be the thing to use for now.
  #
  # TODO: Should we have an option to always do local generation so
  # offline development always works?
  #
  if ((NOT VIAMCPPSDK_OFFLINE_PROTO_GENERATION) AND VIAMCPPSDK_BUF_REMOTE_PLUGIN_SUPPORTED)
    configure_file(
      config/buf.gen.remote.plugin.yaml.in
      buf.gen.yaml
    )
  else()
    configure_file(
      config/buf.gen.local.yaml.in
      buf.gen.yaml
    )
  endif()

  add_custom_command(
    OUTPUT
    # Unfortunately, there isn't a good way to know in advance what
    # files will be generated by invoking `buf generate`.  Instead, we
    # just list the files here that we know we need in the
    # `add_library` call below. But we will find in practice that more
    # files are generated.
    #
    # TODO: We reiterate this list below in `add_library`. Can we DRY
    # it sanely? We would need to filter out (or add in) the headers.

    # This list is needed for the core library.
    ${PROTO_GEN_DIR}/app/mltraining/v1/ml_training.pb.cc
    ${PROTO_GEN_DIR}/app/mltraining/v1/ml_training.pb.h
    ${PROTO_GEN_DIR}/app/packages/v1/packages.pb.cc
    ${PROTO_GEN_DIR}/app/packages/v1/packages.pb.h
    ${PROTO_GEN_DIR}/app/v1/app.grpc.pb.cc
    ${PROTO_GEN_DIR}/app/v1/app.grpc.pb.h
    ${PROTO_GEN_DIR}/app/v1/app.pb.cc
    ${PROTO_GEN_DIR}/app/v1/app.pb.h
    ${PROTO_GEN_DIR}/app/v1/robot.grpc.pb.cc
    ${PROTO_GEN_DIR}/app/v1/robot.grpc.pb.h
    ${PROTO_GEN_DIR}/app/v1/robot.pb.cc
    ${PROTO_GEN_DIR}/app/v1/robot.pb.h
    ${PROTO_GEN_DIR}/common/v1/common.grpc.pb.cc
    ${PROTO_GEN_DIR}/common/v1/common.grpc.pb.h
    ${PROTO_GEN_DIR}/common/v1/common.pb.cc
    ${PROTO_GEN_DIR}/common/v1/common.pb.h
    ${PROTO_GEN_DIR}/component/arm/v1/arm.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/arm/v1/arm.grpc.pb.h
    ${PROTO_GEN_DIR}/component/arm/v1/arm.pb.cc
    ${PROTO_GEN_DIR}/component/arm/v1/arm.pb.h
    ${PROTO_GEN_DIR}/component/base/v1/base.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/base/v1/base.grpc.pb.h
    ${PROTO_GEN_DIR}/component/base/v1/base.pb.cc
    ${PROTO_GEN_DIR}/component/base/v1/base.pb.h
    ${PROTO_GEN_DIR}/component/board/v1/board.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/board/v1/board.grpc.pb.h
    ${PROTO_GEN_DIR}/component/board/v1/board.pb.cc
    ${PROTO_GEN_DIR}/component/board/v1/board.pb.h
    ${PROTO_GEN_DIR}/component/camera/v1/camera.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/camera/v1/camera.grpc.pb.h
    ${PROTO_GEN_DIR}/component/camera/v1/camera.pb.cc
    ${PROTO_GEN_DIR}/component/camera/v1/camera.pb.h
    ${PROTO_GEN_DIR}/component/encoder/v1/encoder.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/encoder/v1/encoder.grpc.pb.h
    ${PROTO_GEN_DIR}/component/encoder/v1/encoder.pb.cc
    ${PROTO_GEN_DIR}/component/encoder/v1/encoder.pb.h
    ${PROTO_GEN_DIR}/component/gantry/v1/gantry.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/gantry/v1/gantry.grpc.pb.h
    ${PROTO_GEN_DIR}/component/gantry/v1/gantry.pb.cc
    ${PROTO_GEN_DIR}/component/gantry/v1/gantry.pb.h
    ${PROTO_GEN_DIR}/component/generic/v1/generic.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/generic/v1/generic.grpc.pb.h
    ${PROTO_GEN_DIR}/component/generic/v1/generic.pb.cc
    ${PROTO_GEN_DIR}/component/generic/v1/generic.pb.h
    ${PROTO_GEN_DIR}/component/gripper/v1/gripper.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/gripper/v1/gripper.grpc.pb.h
    ${PROTO_GEN_DIR}/component/gripper/v1/gripper.pb.cc
    ${PROTO_GEN_DIR}/component/gripper/v1/gripper.pb.h
    ${PROTO_GEN_DIR}/component/motor/v1/motor.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/motor/v1/motor.grpc.pb.h
    ${PROTO_GEN_DIR}/component/motor/v1/motor.pb.cc
    ${PROTO_GEN_DIR}/component/motor/v1/motor.pb.h
    ${PROTO_GEN_DIR}/component/movementsensor/v1/movementsensor.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/movementsensor/v1/movementsensor.grpc.pb.h
    ${PROTO_GEN_DIR}/component/movementsensor/v1/movementsensor.pb.cc
    ${PROTO_GEN_DIR}/component/movementsensor/v1/movementsensor.pb.h
    ${PROTO_GEN_DIR}/component/posetracker/v1/pose_tracker.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/posetracker/v1/pose_tracker.grpc.pb.h
    ${PROTO_GEN_DIR}/component/posetracker/v1/pose_tracker.pb.cc
    ${PROTO_GEN_DIR}/component/posetracker/v1/pose_tracker.pb.h
    ${PROTO_GEN_DIR}/component/powersensor/v1/powersensor.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/powersensor/v1/powersensor.grpc.pb.h
    ${PROTO_GEN_DIR}/component/powersensor/v1/powersensor.pb.cc
    ${PROTO_GEN_DIR}/component/powersensor/v1/powersensor.pb.h
    ${PROTO_GEN_DIR}/component/sensor/v1/sensor.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/sensor/v1/sensor.grpc.pb.h
    ${PROTO_GEN_DIR}/component/sensor/v1/sensor.pb.cc
    ${PROTO_GEN_DIR}/component/sensor/v1/sensor.pb.h
    ${PROTO_GEN_DIR}/component/servo/v1/servo.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/servo/v1/servo.grpc.pb.h
    ${PROTO_GEN_DIR}/component/servo/v1/servo.pb.cc
    ${PROTO_GEN_DIR}/component/servo/v1/servo.pb.h
    ${PROTO_GEN_DIR}/google/api/annotations.pb.cc
    ${PROTO_GEN_DIR}/google/api/annotations.pb.h
    ${PROTO_GEN_DIR}/google/api/httpbody.pb.cc
    ${PROTO_GEN_DIR}/google/api/httpbody.pb.h
    ${PROTO_GEN_DIR}/google/api/http.pb.cc
    ${PROTO_GEN_DIR}/google/api/http.pb.h
    ${PROTO_GEN_DIR}/google/rpc/status.pb.cc
    ${PROTO_GEN_DIR}/google/rpc/status.pb.h
    ${PROTO_GEN_DIR}/module/v1/module.grpc.pb.cc
    ${PROTO_GEN_DIR}/module/v1/module.grpc.pb.h
    ${PROTO_GEN_DIR}/module/v1/module.pb.cc
    ${PROTO_GEN_DIR}/module/v1/module.pb.h
    ${PROTO_GEN_DIR}/robot/v1/robot.grpc.pb.cc
    ${PROTO_GEN_DIR}/robot/v1/robot.grpc.pb.h
    ${PROTO_GEN_DIR}/robot/v1/robot.pb.cc
    ${PROTO_GEN_DIR}/robot/v1/robot.pb.h
    ${PROTO_GEN_DIR}/service/generic/v1/generic.grpc.pb.cc
    ${PROTO_GEN_DIR}/service/generic/v1/generic.grpc.pb.h
    ${PROTO_GEN_DIR}/service/generic/v1/generic.pb.cc
    ${PROTO_GEN_DIR}/service/generic/v1/generic.pb.h
    ${PROTO_GEN_DIR}/service/mlmodel/v1/mlmodel.grpc.pb.cc
    ${PROTO_GEN_DIR}/service/mlmodel/v1/mlmodel.grpc.pb.h
    ${PROTO_GEN_DIR}/service/mlmodel/v1/mlmodel.pb.cc
    ${PROTO_GEN_DIR}/service/mlmodel/v1/mlmodel.pb.h
    ${PROTO_GEN_DIR}/service/motion/v1/motion.grpc.pb.cc
    ${PROTO_GEN_DIR}/service/motion/v1/motion.grpc.pb.h
    ${PROTO_GEN_DIR}/service/motion/v1/motion.pb.cc
    ${PROTO_GEN_DIR}/service/motion/v1/motion.pb.h
    ${PROTO_GEN_DIR}/service/navigation/v1/navigation.grpc.pb.cc
    ${PROTO_GEN_DIR}/service/navigation/v1/navigation.grpc.pb.h
    ${PROTO_GEN_DIR}/service/navigation/v1/navigation.pb.cc
    ${PROTO_GEN_DIR}/service/navigation/v1/navigation.pb.h
    ${PROTO_GEN_DIR}/tagger/v1/tagger.grpc.pb.cc
    ${PROTO_GEN_DIR}/tagger/v1/tagger.grpc.pb.h
    ${PROTO_GEN_DIR}/tagger/v1/tagger.pb.cc
    ${PROTO_GEN_DIR}/tagger/v1/tagger.pb.h

    COMMAND ${BUF_COMMAND} generate ${BUF_GOOGLE_API_SOURCE} --template buf.gen.yaml --path google/rpc --path google/api
    COMMAND ${BUF_COMMAND} generate ${BUF_VIAM_GOUTILS_SOURCE} --template buf.gen.yaml
    COMMAND ${BUF_COMMAND} generate ${BUF_VIAM_API_SOURCE} --template buf.gen.yaml --path ${BUF_PROTO_COMPONENTS_JOINED}
    MAIN_DEPENDENCY buf.gen.yaml
  )

  add_custom_target(
    generate-dynamic-protos
    # This must be one of the files listed in `add_custom_command` above,
    # but it doesn't matter which one, we just need to have a dependency edge
    # into the files produced by that command.
    #
    # TODO: If we DRY as suggested above, this could just be the first list item.
    #
    DEPENDS ${PROTO_GEN_DIR}/app/v1/app.grpc.pb.cc
  )

  add_custom_target(
    update-static-protos
    DEPENDS generate-dynamic-protos
  )

  add_custom_command(
    TARGET update-static-protos
    COMMAND ${CMAKE_COMMAND} -E copy_directory ${PROTO_GEN_DIR} ${CMAKE_CURRENT_SOURCE_DIR}
  )
endif(VIAMCPPSDK_USE_DYNAMIC_PROTOS)


add_custom_target(
  update-buf
  COMMAND buf mod update ${CMAKE_CURRENT_SOURCE_DIR}
)

# Declare the viamcpp library, and attach sources,
# headers for installation
add_library(viamapi)

# TODO: This is analogized from
# https://gitlab.kitware.com/cmake/cmake/-/tree/master/Help/guide/importing-exporting/MathFunctionsComponents
# but it doesn't really seem to do anything. Everything works fine if
# it is removed, and naming the alias something other than `viamcpp`
# doesn't make it available under that alias anyway, as one might
# hope. What is it supposed to do?
add_library(viam-cpp-sdk::viamapi ALIAS viamapi)

target_sources(viamapi
  PRIVATE
    ${PROTO_GEN_DIR}/app/mltraining/v1/ml_training.pb.cc
    ${PROTO_GEN_DIR}/app/packages/v1/packages.pb.cc
    ${PROTO_GEN_DIR}/app/v1/app.grpc.pb.cc
    ${PROTO_GEN_DIR}/app/v1/app.pb.cc
    ${PROTO_GEN_DIR}/app/v1/robot.grpc.pb.cc
    ${PROTO_GEN_DIR}/app/v1/robot.pb.cc
    ${PROTO_GEN_DIR}/common/v1/common.grpc.pb.cc
    ${PROTO_GEN_DIR}/common/v1/common.pb.cc
    ${PROTO_GEN_DIR}/component/arm/v1/arm.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/arm/v1/arm.pb.cc
    ${PROTO_GEN_DIR}/component/base/v1/base.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/base/v1/base.pb.cc
    ${PROTO_GEN_DIR}/component/board/v1/board.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/board/v1/board.pb.cc
    ${PROTO_GEN_DIR}/component/camera/v1/camera.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/camera/v1/camera.pb.cc
    ${PROTO_GEN_DIR}/component/encoder/v1/encoder.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/encoder/v1/encoder.pb.cc
    ${PROTO_GEN_DIR}/component/gantry/v1/gantry.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/gantry/v1/gantry.pb.cc
    ${PROTO_GEN_DIR}/component/generic/v1/generic.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/generic/v1/generic.pb.cc
    ${PROTO_GEN_DIR}/component/gripper/v1/gripper.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/gripper/v1/gripper.pb.cc
    ${PROTO_GEN_DIR}/component/motor/v1/motor.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/motor/v1/motor.pb.cc
    ${PROTO_GEN_DIR}/component/movementsensor/v1/movementsensor.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/movementsensor/v1/movementsensor.pb.cc
    ${PROTO_GEN_DIR}/component/posetracker/v1/pose_tracker.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/posetracker/v1/pose_tracker.pb.cc
    ${PROTO_GEN_DIR}/component/powersensor/v1/powersensor.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/powersensor/v1/powersensor.pb.cc
    ${PROTO_GEN_DIR}/component/sensor/v1/sensor.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/sensor/v1/sensor.pb.cc
    ${PROTO_GEN_DIR}/component/servo/v1/servo.grpc.pb.cc
    ${PROTO_GEN_DIR}/component/servo/v1/servo.pb.cc
    ${PROTO_GEN_DIR}/google/api/annotations.pb.cc
    ${PROTO_GEN_DIR}/google/api/http.pb.cc
    ${PROTO_GEN_DIR}/google/api/httpbody.pb.cc
    ${PROTO_GEN_DIR}/google/rpc/status.pb.cc
    ${PROTO_GEN_DIR}/module/v1/module.grpc.pb.cc
    ${PROTO_GEN_DIR}/module/v1/module.pb.cc
    ${PROTO_GEN_DIR}/robot/v1/robot.grpc.pb.cc
    ${PROTO_GEN_DIR}/robot/v1/robot.pb.cc
    ${PROTO_GEN_DIR}/service/generic/v1/generic.grpc.pb.cc
    ${PROTO_GEN_DIR}/service/generic/v1/generic.pb.cc
    ${PROTO_GEN_DIR}/service/mlmodel/v1/mlmodel.grpc.pb.cc
    ${PROTO_GEN_DIR}/service/mlmodel/v1/mlmodel.pb.cc
    ${PROTO_GEN_DIR}/service/motion/v1/motion.grpc.pb.cc
    ${PROTO_GEN_DIR}/service/motion/v1/motion.pb.cc
    ${PROTO_GEN_DIR}/service/navigation/v1/navigation.grpc.pb.cc
    ${PROTO_GEN_DIR}/service/navigation/v1/navigation.pb.cc
    ${PROTO_GEN_DIR}/tagger/v1/tagger.grpc.pb.cc
    ${PROTO_GEN_DIR}/tagger/v1/tagger.pb.cc
  PUBLIC FILE_SET viamapi_includes TYPE HEADERS
    BASE_DIRS
      ${PROTO_GEN_DIR}/../..
    FILES
      ${PROTO_GEN_DIR}/../../viam/api/app/mltraining/v1/ml_training.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/app/packages/v1/packages.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/app/v1/app.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/app/v1/app.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/app/v1/robot.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/app/v1/robot.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/common/v1/common.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/common/v1/common.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/arm/v1/arm.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/arm/v1/arm.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/base/v1/base.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/base/v1/base.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/board/v1/board.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/board/v1/board.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/camera/v1/camera.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/camera/v1/camera.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/encoder/v1/encoder.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/encoder/v1/encoder.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/gantry/v1/gantry.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/gantry/v1/gantry.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/generic/v1/generic.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/generic/v1/generic.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/gripper/v1/gripper.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/gripper/v1/gripper.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/motor/v1/motor.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/motor/v1/motor.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/movementsensor/v1/movementsensor.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/movementsensor/v1/movementsensor.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/posetracker/v1/pose_tracker.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/posetracker/v1/pose_tracker.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/powersensor/v1/powersensor.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/powersensor/v1/powersensor.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/sensor/v1/sensor.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/sensor/v1/sensor.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/servo/v1/servo.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/component/servo/v1/servo.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/google/api/annotations.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/google/api/http.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/google/api/httpbody.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/google/rpc/status.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/module/v1/module.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/module/v1/module.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/robot/v1/robot.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/robot/v1/robot.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/tagger/v1/tagger.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/service/generic/v1/generic.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/service/generic/v1/generic.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/service/mlmodel/v1/mlmodel.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/service/mlmodel/v1/mlmodel.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/service/motion/v1/motion.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/service/motion/v1/motion.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/service/navigation/v1/navigation.grpc.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/service/navigation/v1/navigation.pb.h
      ${PROTO_GEN_DIR}/../../viam/api/tagger/v1/tagger.pb.h
)

set_target_properties(
  viamapi PROPERTIES
  SOVERSION noabi
  VERSION ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}
)

target_include_directories(viamapi
  PUBLIC
    # Unfortunately, the generated protos don't say 'viam/api' at
    # the beginning so we need the subdirectory include path so the
    # generated headers can find other generated headers.
    "$<BUILD_INTERFACE:${PROTO_GEN_DIR}>"
    "$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/viam/api>"

    # These expand to nothing unless we picked up grpc/proto via
    # pkgconfig rather than find_package
    "$<BUILD_INTERFACE:${VIAMCPPSDK_GRPCXX_INCLUDE_DIRS}>"
    "$<INSTALL_INTERFACE:${VIAMCPPSDK_GRPCXX_INCLUDE_DIRS}>"
    "$<BUILD_INTERFACE:${VIAMCPPSDK_GRPC_INCLUDE_DIRS}>"
    "$<INSTALL_INTERFACE:${VIAMCPPSDK_GRPC_INCLUDE_DIRS}>"
    "$<BUILD_INTERFACE:${VIAMCPPSDK_PROTOBUF_INCLUDE_DIRS}>"
    "$<INSTALL_INTERFACE:${VIAMCPPSDK_PROTOBUF_INCLUDE_DIRS}>"
)

target_link_directories(viamapi
  PUBLIC
    # These expand to nothing unless we picked up grpc/proto via
    # pkg-config rather than find_package
    "$<BUILD_INTERFACE:${VIAMCPPSDK_GRPCXX_LIBRARY_DIRS}>"
    "$<INSTALL_INTERFACE:${VIAMCPPSDK_GRPCXX_LIBRARY_DIRS}>"
    "$<BUILD_INTERFACE:${VIAMCPPSDK_GRPC_LIBRARY_DIRS}>"
    "$<INSTALL_INTERFACE:${VIAMCPPSDK_GRPC_LIBRARY_DIRS}>"
    "$<BUILD_INTERFACE:${VIAMCPPSDK_PROTOBUF_LIBRARY_DIRS}>"
    "$<INSTALL_INTERFACE:${VIAMCPPSDK_PROTOBUF_LIBRARY_DIRS}>"
)

target_link_libraries(viamapi
  PUBLIC ${VIAMCPPSDK_GRPCXX_LIBRARIES}
  PUBLIC ${VIAMCPPSDK_GRPC_LIBRARIES}
  PUBLIC ${VIAMCPPSDK_PROTOBUF_LIBRARIES}
  PRIVATE Threads::Threads
)

install(
  TARGETS viamapi
  EXPORT viamapi
  RUNTIME COMPONENT viam-cpp-sdk_runtime
  LIBRARY COMPONENT viam-cpp-sdk_runtime
      NAMELINK_COMPONENT viam-cpp-sdk_dev
  ARCHIVE COMPONENT viam-cpp-sdk_dev
  FILE_SET viamapi_includes COMPONENT viam-cpp-sdk_dev DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)

install(
  EXPORT viamapi
  FILE viam-cpp-sdk-viamapi-Targets.cmake
  NAMESPACE viam-cpp-sdk::
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/viam-cpp-sdk
  COMPONENT viam-cpp-sdk_dev
)


# Generate a `pkg-config` file for the library component of the
# project. This is realy best effort as we can't necessarily capture
# the full set of requirements and dependencies.
#
# TODO: We should be pulling the paths and libaries out as properties
# and interpolating them in, but I can't yet figure out the right
# incantation to get CMake to expand the various generator expressions
# in the "INSTALL" context.

configure_file(
  config/viam-cpp-sdk-libviamapi.pc.in
  config/viam-cpp-sdk-libviamapi.pc
  @ONLY
)

install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/config/viam-cpp-sdk-libviamapi.pc
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
  COMPONENT viam-cpp-sdk_dev
)
