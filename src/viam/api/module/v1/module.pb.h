// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/v1/module.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_module_2fv1_2fmodule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_module_2fv1_2fmodule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "app/v1/robot.pb.h"
#include "robot/v1/robot.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_module_2fv1_2fmodule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_module_2fv1_2fmodule_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_module_2fv1_2fmodule_2eproto;
namespace viam {
namespace module {
namespace v1 {
class AddResourceRequest;
struct AddResourceRequestDefaultTypeInternal;
extern AddResourceRequestDefaultTypeInternal _AddResourceRequest_default_instance_;
class AddResourceResponse;
struct AddResourceResponseDefaultTypeInternal;
extern AddResourceResponseDefaultTypeInternal _AddResourceResponse_default_instance_;
class HandlerDefinition;
struct HandlerDefinitionDefaultTypeInternal;
extern HandlerDefinitionDefaultTypeInternal _HandlerDefinition_default_instance_;
class HandlerMap;
struct HandlerMapDefaultTypeInternal;
extern HandlerMapDefaultTypeInternal _HandlerMap_default_instance_;
class ReadyRequest;
struct ReadyRequestDefaultTypeInternal;
extern ReadyRequestDefaultTypeInternal _ReadyRequest_default_instance_;
class ReadyResponse;
struct ReadyResponseDefaultTypeInternal;
extern ReadyResponseDefaultTypeInternal _ReadyResponse_default_instance_;
class ReconfigureResourceRequest;
struct ReconfigureResourceRequestDefaultTypeInternal;
extern ReconfigureResourceRequestDefaultTypeInternal _ReconfigureResourceRequest_default_instance_;
class ReconfigureResourceResponse;
struct ReconfigureResourceResponseDefaultTypeInternal;
extern ReconfigureResourceResponseDefaultTypeInternal _ReconfigureResourceResponse_default_instance_;
class RemoveResourceRequest;
struct RemoveResourceRequestDefaultTypeInternal;
extern RemoveResourceRequestDefaultTypeInternal _RemoveResourceRequest_default_instance_;
class RemoveResourceResponse;
struct RemoveResourceResponseDefaultTypeInternal;
extern RemoveResourceResponseDefaultTypeInternal _RemoveResourceResponse_default_instance_;
class ValidateConfigRequest;
struct ValidateConfigRequestDefaultTypeInternal;
extern ValidateConfigRequestDefaultTypeInternal _ValidateConfigRequest_default_instance_;
class ValidateConfigResponse;
struct ValidateConfigResponseDefaultTypeInternal;
extern ValidateConfigResponseDefaultTypeInternal _ValidateConfigResponse_default_instance_;
}  // namespace v1
}  // namespace module
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::module::v1::AddResourceRequest* Arena::CreateMaybeMessage<::viam::module::v1::AddResourceRequest>(Arena*);
template<> ::viam::module::v1::AddResourceResponse* Arena::CreateMaybeMessage<::viam::module::v1::AddResourceResponse>(Arena*);
template<> ::viam::module::v1::HandlerDefinition* Arena::CreateMaybeMessage<::viam::module::v1::HandlerDefinition>(Arena*);
template<> ::viam::module::v1::HandlerMap* Arena::CreateMaybeMessage<::viam::module::v1::HandlerMap>(Arena*);
template<> ::viam::module::v1::ReadyRequest* Arena::CreateMaybeMessage<::viam::module::v1::ReadyRequest>(Arena*);
template<> ::viam::module::v1::ReadyResponse* Arena::CreateMaybeMessage<::viam::module::v1::ReadyResponse>(Arena*);
template<> ::viam::module::v1::ReconfigureResourceRequest* Arena::CreateMaybeMessage<::viam::module::v1::ReconfigureResourceRequest>(Arena*);
template<> ::viam::module::v1::ReconfigureResourceResponse* Arena::CreateMaybeMessage<::viam::module::v1::ReconfigureResourceResponse>(Arena*);
template<> ::viam::module::v1::RemoveResourceRequest* Arena::CreateMaybeMessage<::viam::module::v1::RemoveResourceRequest>(Arena*);
template<> ::viam::module::v1::RemoveResourceResponse* Arena::CreateMaybeMessage<::viam::module::v1::RemoveResourceResponse>(Arena*);
template<> ::viam::module::v1::ValidateConfigRequest* Arena::CreateMaybeMessage<::viam::module::v1::ValidateConfigRequest>(Arena*);
template<> ::viam::module::v1::ValidateConfigResponse* Arena::CreateMaybeMessage<::viam::module::v1::ValidateConfigResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace module {
namespace v1 {

// ===================================================================

class AddResourceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.module.v1.AddResourceRequest) */ {
 public:
  inline AddResourceRequest() : AddResourceRequest(nullptr) {}
  ~AddResourceRequest() override;
  explicit PROTOBUF_CONSTEXPR AddResourceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddResourceRequest(const AddResourceRequest& from);
  AddResourceRequest(AddResourceRequest&& from) noexcept
    : AddResourceRequest() {
    *this = ::std::move(from);
  }

  inline AddResourceRequest& operator=(const AddResourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResourceRequest& operator=(AddResourceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddResourceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddResourceRequest* internal_default_instance() {
    return reinterpret_cast<const AddResourceRequest*>(
               &_AddResourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddResourceRequest& a, AddResourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddResourceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddResourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddResourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddResourceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddResourceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddResourceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResourceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.module.v1.AddResourceRequest";
  }
  protected:
  explicit AddResourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependenciesFieldNumber = 2,
    kConfigFieldNumber = 1,
  };
  // repeated string dependencies = 2 [json_name = "dependencies"];
  int dependencies_size() const;
  private:
  int _internal_dependencies_size() const;
  public:
  void clear_dependencies();
  const std::string& dependencies(int index) const;
  std::string* mutable_dependencies(int index);
  void set_dependencies(int index, const std::string& value);
  void set_dependencies(int index, std::string&& value);
  void set_dependencies(int index, const char* value);
  void set_dependencies(int index, const char* value, size_t size);
  std::string* add_dependencies();
  void add_dependencies(const std::string& value);
  void add_dependencies(std::string&& value);
  void add_dependencies(const char* value);
  void add_dependencies(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dependencies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dependencies();
  private:
  const std::string& _internal_dependencies(int index) const;
  std::string* _internal_add_dependencies();
  public:

  // .viam.app.v1.ComponentConfig config = 1 [json_name = "config"];
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::viam::app::v1::ComponentConfig& config() const;
  PROTOBUF_NODISCARD ::viam::app::v1::ComponentConfig* release_config();
  ::viam::app::v1::ComponentConfig* mutable_config();
  void set_allocated_config(::viam::app::v1::ComponentConfig* config);
  private:
  const ::viam::app::v1::ComponentConfig& _internal_config() const;
  ::viam::app::v1::ComponentConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::viam::app::v1::ComponentConfig* config);
  ::viam::app::v1::ComponentConfig* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:viam.module.v1.AddResourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dependencies_;
  ::viam::app::v1::ComponentConfig* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_module_2fv1_2fmodule_2eproto;
};
// -------------------------------------------------------------------

class AddResourceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.module.v1.AddResourceResponse) */ {
 public:
  inline AddResourceResponse() : AddResourceResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddResourceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddResourceResponse(const AddResourceResponse& from);
  AddResourceResponse(AddResourceResponse&& from) noexcept
    : AddResourceResponse() {
    *this = ::std::move(from);
  }

  inline AddResourceResponse& operator=(const AddResourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResourceResponse& operator=(AddResourceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddResourceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddResourceResponse* internal_default_instance() {
    return reinterpret_cast<const AddResourceResponse*>(
               &_AddResourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddResourceResponse& a, AddResourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddResourceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddResourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddResourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddResourceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddResourceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddResourceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.module.v1.AddResourceResponse";
  }
  protected:
  explicit AddResourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.module.v1.AddResourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_module_2fv1_2fmodule_2eproto;
};
// -------------------------------------------------------------------

class ReconfigureResourceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.module.v1.ReconfigureResourceRequest) */ {
 public:
  inline ReconfigureResourceRequest() : ReconfigureResourceRequest(nullptr) {}
  ~ReconfigureResourceRequest() override;
  explicit PROTOBUF_CONSTEXPR ReconfigureResourceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReconfigureResourceRequest(const ReconfigureResourceRequest& from);
  ReconfigureResourceRequest(ReconfigureResourceRequest&& from) noexcept
    : ReconfigureResourceRequest() {
    *this = ::std::move(from);
  }

  inline ReconfigureResourceRequest& operator=(const ReconfigureResourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconfigureResourceRequest& operator=(ReconfigureResourceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReconfigureResourceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReconfigureResourceRequest* internal_default_instance() {
    return reinterpret_cast<const ReconfigureResourceRequest*>(
               &_ReconfigureResourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReconfigureResourceRequest& a, ReconfigureResourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconfigureResourceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReconfigureResourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReconfigureResourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReconfigureResourceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReconfigureResourceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReconfigureResourceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconfigureResourceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.module.v1.ReconfigureResourceRequest";
  }
  protected:
  explicit ReconfigureResourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependenciesFieldNumber = 2,
    kConfigFieldNumber = 1,
  };
  // repeated string dependencies = 2 [json_name = "dependencies"];
  int dependencies_size() const;
  private:
  int _internal_dependencies_size() const;
  public:
  void clear_dependencies();
  const std::string& dependencies(int index) const;
  std::string* mutable_dependencies(int index);
  void set_dependencies(int index, const std::string& value);
  void set_dependencies(int index, std::string&& value);
  void set_dependencies(int index, const char* value);
  void set_dependencies(int index, const char* value, size_t size);
  std::string* add_dependencies();
  void add_dependencies(const std::string& value);
  void add_dependencies(std::string&& value);
  void add_dependencies(const char* value);
  void add_dependencies(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dependencies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dependencies();
  private:
  const std::string& _internal_dependencies(int index) const;
  std::string* _internal_add_dependencies();
  public:

  // .viam.app.v1.ComponentConfig config = 1 [json_name = "config"];
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::viam::app::v1::ComponentConfig& config() const;
  PROTOBUF_NODISCARD ::viam::app::v1::ComponentConfig* release_config();
  ::viam::app::v1::ComponentConfig* mutable_config();
  void set_allocated_config(::viam::app::v1::ComponentConfig* config);
  private:
  const ::viam::app::v1::ComponentConfig& _internal_config() const;
  ::viam::app::v1::ComponentConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::viam::app::v1::ComponentConfig* config);
  ::viam::app::v1::ComponentConfig* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:viam.module.v1.ReconfigureResourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dependencies_;
  ::viam::app::v1::ComponentConfig* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_module_2fv1_2fmodule_2eproto;
};
// -------------------------------------------------------------------

class ReconfigureResourceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.module.v1.ReconfigureResourceResponse) */ {
 public:
  inline ReconfigureResourceResponse() : ReconfigureResourceResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ReconfigureResourceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReconfigureResourceResponse(const ReconfigureResourceResponse& from);
  ReconfigureResourceResponse(ReconfigureResourceResponse&& from) noexcept
    : ReconfigureResourceResponse() {
    *this = ::std::move(from);
  }

  inline ReconfigureResourceResponse& operator=(const ReconfigureResourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconfigureResourceResponse& operator=(ReconfigureResourceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReconfigureResourceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReconfigureResourceResponse* internal_default_instance() {
    return reinterpret_cast<const ReconfigureResourceResponse*>(
               &_ReconfigureResourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReconfigureResourceResponse& a, ReconfigureResourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconfigureResourceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReconfigureResourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReconfigureResourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReconfigureResourceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ReconfigureResourceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ReconfigureResourceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.module.v1.ReconfigureResourceResponse";
  }
  protected:
  explicit ReconfigureResourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.module.v1.ReconfigureResourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_module_2fv1_2fmodule_2eproto;
};
// -------------------------------------------------------------------

class RemoveResourceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.module.v1.RemoveResourceRequest) */ {
 public:
  inline RemoveResourceRequest() : RemoveResourceRequest(nullptr) {}
  ~RemoveResourceRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveResourceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveResourceRequest(const RemoveResourceRequest& from);
  RemoveResourceRequest(RemoveResourceRequest&& from) noexcept
    : RemoveResourceRequest() {
    *this = ::std::move(from);
  }

  inline RemoveResourceRequest& operator=(const RemoveResourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveResourceRequest& operator=(RemoveResourceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveResourceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveResourceRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveResourceRequest*>(
               &_RemoveResourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RemoveResourceRequest& a, RemoveResourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveResourceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveResourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveResourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveResourceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveResourceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveResourceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveResourceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.module.v1.RemoveResourceRequest";
  }
  protected:
  explicit RemoveResourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.module.v1.RemoveResourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_module_2fv1_2fmodule_2eproto;
};
// -------------------------------------------------------------------

class RemoveResourceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.module.v1.RemoveResourceResponse) */ {
 public:
  inline RemoveResourceResponse() : RemoveResourceResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RemoveResourceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveResourceResponse(const RemoveResourceResponse& from);
  RemoveResourceResponse(RemoveResourceResponse&& from) noexcept
    : RemoveResourceResponse() {
    *this = ::std::move(from);
  }

  inline RemoveResourceResponse& operator=(const RemoveResourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveResourceResponse& operator=(RemoveResourceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveResourceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveResourceResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveResourceResponse*>(
               &_RemoveResourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RemoveResourceResponse& a, RemoveResourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveResourceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveResourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveResourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveResourceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RemoveResourceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RemoveResourceResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.module.v1.RemoveResourceResponse";
  }
  protected:
  explicit RemoveResourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.module.v1.RemoveResourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_module_2fv1_2fmodule_2eproto;
};
// -------------------------------------------------------------------

class HandlerDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.module.v1.HandlerDefinition) */ {
 public:
  inline HandlerDefinition() : HandlerDefinition(nullptr) {}
  ~HandlerDefinition() override;
  explicit PROTOBUF_CONSTEXPR HandlerDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandlerDefinition(const HandlerDefinition& from);
  HandlerDefinition(HandlerDefinition&& from) noexcept
    : HandlerDefinition() {
    *this = ::std::move(from);
  }

  inline HandlerDefinition& operator=(const HandlerDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandlerDefinition& operator=(HandlerDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandlerDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandlerDefinition* internal_default_instance() {
    return reinterpret_cast<const HandlerDefinition*>(
               &_HandlerDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HandlerDefinition& a, HandlerDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(HandlerDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandlerDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandlerDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandlerDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandlerDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HandlerDefinition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandlerDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.module.v1.HandlerDefinition";
  }
  protected:
  explicit HandlerDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 2,
    kSubtypeFieldNumber = 1,
  };
  // repeated string models = 2 [json_name = "models"];
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  const std::string& models(int index) const;
  std::string* mutable_models(int index);
  void set_models(int index, const std::string& value);
  void set_models(int index, std::string&& value);
  void set_models(int index, const char* value);
  void set_models(int index, const char* value, size_t size);
  std::string* add_models();
  void add_models(const std::string& value);
  void add_models(std::string&& value);
  void add_models(const char* value);
  void add_models(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& models() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_models();
  private:
  const std::string& _internal_models(int index) const;
  std::string* _internal_add_models();
  public:

  // .viam.robot.v1.ResourceRPCSubtype subtype = 1 [json_name = "subtype"];
  bool has_subtype() const;
  private:
  bool _internal_has_subtype() const;
  public:
  void clear_subtype();
  const ::viam::robot::v1::ResourceRPCSubtype& subtype() const;
  PROTOBUF_NODISCARD ::viam::robot::v1::ResourceRPCSubtype* release_subtype();
  ::viam::robot::v1::ResourceRPCSubtype* mutable_subtype();
  void set_allocated_subtype(::viam::robot::v1::ResourceRPCSubtype* subtype);
  private:
  const ::viam::robot::v1::ResourceRPCSubtype& _internal_subtype() const;
  ::viam::robot::v1::ResourceRPCSubtype* _internal_mutable_subtype();
  public:
  void unsafe_arena_set_allocated_subtype(
      ::viam::robot::v1::ResourceRPCSubtype* subtype);
  ::viam::robot::v1::ResourceRPCSubtype* unsafe_arena_release_subtype();

  // @@protoc_insertion_point(class_scope:viam.module.v1.HandlerDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> models_;
  ::viam::robot::v1::ResourceRPCSubtype* subtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_module_2fv1_2fmodule_2eproto;
};
// -------------------------------------------------------------------

class HandlerMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.module.v1.HandlerMap) */ {
 public:
  inline HandlerMap() : HandlerMap(nullptr) {}
  ~HandlerMap() override;
  explicit PROTOBUF_CONSTEXPR HandlerMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HandlerMap(const HandlerMap& from);
  HandlerMap(HandlerMap&& from) noexcept
    : HandlerMap() {
    *this = ::std::move(from);
  }

  inline HandlerMap& operator=(const HandlerMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandlerMap& operator=(HandlerMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HandlerMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const HandlerMap* internal_default_instance() {
    return reinterpret_cast<const HandlerMap*>(
               &_HandlerMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HandlerMap& a, HandlerMap& b) {
    a.Swap(&b);
  }
  inline void Swap(HandlerMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandlerMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HandlerMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HandlerMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HandlerMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HandlerMap& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandlerMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.module.v1.HandlerMap";
  }
  protected:
  explicit HandlerMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandlersFieldNumber = 1,
  };
  // repeated .viam.module.v1.HandlerDefinition handlers = 1 [json_name = "handlers"];
  int handlers_size() const;
  private:
  int _internal_handlers_size() const;
  public:
  void clear_handlers();
  ::viam::module::v1::HandlerDefinition* mutable_handlers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::module::v1::HandlerDefinition >*
      mutable_handlers();
  private:
  const ::viam::module::v1::HandlerDefinition& _internal_handlers(int index) const;
  ::viam::module::v1::HandlerDefinition* _internal_add_handlers();
  public:
  const ::viam::module::v1::HandlerDefinition& handlers(int index) const;
  ::viam::module::v1::HandlerDefinition* add_handlers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::module::v1::HandlerDefinition >&
      handlers() const;

  // @@protoc_insertion_point(class_scope:viam.module.v1.HandlerMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::module::v1::HandlerDefinition > handlers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_module_2fv1_2fmodule_2eproto;
};
// -------------------------------------------------------------------

class ReadyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.module.v1.ReadyRequest) */ {
 public:
  inline ReadyRequest() : ReadyRequest(nullptr) {}
  ~ReadyRequest() override;
  explicit PROTOBUF_CONSTEXPR ReadyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadyRequest(const ReadyRequest& from);
  ReadyRequest(ReadyRequest&& from) noexcept
    : ReadyRequest() {
    *this = ::std::move(from);
  }

  inline ReadyRequest& operator=(const ReadyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadyRequest& operator=(ReadyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadyRequest* internal_default_instance() {
    return reinterpret_cast<const ReadyRequest*>(
               &_ReadyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadyRequest& a, ReadyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.module.v1.ReadyRequest";
  }
  protected:
  explicit ReadyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentAddressFieldNumber = 1,
    kWebrtcOfferFieldNumber = 2,
  };
  // string parent_address = 1 [json_name = "parentAddress"];
  void clear_parent_address();
  const std::string& parent_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_address();
  PROTOBUF_NODISCARD std::string* release_parent_address();
  void set_allocated_parent_address(std::string* parent_address);
  private:
  const std::string& _internal_parent_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_address(const std::string& value);
  std::string* _internal_mutable_parent_address();
  public:

  // string webrtc_offer = 2 [json_name = "webrtcOffer"];
  void clear_webrtc_offer();
  const std::string& webrtc_offer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_webrtc_offer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_webrtc_offer();
  PROTOBUF_NODISCARD std::string* release_webrtc_offer();
  void set_allocated_webrtc_offer(std::string* webrtc_offer);
  private:
  const std::string& _internal_webrtc_offer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webrtc_offer(const std::string& value);
  std::string* _internal_mutable_webrtc_offer();
  public:

  // @@protoc_insertion_point(class_scope:viam.module.v1.ReadyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webrtc_offer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_module_2fv1_2fmodule_2eproto;
};
// -------------------------------------------------------------------

class ReadyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.module.v1.ReadyResponse) */ {
 public:
  inline ReadyResponse() : ReadyResponse(nullptr) {}
  ~ReadyResponse() override;
  explicit PROTOBUF_CONSTEXPR ReadyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadyResponse(const ReadyResponse& from);
  ReadyResponse(ReadyResponse&& from) noexcept
    : ReadyResponse() {
    *this = ::std::move(from);
  }

  inline ReadyResponse& operator=(const ReadyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadyResponse& operator=(ReadyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadyResponse* internal_default_instance() {
    return reinterpret_cast<const ReadyResponse*>(
               &_ReadyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReadyResponse& a, ReadyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.module.v1.ReadyResponse";
  }
  protected:
  explicit ReadyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWebrtcAnswerFieldNumber = 3,
    kHandlermapFieldNumber = 2,
    kReadyFieldNumber = 1,
  };
  // string webrtc_answer = 3 [json_name = "webrtcAnswer"];
  void clear_webrtc_answer();
  const std::string& webrtc_answer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_webrtc_answer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_webrtc_answer();
  PROTOBUF_NODISCARD std::string* release_webrtc_answer();
  void set_allocated_webrtc_answer(std::string* webrtc_answer);
  private:
  const std::string& _internal_webrtc_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_webrtc_answer(const std::string& value);
  std::string* _internal_mutable_webrtc_answer();
  public:

  // .viam.module.v1.HandlerMap handlermap = 2 [json_name = "handlermap"];
  bool has_handlermap() const;
  private:
  bool _internal_has_handlermap() const;
  public:
  void clear_handlermap();
  const ::viam::module::v1::HandlerMap& handlermap() const;
  PROTOBUF_NODISCARD ::viam::module::v1::HandlerMap* release_handlermap();
  ::viam::module::v1::HandlerMap* mutable_handlermap();
  void set_allocated_handlermap(::viam::module::v1::HandlerMap* handlermap);
  private:
  const ::viam::module::v1::HandlerMap& _internal_handlermap() const;
  ::viam::module::v1::HandlerMap* _internal_mutable_handlermap();
  public:
  void unsafe_arena_set_allocated_handlermap(
      ::viam::module::v1::HandlerMap* handlermap);
  ::viam::module::v1::HandlerMap* unsafe_arena_release_handlermap();

  // bool ready = 1 [json_name = "ready"];
  void clear_ready();
  bool ready() const;
  void set_ready(bool value);
  private:
  bool _internal_ready() const;
  void _internal_set_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.module.v1.ReadyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr webrtc_answer_;
  ::viam::module::v1::HandlerMap* handlermap_;
  bool ready_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_module_2fv1_2fmodule_2eproto;
};
// -------------------------------------------------------------------

class ValidateConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.module.v1.ValidateConfigRequest) */ {
 public:
  inline ValidateConfigRequest() : ValidateConfigRequest(nullptr) {}
  ~ValidateConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR ValidateConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateConfigRequest(const ValidateConfigRequest& from);
  ValidateConfigRequest(ValidateConfigRequest&& from) noexcept
    : ValidateConfigRequest() {
    *this = ::std::move(from);
  }

  inline ValidateConfigRequest& operator=(const ValidateConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateConfigRequest& operator=(ValidateConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateConfigRequest*>(
               &_ValidateConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ValidateConfigRequest& a, ValidateConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidateConfigRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.module.v1.ValidateConfigRequest";
  }
  protected:
  explicit ValidateConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigFieldNumber = 1,
  };
  // .viam.app.v1.ComponentConfig config = 1 [json_name = "config"];
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::viam::app::v1::ComponentConfig& config() const;
  PROTOBUF_NODISCARD ::viam::app::v1::ComponentConfig* release_config();
  ::viam::app::v1::ComponentConfig* mutable_config();
  void set_allocated_config(::viam::app::v1::ComponentConfig* config);
  private:
  const ::viam::app::v1::ComponentConfig& _internal_config() const;
  ::viam::app::v1::ComponentConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::viam::app::v1::ComponentConfig* config);
  ::viam::app::v1::ComponentConfig* unsafe_arena_release_config();

  // @@protoc_insertion_point(class_scope:viam.module.v1.ValidateConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::app::v1::ComponentConfig* config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_module_2fv1_2fmodule_2eproto;
};
// -------------------------------------------------------------------

class ValidateConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.module.v1.ValidateConfigResponse) */ {
 public:
  inline ValidateConfigResponse() : ValidateConfigResponse(nullptr) {}
  ~ValidateConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR ValidateConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateConfigResponse(const ValidateConfigResponse& from);
  ValidateConfigResponse(ValidateConfigResponse&& from) noexcept
    : ValidateConfigResponse() {
    *this = ::std::move(from);
  }

  inline ValidateConfigResponse& operator=(const ValidateConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateConfigResponse& operator=(ValidateConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateConfigResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateConfigResponse*>(
               &_ValidateConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ValidateConfigResponse& a, ValidateConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidateConfigResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.module.v1.ValidateConfigResponse";
  }
  protected:
  explicit ValidateConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDependenciesFieldNumber = 1,
  };
  // repeated string dependencies = 1 [json_name = "dependencies"];
  int dependencies_size() const;
  private:
  int _internal_dependencies_size() const;
  public:
  void clear_dependencies();
  const std::string& dependencies(int index) const;
  std::string* mutable_dependencies(int index);
  void set_dependencies(int index, const std::string& value);
  void set_dependencies(int index, std::string&& value);
  void set_dependencies(int index, const char* value);
  void set_dependencies(int index, const char* value, size_t size);
  std::string* add_dependencies();
  void add_dependencies(const std::string& value);
  void add_dependencies(std::string&& value);
  void add_dependencies(const char* value);
  void add_dependencies(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dependencies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dependencies();
  private:
  const std::string& _internal_dependencies(int index) const;
  std::string* _internal_add_dependencies();
  public:

  // @@protoc_insertion_point(class_scope:viam.module.v1.ValidateConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dependencies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_module_2fv1_2fmodule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddResourceRequest

// .viam.app.v1.ComponentConfig config = 1 [json_name = "config"];
inline bool AddResourceRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool AddResourceRequest::has_config() const {
  return _internal_has_config();
}
inline const ::viam::app::v1::ComponentConfig& AddResourceRequest::_internal_config() const {
  const ::viam::app::v1::ComponentConfig* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::v1::ComponentConfig&>(
      ::viam::app::v1::_ComponentConfig_default_instance_);
}
inline const ::viam::app::v1::ComponentConfig& AddResourceRequest::config() const {
  // @@protoc_insertion_point(field_get:viam.module.v1.AddResourceRequest.config)
  return _internal_config();
}
inline void AddResourceRequest::unsafe_arena_set_allocated_config(
    ::viam::app::v1::ComponentConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.module.v1.AddResourceRequest.config)
}
inline ::viam::app::v1::ComponentConfig* AddResourceRequest::release_config() {
  
  ::viam::app::v1::ComponentConfig* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::v1::ComponentConfig* AddResourceRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:viam.module.v1.AddResourceRequest.config)
  
  ::viam::app::v1::ComponentConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::viam::app::v1::ComponentConfig* AddResourceRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::v1::ComponentConfig>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::viam::app::v1::ComponentConfig* AddResourceRequest::mutable_config() {
  ::viam::app::v1::ComponentConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:viam.module.v1.AddResourceRequest.config)
  return _msg;
}
inline void AddResourceRequest::set_allocated_config(::viam::app::v1::ComponentConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:viam.module.v1.AddResourceRequest.config)
}

// repeated string dependencies = 2 [json_name = "dependencies"];
inline int AddResourceRequest::_internal_dependencies_size() const {
  return dependencies_.size();
}
inline int AddResourceRequest::dependencies_size() const {
  return _internal_dependencies_size();
}
inline void AddResourceRequest::clear_dependencies() {
  dependencies_.Clear();
}
inline std::string* AddResourceRequest::add_dependencies() {
  std::string* _s = _internal_add_dependencies();
  // @@protoc_insertion_point(field_add_mutable:viam.module.v1.AddResourceRequest.dependencies)
  return _s;
}
inline const std::string& AddResourceRequest::_internal_dependencies(int index) const {
  return dependencies_.Get(index);
}
inline const std::string& AddResourceRequest::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:viam.module.v1.AddResourceRequest.dependencies)
  return _internal_dependencies(index);
}
inline std::string* AddResourceRequest::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:viam.module.v1.AddResourceRequest.dependencies)
  return dependencies_.Mutable(index);
}
inline void AddResourceRequest::set_dependencies(int index, const std::string& value) {
  dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.module.v1.AddResourceRequest.dependencies)
}
inline void AddResourceRequest::set_dependencies(int index, std::string&& value) {
  dependencies_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.module.v1.AddResourceRequest.dependencies)
}
inline void AddResourceRequest::set_dependencies(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.module.v1.AddResourceRequest.dependencies)
}
inline void AddResourceRequest::set_dependencies(int index, const char* value, size_t size) {
  dependencies_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.module.v1.AddResourceRequest.dependencies)
}
inline std::string* AddResourceRequest::_internal_add_dependencies() {
  return dependencies_.Add();
}
inline void AddResourceRequest::add_dependencies(const std::string& value) {
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.module.v1.AddResourceRequest.dependencies)
}
inline void AddResourceRequest::add_dependencies(std::string&& value) {
  dependencies_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.module.v1.AddResourceRequest.dependencies)
}
inline void AddResourceRequest::add_dependencies(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.module.v1.AddResourceRequest.dependencies)
}
inline void AddResourceRequest::add_dependencies(const char* value, size_t size) {
  dependencies_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.module.v1.AddResourceRequest.dependencies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddResourceRequest::dependencies() const {
  // @@protoc_insertion_point(field_list:viam.module.v1.AddResourceRequest.dependencies)
  return dependencies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddResourceRequest::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:viam.module.v1.AddResourceRequest.dependencies)
  return &dependencies_;
}

// -------------------------------------------------------------------

// AddResourceResponse

// -------------------------------------------------------------------

// ReconfigureResourceRequest

// .viam.app.v1.ComponentConfig config = 1 [json_name = "config"];
inline bool ReconfigureResourceRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool ReconfigureResourceRequest::has_config() const {
  return _internal_has_config();
}
inline const ::viam::app::v1::ComponentConfig& ReconfigureResourceRequest::_internal_config() const {
  const ::viam::app::v1::ComponentConfig* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::v1::ComponentConfig&>(
      ::viam::app::v1::_ComponentConfig_default_instance_);
}
inline const ::viam::app::v1::ComponentConfig& ReconfigureResourceRequest::config() const {
  // @@protoc_insertion_point(field_get:viam.module.v1.ReconfigureResourceRequest.config)
  return _internal_config();
}
inline void ReconfigureResourceRequest::unsafe_arena_set_allocated_config(
    ::viam::app::v1::ComponentConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.module.v1.ReconfigureResourceRequest.config)
}
inline ::viam::app::v1::ComponentConfig* ReconfigureResourceRequest::release_config() {
  
  ::viam::app::v1::ComponentConfig* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::v1::ComponentConfig* ReconfigureResourceRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:viam.module.v1.ReconfigureResourceRequest.config)
  
  ::viam::app::v1::ComponentConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::viam::app::v1::ComponentConfig* ReconfigureResourceRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::v1::ComponentConfig>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::viam::app::v1::ComponentConfig* ReconfigureResourceRequest::mutable_config() {
  ::viam::app::v1::ComponentConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:viam.module.v1.ReconfigureResourceRequest.config)
  return _msg;
}
inline void ReconfigureResourceRequest::set_allocated_config(::viam::app::v1::ComponentConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:viam.module.v1.ReconfigureResourceRequest.config)
}

// repeated string dependencies = 2 [json_name = "dependencies"];
inline int ReconfigureResourceRequest::_internal_dependencies_size() const {
  return dependencies_.size();
}
inline int ReconfigureResourceRequest::dependencies_size() const {
  return _internal_dependencies_size();
}
inline void ReconfigureResourceRequest::clear_dependencies() {
  dependencies_.Clear();
}
inline std::string* ReconfigureResourceRequest::add_dependencies() {
  std::string* _s = _internal_add_dependencies();
  // @@protoc_insertion_point(field_add_mutable:viam.module.v1.ReconfigureResourceRequest.dependencies)
  return _s;
}
inline const std::string& ReconfigureResourceRequest::_internal_dependencies(int index) const {
  return dependencies_.Get(index);
}
inline const std::string& ReconfigureResourceRequest::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:viam.module.v1.ReconfigureResourceRequest.dependencies)
  return _internal_dependencies(index);
}
inline std::string* ReconfigureResourceRequest::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:viam.module.v1.ReconfigureResourceRequest.dependencies)
  return dependencies_.Mutable(index);
}
inline void ReconfigureResourceRequest::set_dependencies(int index, const std::string& value) {
  dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.module.v1.ReconfigureResourceRequest.dependencies)
}
inline void ReconfigureResourceRequest::set_dependencies(int index, std::string&& value) {
  dependencies_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.module.v1.ReconfigureResourceRequest.dependencies)
}
inline void ReconfigureResourceRequest::set_dependencies(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.module.v1.ReconfigureResourceRequest.dependencies)
}
inline void ReconfigureResourceRequest::set_dependencies(int index, const char* value, size_t size) {
  dependencies_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.module.v1.ReconfigureResourceRequest.dependencies)
}
inline std::string* ReconfigureResourceRequest::_internal_add_dependencies() {
  return dependencies_.Add();
}
inline void ReconfigureResourceRequest::add_dependencies(const std::string& value) {
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.module.v1.ReconfigureResourceRequest.dependencies)
}
inline void ReconfigureResourceRequest::add_dependencies(std::string&& value) {
  dependencies_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.module.v1.ReconfigureResourceRequest.dependencies)
}
inline void ReconfigureResourceRequest::add_dependencies(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.module.v1.ReconfigureResourceRequest.dependencies)
}
inline void ReconfigureResourceRequest::add_dependencies(const char* value, size_t size) {
  dependencies_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.module.v1.ReconfigureResourceRequest.dependencies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReconfigureResourceRequest::dependencies() const {
  // @@protoc_insertion_point(field_list:viam.module.v1.ReconfigureResourceRequest.dependencies)
  return dependencies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReconfigureResourceRequest::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:viam.module.v1.ReconfigureResourceRequest.dependencies)
  return &dependencies_;
}

// -------------------------------------------------------------------

// ReconfigureResourceResponse

// -------------------------------------------------------------------

// RemoveResourceRequest

// string name = 1 [json_name = "name"];
inline void RemoveResourceRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RemoveResourceRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.module.v1.RemoveResourceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RemoveResourceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.module.v1.RemoveResourceRequest.name)
}
inline std::string* RemoveResourceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.module.v1.RemoveResourceRequest.name)
  return _s;
}
inline const std::string& RemoveResourceRequest::_internal_name() const {
  return name_.Get();
}
inline void RemoveResourceRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* RemoveResourceRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* RemoveResourceRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.module.v1.RemoveResourceRequest.name)
  return name_.Release();
}
inline void RemoveResourceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.module.v1.RemoveResourceRequest.name)
}

// -------------------------------------------------------------------

// RemoveResourceResponse

// -------------------------------------------------------------------

// HandlerDefinition

// .viam.robot.v1.ResourceRPCSubtype subtype = 1 [json_name = "subtype"];
inline bool HandlerDefinition::_internal_has_subtype() const {
  return this != internal_default_instance() && subtype_ != nullptr;
}
inline bool HandlerDefinition::has_subtype() const {
  return _internal_has_subtype();
}
inline const ::viam::robot::v1::ResourceRPCSubtype& HandlerDefinition::_internal_subtype() const {
  const ::viam::robot::v1::ResourceRPCSubtype* p = subtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::robot::v1::ResourceRPCSubtype&>(
      ::viam::robot::v1::_ResourceRPCSubtype_default_instance_);
}
inline const ::viam::robot::v1::ResourceRPCSubtype& HandlerDefinition::subtype() const {
  // @@protoc_insertion_point(field_get:viam.module.v1.HandlerDefinition.subtype)
  return _internal_subtype();
}
inline void HandlerDefinition::unsafe_arena_set_allocated_subtype(
    ::viam::robot::v1::ResourceRPCSubtype* subtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subtype_);
  }
  subtype_ = subtype;
  if (subtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.module.v1.HandlerDefinition.subtype)
}
inline ::viam::robot::v1::ResourceRPCSubtype* HandlerDefinition::release_subtype() {
  
  ::viam::robot::v1::ResourceRPCSubtype* temp = subtype_;
  subtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::robot::v1::ResourceRPCSubtype* HandlerDefinition::unsafe_arena_release_subtype() {
  // @@protoc_insertion_point(field_release:viam.module.v1.HandlerDefinition.subtype)
  
  ::viam::robot::v1::ResourceRPCSubtype* temp = subtype_;
  subtype_ = nullptr;
  return temp;
}
inline ::viam::robot::v1::ResourceRPCSubtype* HandlerDefinition::_internal_mutable_subtype() {
  
  if (subtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::robot::v1::ResourceRPCSubtype>(GetArenaForAllocation());
    subtype_ = p;
  }
  return subtype_;
}
inline ::viam::robot::v1::ResourceRPCSubtype* HandlerDefinition::mutable_subtype() {
  ::viam::robot::v1::ResourceRPCSubtype* _msg = _internal_mutable_subtype();
  // @@protoc_insertion_point(field_mutable:viam.module.v1.HandlerDefinition.subtype)
  return _msg;
}
inline void HandlerDefinition::set_allocated_subtype(::viam::robot::v1::ResourceRPCSubtype* subtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subtype_);
  }
  if (subtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subtype));
    if (message_arena != submessage_arena) {
      subtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subtype, submessage_arena);
    }
    
  } else {
    
  }
  subtype_ = subtype;
  // @@protoc_insertion_point(field_set_allocated:viam.module.v1.HandlerDefinition.subtype)
}

// repeated string models = 2 [json_name = "models"];
inline int HandlerDefinition::_internal_models_size() const {
  return models_.size();
}
inline int HandlerDefinition::models_size() const {
  return _internal_models_size();
}
inline void HandlerDefinition::clear_models() {
  models_.Clear();
}
inline std::string* HandlerDefinition::add_models() {
  std::string* _s = _internal_add_models();
  // @@protoc_insertion_point(field_add_mutable:viam.module.v1.HandlerDefinition.models)
  return _s;
}
inline const std::string& HandlerDefinition::_internal_models(int index) const {
  return models_.Get(index);
}
inline const std::string& HandlerDefinition::models(int index) const {
  // @@protoc_insertion_point(field_get:viam.module.v1.HandlerDefinition.models)
  return _internal_models(index);
}
inline std::string* HandlerDefinition::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:viam.module.v1.HandlerDefinition.models)
  return models_.Mutable(index);
}
inline void HandlerDefinition::set_models(int index, const std::string& value) {
  models_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.module.v1.HandlerDefinition.models)
}
inline void HandlerDefinition::set_models(int index, std::string&& value) {
  models_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.module.v1.HandlerDefinition.models)
}
inline void HandlerDefinition::set_models(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  models_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.module.v1.HandlerDefinition.models)
}
inline void HandlerDefinition::set_models(int index, const char* value, size_t size) {
  models_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.module.v1.HandlerDefinition.models)
}
inline std::string* HandlerDefinition::_internal_add_models() {
  return models_.Add();
}
inline void HandlerDefinition::add_models(const std::string& value) {
  models_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.module.v1.HandlerDefinition.models)
}
inline void HandlerDefinition::add_models(std::string&& value) {
  models_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.module.v1.HandlerDefinition.models)
}
inline void HandlerDefinition::add_models(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  models_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.module.v1.HandlerDefinition.models)
}
inline void HandlerDefinition::add_models(const char* value, size_t size) {
  models_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.module.v1.HandlerDefinition.models)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
HandlerDefinition::models() const {
  // @@protoc_insertion_point(field_list:viam.module.v1.HandlerDefinition.models)
  return models_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
HandlerDefinition::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:viam.module.v1.HandlerDefinition.models)
  return &models_;
}

// -------------------------------------------------------------------

// HandlerMap

// repeated .viam.module.v1.HandlerDefinition handlers = 1 [json_name = "handlers"];
inline int HandlerMap::_internal_handlers_size() const {
  return handlers_.size();
}
inline int HandlerMap::handlers_size() const {
  return _internal_handlers_size();
}
inline void HandlerMap::clear_handlers() {
  handlers_.Clear();
}
inline ::viam::module::v1::HandlerDefinition* HandlerMap::mutable_handlers(int index) {
  // @@protoc_insertion_point(field_mutable:viam.module.v1.HandlerMap.handlers)
  return handlers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::module::v1::HandlerDefinition >*
HandlerMap::mutable_handlers() {
  // @@protoc_insertion_point(field_mutable_list:viam.module.v1.HandlerMap.handlers)
  return &handlers_;
}
inline const ::viam::module::v1::HandlerDefinition& HandlerMap::_internal_handlers(int index) const {
  return handlers_.Get(index);
}
inline const ::viam::module::v1::HandlerDefinition& HandlerMap::handlers(int index) const {
  // @@protoc_insertion_point(field_get:viam.module.v1.HandlerMap.handlers)
  return _internal_handlers(index);
}
inline ::viam::module::v1::HandlerDefinition* HandlerMap::_internal_add_handlers() {
  return handlers_.Add();
}
inline ::viam::module::v1::HandlerDefinition* HandlerMap::add_handlers() {
  ::viam::module::v1::HandlerDefinition* _add = _internal_add_handlers();
  // @@protoc_insertion_point(field_add:viam.module.v1.HandlerMap.handlers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::module::v1::HandlerDefinition >&
HandlerMap::handlers() const {
  // @@protoc_insertion_point(field_list:viam.module.v1.HandlerMap.handlers)
  return handlers_;
}

// -------------------------------------------------------------------

// ReadyRequest

// string parent_address = 1 [json_name = "parentAddress"];
inline void ReadyRequest::clear_parent_address() {
  parent_address_.ClearToEmpty();
}
inline const std::string& ReadyRequest::parent_address() const {
  // @@protoc_insertion_point(field_get:viam.module.v1.ReadyRequest.parent_address)
  return _internal_parent_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadyRequest::set_parent_address(ArgT0&& arg0, ArgT... args) {
 
 parent_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.module.v1.ReadyRequest.parent_address)
}
inline std::string* ReadyRequest::mutable_parent_address() {
  std::string* _s = _internal_mutable_parent_address();
  // @@protoc_insertion_point(field_mutable:viam.module.v1.ReadyRequest.parent_address)
  return _s;
}
inline const std::string& ReadyRequest::_internal_parent_address() const {
  return parent_address_.Get();
}
inline void ReadyRequest::_internal_set_parent_address(const std::string& value) {
  
  parent_address_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadyRequest::_internal_mutable_parent_address() {
  
  return parent_address_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadyRequest::release_parent_address() {
  // @@protoc_insertion_point(field_release:viam.module.v1.ReadyRequest.parent_address)
  return parent_address_.Release();
}
inline void ReadyRequest::set_allocated_parent_address(std::string* parent_address) {
  if (parent_address != nullptr) {
    
  } else {
    
  }
  parent_address_.SetAllocated(parent_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (parent_address_.IsDefault()) {
    parent_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.module.v1.ReadyRequest.parent_address)
}

// string webrtc_offer = 2 [json_name = "webrtcOffer"];
inline void ReadyRequest::clear_webrtc_offer() {
  webrtc_offer_.ClearToEmpty();
}
inline const std::string& ReadyRequest::webrtc_offer() const {
  // @@protoc_insertion_point(field_get:viam.module.v1.ReadyRequest.webrtc_offer)
  return _internal_webrtc_offer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadyRequest::set_webrtc_offer(ArgT0&& arg0, ArgT... args) {
 
 webrtc_offer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.module.v1.ReadyRequest.webrtc_offer)
}
inline std::string* ReadyRequest::mutable_webrtc_offer() {
  std::string* _s = _internal_mutable_webrtc_offer();
  // @@protoc_insertion_point(field_mutable:viam.module.v1.ReadyRequest.webrtc_offer)
  return _s;
}
inline const std::string& ReadyRequest::_internal_webrtc_offer() const {
  return webrtc_offer_.Get();
}
inline void ReadyRequest::_internal_set_webrtc_offer(const std::string& value) {
  
  webrtc_offer_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadyRequest::_internal_mutable_webrtc_offer() {
  
  return webrtc_offer_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadyRequest::release_webrtc_offer() {
  // @@protoc_insertion_point(field_release:viam.module.v1.ReadyRequest.webrtc_offer)
  return webrtc_offer_.Release();
}
inline void ReadyRequest::set_allocated_webrtc_offer(std::string* webrtc_offer) {
  if (webrtc_offer != nullptr) {
    
  } else {
    
  }
  webrtc_offer_.SetAllocated(webrtc_offer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (webrtc_offer_.IsDefault()) {
    webrtc_offer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.module.v1.ReadyRequest.webrtc_offer)
}

// -------------------------------------------------------------------

// ReadyResponse

// bool ready = 1 [json_name = "ready"];
inline void ReadyResponse::clear_ready() {
  ready_ = false;
}
inline bool ReadyResponse::_internal_ready() const {
  return ready_;
}
inline bool ReadyResponse::ready() const {
  // @@protoc_insertion_point(field_get:viam.module.v1.ReadyResponse.ready)
  return _internal_ready();
}
inline void ReadyResponse::_internal_set_ready(bool value) {
  
  ready_ = value;
}
inline void ReadyResponse::set_ready(bool value) {
  _internal_set_ready(value);
  // @@protoc_insertion_point(field_set:viam.module.v1.ReadyResponse.ready)
}

// .viam.module.v1.HandlerMap handlermap = 2 [json_name = "handlermap"];
inline bool ReadyResponse::_internal_has_handlermap() const {
  return this != internal_default_instance() && handlermap_ != nullptr;
}
inline bool ReadyResponse::has_handlermap() const {
  return _internal_has_handlermap();
}
inline void ReadyResponse::clear_handlermap() {
  if (GetArenaForAllocation() == nullptr && handlermap_ != nullptr) {
    delete handlermap_;
  }
  handlermap_ = nullptr;
}
inline const ::viam::module::v1::HandlerMap& ReadyResponse::_internal_handlermap() const {
  const ::viam::module::v1::HandlerMap* p = handlermap_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::module::v1::HandlerMap&>(
      ::viam::module::v1::_HandlerMap_default_instance_);
}
inline const ::viam::module::v1::HandlerMap& ReadyResponse::handlermap() const {
  // @@protoc_insertion_point(field_get:viam.module.v1.ReadyResponse.handlermap)
  return _internal_handlermap();
}
inline void ReadyResponse::unsafe_arena_set_allocated_handlermap(
    ::viam::module::v1::HandlerMap* handlermap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handlermap_);
  }
  handlermap_ = handlermap;
  if (handlermap) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.module.v1.ReadyResponse.handlermap)
}
inline ::viam::module::v1::HandlerMap* ReadyResponse::release_handlermap() {
  
  ::viam::module::v1::HandlerMap* temp = handlermap_;
  handlermap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::module::v1::HandlerMap* ReadyResponse::unsafe_arena_release_handlermap() {
  // @@protoc_insertion_point(field_release:viam.module.v1.ReadyResponse.handlermap)
  
  ::viam::module::v1::HandlerMap* temp = handlermap_;
  handlermap_ = nullptr;
  return temp;
}
inline ::viam::module::v1::HandlerMap* ReadyResponse::_internal_mutable_handlermap() {
  
  if (handlermap_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::module::v1::HandlerMap>(GetArenaForAllocation());
    handlermap_ = p;
  }
  return handlermap_;
}
inline ::viam::module::v1::HandlerMap* ReadyResponse::mutable_handlermap() {
  ::viam::module::v1::HandlerMap* _msg = _internal_mutable_handlermap();
  // @@protoc_insertion_point(field_mutable:viam.module.v1.ReadyResponse.handlermap)
  return _msg;
}
inline void ReadyResponse::set_allocated_handlermap(::viam::module::v1::HandlerMap* handlermap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete handlermap_;
  }
  if (handlermap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(handlermap);
    if (message_arena != submessage_arena) {
      handlermap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handlermap, submessage_arena);
    }
    
  } else {
    
  }
  handlermap_ = handlermap;
  // @@protoc_insertion_point(field_set_allocated:viam.module.v1.ReadyResponse.handlermap)
}

// string webrtc_answer = 3 [json_name = "webrtcAnswer"];
inline void ReadyResponse::clear_webrtc_answer() {
  webrtc_answer_.ClearToEmpty();
}
inline const std::string& ReadyResponse::webrtc_answer() const {
  // @@protoc_insertion_point(field_get:viam.module.v1.ReadyResponse.webrtc_answer)
  return _internal_webrtc_answer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadyResponse::set_webrtc_answer(ArgT0&& arg0, ArgT... args) {
 
 webrtc_answer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.module.v1.ReadyResponse.webrtc_answer)
}
inline std::string* ReadyResponse::mutable_webrtc_answer() {
  std::string* _s = _internal_mutable_webrtc_answer();
  // @@protoc_insertion_point(field_mutable:viam.module.v1.ReadyResponse.webrtc_answer)
  return _s;
}
inline const std::string& ReadyResponse::_internal_webrtc_answer() const {
  return webrtc_answer_.Get();
}
inline void ReadyResponse::_internal_set_webrtc_answer(const std::string& value) {
  
  webrtc_answer_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadyResponse::_internal_mutable_webrtc_answer() {
  
  return webrtc_answer_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadyResponse::release_webrtc_answer() {
  // @@protoc_insertion_point(field_release:viam.module.v1.ReadyResponse.webrtc_answer)
  return webrtc_answer_.Release();
}
inline void ReadyResponse::set_allocated_webrtc_answer(std::string* webrtc_answer) {
  if (webrtc_answer != nullptr) {
    
  } else {
    
  }
  webrtc_answer_.SetAllocated(webrtc_answer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (webrtc_answer_.IsDefault()) {
    webrtc_answer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.module.v1.ReadyResponse.webrtc_answer)
}

// -------------------------------------------------------------------

// ValidateConfigRequest

// .viam.app.v1.ComponentConfig config = 1 [json_name = "config"];
inline bool ValidateConfigRequest::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool ValidateConfigRequest::has_config() const {
  return _internal_has_config();
}
inline const ::viam::app::v1::ComponentConfig& ValidateConfigRequest::_internal_config() const {
  const ::viam::app::v1::ComponentConfig* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::v1::ComponentConfig&>(
      ::viam::app::v1::_ComponentConfig_default_instance_);
}
inline const ::viam::app::v1::ComponentConfig& ValidateConfigRequest::config() const {
  // @@protoc_insertion_point(field_get:viam.module.v1.ValidateConfigRequest.config)
  return _internal_config();
}
inline void ValidateConfigRequest::unsafe_arena_set_allocated_config(
    ::viam::app::v1::ComponentConfig* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.module.v1.ValidateConfigRequest.config)
}
inline ::viam::app::v1::ComponentConfig* ValidateConfigRequest::release_config() {
  
  ::viam::app::v1::ComponentConfig* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::v1::ComponentConfig* ValidateConfigRequest::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:viam.module.v1.ValidateConfigRequest.config)
  
  ::viam::app::v1::ComponentConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::viam::app::v1::ComponentConfig* ValidateConfigRequest::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::v1::ComponentConfig>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::viam::app::v1::ComponentConfig* ValidateConfigRequest::mutable_config() {
  ::viam::app::v1::ComponentConfig* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:viam.module.v1.ValidateConfigRequest.config)
  return _msg;
}
inline void ValidateConfigRequest::set_allocated_config(::viam::app::v1::ComponentConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config));
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:viam.module.v1.ValidateConfigRequest.config)
}

// -------------------------------------------------------------------

// ValidateConfigResponse

// repeated string dependencies = 1 [json_name = "dependencies"];
inline int ValidateConfigResponse::_internal_dependencies_size() const {
  return dependencies_.size();
}
inline int ValidateConfigResponse::dependencies_size() const {
  return _internal_dependencies_size();
}
inline void ValidateConfigResponse::clear_dependencies() {
  dependencies_.Clear();
}
inline std::string* ValidateConfigResponse::add_dependencies() {
  std::string* _s = _internal_add_dependencies();
  // @@protoc_insertion_point(field_add_mutable:viam.module.v1.ValidateConfigResponse.dependencies)
  return _s;
}
inline const std::string& ValidateConfigResponse::_internal_dependencies(int index) const {
  return dependencies_.Get(index);
}
inline const std::string& ValidateConfigResponse::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:viam.module.v1.ValidateConfigResponse.dependencies)
  return _internal_dependencies(index);
}
inline std::string* ValidateConfigResponse::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:viam.module.v1.ValidateConfigResponse.dependencies)
  return dependencies_.Mutable(index);
}
inline void ValidateConfigResponse::set_dependencies(int index, const std::string& value) {
  dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.module.v1.ValidateConfigResponse.dependencies)
}
inline void ValidateConfigResponse::set_dependencies(int index, std::string&& value) {
  dependencies_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.module.v1.ValidateConfigResponse.dependencies)
}
inline void ValidateConfigResponse::set_dependencies(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dependencies_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.module.v1.ValidateConfigResponse.dependencies)
}
inline void ValidateConfigResponse::set_dependencies(int index, const char* value, size_t size) {
  dependencies_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.module.v1.ValidateConfigResponse.dependencies)
}
inline std::string* ValidateConfigResponse::_internal_add_dependencies() {
  return dependencies_.Add();
}
inline void ValidateConfigResponse::add_dependencies(const std::string& value) {
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.module.v1.ValidateConfigResponse.dependencies)
}
inline void ValidateConfigResponse::add_dependencies(std::string&& value) {
  dependencies_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.module.v1.ValidateConfigResponse.dependencies)
}
inline void ValidateConfigResponse::add_dependencies(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dependencies_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.module.v1.ValidateConfigResponse.dependencies)
}
inline void ValidateConfigResponse::add_dependencies(const char* value, size_t size) {
  dependencies_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.module.v1.ValidateConfigResponse.dependencies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ValidateConfigResponse::dependencies() const {
  // @@protoc_insertion_point(field_list:viam.module.v1.ValidateConfigResponse.dependencies)
  return dependencies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ValidateConfigResponse::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:viam.module.v1.ValidateConfigResponse.dependencies)
  return &dependencies_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace module
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_module_2fv1_2fmodule_2eproto
