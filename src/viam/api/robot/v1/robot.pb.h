// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot/v1/robot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_robot_2fv1_2frobot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_robot_2fv1_2frobot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_robot_2fv1_2frobot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_robot_2fv1_2frobot_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_2fv1_2frobot_2eproto;
namespace viam {
namespace robot {
namespace v1 {
class BlockForOperationRequest;
struct BlockForOperationRequestDefaultTypeInternal;
extern BlockForOperationRequestDefaultTypeInternal _BlockForOperationRequest_default_instance_;
class BlockForOperationResponse;
struct BlockForOperationResponseDefaultTypeInternal;
extern BlockForOperationResponseDefaultTypeInternal _BlockForOperationResponse_default_instance_;
class CancelOperationRequest;
struct CancelOperationRequestDefaultTypeInternal;
extern CancelOperationRequestDefaultTypeInternal _CancelOperationRequest_default_instance_;
class CancelOperationResponse;
struct CancelOperationResponseDefaultTypeInternal;
extern CancelOperationResponseDefaultTypeInternal _CancelOperationResponse_default_instance_;
class ConfigStatus;
struct ConfigStatusDefaultTypeInternal;
extern ConfigStatusDefaultTypeInternal _ConfigStatus_default_instance_;
class DiscoverComponentsRequest;
struct DiscoverComponentsRequestDefaultTypeInternal;
extern DiscoverComponentsRequestDefaultTypeInternal _DiscoverComponentsRequest_default_instance_;
class DiscoverComponentsResponse;
struct DiscoverComponentsResponseDefaultTypeInternal;
extern DiscoverComponentsResponseDefaultTypeInternal _DiscoverComponentsResponse_default_instance_;
class Discovery;
struct DiscoveryDefaultTypeInternal;
extern DiscoveryDefaultTypeInternal _Discovery_default_instance_;
class DiscoveryQuery;
struct DiscoveryQueryDefaultTypeInternal;
extern DiscoveryQueryDefaultTypeInternal _DiscoveryQuery_default_instance_;
class FrameSystemConfig;
struct FrameSystemConfigDefaultTypeInternal;
extern FrameSystemConfigDefaultTypeInternal _FrameSystemConfig_default_instance_;
class FrameSystemConfigRequest;
struct FrameSystemConfigRequestDefaultTypeInternal;
extern FrameSystemConfigRequestDefaultTypeInternal _FrameSystemConfigRequest_default_instance_;
class FrameSystemConfigResponse;
struct FrameSystemConfigResponseDefaultTypeInternal;
extern FrameSystemConfigResponseDefaultTypeInternal _FrameSystemConfigResponse_default_instance_;
class GetCloudMetadataRequest;
struct GetCloudMetadataRequestDefaultTypeInternal;
extern GetCloudMetadataRequestDefaultTypeInternal _GetCloudMetadataRequest_default_instance_;
class GetCloudMetadataResponse;
struct GetCloudMetadataResponseDefaultTypeInternal;
extern GetCloudMetadataResponseDefaultTypeInternal _GetCloudMetadataResponse_default_instance_;
class GetMachineStatusRequest;
struct GetMachineStatusRequestDefaultTypeInternal;
extern GetMachineStatusRequestDefaultTypeInternal _GetMachineStatusRequest_default_instance_;
class GetMachineStatusResponse;
struct GetMachineStatusResponseDefaultTypeInternal;
extern GetMachineStatusResponseDefaultTypeInternal _GetMachineStatusResponse_default_instance_;
class GetModelsFromModulesRequest;
struct GetModelsFromModulesRequestDefaultTypeInternal;
extern GetModelsFromModulesRequestDefaultTypeInternal _GetModelsFromModulesRequest_default_instance_;
class GetModelsFromModulesResponse;
struct GetModelsFromModulesResponseDefaultTypeInternal;
extern GetModelsFromModulesResponseDefaultTypeInternal _GetModelsFromModulesResponse_default_instance_;
class GetOperationsRequest;
struct GetOperationsRequestDefaultTypeInternal;
extern GetOperationsRequestDefaultTypeInternal _GetOperationsRequest_default_instance_;
class GetOperationsResponse;
struct GetOperationsResponseDefaultTypeInternal;
extern GetOperationsResponseDefaultTypeInternal _GetOperationsResponse_default_instance_;
class GetSessionsRequest;
struct GetSessionsRequestDefaultTypeInternal;
extern GetSessionsRequestDefaultTypeInternal _GetSessionsRequest_default_instance_;
class GetSessionsResponse;
struct GetSessionsResponseDefaultTypeInternal;
extern GetSessionsResponseDefaultTypeInternal _GetSessionsResponse_default_instance_;
class GetStatusRequest;
struct GetStatusRequestDefaultTypeInternal;
extern GetStatusRequestDefaultTypeInternal _GetStatusRequest_default_instance_;
class GetStatusResponse;
struct GetStatusResponseDefaultTypeInternal;
extern GetStatusResponseDefaultTypeInternal _GetStatusResponse_default_instance_;
class GetVersionRequest;
struct GetVersionRequestDefaultTypeInternal;
extern GetVersionRequestDefaultTypeInternal _GetVersionRequest_default_instance_;
class GetVersionResponse;
struct GetVersionResponseDefaultTypeInternal;
extern GetVersionResponseDefaultTypeInternal _GetVersionResponse_default_instance_;
class ListTunnelsRequest;
struct ListTunnelsRequestDefaultTypeInternal;
extern ListTunnelsRequestDefaultTypeInternal _ListTunnelsRequest_default_instance_;
class ListTunnelsResponse;
struct ListTunnelsResponseDefaultTypeInternal;
extern ListTunnelsResponseDefaultTypeInternal _ListTunnelsResponse_default_instance_;
class LogRequest;
struct LogRequestDefaultTypeInternal;
extern LogRequestDefaultTypeInternal _LogRequest_default_instance_;
class LogResponse;
struct LogResponseDefaultTypeInternal;
extern LogResponseDefaultTypeInternal _LogResponse_default_instance_;
class ModuleModel;
struct ModuleModelDefaultTypeInternal;
extern ModuleModelDefaultTypeInternal _ModuleModel_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class PeerConnectionInfo;
struct PeerConnectionInfoDefaultTypeInternal;
extern PeerConnectionInfoDefaultTypeInternal _PeerConnectionInfo_default_instance_;
class ResourceNamesRequest;
struct ResourceNamesRequestDefaultTypeInternal;
extern ResourceNamesRequestDefaultTypeInternal _ResourceNamesRequest_default_instance_;
class ResourceNamesResponse;
struct ResourceNamesResponseDefaultTypeInternal;
extern ResourceNamesResponseDefaultTypeInternal _ResourceNamesResponse_default_instance_;
class ResourceRPCSubtype;
struct ResourceRPCSubtypeDefaultTypeInternal;
extern ResourceRPCSubtypeDefaultTypeInternal _ResourceRPCSubtype_default_instance_;
class ResourceRPCSubtypesRequest;
struct ResourceRPCSubtypesRequestDefaultTypeInternal;
extern ResourceRPCSubtypesRequestDefaultTypeInternal _ResourceRPCSubtypesRequest_default_instance_;
class ResourceRPCSubtypesResponse;
struct ResourceRPCSubtypesResponseDefaultTypeInternal;
extern ResourceRPCSubtypesResponseDefaultTypeInternal _ResourceRPCSubtypesResponse_default_instance_;
class ResourceStatus;
struct ResourceStatusDefaultTypeInternal;
extern ResourceStatusDefaultTypeInternal _ResourceStatus_default_instance_;
class RestartModuleRequest;
struct RestartModuleRequestDefaultTypeInternal;
extern RestartModuleRequestDefaultTypeInternal _RestartModuleRequest_default_instance_;
class RestartModuleResponse;
struct RestartModuleResponseDefaultTypeInternal;
extern RestartModuleResponseDefaultTypeInternal _RestartModuleResponse_default_instance_;
class SendSessionHeartbeatRequest;
struct SendSessionHeartbeatRequestDefaultTypeInternal;
extern SendSessionHeartbeatRequestDefaultTypeInternal _SendSessionHeartbeatRequest_default_instance_;
class SendSessionHeartbeatResponse;
struct SendSessionHeartbeatResponseDefaultTypeInternal;
extern SendSessionHeartbeatResponseDefaultTypeInternal _SendSessionHeartbeatResponse_default_instance_;
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class ShutdownRequest;
struct ShutdownRequestDefaultTypeInternal;
extern ShutdownRequestDefaultTypeInternal _ShutdownRequest_default_instance_;
class ShutdownResponse;
struct ShutdownResponseDefaultTypeInternal;
extern ShutdownResponseDefaultTypeInternal _ShutdownResponse_default_instance_;
class StartSessionRequest;
struct StartSessionRequestDefaultTypeInternal;
extern StartSessionRequestDefaultTypeInternal _StartSessionRequest_default_instance_;
class StartSessionResponse;
struct StartSessionResponseDefaultTypeInternal;
extern StartSessionResponseDefaultTypeInternal _StartSessionResponse_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StopAllRequest;
struct StopAllRequestDefaultTypeInternal;
extern StopAllRequestDefaultTypeInternal _StopAllRequest_default_instance_;
class StopAllResponse;
struct StopAllResponseDefaultTypeInternal;
extern StopAllResponseDefaultTypeInternal _StopAllResponse_default_instance_;
class StopExtraParameters;
struct StopExtraParametersDefaultTypeInternal;
extern StopExtraParametersDefaultTypeInternal _StopExtraParameters_default_instance_;
class StreamStatusRequest;
struct StreamStatusRequestDefaultTypeInternal;
extern StreamStatusRequestDefaultTypeInternal _StreamStatusRequest_default_instance_;
class StreamStatusResponse;
struct StreamStatusResponseDefaultTypeInternal;
extern StreamStatusResponseDefaultTypeInternal _StreamStatusResponse_default_instance_;
class TransformPCDRequest;
struct TransformPCDRequestDefaultTypeInternal;
extern TransformPCDRequestDefaultTypeInternal _TransformPCDRequest_default_instance_;
class TransformPCDResponse;
struct TransformPCDResponseDefaultTypeInternal;
extern TransformPCDResponseDefaultTypeInternal _TransformPCDResponse_default_instance_;
class TransformPoseRequest;
struct TransformPoseRequestDefaultTypeInternal;
extern TransformPoseRequestDefaultTypeInternal _TransformPoseRequest_default_instance_;
class TransformPoseResponse;
struct TransformPoseResponseDefaultTypeInternal;
extern TransformPoseResponseDefaultTypeInternal _TransformPoseResponse_default_instance_;
class Tunnel;
struct TunnelDefaultTypeInternal;
extern TunnelDefaultTypeInternal _Tunnel_default_instance_;
class TunnelRequest;
struct TunnelRequestDefaultTypeInternal;
extern TunnelRequestDefaultTypeInternal _TunnelRequest_default_instance_;
class TunnelResponse;
struct TunnelResponseDefaultTypeInternal;
extern TunnelResponseDefaultTypeInternal _TunnelResponse_default_instance_;
}  // namespace v1
}  // namespace robot
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::robot::v1::BlockForOperationRequest* Arena::CreateMaybeMessage<::viam::robot::v1::BlockForOperationRequest>(Arena*);
template<> ::viam::robot::v1::BlockForOperationResponse* Arena::CreateMaybeMessage<::viam::robot::v1::BlockForOperationResponse>(Arena*);
template<> ::viam::robot::v1::CancelOperationRequest* Arena::CreateMaybeMessage<::viam::robot::v1::CancelOperationRequest>(Arena*);
template<> ::viam::robot::v1::CancelOperationResponse* Arena::CreateMaybeMessage<::viam::robot::v1::CancelOperationResponse>(Arena*);
template<> ::viam::robot::v1::ConfigStatus* Arena::CreateMaybeMessage<::viam::robot::v1::ConfigStatus>(Arena*);
template<> ::viam::robot::v1::DiscoverComponentsRequest* Arena::CreateMaybeMessage<::viam::robot::v1::DiscoverComponentsRequest>(Arena*);
template<> ::viam::robot::v1::DiscoverComponentsResponse* Arena::CreateMaybeMessage<::viam::robot::v1::DiscoverComponentsResponse>(Arena*);
template<> ::viam::robot::v1::Discovery* Arena::CreateMaybeMessage<::viam::robot::v1::Discovery>(Arena*);
template<> ::viam::robot::v1::DiscoveryQuery* Arena::CreateMaybeMessage<::viam::robot::v1::DiscoveryQuery>(Arena*);
template<> ::viam::robot::v1::FrameSystemConfig* Arena::CreateMaybeMessage<::viam::robot::v1::FrameSystemConfig>(Arena*);
template<> ::viam::robot::v1::FrameSystemConfigRequest* Arena::CreateMaybeMessage<::viam::robot::v1::FrameSystemConfigRequest>(Arena*);
template<> ::viam::robot::v1::FrameSystemConfigResponse* Arena::CreateMaybeMessage<::viam::robot::v1::FrameSystemConfigResponse>(Arena*);
template<> ::viam::robot::v1::GetCloudMetadataRequest* Arena::CreateMaybeMessage<::viam::robot::v1::GetCloudMetadataRequest>(Arena*);
template<> ::viam::robot::v1::GetCloudMetadataResponse* Arena::CreateMaybeMessage<::viam::robot::v1::GetCloudMetadataResponse>(Arena*);
template<> ::viam::robot::v1::GetMachineStatusRequest* Arena::CreateMaybeMessage<::viam::robot::v1::GetMachineStatusRequest>(Arena*);
template<> ::viam::robot::v1::GetMachineStatusResponse* Arena::CreateMaybeMessage<::viam::robot::v1::GetMachineStatusResponse>(Arena*);
template<> ::viam::robot::v1::GetModelsFromModulesRequest* Arena::CreateMaybeMessage<::viam::robot::v1::GetModelsFromModulesRequest>(Arena*);
template<> ::viam::robot::v1::GetModelsFromModulesResponse* Arena::CreateMaybeMessage<::viam::robot::v1::GetModelsFromModulesResponse>(Arena*);
template<> ::viam::robot::v1::GetOperationsRequest* Arena::CreateMaybeMessage<::viam::robot::v1::GetOperationsRequest>(Arena*);
template<> ::viam::robot::v1::GetOperationsResponse* Arena::CreateMaybeMessage<::viam::robot::v1::GetOperationsResponse>(Arena*);
template<> ::viam::robot::v1::GetSessionsRequest* Arena::CreateMaybeMessage<::viam::robot::v1::GetSessionsRequest>(Arena*);
template<> ::viam::robot::v1::GetSessionsResponse* Arena::CreateMaybeMessage<::viam::robot::v1::GetSessionsResponse>(Arena*);
template<> ::viam::robot::v1::GetStatusRequest* Arena::CreateMaybeMessage<::viam::robot::v1::GetStatusRequest>(Arena*);
template<> ::viam::robot::v1::GetStatusResponse* Arena::CreateMaybeMessage<::viam::robot::v1::GetStatusResponse>(Arena*);
template<> ::viam::robot::v1::GetVersionRequest* Arena::CreateMaybeMessage<::viam::robot::v1::GetVersionRequest>(Arena*);
template<> ::viam::robot::v1::GetVersionResponse* Arena::CreateMaybeMessage<::viam::robot::v1::GetVersionResponse>(Arena*);
template<> ::viam::robot::v1::ListTunnelsRequest* Arena::CreateMaybeMessage<::viam::robot::v1::ListTunnelsRequest>(Arena*);
template<> ::viam::robot::v1::ListTunnelsResponse* Arena::CreateMaybeMessage<::viam::robot::v1::ListTunnelsResponse>(Arena*);
template<> ::viam::robot::v1::LogRequest* Arena::CreateMaybeMessage<::viam::robot::v1::LogRequest>(Arena*);
template<> ::viam::robot::v1::LogResponse* Arena::CreateMaybeMessage<::viam::robot::v1::LogResponse>(Arena*);
template<> ::viam::robot::v1::ModuleModel* Arena::CreateMaybeMessage<::viam::robot::v1::ModuleModel>(Arena*);
template<> ::viam::robot::v1::Operation* Arena::CreateMaybeMessage<::viam::robot::v1::Operation>(Arena*);
template<> ::viam::robot::v1::PeerConnectionInfo* Arena::CreateMaybeMessage<::viam::robot::v1::PeerConnectionInfo>(Arena*);
template<> ::viam::robot::v1::ResourceNamesRequest* Arena::CreateMaybeMessage<::viam::robot::v1::ResourceNamesRequest>(Arena*);
template<> ::viam::robot::v1::ResourceNamesResponse* Arena::CreateMaybeMessage<::viam::robot::v1::ResourceNamesResponse>(Arena*);
template<> ::viam::robot::v1::ResourceRPCSubtype* Arena::CreateMaybeMessage<::viam::robot::v1::ResourceRPCSubtype>(Arena*);
template<> ::viam::robot::v1::ResourceRPCSubtypesRequest* Arena::CreateMaybeMessage<::viam::robot::v1::ResourceRPCSubtypesRequest>(Arena*);
template<> ::viam::robot::v1::ResourceRPCSubtypesResponse* Arena::CreateMaybeMessage<::viam::robot::v1::ResourceRPCSubtypesResponse>(Arena*);
template<> ::viam::robot::v1::ResourceStatus* Arena::CreateMaybeMessage<::viam::robot::v1::ResourceStatus>(Arena*);
template<> ::viam::robot::v1::RestartModuleRequest* Arena::CreateMaybeMessage<::viam::robot::v1::RestartModuleRequest>(Arena*);
template<> ::viam::robot::v1::RestartModuleResponse* Arena::CreateMaybeMessage<::viam::robot::v1::RestartModuleResponse>(Arena*);
template<> ::viam::robot::v1::SendSessionHeartbeatRequest* Arena::CreateMaybeMessage<::viam::robot::v1::SendSessionHeartbeatRequest>(Arena*);
template<> ::viam::robot::v1::SendSessionHeartbeatResponse* Arena::CreateMaybeMessage<::viam::robot::v1::SendSessionHeartbeatResponse>(Arena*);
template<> ::viam::robot::v1::Session* Arena::CreateMaybeMessage<::viam::robot::v1::Session>(Arena*);
template<> ::viam::robot::v1::ShutdownRequest* Arena::CreateMaybeMessage<::viam::robot::v1::ShutdownRequest>(Arena*);
template<> ::viam::robot::v1::ShutdownResponse* Arena::CreateMaybeMessage<::viam::robot::v1::ShutdownResponse>(Arena*);
template<> ::viam::robot::v1::StartSessionRequest* Arena::CreateMaybeMessage<::viam::robot::v1::StartSessionRequest>(Arena*);
template<> ::viam::robot::v1::StartSessionResponse* Arena::CreateMaybeMessage<::viam::robot::v1::StartSessionResponse>(Arena*);
template<> ::viam::robot::v1::Status* Arena::CreateMaybeMessage<::viam::robot::v1::Status>(Arena*);
template<> ::viam::robot::v1::StopAllRequest* Arena::CreateMaybeMessage<::viam::robot::v1::StopAllRequest>(Arena*);
template<> ::viam::robot::v1::StopAllResponse* Arena::CreateMaybeMessage<::viam::robot::v1::StopAllResponse>(Arena*);
template<> ::viam::robot::v1::StopExtraParameters* Arena::CreateMaybeMessage<::viam::robot::v1::StopExtraParameters>(Arena*);
template<> ::viam::robot::v1::StreamStatusRequest* Arena::CreateMaybeMessage<::viam::robot::v1::StreamStatusRequest>(Arena*);
template<> ::viam::robot::v1::StreamStatusResponse* Arena::CreateMaybeMessage<::viam::robot::v1::StreamStatusResponse>(Arena*);
template<> ::viam::robot::v1::TransformPCDRequest* Arena::CreateMaybeMessage<::viam::robot::v1::TransformPCDRequest>(Arena*);
template<> ::viam::robot::v1::TransformPCDResponse* Arena::CreateMaybeMessage<::viam::robot::v1::TransformPCDResponse>(Arena*);
template<> ::viam::robot::v1::TransformPoseRequest* Arena::CreateMaybeMessage<::viam::robot::v1::TransformPoseRequest>(Arena*);
template<> ::viam::robot::v1::TransformPoseResponse* Arena::CreateMaybeMessage<::viam::robot::v1::TransformPoseResponse>(Arena*);
template<> ::viam::robot::v1::Tunnel* Arena::CreateMaybeMessage<::viam::robot::v1::Tunnel>(Arena*);
template<> ::viam::robot::v1::TunnelRequest* Arena::CreateMaybeMessage<::viam::robot::v1::TunnelRequest>(Arena*);
template<> ::viam::robot::v1::TunnelResponse* Arena::CreateMaybeMessage<::viam::robot::v1::TunnelResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace robot {
namespace v1 {

enum GetMachineStatusResponse_State : int {
  GetMachineStatusResponse_State_STATE_UNSPECIFIED = 0,
  GetMachineStatusResponse_State_STATE_INITIALIZING = 1,
  GetMachineStatusResponse_State_STATE_RUNNING = 2,
  GetMachineStatusResponse_State_GetMachineStatusResponse_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GetMachineStatusResponse_State_GetMachineStatusResponse_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GetMachineStatusResponse_State_IsValid(int value);
constexpr GetMachineStatusResponse_State GetMachineStatusResponse_State_State_MIN = GetMachineStatusResponse_State_STATE_UNSPECIFIED;
constexpr GetMachineStatusResponse_State GetMachineStatusResponse_State_State_MAX = GetMachineStatusResponse_State_STATE_RUNNING;
constexpr int GetMachineStatusResponse_State_State_ARRAYSIZE = GetMachineStatusResponse_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetMachineStatusResponse_State_descriptor();
template<typename T>
inline const std::string& GetMachineStatusResponse_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetMachineStatusResponse_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetMachineStatusResponse_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetMachineStatusResponse_State_descriptor(), enum_t_value);
}
inline bool GetMachineStatusResponse_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GetMachineStatusResponse_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetMachineStatusResponse_State>(
    GetMachineStatusResponse_State_descriptor(), name, value);
}
enum ResourceStatus_State : int {
  ResourceStatus_State_STATE_UNSPECIFIED = 0,
  ResourceStatus_State_STATE_UNCONFIGURED = 1,
  ResourceStatus_State_STATE_CONFIGURING = 2,
  ResourceStatus_State_STATE_READY = 3,
  ResourceStatus_State_STATE_REMOVING = 4,
  ResourceStatus_State_STATE_UNHEALTHY = 5,
  ResourceStatus_State_ResourceStatus_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResourceStatus_State_ResourceStatus_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResourceStatus_State_IsValid(int value);
constexpr ResourceStatus_State ResourceStatus_State_State_MIN = ResourceStatus_State_STATE_UNSPECIFIED;
constexpr ResourceStatus_State ResourceStatus_State_State_MAX = ResourceStatus_State_STATE_UNHEALTHY;
constexpr int ResourceStatus_State_State_ARRAYSIZE = ResourceStatus_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceStatus_State_descriptor();
template<typename T>
inline const std::string& ResourceStatus_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourceStatus_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourceStatus_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResourceStatus_State_descriptor(), enum_t_value);
}
inline bool ResourceStatus_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResourceStatus_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResourceStatus_State>(
    ResourceStatus_State_descriptor(), name, value);
}
enum PeerConnectionType : int {
  PEER_CONNECTION_TYPE_UNSPECIFIED = 0,
  PEER_CONNECTION_TYPE_GRPC = 1,
  PEER_CONNECTION_TYPE_WEBRTC = 2,
  PeerConnectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PeerConnectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PeerConnectionType_IsValid(int value);
constexpr PeerConnectionType PeerConnectionType_MIN = PEER_CONNECTION_TYPE_UNSPECIFIED;
constexpr PeerConnectionType PeerConnectionType_MAX = PEER_CONNECTION_TYPE_WEBRTC;
constexpr int PeerConnectionType_ARRAYSIZE = PeerConnectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerConnectionType_descriptor();
template<typename T>
inline const std::string& PeerConnectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeerConnectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeerConnectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeerConnectionType_descriptor(), enum_t_value);
}
inline bool PeerConnectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PeerConnectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeerConnectionType>(
    PeerConnectionType_descriptor(), name, value);
}
// ===================================================================

class TunnelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.TunnelRequest) */ {
 public:
  inline TunnelRequest() : TunnelRequest(nullptr) {}
  ~TunnelRequest() override;
  explicit PROTOBUF_CONSTEXPR TunnelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TunnelRequest(const TunnelRequest& from);
  TunnelRequest(TunnelRequest&& from) noexcept
    : TunnelRequest() {
    *this = ::std::move(from);
  }

  inline TunnelRequest& operator=(const TunnelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelRequest& operator=(TunnelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TunnelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TunnelRequest* internal_default_instance() {
    return reinterpret_cast<const TunnelRequest*>(
               &_TunnelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TunnelRequest& a, TunnelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TunnelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TunnelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TunnelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TunnelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.TunnelRequest";
  }
  protected:
  explicit TunnelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kDestinationPortFieldNumber = 1,
  };
  // bytes data = 2 [json_name = "data"];
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 destination_port = 1 [json_name = "destinationPort"];
  void clear_destination_port();
  uint32_t destination_port() const;
  void set_destination_port(uint32_t value);
  private:
  uint32_t _internal_destination_port() const;
  void _internal_set_destination_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.TunnelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t destination_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class TunnelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.TunnelResponse) */ {
 public:
  inline TunnelResponse() : TunnelResponse(nullptr) {}
  ~TunnelResponse() override;
  explicit PROTOBUF_CONSTEXPR TunnelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TunnelResponse(const TunnelResponse& from);
  TunnelResponse(TunnelResponse&& from) noexcept
    : TunnelResponse() {
    *this = ::std::move(from);
  }

  inline TunnelResponse& operator=(const TunnelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TunnelResponse& operator=(TunnelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TunnelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TunnelResponse* internal_default_instance() {
    return reinterpret_cast<const TunnelResponse*>(
               &_TunnelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TunnelResponse& a, TunnelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TunnelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TunnelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TunnelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TunnelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TunnelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TunnelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TunnelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.TunnelResponse";
  }
  protected:
  explicit TunnelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1 [json_name = "data"];
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.TunnelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ListTunnelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.ListTunnelsRequest) */ {
 public:
  inline ListTunnelsRequest() : ListTunnelsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ListTunnelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTunnelsRequest(const ListTunnelsRequest& from);
  ListTunnelsRequest(ListTunnelsRequest&& from) noexcept
    : ListTunnelsRequest() {
    *this = ::std::move(from);
  }

  inline ListTunnelsRequest& operator=(const ListTunnelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTunnelsRequest& operator=(ListTunnelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTunnelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTunnelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTunnelsRequest*>(
               &_ListTunnelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListTunnelsRequest& a, ListTunnelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTunnelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTunnelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTunnelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTunnelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListTunnelsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListTunnelsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ListTunnelsRequest";
  }
  protected:
  explicit ListTunnelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ListTunnelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ListTunnelsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.ListTunnelsResponse) */ {
 public:
  inline ListTunnelsResponse() : ListTunnelsResponse(nullptr) {}
  ~ListTunnelsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListTunnelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTunnelsResponse(const ListTunnelsResponse& from);
  ListTunnelsResponse(ListTunnelsResponse&& from) noexcept
    : ListTunnelsResponse() {
    *this = ::std::move(from);
  }

  inline ListTunnelsResponse& operator=(const ListTunnelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTunnelsResponse& operator=(ListTunnelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTunnelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTunnelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTunnelsResponse*>(
               &_ListTunnelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListTunnelsResponse& a, ListTunnelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTunnelsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTunnelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTunnelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTunnelsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTunnelsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListTunnelsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTunnelsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ListTunnelsResponse";
  }
  protected:
  explicit ListTunnelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTunnelsFieldNumber = 1,
  };
  // repeated .viam.robot.v1.Tunnel tunnels = 1 [json_name = "tunnels"];
  int tunnels_size() const;
  private:
  int _internal_tunnels_size() const;
  public:
  void clear_tunnels();
  ::viam::robot::v1::Tunnel* mutable_tunnels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Tunnel >*
      mutable_tunnels();
  private:
  const ::viam::robot::v1::Tunnel& _internal_tunnels(int index) const;
  ::viam::robot::v1::Tunnel* _internal_add_tunnels();
  public:
  const ::viam::robot::v1::Tunnel& tunnels(int index) const;
  ::viam::robot::v1::Tunnel* add_tunnels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Tunnel >&
      tunnels() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ListTunnelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Tunnel > tunnels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class Tunnel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.Tunnel) */ {
 public:
  inline Tunnel() : Tunnel(nullptr) {}
  ~Tunnel() override;
  explicit PROTOBUF_CONSTEXPR Tunnel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tunnel(const Tunnel& from);
  Tunnel(Tunnel&& from) noexcept
    : Tunnel() {
    *this = ::std::move(from);
  }

  inline Tunnel& operator=(const Tunnel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tunnel& operator=(Tunnel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tunnel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tunnel* internal_default_instance() {
    return reinterpret_cast<const Tunnel*>(
               &_Tunnel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Tunnel& a, Tunnel& b) {
    a.Swap(&b);
  }
  inline void Swap(Tunnel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tunnel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tunnel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tunnel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Tunnel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Tunnel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tunnel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.Tunnel";
  }
  protected:
  explicit Tunnel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionTimeoutFieldNumber = 2,
    kPortFieldNumber = 1,
  };
  // .google.protobuf.Duration connection_timeout = 2 [json_name = "connectionTimeout"];
  bool has_connection_timeout() const;
  private:
  bool _internal_has_connection_timeout() const;
  public:
  void clear_connection_timeout();
  const ::PROTOBUF_NAMESPACE_ID::Duration& connection_timeout() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_connection_timeout();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_connection_timeout();
  void set_allocated_connection_timeout(::PROTOBUF_NAMESPACE_ID::Duration* connection_timeout);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_connection_timeout() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_connection_timeout();
  public:
  void unsafe_arena_set_allocated_connection_timeout(
      ::PROTOBUF_NAMESPACE_ID::Duration* connection_timeout);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_connection_timeout();

  // uint32 port = 1 [json_name = "port"];
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.Tunnel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Duration* connection_timeout_;
  uint32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class FrameSystemConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.FrameSystemConfig) */ {
 public:
  inline FrameSystemConfig() : FrameSystemConfig(nullptr) {}
  ~FrameSystemConfig() override;
  explicit PROTOBUF_CONSTEXPR FrameSystemConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSystemConfig(const FrameSystemConfig& from);
  FrameSystemConfig(FrameSystemConfig&& from) noexcept
    : FrameSystemConfig() {
    *this = ::std::move(from);
  }

  inline FrameSystemConfig& operator=(const FrameSystemConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSystemConfig& operator=(FrameSystemConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSystemConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSystemConfig* internal_default_instance() {
    return reinterpret_cast<const FrameSystemConfig*>(
               &_FrameSystemConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FrameSystemConfig& a, FrameSystemConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSystemConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSystemConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameSystemConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameSystemConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameSystemConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrameSystemConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSystemConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.FrameSystemConfig";
  }
  protected:
  explicit FrameSystemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 1,
    kKinematicsFieldNumber = 2,
  };
  // .viam.common.v1.Transform frame = 1 [json_name = "frame"];
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::viam::common::v1::Transform& frame() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Transform* release_frame();
  ::viam::common::v1::Transform* mutable_frame();
  void set_allocated_frame(::viam::common::v1::Transform* frame);
  private:
  const ::viam::common::v1::Transform& _internal_frame() const;
  ::viam::common::v1::Transform* _internal_mutable_frame();
  public:
  void unsafe_arena_set_allocated_frame(
      ::viam::common::v1::Transform* frame);
  ::viam::common::v1::Transform* unsafe_arena_release_frame();

  // .google.protobuf.Struct kinematics = 2 [json_name = "kinematics"];
  bool has_kinematics() const;
  private:
  bool _internal_has_kinematics() const;
  public:
  void clear_kinematics();
  const ::PROTOBUF_NAMESPACE_ID::Struct& kinematics() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_kinematics();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_kinematics();
  void set_allocated_kinematics(::PROTOBUF_NAMESPACE_ID::Struct* kinematics);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_kinematics() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_kinematics();
  public:
  void unsafe_arena_set_allocated_kinematics(
      ::PROTOBUF_NAMESPACE_ID::Struct* kinematics);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_kinematics();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.FrameSystemConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::Transform* frame_;
  ::PROTOBUF_NAMESPACE_ID::Struct* kinematics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class FrameSystemConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.FrameSystemConfigRequest) */ {
 public:
  inline FrameSystemConfigRequest() : FrameSystemConfigRequest(nullptr) {}
  ~FrameSystemConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR FrameSystemConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSystemConfigRequest(const FrameSystemConfigRequest& from);
  FrameSystemConfigRequest(FrameSystemConfigRequest&& from) noexcept
    : FrameSystemConfigRequest() {
    *this = ::std::move(from);
  }

  inline FrameSystemConfigRequest& operator=(const FrameSystemConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSystemConfigRequest& operator=(FrameSystemConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSystemConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSystemConfigRequest* internal_default_instance() {
    return reinterpret_cast<const FrameSystemConfigRequest*>(
               &_FrameSystemConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FrameSystemConfigRequest& a, FrameSystemConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSystemConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSystemConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameSystemConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameSystemConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameSystemConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrameSystemConfigRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSystemConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.FrameSystemConfigRequest";
  }
  protected:
  explicit FrameSystemConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupplementalTransformsFieldNumber = 1,
  };
  // repeated .viam.common.v1.Transform supplemental_transforms = 1 [json_name = "supplementalTransforms"];
  int supplemental_transforms_size() const;
  private:
  int _internal_supplemental_transforms_size() const;
  public:
  void clear_supplemental_transforms();
  ::viam::common::v1::Transform* mutable_supplemental_transforms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >*
      mutable_supplemental_transforms();
  private:
  const ::viam::common::v1::Transform& _internal_supplemental_transforms(int index) const;
  ::viam::common::v1::Transform* _internal_add_supplemental_transforms();
  public:
  const ::viam::common::v1::Transform& supplemental_transforms(int index) const;
  ::viam::common::v1::Transform* add_supplemental_transforms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >&
      supplemental_transforms() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.FrameSystemConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform > supplemental_transforms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class FrameSystemConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.FrameSystemConfigResponse) */ {
 public:
  inline FrameSystemConfigResponse() : FrameSystemConfigResponse(nullptr) {}
  ~FrameSystemConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR FrameSystemConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSystemConfigResponse(const FrameSystemConfigResponse& from);
  FrameSystemConfigResponse(FrameSystemConfigResponse&& from) noexcept
    : FrameSystemConfigResponse() {
    *this = ::std::move(from);
  }

  inline FrameSystemConfigResponse& operator=(const FrameSystemConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSystemConfigResponse& operator=(FrameSystemConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSystemConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSystemConfigResponse* internal_default_instance() {
    return reinterpret_cast<const FrameSystemConfigResponse*>(
               &_FrameSystemConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FrameSystemConfigResponse& a, FrameSystemConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSystemConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSystemConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameSystemConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameSystemConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameSystemConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrameSystemConfigResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSystemConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.FrameSystemConfigResponse";
  }
  protected:
  explicit FrameSystemConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameSystemConfigsFieldNumber = 1,
  };
  // repeated .viam.robot.v1.FrameSystemConfig frame_system_configs = 1 [json_name = "frameSystemConfigs"];
  int frame_system_configs_size() const;
  private:
  int _internal_frame_system_configs_size() const;
  public:
  void clear_frame_system_configs();
  ::viam::robot::v1::FrameSystemConfig* mutable_frame_system_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::FrameSystemConfig >*
      mutable_frame_system_configs();
  private:
  const ::viam::robot::v1::FrameSystemConfig& _internal_frame_system_configs(int index) const;
  ::viam::robot::v1::FrameSystemConfig* _internal_add_frame_system_configs();
  public:
  const ::viam::robot::v1::FrameSystemConfig& frame_system_configs(int index) const;
  ::viam::robot::v1::FrameSystemConfig* add_frame_system_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::FrameSystemConfig >&
      frame_system_configs() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.FrameSystemConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::FrameSystemConfig > frame_system_configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class TransformPoseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.TransformPoseRequest) */ {
 public:
  inline TransformPoseRequest() : TransformPoseRequest(nullptr) {}
  ~TransformPoseRequest() override;
  explicit PROTOBUF_CONSTEXPR TransformPoseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformPoseRequest(const TransformPoseRequest& from);
  TransformPoseRequest(TransformPoseRequest&& from) noexcept
    : TransformPoseRequest() {
    *this = ::std::move(from);
  }

  inline TransformPoseRequest& operator=(const TransformPoseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformPoseRequest& operator=(TransformPoseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformPoseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformPoseRequest* internal_default_instance() {
    return reinterpret_cast<const TransformPoseRequest*>(
               &_TransformPoseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransformPoseRequest& a, TransformPoseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformPoseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformPoseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformPoseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformPoseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformPoseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransformPoseRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformPoseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.TransformPoseRequest";
  }
  protected:
  explicit TransformPoseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupplementalTransformsFieldNumber = 3,
    kDestinationFieldNumber = 2,
    kSourceFieldNumber = 1,
  };
  // repeated .viam.common.v1.Transform supplemental_transforms = 3 [json_name = "supplementalTransforms"];
  int supplemental_transforms_size() const;
  private:
  int _internal_supplemental_transforms_size() const;
  public:
  void clear_supplemental_transforms();
  ::viam::common::v1::Transform* mutable_supplemental_transforms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >*
      mutable_supplemental_transforms();
  private:
  const ::viam::common::v1::Transform& _internal_supplemental_transforms(int index) const;
  ::viam::common::v1::Transform* _internal_add_supplemental_transforms();
  public:
  const ::viam::common::v1::Transform& supplemental_transforms(int index) const;
  ::viam::common::v1::Transform* add_supplemental_transforms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >&
      supplemental_transforms() const;

  // string destination = 2 [json_name = "destination"];
  void clear_destination();
  const std::string& destination() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination();
  PROTOBUF_NODISCARD std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // .viam.common.v1.PoseInFrame source = 1 [json_name = "source"];
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::viam::common::v1::PoseInFrame& source() const;
  PROTOBUF_NODISCARD ::viam::common::v1::PoseInFrame* release_source();
  ::viam::common::v1::PoseInFrame* mutable_source();
  void set_allocated_source(::viam::common::v1::PoseInFrame* source);
  private:
  const ::viam::common::v1::PoseInFrame& _internal_source() const;
  ::viam::common::v1::PoseInFrame* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::viam::common::v1::PoseInFrame* source);
  ::viam::common::v1::PoseInFrame* unsafe_arena_release_source();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.TransformPoseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform > supplemental_transforms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::viam::common::v1::PoseInFrame* source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class TransformPoseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.TransformPoseResponse) */ {
 public:
  inline TransformPoseResponse() : TransformPoseResponse(nullptr) {}
  ~TransformPoseResponse() override;
  explicit PROTOBUF_CONSTEXPR TransformPoseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformPoseResponse(const TransformPoseResponse& from);
  TransformPoseResponse(TransformPoseResponse&& from) noexcept
    : TransformPoseResponse() {
    *this = ::std::move(from);
  }

  inline TransformPoseResponse& operator=(const TransformPoseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformPoseResponse& operator=(TransformPoseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformPoseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformPoseResponse* internal_default_instance() {
    return reinterpret_cast<const TransformPoseResponse*>(
               &_TransformPoseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransformPoseResponse& a, TransformPoseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformPoseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformPoseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformPoseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformPoseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformPoseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransformPoseResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformPoseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.TransformPoseResponse";
  }
  protected:
  explicit TransformPoseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
  };
  // .viam.common.v1.PoseInFrame pose = 1 [json_name = "pose"];
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::viam::common::v1::PoseInFrame& pose() const;
  PROTOBUF_NODISCARD ::viam::common::v1::PoseInFrame* release_pose();
  ::viam::common::v1::PoseInFrame* mutable_pose();
  void set_allocated_pose(::viam::common::v1::PoseInFrame* pose);
  private:
  const ::viam::common::v1::PoseInFrame& _internal_pose() const;
  ::viam::common::v1::PoseInFrame* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::viam::common::v1::PoseInFrame* pose);
  ::viam::common::v1::PoseInFrame* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.TransformPoseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::PoseInFrame* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class TransformPCDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.TransformPCDRequest) */ {
 public:
  inline TransformPCDRequest() : TransformPCDRequest(nullptr) {}
  ~TransformPCDRequest() override;
  explicit PROTOBUF_CONSTEXPR TransformPCDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformPCDRequest(const TransformPCDRequest& from);
  TransformPCDRequest(TransformPCDRequest&& from) noexcept
    : TransformPCDRequest() {
    *this = ::std::move(from);
  }

  inline TransformPCDRequest& operator=(const TransformPCDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformPCDRequest& operator=(TransformPCDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformPCDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformPCDRequest* internal_default_instance() {
    return reinterpret_cast<const TransformPCDRequest*>(
               &_TransformPCDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TransformPCDRequest& a, TransformPCDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformPCDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformPCDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformPCDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformPCDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformPCDRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransformPCDRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformPCDRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.TransformPCDRequest";
  }
  protected:
  explicit TransformPCDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudPcdFieldNumber = 1,
    kSourceFieldNumber = 2,
    kDestinationFieldNumber = 3,
  };
  // bytes point_cloud_pcd = 1 [json_name = "pointCloudPcd"];
  void clear_point_cloud_pcd();
  const std::string& point_cloud_pcd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_cloud_pcd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_cloud_pcd();
  PROTOBUF_NODISCARD std::string* release_point_cloud_pcd();
  void set_allocated_point_cloud_pcd(std::string* point_cloud_pcd);
  private:
  const std::string& _internal_point_cloud_pcd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_cloud_pcd(const std::string& value);
  std::string* _internal_mutable_point_cloud_pcd();
  public:

  // string source = 2 [json_name = "source"];
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string destination = 3 [json_name = "destination"];
  void clear_destination();
  const std::string& destination() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination();
  PROTOBUF_NODISCARD std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.TransformPCDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_cloud_pcd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class TransformPCDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.TransformPCDResponse) */ {
 public:
  inline TransformPCDResponse() : TransformPCDResponse(nullptr) {}
  ~TransformPCDResponse() override;
  explicit PROTOBUF_CONSTEXPR TransformPCDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformPCDResponse(const TransformPCDResponse& from);
  TransformPCDResponse(TransformPCDResponse&& from) noexcept
    : TransformPCDResponse() {
    *this = ::std::move(from);
  }

  inline TransformPCDResponse& operator=(const TransformPCDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformPCDResponse& operator=(TransformPCDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformPCDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformPCDResponse* internal_default_instance() {
    return reinterpret_cast<const TransformPCDResponse*>(
               &_TransformPCDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TransformPCDResponse& a, TransformPCDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformPCDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformPCDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformPCDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformPCDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformPCDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransformPCDResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformPCDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.TransformPCDResponse";
  }
  protected:
  explicit TransformPCDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudPcdFieldNumber = 1,
  };
  // bytes point_cloud_pcd = 1 [json_name = "pointCloudPcd"];
  void clear_point_cloud_pcd();
  const std::string& point_cloud_pcd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_cloud_pcd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_cloud_pcd();
  PROTOBUF_NODISCARD std::string* release_point_cloud_pcd();
  void set_allocated_point_cloud_pcd(std::string* point_cloud_pcd);
  private:
  const std::string& _internal_point_cloud_pcd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_cloud_pcd(const std::string& value);
  std::string* _internal_mutable_point_cloud_pcd();
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.TransformPCDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_cloud_pcd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ResourceNamesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.ResourceNamesRequest) */ {
 public:
  inline ResourceNamesRequest() : ResourceNamesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ResourceNamesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceNamesRequest(const ResourceNamesRequest& from);
  ResourceNamesRequest(ResourceNamesRequest&& from) noexcept
    : ResourceNamesRequest() {
    *this = ::std::move(from);
  }

  inline ResourceNamesRequest& operator=(const ResourceNamesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceNamesRequest& operator=(ResourceNamesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceNamesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceNamesRequest* internal_default_instance() {
    return reinterpret_cast<const ResourceNamesRequest*>(
               &_ResourceNamesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ResourceNamesRequest& a, ResourceNamesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceNamesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceNamesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceNamesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceNamesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResourceNamesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResourceNamesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ResourceNamesRequest";
  }
  protected:
  explicit ResourceNamesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ResourceNamesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ResourceNamesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.ResourceNamesResponse) */ {
 public:
  inline ResourceNamesResponse() : ResourceNamesResponse(nullptr) {}
  ~ResourceNamesResponse() override;
  explicit PROTOBUF_CONSTEXPR ResourceNamesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceNamesResponse(const ResourceNamesResponse& from);
  ResourceNamesResponse(ResourceNamesResponse&& from) noexcept
    : ResourceNamesResponse() {
    *this = ::std::move(from);
  }

  inline ResourceNamesResponse& operator=(const ResourceNamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceNamesResponse& operator=(ResourceNamesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceNamesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceNamesResponse* internal_default_instance() {
    return reinterpret_cast<const ResourceNamesResponse*>(
               &_ResourceNamesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ResourceNamesResponse& a, ResourceNamesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceNamesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceNamesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceNamesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceNamesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceNamesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceNamesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceNamesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ResourceNamesResponse";
  }
  protected:
  explicit ResourceNamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 1,
  };
  // repeated .viam.common.v1.ResourceName resources = 1 [json_name = "resources"];
  int resources_size() const;
  private:
  int _internal_resources_size() const;
  public:
  void clear_resources();
  ::viam::common::v1::ResourceName* mutable_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
      mutable_resources();
  private:
  const ::viam::common::v1::ResourceName& _internal_resources(int index) const;
  ::viam::common::v1::ResourceName* _internal_add_resources();
  public:
  const ::viam::common::v1::ResourceName& resources(int index) const;
  ::viam::common::v1::ResourceName* add_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
      resources() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ResourceNamesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName > resources_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ResourceRPCSubtype final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.ResourceRPCSubtype) */ {
 public:
  inline ResourceRPCSubtype() : ResourceRPCSubtype(nullptr) {}
  ~ResourceRPCSubtype() override;
  explicit PROTOBUF_CONSTEXPR ResourceRPCSubtype(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceRPCSubtype(const ResourceRPCSubtype& from);
  ResourceRPCSubtype(ResourceRPCSubtype&& from) noexcept
    : ResourceRPCSubtype() {
    *this = ::std::move(from);
  }

  inline ResourceRPCSubtype& operator=(const ResourceRPCSubtype& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceRPCSubtype& operator=(ResourceRPCSubtype&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceRPCSubtype& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceRPCSubtype* internal_default_instance() {
    return reinterpret_cast<const ResourceRPCSubtype*>(
               &_ResourceRPCSubtype_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ResourceRPCSubtype& a, ResourceRPCSubtype& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceRPCSubtype* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceRPCSubtype* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceRPCSubtype* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceRPCSubtype>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceRPCSubtype& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceRPCSubtype& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceRPCSubtype* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ResourceRPCSubtype";
  }
  protected:
  explicit ResourceRPCSubtype(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoServiceFieldNumber = 2,
    kSubtypeFieldNumber = 1,
  };
  // string proto_service = 2 [json_name = "protoService"];
  void clear_proto_service();
  const std::string& proto_service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_service();
  PROTOBUF_NODISCARD std::string* release_proto_service();
  void set_allocated_proto_service(std::string* proto_service);
  private:
  const std::string& _internal_proto_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_service(const std::string& value);
  std::string* _internal_mutable_proto_service();
  public:

  // .viam.common.v1.ResourceName subtype = 1 [json_name = "subtype"];
  bool has_subtype() const;
  private:
  bool _internal_has_subtype() const;
  public:
  void clear_subtype();
  const ::viam::common::v1::ResourceName& subtype() const;
  PROTOBUF_NODISCARD ::viam::common::v1::ResourceName* release_subtype();
  ::viam::common::v1::ResourceName* mutable_subtype();
  void set_allocated_subtype(::viam::common::v1::ResourceName* subtype);
  private:
  const ::viam::common::v1::ResourceName& _internal_subtype() const;
  ::viam::common::v1::ResourceName* _internal_mutable_subtype();
  public:
  void unsafe_arena_set_allocated_subtype(
      ::viam::common::v1::ResourceName* subtype);
  ::viam::common::v1::ResourceName* unsafe_arena_release_subtype();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ResourceRPCSubtype)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_service_;
  ::viam::common::v1::ResourceName* subtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ResourceRPCSubtypesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.ResourceRPCSubtypesRequest) */ {
 public:
  inline ResourceRPCSubtypesRequest() : ResourceRPCSubtypesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ResourceRPCSubtypesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceRPCSubtypesRequest(const ResourceRPCSubtypesRequest& from);
  ResourceRPCSubtypesRequest(ResourceRPCSubtypesRequest&& from) noexcept
    : ResourceRPCSubtypesRequest() {
    *this = ::std::move(from);
  }

  inline ResourceRPCSubtypesRequest& operator=(const ResourceRPCSubtypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceRPCSubtypesRequest& operator=(ResourceRPCSubtypesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceRPCSubtypesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceRPCSubtypesRequest* internal_default_instance() {
    return reinterpret_cast<const ResourceRPCSubtypesRequest*>(
               &_ResourceRPCSubtypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ResourceRPCSubtypesRequest& a, ResourceRPCSubtypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceRPCSubtypesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceRPCSubtypesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceRPCSubtypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceRPCSubtypesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResourceRPCSubtypesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResourceRPCSubtypesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ResourceRPCSubtypesRequest";
  }
  protected:
  explicit ResourceRPCSubtypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ResourceRPCSubtypesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ResourceRPCSubtypesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.ResourceRPCSubtypesResponse) */ {
 public:
  inline ResourceRPCSubtypesResponse() : ResourceRPCSubtypesResponse(nullptr) {}
  ~ResourceRPCSubtypesResponse() override;
  explicit PROTOBUF_CONSTEXPR ResourceRPCSubtypesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceRPCSubtypesResponse(const ResourceRPCSubtypesResponse& from);
  ResourceRPCSubtypesResponse(ResourceRPCSubtypesResponse&& from) noexcept
    : ResourceRPCSubtypesResponse() {
    *this = ::std::move(from);
  }

  inline ResourceRPCSubtypesResponse& operator=(const ResourceRPCSubtypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceRPCSubtypesResponse& operator=(ResourceRPCSubtypesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceRPCSubtypesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceRPCSubtypesResponse* internal_default_instance() {
    return reinterpret_cast<const ResourceRPCSubtypesResponse*>(
               &_ResourceRPCSubtypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ResourceRPCSubtypesResponse& a, ResourceRPCSubtypesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceRPCSubtypesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceRPCSubtypesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceRPCSubtypesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceRPCSubtypesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceRPCSubtypesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceRPCSubtypesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceRPCSubtypesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ResourceRPCSubtypesResponse";
  }
  protected:
  explicit ResourceRPCSubtypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceRpcSubtypesFieldNumber = 1,
  };
  // repeated .viam.robot.v1.ResourceRPCSubtype resource_rpc_subtypes = 1 [json_name = "resourceRpcSubtypes"];
  int resource_rpc_subtypes_size() const;
  private:
  int _internal_resource_rpc_subtypes_size() const;
  public:
  void clear_resource_rpc_subtypes();
  ::viam::robot::v1::ResourceRPCSubtype* mutable_resource_rpc_subtypes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceRPCSubtype >*
      mutable_resource_rpc_subtypes();
  private:
  const ::viam::robot::v1::ResourceRPCSubtype& _internal_resource_rpc_subtypes(int index) const;
  ::viam::robot::v1::ResourceRPCSubtype* _internal_add_resource_rpc_subtypes();
  public:
  const ::viam::robot::v1::ResourceRPCSubtype& resource_rpc_subtypes(int index) const;
  ::viam::robot::v1::ResourceRPCSubtype* add_resource_rpc_subtypes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceRPCSubtype >&
      resource_rpc_subtypes() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ResourceRPCSubtypesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceRPCSubtype > resource_rpc_subtypes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  explicit PROTOBUF_CONSTEXPR Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Operation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMethodFieldNumber = 2,
    kSessionIdFieldNumber = 5,
    kArgumentsFieldNumber = 3,
    kStartedFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string method = 2 [json_name = "method"];
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // optional string session_id = 5 [json_name = "sessionId"];
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .google.protobuf.Struct arguments = 3 [json_name = "arguments"];
  bool has_arguments() const;
  private:
  bool _internal_has_arguments() const;
  public:
  void clear_arguments();
  const ::PROTOBUF_NAMESPACE_ID::Struct& arguments() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_arguments();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_arguments();
  void set_allocated_arguments(::PROTOBUF_NAMESPACE_ID::Struct* arguments);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_arguments() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_arguments();
  public:
  void unsafe_arena_set_allocated_arguments(
      ::PROTOBUF_NAMESPACE_ID::Struct* arguments);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_arguments();

  // .google.protobuf.Timestamp started = 4 [json_name = "started"];
  bool has_started() const;
  private:
  bool _internal_has_started() const;
  public:
  void clear_started();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& started() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_started();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_started();
  void set_allocated_started(::PROTOBUF_NAMESPACE_ID::Timestamp* started);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_started() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_started();
  public:
  void unsafe_arena_set_allocated_started(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* started);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_started();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::Struct* arguments_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* started_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetOperationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetOperationsRequest) */ {
 public:
  inline GetOperationsRequest() : GetOperationsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetOperationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOperationsRequest(const GetOperationsRequest& from);
  GetOperationsRequest(GetOperationsRequest&& from) noexcept
    : GetOperationsRequest() {
    *this = ::std::move(from);
  }

  inline GetOperationsRequest& operator=(const GetOperationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOperationsRequest& operator=(GetOperationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOperationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOperationsRequest* internal_default_instance() {
    return reinterpret_cast<const GetOperationsRequest*>(
               &_GetOperationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetOperationsRequest& a, GetOperationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOperationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOperationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOperationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOperationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetOperationsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetOperationsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetOperationsRequest";
  }
  protected:
  explicit GetOperationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetOperationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetOperationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetOperationsResponse) */ {
 public:
  inline GetOperationsResponse() : GetOperationsResponse(nullptr) {}
  ~GetOperationsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetOperationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOperationsResponse(const GetOperationsResponse& from);
  GetOperationsResponse(GetOperationsResponse&& from) noexcept
    : GetOperationsResponse() {
    *this = ::std::move(from);
  }

  inline GetOperationsResponse& operator=(const GetOperationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOperationsResponse& operator=(GetOperationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOperationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOperationsResponse* internal_default_instance() {
    return reinterpret_cast<const GetOperationsResponse*>(
               &_GetOperationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetOperationsResponse& a, GetOperationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOperationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOperationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOperationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOperationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOperationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOperationsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOperationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetOperationsResponse";
  }
  protected:
  explicit GetOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 1,
  };
  // repeated .viam.robot.v1.Operation operations = 1 [json_name = "operations"];
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::viam::robot::v1::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Operation >*
      mutable_operations();
  private:
  const ::viam::robot::v1::Operation& _internal_operations(int index) const;
  ::viam::robot::v1::Operation* _internal_add_operations();
  public:
  const ::viam::robot::v1::Operation& operations(int index) const;
  ::viam::robot::v1::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Operation >&
      operations() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetOperationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Operation > operations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class CancelOperationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.CancelOperationRequest) */ {
 public:
  inline CancelOperationRequest() : CancelOperationRequest(nullptr) {}
  ~CancelOperationRequest() override;
  explicit PROTOBUF_CONSTEXPR CancelOperationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelOperationRequest(const CancelOperationRequest& from);
  CancelOperationRequest(CancelOperationRequest&& from) noexcept
    : CancelOperationRequest() {
    *this = ::std::move(from);
  }

  inline CancelOperationRequest& operator=(const CancelOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOperationRequest& operator=(CancelOperationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelOperationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelOperationRequest* internal_default_instance() {
    return reinterpret_cast<const CancelOperationRequest*>(
               &_CancelOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CancelOperationRequest& a, CancelOperationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOperationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOperationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelOperationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelOperationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelOperationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelOperationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOperationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.CancelOperationRequest";
  }
  protected:
  explicit CancelOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.CancelOperationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class CancelOperationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.CancelOperationResponse) */ {
 public:
  inline CancelOperationResponse() : CancelOperationResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CancelOperationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelOperationResponse(const CancelOperationResponse& from);
  CancelOperationResponse(CancelOperationResponse&& from) noexcept
    : CancelOperationResponse() {
    *this = ::std::move(from);
  }

  inline CancelOperationResponse& operator=(const CancelOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOperationResponse& operator=(CancelOperationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelOperationResponse* internal_default_instance() {
    return reinterpret_cast<const CancelOperationResponse*>(
               &_CancelOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CancelOperationResponse& a, CancelOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOperationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelOperationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CancelOperationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CancelOperationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.CancelOperationResponse";
  }
  protected:
  explicit CancelOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.CancelOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class BlockForOperationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.BlockForOperationRequest) */ {
 public:
  inline BlockForOperationRequest() : BlockForOperationRequest(nullptr) {}
  ~BlockForOperationRequest() override;
  explicit PROTOBUF_CONSTEXPR BlockForOperationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockForOperationRequest(const BlockForOperationRequest& from);
  BlockForOperationRequest(BlockForOperationRequest&& from) noexcept
    : BlockForOperationRequest() {
    *this = ::std::move(from);
  }

  inline BlockForOperationRequest& operator=(const BlockForOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockForOperationRequest& operator=(BlockForOperationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockForOperationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockForOperationRequest* internal_default_instance() {
    return reinterpret_cast<const BlockForOperationRequest*>(
               &_BlockForOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BlockForOperationRequest& a, BlockForOperationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockForOperationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockForOperationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockForOperationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockForOperationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockForOperationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockForOperationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockForOperationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.BlockForOperationRequest";
  }
  protected:
  explicit BlockForOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.BlockForOperationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class BlockForOperationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.BlockForOperationResponse) */ {
 public:
  inline BlockForOperationResponse() : BlockForOperationResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BlockForOperationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockForOperationResponse(const BlockForOperationResponse& from);
  BlockForOperationResponse(BlockForOperationResponse&& from) noexcept
    : BlockForOperationResponse() {
    *this = ::std::move(from);
  }

  inline BlockForOperationResponse& operator=(const BlockForOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockForOperationResponse& operator=(BlockForOperationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockForOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockForOperationResponse* internal_default_instance() {
    return reinterpret_cast<const BlockForOperationResponse*>(
               &_BlockForOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(BlockForOperationResponse& a, BlockForOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockForOperationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockForOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockForOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockForOperationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BlockForOperationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BlockForOperationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.BlockForOperationResponse";
  }
  protected:
  explicit BlockForOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.BlockForOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class PeerConnectionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.PeerConnectionInfo) */ {
 public:
  inline PeerConnectionInfo() : PeerConnectionInfo(nullptr) {}
  ~PeerConnectionInfo() override;
  explicit PROTOBUF_CONSTEXPR PeerConnectionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeerConnectionInfo(const PeerConnectionInfo& from);
  PeerConnectionInfo(PeerConnectionInfo&& from) noexcept
    : PeerConnectionInfo() {
    *this = ::std::move(from);
  }

  inline PeerConnectionInfo& operator=(const PeerConnectionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerConnectionInfo& operator=(PeerConnectionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PeerConnectionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerConnectionInfo* internal_default_instance() {
    return reinterpret_cast<const PeerConnectionInfo*>(
               &_PeerConnectionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PeerConnectionInfo& a, PeerConnectionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerConnectionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerConnectionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerConnectionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerConnectionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PeerConnectionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PeerConnectionInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerConnectionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.PeerConnectionInfo";
  }
  protected:
  explicit PeerConnectionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteAddressFieldNumber = 2,
    kLocalAddressFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional string remote_address = 2 [json_name = "remoteAddress"];
  bool has_remote_address() const;
  private:
  bool _internal_has_remote_address() const;
  public:
  void clear_remote_address();
  const std::string& remote_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remote_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remote_address();
  PROTOBUF_NODISCARD std::string* release_remote_address();
  void set_allocated_remote_address(std::string* remote_address);
  private:
  const std::string& _internal_remote_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remote_address(const std::string& value);
  std::string* _internal_mutable_remote_address();
  public:

  // optional string local_address = 3 [json_name = "localAddress"];
  bool has_local_address() const;
  private:
  bool _internal_has_local_address() const;
  public:
  void clear_local_address();
  const std::string& local_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_address();
  PROTOBUF_NODISCARD std::string* release_local_address();
  void set_allocated_local_address(std::string* local_address);
  private:
  const std::string& _internal_local_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_address(const std::string& value);
  std::string* _internal_mutable_local_address();
  public:

  // .viam.robot.v1.PeerConnectionType type = 1 [json_name = "type"];
  void clear_type();
  ::viam::robot::v1::PeerConnectionType type() const;
  void set_type(::viam::robot::v1::PeerConnectionType value);
  private:
  ::viam::robot::v1::PeerConnectionType _internal_type() const;
  void _internal_set_type(::viam::robot::v1::PeerConnectionType value);
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.PeerConnectionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_address_;
  int type_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class Session final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  ~Session() override;
  explicit PROTOBUF_CONSTEXPR Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Session& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Session& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPeerConnectionInfoFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .viam.robot.v1.PeerConnectionInfo peer_connection_info = 2 [json_name = "peerConnectionInfo"];
  bool has_peer_connection_info() const;
  private:
  bool _internal_has_peer_connection_info() const;
  public:
  void clear_peer_connection_info();
  const ::viam::robot::v1::PeerConnectionInfo& peer_connection_info() const;
  PROTOBUF_NODISCARD ::viam::robot::v1::PeerConnectionInfo* release_peer_connection_info();
  ::viam::robot::v1::PeerConnectionInfo* mutable_peer_connection_info();
  void set_allocated_peer_connection_info(::viam::robot::v1::PeerConnectionInfo* peer_connection_info);
  private:
  const ::viam::robot::v1::PeerConnectionInfo& _internal_peer_connection_info() const;
  ::viam::robot::v1::PeerConnectionInfo* _internal_mutable_peer_connection_info();
  public:
  void unsafe_arena_set_allocated_peer_connection_info(
      ::viam::robot::v1::PeerConnectionInfo* peer_connection_info);
  ::viam::robot::v1::PeerConnectionInfo* unsafe_arena_release_peer_connection_info();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::viam::robot::v1::PeerConnectionInfo* peer_connection_info_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetSessionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetSessionsRequest) */ {
 public:
  inline GetSessionsRequest() : GetSessionsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetSessionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSessionsRequest(const GetSessionsRequest& from);
  GetSessionsRequest(GetSessionsRequest&& from) noexcept
    : GetSessionsRequest() {
    *this = ::std::move(from);
  }

  inline GetSessionsRequest& operator=(const GetSessionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSessionsRequest& operator=(GetSessionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSessionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSessionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetSessionsRequest*>(
               &_GetSessionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetSessionsRequest& a, GetSessionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSessionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSessionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSessionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSessionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetSessionsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetSessionsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetSessionsRequest";
  }
  protected:
  explicit GetSessionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetSessionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetSessionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetSessionsResponse) */ {
 public:
  inline GetSessionsResponse() : GetSessionsResponse(nullptr) {}
  ~GetSessionsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSessionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSessionsResponse(const GetSessionsResponse& from);
  GetSessionsResponse(GetSessionsResponse&& from) noexcept
    : GetSessionsResponse() {
    *this = ::std::move(from);
  }

  inline GetSessionsResponse& operator=(const GetSessionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSessionsResponse& operator=(GetSessionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSessionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSessionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetSessionsResponse*>(
               &_GetSessionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetSessionsResponse& a, GetSessionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSessionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSessionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSessionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSessionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSessionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetSessionsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSessionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetSessionsResponse";
  }
  protected:
  explicit GetSessionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionsFieldNumber = 1,
  };
  // repeated .viam.robot.v1.Session sessions = 1 [json_name = "sessions"];
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::viam::robot::v1::Session* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Session >*
      mutable_sessions();
  private:
  const ::viam::robot::v1::Session& _internal_sessions(int index) const;
  ::viam::robot::v1::Session* _internal_add_sessions();
  public:
  const ::viam::robot::v1::Session& sessions(int index) const;
  ::viam::robot::v1::Session* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Session >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetSessionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Session > sessions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.DiscoveryQuery) */ {
 public:
  inline DiscoveryQuery() : DiscoveryQuery(nullptr) {}
  ~DiscoveryQuery() override;
  explicit PROTOBUF_CONSTEXPR DiscoveryQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoveryQuery(const DiscoveryQuery& from);
  DiscoveryQuery(DiscoveryQuery&& from) noexcept
    : DiscoveryQuery() {
    *this = ::std::move(from);
  }

  inline DiscoveryQuery& operator=(const DiscoveryQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryQuery& operator=(DiscoveryQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoveryQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoveryQuery* internal_default_instance() {
    return reinterpret_cast<const DiscoveryQuery*>(
               &_DiscoveryQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DiscoveryQuery& a, DiscoveryQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoveryQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoveryQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoveryQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscoveryQuery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveryQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.DiscoveryQuery";
  }
  protected:
  explicit DiscoveryQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubtypeFieldNumber = 1,
    kModelFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string subtype = 1 [json_name = "subtype"];
  void clear_subtype();
  const std::string& subtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtype();
  PROTOBUF_NODISCARD std::string* release_subtype();
  void set_allocated_subtype(std::string* subtype);
  private:
  const std::string& _internal_subtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtype(const std::string& value);
  std::string* _internal_mutable_subtype();
  public:

  // string model = 2 [json_name = "model"];
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.DiscoveryQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class Discovery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.Discovery) */ {
 public:
  inline Discovery() : Discovery(nullptr) {}
  ~Discovery() override;
  explicit PROTOBUF_CONSTEXPR Discovery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Discovery(const Discovery& from);
  Discovery(Discovery&& from) noexcept
    : Discovery() {
    *this = ::std::move(from);
  }

  inline Discovery& operator=(const Discovery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Discovery& operator=(Discovery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Discovery& default_instance() {
    return *internal_default_instance();
  }
  static inline const Discovery* internal_default_instance() {
    return reinterpret_cast<const Discovery*>(
               &_Discovery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Discovery& a, Discovery& b) {
    a.Swap(&b);
  }
  inline void Swap(Discovery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Discovery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Discovery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Discovery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Discovery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Discovery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discovery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.Discovery";
  }
  protected:
  explicit Discovery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kResultsFieldNumber = 2,
  };
  // .viam.robot.v1.DiscoveryQuery query = 1 [json_name = "query"];
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::viam::robot::v1::DiscoveryQuery& query() const;
  PROTOBUF_NODISCARD ::viam::robot::v1::DiscoveryQuery* release_query();
  ::viam::robot::v1::DiscoveryQuery* mutable_query();
  void set_allocated_query(::viam::robot::v1::DiscoveryQuery* query);
  private:
  const ::viam::robot::v1::DiscoveryQuery& _internal_query() const;
  ::viam::robot::v1::DiscoveryQuery* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::viam::robot::v1::DiscoveryQuery* query);
  ::viam::robot::v1::DiscoveryQuery* unsafe_arena_release_query();

  // .google.protobuf.Struct results = 2 [json_name = "results"];
  bool has_results() const;
  private:
  bool _internal_has_results() const;
  public:
  void clear_results();
  const ::PROTOBUF_NAMESPACE_ID::Struct& results() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_results();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_results();
  void set_allocated_results(::PROTOBUF_NAMESPACE_ID::Struct* results);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_results() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_results();
  public:
  void unsafe_arena_set_allocated_results(
      ::PROTOBUF_NAMESPACE_ID::Struct* results);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_results();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.Discovery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::robot::v1::DiscoveryQuery* query_;
  ::PROTOBUF_NAMESPACE_ID::Struct* results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ModuleModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.ModuleModel) */ {
 public:
  inline ModuleModel() : ModuleModel(nullptr) {}
  ~ModuleModel() override;
  explicit PROTOBUF_CONSTEXPR ModuleModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModuleModel(const ModuleModel& from);
  ModuleModel(ModuleModel&& from) noexcept
    : ModuleModel() {
    *this = ::std::move(from);
  }

  inline ModuleModel& operator=(const ModuleModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleModel& operator=(ModuleModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModuleModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModuleModel* internal_default_instance() {
    return reinterpret_cast<const ModuleModel*>(
               &_ModuleModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ModuleModel& a, ModuleModel& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModuleModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModuleModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModuleModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModuleModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModuleModel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ModuleModel";
  }
  protected:
  explicit ModuleModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 1,
    kModelFieldNumber = 2,
    kApiFieldNumber = 3,
    kFromLocalModuleFieldNumber = 4,
  };
  // string module_name = 1 [json_name = "moduleName"];
  void clear_module_name();
  const std::string& module_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* module_name);
  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(const std::string& value);
  std::string* _internal_mutable_module_name();
  public:

  // string model = 2 [json_name = "model"];
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string api = 3 [json_name = "api"];
  void clear_api();
  const std::string& api() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api();
  PROTOBUF_NODISCARD std::string* release_api();
  void set_allocated_api(std::string* api);
  private:
  const std::string& _internal_api() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api(const std::string& value);
  std::string* _internal_mutable_api();
  public:

  // bool from_local_module = 4 [json_name = "fromLocalModule"];
  void clear_from_local_module();
  bool from_local_module() const;
  void set_from_local_module(bool value);
  private:
  bool _internal_from_local_module() const;
  void _internal_set_from_local_module(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ModuleModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_;
  bool from_local_module_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetModelsFromModulesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetModelsFromModulesRequest) */ {
 public:
  inline GetModelsFromModulesRequest() : GetModelsFromModulesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetModelsFromModulesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelsFromModulesRequest(const GetModelsFromModulesRequest& from);
  GetModelsFromModulesRequest(GetModelsFromModulesRequest&& from) noexcept
    : GetModelsFromModulesRequest() {
    *this = ::std::move(from);
  }

  inline GetModelsFromModulesRequest& operator=(const GetModelsFromModulesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelsFromModulesRequest& operator=(GetModelsFromModulesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelsFromModulesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelsFromModulesRequest* internal_default_instance() {
    return reinterpret_cast<const GetModelsFromModulesRequest*>(
               &_GetModelsFromModulesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetModelsFromModulesRequest& a, GetModelsFromModulesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelsFromModulesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelsFromModulesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelsFromModulesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelsFromModulesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetModelsFromModulesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetModelsFromModulesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetModelsFromModulesRequest";
  }
  protected:
  explicit GetModelsFromModulesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetModelsFromModulesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetModelsFromModulesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetModelsFromModulesResponse) */ {
 public:
  inline GetModelsFromModulesResponse() : GetModelsFromModulesResponse(nullptr) {}
  ~GetModelsFromModulesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetModelsFromModulesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetModelsFromModulesResponse(const GetModelsFromModulesResponse& from);
  GetModelsFromModulesResponse(GetModelsFromModulesResponse&& from) noexcept
    : GetModelsFromModulesResponse() {
    *this = ::std::move(from);
  }

  inline GetModelsFromModulesResponse& operator=(const GetModelsFromModulesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModelsFromModulesResponse& operator=(GetModelsFromModulesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetModelsFromModulesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetModelsFromModulesResponse* internal_default_instance() {
    return reinterpret_cast<const GetModelsFromModulesResponse*>(
               &_GetModelsFromModulesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetModelsFromModulesResponse& a, GetModelsFromModulesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModelsFromModulesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetModelsFromModulesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetModelsFromModulesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetModelsFromModulesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetModelsFromModulesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetModelsFromModulesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModelsFromModulesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetModelsFromModulesResponse";
  }
  protected:
  explicit GetModelsFromModulesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelsFieldNumber = 1,
  };
  // repeated .viam.robot.v1.ModuleModel models = 1 [json_name = "models"];
  int models_size() const;
  private:
  int _internal_models_size() const;
  public:
  void clear_models();
  ::viam::robot::v1::ModuleModel* mutable_models(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ModuleModel >*
      mutable_models();
  private:
  const ::viam::robot::v1::ModuleModel& _internal_models(int index) const;
  ::viam::robot::v1::ModuleModel* _internal_add_models();
  public:
  const ::viam::robot::v1::ModuleModel& models(int index) const;
  ::viam::robot::v1::ModuleModel* add_models();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ModuleModel >&
      models() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetModelsFromModulesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ModuleModel > models_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class DiscoverComponentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.DiscoverComponentsRequest) */ {
 public:
  inline DiscoverComponentsRequest() : DiscoverComponentsRequest(nullptr) {}
  ~DiscoverComponentsRequest() override;
  explicit PROTOBUF_CONSTEXPR DiscoverComponentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoverComponentsRequest(const DiscoverComponentsRequest& from);
  DiscoverComponentsRequest(DiscoverComponentsRequest&& from) noexcept
    : DiscoverComponentsRequest() {
    *this = ::std::move(from);
  }

  inline DiscoverComponentsRequest& operator=(const DiscoverComponentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverComponentsRequest& operator=(DiscoverComponentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoverComponentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoverComponentsRequest* internal_default_instance() {
    return reinterpret_cast<const DiscoverComponentsRequest*>(
               &_DiscoverComponentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DiscoverComponentsRequest& a, DiscoverComponentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoverComponentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverComponentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoverComponentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoverComponentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoverComponentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscoverComponentsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoverComponentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.DiscoverComponentsRequest";
  }
  protected:
  explicit DiscoverComponentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueriesFieldNumber = 1,
  };
  // repeated .viam.robot.v1.DiscoveryQuery queries = 1 [json_name = "queries"];
  int queries_size() const;
  private:
  int _internal_queries_size() const;
  public:
  void clear_queries();
  ::viam::robot::v1::DiscoveryQuery* mutable_queries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::DiscoveryQuery >*
      mutable_queries();
  private:
  const ::viam::robot::v1::DiscoveryQuery& _internal_queries(int index) const;
  ::viam::robot::v1::DiscoveryQuery* _internal_add_queries();
  public:
  const ::viam::robot::v1::DiscoveryQuery& queries(int index) const;
  ::viam::robot::v1::DiscoveryQuery* add_queries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::DiscoveryQuery >&
      queries() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.DiscoverComponentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::DiscoveryQuery > queries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class DiscoverComponentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.DiscoverComponentsResponse) */ {
 public:
  inline DiscoverComponentsResponse() : DiscoverComponentsResponse(nullptr) {}
  ~DiscoverComponentsResponse() override;
  explicit PROTOBUF_CONSTEXPR DiscoverComponentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoverComponentsResponse(const DiscoverComponentsResponse& from);
  DiscoverComponentsResponse(DiscoverComponentsResponse&& from) noexcept
    : DiscoverComponentsResponse() {
    *this = ::std::move(from);
  }

  inline DiscoverComponentsResponse& operator=(const DiscoverComponentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverComponentsResponse& operator=(DiscoverComponentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoverComponentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoverComponentsResponse* internal_default_instance() {
    return reinterpret_cast<const DiscoverComponentsResponse*>(
               &_DiscoverComponentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(DiscoverComponentsResponse& a, DiscoverComponentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoverComponentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverComponentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoverComponentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoverComponentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoverComponentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscoverComponentsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoverComponentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.DiscoverComponentsResponse";
  }
  protected:
  explicit DiscoverComponentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscoveryFieldNumber = 1,
  };
  // repeated .viam.robot.v1.Discovery discovery = 1 [json_name = "discovery"];
  int discovery_size() const;
  private:
  int _internal_discovery_size() const;
  public:
  void clear_discovery();
  ::viam::robot::v1::Discovery* mutable_discovery(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Discovery >*
      mutable_discovery();
  private:
  const ::viam::robot::v1::Discovery& _internal_discovery(int index) const;
  ::viam::robot::v1::Discovery* _internal_add_discovery();
  public:
  const ::viam::robot::v1::Discovery& discovery(int index) const;
  ::viam::robot::v1::Discovery* add_discovery();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Discovery >&
      discovery() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.DiscoverComponentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Discovery > discovery_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStatusFieldNumber = 2,
    kLastReconfiguredFieldNumber = 3,
  };
  // .viam.common.v1.ResourceName name = 1 [json_name = "name"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::viam::common::v1::ResourceName& name() const;
  PROTOBUF_NODISCARD ::viam::common::v1::ResourceName* release_name();
  ::viam::common::v1::ResourceName* mutable_name();
  void set_allocated_name(::viam::common::v1::ResourceName* name);
  private:
  const ::viam::common::v1::ResourceName& _internal_name() const;
  ::viam::common::v1::ResourceName* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::viam::common::v1::ResourceName* name);
  ::viam::common::v1::ResourceName* unsafe_arena_release_name();

  // .google.protobuf.Struct status = 2 [json_name = "status"];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::PROTOBUF_NAMESPACE_ID::Struct& status() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_status();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_status();
  void set_allocated_status(::PROTOBUF_NAMESPACE_ID::Struct* status);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_status() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::PROTOBUF_NAMESPACE_ID::Struct* status);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_status();

  // .google.protobuf.Timestamp last_reconfigured = 3 [json_name = "lastReconfigured"];
  bool has_last_reconfigured() const;
  private:
  bool _internal_has_last_reconfigured() const;
  public:
  void clear_last_reconfigured();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_reconfigured() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_reconfigured();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_reconfigured();
  void set_allocated_last_reconfigured(::PROTOBUF_NAMESPACE_ID::Timestamp* last_reconfigured);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_reconfigured() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_reconfigured();
  public:
  void unsafe_arena_set_allocated_last_reconfigured(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_reconfigured);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_reconfigured();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::ResourceName* name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* status_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* last_reconfigured_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetStatusRequest) */ {
 public:
  inline GetStatusRequest() : GetStatusRequest(nullptr) {}
  ~GetStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR GetStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatusRequest(const GetStatusRequest& from);
  GetStatusRequest(GetStatusRequest&& from) noexcept
    : GetStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetStatusRequest& operator=(const GetStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusRequest& operator=(GetStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatusRequest*>(
               &_GetStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetStatusRequest& a, GetStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetStatusRequest";
  }
  protected:
  explicit GetStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceNamesFieldNumber = 1,
  };
  // repeated .viam.common.v1.ResourceName resource_names = 1 [json_name = "resourceNames"];
  int resource_names_size() const;
  private:
  int _internal_resource_names_size() const;
  public:
  void clear_resource_names();
  ::viam::common::v1::ResourceName* mutable_resource_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
      mutable_resource_names();
  private:
  const ::viam::common::v1::ResourceName& _internal_resource_names(int index) const;
  ::viam::common::v1::ResourceName* _internal_add_resource_names();
  public:
  const ::viam::common::v1::ResourceName& resource_names(int index) const;
  ::viam::common::v1::ResourceName* add_resource_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
      resource_names() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName > resource_names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetStatusResponse) */ {
 public:
  inline GetStatusResponse() : GetStatusResponse(nullptr) {}
  ~GetStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR GetStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatusResponse(const GetStatusResponse& from);
  GetStatusResponse(GetStatusResponse&& from) noexcept
    : GetStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetStatusResponse& operator=(const GetStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusResponse& operator=(GetStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetStatusResponse*>(
               &_GetStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetStatusResponse& a, GetStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetStatusResponse";
  }
  protected:
  explicit GetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // repeated .viam.robot.v1.Status status = 1 [json_name = "status"];
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  ::viam::robot::v1::Status* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >*
      mutable_status();
  private:
  const ::viam::robot::v1::Status& _internal_status(int index) const;
  ::viam::robot::v1::Status* _internal_add_status();
  public:
  const ::viam::robot::v1::Status& status(int index) const;
  ::viam::robot::v1::Status* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >&
      status() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status > status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class StreamStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.StreamStatusRequest) */ {
 public:
  inline StreamStatusRequest() : StreamStatusRequest(nullptr) {}
  ~StreamStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamStatusRequest(const StreamStatusRequest& from);
  StreamStatusRequest(StreamStatusRequest&& from) noexcept
    : StreamStatusRequest() {
    *this = ::std::move(from);
  }

  inline StreamStatusRequest& operator=(const StreamStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStatusRequest& operator=(StreamStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamStatusRequest* internal_default_instance() {
    return reinterpret_cast<const StreamStatusRequest*>(
               &_StreamStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(StreamStatusRequest& a, StreamStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.StreamStatusRequest";
  }
  protected:
  explicit StreamStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceNamesFieldNumber = 1,
    kEveryFieldNumber = 2,
  };
  // repeated .viam.common.v1.ResourceName resource_names = 1 [json_name = "resourceNames"];
  int resource_names_size() const;
  private:
  int _internal_resource_names_size() const;
  public:
  void clear_resource_names();
  ::viam::common::v1::ResourceName* mutable_resource_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
      mutable_resource_names();
  private:
  const ::viam::common::v1::ResourceName& _internal_resource_names(int index) const;
  ::viam::common::v1::ResourceName* _internal_add_resource_names();
  public:
  const ::viam::common::v1::ResourceName& resource_names(int index) const;
  ::viam::common::v1::ResourceName* add_resource_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
      resource_names() const;

  // .google.protobuf.Duration every = 2 [json_name = "every"];
  bool has_every() const;
  private:
  bool _internal_has_every() const;
  public:
  void clear_every();
  const ::PROTOBUF_NAMESPACE_ID::Duration& every() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_every();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_every();
  void set_allocated_every(::PROTOBUF_NAMESPACE_ID::Duration* every);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_every() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_every();
  public:
  void unsafe_arena_set_allocated_every(
      ::PROTOBUF_NAMESPACE_ID::Duration* every);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_every();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.StreamStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName > resource_names_;
  ::PROTOBUF_NAMESPACE_ID::Duration* every_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class StreamStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.StreamStatusResponse) */ {
 public:
  inline StreamStatusResponse() : StreamStatusResponse(nullptr) {}
  ~StreamStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamStatusResponse(const StreamStatusResponse& from);
  StreamStatusResponse(StreamStatusResponse&& from) noexcept
    : StreamStatusResponse() {
    *this = ::std::move(from);
  }

  inline StreamStatusResponse& operator=(const StreamStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStatusResponse& operator=(StreamStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamStatusResponse* internal_default_instance() {
    return reinterpret_cast<const StreamStatusResponse*>(
               &_StreamStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(StreamStatusResponse& a, StreamStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.StreamStatusResponse";
  }
  protected:
  explicit StreamStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // repeated .viam.robot.v1.Status status = 1 [json_name = "status"];
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  ::viam::robot::v1::Status* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >*
      mutable_status();
  private:
  const ::viam::robot::v1::Status& _internal_status(int index) const;
  ::viam::robot::v1::Status* _internal_add_status();
  public:
  const ::viam::robot::v1::Status& status(int index) const;
  ::viam::robot::v1::Status* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >&
      status() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.StreamStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status > status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class StopExtraParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.StopExtraParameters) */ {
 public:
  inline StopExtraParameters() : StopExtraParameters(nullptr) {}
  ~StopExtraParameters() override;
  explicit PROTOBUF_CONSTEXPR StopExtraParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopExtraParameters(const StopExtraParameters& from);
  StopExtraParameters(StopExtraParameters&& from) noexcept
    : StopExtraParameters() {
    *this = ::std::move(from);
  }

  inline StopExtraParameters& operator=(const StopExtraParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopExtraParameters& operator=(StopExtraParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopExtraParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopExtraParameters* internal_default_instance() {
    return reinterpret_cast<const StopExtraParameters*>(
               &_StopExtraParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(StopExtraParameters& a, StopExtraParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(StopExtraParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopExtraParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopExtraParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopExtraParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopExtraParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopExtraParameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopExtraParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.StopExtraParameters";
  }
  protected:
  explicit StopExtraParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // .viam.common.v1.ResourceName name = 1 [json_name = "name"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::viam::common::v1::ResourceName& name() const;
  PROTOBUF_NODISCARD ::viam::common::v1::ResourceName* release_name();
  ::viam::common::v1::ResourceName* mutable_name();
  void set_allocated_name(::viam::common::v1::ResourceName* name);
  private:
  const ::viam::common::v1::ResourceName& _internal_name() const;
  ::viam::common::v1::ResourceName* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::viam::common::v1::ResourceName* name);
  ::viam::common::v1::ResourceName* unsafe_arena_release_name();

  // .google.protobuf.Struct params = 2 [json_name = "params"];
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::PROTOBUF_NAMESPACE_ID::Struct& params() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_params();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_params();
  void set_allocated_params(::PROTOBUF_NAMESPACE_ID::Struct* params);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::PROTOBUF_NAMESPACE_ID::Struct* params);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.StopExtraParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::ResourceName* name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class StopAllRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.StopAllRequest) */ {
 public:
  inline StopAllRequest() : StopAllRequest(nullptr) {}
  ~StopAllRequest() override;
  explicit PROTOBUF_CONSTEXPR StopAllRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopAllRequest(const StopAllRequest& from);
  StopAllRequest(StopAllRequest&& from) noexcept
    : StopAllRequest() {
    *this = ::std::move(from);
  }

  inline StopAllRequest& operator=(const StopAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopAllRequest& operator=(StopAllRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopAllRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopAllRequest* internal_default_instance() {
    return reinterpret_cast<const StopAllRequest*>(
               &_StopAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(StopAllRequest& a, StopAllRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopAllRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopAllRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopAllRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopAllRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopAllRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopAllRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopAllRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.StopAllRequest";
  }
  protected:
  explicit StopAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldNumber = 99,
  };
  // repeated .viam.robot.v1.StopExtraParameters extra = 99 [json_name = "extra"];
  int extra_size() const;
  private:
  int _internal_extra_size() const;
  public:
  void clear_extra();
  ::viam::robot::v1::StopExtraParameters* mutable_extra(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::StopExtraParameters >*
      mutable_extra();
  private:
  const ::viam::robot::v1::StopExtraParameters& _internal_extra(int index) const;
  ::viam::robot::v1::StopExtraParameters* _internal_add_extra();
  public:
  const ::viam::robot::v1::StopExtraParameters& extra(int index) const;
  ::viam::robot::v1::StopExtraParameters* add_extra();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::StopExtraParameters >&
      extra() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.StopAllRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::StopExtraParameters > extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class StopAllResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.StopAllResponse) */ {
 public:
  inline StopAllResponse() : StopAllResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StopAllResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopAllResponse(const StopAllResponse& from);
  StopAllResponse(StopAllResponse&& from) noexcept
    : StopAllResponse() {
    *this = ::std::move(from);
  }

  inline StopAllResponse& operator=(const StopAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopAllResponse& operator=(StopAllResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopAllResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopAllResponse* internal_default_instance() {
    return reinterpret_cast<const StopAllResponse*>(
               &_StopAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(StopAllResponse& a, StopAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopAllResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopAllResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopAllResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopAllResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopAllResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.StopAllResponse";
  }
  protected:
  explicit StopAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.StopAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class StartSessionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.StartSessionRequest) */ {
 public:
  inline StartSessionRequest() : StartSessionRequest(nullptr) {}
  ~StartSessionRequest() override;
  explicit PROTOBUF_CONSTEXPR StartSessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartSessionRequest(const StartSessionRequest& from);
  StartSessionRequest(StartSessionRequest&& from) noexcept
    : StartSessionRequest() {
    *this = ::std::move(from);
  }

  inline StartSessionRequest& operator=(const StartSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartSessionRequest& operator=(StartSessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartSessionRequest* internal_default_instance() {
    return reinterpret_cast<const StartSessionRequest*>(
               &_StartSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(StartSessionRequest& a, StartSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartSessionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartSessionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartSessionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartSessionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartSessionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.StartSessionRequest";
  }
  protected:
  explicit StartSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResumeFieldNumber = 1,
  };
  // string resume = 1 [json_name = "resume"];
  void clear_resume();
  const std::string& resume() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resume(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resume();
  PROTOBUF_NODISCARD std::string* release_resume();
  void set_allocated_resume(std::string* resume);
  private:
  const std::string& _internal_resume() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resume(const std::string& value);
  std::string* _internal_mutable_resume();
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.StartSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class StartSessionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.StartSessionResponse) */ {
 public:
  inline StartSessionResponse() : StartSessionResponse(nullptr) {}
  ~StartSessionResponse() override;
  explicit PROTOBUF_CONSTEXPR StartSessionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartSessionResponse(const StartSessionResponse& from);
  StartSessionResponse(StartSessionResponse&& from) noexcept
    : StartSessionResponse() {
    *this = ::std::move(from);
  }

  inline StartSessionResponse& operator=(const StartSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartSessionResponse& operator=(StartSessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StartSessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartSessionResponse* internal_default_instance() {
    return reinterpret_cast<const StartSessionResponse*>(
               &_StartSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(StartSessionResponse& a, StartSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartSessionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartSessionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StartSessionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StartSessionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartSessionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.StartSessionResponse";
  }
  protected:
  explicit StartSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kHeartbeatWindowFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Duration heartbeat_window = 2 [json_name = "heartbeatWindow"];
  bool has_heartbeat_window() const;
  private:
  bool _internal_has_heartbeat_window() const;
  public:
  void clear_heartbeat_window();
  const ::PROTOBUF_NAMESPACE_ID::Duration& heartbeat_window() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_heartbeat_window();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_heartbeat_window();
  void set_allocated_heartbeat_window(::PROTOBUF_NAMESPACE_ID::Duration* heartbeat_window);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_heartbeat_window() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_heartbeat_window();
  public:
  void unsafe_arena_set_allocated_heartbeat_window(
      ::PROTOBUF_NAMESPACE_ID::Duration* heartbeat_window);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_heartbeat_window();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.StartSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::Duration* heartbeat_window_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class SendSessionHeartbeatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.SendSessionHeartbeatRequest) */ {
 public:
  inline SendSessionHeartbeatRequest() : SendSessionHeartbeatRequest(nullptr) {}
  ~SendSessionHeartbeatRequest() override;
  explicit PROTOBUF_CONSTEXPR SendSessionHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendSessionHeartbeatRequest(const SendSessionHeartbeatRequest& from);
  SendSessionHeartbeatRequest(SendSessionHeartbeatRequest&& from) noexcept
    : SendSessionHeartbeatRequest() {
    *this = ::std::move(from);
  }

  inline SendSessionHeartbeatRequest& operator=(const SendSessionHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendSessionHeartbeatRequest& operator=(SendSessionHeartbeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendSessionHeartbeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendSessionHeartbeatRequest* internal_default_instance() {
    return reinterpret_cast<const SendSessionHeartbeatRequest*>(
               &_SendSessionHeartbeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(SendSessionHeartbeatRequest& a, SendSessionHeartbeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendSessionHeartbeatRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendSessionHeartbeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendSessionHeartbeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendSessionHeartbeatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendSessionHeartbeatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendSessionHeartbeatRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendSessionHeartbeatRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.SendSessionHeartbeatRequest";
  }
  protected:
  explicit SendSessionHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.SendSessionHeartbeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class SendSessionHeartbeatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.SendSessionHeartbeatResponse) */ {
 public:
  inline SendSessionHeartbeatResponse() : SendSessionHeartbeatResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SendSessionHeartbeatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendSessionHeartbeatResponse(const SendSessionHeartbeatResponse& from);
  SendSessionHeartbeatResponse(SendSessionHeartbeatResponse&& from) noexcept
    : SendSessionHeartbeatResponse() {
    *this = ::std::move(from);
  }

  inline SendSessionHeartbeatResponse& operator=(const SendSessionHeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendSessionHeartbeatResponse& operator=(SendSessionHeartbeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendSessionHeartbeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendSessionHeartbeatResponse* internal_default_instance() {
    return reinterpret_cast<const SendSessionHeartbeatResponse*>(
               &_SendSessionHeartbeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(SendSessionHeartbeatResponse& a, SendSessionHeartbeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendSessionHeartbeatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendSessionHeartbeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendSessionHeartbeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendSessionHeartbeatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SendSessionHeartbeatResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SendSessionHeartbeatResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.SendSessionHeartbeatResponse";
  }
  protected:
  explicit SendSessionHeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.SendSessionHeartbeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class LogRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.LogRequest) */ {
 public:
  inline LogRequest() : LogRequest(nullptr) {}
  ~LogRequest() override;
  explicit PROTOBUF_CONSTEXPR LogRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogRequest(const LogRequest& from);
  LogRequest(LogRequest&& from) noexcept
    : LogRequest() {
    *this = ::std::move(from);
  }

  inline LogRequest& operator=(const LogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogRequest& operator=(LogRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogRequest* internal_default_instance() {
    return reinterpret_cast<const LogRequest*>(
               &_LogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(LogRequest& a, LogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.LogRequest";
  }
  protected:
  explicit LogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogsFieldNumber = 1,
  };
  // repeated .viam.common.v1.LogEntry logs = 1 [json_name = "logs"];
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::viam::common::v1::LogEntry* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::LogEntry >*
      mutable_logs();
  private:
  const ::viam::common::v1::LogEntry& _internal_logs(int index) const;
  ::viam::common::v1::LogEntry* _internal_add_logs();
  public:
  const ::viam::common::v1::LogEntry& logs(int index) const;
  ::viam::common::v1::LogEntry* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::LogEntry >&
      logs() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.LogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::LogEntry > logs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class LogResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.LogResponse) */ {
 public:
  inline LogResponse() : LogResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR LogResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogResponse(const LogResponse& from);
  LogResponse(LogResponse&& from) noexcept
    : LogResponse() {
    *this = ::std::move(from);
  }

  inline LogResponse& operator=(const LogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogResponse& operator=(LogResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogResponse* internal_default_instance() {
    return reinterpret_cast<const LogResponse*>(
               &_LogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(LogResponse& a, LogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LogResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LogResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.LogResponse";
  }
  protected:
  explicit LogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.LogResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetCloudMetadataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetCloudMetadataRequest) */ {
 public:
  inline GetCloudMetadataRequest() : GetCloudMetadataRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetCloudMetadataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCloudMetadataRequest(const GetCloudMetadataRequest& from);
  GetCloudMetadataRequest(GetCloudMetadataRequest&& from) noexcept
    : GetCloudMetadataRequest() {
    *this = ::std::move(from);
  }

  inline GetCloudMetadataRequest& operator=(const GetCloudMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCloudMetadataRequest& operator=(GetCloudMetadataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCloudMetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCloudMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const GetCloudMetadataRequest*>(
               &_GetCloudMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetCloudMetadataRequest& a, GetCloudMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCloudMetadataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCloudMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCloudMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCloudMetadataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetCloudMetadataRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetCloudMetadataRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetCloudMetadataRequest";
  }
  protected:
  explicit GetCloudMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetCloudMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetCloudMetadataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetCloudMetadataResponse) */ {
 public:
  inline GetCloudMetadataResponse() : GetCloudMetadataResponse(nullptr) {}
  ~GetCloudMetadataResponse() override;
  explicit PROTOBUF_CONSTEXPR GetCloudMetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCloudMetadataResponse(const GetCloudMetadataResponse& from);
  GetCloudMetadataResponse(GetCloudMetadataResponse&& from) noexcept
    : GetCloudMetadataResponse() {
    *this = ::std::move(from);
  }

  inline GetCloudMetadataResponse& operator=(const GetCloudMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCloudMetadataResponse& operator=(GetCloudMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCloudMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCloudMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const GetCloudMetadataResponse*>(
               &_GetCloudMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetCloudMetadataResponse& a, GetCloudMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCloudMetadataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCloudMetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCloudMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCloudMetadataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCloudMetadataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCloudMetadataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCloudMetadataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetCloudMetadataResponse";
  }
  protected:
  explicit GetCloudMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotPartIdFieldNumber = 1,
    kPrimaryOrgIdFieldNumber = 2,
    kLocationIdFieldNumber = 3,
    kMachineIdFieldNumber = 4,
    kMachinePartIdFieldNumber = 5,
  };
  // string robot_part_id = 1 [json_name = "robotPartId", deprecated = true];
  PROTOBUF_DEPRECATED void clear_robot_part_id();
  PROTOBUF_DEPRECATED const std::string& robot_part_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_robot_part_id(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_robot_part_id();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_robot_part_id();
  PROTOBUF_DEPRECATED void set_allocated_robot_part_id(std::string* robot_part_id);
  private:
  const std::string& _internal_robot_part_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_part_id(const std::string& value);
  std::string* _internal_mutable_robot_part_id();
  public:

  // string primary_org_id = 2 [json_name = "primaryOrgId"];
  void clear_primary_org_id();
  const std::string& primary_org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_primary_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_primary_org_id();
  PROTOBUF_NODISCARD std::string* release_primary_org_id();
  void set_allocated_primary_org_id(std::string* primary_org_id);
  private:
  const std::string& _internal_primary_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_org_id(const std::string& value);
  std::string* _internal_mutable_primary_org_id();
  public:

  // string location_id = 3 [json_name = "locationId"];
  void clear_location_id();
  const std::string& location_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location_id();
  PROTOBUF_NODISCARD std::string* release_location_id();
  void set_allocated_location_id(std::string* location_id);
  private:
  const std::string& _internal_location_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location_id(const std::string& value);
  std::string* _internal_mutable_location_id();
  public:

  // string machine_id = 4 [json_name = "machineId"];
  void clear_machine_id();
  const std::string& machine_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine_id();
  PROTOBUF_NODISCARD std::string* release_machine_id();
  void set_allocated_machine_id(std::string* machine_id);
  private:
  const std::string& _internal_machine_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_id(const std::string& value);
  std::string* _internal_mutable_machine_id();
  public:

  // string machine_part_id = 5 [json_name = "machinePartId"];
  void clear_machine_part_id();
  const std::string& machine_part_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_machine_part_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_machine_part_id();
  PROTOBUF_NODISCARD std::string* release_machine_part_id();
  void set_allocated_machine_part_id(std::string* machine_part_id);
  private:
  const std::string& _internal_machine_part_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_machine_part_id(const std::string& value);
  std::string* _internal_mutable_machine_part_id();
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetCloudMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_part_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_org_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr machine_part_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class RestartModuleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.RestartModuleRequest) */ {
 public:
  inline RestartModuleRequest() : RestartModuleRequest(nullptr) {}
  ~RestartModuleRequest() override;
  explicit PROTOBUF_CONSTEXPR RestartModuleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestartModuleRequest(const RestartModuleRequest& from);
  RestartModuleRequest(RestartModuleRequest&& from) noexcept
    : RestartModuleRequest() {
    *this = ::std::move(from);
  }

  inline RestartModuleRequest& operator=(const RestartModuleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartModuleRequest& operator=(RestartModuleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RestartModuleRequest& default_instance() {
    return *internal_default_instance();
  }
  enum IdOrNameCase {
    kModuleId = 1,
    kModuleName = 2,
    ID_OR_NAME_NOT_SET = 0,
  };

  static inline const RestartModuleRequest* internal_default_instance() {
    return reinterpret_cast<const RestartModuleRequest*>(
               &_RestartModuleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(RestartModuleRequest& a, RestartModuleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartModuleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartModuleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RestartModuleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RestartModuleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RestartModuleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RestartModuleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestartModuleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.RestartModuleRequest";
  }
  protected:
  explicit RestartModuleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleIdFieldNumber = 1,
    kModuleNameFieldNumber = 2,
  };
  // string module_id = 1 [json_name = "moduleId"];
  bool has_module_id() const;
  private:
  bool _internal_has_module_id() const;
  public:
  void clear_module_id();
  const std::string& module_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_id();
  PROTOBUF_NODISCARD std::string* release_module_id();
  void set_allocated_module_id(std::string* module_id);
  private:
  const std::string& _internal_module_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_id(const std::string& value);
  std::string* _internal_mutable_module_id();
  public:

  // string module_name = 2 [json_name = "moduleName"];
  bool has_module_name() const;
  private:
  bool _internal_has_module_name() const;
  public:
  void clear_module_name();
  const std::string& module_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* module_name);
  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(const std::string& value);
  std::string* _internal_mutable_module_name();
  public:

  void clear_id_or_name();
  IdOrNameCase id_or_name_case() const;
  // @@protoc_insertion_point(class_scope:viam.robot.v1.RestartModuleRequest)
 private:
  class _Internal;
  void set_has_module_id();
  void set_has_module_name();

  inline bool has_id_or_name() const;
  inline void clear_has_id_or_name();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdOrNameUnion {
    constexpr IdOrNameUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
  } id_or_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class RestartModuleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.RestartModuleResponse) */ {
 public:
  inline RestartModuleResponse() : RestartModuleResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR RestartModuleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestartModuleResponse(const RestartModuleResponse& from);
  RestartModuleResponse(RestartModuleResponse&& from) noexcept
    : RestartModuleResponse() {
    *this = ::std::move(from);
  }

  inline RestartModuleResponse& operator=(const RestartModuleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestartModuleResponse& operator=(RestartModuleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RestartModuleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RestartModuleResponse* internal_default_instance() {
    return reinterpret_cast<const RestartModuleResponse*>(
               &_RestartModuleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(RestartModuleResponse& a, RestartModuleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RestartModuleResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestartModuleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RestartModuleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RestartModuleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RestartModuleResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RestartModuleResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.RestartModuleResponse";
  }
  protected:
  explicit RestartModuleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.RestartModuleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ShutdownRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.ShutdownRequest) */ {
 public:
  inline ShutdownRequest() : ShutdownRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ShutdownRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShutdownRequest(const ShutdownRequest& from);
  ShutdownRequest(ShutdownRequest&& from) noexcept
    : ShutdownRequest() {
    *this = ::std::move(from);
  }

  inline ShutdownRequest& operator=(const ShutdownRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownRequest& operator=(ShutdownRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShutdownRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShutdownRequest* internal_default_instance() {
    return reinterpret_cast<const ShutdownRequest*>(
               &_ShutdownRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ShutdownRequest& a, ShutdownRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShutdownRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShutdownRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ShutdownRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ShutdownRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ShutdownRequest";
  }
  protected:
  explicit ShutdownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ShutdownRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ShutdownResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.ShutdownResponse) */ {
 public:
  inline ShutdownResponse() : ShutdownResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ShutdownResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShutdownResponse(const ShutdownResponse& from);
  ShutdownResponse(ShutdownResponse&& from) noexcept
    : ShutdownResponse() {
    *this = ::std::move(from);
  }

  inline ShutdownResponse& operator=(const ShutdownResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownResponse& operator=(ShutdownResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShutdownResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShutdownResponse* internal_default_instance() {
    return reinterpret_cast<const ShutdownResponse*>(
               &_ShutdownResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ShutdownResponse& a, ShutdownResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShutdownResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShutdownResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShutdownResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShutdownResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ShutdownResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ShutdownResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ShutdownResponse";
  }
  protected:
  explicit ShutdownResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ShutdownResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetMachineStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetMachineStatusRequest) */ {
 public:
  inline GetMachineStatusRequest() : GetMachineStatusRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetMachineStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMachineStatusRequest(const GetMachineStatusRequest& from);
  GetMachineStatusRequest(GetMachineStatusRequest&& from) noexcept
    : GetMachineStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetMachineStatusRequest& operator=(const GetMachineStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMachineStatusRequest& operator=(GetMachineStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMachineStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMachineStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetMachineStatusRequest*>(
               &_GetMachineStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetMachineStatusRequest& a, GetMachineStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMachineStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMachineStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMachineStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMachineStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetMachineStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetMachineStatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetMachineStatusRequest";
  }
  protected:
  explicit GetMachineStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetMachineStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetMachineStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetMachineStatusResponse) */ {
 public:
  inline GetMachineStatusResponse() : GetMachineStatusResponse(nullptr) {}
  ~GetMachineStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR GetMachineStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMachineStatusResponse(const GetMachineStatusResponse& from);
  GetMachineStatusResponse(GetMachineStatusResponse&& from) noexcept
    : GetMachineStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetMachineStatusResponse& operator=(const GetMachineStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMachineStatusResponse& operator=(GetMachineStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMachineStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMachineStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetMachineStatusResponse*>(
               &_GetMachineStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetMachineStatusResponse& a, GetMachineStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMachineStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMachineStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMachineStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMachineStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMachineStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMachineStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMachineStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetMachineStatusResponse";
  }
  protected:
  explicit GetMachineStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GetMachineStatusResponse_State State;
  static constexpr State STATE_UNSPECIFIED =
    GetMachineStatusResponse_State_STATE_UNSPECIFIED;
  static constexpr State STATE_INITIALIZING =
    GetMachineStatusResponse_State_STATE_INITIALIZING;
  static constexpr State STATE_RUNNING =
    GetMachineStatusResponse_State_STATE_RUNNING;
  static inline bool State_IsValid(int value) {
    return GetMachineStatusResponse_State_IsValid(value);
  }
  static constexpr State State_MIN =
    GetMachineStatusResponse_State_State_MIN;
  static constexpr State State_MAX =
    GetMachineStatusResponse_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    GetMachineStatusResponse_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return GetMachineStatusResponse_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return GetMachineStatusResponse_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return GetMachineStatusResponse_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 1,
    kConfigFieldNumber = 2,
    kStateFieldNumber = 3,
  };
  // repeated .viam.robot.v1.ResourceStatus resources = 1 [json_name = "resources"];
  int resources_size() const;
  private:
  int _internal_resources_size() const;
  public:
  void clear_resources();
  ::viam::robot::v1::ResourceStatus* mutable_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceStatus >*
      mutable_resources();
  private:
  const ::viam::robot::v1::ResourceStatus& _internal_resources(int index) const;
  ::viam::robot::v1::ResourceStatus* _internal_add_resources();
  public:
  const ::viam::robot::v1::ResourceStatus& resources(int index) const;
  ::viam::robot::v1::ResourceStatus* add_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceStatus >&
      resources() const;

  // .viam.robot.v1.ConfigStatus config = 2 [json_name = "config"];
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::viam::robot::v1::ConfigStatus& config() const;
  PROTOBUF_NODISCARD ::viam::robot::v1::ConfigStatus* release_config();
  ::viam::robot::v1::ConfigStatus* mutable_config();
  void set_allocated_config(::viam::robot::v1::ConfigStatus* config);
  private:
  const ::viam::robot::v1::ConfigStatus& _internal_config() const;
  ::viam::robot::v1::ConfigStatus* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::viam::robot::v1::ConfigStatus* config);
  ::viam::robot::v1::ConfigStatus* unsafe_arena_release_config();

  // .viam.robot.v1.GetMachineStatusResponse.State state = 3 [json_name = "state"];
  void clear_state();
  ::viam::robot::v1::GetMachineStatusResponse_State state() const;
  void set_state(::viam::robot::v1::GetMachineStatusResponse_State value);
  private:
  ::viam::robot::v1::GetMachineStatusResponse_State _internal_state() const;
  void _internal_set_state(::viam::robot::v1::GetMachineStatusResponse_State value);
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetMachineStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceStatus > resources_;
  ::viam::robot::v1::ConfigStatus* config_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ResourceStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.ResourceStatus) */ {
 public:
  inline ResourceStatus() : ResourceStatus(nullptr) {}
  ~ResourceStatus() override;
  explicit PROTOBUF_CONSTEXPR ResourceStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceStatus(const ResourceStatus& from);
  ResourceStatus(ResourceStatus&& from) noexcept
    : ResourceStatus() {
    *this = ::std::move(from);
  }

  inline ResourceStatus& operator=(const ResourceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceStatus& operator=(ResourceStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceStatus* internal_default_instance() {
    return reinterpret_cast<const ResourceStatus*>(
               &_ResourceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ResourceStatus& a, ResourceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ResourceStatus";
  }
  protected:
  explicit ResourceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResourceStatus_State State;
  static constexpr State STATE_UNSPECIFIED =
    ResourceStatus_State_STATE_UNSPECIFIED;
  static constexpr State STATE_UNCONFIGURED =
    ResourceStatus_State_STATE_UNCONFIGURED;
  static constexpr State STATE_CONFIGURING =
    ResourceStatus_State_STATE_CONFIGURING;
  static constexpr State STATE_READY =
    ResourceStatus_State_STATE_READY;
  static constexpr State STATE_REMOVING =
    ResourceStatus_State_STATE_REMOVING;
  static constexpr State STATE_UNHEALTHY =
    ResourceStatus_State_STATE_UNHEALTHY;
  static inline bool State_IsValid(int value) {
    return ResourceStatus_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ResourceStatus_State_State_MIN;
  static constexpr State State_MAX =
    ResourceStatus_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ResourceStatus_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ResourceStatus_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ResourceStatus_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ResourceStatus_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRevisionFieldNumber = 4,
    kErrorFieldNumber = 5,
    kNameFieldNumber = 1,
    kLastUpdatedFieldNumber = 3,
    kCloudMetadataFieldNumber = 6,
    kStateFieldNumber = 2,
  };
  // string revision = 4 [json_name = "revision"];
  void clear_revision();
  const std::string& revision() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_revision(ArgT0&& arg0, ArgT... args);
  std::string* mutable_revision();
  PROTOBUF_NODISCARD std::string* release_revision();
  void set_allocated_revision(std::string* revision);
  private:
  const std::string& _internal_revision() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_revision(const std::string& value);
  std::string* _internal_mutable_revision();
  public:

  // string error = 5 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .viam.common.v1.ResourceName name = 1 [json_name = "name"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::viam::common::v1::ResourceName& name() const;
  PROTOBUF_NODISCARD ::viam::common::v1::ResourceName* release_name();
  ::viam::common::v1::ResourceName* mutable_name();
  void set_allocated_name(::viam::common::v1::ResourceName* name);
  private:
  const ::viam::common::v1::ResourceName& _internal_name() const;
  ::viam::common::v1::ResourceName* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::viam::common::v1::ResourceName* name);
  ::viam::common::v1::ResourceName* unsafe_arena_release_name();

  // .google.protobuf.Timestamp last_updated = 3 [json_name = "lastUpdated"];
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_updated();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_updated() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_updated();
  public:
  void unsafe_arena_set_allocated_last_updated(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_updated();

  // optional .viam.robot.v1.GetCloudMetadataResponse cloud_metadata = 6 [json_name = "cloudMetadata"];
  bool has_cloud_metadata() const;
  private:
  bool _internal_has_cloud_metadata() const;
  public:
  void clear_cloud_metadata();
  const ::viam::robot::v1::GetCloudMetadataResponse& cloud_metadata() const;
  PROTOBUF_NODISCARD ::viam::robot::v1::GetCloudMetadataResponse* release_cloud_metadata();
  ::viam::robot::v1::GetCloudMetadataResponse* mutable_cloud_metadata();
  void set_allocated_cloud_metadata(::viam::robot::v1::GetCloudMetadataResponse* cloud_metadata);
  private:
  const ::viam::robot::v1::GetCloudMetadataResponse& _internal_cloud_metadata() const;
  ::viam::robot::v1::GetCloudMetadataResponse* _internal_mutable_cloud_metadata();
  public:
  void unsafe_arena_set_allocated_cloud_metadata(
      ::viam::robot::v1::GetCloudMetadataResponse* cloud_metadata);
  ::viam::robot::v1::GetCloudMetadataResponse* unsafe_arena_release_cloud_metadata();

  // .viam.robot.v1.ResourceStatus.State state = 2 [json_name = "state"];
  void clear_state();
  ::viam::robot::v1::ResourceStatus_State state() const;
  void set_state(::viam::robot::v1::ResourceStatus_State value);
  private:
  ::viam::robot::v1::ResourceStatus_State _internal_state() const;
  void _internal_set_state(::viam::robot::v1::ResourceStatus_State value);
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ResourceStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr revision_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::viam::common::v1::ResourceName* name_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_;
  ::viam::robot::v1::GetCloudMetadataResponse* cloud_metadata_;
  int state_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ConfigStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.ConfigStatus) */ {
 public:
  inline ConfigStatus() : ConfigStatus(nullptr) {}
  ~ConfigStatus() override;
  explicit PROTOBUF_CONSTEXPR ConfigStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigStatus(const ConfigStatus& from);
  ConfigStatus(ConfigStatus&& from) noexcept
    : ConfigStatus() {
    *this = ::std::move(from);
  }

  inline ConfigStatus& operator=(const ConfigStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigStatus& operator=(ConfigStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigStatus* internal_default_instance() {
    return reinterpret_cast<const ConfigStatus*>(
               &_ConfigStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(ConfigStatus& a, ConfigStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ConfigStatus";
  }
  protected:
  explicit ConfigStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRevisionFieldNumber = 1,
    kLastUpdatedFieldNumber = 2,
  };
  // string revision = 1 [json_name = "revision"];
  void clear_revision();
  const std::string& revision() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_revision(ArgT0&& arg0, ArgT... args);
  std::string* mutable_revision();
  PROTOBUF_NODISCARD std::string* release_revision();
  void set_allocated_revision(std::string* revision);
  private:
  const std::string& _internal_revision() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_revision(const std::string& value);
  std::string* _internal_mutable_revision();
  public:

  // .google.protobuf.Timestamp last_updated = 2 [json_name = "lastUpdated"];
  bool has_last_updated() const;
  private:
  bool _internal_has_last_updated() const;
  public:
  void clear_last_updated();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_updated() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_updated();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_updated();
  void set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_updated() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_updated();
  public:
  void unsafe_arena_set_allocated_last_updated(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_updated();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ConfigStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr revision_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetVersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetVersionRequest) */ {
 public:
  inline GetVersionRequest() : GetVersionRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetVersionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVersionRequest(const GetVersionRequest& from);
  GetVersionRequest(GetVersionRequest&& from) noexcept
    : GetVersionRequest() {
    *this = ::std::move(from);
  }

  inline GetVersionRequest& operator=(const GetVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVersionRequest& operator=(GetVersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVersionRequest* internal_default_instance() {
    return reinterpret_cast<const GetVersionRequest*>(
               &_GetVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GetVersionRequest& a, GetVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVersionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVersionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetVersionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetVersionRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetVersionRequest";
  }
  protected:
  explicit GetVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetVersionResponse) */ {
 public:
  inline GetVersionResponse() : GetVersionResponse(nullptr) {}
  ~GetVersionResponse() override;
  explicit PROTOBUF_CONSTEXPR GetVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVersionResponse(const GetVersionResponse& from);
  GetVersionResponse(GetVersionResponse&& from) noexcept
    : GetVersionResponse() {
    *this = ::std::move(from);
  }

  inline GetVersionResponse& operator=(const GetVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVersionResponse& operator=(GetVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVersionResponse* internal_default_instance() {
    return reinterpret_cast<const GetVersionResponse*>(
               &_GetVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GetVersionResponse& a, GetVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetVersionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetVersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetVersionResponse";
  }
  protected:
  explicit GetVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformFieldNumber = 1,
    kVersionFieldNumber = 2,
    kApiVersionFieldNumber = 3,
  };
  // string platform = 1 [json_name = "platform"];
  void clear_platform();
  const std::string& platform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_platform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // string version = 2 [json_name = "version"];
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string api_version = 3 [json_name = "apiVersion"];
  void clear_api_version();
  const std::string& api_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_api_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_api_version();
  PROTOBUF_NODISCARD std::string* release_api_version();
  void set_allocated_api_version(std::string* api_version);
  private:
  const std::string& _internal_api_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_version(const std::string& value);
  std::string* _internal_mutable_api_version();
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TunnelRequest

// uint32 destination_port = 1 [json_name = "destinationPort"];
inline void TunnelRequest::clear_destination_port() {
  destination_port_ = 0u;
}
inline uint32_t TunnelRequest::_internal_destination_port() const {
  return destination_port_;
}
inline uint32_t TunnelRequest::destination_port() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TunnelRequest.destination_port)
  return _internal_destination_port();
}
inline void TunnelRequest::_internal_set_destination_port(uint32_t value) {
  
  destination_port_ = value;
}
inline void TunnelRequest::set_destination_port(uint32_t value) {
  _internal_set_destination_port(value);
  // @@protoc_insertion_point(field_set:viam.robot.v1.TunnelRequest.destination_port)
}

// bytes data = 2 [json_name = "data"];
inline void TunnelRequest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& TunnelRequest::data() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TunnelRequest.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TunnelRequest::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.TunnelRequest.data)
}
inline std::string* TunnelRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TunnelRequest.data)
  return _s;
}
inline const std::string& TunnelRequest::_internal_data() const {
  return data_.Get();
}
inline void TunnelRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* TunnelRequest::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* TunnelRequest::release_data() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.TunnelRequest.data)
  return data_.Release();
}
inline void TunnelRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.TunnelRequest.data)
}

// -------------------------------------------------------------------

// TunnelResponse

// bytes data = 1 [json_name = "data"];
inline void TunnelResponse::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& TunnelResponse::data() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TunnelResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TunnelResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.TunnelResponse.data)
}
inline std::string* TunnelResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TunnelResponse.data)
  return _s;
}
inline const std::string& TunnelResponse::_internal_data() const {
  return data_.Get();
}
inline void TunnelResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* TunnelResponse::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* TunnelResponse::release_data() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.TunnelResponse.data)
  return data_.Release();
}
inline void TunnelResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.TunnelResponse.data)
}

// -------------------------------------------------------------------

// ListTunnelsRequest

// -------------------------------------------------------------------

// ListTunnelsResponse

// repeated .viam.robot.v1.Tunnel tunnels = 1 [json_name = "tunnels"];
inline int ListTunnelsResponse::_internal_tunnels_size() const {
  return tunnels_.size();
}
inline int ListTunnelsResponse::tunnels_size() const {
  return _internal_tunnels_size();
}
inline void ListTunnelsResponse::clear_tunnels() {
  tunnels_.Clear();
}
inline ::viam::robot::v1::Tunnel* ListTunnelsResponse::mutable_tunnels(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ListTunnelsResponse.tunnels)
  return tunnels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Tunnel >*
ListTunnelsResponse::mutable_tunnels() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.ListTunnelsResponse.tunnels)
  return &tunnels_;
}
inline const ::viam::robot::v1::Tunnel& ListTunnelsResponse::_internal_tunnels(int index) const {
  return tunnels_.Get(index);
}
inline const ::viam::robot::v1::Tunnel& ListTunnelsResponse::tunnels(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ListTunnelsResponse.tunnels)
  return _internal_tunnels(index);
}
inline ::viam::robot::v1::Tunnel* ListTunnelsResponse::_internal_add_tunnels() {
  return tunnels_.Add();
}
inline ::viam::robot::v1::Tunnel* ListTunnelsResponse::add_tunnels() {
  ::viam::robot::v1::Tunnel* _add = _internal_add_tunnels();
  // @@protoc_insertion_point(field_add:viam.robot.v1.ListTunnelsResponse.tunnels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Tunnel >&
ListTunnelsResponse::tunnels() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.ListTunnelsResponse.tunnels)
  return tunnels_;
}

// -------------------------------------------------------------------

// Tunnel

// uint32 port = 1 [json_name = "port"];
inline void Tunnel::clear_port() {
  port_ = 0u;
}
inline uint32_t Tunnel::_internal_port() const {
  return port_;
}
inline uint32_t Tunnel::port() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Tunnel.port)
  return _internal_port();
}
inline void Tunnel::_internal_set_port(uint32_t value) {
  
  port_ = value;
}
inline void Tunnel::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:viam.robot.v1.Tunnel.port)
}

// .google.protobuf.Duration connection_timeout = 2 [json_name = "connectionTimeout"];
inline bool Tunnel::_internal_has_connection_timeout() const {
  return this != internal_default_instance() && connection_timeout_ != nullptr;
}
inline bool Tunnel::has_connection_timeout() const {
  return _internal_has_connection_timeout();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Tunnel::_internal_connection_timeout() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = connection_timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Tunnel::connection_timeout() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Tunnel.connection_timeout)
  return _internal_connection_timeout();
}
inline void Tunnel::unsafe_arena_set_allocated_connection_timeout(
    ::PROTOBUF_NAMESPACE_ID::Duration* connection_timeout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_timeout_);
  }
  connection_timeout_ = connection_timeout;
  if (connection_timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Tunnel.connection_timeout)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Tunnel::release_connection_timeout() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = connection_timeout_;
  connection_timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Tunnel::unsafe_arena_release_connection_timeout() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Tunnel.connection_timeout)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = connection_timeout_;
  connection_timeout_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Tunnel::_internal_mutable_connection_timeout() {
  
  if (connection_timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    connection_timeout_ = p;
  }
  return connection_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Tunnel::mutable_connection_timeout() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_connection_timeout();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Tunnel.connection_timeout)
  return _msg;
}
inline void Tunnel::set_allocated_connection_timeout(::PROTOBUF_NAMESPACE_ID::Duration* connection_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_timeout_);
  }
  if (connection_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_timeout));
    if (message_arena != submessage_arena) {
      connection_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_timeout, submessage_arena);
    }
    
  } else {
    
  }
  connection_timeout_ = connection_timeout;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Tunnel.connection_timeout)
}

// -------------------------------------------------------------------

// FrameSystemConfig

// .viam.common.v1.Transform frame = 1 [json_name = "frame"];
inline bool FrameSystemConfig::_internal_has_frame() const {
  return this != internal_default_instance() && frame_ != nullptr;
}
inline bool FrameSystemConfig::has_frame() const {
  return _internal_has_frame();
}
inline const ::viam::common::v1::Transform& FrameSystemConfig::_internal_frame() const {
  const ::viam::common::v1::Transform* p = frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Transform&>(
      ::viam::common::v1::_Transform_default_instance_);
}
inline const ::viam::common::v1::Transform& FrameSystemConfig::frame() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.FrameSystemConfig.frame)
  return _internal_frame();
}
inline void FrameSystemConfig::unsafe_arena_set_allocated_frame(
    ::viam::common::v1::Transform* frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  frame_ = frame;
  if (frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.FrameSystemConfig.frame)
}
inline ::viam::common::v1::Transform* FrameSystemConfig::release_frame() {
  
  ::viam::common::v1::Transform* temp = frame_;
  frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Transform* FrameSystemConfig::unsafe_arena_release_frame() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.FrameSystemConfig.frame)
  
  ::viam::common::v1::Transform* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Transform* FrameSystemConfig::_internal_mutable_frame() {
  
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Transform>(GetArenaForAllocation());
    frame_ = p;
  }
  return frame_;
}
inline ::viam::common::v1::Transform* FrameSystemConfig::mutable_frame() {
  ::viam::common::v1::Transform* _msg = _internal_mutable_frame();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.FrameSystemConfig.frame)
  return _msg;
}
inline void FrameSystemConfig::set_allocated_frame(::viam::common::v1::Transform* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_);
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame));
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    
  } else {
    
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.FrameSystemConfig.frame)
}

// .google.protobuf.Struct kinematics = 2 [json_name = "kinematics"];
inline bool FrameSystemConfig::_internal_has_kinematics() const {
  return this != internal_default_instance() && kinematics_ != nullptr;
}
inline bool FrameSystemConfig::has_kinematics() const {
  return _internal_has_kinematics();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& FrameSystemConfig::_internal_kinematics() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = kinematics_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& FrameSystemConfig::kinematics() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.FrameSystemConfig.kinematics)
  return _internal_kinematics();
}
inline void FrameSystemConfig::unsafe_arena_set_allocated_kinematics(
    ::PROTOBUF_NAMESPACE_ID::Struct* kinematics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kinematics_);
  }
  kinematics_ = kinematics;
  if (kinematics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.FrameSystemConfig.kinematics)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* FrameSystemConfig::release_kinematics() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = kinematics_;
  kinematics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* FrameSystemConfig::unsafe_arena_release_kinematics() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.FrameSystemConfig.kinematics)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = kinematics_;
  kinematics_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* FrameSystemConfig::_internal_mutable_kinematics() {
  
  if (kinematics_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    kinematics_ = p;
  }
  return kinematics_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* FrameSystemConfig::mutable_kinematics() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_kinematics();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.FrameSystemConfig.kinematics)
  return _msg;
}
inline void FrameSystemConfig::set_allocated_kinematics(::PROTOBUF_NAMESPACE_ID::Struct* kinematics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(kinematics_);
  }
  if (kinematics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kinematics));
    if (message_arena != submessage_arena) {
      kinematics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kinematics, submessage_arena);
    }
    
  } else {
    
  }
  kinematics_ = kinematics;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.FrameSystemConfig.kinematics)
}

// -------------------------------------------------------------------

// FrameSystemConfigRequest

// repeated .viam.common.v1.Transform supplemental_transforms = 1 [json_name = "supplementalTransforms"];
inline int FrameSystemConfigRequest::_internal_supplemental_transforms_size() const {
  return supplemental_transforms_.size();
}
inline int FrameSystemConfigRequest::supplemental_transforms_size() const {
  return _internal_supplemental_transforms_size();
}
inline ::viam::common::v1::Transform* FrameSystemConfigRequest::mutable_supplemental_transforms(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.FrameSystemConfigRequest.supplemental_transforms)
  return supplemental_transforms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >*
FrameSystemConfigRequest::mutable_supplemental_transforms() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.FrameSystemConfigRequest.supplemental_transforms)
  return &supplemental_transforms_;
}
inline const ::viam::common::v1::Transform& FrameSystemConfigRequest::_internal_supplemental_transforms(int index) const {
  return supplemental_transforms_.Get(index);
}
inline const ::viam::common::v1::Transform& FrameSystemConfigRequest::supplemental_transforms(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.FrameSystemConfigRequest.supplemental_transforms)
  return _internal_supplemental_transforms(index);
}
inline ::viam::common::v1::Transform* FrameSystemConfigRequest::_internal_add_supplemental_transforms() {
  return supplemental_transforms_.Add();
}
inline ::viam::common::v1::Transform* FrameSystemConfigRequest::add_supplemental_transforms() {
  ::viam::common::v1::Transform* _add = _internal_add_supplemental_transforms();
  // @@protoc_insertion_point(field_add:viam.robot.v1.FrameSystemConfigRequest.supplemental_transforms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >&
FrameSystemConfigRequest::supplemental_transforms() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.FrameSystemConfigRequest.supplemental_transforms)
  return supplemental_transforms_;
}

// -------------------------------------------------------------------

// FrameSystemConfigResponse

// repeated .viam.robot.v1.FrameSystemConfig frame_system_configs = 1 [json_name = "frameSystemConfigs"];
inline int FrameSystemConfigResponse::_internal_frame_system_configs_size() const {
  return frame_system_configs_.size();
}
inline int FrameSystemConfigResponse::frame_system_configs_size() const {
  return _internal_frame_system_configs_size();
}
inline void FrameSystemConfigResponse::clear_frame_system_configs() {
  frame_system_configs_.Clear();
}
inline ::viam::robot::v1::FrameSystemConfig* FrameSystemConfigResponse::mutable_frame_system_configs(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.FrameSystemConfigResponse.frame_system_configs)
  return frame_system_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::FrameSystemConfig >*
FrameSystemConfigResponse::mutable_frame_system_configs() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.FrameSystemConfigResponse.frame_system_configs)
  return &frame_system_configs_;
}
inline const ::viam::robot::v1::FrameSystemConfig& FrameSystemConfigResponse::_internal_frame_system_configs(int index) const {
  return frame_system_configs_.Get(index);
}
inline const ::viam::robot::v1::FrameSystemConfig& FrameSystemConfigResponse::frame_system_configs(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.FrameSystemConfigResponse.frame_system_configs)
  return _internal_frame_system_configs(index);
}
inline ::viam::robot::v1::FrameSystemConfig* FrameSystemConfigResponse::_internal_add_frame_system_configs() {
  return frame_system_configs_.Add();
}
inline ::viam::robot::v1::FrameSystemConfig* FrameSystemConfigResponse::add_frame_system_configs() {
  ::viam::robot::v1::FrameSystemConfig* _add = _internal_add_frame_system_configs();
  // @@protoc_insertion_point(field_add:viam.robot.v1.FrameSystemConfigResponse.frame_system_configs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::FrameSystemConfig >&
FrameSystemConfigResponse::frame_system_configs() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.FrameSystemConfigResponse.frame_system_configs)
  return frame_system_configs_;
}

// -------------------------------------------------------------------

// TransformPoseRequest

// .viam.common.v1.PoseInFrame source = 1 [json_name = "source"];
inline bool TransformPoseRequest::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool TransformPoseRequest::has_source() const {
  return _internal_has_source();
}
inline const ::viam::common::v1::PoseInFrame& TransformPoseRequest::_internal_source() const {
  const ::viam::common::v1::PoseInFrame* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::PoseInFrame&>(
      ::viam::common::v1::_PoseInFrame_default_instance_);
}
inline const ::viam::common::v1::PoseInFrame& TransformPoseRequest::source() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TransformPoseRequest.source)
  return _internal_source();
}
inline void TransformPoseRequest::unsafe_arena_set_allocated_source(
    ::viam::common::v1::PoseInFrame* source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.TransformPoseRequest.source)
}
inline ::viam::common::v1::PoseInFrame* TransformPoseRequest::release_source() {
  
  ::viam::common::v1::PoseInFrame* temp = source_;
  source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::PoseInFrame* TransformPoseRequest::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.TransformPoseRequest.source)
  
  ::viam::common::v1::PoseInFrame* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::viam::common::v1::PoseInFrame* TransformPoseRequest::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::PoseInFrame>(GetArenaForAllocation());
    source_ = p;
  }
  return source_;
}
inline ::viam::common::v1::PoseInFrame* TransformPoseRequest::mutable_source() {
  ::viam::common::v1::PoseInFrame* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TransformPoseRequest.source)
  return _msg;
}
inline void TransformPoseRequest::set_allocated_source(::viam::common::v1::PoseInFrame* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source));
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.TransformPoseRequest.source)
}

// string destination = 2 [json_name = "destination"];
inline void TransformPoseRequest::clear_destination() {
  destination_.ClearToEmpty();
}
inline const std::string& TransformPoseRequest::destination() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TransformPoseRequest.destination)
  return _internal_destination();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformPoseRequest::set_destination(ArgT0&& arg0, ArgT... args) {
 
 destination_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.TransformPoseRequest.destination)
}
inline std::string* TransformPoseRequest::mutable_destination() {
  std::string* _s = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TransformPoseRequest.destination)
  return _s;
}
inline const std::string& TransformPoseRequest::_internal_destination() const {
  return destination_.Get();
}
inline void TransformPoseRequest::_internal_set_destination(const std::string& value) {
  
  destination_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformPoseRequest::_internal_mutable_destination() {
  
  return destination_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformPoseRequest::release_destination() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.TransformPoseRequest.destination)
  return destination_.Release();
}
inline void TransformPoseRequest::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocated(destination, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (destination_.IsDefault()) {
    destination_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.TransformPoseRequest.destination)
}

// repeated .viam.common.v1.Transform supplemental_transforms = 3 [json_name = "supplementalTransforms"];
inline int TransformPoseRequest::_internal_supplemental_transforms_size() const {
  return supplemental_transforms_.size();
}
inline int TransformPoseRequest::supplemental_transforms_size() const {
  return _internal_supplemental_transforms_size();
}
inline ::viam::common::v1::Transform* TransformPoseRequest::mutable_supplemental_transforms(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TransformPoseRequest.supplemental_transforms)
  return supplemental_transforms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >*
TransformPoseRequest::mutable_supplemental_transforms() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.TransformPoseRequest.supplemental_transforms)
  return &supplemental_transforms_;
}
inline const ::viam::common::v1::Transform& TransformPoseRequest::_internal_supplemental_transforms(int index) const {
  return supplemental_transforms_.Get(index);
}
inline const ::viam::common::v1::Transform& TransformPoseRequest::supplemental_transforms(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TransformPoseRequest.supplemental_transforms)
  return _internal_supplemental_transforms(index);
}
inline ::viam::common::v1::Transform* TransformPoseRequest::_internal_add_supplemental_transforms() {
  return supplemental_transforms_.Add();
}
inline ::viam::common::v1::Transform* TransformPoseRequest::add_supplemental_transforms() {
  ::viam::common::v1::Transform* _add = _internal_add_supplemental_transforms();
  // @@protoc_insertion_point(field_add:viam.robot.v1.TransformPoseRequest.supplemental_transforms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >&
TransformPoseRequest::supplemental_transforms() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.TransformPoseRequest.supplemental_transforms)
  return supplemental_transforms_;
}

// -------------------------------------------------------------------

// TransformPoseResponse

// .viam.common.v1.PoseInFrame pose = 1 [json_name = "pose"];
inline bool TransformPoseResponse::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool TransformPoseResponse::has_pose() const {
  return _internal_has_pose();
}
inline const ::viam::common::v1::PoseInFrame& TransformPoseResponse::_internal_pose() const {
  const ::viam::common::v1::PoseInFrame* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::PoseInFrame&>(
      ::viam::common::v1::_PoseInFrame_default_instance_);
}
inline const ::viam::common::v1::PoseInFrame& TransformPoseResponse::pose() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TransformPoseResponse.pose)
  return _internal_pose();
}
inline void TransformPoseResponse::unsafe_arena_set_allocated_pose(
    ::viam::common::v1::PoseInFrame* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.TransformPoseResponse.pose)
}
inline ::viam::common::v1::PoseInFrame* TransformPoseResponse::release_pose() {
  
  ::viam::common::v1::PoseInFrame* temp = pose_;
  pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::PoseInFrame* TransformPoseResponse::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.TransformPoseResponse.pose)
  
  ::viam::common::v1::PoseInFrame* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::viam::common::v1::PoseInFrame* TransformPoseResponse::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::PoseInFrame>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::viam::common::v1::PoseInFrame* TransformPoseResponse::mutable_pose() {
  ::viam::common::v1::PoseInFrame* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TransformPoseResponse.pose)
  return _msg;
}
inline void TransformPoseResponse::set_allocated_pose(::viam::common::v1::PoseInFrame* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.TransformPoseResponse.pose)
}

// -------------------------------------------------------------------

// TransformPCDRequest

// bytes point_cloud_pcd = 1 [json_name = "pointCloudPcd"];
inline void TransformPCDRequest::clear_point_cloud_pcd() {
  point_cloud_pcd_.ClearToEmpty();
}
inline const std::string& TransformPCDRequest::point_cloud_pcd() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TransformPCDRequest.point_cloud_pcd)
  return _internal_point_cloud_pcd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformPCDRequest::set_point_cloud_pcd(ArgT0&& arg0, ArgT... args) {
 
 point_cloud_pcd_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.TransformPCDRequest.point_cloud_pcd)
}
inline std::string* TransformPCDRequest::mutable_point_cloud_pcd() {
  std::string* _s = _internal_mutable_point_cloud_pcd();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TransformPCDRequest.point_cloud_pcd)
  return _s;
}
inline const std::string& TransformPCDRequest::_internal_point_cloud_pcd() const {
  return point_cloud_pcd_.Get();
}
inline void TransformPCDRequest::_internal_set_point_cloud_pcd(const std::string& value) {
  
  point_cloud_pcd_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformPCDRequest::_internal_mutable_point_cloud_pcd() {
  
  return point_cloud_pcd_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformPCDRequest::release_point_cloud_pcd() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.TransformPCDRequest.point_cloud_pcd)
  return point_cloud_pcd_.Release();
}
inline void TransformPCDRequest::set_allocated_point_cloud_pcd(std::string* point_cloud_pcd) {
  if (point_cloud_pcd != nullptr) {
    
  } else {
    
  }
  point_cloud_pcd_.SetAllocated(point_cloud_pcd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (point_cloud_pcd_.IsDefault()) {
    point_cloud_pcd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.TransformPCDRequest.point_cloud_pcd)
}

// string source = 2 [json_name = "source"];
inline void TransformPCDRequest::clear_source() {
  source_.ClearToEmpty();
}
inline const std::string& TransformPCDRequest::source() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TransformPCDRequest.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformPCDRequest::set_source(ArgT0&& arg0, ArgT... args) {
 
 source_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.TransformPCDRequest.source)
}
inline std::string* TransformPCDRequest::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TransformPCDRequest.source)
  return _s;
}
inline const std::string& TransformPCDRequest::_internal_source() const {
  return source_.Get();
}
inline void TransformPCDRequest::_internal_set_source(const std::string& value) {
  
  source_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformPCDRequest::_internal_mutable_source() {
  
  return source_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformPCDRequest::release_source() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.TransformPCDRequest.source)
  return source_.Release();
}
inline void TransformPCDRequest::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (source_.IsDefault()) {
    source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.TransformPCDRequest.source)
}

// string destination = 3 [json_name = "destination"];
inline void TransformPCDRequest::clear_destination() {
  destination_.ClearToEmpty();
}
inline const std::string& TransformPCDRequest::destination() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TransformPCDRequest.destination)
  return _internal_destination();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformPCDRequest::set_destination(ArgT0&& arg0, ArgT... args) {
 
 destination_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.TransformPCDRequest.destination)
}
inline std::string* TransformPCDRequest::mutable_destination() {
  std::string* _s = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TransformPCDRequest.destination)
  return _s;
}
inline const std::string& TransformPCDRequest::_internal_destination() const {
  return destination_.Get();
}
inline void TransformPCDRequest::_internal_set_destination(const std::string& value) {
  
  destination_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformPCDRequest::_internal_mutable_destination() {
  
  return destination_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformPCDRequest::release_destination() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.TransformPCDRequest.destination)
  return destination_.Release();
}
inline void TransformPCDRequest::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocated(destination, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (destination_.IsDefault()) {
    destination_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.TransformPCDRequest.destination)
}

// -------------------------------------------------------------------

// TransformPCDResponse

// bytes point_cloud_pcd = 1 [json_name = "pointCloudPcd"];
inline void TransformPCDResponse::clear_point_cloud_pcd() {
  point_cloud_pcd_.ClearToEmpty();
}
inline const std::string& TransformPCDResponse::point_cloud_pcd() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TransformPCDResponse.point_cloud_pcd)
  return _internal_point_cloud_pcd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformPCDResponse::set_point_cloud_pcd(ArgT0&& arg0, ArgT... args) {
 
 point_cloud_pcd_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.TransformPCDResponse.point_cloud_pcd)
}
inline std::string* TransformPCDResponse::mutable_point_cloud_pcd() {
  std::string* _s = _internal_mutable_point_cloud_pcd();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TransformPCDResponse.point_cloud_pcd)
  return _s;
}
inline const std::string& TransformPCDResponse::_internal_point_cloud_pcd() const {
  return point_cloud_pcd_.Get();
}
inline void TransformPCDResponse::_internal_set_point_cloud_pcd(const std::string& value) {
  
  point_cloud_pcd_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformPCDResponse::_internal_mutable_point_cloud_pcd() {
  
  return point_cloud_pcd_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformPCDResponse::release_point_cloud_pcd() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.TransformPCDResponse.point_cloud_pcd)
  return point_cloud_pcd_.Release();
}
inline void TransformPCDResponse::set_allocated_point_cloud_pcd(std::string* point_cloud_pcd) {
  if (point_cloud_pcd != nullptr) {
    
  } else {
    
  }
  point_cloud_pcd_.SetAllocated(point_cloud_pcd, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (point_cloud_pcd_.IsDefault()) {
    point_cloud_pcd_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.TransformPCDResponse.point_cloud_pcd)
}

// -------------------------------------------------------------------

// ResourceNamesRequest

// -------------------------------------------------------------------

// ResourceNamesResponse

// repeated .viam.common.v1.ResourceName resources = 1 [json_name = "resources"];
inline int ResourceNamesResponse::_internal_resources_size() const {
  return resources_.size();
}
inline int ResourceNamesResponse::resources_size() const {
  return _internal_resources_size();
}
inline ::viam::common::v1::ResourceName* ResourceNamesResponse::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceNamesResponse.resources)
  return resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
ResourceNamesResponse::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.ResourceNamesResponse.resources)
  return &resources_;
}
inline const ::viam::common::v1::ResourceName& ResourceNamesResponse::_internal_resources(int index) const {
  return resources_.Get(index);
}
inline const ::viam::common::v1::ResourceName& ResourceNamesResponse::resources(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceNamesResponse.resources)
  return _internal_resources(index);
}
inline ::viam::common::v1::ResourceName* ResourceNamesResponse::_internal_add_resources() {
  return resources_.Add();
}
inline ::viam::common::v1::ResourceName* ResourceNamesResponse::add_resources() {
  ::viam::common::v1::ResourceName* _add = _internal_add_resources();
  // @@protoc_insertion_point(field_add:viam.robot.v1.ResourceNamesResponse.resources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
ResourceNamesResponse::resources() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.ResourceNamesResponse.resources)
  return resources_;
}

// -------------------------------------------------------------------

// ResourceRPCSubtype

// .viam.common.v1.ResourceName subtype = 1 [json_name = "subtype"];
inline bool ResourceRPCSubtype::_internal_has_subtype() const {
  return this != internal_default_instance() && subtype_ != nullptr;
}
inline bool ResourceRPCSubtype::has_subtype() const {
  return _internal_has_subtype();
}
inline const ::viam::common::v1::ResourceName& ResourceRPCSubtype::_internal_subtype() const {
  const ::viam::common::v1::ResourceName* p = subtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::ResourceName&>(
      ::viam::common::v1::_ResourceName_default_instance_);
}
inline const ::viam::common::v1::ResourceName& ResourceRPCSubtype::subtype() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceRPCSubtype.subtype)
  return _internal_subtype();
}
inline void ResourceRPCSubtype::unsafe_arena_set_allocated_subtype(
    ::viam::common::v1::ResourceName* subtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subtype_);
  }
  subtype_ = subtype;
  if (subtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.ResourceRPCSubtype.subtype)
}
inline ::viam::common::v1::ResourceName* ResourceRPCSubtype::release_subtype() {
  
  ::viam::common::v1::ResourceName* temp = subtype_;
  subtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::ResourceName* ResourceRPCSubtype::unsafe_arena_release_subtype() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ResourceRPCSubtype.subtype)
  
  ::viam::common::v1::ResourceName* temp = subtype_;
  subtype_ = nullptr;
  return temp;
}
inline ::viam::common::v1::ResourceName* ResourceRPCSubtype::_internal_mutable_subtype() {
  
  if (subtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::ResourceName>(GetArenaForAllocation());
    subtype_ = p;
  }
  return subtype_;
}
inline ::viam::common::v1::ResourceName* ResourceRPCSubtype::mutable_subtype() {
  ::viam::common::v1::ResourceName* _msg = _internal_mutable_subtype();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceRPCSubtype.subtype)
  return _msg;
}
inline void ResourceRPCSubtype::set_allocated_subtype(::viam::common::v1::ResourceName* subtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subtype_);
  }
  if (subtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subtype));
    if (message_arena != submessage_arena) {
      subtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subtype, submessage_arena);
    }
    
  } else {
    
  }
  subtype_ = subtype;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ResourceRPCSubtype.subtype)
}

// string proto_service = 2 [json_name = "protoService"];
inline void ResourceRPCSubtype::clear_proto_service() {
  proto_service_.ClearToEmpty();
}
inline const std::string& ResourceRPCSubtype::proto_service() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceRPCSubtype.proto_service)
  return _internal_proto_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceRPCSubtype::set_proto_service(ArgT0&& arg0, ArgT... args) {
 
 proto_service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.ResourceRPCSubtype.proto_service)
}
inline std::string* ResourceRPCSubtype::mutable_proto_service() {
  std::string* _s = _internal_mutable_proto_service();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceRPCSubtype.proto_service)
  return _s;
}
inline const std::string& ResourceRPCSubtype::_internal_proto_service() const {
  return proto_service_.Get();
}
inline void ResourceRPCSubtype::_internal_set_proto_service(const std::string& value) {
  
  proto_service_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceRPCSubtype::_internal_mutable_proto_service() {
  
  return proto_service_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceRPCSubtype::release_proto_service() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ResourceRPCSubtype.proto_service)
  return proto_service_.Release();
}
inline void ResourceRPCSubtype::set_allocated_proto_service(std::string* proto_service) {
  if (proto_service != nullptr) {
    
  } else {
    
  }
  proto_service_.SetAllocated(proto_service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proto_service_.IsDefault()) {
    proto_service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ResourceRPCSubtype.proto_service)
}

// -------------------------------------------------------------------

// ResourceRPCSubtypesRequest

// -------------------------------------------------------------------

// ResourceRPCSubtypesResponse

// repeated .viam.robot.v1.ResourceRPCSubtype resource_rpc_subtypes = 1 [json_name = "resourceRpcSubtypes"];
inline int ResourceRPCSubtypesResponse::_internal_resource_rpc_subtypes_size() const {
  return resource_rpc_subtypes_.size();
}
inline int ResourceRPCSubtypesResponse::resource_rpc_subtypes_size() const {
  return _internal_resource_rpc_subtypes_size();
}
inline void ResourceRPCSubtypesResponse::clear_resource_rpc_subtypes() {
  resource_rpc_subtypes_.Clear();
}
inline ::viam::robot::v1::ResourceRPCSubtype* ResourceRPCSubtypesResponse::mutable_resource_rpc_subtypes(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceRPCSubtypesResponse.resource_rpc_subtypes)
  return resource_rpc_subtypes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceRPCSubtype >*
ResourceRPCSubtypesResponse::mutable_resource_rpc_subtypes() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.ResourceRPCSubtypesResponse.resource_rpc_subtypes)
  return &resource_rpc_subtypes_;
}
inline const ::viam::robot::v1::ResourceRPCSubtype& ResourceRPCSubtypesResponse::_internal_resource_rpc_subtypes(int index) const {
  return resource_rpc_subtypes_.Get(index);
}
inline const ::viam::robot::v1::ResourceRPCSubtype& ResourceRPCSubtypesResponse::resource_rpc_subtypes(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceRPCSubtypesResponse.resource_rpc_subtypes)
  return _internal_resource_rpc_subtypes(index);
}
inline ::viam::robot::v1::ResourceRPCSubtype* ResourceRPCSubtypesResponse::_internal_add_resource_rpc_subtypes() {
  return resource_rpc_subtypes_.Add();
}
inline ::viam::robot::v1::ResourceRPCSubtype* ResourceRPCSubtypesResponse::add_resource_rpc_subtypes() {
  ::viam::robot::v1::ResourceRPCSubtype* _add = _internal_add_resource_rpc_subtypes();
  // @@protoc_insertion_point(field_add:viam.robot.v1.ResourceRPCSubtypesResponse.resource_rpc_subtypes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceRPCSubtype >&
ResourceRPCSubtypesResponse::resource_rpc_subtypes() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.ResourceRPCSubtypesResponse.resource_rpc_subtypes)
  return resource_rpc_subtypes_;
}

// -------------------------------------------------------------------

// Operation

// string id = 1 [json_name = "id"];
inline void Operation::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Operation::id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Operation.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.Operation.id)
}
inline std::string* Operation::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Operation.id)
  return _s;
}
inline const std::string& Operation::_internal_id() const {
  return id_.Get();
}
inline void Operation::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Operation.id)
  return id_.Release();
}
inline void Operation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Operation.id)
}

// string method = 2 [json_name = "method"];
inline void Operation::clear_method() {
  method_.ClearToEmpty();
}
inline const std::string& Operation::method() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Operation.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_method(ArgT0&& arg0, ArgT... args) {
 
 method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.Operation.method)
}
inline std::string* Operation::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Operation.method)
  return _s;
}
inline const std::string& Operation::_internal_method() const {
  return method_.Get();
}
inline void Operation::_internal_set_method(const std::string& value) {
  
  method_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_method() {
  
  return method_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_method() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Operation.method)
  return method_.Release();
}
inline void Operation::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Operation.method)
}

// .google.protobuf.Struct arguments = 3 [json_name = "arguments"];
inline bool Operation::_internal_has_arguments() const {
  return this != internal_default_instance() && arguments_ != nullptr;
}
inline bool Operation::has_arguments() const {
  return _internal_has_arguments();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Operation::_internal_arguments() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = arguments_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Operation::arguments() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Operation.arguments)
  return _internal_arguments();
}
inline void Operation::unsafe_arena_set_allocated_arguments(
    ::PROTOBUF_NAMESPACE_ID::Struct* arguments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arguments_);
  }
  arguments_ = arguments;
  if (arguments) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Operation.arguments)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Operation::release_arguments() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = arguments_;
  arguments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Operation::unsafe_arena_release_arguments() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Operation.arguments)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = arguments_;
  arguments_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Operation::_internal_mutable_arguments() {
  
  if (arguments_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    arguments_ = p;
  }
  return arguments_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Operation::mutable_arguments() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_arguments();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Operation.arguments)
  return _msg;
}
inline void Operation::set_allocated_arguments(::PROTOBUF_NAMESPACE_ID::Struct* arguments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arguments_);
  }
  if (arguments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arguments));
    if (message_arena != submessage_arena) {
      arguments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arguments, submessage_arena);
    }
    
  } else {
    
  }
  arguments_ = arguments;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Operation.arguments)
}

// .google.protobuf.Timestamp started = 4 [json_name = "started"];
inline bool Operation::_internal_has_started() const {
  return this != internal_default_instance() && started_ != nullptr;
}
inline bool Operation::has_started() const {
  return _internal_has_started();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Operation::_internal_started() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = started_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Operation::started() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Operation.started)
  return _internal_started();
}
inline void Operation::unsafe_arena_set_allocated_started(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* started) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_);
  }
  started_ = started;
  if (started) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Operation.started)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::release_started() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = started_;
  started_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::unsafe_arena_release_started() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Operation.started)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = started_;
  started_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::_internal_mutable_started() {
  
  if (started_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    started_ = p;
  }
  return started_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::mutable_started() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_started();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Operation.started)
  return _msg;
}
inline void Operation::set_allocated_started(::PROTOBUF_NAMESPACE_ID::Timestamp* started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_);
  }
  if (started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started));
    if (message_arena != submessage_arena) {
      started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started, submessage_arena);
    }
    
  } else {
    
  }
  started_ = started;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Operation.started)
}

// optional string session_id = 5 [json_name = "sessionId"];
inline bool Operation::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Operation::has_session_id() const {
  return _internal_has_session_id();
}
inline void Operation::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Operation::session_id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Operation.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.Operation.session_id)
}
inline std::string* Operation::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Operation.session_id)
  return _s;
}
inline const std::string& Operation::_internal_session_id() const {
  return session_id_.Get();
}
inline void Operation::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_session_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Operation.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Operation::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Operation.session_id)
}

// -------------------------------------------------------------------

// GetOperationsRequest

// -------------------------------------------------------------------

// GetOperationsResponse

// repeated .viam.robot.v1.Operation operations = 1 [json_name = "operations"];
inline int GetOperationsResponse::_internal_operations_size() const {
  return operations_.size();
}
inline int GetOperationsResponse::operations_size() const {
  return _internal_operations_size();
}
inline void GetOperationsResponse::clear_operations() {
  operations_.Clear();
}
inline ::viam::robot::v1::Operation* GetOperationsResponse::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetOperationsResponse.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Operation >*
GetOperationsResponse::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.GetOperationsResponse.operations)
  return &operations_;
}
inline const ::viam::robot::v1::Operation& GetOperationsResponse::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::viam::robot::v1::Operation& GetOperationsResponse::operations(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetOperationsResponse.operations)
  return _internal_operations(index);
}
inline ::viam::robot::v1::Operation* GetOperationsResponse::_internal_add_operations() {
  return operations_.Add();
}
inline ::viam::robot::v1::Operation* GetOperationsResponse::add_operations() {
  ::viam::robot::v1::Operation* _add = _internal_add_operations();
  // @@protoc_insertion_point(field_add:viam.robot.v1.GetOperationsResponse.operations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Operation >&
GetOperationsResponse::operations() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.GetOperationsResponse.operations)
  return operations_;
}

// -------------------------------------------------------------------

// CancelOperationRequest

// string id = 1 [json_name = "id"];
inline void CancelOperationRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CancelOperationRequest::id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.CancelOperationRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelOperationRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.CancelOperationRequest.id)
}
inline std::string* CancelOperationRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.CancelOperationRequest.id)
  return _s;
}
inline const std::string& CancelOperationRequest::_internal_id() const {
  return id_.Get();
}
inline void CancelOperationRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelOperationRequest::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* CancelOperationRequest::release_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.CancelOperationRequest.id)
  return id_.Release();
}
inline void CancelOperationRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.CancelOperationRequest.id)
}

// -------------------------------------------------------------------

// CancelOperationResponse

// -------------------------------------------------------------------

// BlockForOperationRequest

// string id = 1 [json_name = "id"];
inline void BlockForOperationRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& BlockForOperationRequest::id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.BlockForOperationRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockForOperationRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.BlockForOperationRequest.id)
}
inline std::string* BlockForOperationRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.BlockForOperationRequest.id)
  return _s;
}
inline const std::string& BlockForOperationRequest::_internal_id() const {
  return id_.Get();
}
inline void BlockForOperationRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockForOperationRequest::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockForOperationRequest::release_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.BlockForOperationRequest.id)
  return id_.Release();
}
inline void BlockForOperationRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.BlockForOperationRequest.id)
}

// -------------------------------------------------------------------

// BlockForOperationResponse

// -------------------------------------------------------------------

// PeerConnectionInfo

// .viam.robot.v1.PeerConnectionType type = 1 [json_name = "type"];
inline void PeerConnectionInfo::clear_type() {
  type_ = 0;
}
inline ::viam::robot::v1::PeerConnectionType PeerConnectionInfo::_internal_type() const {
  return static_cast< ::viam::robot::v1::PeerConnectionType >(type_);
}
inline ::viam::robot::v1::PeerConnectionType PeerConnectionInfo::type() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.PeerConnectionInfo.type)
  return _internal_type();
}
inline void PeerConnectionInfo::_internal_set_type(::viam::robot::v1::PeerConnectionType value) {
  
  type_ = value;
}
inline void PeerConnectionInfo::set_type(::viam::robot::v1::PeerConnectionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:viam.robot.v1.PeerConnectionInfo.type)
}

// optional string remote_address = 2 [json_name = "remoteAddress"];
inline bool PeerConnectionInfo::_internal_has_remote_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PeerConnectionInfo::has_remote_address() const {
  return _internal_has_remote_address();
}
inline void PeerConnectionInfo::clear_remote_address() {
  remote_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PeerConnectionInfo::remote_address() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.PeerConnectionInfo.remote_address)
  return _internal_remote_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerConnectionInfo::set_remote_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 remote_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.PeerConnectionInfo.remote_address)
}
inline std::string* PeerConnectionInfo::mutable_remote_address() {
  std::string* _s = _internal_mutable_remote_address();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.PeerConnectionInfo.remote_address)
  return _s;
}
inline const std::string& PeerConnectionInfo::_internal_remote_address() const {
  return remote_address_.Get();
}
inline void PeerConnectionInfo::_internal_set_remote_address(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  remote_address_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerConnectionInfo::_internal_mutable_remote_address() {
  _has_bits_[0] |= 0x00000001u;
  return remote_address_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerConnectionInfo::release_remote_address() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.PeerConnectionInfo.remote_address)
  if (!_internal_has_remote_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = remote_address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_address_.IsDefault()) {
    remote_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PeerConnectionInfo::set_allocated_remote_address(std::string* remote_address) {
  if (remote_address != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  remote_address_.SetAllocated(remote_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (remote_address_.IsDefault()) {
    remote_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.PeerConnectionInfo.remote_address)
}

// optional string local_address = 3 [json_name = "localAddress"];
inline bool PeerConnectionInfo::_internal_has_local_address() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PeerConnectionInfo::has_local_address() const {
  return _internal_has_local_address();
}
inline void PeerConnectionInfo::clear_local_address() {
  local_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PeerConnectionInfo::local_address() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.PeerConnectionInfo.local_address)
  return _internal_local_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerConnectionInfo::set_local_address(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 local_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.PeerConnectionInfo.local_address)
}
inline std::string* PeerConnectionInfo::mutable_local_address() {
  std::string* _s = _internal_mutable_local_address();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.PeerConnectionInfo.local_address)
  return _s;
}
inline const std::string& PeerConnectionInfo::_internal_local_address() const {
  return local_address_.Get();
}
inline void PeerConnectionInfo::_internal_set_local_address(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  local_address_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerConnectionInfo::_internal_mutable_local_address() {
  _has_bits_[0] |= 0x00000002u;
  return local_address_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerConnectionInfo::release_local_address() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.PeerConnectionInfo.local_address)
  if (!_internal_has_local_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = local_address_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (local_address_.IsDefault()) {
    local_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PeerConnectionInfo::set_allocated_local_address(std::string* local_address) {
  if (local_address != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  local_address_.SetAllocated(local_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (local_address_.IsDefault()) {
    local_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.PeerConnectionInfo.local_address)
}

// -------------------------------------------------------------------

// Session

// string id = 1 [json_name = "id"];
inline void Session::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Session::id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Session.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.Session.id)
}
inline std::string* Session::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Session.id)
  return _s;
}
inline const std::string& Session::_internal_id() const {
  return id_.Get();
}
inline void Session::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* Session::release_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Session.id)
  return id_.Release();
}
inline void Session::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Session.id)
}

// optional .viam.robot.v1.PeerConnectionInfo peer_connection_info = 2 [json_name = "peerConnectionInfo"];
inline bool Session::_internal_has_peer_connection_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || peer_connection_info_ != nullptr);
  return value;
}
inline bool Session::has_peer_connection_info() const {
  return _internal_has_peer_connection_info();
}
inline void Session::clear_peer_connection_info() {
  if (peer_connection_info_ != nullptr) peer_connection_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::viam::robot::v1::PeerConnectionInfo& Session::_internal_peer_connection_info() const {
  const ::viam::robot::v1::PeerConnectionInfo* p = peer_connection_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::robot::v1::PeerConnectionInfo&>(
      ::viam::robot::v1::_PeerConnectionInfo_default_instance_);
}
inline const ::viam::robot::v1::PeerConnectionInfo& Session::peer_connection_info() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Session.peer_connection_info)
  return _internal_peer_connection_info();
}
inline void Session::unsafe_arena_set_allocated_peer_connection_info(
    ::viam::robot::v1::PeerConnectionInfo* peer_connection_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_connection_info_);
  }
  peer_connection_info_ = peer_connection_info;
  if (peer_connection_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Session.peer_connection_info)
}
inline ::viam::robot::v1::PeerConnectionInfo* Session::release_peer_connection_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::viam::robot::v1::PeerConnectionInfo* temp = peer_connection_info_;
  peer_connection_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::robot::v1::PeerConnectionInfo* Session::unsafe_arena_release_peer_connection_info() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Session.peer_connection_info)
  _has_bits_[0] &= ~0x00000001u;
  ::viam::robot::v1::PeerConnectionInfo* temp = peer_connection_info_;
  peer_connection_info_ = nullptr;
  return temp;
}
inline ::viam::robot::v1::PeerConnectionInfo* Session::_internal_mutable_peer_connection_info() {
  _has_bits_[0] |= 0x00000001u;
  if (peer_connection_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::robot::v1::PeerConnectionInfo>(GetArenaForAllocation());
    peer_connection_info_ = p;
  }
  return peer_connection_info_;
}
inline ::viam::robot::v1::PeerConnectionInfo* Session::mutable_peer_connection_info() {
  ::viam::robot::v1::PeerConnectionInfo* _msg = _internal_mutable_peer_connection_info();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Session.peer_connection_info)
  return _msg;
}
inline void Session::set_allocated_peer_connection_info(::viam::robot::v1::PeerConnectionInfo* peer_connection_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete peer_connection_info_;
  }
  if (peer_connection_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(peer_connection_info);
    if (message_arena != submessage_arena) {
      peer_connection_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_connection_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  peer_connection_info_ = peer_connection_info;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Session.peer_connection_info)
}

// -------------------------------------------------------------------

// GetSessionsRequest

// -------------------------------------------------------------------

// GetSessionsResponse

// repeated .viam.robot.v1.Session sessions = 1 [json_name = "sessions"];
inline int GetSessionsResponse::_internal_sessions_size() const {
  return sessions_.size();
}
inline int GetSessionsResponse::sessions_size() const {
  return _internal_sessions_size();
}
inline void GetSessionsResponse::clear_sessions() {
  sessions_.Clear();
}
inline ::viam::robot::v1::Session* GetSessionsResponse::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetSessionsResponse.sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Session >*
GetSessionsResponse::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.GetSessionsResponse.sessions)
  return &sessions_;
}
inline const ::viam::robot::v1::Session& GetSessionsResponse::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::viam::robot::v1::Session& GetSessionsResponse::sessions(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetSessionsResponse.sessions)
  return _internal_sessions(index);
}
inline ::viam::robot::v1::Session* GetSessionsResponse::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::viam::robot::v1::Session* GetSessionsResponse::add_sessions() {
  ::viam::robot::v1::Session* _add = _internal_add_sessions();
  // @@protoc_insertion_point(field_add:viam.robot.v1.GetSessionsResponse.sessions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Session >&
GetSessionsResponse::sessions() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.GetSessionsResponse.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// DiscoveryQuery

// string subtype = 1 [json_name = "subtype"];
inline void DiscoveryQuery::clear_subtype() {
  subtype_.ClearToEmpty();
}
inline const std::string& DiscoveryQuery::subtype() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.DiscoveryQuery.subtype)
  return _internal_subtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQuery::set_subtype(ArgT0&& arg0, ArgT... args) {
 
 subtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.DiscoveryQuery.subtype)
}
inline std::string* DiscoveryQuery::mutable_subtype() {
  std::string* _s = _internal_mutable_subtype();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.DiscoveryQuery.subtype)
  return _s;
}
inline const std::string& DiscoveryQuery::_internal_subtype() const {
  return subtype_.Get();
}
inline void DiscoveryQuery::_internal_set_subtype(const std::string& value) {
  
  subtype_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQuery::_internal_mutable_subtype() {
  
  return subtype_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQuery::release_subtype() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.DiscoveryQuery.subtype)
  return subtype_.Release();
}
inline void DiscoveryQuery::set_allocated_subtype(std::string* subtype) {
  if (subtype != nullptr) {
    
  } else {
    
  }
  subtype_.SetAllocated(subtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subtype_.IsDefault()) {
    subtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.DiscoveryQuery.subtype)
}

// string model = 2 [json_name = "model"];
inline void DiscoveryQuery::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& DiscoveryQuery::model() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.DiscoveryQuery.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQuery::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.DiscoveryQuery.model)
}
inline std::string* DiscoveryQuery::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.DiscoveryQuery.model)
  return _s;
}
inline const std::string& DiscoveryQuery::_internal_model() const {
  return model_.Get();
}
inline void DiscoveryQuery::_internal_set_model(const std::string& value) {
  
  model_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQuery::_internal_mutable_model() {
  
  return model_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQuery::release_model() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.DiscoveryQuery.model)
  return model_.Release();
}
inline void DiscoveryQuery::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault()) {
    model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.DiscoveryQuery.model)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool DiscoveryQuery::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool DiscoveryQuery::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& DiscoveryQuery::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& DiscoveryQuery::extra() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.DiscoveryQuery.extra)
  return _internal_extra();
}
inline void DiscoveryQuery::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.DiscoveryQuery.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* DiscoveryQuery::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* DiscoveryQuery::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.DiscoveryQuery.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* DiscoveryQuery::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* DiscoveryQuery::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.DiscoveryQuery.extra)
  return _msg;
}
inline void DiscoveryQuery::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.DiscoveryQuery.extra)
}

// -------------------------------------------------------------------

// Discovery

// .viam.robot.v1.DiscoveryQuery query = 1 [json_name = "query"];
inline bool Discovery::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool Discovery::has_query() const {
  return _internal_has_query();
}
inline void Discovery::clear_query() {
  if (GetArenaForAllocation() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
inline const ::viam::robot::v1::DiscoveryQuery& Discovery::_internal_query() const {
  const ::viam::robot::v1::DiscoveryQuery* p = query_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::robot::v1::DiscoveryQuery&>(
      ::viam::robot::v1::_DiscoveryQuery_default_instance_);
}
inline const ::viam::robot::v1::DiscoveryQuery& Discovery::query() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Discovery.query)
  return _internal_query();
}
inline void Discovery::unsafe_arena_set_allocated_query(
    ::viam::robot::v1::DiscoveryQuery* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Discovery.query)
}
inline ::viam::robot::v1::DiscoveryQuery* Discovery::release_query() {
  
  ::viam::robot::v1::DiscoveryQuery* temp = query_;
  query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::robot::v1::DiscoveryQuery* Discovery::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Discovery.query)
  
  ::viam::robot::v1::DiscoveryQuery* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::viam::robot::v1::DiscoveryQuery* Discovery::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::robot::v1::DiscoveryQuery>(GetArenaForAllocation());
    query_ = p;
  }
  return query_;
}
inline ::viam::robot::v1::DiscoveryQuery* Discovery::mutable_query() {
  ::viam::robot::v1::DiscoveryQuery* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Discovery.query)
  return _msg;
}
inline void Discovery::set_allocated_query(::viam::robot::v1::DiscoveryQuery* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Discovery.query)
}

// .google.protobuf.Struct results = 2 [json_name = "results"];
inline bool Discovery::_internal_has_results() const {
  return this != internal_default_instance() && results_ != nullptr;
}
inline bool Discovery::has_results() const {
  return _internal_has_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Discovery::_internal_results() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = results_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Discovery::results() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Discovery.results)
  return _internal_results();
}
inline void Discovery::unsafe_arena_set_allocated_results(
    ::PROTOBUF_NAMESPACE_ID::Struct* results) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  results_ = results;
  if (results) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Discovery.results)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Discovery::release_results() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = results_;
  results_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Discovery::unsafe_arena_release_results() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Discovery.results)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = results_;
  results_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Discovery::_internal_mutable_results() {
  
  if (results_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    results_ = p;
  }
  return results_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Discovery::mutable_results() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_results();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Discovery.results)
  return _msg;
}
inline void Discovery::set_allocated_results(::PROTOBUF_NAMESPACE_ID::Struct* results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  if (results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results));
    if (message_arena != submessage_arena) {
      results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results, submessage_arena);
    }
    
  } else {
    
  }
  results_ = results;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Discovery.results)
}

// -------------------------------------------------------------------

// ModuleModel

// string module_name = 1 [json_name = "moduleName"];
inline void ModuleModel::clear_module_name() {
  module_name_.ClearToEmpty();
}
inline const std::string& ModuleModel::module_name() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ModuleModel.module_name)
  return _internal_module_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleModel::set_module_name(ArgT0&& arg0, ArgT... args) {
 
 module_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.ModuleModel.module_name)
}
inline std::string* ModuleModel::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ModuleModel.module_name)
  return _s;
}
inline const std::string& ModuleModel::_internal_module_name() const {
  return module_name_.Get();
}
inline void ModuleModel::_internal_set_module_name(const std::string& value) {
  
  module_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleModel::_internal_mutable_module_name() {
  
  return module_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ModuleModel::release_module_name() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ModuleModel.module_name)
  return module_name_.Release();
}
inline void ModuleModel::set_allocated_module_name(std::string* module_name) {
  if (module_name != nullptr) {
    
  } else {
    
  }
  module_name_.SetAllocated(module_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (module_name_.IsDefault()) {
    module_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ModuleModel.module_name)
}

// string model = 2 [json_name = "model"];
inline void ModuleModel::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& ModuleModel::model() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ModuleModel.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleModel::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.ModuleModel.model)
}
inline std::string* ModuleModel::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ModuleModel.model)
  return _s;
}
inline const std::string& ModuleModel::_internal_model() const {
  return model_.Get();
}
inline void ModuleModel::_internal_set_model(const std::string& value) {
  
  model_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleModel::_internal_mutable_model() {
  
  return model_.Mutable(GetArenaForAllocation());
}
inline std::string* ModuleModel::release_model() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ModuleModel.model)
  return model_.Release();
}
inline void ModuleModel::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault()) {
    model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ModuleModel.model)
}

// string api = 3 [json_name = "api"];
inline void ModuleModel::clear_api() {
  api_.ClearToEmpty();
}
inline const std::string& ModuleModel::api() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ModuleModel.api)
  return _internal_api();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModuleModel::set_api(ArgT0&& arg0, ArgT... args) {
 
 api_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.ModuleModel.api)
}
inline std::string* ModuleModel::mutable_api() {
  std::string* _s = _internal_mutable_api();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ModuleModel.api)
  return _s;
}
inline const std::string& ModuleModel::_internal_api() const {
  return api_.Get();
}
inline void ModuleModel::_internal_set_api(const std::string& value) {
  
  api_.Set(value, GetArenaForAllocation());
}
inline std::string* ModuleModel::_internal_mutable_api() {
  
  return api_.Mutable(GetArenaForAllocation());
}
inline std::string* ModuleModel::release_api() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ModuleModel.api)
  return api_.Release();
}
inline void ModuleModel::set_allocated_api(std::string* api) {
  if (api != nullptr) {
    
  } else {
    
  }
  api_.SetAllocated(api, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (api_.IsDefault()) {
    api_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ModuleModel.api)
}

// bool from_local_module = 4 [json_name = "fromLocalModule"];
inline void ModuleModel::clear_from_local_module() {
  from_local_module_ = false;
}
inline bool ModuleModel::_internal_from_local_module() const {
  return from_local_module_;
}
inline bool ModuleModel::from_local_module() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ModuleModel.from_local_module)
  return _internal_from_local_module();
}
inline void ModuleModel::_internal_set_from_local_module(bool value) {
  
  from_local_module_ = value;
}
inline void ModuleModel::set_from_local_module(bool value) {
  _internal_set_from_local_module(value);
  // @@protoc_insertion_point(field_set:viam.robot.v1.ModuleModel.from_local_module)
}

// -------------------------------------------------------------------

// GetModelsFromModulesRequest

// -------------------------------------------------------------------

// GetModelsFromModulesResponse

// repeated .viam.robot.v1.ModuleModel models = 1 [json_name = "models"];
inline int GetModelsFromModulesResponse::_internal_models_size() const {
  return models_.size();
}
inline int GetModelsFromModulesResponse::models_size() const {
  return _internal_models_size();
}
inline void GetModelsFromModulesResponse::clear_models() {
  models_.Clear();
}
inline ::viam::robot::v1::ModuleModel* GetModelsFromModulesResponse::mutable_models(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetModelsFromModulesResponse.models)
  return models_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ModuleModel >*
GetModelsFromModulesResponse::mutable_models() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.GetModelsFromModulesResponse.models)
  return &models_;
}
inline const ::viam::robot::v1::ModuleModel& GetModelsFromModulesResponse::_internal_models(int index) const {
  return models_.Get(index);
}
inline const ::viam::robot::v1::ModuleModel& GetModelsFromModulesResponse::models(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetModelsFromModulesResponse.models)
  return _internal_models(index);
}
inline ::viam::robot::v1::ModuleModel* GetModelsFromModulesResponse::_internal_add_models() {
  return models_.Add();
}
inline ::viam::robot::v1::ModuleModel* GetModelsFromModulesResponse::add_models() {
  ::viam::robot::v1::ModuleModel* _add = _internal_add_models();
  // @@protoc_insertion_point(field_add:viam.robot.v1.GetModelsFromModulesResponse.models)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ModuleModel >&
GetModelsFromModulesResponse::models() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.GetModelsFromModulesResponse.models)
  return models_;
}

// -------------------------------------------------------------------

// DiscoverComponentsRequest

// repeated .viam.robot.v1.DiscoveryQuery queries = 1 [json_name = "queries"];
inline int DiscoverComponentsRequest::_internal_queries_size() const {
  return queries_.size();
}
inline int DiscoverComponentsRequest::queries_size() const {
  return _internal_queries_size();
}
inline void DiscoverComponentsRequest::clear_queries() {
  queries_.Clear();
}
inline ::viam::robot::v1::DiscoveryQuery* DiscoverComponentsRequest::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.DiscoverComponentsRequest.queries)
  return queries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::DiscoveryQuery >*
DiscoverComponentsRequest::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.DiscoverComponentsRequest.queries)
  return &queries_;
}
inline const ::viam::robot::v1::DiscoveryQuery& DiscoverComponentsRequest::_internal_queries(int index) const {
  return queries_.Get(index);
}
inline const ::viam::robot::v1::DiscoveryQuery& DiscoverComponentsRequest::queries(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.DiscoverComponentsRequest.queries)
  return _internal_queries(index);
}
inline ::viam::robot::v1::DiscoveryQuery* DiscoverComponentsRequest::_internal_add_queries() {
  return queries_.Add();
}
inline ::viam::robot::v1::DiscoveryQuery* DiscoverComponentsRequest::add_queries() {
  ::viam::robot::v1::DiscoveryQuery* _add = _internal_add_queries();
  // @@protoc_insertion_point(field_add:viam.robot.v1.DiscoverComponentsRequest.queries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::DiscoveryQuery >&
DiscoverComponentsRequest::queries() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.DiscoverComponentsRequest.queries)
  return queries_;
}

// -------------------------------------------------------------------

// DiscoverComponentsResponse

// repeated .viam.robot.v1.Discovery discovery = 1 [json_name = "discovery"];
inline int DiscoverComponentsResponse::_internal_discovery_size() const {
  return discovery_.size();
}
inline int DiscoverComponentsResponse::discovery_size() const {
  return _internal_discovery_size();
}
inline void DiscoverComponentsResponse::clear_discovery() {
  discovery_.Clear();
}
inline ::viam::robot::v1::Discovery* DiscoverComponentsResponse::mutable_discovery(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.DiscoverComponentsResponse.discovery)
  return discovery_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Discovery >*
DiscoverComponentsResponse::mutable_discovery() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.DiscoverComponentsResponse.discovery)
  return &discovery_;
}
inline const ::viam::robot::v1::Discovery& DiscoverComponentsResponse::_internal_discovery(int index) const {
  return discovery_.Get(index);
}
inline const ::viam::robot::v1::Discovery& DiscoverComponentsResponse::discovery(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.DiscoverComponentsResponse.discovery)
  return _internal_discovery(index);
}
inline ::viam::robot::v1::Discovery* DiscoverComponentsResponse::_internal_add_discovery() {
  return discovery_.Add();
}
inline ::viam::robot::v1::Discovery* DiscoverComponentsResponse::add_discovery() {
  ::viam::robot::v1::Discovery* _add = _internal_add_discovery();
  // @@protoc_insertion_point(field_add:viam.robot.v1.DiscoverComponentsResponse.discovery)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Discovery >&
DiscoverComponentsResponse::discovery() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.DiscoverComponentsResponse.discovery)
  return discovery_;
}

// -------------------------------------------------------------------

// Status

// .viam.common.v1.ResourceName name = 1 [json_name = "name"];
inline bool Status::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool Status::has_name() const {
  return _internal_has_name();
}
inline const ::viam::common::v1::ResourceName& Status::_internal_name() const {
  const ::viam::common::v1::ResourceName* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::ResourceName&>(
      ::viam::common::v1::_ResourceName_default_instance_);
}
inline const ::viam::common::v1::ResourceName& Status::name() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Status.name)
  return _internal_name();
}
inline void Status::unsafe_arena_set_allocated_name(
    ::viam::common::v1::ResourceName* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Status.name)
}
inline ::viam::common::v1::ResourceName* Status::release_name() {
  
  ::viam::common::v1::ResourceName* temp = name_;
  name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::ResourceName* Status::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Status.name)
  
  ::viam::common::v1::ResourceName* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::viam::common::v1::ResourceName* Status::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::ResourceName>(GetArenaForAllocation());
    name_ = p;
  }
  return name_;
}
inline ::viam::common::v1::ResourceName* Status::mutable_name() {
  ::viam::common::v1::ResourceName* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Status.name)
  return _msg;
}
inline void Status::set_allocated_name(::viam::common::v1::ResourceName* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name));
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Status.name)
}

// .google.protobuf.Struct status = 2 [json_name = "status"];
inline bool Status::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Status::has_status() const {
  return _internal_has_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Status::_internal_status() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Status::status() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Status.status)
  return _internal_status();
}
inline void Status::unsafe_arena_set_allocated_status(
    ::PROTOBUF_NAMESPACE_ID::Struct* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Status.status)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Status::release_status() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Status::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Status.status)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Status::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Status::mutable_status() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Status.status)
  return _msg;
}
inline void Status::set_allocated_status(::PROTOBUF_NAMESPACE_ID::Struct* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Status.status)
}

// .google.protobuf.Timestamp last_reconfigured = 3 [json_name = "lastReconfigured"];
inline bool Status::_internal_has_last_reconfigured() const {
  return this != internal_default_instance() && last_reconfigured_ != nullptr;
}
inline bool Status::has_last_reconfigured() const {
  return _internal_has_last_reconfigured();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Status::_internal_last_reconfigured() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = last_reconfigured_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Status::last_reconfigured() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Status.last_reconfigured)
  return _internal_last_reconfigured();
}
inline void Status::unsafe_arena_set_allocated_last_reconfigured(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_reconfigured) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_reconfigured_);
  }
  last_reconfigured_ = last_reconfigured;
  if (last_reconfigured) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Status.last_reconfigured)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Status::release_last_reconfigured() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_reconfigured_;
  last_reconfigured_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Status::unsafe_arena_release_last_reconfigured() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Status.last_reconfigured)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_reconfigured_;
  last_reconfigured_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Status::_internal_mutable_last_reconfigured() {
  
  if (last_reconfigured_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_reconfigured_ = p;
  }
  return last_reconfigured_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Status::mutable_last_reconfigured() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_reconfigured();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Status.last_reconfigured)
  return _msg;
}
inline void Status::set_allocated_last_reconfigured(::PROTOBUF_NAMESPACE_ID::Timestamp* last_reconfigured) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_reconfigured_);
  }
  if (last_reconfigured) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_reconfigured));
    if (message_arena != submessage_arena) {
      last_reconfigured = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_reconfigured, submessage_arena);
    }
    
  } else {
    
  }
  last_reconfigured_ = last_reconfigured;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Status.last_reconfigured)
}

// -------------------------------------------------------------------

// GetStatusRequest

// repeated .viam.common.v1.ResourceName resource_names = 1 [json_name = "resourceNames"];
inline int GetStatusRequest::_internal_resource_names_size() const {
  return resource_names_.size();
}
inline int GetStatusRequest::resource_names_size() const {
  return _internal_resource_names_size();
}
inline ::viam::common::v1::ResourceName* GetStatusRequest::mutable_resource_names(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetStatusRequest.resource_names)
  return resource_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
GetStatusRequest::mutable_resource_names() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.GetStatusRequest.resource_names)
  return &resource_names_;
}
inline const ::viam::common::v1::ResourceName& GetStatusRequest::_internal_resource_names(int index) const {
  return resource_names_.Get(index);
}
inline const ::viam::common::v1::ResourceName& GetStatusRequest::resource_names(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetStatusRequest.resource_names)
  return _internal_resource_names(index);
}
inline ::viam::common::v1::ResourceName* GetStatusRequest::_internal_add_resource_names() {
  return resource_names_.Add();
}
inline ::viam::common::v1::ResourceName* GetStatusRequest::add_resource_names() {
  ::viam::common::v1::ResourceName* _add = _internal_add_resource_names();
  // @@protoc_insertion_point(field_add:viam.robot.v1.GetStatusRequest.resource_names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
GetStatusRequest::resource_names() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.GetStatusRequest.resource_names)
  return resource_names_;
}

// -------------------------------------------------------------------

// GetStatusResponse

// repeated .viam.robot.v1.Status status = 1 [json_name = "status"];
inline int GetStatusResponse::_internal_status_size() const {
  return status_.size();
}
inline int GetStatusResponse::status_size() const {
  return _internal_status_size();
}
inline void GetStatusResponse::clear_status() {
  status_.Clear();
}
inline ::viam::robot::v1::Status* GetStatusResponse::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetStatusResponse.status)
  return status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >*
GetStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.GetStatusResponse.status)
  return &status_;
}
inline const ::viam::robot::v1::Status& GetStatusResponse::_internal_status(int index) const {
  return status_.Get(index);
}
inline const ::viam::robot::v1::Status& GetStatusResponse::status(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetStatusResponse.status)
  return _internal_status(index);
}
inline ::viam::robot::v1::Status* GetStatusResponse::_internal_add_status() {
  return status_.Add();
}
inline ::viam::robot::v1::Status* GetStatusResponse::add_status() {
  ::viam::robot::v1::Status* _add = _internal_add_status();
  // @@protoc_insertion_point(field_add:viam.robot.v1.GetStatusResponse.status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >&
GetStatusResponse::status() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.GetStatusResponse.status)
  return status_;
}

// -------------------------------------------------------------------

// StreamStatusRequest

// repeated .viam.common.v1.ResourceName resource_names = 1 [json_name = "resourceNames"];
inline int StreamStatusRequest::_internal_resource_names_size() const {
  return resource_names_.size();
}
inline int StreamStatusRequest::resource_names_size() const {
  return _internal_resource_names_size();
}
inline ::viam::common::v1::ResourceName* StreamStatusRequest::mutable_resource_names(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StreamStatusRequest.resource_names)
  return resource_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
StreamStatusRequest::mutable_resource_names() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.StreamStatusRequest.resource_names)
  return &resource_names_;
}
inline const ::viam::common::v1::ResourceName& StreamStatusRequest::_internal_resource_names(int index) const {
  return resource_names_.Get(index);
}
inline const ::viam::common::v1::ResourceName& StreamStatusRequest::resource_names(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StreamStatusRequest.resource_names)
  return _internal_resource_names(index);
}
inline ::viam::common::v1::ResourceName* StreamStatusRequest::_internal_add_resource_names() {
  return resource_names_.Add();
}
inline ::viam::common::v1::ResourceName* StreamStatusRequest::add_resource_names() {
  ::viam::common::v1::ResourceName* _add = _internal_add_resource_names();
  // @@protoc_insertion_point(field_add:viam.robot.v1.StreamStatusRequest.resource_names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
StreamStatusRequest::resource_names() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.StreamStatusRequest.resource_names)
  return resource_names_;
}

// .google.protobuf.Duration every = 2 [json_name = "every"];
inline bool StreamStatusRequest::_internal_has_every() const {
  return this != internal_default_instance() && every_ != nullptr;
}
inline bool StreamStatusRequest::has_every() const {
  return _internal_has_every();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamStatusRequest::_internal_every() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = every_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamStatusRequest::every() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StreamStatusRequest.every)
  return _internal_every();
}
inline void StreamStatusRequest::unsafe_arena_set_allocated_every(
    ::PROTOBUF_NAMESPACE_ID::Duration* every) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(every_);
  }
  every_ = every;
  if (every) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.StreamStatusRequest.every)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamStatusRequest::release_every() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = every_;
  every_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamStatusRequest::unsafe_arena_release_every() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.StreamStatusRequest.every)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = every_;
  every_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamStatusRequest::_internal_mutable_every() {
  
  if (every_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    every_ = p;
  }
  return every_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamStatusRequest::mutable_every() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_every();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StreamStatusRequest.every)
  return _msg;
}
inline void StreamStatusRequest::set_allocated_every(::PROTOBUF_NAMESPACE_ID::Duration* every) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(every_);
  }
  if (every) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(every));
    if (message_arena != submessage_arena) {
      every = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, every, submessage_arena);
    }
    
  } else {
    
  }
  every_ = every;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.StreamStatusRequest.every)
}

// -------------------------------------------------------------------

// StreamStatusResponse

// repeated .viam.robot.v1.Status status = 1 [json_name = "status"];
inline int StreamStatusResponse::_internal_status_size() const {
  return status_.size();
}
inline int StreamStatusResponse::status_size() const {
  return _internal_status_size();
}
inline void StreamStatusResponse::clear_status() {
  status_.Clear();
}
inline ::viam::robot::v1::Status* StreamStatusResponse::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StreamStatusResponse.status)
  return status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >*
StreamStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.StreamStatusResponse.status)
  return &status_;
}
inline const ::viam::robot::v1::Status& StreamStatusResponse::_internal_status(int index) const {
  return status_.Get(index);
}
inline const ::viam::robot::v1::Status& StreamStatusResponse::status(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StreamStatusResponse.status)
  return _internal_status(index);
}
inline ::viam::robot::v1::Status* StreamStatusResponse::_internal_add_status() {
  return status_.Add();
}
inline ::viam::robot::v1::Status* StreamStatusResponse::add_status() {
  ::viam::robot::v1::Status* _add = _internal_add_status();
  // @@protoc_insertion_point(field_add:viam.robot.v1.StreamStatusResponse.status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >&
StreamStatusResponse::status() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.StreamStatusResponse.status)
  return status_;
}

// -------------------------------------------------------------------

// StopExtraParameters

// .viam.common.v1.ResourceName name = 1 [json_name = "name"];
inline bool StopExtraParameters::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool StopExtraParameters::has_name() const {
  return _internal_has_name();
}
inline const ::viam::common::v1::ResourceName& StopExtraParameters::_internal_name() const {
  const ::viam::common::v1::ResourceName* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::ResourceName&>(
      ::viam::common::v1::_ResourceName_default_instance_);
}
inline const ::viam::common::v1::ResourceName& StopExtraParameters::name() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StopExtraParameters.name)
  return _internal_name();
}
inline void StopExtraParameters::unsafe_arena_set_allocated_name(
    ::viam::common::v1::ResourceName* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.StopExtraParameters.name)
}
inline ::viam::common::v1::ResourceName* StopExtraParameters::release_name() {
  
  ::viam::common::v1::ResourceName* temp = name_;
  name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::ResourceName* StopExtraParameters::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.StopExtraParameters.name)
  
  ::viam::common::v1::ResourceName* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::viam::common::v1::ResourceName* StopExtraParameters::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::ResourceName>(GetArenaForAllocation());
    name_ = p;
  }
  return name_;
}
inline ::viam::common::v1::ResourceName* StopExtraParameters::mutable_name() {
  ::viam::common::v1::ResourceName* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StopExtraParameters.name)
  return _msg;
}
inline void StopExtraParameters::set_allocated_name(::viam::common::v1::ResourceName* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name));
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.StopExtraParameters.name)
}

// .google.protobuf.Struct params = 2 [json_name = "params"];
inline bool StopExtraParameters::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool StopExtraParameters::has_params() const {
  return _internal_has_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StopExtraParameters::_internal_params() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = params_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StopExtraParameters::params() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StopExtraParameters.params)
  return _internal_params();
}
inline void StopExtraParameters::unsafe_arena_set_allocated_params(
    ::PROTOBUF_NAMESPACE_ID::Struct* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.StopExtraParameters.params)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopExtraParameters::release_params() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = params_;
  params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopExtraParameters::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.StopExtraParameters.params)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopExtraParameters::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    params_ = p;
  }
  return params_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopExtraParameters::mutable_params() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StopExtraParameters.params)
  return _msg;
}
inline void StopExtraParameters::set_allocated_params(::PROTOBUF_NAMESPACE_ID::Struct* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.StopExtraParameters.params)
}

// -------------------------------------------------------------------

// StopAllRequest

// repeated .viam.robot.v1.StopExtraParameters extra = 99 [json_name = "extra"];
inline int StopAllRequest::_internal_extra_size() const {
  return extra_.size();
}
inline int StopAllRequest::extra_size() const {
  return _internal_extra_size();
}
inline void StopAllRequest::clear_extra() {
  extra_.Clear();
}
inline ::viam::robot::v1::StopExtraParameters* StopAllRequest::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StopAllRequest.extra)
  return extra_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::StopExtraParameters >*
StopAllRequest::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.StopAllRequest.extra)
  return &extra_;
}
inline const ::viam::robot::v1::StopExtraParameters& StopAllRequest::_internal_extra(int index) const {
  return extra_.Get(index);
}
inline const ::viam::robot::v1::StopExtraParameters& StopAllRequest::extra(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StopAllRequest.extra)
  return _internal_extra(index);
}
inline ::viam::robot::v1::StopExtraParameters* StopAllRequest::_internal_add_extra() {
  return extra_.Add();
}
inline ::viam::robot::v1::StopExtraParameters* StopAllRequest::add_extra() {
  ::viam::robot::v1::StopExtraParameters* _add = _internal_add_extra();
  // @@protoc_insertion_point(field_add:viam.robot.v1.StopAllRequest.extra)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::StopExtraParameters >&
StopAllRequest::extra() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.StopAllRequest.extra)
  return extra_;
}

// -------------------------------------------------------------------

// StopAllResponse

// -------------------------------------------------------------------

// StartSessionRequest

// string resume = 1 [json_name = "resume"];
inline void StartSessionRequest::clear_resume() {
  resume_.ClearToEmpty();
}
inline const std::string& StartSessionRequest::resume() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StartSessionRequest.resume)
  return _internal_resume();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartSessionRequest::set_resume(ArgT0&& arg0, ArgT... args) {
 
 resume_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.StartSessionRequest.resume)
}
inline std::string* StartSessionRequest::mutable_resume() {
  std::string* _s = _internal_mutable_resume();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StartSessionRequest.resume)
  return _s;
}
inline const std::string& StartSessionRequest::_internal_resume() const {
  return resume_.Get();
}
inline void StartSessionRequest::_internal_set_resume(const std::string& value) {
  
  resume_.Set(value, GetArenaForAllocation());
}
inline std::string* StartSessionRequest::_internal_mutable_resume() {
  
  return resume_.Mutable(GetArenaForAllocation());
}
inline std::string* StartSessionRequest::release_resume() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.StartSessionRequest.resume)
  return resume_.Release();
}
inline void StartSessionRequest::set_allocated_resume(std::string* resume) {
  if (resume != nullptr) {
    
  } else {
    
  }
  resume_.SetAllocated(resume, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (resume_.IsDefault()) {
    resume_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.StartSessionRequest.resume)
}

// -------------------------------------------------------------------

// StartSessionResponse

// string id = 1 [json_name = "id"];
inline void StartSessionResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& StartSessionResponse::id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StartSessionResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StartSessionResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.StartSessionResponse.id)
}
inline std::string* StartSessionResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StartSessionResponse.id)
  return _s;
}
inline const std::string& StartSessionResponse::_internal_id() const {
  return id_.Get();
}
inline void StartSessionResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* StartSessionResponse::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* StartSessionResponse::release_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.StartSessionResponse.id)
  return id_.Release();
}
inline void StartSessionResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.StartSessionResponse.id)
}

// .google.protobuf.Duration heartbeat_window = 2 [json_name = "heartbeatWindow"];
inline bool StartSessionResponse::_internal_has_heartbeat_window() const {
  return this != internal_default_instance() && heartbeat_window_ != nullptr;
}
inline bool StartSessionResponse::has_heartbeat_window() const {
  return _internal_has_heartbeat_window();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StartSessionResponse::_internal_heartbeat_window() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = heartbeat_window_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StartSessionResponse::heartbeat_window() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StartSessionResponse.heartbeat_window)
  return _internal_heartbeat_window();
}
inline void StartSessionResponse::unsafe_arena_set_allocated_heartbeat_window(
    ::PROTOBUF_NAMESPACE_ID::Duration* heartbeat_window) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartbeat_window_);
  }
  heartbeat_window_ = heartbeat_window;
  if (heartbeat_window) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.StartSessionResponse.heartbeat_window)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StartSessionResponse::release_heartbeat_window() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = heartbeat_window_;
  heartbeat_window_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StartSessionResponse::unsafe_arena_release_heartbeat_window() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.StartSessionResponse.heartbeat_window)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = heartbeat_window_;
  heartbeat_window_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StartSessionResponse::_internal_mutable_heartbeat_window() {
  
  if (heartbeat_window_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    heartbeat_window_ = p;
  }
  return heartbeat_window_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StartSessionResponse::mutable_heartbeat_window() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_heartbeat_window();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StartSessionResponse.heartbeat_window)
  return _msg;
}
inline void StartSessionResponse::set_allocated_heartbeat_window(::PROTOBUF_NAMESPACE_ID::Duration* heartbeat_window) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartbeat_window_);
  }
  if (heartbeat_window) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heartbeat_window));
    if (message_arena != submessage_arena) {
      heartbeat_window = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat_window, submessage_arena);
    }
    
  } else {
    
  }
  heartbeat_window_ = heartbeat_window;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.StartSessionResponse.heartbeat_window)
}

// -------------------------------------------------------------------

// SendSessionHeartbeatRequest

// string id = 1 [json_name = "id"];
inline void SendSessionHeartbeatRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& SendSessionHeartbeatRequest::id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.SendSessionHeartbeatRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendSessionHeartbeatRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.SendSessionHeartbeatRequest.id)
}
inline std::string* SendSessionHeartbeatRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.SendSessionHeartbeatRequest.id)
  return _s;
}
inline const std::string& SendSessionHeartbeatRequest::_internal_id() const {
  return id_.Get();
}
inline void SendSessionHeartbeatRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* SendSessionHeartbeatRequest::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* SendSessionHeartbeatRequest::release_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.SendSessionHeartbeatRequest.id)
  return id_.Release();
}
inline void SendSessionHeartbeatRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.SendSessionHeartbeatRequest.id)
}

// -------------------------------------------------------------------

// SendSessionHeartbeatResponse

// -------------------------------------------------------------------

// LogRequest

// repeated .viam.common.v1.LogEntry logs = 1 [json_name = "logs"];
inline int LogRequest::_internal_logs_size() const {
  return logs_.size();
}
inline int LogRequest::logs_size() const {
  return _internal_logs_size();
}
inline ::viam::common::v1::LogEntry* LogRequest::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.LogRequest.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::LogEntry >*
LogRequest::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.LogRequest.logs)
  return &logs_;
}
inline const ::viam::common::v1::LogEntry& LogRequest::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::viam::common::v1::LogEntry& LogRequest::logs(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.LogRequest.logs)
  return _internal_logs(index);
}
inline ::viam::common::v1::LogEntry* LogRequest::_internal_add_logs() {
  return logs_.Add();
}
inline ::viam::common::v1::LogEntry* LogRequest::add_logs() {
  ::viam::common::v1::LogEntry* _add = _internal_add_logs();
  // @@protoc_insertion_point(field_add:viam.robot.v1.LogRequest.logs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::LogEntry >&
LogRequest::logs() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.LogRequest.logs)
  return logs_;
}

// -------------------------------------------------------------------

// LogResponse

// -------------------------------------------------------------------

// GetCloudMetadataRequest

// -------------------------------------------------------------------

// GetCloudMetadataResponse

// string robot_part_id = 1 [json_name = "robotPartId", deprecated = true];
inline void GetCloudMetadataResponse::clear_robot_part_id() {
  robot_part_id_.ClearToEmpty();
}
inline const std::string& GetCloudMetadataResponse::robot_part_id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetCloudMetadataResponse.robot_part_id)
  return _internal_robot_part_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCloudMetadataResponse::set_robot_part_id(ArgT0&& arg0, ArgT... args) {
 
 robot_part_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.GetCloudMetadataResponse.robot_part_id)
}
inline std::string* GetCloudMetadataResponse::mutable_robot_part_id() {
  std::string* _s = _internal_mutable_robot_part_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetCloudMetadataResponse.robot_part_id)
  return _s;
}
inline const std::string& GetCloudMetadataResponse::_internal_robot_part_id() const {
  return robot_part_id_.Get();
}
inline void GetCloudMetadataResponse::_internal_set_robot_part_id(const std::string& value) {
  
  robot_part_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCloudMetadataResponse::_internal_mutable_robot_part_id() {
  
  return robot_part_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCloudMetadataResponse::release_robot_part_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.GetCloudMetadataResponse.robot_part_id)
  return robot_part_id_.Release();
}
inline void GetCloudMetadataResponse::set_allocated_robot_part_id(std::string* robot_part_id) {
  if (robot_part_id != nullptr) {
    
  } else {
    
  }
  robot_part_id_.SetAllocated(robot_part_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_part_id_.IsDefault()) {
    robot_part_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.GetCloudMetadataResponse.robot_part_id)
}

// string primary_org_id = 2 [json_name = "primaryOrgId"];
inline void GetCloudMetadataResponse::clear_primary_org_id() {
  primary_org_id_.ClearToEmpty();
}
inline const std::string& GetCloudMetadataResponse::primary_org_id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetCloudMetadataResponse.primary_org_id)
  return _internal_primary_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCloudMetadataResponse::set_primary_org_id(ArgT0&& arg0, ArgT... args) {
 
 primary_org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.GetCloudMetadataResponse.primary_org_id)
}
inline std::string* GetCloudMetadataResponse::mutable_primary_org_id() {
  std::string* _s = _internal_mutable_primary_org_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetCloudMetadataResponse.primary_org_id)
  return _s;
}
inline const std::string& GetCloudMetadataResponse::_internal_primary_org_id() const {
  return primary_org_id_.Get();
}
inline void GetCloudMetadataResponse::_internal_set_primary_org_id(const std::string& value) {
  
  primary_org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCloudMetadataResponse::_internal_mutable_primary_org_id() {
  
  return primary_org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCloudMetadataResponse::release_primary_org_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.GetCloudMetadataResponse.primary_org_id)
  return primary_org_id_.Release();
}
inline void GetCloudMetadataResponse::set_allocated_primary_org_id(std::string* primary_org_id) {
  if (primary_org_id != nullptr) {
    
  } else {
    
  }
  primary_org_id_.SetAllocated(primary_org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (primary_org_id_.IsDefault()) {
    primary_org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.GetCloudMetadataResponse.primary_org_id)
}

// string location_id = 3 [json_name = "locationId"];
inline void GetCloudMetadataResponse::clear_location_id() {
  location_id_.ClearToEmpty();
}
inline const std::string& GetCloudMetadataResponse::location_id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetCloudMetadataResponse.location_id)
  return _internal_location_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCloudMetadataResponse::set_location_id(ArgT0&& arg0, ArgT... args) {
 
 location_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.GetCloudMetadataResponse.location_id)
}
inline std::string* GetCloudMetadataResponse::mutable_location_id() {
  std::string* _s = _internal_mutable_location_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetCloudMetadataResponse.location_id)
  return _s;
}
inline const std::string& GetCloudMetadataResponse::_internal_location_id() const {
  return location_id_.Get();
}
inline void GetCloudMetadataResponse::_internal_set_location_id(const std::string& value) {
  
  location_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCloudMetadataResponse::_internal_mutable_location_id() {
  
  return location_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCloudMetadataResponse::release_location_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.GetCloudMetadataResponse.location_id)
  return location_id_.Release();
}
inline void GetCloudMetadataResponse::set_allocated_location_id(std::string* location_id) {
  if (location_id != nullptr) {
    
  } else {
    
  }
  location_id_.SetAllocated(location_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (location_id_.IsDefault()) {
    location_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.GetCloudMetadataResponse.location_id)
}

// string machine_id = 4 [json_name = "machineId"];
inline void GetCloudMetadataResponse::clear_machine_id() {
  machine_id_.ClearToEmpty();
}
inline const std::string& GetCloudMetadataResponse::machine_id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetCloudMetadataResponse.machine_id)
  return _internal_machine_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCloudMetadataResponse::set_machine_id(ArgT0&& arg0, ArgT... args) {
 
 machine_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.GetCloudMetadataResponse.machine_id)
}
inline std::string* GetCloudMetadataResponse::mutable_machine_id() {
  std::string* _s = _internal_mutable_machine_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetCloudMetadataResponse.machine_id)
  return _s;
}
inline const std::string& GetCloudMetadataResponse::_internal_machine_id() const {
  return machine_id_.Get();
}
inline void GetCloudMetadataResponse::_internal_set_machine_id(const std::string& value) {
  
  machine_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCloudMetadataResponse::_internal_mutable_machine_id() {
  
  return machine_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCloudMetadataResponse::release_machine_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.GetCloudMetadataResponse.machine_id)
  return machine_id_.Release();
}
inline void GetCloudMetadataResponse::set_allocated_machine_id(std::string* machine_id) {
  if (machine_id != nullptr) {
    
  } else {
    
  }
  machine_id_.SetAllocated(machine_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_id_.IsDefault()) {
    machine_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.GetCloudMetadataResponse.machine_id)
}

// string machine_part_id = 5 [json_name = "machinePartId"];
inline void GetCloudMetadataResponse::clear_machine_part_id() {
  machine_part_id_.ClearToEmpty();
}
inline const std::string& GetCloudMetadataResponse::machine_part_id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetCloudMetadataResponse.machine_part_id)
  return _internal_machine_part_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCloudMetadataResponse::set_machine_part_id(ArgT0&& arg0, ArgT... args) {
 
 machine_part_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.GetCloudMetadataResponse.machine_part_id)
}
inline std::string* GetCloudMetadataResponse::mutable_machine_part_id() {
  std::string* _s = _internal_mutable_machine_part_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetCloudMetadataResponse.machine_part_id)
  return _s;
}
inline const std::string& GetCloudMetadataResponse::_internal_machine_part_id() const {
  return machine_part_id_.Get();
}
inline void GetCloudMetadataResponse::_internal_set_machine_part_id(const std::string& value) {
  
  machine_part_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCloudMetadataResponse::_internal_mutable_machine_part_id() {
  
  return machine_part_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCloudMetadataResponse::release_machine_part_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.GetCloudMetadataResponse.machine_part_id)
  return machine_part_id_.Release();
}
inline void GetCloudMetadataResponse::set_allocated_machine_part_id(std::string* machine_part_id) {
  if (machine_part_id != nullptr) {
    
  } else {
    
  }
  machine_part_id_.SetAllocated(machine_part_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (machine_part_id_.IsDefault()) {
    machine_part_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.GetCloudMetadataResponse.machine_part_id)
}

// -------------------------------------------------------------------

// RestartModuleRequest

// string module_id = 1 [json_name = "moduleId"];
inline bool RestartModuleRequest::_internal_has_module_id() const {
  return id_or_name_case() == kModuleId;
}
inline bool RestartModuleRequest::has_module_id() const {
  return _internal_has_module_id();
}
inline void RestartModuleRequest::set_has_module_id() {
  _oneof_case_[0] = kModuleId;
}
inline void RestartModuleRequest::clear_module_id() {
  if (_internal_has_module_id()) {
    id_or_name_.module_id_.Destroy();
    clear_has_id_or_name();
  }
}
inline const std::string& RestartModuleRequest::module_id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.RestartModuleRequest.module_id)
  return _internal_module_id();
}
template <typename ArgT0, typename... ArgT>
inline void RestartModuleRequest::set_module_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_module_id()) {
    clear_id_or_name();
    set_has_module_id();
    id_or_name_.module_id_.InitDefault();
  }
  id_or_name_.module_id_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.RestartModuleRequest.module_id)
}
inline std::string* RestartModuleRequest::mutable_module_id() {
  std::string* _s = _internal_mutable_module_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.RestartModuleRequest.module_id)
  return _s;
}
inline const std::string& RestartModuleRequest::_internal_module_id() const {
  if (_internal_has_module_id()) {
    return id_or_name_.module_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RestartModuleRequest::_internal_set_module_id(const std::string& value) {
  if (!_internal_has_module_id()) {
    clear_id_or_name();
    set_has_module_id();
    id_or_name_.module_id_.InitDefault();
  }
  id_or_name_.module_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RestartModuleRequest::_internal_mutable_module_id() {
  if (!_internal_has_module_id()) {
    clear_id_or_name();
    set_has_module_id();
    id_or_name_.module_id_.InitDefault();
  }
  return id_or_name_.module_id_.Mutable(      GetArenaForAllocation());
}
inline std::string* RestartModuleRequest::release_module_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.RestartModuleRequest.module_id)
  if (_internal_has_module_id()) {
    clear_has_id_or_name();
    return id_or_name_.module_id_.Release();
  } else {
    return nullptr;
  }
}
inline void RestartModuleRequest::set_allocated_module_id(std::string* module_id) {
  if (has_id_or_name()) {
    clear_id_or_name();
  }
  if (module_id != nullptr) {
    set_has_module_id();
    id_or_name_.module_id_.InitAllocated(module_id, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.RestartModuleRequest.module_id)
}

// string module_name = 2 [json_name = "moduleName"];
inline bool RestartModuleRequest::_internal_has_module_name() const {
  return id_or_name_case() == kModuleName;
}
inline bool RestartModuleRequest::has_module_name() const {
  return _internal_has_module_name();
}
inline void RestartModuleRequest::set_has_module_name() {
  _oneof_case_[0] = kModuleName;
}
inline void RestartModuleRequest::clear_module_name() {
  if (_internal_has_module_name()) {
    id_or_name_.module_name_.Destroy();
    clear_has_id_or_name();
  }
}
inline const std::string& RestartModuleRequest::module_name() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.RestartModuleRequest.module_name)
  return _internal_module_name();
}
template <typename ArgT0, typename... ArgT>
inline void RestartModuleRequest::set_module_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_module_name()) {
    clear_id_or_name();
    set_has_module_name();
    id_or_name_.module_name_.InitDefault();
  }
  id_or_name_.module_name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.RestartModuleRequest.module_name)
}
inline std::string* RestartModuleRequest::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.RestartModuleRequest.module_name)
  return _s;
}
inline const std::string& RestartModuleRequest::_internal_module_name() const {
  if (_internal_has_module_name()) {
    return id_or_name_.module_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RestartModuleRequest::_internal_set_module_name(const std::string& value) {
  if (!_internal_has_module_name()) {
    clear_id_or_name();
    set_has_module_name();
    id_or_name_.module_name_.InitDefault();
  }
  id_or_name_.module_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RestartModuleRequest::_internal_mutable_module_name() {
  if (!_internal_has_module_name()) {
    clear_id_or_name();
    set_has_module_name();
    id_or_name_.module_name_.InitDefault();
  }
  return id_or_name_.module_name_.Mutable(      GetArenaForAllocation());
}
inline std::string* RestartModuleRequest::release_module_name() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.RestartModuleRequest.module_name)
  if (_internal_has_module_name()) {
    clear_has_id_or_name();
    return id_or_name_.module_name_.Release();
  } else {
    return nullptr;
  }
}
inline void RestartModuleRequest::set_allocated_module_name(std::string* module_name) {
  if (has_id_or_name()) {
    clear_id_or_name();
  }
  if (module_name != nullptr) {
    set_has_module_name();
    id_or_name_.module_name_.InitAllocated(module_name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.RestartModuleRequest.module_name)
}

inline bool RestartModuleRequest::has_id_or_name() const {
  return id_or_name_case() != ID_OR_NAME_NOT_SET;
}
inline void RestartModuleRequest::clear_has_id_or_name() {
  _oneof_case_[0] = ID_OR_NAME_NOT_SET;
}
inline RestartModuleRequest::IdOrNameCase RestartModuleRequest::id_or_name_case() const {
  return RestartModuleRequest::IdOrNameCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RestartModuleResponse

// -------------------------------------------------------------------

// ShutdownRequest

// -------------------------------------------------------------------

// ShutdownResponse

// -------------------------------------------------------------------

// GetMachineStatusRequest

// -------------------------------------------------------------------

// GetMachineStatusResponse

// repeated .viam.robot.v1.ResourceStatus resources = 1 [json_name = "resources"];
inline int GetMachineStatusResponse::_internal_resources_size() const {
  return resources_.size();
}
inline int GetMachineStatusResponse::resources_size() const {
  return _internal_resources_size();
}
inline void GetMachineStatusResponse::clear_resources() {
  resources_.Clear();
}
inline ::viam::robot::v1::ResourceStatus* GetMachineStatusResponse::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetMachineStatusResponse.resources)
  return resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceStatus >*
GetMachineStatusResponse::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.GetMachineStatusResponse.resources)
  return &resources_;
}
inline const ::viam::robot::v1::ResourceStatus& GetMachineStatusResponse::_internal_resources(int index) const {
  return resources_.Get(index);
}
inline const ::viam::robot::v1::ResourceStatus& GetMachineStatusResponse::resources(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetMachineStatusResponse.resources)
  return _internal_resources(index);
}
inline ::viam::robot::v1::ResourceStatus* GetMachineStatusResponse::_internal_add_resources() {
  return resources_.Add();
}
inline ::viam::robot::v1::ResourceStatus* GetMachineStatusResponse::add_resources() {
  ::viam::robot::v1::ResourceStatus* _add = _internal_add_resources();
  // @@protoc_insertion_point(field_add:viam.robot.v1.GetMachineStatusResponse.resources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceStatus >&
GetMachineStatusResponse::resources() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.GetMachineStatusResponse.resources)
  return resources_;
}

// .viam.robot.v1.ConfigStatus config = 2 [json_name = "config"];
inline bool GetMachineStatusResponse::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool GetMachineStatusResponse::has_config() const {
  return _internal_has_config();
}
inline void GetMachineStatusResponse::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::viam::robot::v1::ConfigStatus& GetMachineStatusResponse::_internal_config() const {
  const ::viam::robot::v1::ConfigStatus* p = config_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::robot::v1::ConfigStatus&>(
      ::viam::robot::v1::_ConfigStatus_default_instance_);
}
inline const ::viam::robot::v1::ConfigStatus& GetMachineStatusResponse::config() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetMachineStatusResponse.config)
  return _internal_config();
}
inline void GetMachineStatusResponse::unsafe_arena_set_allocated_config(
    ::viam::robot::v1::ConfigStatus* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.GetMachineStatusResponse.config)
}
inline ::viam::robot::v1::ConfigStatus* GetMachineStatusResponse::release_config() {
  
  ::viam::robot::v1::ConfigStatus* temp = config_;
  config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::robot::v1::ConfigStatus* GetMachineStatusResponse::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.GetMachineStatusResponse.config)
  
  ::viam::robot::v1::ConfigStatus* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::viam::robot::v1::ConfigStatus* GetMachineStatusResponse::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::robot::v1::ConfigStatus>(GetArenaForAllocation());
    config_ = p;
  }
  return config_;
}
inline ::viam::robot::v1::ConfigStatus* GetMachineStatusResponse::mutable_config() {
  ::viam::robot::v1::ConfigStatus* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetMachineStatusResponse.config)
  return _msg;
}
inline void GetMachineStatusResponse::set_allocated_config(::viam::robot::v1::ConfigStatus* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.GetMachineStatusResponse.config)
}

// .viam.robot.v1.GetMachineStatusResponse.State state = 3 [json_name = "state"];
inline void GetMachineStatusResponse::clear_state() {
  state_ = 0;
}
inline ::viam::robot::v1::GetMachineStatusResponse_State GetMachineStatusResponse::_internal_state() const {
  return static_cast< ::viam::robot::v1::GetMachineStatusResponse_State >(state_);
}
inline ::viam::robot::v1::GetMachineStatusResponse_State GetMachineStatusResponse::state() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetMachineStatusResponse.state)
  return _internal_state();
}
inline void GetMachineStatusResponse::_internal_set_state(::viam::robot::v1::GetMachineStatusResponse_State value) {
  
  state_ = value;
}
inline void GetMachineStatusResponse::set_state(::viam::robot::v1::GetMachineStatusResponse_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:viam.robot.v1.GetMachineStatusResponse.state)
}

// -------------------------------------------------------------------

// ResourceStatus

// .viam.common.v1.ResourceName name = 1 [json_name = "name"];
inline bool ResourceStatus::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool ResourceStatus::has_name() const {
  return _internal_has_name();
}
inline const ::viam::common::v1::ResourceName& ResourceStatus::_internal_name() const {
  const ::viam::common::v1::ResourceName* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::ResourceName&>(
      ::viam::common::v1::_ResourceName_default_instance_);
}
inline const ::viam::common::v1::ResourceName& ResourceStatus::name() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceStatus.name)
  return _internal_name();
}
inline void ResourceStatus::unsafe_arena_set_allocated_name(
    ::viam::common::v1::ResourceName* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.ResourceStatus.name)
}
inline ::viam::common::v1::ResourceName* ResourceStatus::release_name() {
  
  ::viam::common::v1::ResourceName* temp = name_;
  name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::ResourceName* ResourceStatus::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ResourceStatus.name)
  
  ::viam::common::v1::ResourceName* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::viam::common::v1::ResourceName* ResourceStatus::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::ResourceName>(GetArenaForAllocation());
    name_ = p;
  }
  return name_;
}
inline ::viam::common::v1::ResourceName* ResourceStatus::mutable_name() {
  ::viam::common::v1::ResourceName* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceStatus.name)
  return _msg;
}
inline void ResourceStatus::set_allocated_name(::viam::common::v1::ResourceName* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name));
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ResourceStatus.name)
}

// .viam.robot.v1.ResourceStatus.State state = 2 [json_name = "state"];
inline void ResourceStatus::clear_state() {
  state_ = 0;
}
inline ::viam::robot::v1::ResourceStatus_State ResourceStatus::_internal_state() const {
  return static_cast< ::viam::robot::v1::ResourceStatus_State >(state_);
}
inline ::viam::robot::v1::ResourceStatus_State ResourceStatus::state() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceStatus.state)
  return _internal_state();
}
inline void ResourceStatus::_internal_set_state(::viam::robot::v1::ResourceStatus_State value) {
  
  state_ = value;
}
inline void ResourceStatus::set_state(::viam::robot::v1::ResourceStatus_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:viam.robot.v1.ResourceStatus.state)
}

// .google.protobuf.Timestamp last_updated = 3 [json_name = "lastUpdated"];
inline bool ResourceStatus::_internal_has_last_updated() const {
  return this != internal_default_instance() && last_updated_ != nullptr;
}
inline bool ResourceStatus::has_last_updated() const {
  return _internal_has_last_updated();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ResourceStatus::_internal_last_updated() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = last_updated_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ResourceStatus::last_updated() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceStatus.last_updated)
  return _internal_last_updated();
}
inline void ResourceStatus::unsafe_arena_set_allocated_last_updated(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  last_updated_ = last_updated;
  if (last_updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.ResourceStatus.last_updated)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ResourceStatus::release_last_updated() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ResourceStatus::unsafe_arena_release_last_updated() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ResourceStatus.last_updated)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ResourceStatus::_internal_mutable_last_updated() {
  
  if (last_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_updated_ = p;
  }
  return last_updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ResourceStatus::mutable_last_updated() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceStatus.last_updated)
  return _msg;
}
inline void ResourceStatus::set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  if (last_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated));
    if (message_arena != submessage_arena) {
      last_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ResourceStatus.last_updated)
}

// string revision = 4 [json_name = "revision"];
inline void ResourceStatus::clear_revision() {
  revision_.ClearToEmpty();
}
inline const std::string& ResourceStatus::revision() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceStatus.revision)
  return _internal_revision();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceStatus::set_revision(ArgT0&& arg0, ArgT... args) {
 
 revision_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.ResourceStatus.revision)
}
inline std::string* ResourceStatus::mutable_revision() {
  std::string* _s = _internal_mutable_revision();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceStatus.revision)
  return _s;
}
inline const std::string& ResourceStatus::_internal_revision() const {
  return revision_.Get();
}
inline void ResourceStatus::_internal_set_revision(const std::string& value) {
  
  revision_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceStatus::_internal_mutable_revision() {
  
  return revision_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceStatus::release_revision() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ResourceStatus.revision)
  return revision_.Release();
}
inline void ResourceStatus::set_allocated_revision(std::string* revision) {
  if (revision != nullptr) {
    
  } else {
    
  }
  revision_.SetAllocated(revision, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (revision_.IsDefault()) {
    revision_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ResourceStatus.revision)
}

// string error = 5 [json_name = "error"];
inline void ResourceStatus::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ResourceStatus::error() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceStatus.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceStatus::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.ResourceStatus.error)
}
inline std::string* ResourceStatus::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceStatus.error)
  return _s;
}
inline const std::string& ResourceStatus::_internal_error() const {
  return error_.Get();
}
inline void ResourceStatus::_internal_set_error(const std::string& value) {
  
  error_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceStatus::_internal_mutable_error() {
  
  return error_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceStatus::release_error() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ResourceStatus.error)
  return error_.Release();
}
inline void ResourceStatus::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault()) {
    error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ResourceStatus.error)
}

// optional .viam.robot.v1.GetCloudMetadataResponse cloud_metadata = 6 [json_name = "cloudMetadata"];
inline bool ResourceStatus::_internal_has_cloud_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || cloud_metadata_ != nullptr);
  return value;
}
inline bool ResourceStatus::has_cloud_metadata() const {
  return _internal_has_cloud_metadata();
}
inline void ResourceStatus::clear_cloud_metadata() {
  if (cloud_metadata_ != nullptr) cloud_metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::viam::robot::v1::GetCloudMetadataResponse& ResourceStatus::_internal_cloud_metadata() const {
  const ::viam::robot::v1::GetCloudMetadataResponse* p = cloud_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::robot::v1::GetCloudMetadataResponse&>(
      ::viam::robot::v1::_GetCloudMetadataResponse_default_instance_);
}
inline const ::viam::robot::v1::GetCloudMetadataResponse& ResourceStatus::cloud_metadata() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceStatus.cloud_metadata)
  return _internal_cloud_metadata();
}
inline void ResourceStatus::unsafe_arena_set_allocated_cloud_metadata(
    ::viam::robot::v1::GetCloudMetadataResponse* cloud_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cloud_metadata_);
  }
  cloud_metadata_ = cloud_metadata;
  if (cloud_metadata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.ResourceStatus.cloud_metadata)
}
inline ::viam::robot::v1::GetCloudMetadataResponse* ResourceStatus::release_cloud_metadata() {
  _has_bits_[0] &= ~0x00000001u;
  ::viam::robot::v1::GetCloudMetadataResponse* temp = cloud_metadata_;
  cloud_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::robot::v1::GetCloudMetadataResponse* ResourceStatus::unsafe_arena_release_cloud_metadata() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ResourceStatus.cloud_metadata)
  _has_bits_[0] &= ~0x00000001u;
  ::viam::robot::v1::GetCloudMetadataResponse* temp = cloud_metadata_;
  cloud_metadata_ = nullptr;
  return temp;
}
inline ::viam::robot::v1::GetCloudMetadataResponse* ResourceStatus::_internal_mutable_cloud_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (cloud_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::robot::v1::GetCloudMetadataResponse>(GetArenaForAllocation());
    cloud_metadata_ = p;
  }
  return cloud_metadata_;
}
inline ::viam::robot::v1::GetCloudMetadataResponse* ResourceStatus::mutable_cloud_metadata() {
  ::viam::robot::v1::GetCloudMetadataResponse* _msg = _internal_mutable_cloud_metadata();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceStatus.cloud_metadata)
  return _msg;
}
inline void ResourceStatus::set_allocated_cloud_metadata(::viam::robot::v1::GetCloudMetadataResponse* cloud_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cloud_metadata_;
  }
  if (cloud_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cloud_metadata);
    if (message_arena != submessage_arena) {
      cloud_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cloud_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cloud_metadata_ = cloud_metadata;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ResourceStatus.cloud_metadata)
}

// -------------------------------------------------------------------

// ConfigStatus

// string revision = 1 [json_name = "revision"];
inline void ConfigStatus::clear_revision() {
  revision_.ClearToEmpty();
}
inline const std::string& ConfigStatus::revision() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ConfigStatus.revision)
  return _internal_revision();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConfigStatus::set_revision(ArgT0&& arg0, ArgT... args) {
 
 revision_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.ConfigStatus.revision)
}
inline std::string* ConfigStatus::mutable_revision() {
  std::string* _s = _internal_mutable_revision();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ConfigStatus.revision)
  return _s;
}
inline const std::string& ConfigStatus::_internal_revision() const {
  return revision_.Get();
}
inline void ConfigStatus::_internal_set_revision(const std::string& value) {
  
  revision_.Set(value, GetArenaForAllocation());
}
inline std::string* ConfigStatus::_internal_mutable_revision() {
  
  return revision_.Mutable(GetArenaForAllocation());
}
inline std::string* ConfigStatus::release_revision() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ConfigStatus.revision)
  return revision_.Release();
}
inline void ConfigStatus::set_allocated_revision(std::string* revision) {
  if (revision != nullptr) {
    
  } else {
    
  }
  revision_.SetAllocated(revision, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (revision_.IsDefault()) {
    revision_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ConfigStatus.revision)
}

// .google.protobuf.Timestamp last_updated = 2 [json_name = "lastUpdated"];
inline bool ConfigStatus::_internal_has_last_updated() const {
  return this != internal_default_instance() && last_updated_ != nullptr;
}
inline bool ConfigStatus::has_last_updated() const {
  return _internal_has_last_updated();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ConfigStatus::_internal_last_updated() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = last_updated_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ConfigStatus::last_updated() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ConfigStatus.last_updated)
  return _internal_last_updated();
}
inline void ConfigStatus::unsafe_arena_set_allocated_last_updated(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  last_updated_ = last_updated;
  if (last_updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.ConfigStatus.last_updated)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ConfigStatus::release_last_updated() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ConfigStatus::unsafe_arena_release_last_updated() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ConfigStatus.last_updated)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_updated_;
  last_updated_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ConfigStatus::_internal_mutable_last_updated() {
  
  if (last_updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_updated_ = p;
  }
  return last_updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ConfigStatus::mutable_last_updated() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_updated();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ConfigStatus.last_updated)
  return _msg;
}
inline void ConfigStatus::set_allocated_last_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* last_updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_);
  }
  if (last_updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated));
    if (message_arena != submessage_arena) {
      last_updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_ = last_updated;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ConfigStatus.last_updated)
}

// -------------------------------------------------------------------

// GetVersionRequest

// -------------------------------------------------------------------

// GetVersionResponse

// string platform = 1 [json_name = "platform"];
inline void GetVersionResponse::clear_platform() {
  platform_.ClearToEmpty();
}
inline const std::string& GetVersionResponse::platform() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetVersionResponse.platform)
  return _internal_platform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionResponse::set_platform(ArgT0&& arg0, ArgT... args) {
 
 platform_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.GetVersionResponse.platform)
}
inline std::string* GetVersionResponse::mutable_platform() {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetVersionResponse.platform)
  return _s;
}
inline const std::string& GetVersionResponse::_internal_platform() const {
  return platform_.Get();
}
inline void GetVersionResponse::_internal_set_platform(const std::string& value) {
  
  platform_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionResponse::_internal_mutable_platform() {
  
  return platform_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionResponse::release_platform() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.GetVersionResponse.platform)
  return platform_.Release();
}
inline void GetVersionResponse::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocated(platform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (platform_.IsDefault()) {
    platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.GetVersionResponse.platform)
}

// string version = 2 [json_name = "version"];
inline void GetVersionResponse::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& GetVersionResponse::version() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetVersionResponse.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionResponse::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.GetVersionResponse.version)
}
inline std::string* GetVersionResponse::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetVersionResponse.version)
  return _s;
}
inline const std::string& GetVersionResponse::_internal_version() const {
  return version_.Get();
}
inline void GetVersionResponse::_internal_set_version(const std::string& value) {
  
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionResponse::_internal_mutable_version() {
  
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionResponse::release_version() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.GetVersionResponse.version)
  return version_.Release();
}
inline void GetVersionResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.GetVersionResponse.version)
}

// string api_version = 3 [json_name = "apiVersion"];
inline void GetVersionResponse::clear_api_version() {
  api_version_.ClearToEmpty();
}
inline const std::string& GetVersionResponse::api_version() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetVersionResponse.api_version)
  return _internal_api_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetVersionResponse::set_api_version(ArgT0&& arg0, ArgT... args) {
 
 api_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.GetVersionResponse.api_version)
}
inline std::string* GetVersionResponse::mutable_api_version() {
  std::string* _s = _internal_mutable_api_version();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetVersionResponse.api_version)
  return _s;
}
inline const std::string& GetVersionResponse::_internal_api_version() const {
  return api_version_.Get();
}
inline void GetVersionResponse::_internal_set_api_version(const std::string& value) {
  
  api_version_.Set(value, GetArenaForAllocation());
}
inline std::string* GetVersionResponse::_internal_mutable_api_version() {
  
  return api_version_.Mutable(GetArenaForAllocation());
}
inline std::string* GetVersionResponse::release_api_version() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.GetVersionResponse.api_version)
  return api_version_.Release();
}
inline void GetVersionResponse::set_allocated_api_version(std::string* api_version) {
  if (api_version != nullptr) {
    
  } else {
    
  }
  api_version_.SetAllocated(api_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (api_version_.IsDefault()) {
    api_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.GetVersionResponse.api_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace robot
}  // namespace viam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::viam::robot::v1::GetMachineStatusResponse_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::robot::v1::GetMachineStatusResponse_State>() {
  return ::viam::robot::v1::GetMachineStatusResponse_State_descriptor();
}
template <> struct is_proto_enum< ::viam::robot::v1::ResourceStatus_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::robot::v1::ResourceStatus_State>() {
  return ::viam::robot::v1::ResourceStatus_State_descriptor();
}
template <> struct is_proto_enum< ::viam::robot::v1::PeerConnectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::robot::v1::PeerConnectionType>() {
  return ::viam::robot::v1::PeerConnectionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_robot_2fv1_2frobot_2eproto
