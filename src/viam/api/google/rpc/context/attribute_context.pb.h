// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/rpc/context/attribute_context.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/struct.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
namespace google {
namespace rpc {
namespace context {
class AttributeContext;
struct AttributeContextDefaultTypeInternal;
extern AttributeContextDefaultTypeInternal _AttributeContext_default_instance_;
class AttributeContext_Api;
struct AttributeContext_ApiDefaultTypeInternal;
extern AttributeContext_ApiDefaultTypeInternal _AttributeContext_Api_default_instance_;
class AttributeContext_Auth;
struct AttributeContext_AuthDefaultTypeInternal;
extern AttributeContext_AuthDefaultTypeInternal _AttributeContext_Auth_default_instance_;
class AttributeContext_Peer;
struct AttributeContext_PeerDefaultTypeInternal;
extern AttributeContext_PeerDefaultTypeInternal _AttributeContext_Peer_default_instance_;
class AttributeContext_Peer_LabelsEntry_DoNotUse;
struct AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal;
extern AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Peer_LabelsEntry_DoNotUse_default_instance_;
class AttributeContext_Request;
struct AttributeContext_RequestDefaultTypeInternal;
extern AttributeContext_RequestDefaultTypeInternal _AttributeContext_Request_default_instance_;
class AttributeContext_Request_HeadersEntry_DoNotUse;
struct AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal;
extern AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal _AttributeContext_Request_HeadersEntry_DoNotUse_default_instance_;
class AttributeContext_Resource;
struct AttributeContext_ResourceDefaultTypeInternal;
extern AttributeContext_ResourceDefaultTypeInternal _AttributeContext_Resource_default_instance_;
class AttributeContext_Resource_AnnotationsEntry_DoNotUse;
struct AttributeContext_Resource_AnnotationsEntry_DoNotUseDefaultTypeInternal;
extern AttributeContext_Resource_AnnotationsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Resource_AnnotationsEntry_DoNotUse_default_instance_;
class AttributeContext_Resource_LabelsEntry_DoNotUse;
struct AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal;
extern AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Resource_LabelsEntry_DoNotUse_default_instance_;
class AttributeContext_Response;
struct AttributeContext_ResponseDefaultTypeInternal;
extern AttributeContext_ResponseDefaultTypeInternal _AttributeContext_Response_default_instance_;
class AttributeContext_Response_HeadersEntry_DoNotUse;
struct AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal;
extern AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal _AttributeContext_Response_HeadersEntry_DoNotUse_default_instance_;
}  // namespace context
}  // namespace rpc
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace google {
namespace rpc {
namespace context {

// ===================================================================


// -------------------------------------------------------------------

class AttributeContext_Response_HeadersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          AttributeContext_Response_HeadersEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      AttributeContext_Response_HeadersEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AttributeContext_Response_HeadersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeContext_Response_HeadersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AttributeContext_Response_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AttributeContext_Response_HeadersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Response_HeadersEntry_DoNotUse*>(
        &_AttributeContext_Response_HeadersEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Response.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Response.HeadersEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class AttributeContext_Resource_LabelsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          AttributeContext_Resource_LabelsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      AttributeContext_Resource_LabelsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AttributeContext_Resource_LabelsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeContext_Resource_LabelsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AttributeContext_Resource_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AttributeContext_Resource_LabelsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Resource_LabelsEntry_DoNotUse*>(
        &_AttributeContext_Resource_LabelsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Resource.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Resource.LabelsEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class AttributeContext_Resource_AnnotationsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          AttributeContext_Resource_AnnotationsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      AttributeContext_Resource_AnnotationsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AttributeContext_Resource_AnnotationsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeContext_Resource_AnnotationsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AttributeContext_Resource_AnnotationsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AttributeContext_Resource_AnnotationsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Resource_AnnotationsEntry_DoNotUse*>(
        &_AttributeContext_Resource_AnnotationsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Resource.AnnotationsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Resource.AnnotationsEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class AttributeContext_Request_HeadersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          AttributeContext_Request_HeadersEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      AttributeContext_Request_HeadersEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AttributeContext_Request_HeadersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeContext_Request_HeadersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AttributeContext_Request_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AttributeContext_Request_HeadersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Request_HeadersEntry_DoNotUse*>(
        &_AttributeContext_Request_HeadersEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Request.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Request.HeadersEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class AttributeContext_Peer_LabelsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          AttributeContext_Peer_LabelsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      AttributeContext_Peer_LabelsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  AttributeContext_Peer_LabelsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeContext_Peer_LabelsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AttributeContext_Peer_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AttributeContext_Peer_LabelsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Peer_LabelsEntry_DoNotUse*>(
        &_AttributeContext_Peer_LabelsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Peer.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "google.rpc.context.AttributeContext.Peer.LabelsEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};
// -------------------------------------------------------------------

class AttributeContext_Api final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Api) */ {
 public:
  inline AttributeContext_Api() : AttributeContext_Api(nullptr) {}
  ~AttributeContext_Api() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeContext_Api(::google::protobuf::internal::ConstantInitialized);

  inline AttributeContext_Api(const AttributeContext_Api& from)
      : AttributeContext_Api(nullptr, from) {}
  AttributeContext_Api(AttributeContext_Api&& from) noexcept
    : AttributeContext_Api() {
    *this = ::std::move(from);
  }

  inline AttributeContext_Api& operator=(const AttributeContext_Api& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext_Api& operator=(AttributeContext_Api&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeContext_Api& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext_Api* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Api*>(
               &_AttributeContext_Api_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AttributeContext_Api& a, AttributeContext_Api& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext_Api* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext_Api* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeContext_Api* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeContext_Api>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttributeContext_Api& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttributeContext_Api& from) {
    AttributeContext_Api::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttributeContext_Api* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.rpc.context.AttributeContext.Api";
  }
  protected:
  explicit AttributeContext_Api(::google::protobuf::Arena* arena);
  AttributeContext_Api(::google::protobuf::Arena* arena, const AttributeContext_Api& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
    kOperationFieldNumber = 2,
    kProtocolFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // string service = 1 [json_name = "service"];
  void clear_service() ;
  const std::string& service() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service(Arg_&& arg, Args_... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* value);

  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(
      const std::string& value);
  std::string* _internal_mutable_service();

  public:
  // string operation = 2 [json_name = "operation"];
  void clear_operation() ;
  const std::string& operation() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_operation(Arg_&& arg, Args_... args);
  std::string* mutable_operation();
  PROTOBUF_NODISCARD std::string* release_operation();
  void set_allocated_operation(std::string* value);

  private:
  const std::string& _internal_operation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_operation(
      const std::string& value);
  std::string* _internal_mutable_operation();

  public:
  // string protocol = 3 [json_name = "protocol"];
  void clear_protocol() ;
  const std::string& protocol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_protocol(Arg_&& arg, Args_... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* value);

  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(
      const std::string& value);
  std::string* _internal_mutable_protocol();

  public:
  // string version = 4 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Api)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      79, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr service_;
    ::google::protobuf::internal::ArenaStringPtr operation_;
    ::google::protobuf::internal::ArenaStringPtr protocol_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};// -------------------------------------------------------------------

class AttributeContext_Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Response) */ {
 public:
  inline AttributeContext_Response() : AttributeContext_Response(nullptr) {}
  ~AttributeContext_Response() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeContext_Response(::google::protobuf::internal::ConstantInitialized);

  inline AttributeContext_Response(const AttributeContext_Response& from)
      : AttributeContext_Response(nullptr, from) {}
  AttributeContext_Response(AttributeContext_Response&& from) noexcept
    : AttributeContext_Response() {
    *this = ::std::move(from);
  }

  inline AttributeContext_Response& operator=(const AttributeContext_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext_Response& operator=(AttributeContext_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeContext_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext_Response* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Response*>(
               &_AttributeContext_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AttributeContext_Response& a, AttributeContext_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext_Response* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeContext_Response* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeContext_Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttributeContext_Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttributeContext_Response& from) {
    AttributeContext_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttributeContext_Response* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.rpc.context.AttributeContext.Response";
  }
  protected:
  explicit AttributeContext_Response(::google::protobuf::Arena* arena);
  AttributeContext_Response(::google::protobuf::Arena* arena, const AttributeContext_Response& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kTimeFieldNumber = 4,
    kBackendLatencyFieldNumber = 5,
    kCodeFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // map<string, string> headers = 3 [json_name = "headers"];
  int headers_size() const;
  private:
  int _internal_headers_size() const;

  public:
  void clear_headers() ;
  const ::google::protobuf::Map<std::string, std::string>& headers() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_headers();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_headers() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_headers();

  public:
  // .google.protobuf.Timestamp time = 4 [json_name = "time"];
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // .google.protobuf.Duration backend_latency = 5 [json_name = "backendLatency"];
  bool has_backend_latency() const;
  void clear_backend_latency() ;
  const ::google::protobuf::Duration& backend_latency() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_backend_latency();
  ::google::protobuf::Duration* mutable_backend_latency();
  void set_allocated_backend_latency(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_backend_latency(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_backend_latency();

  private:
  const ::google::protobuf::Duration& _internal_backend_latency() const;
  ::google::protobuf::Duration* _internal_mutable_backend_latency();

  public:
  // int64 code = 1 [json_name = "code"];
  void clear_code() ;
  ::int64_t code() const;
  void set_code(::int64_t value);

  private:
  ::int64_t _internal_code() const;
  void _internal_set_code(::int64_t value);

  public:
  // int64 size = 2 [json_name = "size"];
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Response)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<AttributeContext_Response_HeadersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        headers_;
    ::google::protobuf::Timestamp* time_;
    ::google::protobuf::Duration* backend_latency_;
    ::int64_t code_;
    ::int64_t size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};// -------------------------------------------------------------------

class AttributeContext_Resource final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Resource) */ {
 public:
  inline AttributeContext_Resource() : AttributeContext_Resource(nullptr) {}
  ~AttributeContext_Resource() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeContext_Resource(::google::protobuf::internal::ConstantInitialized);

  inline AttributeContext_Resource(const AttributeContext_Resource& from)
      : AttributeContext_Resource(nullptr, from) {}
  AttributeContext_Resource(AttributeContext_Resource&& from) noexcept
    : AttributeContext_Resource() {
    *this = ::std::move(from);
  }

  inline AttributeContext_Resource& operator=(const AttributeContext_Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext_Resource& operator=(AttributeContext_Resource&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeContext_Resource& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext_Resource* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Resource*>(
               &_AttributeContext_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AttributeContext_Resource& a, AttributeContext_Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext_Resource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext_Resource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeContext_Resource* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeContext_Resource>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttributeContext_Resource& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttributeContext_Resource& from) {
    AttributeContext_Resource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttributeContext_Resource* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.rpc.context.AttributeContext.Resource";
  }
  protected:
  explicit AttributeContext_Resource(::google::protobuf::Arena* arena);
  AttributeContext_Resource(::google::protobuf::Arena* arena, const AttributeContext_Resource& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 4,
    kAnnotationsFieldNumber = 6,
    kServiceFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kUidFieldNumber = 5,
    kDisplayNameFieldNumber = 7,
    kEtagFieldNumber = 11,
    kLocationFieldNumber = 12,
    kCreateTimeFieldNumber = 8,
    kUpdateTimeFieldNumber = 9,
    kDeleteTimeFieldNumber = 10,
  };
  // map<string, string> labels = 4 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;

  public:
  void clear_labels() ;
  const ::google::protobuf::Map<std::string, std::string>& labels() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_labels();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_labels() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_labels();

  public:
  // map<string, string> annotations = 6 [json_name = "annotations"];
  int annotations_size() const;
  private:
  int _internal_annotations_size() const;

  public:
  void clear_annotations() ;
  const ::google::protobuf::Map<std::string, std::string>& annotations() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_annotations();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_annotations() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_annotations();

  public:
  // string service = 1 [json_name = "service"];
  void clear_service() ;
  const std::string& service() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service(Arg_&& arg, Args_... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* value);

  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(
      const std::string& value);
  std::string* _internal_mutable_service();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string type = 3 [json_name = "type"];
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string uid = 5 [json_name = "uid"];
  void clear_uid() ;
  const std::string& uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_uid(Arg_&& arg, Args_... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* value);

  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(
      const std::string& value);
  std::string* _internal_mutable_uid();

  public:
  // string display_name = 7 [json_name = "displayName"];
  void clear_display_name() ;
  const std::string& display_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display_name(Arg_&& arg, Args_... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* value);

  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(
      const std::string& value);
  std::string* _internal_mutable_display_name();

  public:
  // string etag = 11 [json_name = "etag"];
  void clear_etag() ;
  const std::string& etag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_etag(Arg_&& arg, Args_... args);
  std::string* mutable_etag();
  PROTOBUF_NODISCARD std::string* release_etag();
  void set_allocated_etag(std::string* value);

  private:
  const std::string& _internal_etag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_etag(
      const std::string& value);
  std::string* _internal_mutable_etag();

  public:
  // string location = 12 [json_name = "location"];
  void clear_location() ;
  const std::string& location() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* value);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  // .google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];
  bool has_create_time() const;
  void clear_create_time() ;
  const ::google::protobuf::Timestamp& create_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_create_time();
  ::google::protobuf::Timestamp* mutable_create_time();
  void set_allocated_create_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_create_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_create_time();

  private:
  const ::google::protobuf::Timestamp& _internal_create_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_create_time();

  public:
  // .google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];
  bool has_update_time() const;
  void clear_update_time() ;
  const ::google::protobuf::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_update_time();
  ::google::protobuf::Timestamp* mutable_update_time();
  void set_allocated_update_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_update_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_update_time();

  private:
  const ::google::protobuf::Timestamp& _internal_update_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_update_time();

  public:
  // .google.protobuf.Timestamp delete_time = 10 [json_name = "deleteTime"];
  bool has_delete_time() const;
  void clear_delete_time() ;
  const ::google::protobuf::Timestamp& delete_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_delete_time();
  ::google::protobuf::Timestamp* mutable_delete_time();
  void set_allocated_delete_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_delete_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_delete_time();

  private:
  const ::google::protobuf::Timestamp& _internal_delete_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_delete_time();

  public:
  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Resource)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 5,
      120, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<AttributeContext_Resource_LabelsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        labels_;
    ::google::protobuf::internal::MapField<AttributeContext_Resource_AnnotationsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        annotations_;
    ::google::protobuf::internal::ArenaStringPtr service_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr uid_;
    ::google::protobuf::internal::ArenaStringPtr display_name_;
    ::google::protobuf::internal::ArenaStringPtr etag_;
    ::google::protobuf::internal::ArenaStringPtr location_;
    ::google::protobuf::Timestamp* create_time_;
    ::google::protobuf::Timestamp* update_time_;
    ::google::protobuf::Timestamp* delete_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};// -------------------------------------------------------------------

class AttributeContext_Peer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Peer) */ {
 public:
  inline AttributeContext_Peer() : AttributeContext_Peer(nullptr) {}
  ~AttributeContext_Peer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeContext_Peer(::google::protobuf::internal::ConstantInitialized);

  inline AttributeContext_Peer(const AttributeContext_Peer& from)
      : AttributeContext_Peer(nullptr, from) {}
  AttributeContext_Peer(AttributeContext_Peer&& from) noexcept
    : AttributeContext_Peer() {
    *this = ::std::move(from);
  }

  inline AttributeContext_Peer& operator=(const AttributeContext_Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext_Peer& operator=(AttributeContext_Peer&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeContext_Peer& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext_Peer* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Peer*>(
               &_AttributeContext_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AttributeContext_Peer& a, AttributeContext_Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext_Peer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext_Peer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeContext_Peer* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeContext_Peer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttributeContext_Peer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttributeContext_Peer& from) {
    AttributeContext_Peer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttributeContext_Peer* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.rpc.context.AttributeContext.Peer";
  }
  protected:
  explicit AttributeContext_Peer(::google::protobuf::Arena* arena);
  AttributeContext_Peer(::google::protobuf::Arena* arena, const AttributeContext_Peer& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 6,
    kIpFieldNumber = 1,
    kPrincipalFieldNumber = 7,
    kRegionCodeFieldNumber = 8,
    kPortFieldNumber = 2,
  };
  // map<string, string> labels = 6 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;

  public:
  void clear_labels() ;
  const ::google::protobuf::Map<std::string, std::string>& labels() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_labels();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_labels() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_labels();

  public:
  // string ip = 1 [json_name = "ip"];
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // string principal = 7 [json_name = "principal"];
  void clear_principal() ;
  const std::string& principal() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_principal(Arg_&& arg, Args_... args);
  std::string* mutable_principal();
  PROTOBUF_NODISCARD std::string* release_principal();
  void set_allocated_principal(std::string* value);

  private:
  const std::string& _internal_principal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_principal(
      const std::string& value);
  std::string* _internal_mutable_principal();

  public:
  // string region_code = 8 [json_name = "regionCode"];
  void clear_region_code() ;
  const std::string& region_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_region_code(Arg_&& arg, Args_... args);
  std::string* mutable_region_code();
  PROTOBUF_NODISCARD std::string* release_region_code();
  void set_allocated_region_code(std::string* value);

  private:
  const std::string& _internal_region_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region_code(
      const std::string& value);
  std::string* _internal_mutable_region_code();

  public:
  // int64 port = 2 [json_name = "port"];
  void clear_port() ;
  ::int64_t port() const;
  void set_port(::int64_t value);

  private:
  ::int64_t _internal_port() const;
  void _internal_set_port(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Peer)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      77, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<AttributeContext_Peer_LabelsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        labels_;
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::google::protobuf::internal::ArenaStringPtr principal_;
    ::google::protobuf::internal::ArenaStringPtr region_code_;
    ::int64_t port_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};// -------------------------------------------------------------------

class AttributeContext_Auth final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Auth) */ {
 public:
  inline AttributeContext_Auth() : AttributeContext_Auth(nullptr) {}
  ~AttributeContext_Auth() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeContext_Auth(::google::protobuf::internal::ConstantInitialized);

  inline AttributeContext_Auth(const AttributeContext_Auth& from)
      : AttributeContext_Auth(nullptr, from) {}
  AttributeContext_Auth(AttributeContext_Auth&& from) noexcept
    : AttributeContext_Auth() {
    *this = ::std::move(from);
  }

  inline AttributeContext_Auth& operator=(const AttributeContext_Auth& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext_Auth& operator=(AttributeContext_Auth&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeContext_Auth& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext_Auth* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Auth*>(
               &_AttributeContext_Auth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AttributeContext_Auth& a, AttributeContext_Auth& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext_Auth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext_Auth* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeContext_Auth* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeContext_Auth>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttributeContext_Auth& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttributeContext_Auth& from) {
    AttributeContext_Auth::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttributeContext_Auth* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.rpc.context.AttributeContext.Auth";
  }
  protected:
  explicit AttributeContext_Auth(::google::protobuf::Arena* arena);
  AttributeContext_Auth(::google::protobuf::Arena* arena, const AttributeContext_Auth& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudiencesFieldNumber = 2,
    kAccessLevelsFieldNumber = 5,
    kPrincipalFieldNumber = 1,
    kPresenterFieldNumber = 3,
    kClaimsFieldNumber = 4,
  };
  // repeated string audiences = 2 [json_name = "audiences"];
  int audiences_size() const;
  private:
  int _internal_audiences_size() const;

  public:
  void clear_audiences() ;
  const std::string& audiences(int index) const;
  std::string* mutable_audiences(int index);
  void set_audiences(int index, const std::string& value);
  void set_audiences(int index, std::string&& value);
  void set_audiences(int index, const char* value);
  void set_audiences(int index, const char* value, std::size_t size);
  void set_audiences(int index, absl::string_view value);
  std::string* add_audiences();
  void add_audiences(const std::string& value);
  void add_audiences(std::string&& value);
  void add_audiences(const char* value);
  void add_audiences(const char* value, std::size_t size);
  void add_audiences(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& audiences() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_audiences();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_audiences() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_audiences();

  public:
  // repeated string access_levels = 5 [json_name = "accessLevels"];
  int access_levels_size() const;
  private:
  int _internal_access_levels_size() const;

  public:
  void clear_access_levels() ;
  const std::string& access_levels(int index) const;
  std::string* mutable_access_levels(int index);
  void set_access_levels(int index, const std::string& value);
  void set_access_levels(int index, std::string&& value);
  void set_access_levels(int index, const char* value);
  void set_access_levels(int index, const char* value, std::size_t size);
  void set_access_levels(int index, absl::string_view value);
  std::string* add_access_levels();
  void add_access_levels(const std::string& value);
  void add_access_levels(std::string&& value);
  void add_access_levels(const char* value);
  void add_access_levels(const char* value, std::size_t size);
  void add_access_levels(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& access_levels() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_access_levels();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_access_levels() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_access_levels();

  public:
  // string principal = 1 [json_name = "principal"];
  void clear_principal() ;
  const std::string& principal() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_principal(Arg_&& arg, Args_... args);
  std::string* mutable_principal();
  PROTOBUF_NODISCARD std::string* release_principal();
  void set_allocated_principal(std::string* value);

  private:
  const std::string& _internal_principal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_principal(
      const std::string& value);
  std::string* _internal_mutable_principal();

  public:
  // string presenter = 3 [json_name = "presenter"];
  void clear_presenter() ;
  const std::string& presenter() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_presenter(Arg_&& arg, Args_... args);
  std::string* mutable_presenter();
  PROTOBUF_NODISCARD std::string* release_presenter();
  void set_allocated_presenter(std::string* value);

  private:
  const std::string& _internal_presenter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_presenter(
      const std::string& value);
  std::string* _internal_mutable_presenter();

  public:
  // .google.protobuf.Struct claims = 4 [json_name = "claims"];
  bool has_claims() const;
  void clear_claims() ;
  const ::google::protobuf::Struct& claims() const;
  PROTOBUF_NODISCARD ::google::protobuf::Struct* release_claims();
  ::google::protobuf::Struct* mutable_claims();
  void set_allocated_claims(::google::protobuf::Struct* value);
  void unsafe_arena_set_allocated_claims(::google::protobuf::Struct* value);
  ::google::protobuf::Struct* unsafe_arena_release_claims();

  private:
  const ::google::protobuf::Struct& _internal_claims() const;
  ::google::protobuf::Struct* _internal_mutable_claims();

  public:
  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Auth)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      89, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> audiences_;
    ::google::protobuf::RepeatedPtrField<std::string> access_levels_;
    ::google::protobuf::internal::ArenaStringPtr principal_;
    ::google::protobuf::internal::ArenaStringPtr presenter_;
    ::google::protobuf::Struct* claims_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};// -------------------------------------------------------------------

class AttributeContext_Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext.Request) */ {
 public:
  inline AttributeContext_Request() : AttributeContext_Request(nullptr) {}
  ~AttributeContext_Request() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeContext_Request(::google::protobuf::internal::ConstantInitialized);

  inline AttributeContext_Request(const AttributeContext_Request& from)
      : AttributeContext_Request(nullptr, from) {}
  AttributeContext_Request(AttributeContext_Request&& from) noexcept
    : AttributeContext_Request() {
    *this = ::std::move(from);
  }

  inline AttributeContext_Request& operator=(const AttributeContext_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext_Request& operator=(AttributeContext_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeContext_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext_Request* internal_default_instance() {
    return reinterpret_cast<const AttributeContext_Request*>(
               &_AttributeContext_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AttributeContext_Request& a, AttributeContext_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext_Request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeContext_Request* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeContext_Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttributeContext_Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttributeContext_Request& from) {
    AttributeContext_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttributeContext_Request* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.rpc.context.AttributeContext.Request";
  }
  protected:
  explicit AttributeContext_Request(::google::protobuf::Arena* arena);
  AttributeContext_Request(::google::protobuf::Arena* arena, const AttributeContext_Request& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kIdFieldNumber = 1,
    kMethodFieldNumber = 2,
    kPathFieldNumber = 4,
    kHostFieldNumber = 5,
    kSchemeFieldNumber = 6,
    kQueryFieldNumber = 7,
    kProtocolFieldNumber = 11,
    kReasonFieldNumber = 12,
    kTimeFieldNumber = 9,
    kAuthFieldNumber = 13,
    kSizeFieldNumber = 10,
  };
  // map<string, string> headers = 3 [json_name = "headers"];
  int headers_size() const;
  private:
  int _internal_headers_size() const;

  public:
  void clear_headers() ;
  const ::google::protobuf::Map<std::string, std::string>& headers() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_headers();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_headers() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_headers();

  public:
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string method = 2 [json_name = "method"];
  void clear_method() ;
  const std::string& method() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_method(Arg_&& arg, Args_... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* value);

  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(
      const std::string& value);
  std::string* _internal_mutable_method();

  public:
  // string path = 4 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // string host = 5 [json_name = "host"];
  void clear_host() ;
  const std::string& host() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* value);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // string scheme = 6 [json_name = "scheme"];
  void clear_scheme() ;
  const std::string& scheme() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_scheme(Arg_&& arg, Args_... args);
  std::string* mutable_scheme();
  PROTOBUF_NODISCARD std::string* release_scheme();
  void set_allocated_scheme(std::string* value);

  private:
  const std::string& _internal_scheme() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scheme(
      const std::string& value);
  std::string* _internal_mutable_scheme();

  public:
  // string query = 7 [json_name = "query"];
  void clear_query() ;
  const std::string& query() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_query(Arg_&& arg, Args_... args);
  std::string* mutable_query();
  PROTOBUF_NODISCARD std::string* release_query();
  void set_allocated_query(std::string* value);

  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(
      const std::string& value);
  std::string* _internal_mutable_query();

  public:
  // string protocol = 11 [json_name = "protocol"];
  void clear_protocol() ;
  const std::string& protocol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_protocol(Arg_&& arg, Args_... args);
  std::string* mutable_protocol();
  PROTOBUF_NODISCARD std::string* release_protocol();
  void set_allocated_protocol(std::string* value);

  private:
  const std::string& _internal_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_protocol(
      const std::string& value);
  std::string* _internal_mutable_protocol();

  public:
  // string reason = 12 [json_name = "reason"];
  void clear_reason() ;
  const std::string& reason() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reason(Arg_&& arg, Args_... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* value);

  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(
      const std::string& value);
  std::string* _internal_mutable_reason();

  public:
  // .google.protobuf.Timestamp time = 9 [json_name = "time"];
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // .google.rpc.context.AttributeContext.Auth auth = 13 [json_name = "auth"];
  bool has_auth() const;
  void clear_auth() ;
  const ::google::rpc::context::AttributeContext_Auth& auth() const;
  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Auth* release_auth();
  ::google::rpc::context::AttributeContext_Auth* mutable_auth();
  void set_allocated_auth(::google::rpc::context::AttributeContext_Auth* value);
  void unsafe_arena_set_allocated_auth(::google::rpc::context::AttributeContext_Auth* value);
  ::google::rpc::context::AttributeContext_Auth* unsafe_arena_release_auth();

  private:
  const ::google::rpc::context::AttributeContext_Auth& _internal_auth() const;
  ::google::rpc::context::AttributeContext_Auth* _internal_mutable_auth();

  public:
  // int64 size = 10 [json_name = "size"];
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext.Request)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 3,
      108, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<AttributeContext_Request_HeadersEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        headers_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr method_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::ArenaStringPtr host_;
    ::google::protobuf::internal::ArenaStringPtr scheme_;
    ::google::protobuf::internal::ArenaStringPtr query_;
    ::google::protobuf::internal::ArenaStringPtr protocol_;
    ::google::protobuf::internal::ArenaStringPtr reason_;
    ::google::protobuf::Timestamp* time_;
    ::google::rpc::context::AttributeContext_Auth* auth_;
    ::int64_t size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};// -------------------------------------------------------------------

class AttributeContext final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.rpc.context.AttributeContext) */ {
 public:
  inline AttributeContext() : AttributeContext(nullptr) {}
  ~AttributeContext() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeContext(::google::protobuf::internal::ConstantInitialized);

  inline AttributeContext(const AttributeContext& from)
      : AttributeContext(nullptr, from) {}
  AttributeContext(AttributeContext&& from) noexcept
    : AttributeContext() {
    *this = ::std::move(from);
  }

  inline AttributeContext& operator=(const AttributeContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeContext& operator=(AttributeContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeContext* internal_default_instance() {
    return reinterpret_cast<const AttributeContext*>(
               &_AttributeContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AttributeContext& a, AttributeContext& b) {
    a.Swap(&b);
  }
  inline void Swap(AttributeContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeContext* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeContext* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AttributeContext>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttributeContext& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AttributeContext& from) {
    AttributeContext::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AttributeContext* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "google.rpc.context.AttributeContext";
  }
  protected:
  explicit AttributeContext(::google::protobuf::Arena* arena);
  AttributeContext(::google::protobuf::Arena* arena, const AttributeContext& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Peer = AttributeContext_Peer;
  using Api = AttributeContext_Api;
  using Auth = AttributeContext_Auth;
  using Request = AttributeContext_Request;
  using Response = AttributeContext_Response;
  using Resource = AttributeContext_Resource;

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionsFieldNumber = 8,
    kSourceFieldNumber = 1,
    kDestinationFieldNumber = 2,
    kRequestFieldNumber = 3,
    kResponseFieldNumber = 4,
    kResourceFieldNumber = 5,
    kApiFieldNumber = 6,
    kOriginFieldNumber = 7,
  };
  // repeated .google.protobuf.Any extensions = 8 [json_name = "extensions"];
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;

  public:
  void clear_extensions() ;
  ::google::protobuf::Any* mutable_extensions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >*
      mutable_extensions();
  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& _internal_extensions() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* _internal_mutable_extensions();
  public:
  const ::google::protobuf::Any& extensions(int index) const;
  ::google::protobuf::Any* add_extensions();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any >&
      extensions() const;
  // .google.rpc.context.AttributeContext.Peer source = 1 [json_name = "source"];
  bool has_source() const;
  void clear_source() ;
  const ::google::rpc::context::AttributeContext_Peer& source() const;
  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Peer* release_source();
  ::google::rpc::context::AttributeContext_Peer* mutable_source();
  void set_allocated_source(::google::rpc::context::AttributeContext_Peer* value);
  void unsafe_arena_set_allocated_source(::google::rpc::context::AttributeContext_Peer* value);
  ::google::rpc::context::AttributeContext_Peer* unsafe_arena_release_source();

  private:
  const ::google::rpc::context::AttributeContext_Peer& _internal_source() const;
  ::google::rpc::context::AttributeContext_Peer* _internal_mutable_source();

  public:
  // .google.rpc.context.AttributeContext.Peer destination = 2 [json_name = "destination"];
  bool has_destination() const;
  void clear_destination() ;
  const ::google::rpc::context::AttributeContext_Peer& destination() const;
  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Peer* release_destination();
  ::google::rpc::context::AttributeContext_Peer* mutable_destination();
  void set_allocated_destination(::google::rpc::context::AttributeContext_Peer* value);
  void unsafe_arena_set_allocated_destination(::google::rpc::context::AttributeContext_Peer* value);
  ::google::rpc::context::AttributeContext_Peer* unsafe_arena_release_destination();

  private:
  const ::google::rpc::context::AttributeContext_Peer& _internal_destination() const;
  ::google::rpc::context::AttributeContext_Peer* _internal_mutable_destination();

  public:
  // .google.rpc.context.AttributeContext.Request request = 3 [json_name = "request"];
  bool has_request() const;
  void clear_request() ;
  const ::google::rpc::context::AttributeContext_Request& request() const;
  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Request* release_request();
  ::google::rpc::context::AttributeContext_Request* mutable_request();
  void set_allocated_request(::google::rpc::context::AttributeContext_Request* value);
  void unsafe_arena_set_allocated_request(::google::rpc::context::AttributeContext_Request* value);
  ::google::rpc::context::AttributeContext_Request* unsafe_arena_release_request();

  private:
  const ::google::rpc::context::AttributeContext_Request& _internal_request() const;
  ::google::rpc::context::AttributeContext_Request* _internal_mutable_request();

  public:
  // .google.rpc.context.AttributeContext.Response response = 4 [json_name = "response"];
  bool has_response() const;
  void clear_response() ;
  const ::google::rpc::context::AttributeContext_Response& response() const;
  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Response* release_response();
  ::google::rpc::context::AttributeContext_Response* mutable_response();
  void set_allocated_response(::google::rpc::context::AttributeContext_Response* value);
  void unsafe_arena_set_allocated_response(::google::rpc::context::AttributeContext_Response* value);
  ::google::rpc::context::AttributeContext_Response* unsafe_arena_release_response();

  private:
  const ::google::rpc::context::AttributeContext_Response& _internal_response() const;
  ::google::rpc::context::AttributeContext_Response* _internal_mutable_response();

  public:
  // .google.rpc.context.AttributeContext.Resource resource = 5 [json_name = "resource"];
  bool has_resource() const;
  void clear_resource() ;
  const ::google::rpc::context::AttributeContext_Resource& resource() const;
  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Resource* release_resource();
  ::google::rpc::context::AttributeContext_Resource* mutable_resource();
  void set_allocated_resource(::google::rpc::context::AttributeContext_Resource* value);
  void unsafe_arena_set_allocated_resource(::google::rpc::context::AttributeContext_Resource* value);
  ::google::rpc::context::AttributeContext_Resource* unsafe_arena_release_resource();

  private:
  const ::google::rpc::context::AttributeContext_Resource& _internal_resource() const;
  ::google::rpc::context::AttributeContext_Resource* _internal_mutable_resource();

  public:
  // .google.rpc.context.AttributeContext.Api api = 6 [json_name = "api"];
  bool has_api() const;
  void clear_api() ;
  const ::google::rpc::context::AttributeContext_Api& api() const;
  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Api* release_api();
  ::google::rpc::context::AttributeContext_Api* mutable_api();
  void set_allocated_api(::google::rpc::context::AttributeContext_Api* value);
  void unsafe_arena_set_allocated_api(::google::rpc::context::AttributeContext_Api* value);
  ::google::rpc::context::AttributeContext_Api* unsafe_arena_release_api();

  private:
  const ::google::rpc::context::AttributeContext_Api& _internal_api() const;
  ::google::rpc::context::AttributeContext_Api* _internal_mutable_api();

  public:
  // .google.rpc.context.AttributeContext.Peer origin = 7 [json_name = "origin"];
  bool has_origin() const;
  void clear_origin() ;
  const ::google::rpc::context::AttributeContext_Peer& origin() const;
  PROTOBUF_NODISCARD ::google::rpc::context::AttributeContext_Peer* release_origin();
  ::google::rpc::context::AttributeContext_Peer* mutable_origin();
  void set_allocated_origin(::google::rpc::context::AttributeContext_Peer* value);
  void unsafe_arena_set_allocated_origin(::google::rpc::context::AttributeContext_Peer* value);
  ::google::rpc::context::AttributeContext_Peer* unsafe_arena_release_origin();

  private:
  const ::google::rpc::context::AttributeContext_Peer& _internal_origin() const;
  ::google::rpc::context::AttributeContext_Peer* _internal_mutable_origin();

  public:
  // @@protoc_insertion_point(class_scope:google.rpc.context.AttributeContext)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 8,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Any > extensions_;
    ::google::rpc::context::AttributeContext_Peer* source_;
    ::google::rpc::context::AttributeContext_Peer* destination_;
    ::google::rpc::context::AttributeContext_Request* request_;
    ::google::rpc::context::AttributeContext_Response* response_;
    ::google::rpc::context::AttributeContext_Resource* resource_;
    ::google::rpc::context::AttributeContext_Api* api_;
    ::google::rpc::context::AttributeContext_Peer* origin_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AttributeContext_Peer

// string ip = 1 [json_name = "ip"];
inline void AttributeContext_Peer::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& AttributeContext_Peer::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Peer.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Peer::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Peer.ip)
}
inline std::string* AttributeContext_Peer::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Peer.ip)
  return _s;
}
inline const std::string& AttributeContext_Peer::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void AttributeContext_Peer::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* AttributeContext_Peer::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* AttributeContext_Peer::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Peer.ip)
  return _impl_.ip_.Release();
}
inline void AttributeContext_Peer::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Peer.ip)
}

// int64 port = 2 [json_name = "port"];
inline void AttributeContext_Peer::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = ::int64_t{0};
}
inline ::int64_t AttributeContext_Peer::port() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Peer.port)
  return _internal_port();
}
inline void AttributeContext_Peer::set_port(::int64_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Peer.port)
}
inline ::int64_t AttributeContext_Peer::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void AttributeContext_Peer::_internal_set_port(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// map<string, string> labels = 6 [json_name = "labels"];
inline int AttributeContext_Peer::_internal_labels_size() const {
  return _internal_labels().size();
}
inline int AttributeContext_Peer::labels_size() const {
  return _internal_labels_size();
}
inline void AttributeContext_Peer::clear_labels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.labels_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Peer::_internal_labels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.labels_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Peer::labels() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Peer.labels)
  return _internal_labels();
}
inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Peer::_internal_mutable_labels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.labels_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Peer::mutable_labels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Peer.labels)
  return _internal_mutable_labels();
}

// string principal = 7 [json_name = "principal"];
inline void AttributeContext_Peer::clear_principal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.principal_.ClearToEmpty();
}
inline const std::string& AttributeContext_Peer::principal() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Peer.principal)
  return _internal_principal();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Peer::set_principal(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.principal_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Peer.principal)
}
inline std::string* AttributeContext_Peer::mutable_principal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_principal();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Peer.principal)
  return _s;
}
inline const std::string& AttributeContext_Peer::_internal_principal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.principal_.Get();
}
inline void AttributeContext_Peer::_internal_set_principal(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.principal_.Set(value, GetArena());
}
inline std::string* AttributeContext_Peer::_internal_mutable_principal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.principal_.Mutable( GetArena());
}
inline std::string* AttributeContext_Peer::release_principal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Peer.principal)
  return _impl_.principal_.Release();
}
inline void AttributeContext_Peer::set_allocated_principal(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.principal_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.principal_.IsDefault()) {
          _impl_.principal_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Peer.principal)
}

// string region_code = 8 [json_name = "regionCode"];
inline void AttributeContext_Peer::clear_region_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.region_code_.ClearToEmpty();
}
inline const std::string& AttributeContext_Peer::region_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Peer.region_code)
  return _internal_region_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Peer::set_region_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.region_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Peer.region_code)
}
inline std::string* AttributeContext_Peer::mutable_region_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_region_code();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Peer.region_code)
  return _s;
}
inline const std::string& AttributeContext_Peer::_internal_region_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.region_code_.Get();
}
inline void AttributeContext_Peer::_internal_set_region_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.region_code_.Set(value, GetArena());
}
inline std::string* AttributeContext_Peer::_internal_mutable_region_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.region_code_.Mutable( GetArena());
}
inline std::string* AttributeContext_Peer::release_region_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Peer.region_code)
  return _impl_.region_code_.Release();
}
inline void AttributeContext_Peer::set_allocated_region_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.region_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.region_code_.IsDefault()) {
          _impl_.region_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Peer.region_code)
}

// -------------------------------------------------------------------

// AttributeContext_Api

// string service = 1 [json_name = "service"];
inline void AttributeContext_Api::clear_service() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.service_.ClearToEmpty();
}
inline const std::string& AttributeContext_Api::service() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Api.service)
  return _internal_service();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Api::set_service(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.service_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Api.service)
}
inline std::string* AttributeContext_Api::mutable_service() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Api.service)
  return _s;
}
inline const std::string& AttributeContext_Api::_internal_service() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.service_.Get();
}
inline void AttributeContext_Api::_internal_set_service(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.service_.Set(value, GetArena());
}
inline std::string* AttributeContext_Api::_internal_mutable_service() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.service_.Mutable( GetArena());
}
inline std::string* AttributeContext_Api::release_service() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Api.service)
  return _impl_.service_.Release();
}
inline void AttributeContext_Api::set_allocated_service(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.service_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_.IsDefault()) {
          _impl_.service_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Api.service)
}

// string operation = 2 [json_name = "operation"];
inline void AttributeContext_Api::clear_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operation_.ClearToEmpty();
}
inline const std::string& AttributeContext_Api::operation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Api.operation)
  return _internal_operation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Api::set_operation(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.operation_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Api.operation)
}
inline std::string* AttributeContext_Api::mutable_operation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Api.operation)
  return _s;
}
inline const std::string& AttributeContext_Api::_internal_operation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.operation_.Get();
}
inline void AttributeContext_Api::_internal_set_operation(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.operation_.Set(value, GetArena());
}
inline std::string* AttributeContext_Api::_internal_mutable_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.operation_.Mutable( GetArena());
}
inline std::string* AttributeContext_Api::release_operation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Api.operation)
  return _impl_.operation_.Release();
}
inline void AttributeContext_Api::set_allocated_operation(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.operation_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.operation_.IsDefault()) {
          _impl_.operation_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Api.operation)
}

// string protocol = 3 [json_name = "protocol"];
inline void AttributeContext_Api::clear_protocol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.protocol_.ClearToEmpty();
}
inline const std::string& AttributeContext_Api::protocol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Api.protocol)
  return _internal_protocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Api::set_protocol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Api.protocol)
}
inline std::string* AttributeContext_Api::mutable_protocol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Api.protocol)
  return _s;
}
inline const std::string& AttributeContext_Api::_internal_protocol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.protocol_.Get();
}
inline void AttributeContext_Api::_internal_set_protocol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.protocol_.Set(value, GetArena());
}
inline std::string* AttributeContext_Api::_internal_mutable_protocol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.protocol_.Mutable( GetArena());
}
inline std::string* AttributeContext_Api::release_protocol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Api.protocol)
  return _impl_.protocol_.Release();
}
inline void AttributeContext_Api::set_allocated_protocol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.protocol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.protocol_.IsDefault()) {
          _impl_.protocol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Api.protocol)
}

// string version = 4 [json_name = "version"];
inline void AttributeContext_Api::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& AttributeContext_Api::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Api.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Api::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Api.version)
}
inline std::string* AttributeContext_Api::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Api.version)
  return _s;
}
inline const std::string& AttributeContext_Api::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void AttributeContext_Api::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* AttributeContext_Api::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* AttributeContext_Api::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Api.version)
  return _impl_.version_.Release();
}
inline void AttributeContext_Api::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Api.version)
}

// -------------------------------------------------------------------

// AttributeContext_Auth

// string principal = 1 [json_name = "principal"];
inline void AttributeContext_Auth::clear_principal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.principal_.ClearToEmpty();
}
inline const std::string& AttributeContext_Auth::principal() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.principal)
  return _internal_principal();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Auth::set_principal(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.principal_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.principal)
}
inline std::string* AttributeContext_Auth::mutable_principal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_principal();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.principal)
  return _s;
}
inline const std::string& AttributeContext_Auth::_internal_principal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.principal_.Get();
}
inline void AttributeContext_Auth::_internal_set_principal(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.principal_.Set(value, GetArena());
}
inline std::string* AttributeContext_Auth::_internal_mutable_principal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.principal_.Mutable( GetArena());
}
inline std::string* AttributeContext_Auth::release_principal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Auth.principal)
  return _impl_.principal_.Release();
}
inline void AttributeContext_Auth::set_allocated_principal(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.principal_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.principal_.IsDefault()) {
          _impl_.principal_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Auth.principal)
}

// repeated string audiences = 2 [json_name = "audiences"];
inline int AttributeContext_Auth::_internal_audiences_size() const {
  return _internal_audiences().size();
}
inline int AttributeContext_Auth::audiences_size() const {
  return _internal_audiences_size();
}
inline void AttributeContext_Auth::clear_audiences() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.audiences_.Clear();
}
inline std::string* AttributeContext_Auth::add_audiences()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_audiences()->Add();
  // @@protoc_insertion_point(field_add_mutable:google.rpc.context.AttributeContext.Auth.audiences)
  return _s;
}
inline const std::string& AttributeContext_Auth::audiences(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.audiences)
  return _internal_audiences().Get(index);
}
inline std::string* AttributeContext_Auth::mutable_audiences(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.audiences)
  return _internal_mutable_audiences()->Mutable(index);
}
inline void AttributeContext_Auth::set_audiences(int index, const std::string& value) {
  _internal_mutable_audiences()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::set_audiences(int index, std::string&& value) {
  _internal_mutable_audiences()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::set_audiences(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_audiences()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::set_audiences(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_audiences()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::set_audiences(int index, absl::string_view value) {
  _internal_mutable_audiences()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::add_audiences(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_audiences()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::add_audiences(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_audiences()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::add_audiences(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_audiences()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::add_audiences(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_audiences()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.rpc.context.AttributeContext.Auth.audiences)
}
inline void AttributeContext_Auth::add_audiences(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_audiences()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:google.rpc.context.AttributeContext.Auth.audiences)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AttributeContext_Auth::audiences() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.rpc.context.AttributeContext.Auth.audiences)
  return _internal_audiences();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AttributeContext_Auth::mutable_audiences() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.context.AttributeContext.Auth.audiences)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_audiences();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AttributeContext_Auth::_internal_audiences() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.audiences_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AttributeContext_Auth::_internal_mutable_audiences() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.audiences_;
}

// string presenter = 3 [json_name = "presenter"];
inline void AttributeContext_Auth::clear_presenter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.presenter_.ClearToEmpty();
}
inline const std::string& AttributeContext_Auth::presenter() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.presenter)
  return _internal_presenter();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Auth::set_presenter(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.presenter_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.presenter)
}
inline std::string* AttributeContext_Auth::mutable_presenter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_presenter();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.presenter)
  return _s;
}
inline const std::string& AttributeContext_Auth::_internal_presenter() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.presenter_.Get();
}
inline void AttributeContext_Auth::_internal_set_presenter(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.presenter_.Set(value, GetArena());
}
inline std::string* AttributeContext_Auth::_internal_mutable_presenter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.presenter_.Mutable( GetArena());
}
inline std::string* AttributeContext_Auth::release_presenter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Auth.presenter)
  return _impl_.presenter_.Release();
}
inline void AttributeContext_Auth::set_allocated_presenter(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.presenter_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.presenter_.IsDefault()) {
          _impl_.presenter_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Auth.presenter)
}

// .google.protobuf.Struct claims = 4 [json_name = "claims"];
inline bool AttributeContext_Auth::has_claims() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.claims_ != nullptr);
  return value;
}
inline const ::google::protobuf::Struct& AttributeContext_Auth::_internal_claims() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Struct* p = _impl_.claims_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Struct&>(::google::protobuf::_Struct_default_instance_);
}
inline const ::google::protobuf::Struct& AttributeContext_Auth::claims() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.claims)
  return _internal_claims();
}
inline void AttributeContext_Auth::unsafe_arena_set_allocated_claims(::google::protobuf::Struct* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.claims_);
  }
  _impl_.claims_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Auth.claims)
}
inline ::google::protobuf::Struct* AttributeContext_Auth::release_claims() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* released = _impl_.claims_;
  _impl_.claims_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Struct* AttributeContext_Auth::unsafe_arena_release_claims() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Auth.claims)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* temp = _impl_.claims_;
  _impl_.claims_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* AttributeContext_Auth::_internal_mutable_claims() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.claims_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArena());
    _impl_.claims_ = reinterpret_cast<::google::protobuf::Struct*>(p);
  }
  return _impl_.claims_;
}
inline ::google::protobuf::Struct* AttributeContext_Auth::mutable_claims() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Struct* _msg = _internal_mutable_claims();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.claims)
  return _msg;
}
inline void AttributeContext_Auth::set_allocated_claims(::google::protobuf::Struct* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.claims_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.claims_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Auth.claims)
}

// repeated string access_levels = 5 [json_name = "accessLevels"];
inline int AttributeContext_Auth::_internal_access_levels_size() const {
  return _internal_access_levels().size();
}
inline int AttributeContext_Auth::access_levels_size() const {
  return _internal_access_levels_size();
}
inline void AttributeContext_Auth::clear_access_levels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.access_levels_.Clear();
}
inline std::string* AttributeContext_Auth::add_access_levels()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_access_levels()->Add();
  // @@protoc_insertion_point(field_add_mutable:google.rpc.context.AttributeContext.Auth.access_levels)
  return _s;
}
inline const std::string& AttributeContext_Auth::access_levels(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Auth.access_levels)
  return _internal_access_levels().Get(index);
}
inline std::string* AttributeContext_Auth::mutable_access_levels(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Auth.access_levels)
  return _internal_mutable_access_levels()->Mutable(index);
}
inline void AttributeContext_Auth::set_access_levels(int index, const std::string& value) {
  _internal_mutable_access_levels()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::set_access_levels(int index, std::string&& value) {
  _internal_mutable_access_levels()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::set_access_levels(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_access_levels()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::set_access_levels(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_access_levels()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::set_access_levels(int index, absl::string_view value) {
  _internal_mutable_access_levels()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::add_access_levels(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_access_levels()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::add_access_levels(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_access_levels()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::add_access_levels(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_access_levels()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::add_access_levels(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_access_levels()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline void AttributeContext_Auth::add_access_levels(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_access_levels()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:google.rpc.context.AttributeContext.Auth.access_levels)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AttributeContext_Auth::access_levels() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.rpc.context.AttributeContext.Auth.access_levels)
  return _internal_access_levels();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AttributeContext_Auth::mutable_access_levels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.context.AttributeContext.Auth.access_levels)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_access_levels();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AttributeContext_Auth::_internal_access_levels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.access_levels_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AttributeContext_Auth::_internal_mutable_access_levels() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.access_levels_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AttributeContext_Request

// string id = 1 [json_name = "id"];
inline void AttributeContext_Request::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.id)
}
inline std::string* AttributeContext_Request::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.id)
  return _s;
}
inline const std::string& AttributeContext_Request::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void AttributeContext_Request::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* AttributeContext_Request::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* AttributeContext_Request::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.id)
  return _impl_.id_.Release();
}
inline void AttributeContext_Request::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.id)
}

// string method = 2 [json_name = "method"];
inline void AttributeContext_Request::clear_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::method() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.method)
  return _internal_method();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_method(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.method)
}
inline std::string* AttributeContext_Request::mutable_method() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.method)
  return _s;
}
inline const std::string& AttributeContext_Request::_internal_method() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.method_.Get();
}
inline void AttributeContext_Request::_internal_set_method(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.method_.Set(value, GetArena());
}
inline std::string* AttributeContext_Request::_internal_mutable_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.method_.Mutable( GetArena());
}
inline std::string* AttributeContext_Request::release_method() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.method)
  return _impl_.method_.Release();
}
inline void AttributeContext_Request::set_allocated_method(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.method_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.method_.IsDefault()) {
          _impl_.method_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.method)
}

// map<string, string> headers = 3 [json_name = "headers"];
inline int AttributeContext_Request::_internal_headers_size() const {
  return _internal_headers().size();
}
inline int AttributeContext_Request::headers_size() const {
  return _internal_headers_size();
}
inline void AttributeContext_Request::clear_headers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.headers_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Request::_internal_headers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.headers_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Request::headers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Request.headers)
  return _internal_headers();
}
inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Request::_internal_mutable_headers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.headers_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Request::mutable_headers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Request.headers)
  return _internal_mutable_headers();
}

// string path = 4 [json_name = "path"];
inline void AttributeContext_Request::clear_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.path)
}
inline std::string* AttributeContext_Request::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.path)
  return _s;
}
inline const std::string& AttributeContext_Request::_internal_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.path_.Get();
}
inline void AttributeContext_Request::_internal_set_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.path_.Set(value, GetArena());
}
inline std::string* AttributeContext_Request::_internal_mutable_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* AttributeContext_Request::release_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.path)
  return _impl_.path_.Release();
}
inline void AttributeContext_Request::set_allocated_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.path)
}

// string host = 5 [json_name = "host"];
inline void AttributeContext_Request::clear_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.host_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::host() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_host(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.host)
}
inline std::string* AttributeContext_Request::mutable_host() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.host)
  return _s;
}
inline const std::string& AttributeContext_Request::_internal_host() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.host_.Get();
}
inline void AttributeContext_Request::_internal_set_host(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.host_.Set(value, GetArena());
}
inline std::string* AttributeContext_Request::_internal_mutable_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.host_.Mutable( GetArena());
}
inline std::string* AttributeContext_Request::release_host() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.host)
  return _impl_.host_.Release();
}
inline void AttributeContext_Request::set_allocated_host(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.host_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_.IsDefault()) {
          _impl_.host_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.host)
}

// string scheme = 6 [json_name = "scheme"];
inline void AttributeContext_Request::clear_scheme() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scheme_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::scheme() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.scheme)
  return _internal_scheme();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_scheme(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.scheme_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.scheme)
}
inline std::string* AttributeContext_Request::mutable_scheme() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_scheme();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.scheme)
  return _s;
}
inline const std::string& AttributeContext_Request::_internal_scheme() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scheme_.Get();
}
inline void AttributeContext_Request::_internal_set_scheme(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.scheme_.Set(value, GetArena());
}
inline std::string* AttributeContext_Request::_internal_mutable_scheme() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.scheme_.Mutable( GetArena());
}
inline std::string* AttributeContext_Request::release_scheme() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.scheme)
  return _impl_.scheme_.Release();
}
inline void AttributeContext_Request::set_allocated_scheme(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scheme_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.scheme_.IsDefault()) {
          _impl_.scheme_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.scheme)
}

// string query = 7 [json_name = "query"];
inline void AttributeContext_Request::clear_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.query_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::query() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.query)
  return _internal_query();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_query(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.query_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.query)
}
inline std::string* AttributeContext_Request::mutable_query() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.query)
  return _s;
}
inline const std::string& AttributeContext_Request::_internal_query() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.query_.Get();
}
inline void AttributeContext_Request::_internal_set_query(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.query_.Set(value, GetArena());
}
inline std::string* AttributeContext_Request::_internal_mutable_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.query_.Mutable( GetArena());
}
inline std::string* AttributeContext_Request::release_query() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.query)
  return _impl_.query_.Release();
}
inline void AttributeContext_Request::set_allocated_query(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.query_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.query_.IsDefault()) {
          _impl_.query_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.query)
}

// .google.protobuf.Timestamp time = 9 [json_name = "time"];
inline bool AttributeContext_Request::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AttributeContext_Request::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AttributeContext_Request::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.time)
  return _internal_time();
}
inline void AttributeContext_Request::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Request.time)
}
inline ::google::protobuf::Timestamp* AttributeContext_Request::release_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AttributeContext_Request::unsafe_arena_release_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AttributeContext_Request::_internal_mutable_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* AttributeContext_Request::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.time)
  return _msg;
}
inline void AttributeContext_Request::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.time)
}

// int64 size = 10 [json_name = "size"];
inline void AttributeContext_Request::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.size_ = ::int64_t{0};
}
inline ::int64_t AttributeContext_Request::size() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.size)
  return _internal_size();
}
inline void AttributeContext_Request::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.size)
}
inline ::int64_t AttributeContext_Request::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void AttributeContext_Request::_internal_set_size(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.size_ = value;
}

// string protocol = 11 [json_name = "protocol"];
inline void AttributeContext_Request::clear_protocol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.protocol_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::protocol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.protocol)
  return _internal_protocol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_protocol(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.protocol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.protocol)
}
inline std::string* AttributeContext_Request::mutable_protocol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.protocol)
  return _s;
}
inline const std::string& AttributeContext_Request::_internal_protocol() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.protocol_.Get();
}
inline void AttributeContext_Request::_internal_set_protocol(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.protocol_.Set(value, GetArena());
}
inline std::string* AttributeContext_Request::_internal_mutable_protocol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.protocol_.Mutable( GetArena());
}
inline std::string* AttributeContext_Request::release_protocol() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.protocol)
  return _impl_.protocol_.Release();
}
inline void AttributeContext_Request::set_allocated_protocol(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.protocol_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.protocol_.IsDefault()) {
          _impl_.protocol_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.protocol)
}

// string reason = 12 [json_name = "reason"];
inline void AttributeContext_Request::clear_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& AttributeContext_Request::reason() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.reason)
  return _internal_reason();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Request::set_reason(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Request.reason)
}
inline std::string* AttributeContext_Request::mutable_reason() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.reason)
  return _s;
}
inline const std::string& AttributeContext_Request::_internal_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reason_.Get();
}
inline void AttributeContext_Request::_internal_set_reason(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reason_.Set(value, GetArena());
}
inline std::string* AttributeContext_Request::_internal_mutable_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.reason_.Mutable( GetArena());
}
inline std::string* AttributeContext_Request::release_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.reason)
  return _impl_.reason_.Release();
}
inline void AttributeContext_Request::set_allocated_reason(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reason_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.reason_.IsDefault()) {
          _impl_.reason_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.reason)
}

// .google.rpc.context.AttributeContext.Auth auth = 13 [json_name = "auth"];
inline bool AttributeContext_Request::has_auth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.auth_ != nullptr);
  return value;
}
inline void AttributeContext_Request::clear_auth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.auth_ != nullptr) _impl_.auth_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::google::rpc::context::AttributeContext_Auth& AttributeContext_Request::_internal_auth() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::rpc::context::AttributeContext_Auth* p = _impl_.auth_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Auth&>(::google::rpc::context::_AttributeContext_Auth_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Auth& AttributeContext_Request::auth() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Request.auth)
  return _internal_auth();
}
inline void AttributeContext_Request::unsafe_arena_set_allocated_auth(::google::rpc::context::AttributeContext_Auth* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.auth_);
  }
  _impl_.auth_ = reinterpret_cast<::google::rpc::context::AttributeContext_Auth*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Request.auth)
}
inline ::google::rpc::context::AttributeContext_Auth* AttributeContext_Request::release_auth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::rpc::context::AttributeContext_Auth* released = _impl_.auth_;
  _impl_.auth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::rpc::context::AttributeContext_Auth* AttributeContext_Request::unsafe_arena_release_auth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Request.auth)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::rpc::context::AttributeContext_Auth* temp = _impl_.auth_;
  _impl_.auth_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Auth* AttributeContext_Request::_internal_mutable_auth() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Auth>(GetArena());
    _impl_.auth_ = reinterpret_cast<::google::rpc::context::AttributeContext_Auth*>(p);
  }
  return _impl_.auth_;
}
inline ::google::rpc::context::AttributeContext_Auth* AttributeContext_Request::mutable_auth() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::rpc::context::AttributeContext_Auth* _msg = _internal_mutable_auth();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Request.auth)
  return _msg;
}
inline void AttributeContext_Request::set_allocated_auth(::google::rpc::context::AttributeContext_Auth* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::rpc::context::AttributeContext_Auth*>(_impl_.auth_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::rpc::context::AttributeContext_Auth*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.auth_ = reinterpret_cast<::google::rpc::context::AttributeContext_Auth*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Request.auth)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AttributeContext_Response

// int64 code = 1 [json_name = "code"];
inline void AttributeContext_Response::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = ::int64_t{0};
}
inline ::int64_t AttributeContext_Response::code() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Response.code)
  return _internal_code();
}
inline void AttributeContext_Response::set_code(::int64_t value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Response.code)
}
inline ::int64_t AttributeContext_Response::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.code_;
}
inline void AttributeContext_Response::_internal_set_code(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_ = value;
}

// int64 size = 2 [json_name = "size"];
inline void AttributeContext_Response::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.size_ = ::int64_t{0};
}
inline ::int64_t AttributeContext_Response::size() const {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Response.size)
  return _internal_size();
}
inline void AttributeContext_Response::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Response.size)
}
inline ::int64_t AttributeContext_Response::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void AttributeContext_Response::_internal_set_size(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.size_ = value;
}

// map<string, string> headers = 3 [json_name = "headers"];
inline int AttributeContext_Response::_internal_headers_size() const {
  return _internal_headers().size();
}
inline int AttributeContext_Response::headers_size() const {
  return _internal_headers_size();
}
inline void AttributeContext_Response::clear_headers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.headers_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Response::_internal_headers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.headers_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Response::headers() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Response.headers)
  return _internal_headers();
}
inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Response::_internal_mutable_headers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.headers_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Response::mutable_headers() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Response.headers)
  return _internal_mutable_headers();
}

// .google.protobuf.Timestamp time = 4 [json_name = "time"];
inline bool AttributeContext_Response::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AttributeContext_Response::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AttributeContext_Response::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Response.time)
  return _internal_time();
}
inline void AttributeContext_Response::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Response.time)
}
inline ::google::protobuf::Timestamp* AttributeContext_Response::release_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AttributeContext_Response::unsafe_arena_release_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Response.time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AttributeContext_Response::_internal_mutable_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* AttributeContext_Response::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Response.time)
  return _msg;
}
inline void AttributeContext_Response::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Response.time)
}

// .google.protobuf.Duration backend_latency = 5 [json_name = "backendLatency"];
inline bool AttributeContext_Response::has_backend_latency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.backend_latency_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& AttributeContext_Response::_internal_backend_latency() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Duration* p = _impl_.backend_latency_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& AttributeContext_Response::backend_latency() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Response.backend_latency)
  return _internal_backend_latency();
}
inline void AttributeContext_Response::unsafe_arena_set_allocated_backend_latency(::google::protobuf::Duration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.backend_latency_);
  }
  _impl_.backend_latency_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Response.backend_latency)
}
inline ::google::protobuf::Duration* AttributeContext_Response::release_backend_latency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.backend_latency_;
  _impl_.backend_latency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* AttributeContext_Response::unsafe_arena_release_backend_latency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Response.backend_latency)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.backend_latency_;
  _impl_.backend_latency_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* AttributeContext_Response::_internal_mutable_backend_latency() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.backend_latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArena());
    _impl_.backend_latency_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.backend_latency_;
}
inline ::google::protobuf::Duration* AttributeContext_Response::mutable_backend_latency() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Duration* _msg = _internal_mutable_backend_latency();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Response.backend_latency)
  return _msg;
}
inline void AttributeContext_Response::set_allocated_backend_latency(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.backend_latency_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.backend_latency_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Response.backend_latency)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AttributeContext_Resource

// string service = 1 [json_name = "service"];
inline void AttributeContext_Resource::clear_service() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.service_.ClearToEmpty();
}
inline const std::string& AttributeContext_Resource::service() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.service)
  return _internal_service();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_service(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.service_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.service)
}
inline std::string* AttributeContext_Resource::mutable_service() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.service)
  return _s;
}
inline const std::string& AttributeContext_Resource::_internal_service() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.service_.Get();
}
inline void AttributeContext_Resource::_internal_set_service(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.service_.Set(value, GetArena());
}
inline std::string* AttributeContext_Resource::_internal_mutable_service() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.service_.Mutable( GetArena());
}
inline std::string* AttributeContext_Resource::release_service() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.service)
  return _impl_.service_.Release();
}
inline void AttributeContext_Resource::set_allocated_service(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.service_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_.IsDefault()) {
          _impl_.service_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.service)
}

// string name = 2 [json_name = "name"];
inline void AttributeContext_Resource::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& AttributeContext_Resource::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.name)
}
inline std::string* AttributeContext_Resource::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.name)
  return _s;
}
inline const std::string& AttributeContext_Resource::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void AttributeContext_Resource::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* AttributeContext_Resource::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* AttributeContext_Resource::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.name)
  return _impl_.name_.Release();
}
inline void AttributeContext_Resource::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.name)
}

// string type = 3 [json_name = "type"];
inline void AttributeContext_Resource::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& AttributeContext_Resource::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.type)
}
inline std::string* AttributeContext_Resource::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.type)
  return _s;
}
inline const std::string& AttributeContext_Resource::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void AttributeContext_Resource::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* AttributeContext_Resource::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* AttributeContext_Resource::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.type)
  return _impl_.type_.Release();
}
inline void AttributeContext_Resource::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.type)
}

// map<string, string> labels = 4 [json_name = "labels"];
inline int AttributeContext_Resource::_internal_labels_size() const {
  return _internal_labels().size();
}
inline int AttributeContext_Resource::labels_size() const {
  return _internal_labels_size();
}
inline void AttributeContext_Resource::clear_labels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.labels_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Resource::_internal_labels() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.labels_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Resource::labels() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Resource.labels)
  return _internal_labels();
}
inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Resource::_internal_mutable_labels() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.labels_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Resource::mutable_labels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Resource.labels)
  return _internal_mutable_labels();
}

// string uid = 5 [json_name = "uid"];
inline void AttributeContext_Resource::clear_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.ClearToEmpty();
}
inline const std::string& AttributeContext_Resource::uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.uid)
  return _internal_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_uid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.uid)
}
inline std::string* AttributeContext_Resource::mutable_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.uid)
  return _s;
}
inline const std::string& AttributeContext_Resource::_internal_uid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uid_.Get();
}
inline void AttributeContext_Resource::_internal_set_uid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uid_.Set(value, GetArena());
}
inline std::string* AttributeContext_Resource::_internal_mutable_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.uid_.Mutable( GetArena());
}
inline std::string* AttributeContext_Resource::release_uid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.uid)
  return _impl_.uid_.Release();
}
inline void AttributeContext_Resource::set_allocated_uid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.uid_.IsDefault()) {
          _impl_.uid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.uid)
}

// map<string, string> annotations = 6 [json_name = "annotations"];
inline int AttributeContext_Resource::_internal_annotations_size() const {
  return _internal_annotations().size();
}
inline int AttributeContext_Resource::annotations_size() const {
  return _internal_annotations_size();
}
inline void AttributeContext_Resource::clear_annotations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.annotations_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Resource::_internal_annotations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.annotations_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& AttributeContext_Resource::annotations() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:google.rpc.context.AttributeContext.Resource.annotations)
  return _internal_annotations();
}
inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Resource::_internal_mutable_annotations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.annotations_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* AttributeContext_Resource::mutable_annotations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:google.rpc.context.AttributeContext.Resource.annotations)
  return _internal_mutable_annotations();
}

// string display_name = 7 [json_name = "displayName"];
inline void AttributeContext_Resource::clear_display_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& AttributeContext_Resource::display_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.display_name)
  return _internal_display_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_display_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.display_name)
}
inline std::string* AttributeContext_Resource::mutable_display_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.display_name)
  return _s;
}
inline const std::string& AttributeContext_Resource::_internal_display_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.display_name_.Get();
}
inline void AttributeContext_Resource::_internal_set_display_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.display_name_.Set(value, GetArena());
}
inline std::string* AttributeContext_Resource::_internal_mutable_display_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.display_name_.Mutable( GetArena());
}
inline std::string* AttributeContext_Resource::release_display_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.display_name)
  return _impl_.display_name_.Release();
}
inline void AttributeContext_Resource::set_allocated_display_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.display_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.display_name_.IsDefault()) {
          _impl_.display_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.display_name)
}

// .google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];
inline bool AttributeContext_Resource::has_create_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.create_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AttributeContext_Resource::_internal_create_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.create_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AttributeContext_Resource::create_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.create_time)
  return _internal_create_time();
}
inline void AttributeContext_Resource::unsafe_arena_set_allocated_create_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.create_time_);
  }
  _impl_.create_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Resource.create_time)
}
inline ::google::protobuf::Timestamp* AttributeContext_Resource::release_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AttributeContext_Resource::unsafe_arena_release_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.create_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.create_time_;
  _impl_.create_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AttributeContext_Resource::_internal_mutable_create_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.create_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.create_time_;
}
inline ::google::protobuf::Timestamp* AttributeContext_Resource::mutable_create_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_create_time();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.create_time)
  return _msg;
}
inline void AttributeContext_Resource::set_allocated_create_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.create_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.create_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.create_time)
}

// .google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];
inline bool AttributeContext_Resource::has_update_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.update_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AttributeContext_Resource::_internal_update_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AttributeContext_Resource::update_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.update_time)
  return _internal_update_time();
}
inline void AttributeContext_Resource::unsafe_arena_set_allocated_update_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Resource.update_time)
}
inline ::google::protobuf::Timestamp* AttributeContext_Resource::release_update_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AttributeContext_Resource::unsafe_arena_release_update_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.update_time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AttributeContext_Resource::_internal_mutable_update_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.update_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.update_time_;
}
inline ::google::protobuf::Timestamp* AttributeContext_Resource::mutable_update_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.update_time)
  return _msg;
}
inline void AttributeContext_Resource::set_allocated_update_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.update_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.update_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.update_time)
}

// .google.protobuf.Timestamp delete_time = 10 [json_name = "deleteTime"];
inline bool AttributeContext_Resource::has_delete_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.delete_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AttributeContext_Resource::_internal_delete_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.delete_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AttributeContext_Resource::delete_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.delete_time)
  return _internal_delete_time();
}
inline void AttributeContext_Resource::unsafe_arena_set_allocated_delete_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.delete_time_);
  }
  _impl_.delete_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.Resource.delete_time)
}
inline ::google::protobuf::Timestamp* AttributeContext_Resource::release_delete_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AttributeContext_Resource::unsafe_arena_release_delete_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.delete_time)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.delete_time_;
  _impl_.delete_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AttributeContext_Resource::_internal_mutable_delete_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.delete_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.delete_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.delete_time_;
}
inline ::google::protobuf::Timestamp* AttributeContext_Resource::mutable_delete_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_delete_time();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.delete_time)
  return _msg;
}
inline void AttributeContext_Resource::set_allocated_delete_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.delete_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.delete_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.delete_time)
}

// string etag = 11 [json_name = "etag"];
inline void AttributeContext_Resource::clear_etag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.etag_.ClearToEmpty();
}
inline const std::string& AttributeContext_Resource::etag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.etag)
  return _internal_etag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_etag(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.etag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.etag)
}
inline std::string* AttributeContext_Resource::mutable_etag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_etag();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.etag)
  return _s;
}
inline const std::string& AttributeContext_Resource::_internal_etag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.etag_.Get();
}
inline void AttributeContext_Resource::_internal_set_etag(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.etag_.Set(value, GetArena());
}
inline std::string* AttributeContext_Resource::_internal_mutable_etag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.etag_.Mutable( GetArena());
}
inline std::string* AttributeContext_Resource::release_etag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.etag)
  return _impl_.etag_.Release();
}
inline void AttributeContext_Resource::set_allocated_etag(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.etag_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.etag_.IsDefault()) {
          _impl_.etag_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.etag)
}

// string location = 12 [json_name = "location"];
inline void AttributeContext_Resource::clear_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.location_.ClearToEmpty();
}
inline const std::string& AttributeContext_Resource::location() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.Resource.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeContext_Resource::set_location(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:google.rpc.context.AttributeContext.Resource.location)
}
inline std::string* AttributeContext_Resource::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.Resource.location)
  return _s;
}
inline const std::string& AttributeContext_Resource::_internal_location() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.location_.Get();
}
inline void AttributeContext_Resource::_internal_set_location(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.location_.Set(value, GetArena());
}
inline std::string* AttributeContext_Resource::_internal_mutable_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.location_.Mutable( GetArena());
}
inline std::string* AttributeContext_Resource::release_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.Resource.location)
  return _impl_.location_.Release();
}
inline void AttributeContext_Resource::set_allocated_location(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.location_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.location_.IsDefault()) {
          _impl_.location_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.Resource.location)
}

// -------------------------------------------------------------------

// AttributeContext

// .google.rpc.context.AttributeContext.Peer origin = 7 [json_name = "origin"];
inline bool AttributeContext::has_origin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.origin_ != nullptr);
  return value;
}
inline void AttributeContext::clear_origin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.origin_ != nullptr) _impl_.origin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::_internal_origin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::rpc::context::AttributeContext_Peer* p = _impl_.origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Peer&>(::google::rpc::context::_AttributeContext_Peer_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::origin() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.origin)
  return _internal_origin();
}
inline void AttributeContext::unsafe_arena_set_allocated_origin(::google::rpc::context::AttributeContext_Peer* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.origin_);
  }
  _impl_.origin_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.origin)
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::release_origin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::rpc::context::AttributeContext_Peer* released = _impl_.origin_;
  _impl_.origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::unsafe_arena_release_origin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.origin)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::rpc::context::AttributeContext_Peer* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::_internal_mutable_origin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Peer>(GetArena());
    _impl_.origin_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(p);
  }
  return _impl_.origin_;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::mutable_origin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::rpc::context::AttributeContext_Peer* _msg = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.origin)
  return _msg;
}
inline void AttributeContext::set_allocated_origin(::google::rpc::context::AttributeContext_Peer* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(_impl_.origin_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.origin_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.origin)
}

// .google.rpc.context.AttributeContext.Peer source = 1 [json_name = "source"];
inline bool AttributeContext::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_ != nullptr);
  return value;
}
inline void AttributeContext::clear_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.source_ != nullptr) _impl_.source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::_internal_source() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::rpc::context::AttributeContext_Peer* p = _impl_.source_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Peer&>(::google::rpc::context::_AttributeContext_Peer_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::source() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.source)
  return _internal_source();
}
inline void AttributeContext::unsafe_arena_set_allocated_source(::google::rpc::context::AttributeContext_Peer* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.source_);
  }
  _impl_.source_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.source)
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::release_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::rpc::context::AttributeContext_Peer* released = _impl_.source_;
  _impl_.source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::unsafe_arena_release_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.source)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::rpc::context::AttributeContext_Peer* temp = _impl_.source_;
  _impl_.source_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::_internal_mutable_source() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.source_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Peer>(GetArena());
    _impl_.source_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(p);
  }
  return _impl_.source_;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::rpc::context::AttributeContext_Peer* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.source)
  return _msg;
}
inline void AttributeContext::set_allocated_source(::google::rpc::context::AttributeContext_Peer* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(_impl_.source_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.source_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.source)
}

// .google.rpc.context.AttributeContext.Peer destination = 2 [json_name = "destination"];
inline bool AttributeContext::has_destination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.destination_ != nullptr);
  return value;
}
inline void AttributeContext::clear_destination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.destination_ != nullptr) _impl_.destination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::_internal_destination() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::rpc::context::AttributeContext_Peer* p = _impl_.destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Peer&>(::google::rpc::context::_AttributeContext_Peer_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Peer& AttributeContext::destination() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.destination)
  return _internal_destination();
}
inline void AttributeContext::unsafe_arena_set_allocated_destination(::google::rpc::context::AttributeContext_Peer* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.destination_);
  }
  _impl_.destination_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.destination)
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::release_destination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::rpc::context::AttributeContext_Peer* released = _impl_.destination_;
  _impl_.destination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::unsafe_arena_release_destination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.destination)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::rpc::context::AttributeContext_Peer* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::_internal_mutable_destination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Peer>(GetArena());
    _impl_.destination_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(p);
  }
  return _impl_.destination_;
}
inline ::google::rpc::context::AttributeContext_Peer* AttributeContext::mutable_destination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::rpc::context::AttributeContext_Peer* _msg = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.destination)
  return _msg;
}
inline void AttributeContext::set_allocated_destination(::google::rpc::context::AttributeContext_Peer* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(_impl_.destination_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.destination_ = reinterpret_cast<::google::rpc::context::AttributeContext_Peer*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.destination)
}

// .google.rpc.context.AttributeContext.Request request = 3 [json_name = "request"];
inline bool AttributeContext::has_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.request_ != nullptr);
  return value;
}
inline void AttributeContext::clear_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.request_ != nullptr) _impl_.request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::google::rpc::context::AttributeContext_Request& AttributeContext::_internal_request() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::rpc::context::AttributeContext_Request* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Request&>(::google::rpc::context::_AttributeContext_Request_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Request& AttributeContext::request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.request)
  return _internal_request();
}
inline void AttributeContext::unsafe_arena_set_allocated_request(::google::rpc::context::AttributeContext_Request* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = reinterpret_cast<::google::rpc::context::AttributeContext_Request*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.request)
}
inline ::google::rpc::context::AttributeContext_Request* AttributeContext::release_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::rpc::context::AttributeContext_Request* released = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::rpc::context::AttributeContext_Request* AttributeContext::unsafe_arena_release_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.request)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::rpc::context::AttributeContext_Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Request* AttributeContext::_internal_mutable_request() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Request>(GetArena());
    _impl_.request_ = reinterpret_cast<::google::rpc::context::AttributeContext_Request*>(p);
  }
  return _impl_.request_;
}
inline ::google::rpc::context::AttributeContext_Request* AttributeContext::mutable_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::rpc::context::AttributeContext_Request* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.request)
  return _msg;
}
inline void AttributeContext::set_allocated_request(::google::rpc::context::AttributeContext_Request* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::rpc::context::AttributeContext_Request*>(_impl_.request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::rpc::context::AttributeContext_Request*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.request_ = reinterpret_cast<::google::rpc::context::AttributeContext_Request*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.request)
}

// .google.rpc.context.AttributeContext.Response response = 4 [json_name = "response"];
inline bool AttributeContext::has_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_ != nullptr);
  return value;
}
inline void AttributeContext::clear_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.response_ != nullptr) _impl_.response_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::google::rpc::context::AttributeContext_Response& AttributeContext::_internal_response() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::rpc::context::AttributeContext_Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Response&>(::google::rpc::context::_AttributeContext_Response_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Response& AttributeContext::response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.response)
  return _internal_response();
}
inline void AttributeContext::unsafe_arena_set_allocated_response(::google::rpc::context::AttributeContext_Response* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = reinterpret_cast<::google::rpc::context::AttributeContext_Response*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.response)
}
inline ::google::rpc::context::AttributeContext_Response* AttributeContext::release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::rpc::context::AttributeContext_Response* released = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::rpc::context::AttributeContext_Response* AttributeContext::unsafe_arena_release_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.response)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::rpc::context::AttributeContext_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Response* AttributeContext::_internal_mutable_response() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Response>(GetArena());
    _impl_.response_ = reinterpret_cast<::google::rpc::context::AttributeContext_Response*>(p);
  }
  return _impl_.response_;
}
inline ::google::rpc::context::AttributeContext_Response* AttributeContext::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::rpc::context::AttributeContext_Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.response)
  return _msg;
}
inline void AttributeContext::set_allocated_response(::google::rpc::context::AttributeContext_Response* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::rpc::context::AttributeContext_Response*>(_impl_.response_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::rpc::context::AttributeContext_Response*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.response_ = reinterpret_cast<::google::rpc::context::AttributeContext_Response*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.response)
}

// .google.rpc.context.AttributeContext.Resource resource = 5 [json_name = "resource"];
inline bool AttributeContext::has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline void AttributeContext::clear_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.resource_ != nullptr) _impl_.resource_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::google::rpc::context::AttributeContext_Resource& AttributeContext::_internal_resource() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::rpc::context::AttributeContext_Resource* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Resource&>(::google::rpc::context::_AttributeContext_Resource_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Resource& AttributeContext::resource() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.resource)
  return _internal_resource();
}
inline void AttributeContext::unsafe_arena_set_allocated_resource(::google::rpc::context::AttributeContext_Resource* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = reinterpret_cast<::google::rpc::context::AttributeContext_Resource*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.resource)
}
inline ::google::rpc::context::AttributeContext_Resource* AttributeContext::release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::rpc::context::AttributeContext_Resource* released = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::rpc::context::AttributeContext_Resource* AttributeContext::unsafe_arena_release_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.resource)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::rpc::context::AttributeContext_Resource* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Resource* AttributeContext::_internal_mutable_resource() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Resource>(GetArena());
    _impl_.resource_ = reinterpret_cast<::google::rpc::context::AttributeContext_Resource*>(p);
  }
  return _impl_.resource_;
}
inline ::google::rpc::context::AttributeContext_Resource* AttributeContext::mutable_resource() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::rpc::context::AttributeContext_Resource* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.resource)
  return _msg;
}
inline void AttributeContext::set_allocated_resource(::google::rpc::context::AttributeContext_Resource* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::rpc::context::AttributeContext_Resource*>(_impl_.resource_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::rpc::context::AttributeContext_Resource*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.resource_ = reinterpret_cast<::google::rpc::context::AttributeContext_Resource*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.resource)
}

// .google.rpc.context.AttributeContext.Api api = 6 [json_name = "api"];
inline bool AttributeContext::has_api() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.api_ != nullptr);
  return value;
}
inline void AttributeContext::clear_api() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.api_ != nullptr) _impl_.api_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::google::rpc::context::AttributeContext_Api& AttributeContext::_internal_api() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::rpc::context::AttributeContext_Api* p = _impl_.api_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::context::AttributeContext_Api&>(::google::rpc::context::_AttributeContext_Api_default_instance_);
}
inline const ::google::rpc::context::AttributeContext_Api& AttributeContext::api() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.api)
  return _internal_api();
}
inline void AttributeContext::unsafe_arena_set_allocated_api(::google::rpc::context::AttributeContext_Api* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.api_);
  }
  _impl_.api_ = reinterpret_cast<::google::rpc::context::AttributeContext_Api*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.rpc.context.AttributeContext.api)
}
inline ::google::rpc::context::AttributeContext_Api* AttributeContext::release_api() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::rpc::context::AttributeContext_Api* released = _impl_.api_;
  _impl_.api_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::rpc::context::AttributeContext_Api* AttributeContext::unsafe_arena_release_api() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:google.rpc.context.AttributeContext.api)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::rpc::context::AttributeContext_Api* temp = _impl_.api_;
  _impl_.api_ = nullptr;
  return temp;
}
inline ::google::rpc::context::AttributeContext_Api* AttributeContext::_internal_mutable_api() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.api_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::context::AttributeContext_Api>(GetArena());
    _impl_.api_ = reinterpret_cast<::google::rpc::context::AttributeContext_Api*>(p);
  }
  return _impl_.api_;
}
inline ::google::rpc::context::AttributeContext_Api* AttributeContext::mutable_api() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::rpc::context::AttributeContext_Api* _msg = _internal_mutable_api();
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.api)
  return _msg;
}
inline void AttributeContext::set_allocated_api(::google::rpc::context::AttributeContext_Api* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::rpc::context::AttributeContext_Api*>(_impl_.api_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::rpc::context::AttributeContext_Api*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.api_ = reinterpret_cast<::google::rpc::context::AttributeContext_Api*>(value);
  // @@protoc_insertion_point(field_set_allocated:google.rpc.context.AttributeContext.api)
}

// repeated .google.protobuf.Any extensions = 8 [json_name = "extensions"];
inline int AttributeContext::_internal_extensions_size() const {
  return _internal_extensions().size();
}
inline int AttributeContext::extensions_size() const {
  return _internal_extensions_size();
}
inline ::google::protobuf::Any* AttributeContext::mutable_extensions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:google.rpc.context.AttributeContext.extensions)
  return _internal_mutable_extensions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>* AttributeContext::mutable_extensions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:google.rpc.context.AttributeContext.extensions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_extensions();
}
inline const ::google::protobuf::Any& AttributeContext::extensions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:google.rpc.context.AttributeContext.extensions)
  return _internal_extensions().Get(index);
}
inline ::google::protobuf::Any* AttributeContext::add_extensions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::google::protobuf::Any* _add = _internal_mutable_extensions()->Add();
  // @@protoc_insertion_point(field_add:google.rpc.context.AttributeContext.extensions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>& AttributeContext::extensions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:google.rpc.context.AttributeContext.extensions)
  return _internal_extensions();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>&
AttributeContext::_internal_extensions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.extensions_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Any>*
AttributeContext::_internal_mutable_extensions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.extensions_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace context
}  // namespace rpc
}  // namespace google


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_2epb_2eh
