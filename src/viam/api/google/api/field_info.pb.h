// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/field_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2ffield_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2ffield_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2ffield_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2ffield_5finfo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2ffield_5finfo_2eproto;
namespace google {
namespace api {
class FieldInfo;
struct FieldInfoDefaultTypeInternal;
extern FieldInfoDefaultTypeInternal _FieldInfo_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::FieldInfo* Arena::CreateMaybeMessage<::google::api::FieldInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

enum FieldInfo_Format : int {
  FieldInfo_Format_FORMAT_UNSPECIFIED = 0,
  FieldInfo_Format_UUID4 = 1,
  FieldInfo_Format_IPV4 = 2,
  FieldInfo_Format_IPV6 = 3,
  FieldInfo_Format_IPV4_OR_IPV6 = 4,
  FieldInfo_Format_FieldInfo_Format_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FieldInfo_Format_FieldInfo_Format_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FieldInfo_Format_IsValid(int value);
constexpr FieldInfo_Format FieldInfo_Format_Format_MIN = FieldInfo_Format_FORMAT_UNSPECIFIED;
constexpr FieldInfo_Format FieldInfo_Format_Format_MAX = FieldInfo_Format_IPV4_OR_IPV6;
constexpr int FieldInfo_Format_Format_ARRAYSIZE = FieldInfo_Format_Format_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FieldInfo_Format_descriptor();
template<typename T>
inline const std::string& FieldInfo_Format_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FieldInfo_Format>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FieldInfo_Format_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FieldInfo_Format_descriptor(), enum_t_value);
}
inline bool FieldInfo_Format_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FieldInfo_Format* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FieldInfo_Format>(
    FieldInfo_Format_descriptor(), name, value);
}
// ===================================================================

class FieldInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.FieldInfo) */ {
 public:
  inline FieldInfo() : FieldInfo(nullptr) {}
  ~FieldInfo() override;
  explicit PROTOBUF_CONSTEXPR FieldInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldInfo(const FieldInfo& from);
  FieldInfo(FieldInfo&& from) noexcept
    : FieldInfo() {
    *this = ::std::move(from);
  }

  inline FieldInfo& operator=(const FieldInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldInfo& operator=(FieldInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldInfo* internal_default_instance() {
    return reinterpret_cast<const FieldInfo*>(
               &_FieldInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FieldInfo& a, FieldInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FieldInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.FieldInfo";
  }
  protected:
  explicit FieldInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FieldInfo_Format Format;
  static constexpr Format FORMAT_UNSPECIFIED =
    FieldInfo_Format_FORMAT_UNSPECIFIED;
  static constexpr Format UUID4 =
    FieldInfo_Format_UUID4;
  static constexpr Format IPV4 =
    FieldInfo_Format_IPV4;
  static constexpr Format IPV6 =
    FieldInfo_Format_IPV6;
  static constexpr Format IPV4_OR_IPV6 =
    FieldInfo_Format_IPV4_OR_IPV6;
  static inline bool Format_IsValid(int value) {
    return FieldInfo_Format_IsValid(value);
  }
  static constexpr Format Format_MIN =
    FieldInfo_Format_Format_MIN;
  static constexpr Format Format_MAX =
    FieldInfo_Format_Format_MAX;
  static constexpr int Format_ARRAYSIZE =
    FieldInfo_Format_Format_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Format_descriptor() {
    return FieldInfo_Format_descriptor();
  }
  template<typename T>
  static inline const std::string& Format_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Format>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Format_Name.");
    return FieldInfo_Format_Name(enum_t_value);
  }
  static inline bool Format_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Format* value) {
    return FieldInfo_Format_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 1,
  };
  // .google.api.FieldInfo.Format format = 1 [json_name = "format"];
  void clear_format();
  ::google::api::FieldInfo_Format format() const;
  void set_format(::google::api::FieldInfo_Format value);
  private:
  ::google::api::FieldInfo_Format _internal_format() const;
  void _internal_set_format(::google::api::FieldInfo_Format value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.FieldInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2ffield_5finfo_2eproto;
};
// ===================================================================

static const int kFieldInfoFieldNumber = 291403980;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::google::api::FieldInfo >, 11, false >
  field_info;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FieldInfo

// .google.api.FieldInfo.Format format = 1 [json_name = "format"];
inline void FieldInfo::clear_format() {
  format_ = 0;
}
inline ::google::api::FieldInfo_Format FieldInfo::_internal_format() const {
  return static_cast< ::google::api::FieldInfo_Format >(format_);
}
inline ::google::api::FieldInfo_Format FieldInfo::format() const {
  // @@protoc_insertion_point(field_get:google.api.FieldInfo.format)
  return _internal_format();
}
inline void FieldInfo::_internal_set_format(::google::api::FieldInfo_Format value) {
  
  format_ = value;
}
inline void FieldInfo::set_format(::google::api::FieldInfo_Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:google.api.FieldInfo.format)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::api::FieldInfo_Format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::FieldInfo_Format>() {
  return ::google::api::FieldInfo_Format_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2ffield_5finfo_2eproto
