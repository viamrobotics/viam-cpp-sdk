// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/board/v1/board.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_2fboard_2fv1_2fboard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_2fboard_2fv1_2fboard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_2fboard_2fv1_2fboard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_2fboard_2fv1_2fboard_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_2fboard_2fv1_2fboard_2eproto;
namespace viam {
namespace component {
namespace board {
namespace v1 {
class GetDigitalInterruptValueRequest;
struct GetDigitalInterruptValueRequestDefaultTypeInternal;
extern GetDigitalInterruptValueRequestDefaultTypeInternal _GetDigitalInterruptValueRequest_default_instance_;
class GetDigitalInterruptValueResponse;
struct GetDigitalInterruptValueResponseDefaultTypeInternal;
extern GetDigitalInterruptValueResponseDefaultTypeInternal _GetDigitalInterruptValueResponse_default_instance_;
class GetGPIORequest;
struct GetGPIORequestDefaultTypeInternal;
extern GetGPIORequestDefaultTypeInternal _GetGPIORequest_default_instance_;
class GetGPIOResponse;
struct GetGPIOResponseDefaultTypeInternal;
extern GetGPIOResponseDefaultTypeInternal _GetGPIOResponse_default_instance_;
class PWMFrequencyRequest;
struct PWMFrequencyRequestDefaultTypeInternal;
extern PWMFrequencyRequestDefaultTypeInternal _PWMFrequencyRequest_default_instance_;
class PWMFrequencyResponse;
struct PWMFrequencyResponseDefaultTypeInternal;
extern PWMFrequencyResponseDefaultTypeInternal _PWMFrequencyResponse_default_instance_;
class PWMRequest;
struct PWMRequestDefaultTypeInternal;
extern PWMRequestDefaultTypeInternal _PWMRequest_default_instance_;
class PWMResponse;
struct PWMResponseDefaultTypeInternal;
extern PWMResponseDefaultTypeInternal _PWMResponse_default_instance_;
class ReadAnalogReaderRequest;
struct ReadAnalogReaderRequestDefaultTypeInternal;
extern ReadAnalogReaderRequestDefaultTypeInternal _ReadAnalogReaderRequest_default_instance_;
class ReadAnalogReaderResponse;
struct ReadAnalogReaderResponseDefaultTypeInternal;
extern ReadAnalogReaderResponseDefaultTypeInternal _ReadAnalogReaderResponse_default_instance_;
class SetGPIORequest;
struct SetGPIORequestDefaultTypeInternal;
extern SetGPIORequestDefaultTypeInternal _SetGPIORequest_default_instance_;
class SetGPIOResponse;
struct SetGPIOResponseDefaultTypeInternal;
extern SetGPIOResponseDefaultTypeInternal _SetGPIOResponse_default_instance_;
class SetPWMFrequencyRequest;
struct SetPWMFrequencyRequestDefaultTypeInternal;
extern SetPWMFrequencyRequestDefaultTypeInternal _SetPWMFrequencyRequest_default_instance_;
class SetPWMFrequencyResponse;
struct SetPWMFrequencyResponseDefaultTypeInternal;
extern SetPWMFrequencyResponseDefaultTypeInternal _SetPWMFrequencyResponse_default_instance_;
class SetPWMRequest;
struct SetPWMRequestDefaultTypeInternal;
extern SetPWMRequestDefaultTypeInternal _SetPWMRequest_default_instance_;
class SetPWMResponse;
struct SetPWMResponseDefaultTypeInternal;
extern SetPWMResponseDefaultTypeInternal _SetPWMResponse_default_instance_;
class SetPowerModeRequest;
struct SetPowerModeRequestDefaultTypeInternal;
extern SetPowerModeRequestDefaultTypeInternal _SetPowerModeRequest_default_instance_;
class SetPowerModeResponse;
struct SetPowerModeResponseDefaultTypeInternal;
extern SetPowerModeResponseDefaultTypeInternal _SetPowerModeResponse_default_instance_;
class StatusRequest;
struct StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
class StatusResponse;
struct StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
class StreamTicksRequest;
struct StreamTicksRequestDefaultTypeInternal;
extern StreamTicksRequestDefaultTypeInternal _StreamTicksRequest_default_instance_;
class StreamTicksResponse;
struct StreamTicksResponseDefaultTypeInternal;
extern StreamTicksResponseDefaultTypeInternal _StreamTicksResponse_default_instance_;
class WriteAnalogRequest;
struct WriteAnalogRequestDefaultTypeInternal;
extern WriteAnalogRequestDefaultTypeInternal _WriteAnalogRequest_default_instance_;
class WriteAnalogResponse;
struct WriteAnalogResponseDefaultTypeInternal;
extern WriteAnalogResponseDefaultTypeInternal _WriteAnalogResponse_default_instance_;
}  // namespace v1
}  // namespace board
}  // namespace component
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::component::board::v1::GetDigitalInterruptValueRequest* Arena::CreateMaybeMessage<::viam::component::board::v1::GetDigitalInterruptValueRequest>(Arena*);
template<> ::viam::component::board::v1::GetDigitalInterruptValueResponse* Arena::CreateMaybeMessage<::viam::component::board::v1::GetDigitalInterruptValueResponse>(Arena*);
template<> ::viam::component::board::v1::GetGPIORequest* Arena::CreateMaybeMessage<::viam::component::board::v1::GetGPIORequest>(Arena*);
template<> ::viam::component::board::v1::GetGPIOResponse* Arena::CreateMaybeMessage<::viam::component::board::v1::GetGPIOResponse>(Arena*);
template<> ::viam::component::board::v1::PWMFrequencyRequest* Arena::CreateMaybeMessage<::viam::component::board::v1::PWMFrequencyRequest>(Arena*);
template<> ::viam::component::board::v1::PWMFrequencyResponse* Arena::CreateMaybeMessage<::viam::component::board::v1::PWMFrequencyResponse>(Arena*);
template<> ::viam::component::board::v1::PWMRequest* Arena::CreateMaybeMessage<::viam::component::board::v1::PWMRequest>(Arena*);
template<> ::viam::component::board::v1::PWMResponse* Arena::CreateMaybeMessage<::viam::component::board::v1::PWMResponse>(Arena*);
template<> ::viam::component::board::v1::ReadAnalogReaderRequest* Arena::CreateMaybeMessage<::viam::component::board::v1::ReadAnalogReaderRequest>(Arena*);
template<> ::viam::component::board::v1::ReadAnalogReaderResponse* Arena::CreateMaybeMessage<::viam::component::board::v1::ReadAnalogReaderResponse>(Arena*);
template<> ::viam::component::board::v1::SetGPIORequest* Arena::CreateMaybeMessage<::viam::component::board::v1::SetGPIORequest>(Arena*);
template<> ::viam::component::board::v1::SetGPIOResponse* Arena::CreateMaybeMessage<::viam::component::board::v1::SetGPIOResponse>(Arena*);
template<> ::viam::component::board::v1::SetPWMFrequencyRequest* Arena::CreateMaybeMessage<::viam::component::board::v1::SetPWMFrequencyRequest>(Arena*);
template<> ::viam::component::board::v1::SetPWMFrequencyResponse* Arena::CreateMaybeMessage<::viam::component::board::v1::SetPWMFrequencyResponse>(Arena*);
template<> ::viam::component::board::v1::SetPWMRequest* Arena::CreateMaybeMessage<::viam::component::board::v1::SetPWMRequest>(Arena*);
template<> ::viam::component::board::v1::SetPWMResponse* Arena::CreateMaybeMessage<::viam::component::board::v1::SetPWMResponse>(Arena*);
template<> ::viam::component::board::v1::SetPowerModeRequest* Arena::CreateMaybeMessage<::viam::component::board::v1::SetPowerModeRequest>(Arena*);
template<> ::viam::component::board::v1::SetPowerModeResponse* Arena::CreateMaybeMessage<::viam::component::board::v1::SetPowerModeResponse>(Arena*);
template<> ::viam::component::board::v1::StatusRequest* Arena::CreateMaybeMessage<::viam::component::board::v1::StatusRequest>(Arena*);
template<> ::viam::component::board::v1::StatusResponse* Arena::CreateMaybeMessage<::viam::component::board::v1::StatusResponse>(Arena*);
template<> ::viam::component::board::v1::StreamTicksRequest* Arena::CreateMaybeMessage<::viam::component::board::v1::StreamTicksRequest>(Arena*);
template<> ::viam::component::board::v1::StreamTicksResponse* Arena::CreateMaybeMessage<::viam::component::board::v1::StreamTicksResponse>(Arena*);
template<> ::viam::component::board::v1::WriteAnalogRequest* Arena::CreateMaybeMessage<::viam::component::board::v1::WriteAnalogRequest>(Arena*);
template<> ::viam::component::board::v1::WriteAnalogResponse* Arena::CreateMaybeMessage<::viam::component::board::v1::WriteAnalogResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace component {
namespace board {
namespace v1 {

enum PowerMode : int {
  POWER_MODE_UNSPECIFIED = 0,
  POWER_MODE_NORMAL = 1,
  POWER_MODE_OFFLINE_DEEP = 2,
  PowerMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PowerMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PowerMode_IsValid(int value);
constexpr PowerMode PowerMode_MIN = POWER_MODE_UNSPECIFIED;
constexpr PowerMode PowerMode_MAX = POWER_MODE_OFFLINE_DEEP;
constexpr int PowerMode_ARRAYSIZE = PowerMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PowerMode_descriptor();
template<typename T>
inline const std::string& PowerMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PowerMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PowerMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PowerMode_descriptor(), enum_t_value);
}
inline bool PowerMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PowerMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PowerMode>(
    PowerMode_descriptor(), name, value);
}
// ===================================================================

class StatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.StatusRequest) */ {
 public:
  inline StatusRequest() : StatusRequest(nullptr) {}
  ~StatusRequest() override;
  explicit PROTOBUF_CONSTEXPR StatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusRequest(const StatusRequest& from);
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.StatusRequest";
  }
  protected:
  explicit StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.StatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.StatusResponse) */ {
 public:
  inline StatusResponse() : StatusResponse(nullptr) {}
  ~StatusResponse() override;
  explicit PROTOBUF_CONSTEXPR StatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.StatusResponse";
  }
  protected:
  explicit StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .viam.common.v1.BoardStatus status = 1 [json_name = "status"];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::viam::common::v1::BoardStatus& status() const;
  PROTOBUF_NODISCARD ::viam::common::v1::BoardStatus* release_status();
  ::viam::common::v1::BoardStatus* mutable_status();
  void set_allocated_status(::viam::common::v1::BoardStatus* status);
  private:
  const ::viam::common::v1::BoardStatus& _internal_status() const;
  ::viam::common::v1::BoardStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::viam::common::v1::BoardStatus* status);
  ::viam::common::v1::BoardStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.StatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::BoardStatus* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class SetGPIORequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.SetGPIORequest) */ {
 public:
  inline SetGPIORequest() : SetGPIORequest(nullptr) {}
  ~SetGPIORequest() override;
  explicit PROTOBUF_CONSTEXPR SetGPIORequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGPIORequest(const SetGPIORequest& from);
  SetGPIORequest(SetGPIORequest&& from) noexcept
    : SetGPIORequest() {
    *this = ::std::move(from);
  }

  inline SetGPIORequest& operator=(const SetGPIORequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGPIORequest& operator=(SetGPIORequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGPIORequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGPIORequest* internal_default_instance() {
    return reinterpret_cast<const SetGPIORequest*>(
               &_SetGPIORequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetGPIORequest& a, SetGPIORequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGPIORequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGPIORequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGPIORequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGPIORequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetGPIORequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetGPIORequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetGPIORequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.SetGPIORequest";
  }
  protected:
  explicit SetGPIORequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPinFieldNumber = 2,
    kExtraFieldNumber = 99,
    kHighFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pin = 2 [json_name = "pin"];
  void clear_pin();
  const std::string& pin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin();
  PROTOBUF_NODISCARD std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // bool high = 3 [json_name = "high"];
  void clear_high();
  bool high() const;
  void set_high(bool value);
  private:
  bool _internal_high() const;
  void _internal_set_high(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.SetGPIORequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  bool high_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class SetGPIOResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.component.board.v1.SetGPIOResponse) */ {
 public:
  inline SetGPIOResponse() : SetGPIOResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetGPIOResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetGPIOResponse(const SetGPIOResponse& from);
  SetGPIOResponse(SetGPIOResponse&& from) noexcept
    : SetGPIOResponse() {
    *this = ::std::move(from);
  }

  inline SetGPIOResponse& operator=(const SetGPIOResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetGPIOResponse& operator=(SetGPIOResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetGPIOResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetGPIOResponse* internal_default_instance() {
    return reinterpret_cast<const SetGPIOResponse*>(
               &_SetGPIOResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetGPIOResponse& a, SetGPIOResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetGPIOResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetGPIOResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetGPIOResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetGPIOResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetGPIOResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetGPIOResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.SetGPIOResponse";
  }
  protected:
  explicit SetGPIOResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.SetGPIOResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class GetGPIORequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.GetGPIORequest) */ {
 public:
  inline GetGPIORequest() : GetGPIORequest(nullptr) {}
  ~GetGPIORequest() override;
  explicit PROTOBUF_CONSTEXPR GetGPIORequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGPIORequest(const GetGPIORequest& from);
  GetGPIORequest(GetGPIORequest&& from) noexcept
    : GetGPIORequest() {
    *this = ::std::move(from);
  }

  inline GetGPIORequest& operator=(const GetGPIORequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGPIORequest& operator=(GetGPIORequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGPIORequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGPIORequest* internal_default_instance() {
    return reinterpret_cast<const GetGPIORequest*>(
               &_GetGPIORequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetGPIORequest& a, GetGPIORequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGPIORequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGPIORequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGPIORequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGPIORequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGPIORequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetGPIORequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGPIORequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.GetGPIORequest";
  }
  protected:
  explicit GetGPIORequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPinFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pin = 2 [json_name = "pin"];
  void clear_pin();
  const std::string& pin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin();
  PROTOBUF_NODISCARD std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.GetGPIORequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class GetGPIOResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.GetGPIOResponse) */ {
 public:
  inline GetGPIOResponse() : GetGPIOResponse(nullptr) {}
  ~GetGPIOResponse() override;
  explicit PROTOBUF_CONSTEXPR GetGPIOResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetGPIOResponse(const GetGPIOResponse& from);
  GetGPIOResponse(GetGPIOResponse&& from) noexcept
    : GetGPIOResponse() {
    *this = ::std::move(from);
  }

  inline GetGPIOResponse& operator=(const GetGPIOResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetGPIOResponse& operator=(GetGPIOResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetGPIOResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetGPIOResponse* internal_default_instance() {
    return reinterpret_cast<const GetGPIOResponse*>(
               &_GetGPIOResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetGPIOResponse& a, GetGPIOResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetGPIOResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetGPIOResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetGPIOResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetGPIOResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetGPIOResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetGPIOResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetGPIOResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.GetGPIOResponse";
  }
  protected:
  explicit GetGPIOResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighFieldNumber = 1,
  };
  // bool high = 1 [json_name = "high"];
  void clear_high();
  bool high() const;
  void set_high(bool value);
  private:
  bool _internal_high() const;
  void _internal_set_high(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.GetGPIOResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool high_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class PWMRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.PWMRequest) */ {
 public:
  inline PWMRequest() : PWMRequest(nullptr) {}
  ~PWMRequest() override;
  explicit PROTOBUF_CONSTEXPR PWMRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PWMRequest(const PWMRequest& from);
  PWMRequest(PWMRequest&& from) noexcept
    : PWMRequest() {
    *this = ::std::move(from);
  }

  inline PWMRequest& operator=(const PWMRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PWMRequest& operator=(PWMRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PWMRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PWMRequest* internal_default_instance() {
    return reinterpret_cast<const PWMRequest*>(
               &_PWMRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PWMRequest& a, PWMRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PWMRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PWMRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PWMRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PWMRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PWMRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PWMRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PWMRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.PWMRequest";
  }
  protected:
  explicit PWMRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPinFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pin = 2 [json_name = "pin"];
  void clear_pin();
  const std::string& pin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin();
  PROTOBUF_NODISCARD std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.PWMRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class PWMResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.PWMResponse) */ {
 public:
  inline PWMResponse() : PWMResponse(nullptr) {}
  ~PWMResponse() override;
  explicit PROTOBUF_CONSTEXPR PWMResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PWMResponse(const PWMResponse& from);
  PWMResponse(PWMResponse&& from) noexcept
    : PWMResponse() {
    *this = ::std::move(from);
  }

  inline PWMResponse& operator=(const PWMResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PWMResponse& operator=(PWMResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PWMResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PWMResponse* internal_default_instance() {
    return reinterpret_cast<const PWMResponse*>(
               &_PWMResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PWMResponse& a, PWMResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PWMResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PWMResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PWMResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PWMResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PWMResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PWMResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PWMResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.PWMResponse";
  }
  protected:
  explicit PWMResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDutyCyclePctFieldNumber = 1,
  };
  // double duty_cycle_pct = 1 [json_name = "dutyCyclePct"];
  void clear_duty_cycle_pct();
  double duty_cycle_pct() const;
  void set_duty_cycle_pct(double value);
  private:
  double _internal_duty_cycle_pct() const;
  void _internal_set_duty_cycle_pct(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.PWMResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double duty_cycle_pct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class SetPWMRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.SetPWMRequest) */ {
 public:
  inline SetPWMRequest() : SetPWMRequest(nullptr) {}
  ~SetPWMRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPWMRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPWMRequest(const SetPWMRequest& from);
  SetPWMRequest(SetPWMRequest&& from) noexcept
    : SetPWMRequest() {
    *this = ::std::move(from);
  }

  inline SetPWMRequest& operator=(const SetPWMRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPWMRequest& operator=(SetPWMRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPWMRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPWMRequest* internal_default_instance() {
    return reinterpret_cast<const SetPWMRequest*>(
               &_SetPWMRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetPWMRequest& a, SetPWMRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPWMRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPWMRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPWMRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPWMRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPWMRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPWMRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPWMRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.SetPWMRequest";
  }
  protected:
  explicit SetPWMRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPinFieldNumber = 2,
    kExtraFieldNumber = 99,
    kDutyCyclePctFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pin = 2 [json_name = "pin"];
  void clear_pin();
  const std::string& pin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin();
  PROTOBUF_NODISCARD std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // double duty_cycle_pct = 3 [json_name = "dutyCyclePct"];
  void clear_duty_cycle_pct();
  double duty_cycle_pct() const;
  void set_duty_cycle_pct(double value);
  private:
  double _internal_duty_cycle_pct() const;
  void _internal_set_duty_cycle_pct(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.SetPWMRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  double duty_cycle_pct_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class SetPWMResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.component.board.v1.SetPWMResponse) */ {
 public:
  inline SetPWMResponse() : SetPWMResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetPWMResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPWMResponse(const SetPWMResponse& from);
  SetPWMResponse(SetPWMResponse&& from) noexcept
    : SetPWMResponse() {
    *this = ::std::move(from);
  }

  inline SetPWMResponse& operator=(const SetPWMResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPWMResponse& operator=(SetPWMResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPWMResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPWMResponse* internal_default_instance() {
    return reinterpret_cast<const SetPWMResponse*>(
               &_SetPWMResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SetPWMResponse& a, SetPWMResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPWMResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPWMResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPWMResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPWMResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetPWMResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetPWMResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.SetPWMResponse";
  }
  protected:
  explicit SetPWMResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.SetPWMResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class PWMFrequencyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.PWMFrequencyRequest) */ {
 public:
  inline PWMFrequencyRequest() : PWMFrequencyRequest(nullptr) {}
  ~PWMFrequencyRequest() override;
  explicit PROTOBUF_CONSTEXPR PWMFrequencyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PWMFrequencyRequest(const PWMFrequencyRequest& from);
  PWMFrequencyRequest(PWMFrequencyRequest&& from) noexcept
    : PWMFrequencyRequest() {
    *this = ::std::move(from);
  }

  inline PWMFrequencyRequest& operator=(const PWMFrequencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PWMFrequencyRequest& operator=(PWMFrequencyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PWMFrequencyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PWMFrequencyRequest* internal_default_instance() {
    return reinterpret_cast<const PWMFrequencyRequest*>(
               &_PWMFrequencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PWMFrequencyRequest& a, PWMFrequencyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PWMFrequencyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PWMFrequencyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PWMFrequencyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PWMFrequencyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PWMFrequencyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PWMFrequencyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PWMFrequencyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.PWMFrequencyRequest";
  }
  protected:
  explicit PWMFrequencyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPinFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pin = 2 [json_name = "pin"];
  void clear_pin();
  const std::string& pin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin();
  PROTOBUF_NODISCARD std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.PWMFrequencyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class PWMFrequencyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.PWMFrequencyResponse) */ {
 public:
  inline PWMFrequencyResponse() : PWMFrequencyResponse(nullptr) {}
  ~PWMFrequencyResponse() override;
  explicit PROTOBUF_CONSTEXPR PWMFrequencyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PWMFrequencyResponse(const PWMFrequencyResponse& from);
  PWMFrequencyResponse(PWMFrequencyResponse&& from) noexcept
    : PWMFrequencyResponse() {
    *this = ::std::move(from);
  }

  inline PWMFrequencyResponse& operator=(const PWMFrequencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PWMFrequencyResponse& operator=(PWMFrequencyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PWMFrequencyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PWMFrequencyResponse* internal_default_instance() {
    return reinterpret_cast<const PWMFrequencyResponse*>(
               &_PWMFrequencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PWMFrequencyResponse& a, PWMFrequencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PWMFrequencyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PWMFrequencyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PWMFrequencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PWMFrequencyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PWMFrequencyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PWMFrequencyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PWMFrequencyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.PWMFrequencyResponse";
  }
  protected:
  explicit PWMFrequencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrequencyHzFieldNumber = 1,
  };
  // uint64 frequency_hz = 1 [json_name = "frequencyHz"];
  void clear_frequency_hz();
  uint64_t frequency_hz() const;
  void set_frequency_hz(uint64_t value);
  private:
  uint64_t _internal_frequency_hz() const;
  void _internal_set_frequency_hz(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.PWMFrequencyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t frequency_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class SetPWMFrequencyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.SetPWMFrequencyRequest) */ {
 public:
  inline SetPWMFrequencyRequest() : SetPWMFrequencyRequest(nullptr) {}
  ~SetPWMFrequencyRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPWMFrequencyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPWMFrequencyRequest(const SetPWMFrequencyRequest& from);
  SetPWMFrequencyRequest(SetPWMFrequencyRequest&& from) noexcept
    : SetPWMFrequencyRequest() {
    *this = ::std::move(from);
  }

  inline SetPWMFrequencyRequest& operator=(const SetPWMFrequencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPWMFrequencyRequest& operator=(SetPWMFrequencyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPWMFrequencyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPWMFrequencyRequest* internal_default_instance() {
    return reinterpret_cast<const SetPWMFrequencyRequest*>(
               &_SetPWMFrequencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SetPWMFrequencyRequest& a, SetPWMFrequencyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPWMFrequencyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPWMFrequencyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPWMFrequencyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPWMFrequencyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPWMFrequencyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPWMFrequencyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPWMFrequencyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.SetPWMFrequencyRequest";
  }
  protected:
  explicit SetPWMFrequencyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPinFieldNumber = 2,
    kExtraFieldNumber = 99,
    kFrequencyHzFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pin = 2 [json_name = "pin"];
  void clear_pin();
  const std::string& pin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin();
  PROTOBUF_NODISCARD std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // uint64 frequency_hz = 3 [json_name = "frequencyHz"];
  void clear_frequency_hz();
  uint64_t frequency_hz() const;
  void set_frequency_hz(uint64_t value);
  private:
  uint64_t _internal_frequency_hz() const;
  void _internal_set_frequency_hz(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.SetPWMFrequencyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  uint64_t frequency_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class SetPWMFrequencyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.component.board.v1.SetPWMFrequencyResponse) */ {
 public:
  inline SetPWMFrequencyResponse() : SetPWMFrequencyResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetPWMFrequencyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPWMFrequencyResponse(const SetPWMFrequencyResponse& from);
  SetPWMFrequencyResponse(SetPWMFrequencyResponse&& from) noexcept
    : SetPWMFrequencyResponse() {
    *this = ::std::move(from);
  }

  inline SetPWMFrequencyResponse& operator=(const SetPWMFrequencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPWMFrequencyResponse& operator=(SetPWMFrequencyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPWMFrequencyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPWMFrequencyResponse* internal_default_instance() {
    return reinterpret_cast<const SetPWMFrequencyResponse*>(
               &_SetPWMFrequencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SetPWMFrequencyResponse& a, SetPWMFrequencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPWMFrequencyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPWMFrequencyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPWMFrequencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPWMFrequencyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetPWMFrequencyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetPWMFrequencyResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.SetPWMFrequencyResponse";
  }
  protected:
  explicit SetPWMFrequencyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.SetPWMFrequencyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class ReadAnalogReaderRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.ReadAnalogReaderRequest) */ {
 public:
  inline ReadAnalogReaderRequest() : ReadAnalogReaderRequest(nullptr) {}
  ~ReadAnalogReaderRequest() override;
  explicit PROTOBUF_CONSTEXPR ReadAnalogReaderRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadAnalogReaderRequest(const ReadAnalogReaderRequest& from);
  ReadAnalogReaderRequest(ReadAnalogReaderRequest&& from) noexcept
    : ReadAnalogReaderRequest() {
    *this = ::std::move(from);
  }

  inline ReadAnalogReaderRequest& operator=(const ReadAnalogReaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadAnalogReaderRequest& operator=(ReadAnalogReaderRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadAnalogReaderRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadAnalogReaderRequest* internal_default_instance() {
    return reinterpret_cast<const ReadAnalogReaderRequest*>(
               &_ReadAnalogReaderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReadAnalogReaderRequest& a, ReadAnalogReaderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadAnalogReaderRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadAnalogReaderRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadAnalogReaderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadAnalogReaderRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadAnalogReaderRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadAnalogReaderRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadAnalogReaderRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.ReadAnalogReaderRequest";
  }
  protected:
  explicit ReadAnalogReaderRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardNameFieldNumber = 1,
    kAnalogReaderNameFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string board_name = 1 [json_name = "boardName"];
  void clear_board_name();
  const std::string& board_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_board_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_board_name();
  PROTOBUF_NODISCARD std::string* release_board_name();
  void set_allocated_board_name(std::string* board_name);
  private:
  const std::string& _internal_board_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_board_name(const std::string& value);
  std::string* _internal_mutable_board_name();
  public:

  // string analog_reader_name = 2 [json_name = "analogReaderName"];
  void clear_analog_reader_name();
  const std::string& analog_reader_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_analog_reader_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_analog_reader_name();
  PROTOBUF_NODISCARD std::string* release_analog_reader_name();
  void set_allocated_analog_reader_name(std::string* analog_reader_name);
  private:
  const std::string& _internal_analog_reader_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_analog_reader_name(const std::string& value);
  std::string* _internal_mutable_analog_reader_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.ReadAnalogReaderRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr board_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr analog_reader_name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class ReadAnalogReaderResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.ReadAnalogReaderResponse) */ {
 public:
  inline ReadAnalogReaderResponse() : ReadAnalogReaderResponse(nullptr) {}
  ~ReadAnalogReaderResponse() override;
  explicit PROTOBUF_CONSTEXPR ReadAnalogReaderResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadAnalogReaderResponse(const ReadAnalogReaderResponse& from);
  ReadAnalogReaderResponse(ReadAnalogReaderResponse&& from) noexcept
    : ReadAnalogReaderResponse() {
    *this = ::std::move(from);
  }

  inline ReadAnalogReaderResponse& operator=(const ReadAnalogReaderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadAnalogReaderResponse& operator=(ReadAnalogReaderResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadAnalogReaderResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadAnalogReaderResponse* internal_default_instance() {
    return reinterpret_cast<const ReadAnalogReaderResponse*>(
               &_ReadAnalogReaderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReadAnalogReaderResponse& a, ReadAnalogReaderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadAnalogReaderResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadAnalogReaderResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadAnalogReaderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadAnalogReaderResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadAnalogReaderResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadAnalogReaderResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadAnalogReaderResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.ReadAnalogReaderResponse";
  }
  protected:
  explicit ReadAnalogReaderResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1 [json_name = "value"];
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.ReadAnalogReaderResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class WriteAnalogRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.WriteAnalogRequest) */ {
 public:
  inline WriteAnalogRequest() : WriteAnalogRequest(nullptr) {}
  ~WriteAnalogRequest() override;
  explicit PROTOBUF_CONSTEXPR WriteAnalogRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteAnalogRequest(const WriteAnalogRequest& from);
  WriteAnalogRequest(WriteAnalogRequest&& from) noexcept
    : WriteAnalogRequest() {
    *this = ::std::move(from);
  }

  inline WriteAnalogRequest& operator=(const WriteAnalogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteAnalogRequest& operator=(WriteAnalogRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteAnalogRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteAnalogRequest* internal_default_instance() {
    return reinterpret_cast<const WriteAnalogRequest*>(
               &_WriteAnalogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(WriteAnalogRequest& a, WriteAnalogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteAnalogRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteAnalogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteAnalogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteAnalogRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WriteAnalogRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WriteAnalogRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteAnalogRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.WriteAnalogRequest";
  }
  protected:
  explicit WriteAnalogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPinFieldNumber = 2,
    kExtraFieldNumber = 99,
    kValueFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pin = 2 [json_name = "pin"];
  void clear_pin();
  const std::string& pin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin();
  PROTOBUF_NODISCARD std::string* release_pin();
  void set_allocated_pin(std::string* pin);
  private:
  const std::string& _internal_pin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin(const std::string& value);
  std::string* _internal_mutable_pin();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // int32 value = 3 [json_name = "value"];
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.WriteAnalogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class WriteAnalogResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.component.board.v1.WriteAnalogResponse) */ {
 public:
  inline WriteAnalogResponse() : WriteAnalogResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR WriteAnalogResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WriteAnalogResponse(const WriteAnalogResponse& from);
  WriteAnalogResponse(WriteAnalogResponse&& from) noexcept
    : WriteAnalogResponse() {
    *this = ::std::move(from);
  }

  inline WriteAnalogResponse& operator=(const WriteAnalogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteAnalogResponse& operator=(WriteAnalogResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WriteAnalogResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WriteAnalogResponse* internal_default_instance() {
    return reinterpret_cast<const WriteAnalogResponse*>(
               &_WriteAnalogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(WriteAnalogResponse& a, WriteAnalogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteAnalogResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteAnalogResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WriteAnalogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WriteAnalogResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const WriteAnalogResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const WriteAnalogResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.WriteAnalogResponse";
  }
  protected:
  explicit WriteAnalogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.WriteAnalogResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class GetDigitalInterruptValueRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.GetDigitalInterruptValueRequest) */ {
 public:
  inline GetDigitalInterruptValueRequest() : GetDigitalInterruptValueRequest(nullptr) {}
  ~GetDigitalInterruptValueRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDigitalInterruptValueRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDigitalInterruptValueRequest(const GetDigitalInterruptValueRequest& from);
  GetDigitalInterruptValueRequest(GetDigitalInterruptValueRequest&& from) noexcept
    : GetDigitalInterruptValueRequest() {
    *this = ::std::move(from);
  }

  inline GetDigitalInterruptValueRequest& operator=(const GetDigitalInterruptValueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDigitalInterruptValueRequest& operator=(GetDigitalInterruptValueRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDigitalInterruptValueRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDigitalInterruptValueRequest* internal_default_instance() {
    return reinterpret_cast<const GetDigitalInterruptValueRequest*>(
               &_GetDigitalInterruptValueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetDigitalInterruptValueRequest& a, GetDigitalInterruptValueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDigitalInterruptValueRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDigitalInterruptValueRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDigitalInterruptValueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDigitalInterruptValueRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDigitalInterruptValueRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDigitalInterruptValueRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDigitalInterruptValueRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.GetDigitalInterruptValueRequest";
  }
  protected:
  explicit GetDigitalInterruptValueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoardNameFieldNumber = 1,
    kDigitalInterruptNameFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string board_name = 1 [json_name = "boardName"];
  void clear_board_name();
  const std::string& board_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_board_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_board_name();
  PROTOBUF_NODISCARD std::string* release_board_name();
  void set_allocated_board_name(std::string* board_name);
  private:
  const std::string& _internal_board_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_board_name(const std::string& value);
  std::string* _internal_mutable_board_name();
  public:

  // string digital_interrupt_name = 2 [json_name = "digitalInterruptName"];
  void clear_digital_interrupt_name();
  const std::string& digital_interrupt_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digital_interrupt_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digital_interrupt_name();
  PROTOBUF_NODISCARD std::string* release_digital_interrupt_name();
  void set_allocated_digital_interrupt_name(std::string* digital_interrupt_name);
  private:
  const std::string& _internal_digital_interrupt_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digital_interrupt_name(const std::string& value);
  std::string* _internal_mutable_digital_interrupt_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.GetDigitalInterruptValueRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr board_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digital_interrupt_name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class GetDigitalInterruptValueResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.GetDigitalInterruptValueResponse) */ {
 public:
  inline GetDigitalInterruptValueResponse() : GetDigitalInterruptValueResponse(nullptr) {}
  ~GetDigitalInterruptValueResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDigitalInterruptValueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDigitalInterruptValueResponse(const GetDigitalInterruptValueResponse& from);
  GetDigitalInterruptValueResponse(GetDigitalInterruptValueResponse&& from) noexcept
    : GetDigitalInterruptValueResponse() {
    *this = ::std::move(from);
  }

  inline GetDigitalInterruptValueResponse& operator=(const GetDigitalInterruptValueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDigitalInterruptValueResponse& operator=(GetDigitalInterruptValueResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDigitalInterruptValueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDigitalInterruptValueResponse* internal_default_instance() {
    return reinterpret_cast<const GetDigitalInterruptValueResponse*>(
               &_GetDigitalInterruptValueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetDigitalInterruptValueResponse& a, GetDigitalInterruptValueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDigitalInterruptValueResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDigitalInterruptValueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDigitalInterruptValueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDigitalInterruptValueResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDigitalInterruptValueResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDigitalInterruptValueResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDigitalInterruptValueResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.GetDigitalInterruptValueResponse";
  }
  protected:
  explicit GetDigitalInterruptValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1 [json_name = "value"];
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.GetDigitalInterruptValueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class StreamTicksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.StreamTicksRequest) */ {
 public:
  inline StreamTicksRequest() : StreamTicksRequest(nullptr) {}
  ~StreamTicksRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamTicksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamTicksRequest(const StreamTicksRequest& from);
  StreamTicksRequest(StreamTicksRequest&& from) noexcept
    : StreamTicksRequest() {
    *this = ::std::move(from);
  }

  inline StreamTicksRequest& operator=(const StreamTicksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamTicksRequest& operator=(StreamTicksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamTicksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamTicksRequest* internal_default_instance() {
    return reinterpret_cast<const StreamTicksRequest*>(
               &_StreamTicksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StreamTicksRequest& a, StreamTicksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamTicksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamTicksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamTicksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamTicksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamTicksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamTicksRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamTicksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.StreamTicksRequest";
  }
  protected:
  explicit StreamTicksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinNamesFieldNumber = 2,
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // repeated string pin_names = 2 [json_name = "pinNames"];
  int pin_names_size() const;
  private:
  int _internal_pin_names_size() const;
  public:
  void clear_pin_names();
  const std::string& pin_names(int index) const;
  std::string* mutable_pin_names(int index);
  void set_pin_names(int index, const std::string& value);
  void set_pin_names(int index, std::string&& value);
  void set_pin_names(int index, const char* value);
  void set_pin_names(int index, const char* value, size_t size);
  std::string* add_pin_names();
  void add_pin_names(const std::string& value);
  void add_pin_names(std::string&& value);
  void add_pin_names(const char* value);
  void add_pin_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pin_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pin_names();
  private:
  const std::string& _internal_pin_names(int index) const;
  std::string* _internal_add_pin_names();
  public:

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.StreamTicksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pin_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class StreamTicksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.StreamTicksResponse) */ {
 public:
  inline StreamTicksResponse() : StreamTicksResponse(nullptr) {}
  ~StreamTicksResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamTicksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamTicksResponse(const StreamTicksResponse& from);
  StreamTicksResponse(StreamTicksResponse&& from) noexcept
    : StreamTicksResponse() {
    *this = ::std::move(from);
  }

  inline StreamTicksResponse& operator=(const StreamTicksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamTicksResponse& operator=(StreamTicksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamTicksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamTicksResponse* internal_default_instance() {
    return reinterpret_cast<const StreamTicksResponse*>(
               &_StreamTicksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(StreamTicksResponse& a, StreamTicksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamTicksResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamTicksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamTicksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamTicksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamTicksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamTicksResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamTicksResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.StreamTicksResponse";
  }
  protected:
  explicit StreamTicksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinNameFieldNumber = 1,
    kTimeFieldNumber = 2,
    kHighFieldNumber = 3,
  };
  // string pin_name = 1 [json_name = "pinName"];
  void clear_pin_name();
  const std::string& pin_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pin_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pin_name();
  PROTOBUF_NODISCARD std::string* release_pin_name();
  void set_allocated_pin_name(std::string* pin_name);
  private:
  const std::string& _internal_pin_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pin_name(const std::string& value);
  std::string* _internal_mutable_pin_name();
  public:

  // uint64 time = 2 [json_name = "time"];
  void clear_time();
  uint64_t time() const;
  void set_time(uint64_t value);
  private:
  uint64_t _internal_time() const;
  void _internal_set_time(uint64_t value);
  public:

  // bool high = 3 [json_name = "high"];
  void clear_high();
  bool high() const;
  void set_high(bool value);
  private:
  bool _internal_high() const;
  void _internal_set_high(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.StreamTicksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pin_name_;
  uint64_t time_;
  bool high_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class SetPowerModeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.board.v1.SetPowerModeRequest) */ {
 public:
  inline SetPowerModeRequest() : SetPowerModeRequest(nullptr) {}
  ~SetPowerModeRequest() override;
  explicit PROTOBUF_CONSTEXPR SetPowerModeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPowerModeRequest(const SetPowerModeRequest& from);
  SetPowerModeRequest(SetPowerModeRequest&& from) noexcept
    : SetPowerModeRequest() {
    *this = ::std::move(from);
  }

  inline SetPowerModeRequest& operator=(const SetPowerModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPowerModeRequest& operator=(SetPowerModeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPowerModeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPowerModeRequest* internal_default_instance() {
    return reinterpret_cast<const SetPowerModeRequest*>(
               &_SetPowerModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SetPowerModeRequest& a, SetPowerModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPowerModeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPowerModeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPowerModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPowerModeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetPowerModeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetPowerModeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPowerModeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.SetPowerModeRequest";
  }
  protected:
  explicit SetPowerModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDurationFieldNumber = 3,
    kExtraFieldNumber = 99,
    kPowerModeFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .google.protobuf.Duration duration = 3 [json_name = "duration"];
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // .viam.component.board.v1.PowerMode power_mode = 2 [json_name = "powerMode"];
  void clear_power_mode();
  ::viam::component::board::v1::PowerMode power_mode() const;
  void set_power_mode(::viam::component::board::v1::PowerMode value);
  private:
  ::viam::component::board::v1::PowerMode _internal_power_mode() const;
  void _internal_set_power_mode(::viam::component::board::v1::PowerMode value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.SetPowerModeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Duration* duration_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  int power_mode_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// -------------------------------------------------------------------

class SetPowerModeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.component.board.v1.SetPowerModeResponse) */ {
 public:
  inline SetPowerModeResponse() : SetPowerModeResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SetPowerModeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetPowerModeResponse(const SetPowerModeResponse& from);
  SetPowerModeResponse(SetPowerModeResponse&& from) noexcept
    : SetPowerModeResponse() {
    *this = ::std::move(from);
  }

  inline SetPowerModeResponse& operator=(const SetPowerModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPowerModeResponse& operator=(SetPowerModeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetPowerModeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetPowerModeResponse* internal_default_instance() {
    return reinterpret_cast<const SetPowerModeResponse*>(
               &_SetPowerModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SetPowerModeResponse& a, SetPowerModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPowerModeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPowerModeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetPowerModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetPowerModeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetPowerModeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetPowerModeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.board.v1.SetPowerModeResponse";
  }
  protected:
  explicit SetPowerModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.component.board.v1.SetPowerModeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_component_2fboard_2fv1_2fboard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StatusRequest

// string name = 1 [json_name = "name"];
inline void StatusRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StatusRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.StatusRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.StatusRequest.name)
}
inline std::string* StatusRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.StatusRequest.name)
  return _s;
}
inline const std::string& StatusRequest::_internal_name() const {
  return name_.Get();
}
inline void StatusRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* StatusRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* StatusRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.StatusRequest.name)
  return name_.Release();
}
inline void StatusRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.StatusRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool StatusRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool StatusRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StatusRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StatusRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.StatusRequest.extra)
  return _internal_extra();
}
inline void StatusRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.StatusRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StatusRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StatusRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.StatusRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StatusRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StatusRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.StatusRequest.extra)
  return _msg;
}
inline void StatusRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.StatusRequest.extra)
}

// -------------------------------------------------------------------

// StatusResponse

// .viam.common.v1.BoardStatus status = 1 [json_name = "status"];
inline bool StatusResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool StatusResponse::has_status() const {
  return _internal_has_status();
}
inline const ::viam::common::v1::BoardStatus& StatusResponse::_internal_status() const {
  const ::viam::common::v1::BoardStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::BoardStatus&>(
      ::viam::common::v1::_BoardStatus_default_instance_);
}
inline const ::viam::common::v1::BoardStatus& StatusResponse::status() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.StatusResponse.status)
  return _internal_status();
}
inline void StatusResponse::unsafe_arena_set_allocated_status(
    ::viam::common::v1::BoardStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.StatusResponse.status)
}
inline ::viam::common::v1::BoardStatus* StatusResponse::release_status() {
  
  ::viam::common::v1::BoardStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::BoardStatus* StatusResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.StatusResponse.status)
  
  ::viam::common::v1::BoardStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::viam::common::v1::BoardStatus* StatusResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::BoardStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::viam::common::v1::BoardStatus* StatusResponse::mutable_status() {
  ::viam::common::v1::BoardStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.StatusResponse.status)
  return _msg;
}
inline void StatusResponse::set_allocated_status(::viam::common::v1::BoardStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.StatusResponse.status)
}

// -------------------------------------------------------------------

// SetGPIORequest

// string name = 1 [json_name = "name"];
inline void SetGPIORequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SetGPIORequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetGPIORequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGPIORequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.SetGPIORequest.name)
}
inline std::string* SetGPIORequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.SetGPIORequest.name)
  return _s;
}
inline const std::string& SetGPIORequest::_internal_name() const {
  return name_.Get();
}
inline void SetGPIORequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGPIORequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGPIORequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.SetGPIORequest.name)
  return name_.Release();
}
inline void SetGPIORequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.SetGPIORequest.name)
}

// string pin = 2 [json_name = "pin"];
inline void SetGPIORequest::clear_pin() {
  pin_.ClearToEmpty();
}
inline const std::string& SetGPIORequest::pin() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetGPIORequest.pin)
  return _internal_pin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetGPIORequest::set_pin(ArgT0&& arg0, ArgT... args) {
 
 pin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.SetGPIORequest.pin)
}
inline std::string* SetGPIORequest::mutable_pin() {
  std::string* _s = _internal_mutable_pin();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.SetGPIORequest.pin)
  return _s;
}
inline const std::string& SetGPIORequest::_internal_pin() const {
  return pin_.Get();
}
inline void SetGPIORequest::_internal_set_pin(const std::string& value) {
  
  pin_.Set(value, GetArenaForAllocation());
}
inline std::string* SetGPIORequest::_internal_mutable_pin() {
  
  return pin_.Mutable(GetArenaForAllocation());
}
inline std::string* SetGPIORequest::release_pin() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.SetGPIORequest.pin)
  return pin_.Release();
}
inline void SetGPIORequest::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  pin_.SetAllocated(pin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pin_.IsDefault()) {
    pin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.SetGPIORequest.pin)
}

// bool high = 3 [json_name = "high"];
inline void SetGPIORequest::clear_high() {
  high_ = false;
}
inline bool SetGPIORequest::_internal_high() const {
  return high_;
}
inline bool SetGPIORequest::high() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetGPIORequest.high)
  return _internal_high();
}
inline void SetGPIORequest::_internal_set_high(bool value) {
  
  high_ = value;
}
inline void SetGPIORequest::set_high(bool value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.SetGPIORequest.high)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool SetGPIORequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool SetGPIORequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& SetGPIORequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& SetGPIORequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetGPIORequest.extra)
  return _internal_extra();
}
inline void SetGPIORequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.SetGPIORequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetGPIORequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetGPIORequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.SetGPIORequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetGPIORequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetGPIORequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.SetGPIORequest.extra)
  return _msg;
}
inline void SetGPIORequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.SetGPIORequest.extra)
}

// -------------------------------------------------------------------

// SetGPIOResponse

// -------------------------------------------------------------------

// GetGPIORequest

// string name = 1 [json_name = "name"];
inline void GetGPIORequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetGPIORequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.GetGPIORequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGPIORequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.GetGPIORequest.name)
}
inline std::string* GetGPIORequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.GetGPIORequest.name)
  return _s;
}
inline const std::string& GetGPIORequest::_internal_name() const {
  return name_.Get();
}
inline void GetGPIORequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGPIORequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGPIORequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.GetGPIORequest.name)
  return name_.Release();
}
inline void GetGPIORequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.GetGPIORequest.name)
}

// string pin = 2 [json_name = "pin"];
inline void GetGPIORequest::clear_pin() {
  pin_.ClearToEmpty();
}
inline const std::string& GetGPIORequest::pin() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.GetGPIORequest.pin)
  return _internal_pin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetGPIORequest::set_pin(ArgT0&& arg0, ArgT... args) {
 
 pin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.GetGPIORequest.pin)
}
inline std::string* GetGPIORequest::mutable_pin() {
  std::string* _s = _internal_mutable_pin();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.GetGPIORequest.pin)
  return _s;
}
inline const std::string& GetGPIORequest::_internal_pin() const {
  return pin_.Get();
}
inline void GetGPIORequest::_internal_set_pin(const std::string& value) {
  
  pin_.Set(value, GetArenaForAllocation());
}
inline std::string* GetGPIORequest::_internal_mutable_pin() {
  
  return pin_.Mutable(GetArenaForAllocation());
}
inline std::string* GetGPIORequest::release_pin() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.GetGPIORequest.pin)
  return pin_.Release();
}
inline void GetGPIORequest::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  pin_.SetAllocated(pin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pin_.IsDefault()) {
    pin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.GetGPIORequest.pin)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetGPIORequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetGPIORequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetGPIORequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetGPIORequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.GetGPIORequest.extra)
  return _internal_extra();
}
inline void GetGPIORequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.GetGPIORequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetGPIORequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetGPIORequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.GetGPIORequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetGPIORequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetGPIORequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.GetGPIORequest.extra)
  return _msg;
}
inline void GetGPIORequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.GetGPIORequest.extra)
}

// -------------------------------------------------------------------

// GetGPIOResponse

// bool high = 1 [json_name = "high"];
inline void GetGPIOResponse::clear_high() {
  high_ = false;
}
inline bool GetGPIOResponse::_internal_high() const {
  return high_;
}
inline bool GetGPIOResponse::high() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.GetGPIOResponse.high)
  return _internal_high();
}
inline void GetGPIOResponse::_internal_set_high(bool value) {
  
  high_ = value;
}
inline void GetGPIOResponse::set_high(bool value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.GetGPIOResponse.high)
}

// -------------------------------------------------------------------

// PWMRequest

// string name = 1 [json_name = "name"];
inline void PWMRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PWMRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.PWMRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PWMRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.PWMRequest.name)
}
inline std::string* PWMRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.PWMRequest.name)
  return _s;
}
inline const std::string& PWMRequest::_internal_name() const {
  return name_.Get();
}
inline void PWMRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* PWMRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* PWMRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.PWMRequest.name)
  return name_.Release();
}
inline void PWMRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.PWMRequest.name)
}

// string pin = 2 [json_name = "pin"];
inline void PWMRequest::clear_pin() {
  pin_.ClearToEmpty();
}
inline const std::string& PWMRequest::pin() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.PWMRequest.pin)
  return _internal_pin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PWMRequest::set_pin(ArgT0&& arg0, ArgT... args) {
 
 pin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.PWMRequest.pin)
}
inline std::string* PWMRequest::mutable_pin() {
  std::string* _s = _internal_mutable_pin();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.PWMRequest.pin)
  return _s;
}
inline const std::string& PWMRequest::_internal_pin() const {
  return pin_.Get();
}
inline void PWMRequest::_internal_set_pin(const std::string& value) {
  
  pin_.Set(value, GetArenaForAllocation());
}
inline std::string* PWMRequest::_internal_mutable_pin() {
  
  return pin_.Mutable(GetArenaForAllocation());
}
inline std::string* PWMRequest::release_pin() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.PWMRequest.pin)
  return pin_.Release();
}
inline void PWMRequest::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  pin_.SetAllocated(pin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pin_.IsDefault()) {
    pin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.PWMRequest.pin)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool PWMRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool PWMRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& PWMRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& PWMRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.PWMRequest.extra)
  return _internal_extra();
}
inline void PWMRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.PWMRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PWMRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PWMRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.PWMRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PWMRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PWMRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.PWMRequest.extra)
  return _msg;
}
inline void PWMRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.PWMRequest.extra)
}

// -------------------------------------------------------------------

// PWMResponse

// double duty_cycle_pct = 1 [json_name = "dutyCyclePct"];
inline void PWMResponse::clear_duty_cycle_pct() {
  duty_cycle_pct_ = 0;
}
inline double PWMResponse::_internal_duty_cycle_pct() const {
  return duty_cycle_pct_;
}
inline double PWMResponse::duty_cycle_pct() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.PWMResponse.duty_cycle_pct)
  return _internal_duty_cycle_pct();
}
inline void PWMResponse::_internal_set_duty_cycle_pct(double value) {
  
  duty_cycle_pct_ = value;
}
inline void PWMResponse::set_duty_cycle_pct(double value) {
  _internal_set_duty_cycle_pct(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.PWMResponse.duty_cycle_pct)
}

// -------------------------------------------------------------------

// SetPWMRequest

// string name = 1 [json_name = "name"];
inline void SetPWMRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SetPWMRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetPWMRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPWMRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.SetPWMRequest.name)
}
inline std::string* SetPWMRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.SetPWMRequest.name)
  return _s;
}
inline const std::string& SetPWMRequest::_internal_name() const {
  return name_.Get();
}
inline void SetPWMRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPWMRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetPWMRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.SetPWMRequest.name)
  return name_.Release();
}
inline void SetPWMRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.SetPWMRequest.name)
}

// string pin = 2 [json_name = "pin"];
inline void SetPWMRequest::clear_pin() {
  pin_.ClearToEmpty();
}
inline const std::string& SetPWMRequest::pin() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetPWMRequest.pin)
  return _internal_pin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPWMRequest::set_pin(ArgT0&& arg0, ArgT... args) {
 
 pin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.SetPWMRequest.pin)
}
inline std::string* SetPWMRequest::mutable_pin() {
  std::string* _s = _internal_mutable_pin();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.SetPWMRequest.pin)
  return _s;
}
inline const std::string& SetPWMRequest::_internal_pin() const {
  return pin_.Get();
}
inline void SetPWMRequest::_internal_set_pin(const std::string& value) {
  
  pin_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPWMRequest::_internal_mutable_pin() {
  
  return pin_.Mutable(GetArenaForAllocation());
}
inline std::string* SetPWMRequest::release_pin() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.SetPWMRequest.pin)
  return pin_.Release();
}
inline void SetPWMRequest::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  pin_.SetAllocated(pin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pin_.IsDefault()) {
    pin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.SetPWMRequest.pin)
}

// double duty_cycle_pct = 3 [json_name = "dutyCyclePct"];
inline void SetPWMRequest::clear_duty_cycle_pct() {
  duty_cycle_pct_ = 0;
}
inline double SetPWMRequest::_internal_duty_cycle_pct() const {
  return duty_cycle_pct_;
}
inline double SetPWMRequest::duty_cycle_pct() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetPWMRequest.duty_cycle_pct)
  return _internal_duty_cycle_pct();
}
inline void SetPWMRequest::_internal_set_duty_cycle_pct(double value) {
  
  duty_cycle_pct_ = value;
}
inline void SetPWMRequest::set_duty_cycle_pct(double value) {
  _internal_set_duty_cycle_pct(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.SetPWMRequest.duty_cycle_pct)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool SetPWMRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool SetPWMRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& SetPWMRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& SetPWMRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetPWMRequest.extra)
  return _internal_extra();
}
inline void SetPWMRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.SetPWMRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetPWMRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetPWMRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.SetPWMRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetPWMRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetPWMRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.SetPWMRequest.extra)
  return _msg;
}
inline void SetPWMRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.SetPWMRequest.extra)
}

// -------------------------------------------------------------------

// SetPWMResponse

// -------------------------------------------------------------------

// PWMFrequencyRequest

// string name = 1 [json_name = "name"];
inline void PWMFrequencyRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PWMFrequencyRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.PWMFrequencyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PWMFrequencyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.PWMFrequencyRequest.name)
}
inline std::string* PWMFrequencyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.PWMFrequencyRequest.name)
  return _s;
}
inline const std::string& PWMFrequencyRequest::_internal_name() const {
  return name_.Get();
}
inline void PWMFrequencyRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* PWMFrequencyRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* PWMFrequencyRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.PWMFrequencyRequest.name)
  return name_.Release();
}
inline void PWMFrequencyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.PWMFrequencyRequest.name)
}

// string pin = 2 [json_name = "pin"];
inline void PWMFrequencyRequest::clear_pin() {
  pin_.ClearToEmpty();
}
inline const std::string& PWMFrequencyRequest::pin() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.PWMFrequencyRequest.pin)
  return _internal_pin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PWMFrequencyRequest::set_pin(ArgT0&& arg0, ArgT... args) {
 
 pin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.PWMFrequencyRequest.pin)
}
inline std::string* PWMFrequencyRequest::mutable_pin() {
  std::string* _s = _internal_mutable_pin();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.PWMFrequencyRequest.pin)
  return _s;
}
inline const std::string& PWMFrequencyRequest::_internal_pin() const {
  return pin_.Get();
}
inline void PWMFrequencyRequest::_internal_set_pin(const std::string& value) {
  
  pin_.Set(value, GetArenaForAllocation());
}
inline std::string* PWMFrequencyRequest::_internal_mutable_pin() {
  
  return pin_.Mutable(GetArenaForAllocation());
}
inline std::string* PWMFrequencyRequest::release_pin() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.PWMFrequencyRequest.pin)
  return pin_.Release();
}
inline void PWMFrequencyRequest::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  pin_.SetAllocated(pin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pin_.IsDefault()) {
    pin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.PWMFrequencyRequest.pin)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool PWMFrequencyRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool PWMFrequencyRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& PWMFrequencyRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& PWMFrequencyRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.PWMFrequencyRequest.extra)
  return _internal_extra();
}
inline void PWMFrequencyRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.PWMFrequencyRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PWMFrequencyRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PWMFrequencyRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.PWMFrequencyRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PWMFrequencyRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PWMFrequencyRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.PWMFrequencyRequest.extra)
  return _msg;
}
inline void PWMFrequencyRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.PWMFrequencyRequest.extra)
}

// -------------------------------------------------------------------

// PWMFrequencyResponse

// uint64 frequency_hz = 1 [json_name = "frequencyHz"];
inline void PWMFrequencyResponse::clear_frequency_hz() {
  frequency_hz_ = uint64_t{0u};
}
inline uint64_t PWMFrequencyResponse::_internal_frequency_hz() const {
  return frequency_hz_;
}
inline uint64_t PWMFrequencyResponse::frequency_hz() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.PWMFrequencyResponse.frequency_hz)
  return _internal_frequency_hz();
}
inline void PWMFrequencyResponse::_internal_set_frequency_hz(uint64_t value) {
  
  frequency_hz_ = value;
}
inline void PWMFrequencyResponse::set_frequency_hz(uint64_t value) {
  _internal_set_frequency_hz(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.PWMFrequencyResponse.frequency_hz)
}

// -------------------------------------------------------------------

// SetPWMFrequencyRequest

// string name = 1 [json_name = "name"];
inline void SetPWMFrequencyRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SetPWMFrequencyRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetPWMFrequencyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPWMFrequencyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.SetPWMFrequencyRequest.name)
}
inline std::string* SetPWMFrequencyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.SetPWMFrequencyRequest.name)
  return _s;
}
inline const std::string& SetPWMFrequencyRequest::_internal_name() const {
  return name_.Get();
}
inline void SetPWMFrequencyRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPWMFrequencyRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetPWMFrequencyRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.SetPWMFrequencyRequest.name)
  return name_.Release();
}
inline void SetPWMFrequencyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.SetPWMFrequencyRequest.name)
}

// string pin = 2 [json_name = "pin"];
inline void SetPWMFrequencyRequest::clear_pin() {
  pin_.ClearToEmpty();
}
inline const std::string& SetPWMFrequencyRequest::pin() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetPWMFrequencyRequest.pin)
  return _internal_pin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPWMFrequencyRequest::set_pin(ArgT0&& arg0, ArgT... args) {
 
 pin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.SetPWMFrequencyRequest.pin)
}
inline std::string* SetPWMFrequencyRequest::mutable_pin() {
  std::string* _s = _internal_mutable_pin();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.SetPWMFrequencyRequest.pin)
  return _s;
}
inline const std::string& SetPWMFrequencyRequest::_internal_pin() const {
  return pin_.Get();
}
inline void SetPWMFrequencyRequest::_internal_set_pin(const std::string& value) {
  
  pin_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPWMFrequencyRequest::_internal_mutable_pin() {
  
  return pin_.Mutable(GetArenaForAllocation());
}
inline std::string* SetPWMFrequencyRequest::release_pin() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.SetPWMFrequencyRequest.pin)
  return pin_.Release();
}
inline void SetPWMFrequencyRequest::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  pin_.SetAllocated(pin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pin_.IsDefault()) {
    pin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.SetPWMFrequencyRequest.pin)
}

// uint64 frequency_hz = 3 [json_name = "frequencyHz"];
inline void SetPWMFrequencyRequest::clear_frequency_hz() {
  frequency_hz_ = uint64_t{0u};
}
inline uint64_t SetPWMFrequencyRequest::_internal_frequency_hz() const {
  return frequency_hz_;
}
inline uint64_t SetPWMFrequencyRequest::frequency_hz() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetPWMFrequencyRequest.frequency_hz)
  return _internal_frequency_hz();
}
inline void SetPWMFrequencyRequest::_internal_set_frequency_hz(uint64_t value) {
  
  frequency_hz_ = value;
}
inline void SetPWMFrequencyRequest::set_frequency_hz(uint64_t value) {
  _internal_set_frequency_hz(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.SetPWMFrequencyRequest.frequency_hz)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool SetPWMFrequencyRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool SetPWMFrequencyRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& SetPWMFrequencyRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& SetPWMFrequencyRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetPWMFrequencyRequest.extra)
  return _internal_extra();
}
inline void SetPWMFrequencyRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.SetPWMFrequencyRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetPWMFrequencyRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetPWMFrequencyRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.SetPWMFrequencyRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetPWMFrequencyRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetPWMFrequencyRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.SetPWMFrequencyRequest.extra)
  return _msg;
}
inline void SetPWMFrequencyRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.SetPWMFrequencyRequest.extra)
}

// -------------------------------------------------------------------

// SetPWMFrequencyResponse

// -------------------------------------------------------------------

// ReadAnalogReaderRequest

// string board_name = 1 [json_name = "boardName"];
inline void ReadAnalogReaderRequest::clear_board_name() {
  board_name_.ClearToEmpty();
}
inline const std::string& ReadAnalogReaderRequest::board_name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.ReadAnalogReaderRequest.board_name)
  return _internal_board_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadAnalogReaderRequest::set_board_name(ArgT0&& arg0, ArgT... args) {
 
 board_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.ReadAnalogReaderRequest.board_name)
}
inline std::string* ReadAnalogReaderRequest::mutable_board_name() {
  std::string* _s = _internal_mutable_board_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.ReadAnalogReaderRequest.board_name)
  return _s;
}
inline const std::string& ReadAnalogReaderRequest::_internal_board_name() const {
  return board_name_.Get();
}
inline void ReadAnalogReaderRequest::_internal_set_board_name(const std::string& value) {
  
  board_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadAnalogReaderRequest::_internal_mutable_board_name() {
  
  return board_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadAnalogReaderRequest::release_board_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.ReadAnalogReaderRequest.board_name)
  return board_name_.Release();
}
inline void ReadAnalogReaderRequest::set_allocated_board_name(std::string* board_name) {
  if (board_name != nullptr) {
    
  } else {
    
  }
  board_name_.SetAllocated(board_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (board_name_.IsDefault()) {
    board_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.ReadAnalogReaderRequest.board_name)
}

// string analog_reader_name = 2 [json_name = "analogReaderName"];
inline void ReadAnalogReaderRequest::clear_analog_reader_name() {
  analog_reader_name_.ClearToEmpty();
}
inline const std::string& ReadAnalogReaderRequest::analog_reader_name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.ReadAnalogReaderRequest.analog_reader_name)
  return _internal_analog_reader_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadAnalogReaderRequest::set_analog_reader_name(ArgT0&& arg0, ArgT... args) {
 
 analog_reader_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.ReadAnalogReaderRequest.analog_reader_name)
}
inline std::string* ReadAnalogReaderRequest::mutable_analog_reader_name() {
  std::string* _s = _internal_mutable_analog_reader_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.ReadAnalogReaderRequest.analog_reader_name)
  return _s;
}
inline const std::string& ReadAnalogReaderRequest::_internal_analog_reader_name() const {
  return analog_reader_name_.Get();
}
inline void ReadAnalogReaderRequest::_internal_set_analog_reader_name(const std::string& value) {
  
  analog_reader_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ReadAnalogReaderRequest::_internal_mutable_analog_reader_name() {
  
  return analog_reader_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ReadAnalogReaderRequest::release_analog_reader_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.ReadAnalogReaderRequest.analog_reader_name)
  return analog_reader_name_.Release();
}
inline void ReadAnalogReaderRequest::set_allocated_analog_reader_name(std::string* analog_reader_name) {
  if (analog_reader_name != nullptr) {
    
  } else {
    
  }
  analog_reader_name_.SetAllocated(analog_reader_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (analog_reader_name_.IsDefault()) {
    analog_reader_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.ReadAnalogReaderRequest.analog_reader_name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool ReadAnalogReaderRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool ReadAnalogReaderRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& ReadAnalogReaderRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& ReadAnalogReaderRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.ReadAnalogReaderRequest.extra)
  return _internal_extra();
}
inline void ReadAnalogReaderRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.ReadAnalogReaderRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ReadAnalogReaderRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ReadAnalogReaderRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.ReadAnalogReaderRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ReadAnalogReaderRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ReadAnalogReaderRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.ReadAnalogReaderRequest.extra)
  return _msg;
}
inline void ReadAnalogReaderRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.ReadAnalogReaderRequest.extra)
}

// -------------------------------------------------------------------

// ReadAnalogReaderResponse

// int32 value = 1 [json_name = "value"];
inline void ReadAnalogReaderResponse::clear_value() {
  value_ = 0;
}
inline int32_t ReadAnalogReaderResponse::_internal_value() const {
  return value_;
}
inline int32_t ReadAnalogReaderResponse::value() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.ReadAnalogReaderResponse.value)
  return _internal_value();
}
inline void ReadAnalogReaderResponse::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void ReadAnalogReaderResponse::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.ReadAnalogReaderResponse.value)
}

// -------------------------------------------------------------------

// WriteAnalogRequest

// string name = 1 [json_name = "name"];
inline void WriteAnalogRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WriteAnalogRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.WriteAnalogRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteAnalogRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.WriteAnalogRequest.name)
}
inline std::string* WriteAnalogRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.WriteAnalogRequest.name)
  return _s;
}
inline const std::string& WriteAnalogRequest::_internal_name() const {
  return name_.Get();
}
inline void WriteAnalogRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteAnalogRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteAnalogRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.WriteAnalogRequest.name)
  return name_.Release();
}
inline void WriteAnalogRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.WriteAnalogRequest.name)
}

// string pin = 2 [json_name = "pin"];
inline void WriteAnalogRequest::clear_pin() {
  pin_.ClearToEmpty();
}
inline const std::string& WriteAnalogRequest::pin() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.WriteAnalogRequest.pin)
  return _internal_pin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WriteAnalogRequest::set_pin(ArgT0&& arg0, ArgT... args) {
 
 pin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.WriteAnalogRequest.pin)
}
inline std::string* WriteAnalogRequest::mutable_pin() {
  std::string* _s = _internal_mutable_pin();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.WriteAnalogRequest.pin)
  return _s;
}
inline const std::string& WriteAnalogRequest::_internal_pin() const {
  return pin_.Get();
}
inline void WriteAnalogRequest::_internal_set_pin(const std::string& value) {
  
  pin_.Set(value, GetArenaForAllocation());
}
inline std::string* WriteAnalogRequest::_internal_mutable_pin() {
  
  return pin_.Mutable(GetArenaForAllocation());
}
inline std::string* WriteAnalogRequest::release_pin() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.WriteAnalogRequest.pin)
  return pin_.Release();
}
inline void WriteAnalogRequest::set_allocated_pin(std::string* pin) {
  if (pin != nullptr) {
    
  } else {
    
  }
  pin_.SetAllocated(pin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pin_.IsDefault()) {
    pin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.WriteAnalogRequest.pin)
}

// int32 value = 3 [json_name = "value"];
inline void WriteAnalogRequest::clear_value() {
  value_ = 0;
}
inline int32_t WriteAnalogRequest::_internal_value() const {
  return value_;
}
inline int32_t WriteAnalogRequest::value() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.WriteAnalogRequest.value)
  return _internal_value();
}
inline void WriteAnalogRequest::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void WriteAnalogRequest::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.WriteAnalogRequest.value)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool WriteAnalogRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool WriteAnalogRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& WriteAnalogRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& WriteAnalogRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.WriteAnalogRequest.extra)
  return _internal_extra();
}
inline void WriteAnalogRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.WriteAnalogRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* WriteAnalogRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* WriteAnalogRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.WriteAnalogRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* WriteAnalogRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* WriteAnalogRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.WriteAnalogRequest.extra)
  return _msg;
}
inline void WriteAnalogRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.WriteAnalogRequest.extra)
}

// -------------------------------------------------------------------

// WriteAnalogResponse

// -------------------------------------------------------------------

// GetDigitalInterruptValueRequest

// string board_name = 1 [json_name = "boardName"];
inline void GetDigitalInterruptValueRequest::clear_board_name() {
  board_name_.ClearToEmpty();
}
inline const std::string& GetDigitalInterruptValueRequest::board_name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.GetDigitalInterruptValueRequest.board_name)
  return _internal_board_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDigitalInterruptValueRequest::set_board_name(ArgT0&& arg0, ArgT... args) {
 
 board_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.GetDigitalInterruptValueRequest.board_name)
}
inline std::string* GetDigitalInterruptValueRequest::mutable_board_name() {
  std::string* _s = _internal_mutable_board_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.GetDigitalInterruptValueRequest.board_name)
  return _s;
}
inline const std::string& GetDigitalInterruptValueRequest::_internal_board_name() const {
  return board_name_.Get();
}
inline void GetDigitalInterruptValueRequest::_internal_set_board_name(const std::string& value) {
  
  board_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDigitalInterruptValueRequest::_internal_mutable_board_name() {
  
  return board_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDigitalInterruptValueRequest::release_board_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.GetDigitalInterruptValueRequest.board_name)
  return board_name_.Release();
}
inline void GetDigitalInterruptValueRequest::set_allocated_board_name(std::string* board_name) {
  if (board_name != nullptr) {
    
  } else {
    
  }
  board_name_.SetAllocated(board_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (board_name_.IsDefault()) {
    board_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.GetDigitalInterruptValueRequest.board_name)
}

// string digital_interrupt_name = 2 [json_name = "digitalInterruptName"];
inline void GetDigitalInterruptValueRequest::clear_digital_interrupt_name() {
  digital_interrupt_name_.ClearToEmpty();
}
inline const std::string& GetDigitalInterruptValueRequest::digital_interrupt_name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.GetDigitalInterruptValueRequest.digital_interrupt_name)
  return _internal_digital_interrupt_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDigitalInterruptValueRequest::set_digital_interrupt_name(ArgT0&& arg0, ArgT... args) {
 
 digital_interrupt_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.GetDigitalInterruptValueRequest.digital_interrupt_name)
}
inline std::string* GetDigitalInterruptValueRequest::mutable_digital_interrupt_name() {
  std::string* _s = _internal_mutable_digital_interrupt_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.GetDigitalInterruptValueRequest.digital_interrupt_name)
  return _s;
}
inline const std::string& GetDigitalInterruptValueRequest::_internal_digital_interrupt_name() const {
  return digital_interrupt_name_.Get();
}
inline void GetDigitalInterruptValueRequest::_internal_set_digital_interrupt_name(const std::string& value) {
  
  digital_interrupt_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDigitalInterruptValueRequest::_internal_mutable_digital_interrupt_name() {
  
  return digital_interrupt_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDigitalInterruptValueRequest::release_digital_interrupt_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.GetDigitalInterruptValueRequest.digital_interrupt_name)
  return digital_interrupt_name_.Release();
}
inline void GetDigitalInterruptValueRequest::set_allocated_digital_interrupt_name(std::string* digital_interrupt_name) {
  if (digital_interrupt_name != nullptr) {
    
  } else {
    
  }
  digital_interrupt_name_.SetAllocated(digital_interrupt_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (digital_interrupt_name_.IsDefault()) {
    digital_interrupt_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.GetDigitalInterruptValueRequest.digital_interrupt_name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetDigitalInterruptValueRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetDigitalInterruptValueRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetDigitalInterruptValueRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetDigitalInterruptValueRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.GetDigitalInterruptValueRequest.extra)
  return _internal_extra();
}
inline void GetDigitalInterruptValueRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.GetDigitalInterruptValueRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetDigitalInterruptValueRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetDigitalInterruptValueRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.GetDigitalInterruptValueRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetDigitalInterruptValueRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetDigitalInterruptValueRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.GetDigitalInterruptValueRequest.extra)
  return _msg;
}
inline void GetDigitalInterruptValueRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.GetDigitalInterruptValueRequest.extra)
}

// -------------------------------------------------------------------

// GetDigitalInterruptValueResponse

// int64 value = 1 [json_name = "value"];
inline void GetDigitalInterruptValueResponse::clear_value() {
  value_ = int64_t{0};
}
inline int64_t GetDigitalInterruptValueResponse::_internal_value() const {
  return value_;
}
inline int64_t GetDigitalInterruptValueResponse::value() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.GetDigitalInterruptValueResponse.value)
  return _internal_value();
}
inline void GetDigitalInterruptValueResponse::_internal_set_value(int64_t value) {
  
  value_ = value;
}
inline void GetDigitalInterruptValueResponse::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.GetDigitalInterruptValueResponse.value)
}

// -------------------------------------------------------------------

// StreamTicksRequest

// string name = 1 [json_name = "name"];
inline void StreamTicksRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StreamTicksRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.StreamTicksRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamTicksRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.StreamTicksRequest.name)
}
inline std::string* StreamTicksRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.StreamTicksRequest.name)
  return _s;
}
inline const std::string& StreamTicksRequest::_internal_name() const {
  return name_.Get();
}
inline void StreamTicksRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamTicksRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamTicksRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.StreamTicksRequest.name)
  return name_.Release();
}
inline void StreamTicksRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.StreamTicksRequest.name)
}

// repeated string pin_names = 2 [json_name = "pinNames"];
inline int StreamTicksRequest::_internal_pin_names_size() const {
  return pin_names_.size();
}
inline int StreamTicksRequest::pin_names_size() const {
  return _internal_pin_names_size();
}
inline void StreamTicksRequest::clear_pin_names() {
  pin_names_.Clear();
}
inline std::string* StreamTicksRequest::add_pin_names() {
  std::string* _s = _internal_add_pin_names();
  // @@protoc_insertion_point(field_add_mutable:viam.component.board.v1.StreamTicksRequest.pin_names)
  return _s;
}
inline const std::string& StreamTicksRequest::_internal_pin_names(int index) const {
  return pin_names_.Get(index);
}
inline const std::string& StreamTicksRequest::pin_names(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.StreamTicksRequest.pin_names)
  return _internal_pin_names(index);
}
inline std::string* StreamTicksRequest::mutable_pin_names(int index) {
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.StreamTicksRequest.pin_names)
  return pin_names_.Mutable(index);
}
inline void StreamTicksRequest::set_pin_names(int index, const std::string& value) {
  pin_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.StreamTicksRequest.pin_names)
}
inline void StreamTicksRequest::set_pin_names(int index, std::string&& value) {
  pin_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.component.board.v1.StreamTicksRequest.pin_names)
}
inline void StreamTicksRequest::set_pin_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pin_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.component.board.v1.StreamTicksRequest.pin_names)
}
inline void StreamTicksRequest::set_pin_names(int index, const char* value, size_t size) {
  pin_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.component.board.v1.StreamTicksRequest.pin_names)
}
inline std::string* StreamTicksRequest::_internal_add_pin_names() {
  return pin_names_.Add();
}
inline void StreamTicksRequest::add_pin_names(const std::string& value) {
  pin_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.component.board.v1.StreamTicksRequest.pin_names)
}
inline void StreamTicksRequest::add_pin_names(std::string&& value) {
  pin_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.component.board.v1.StreamTicksRequest.pin_names)
}
inline void StreamTicksRequest::add_pin_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pin_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.component.board.v1.StreamTicksRequest.pin_names)
}
inline void StreamTicksRequest::add_pin_names(const char* value, size_t size) {
  pin_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.component.board.v1.StreamTicksRequest.pin_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamTicksRequest::pin_names() const {
  // @@protoc_insertion_point(field_list:viam.component.board.v1.StreamTicksRequest.pin_names)
  return pin_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamTicksRequest::mutable_pin_names() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.board.v1.StreamTicksRequest.pin_names)
  return &pin_names_;
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool StreamTicksRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool StreamTicksRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StreamTicksRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StreamTicksRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.StreamTicksRequest.extra)
  return _internal_extra();
}
inline void StreamTicksRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.StreamTicksRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StreamTicksRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StreamTicksRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.StreamTicksRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StreamTicksRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StreamTicksRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.StreamTicksRequest.extra)
  return _msg;
}
inline void StreamTicksRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.StreamTicksRequest.extra)
}

// -------------------------------------------------------------------

// StreamTicksResponse

// string pin_name = 1 [json_name = "pinName"];
inline void StreamTicksResponse::clear_pin_name() {
  pin_name_.ClearToEmpty();
}
inline const std::string& StreamTicksResponse::pin_name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.StreamTicksResponse.pin_name)
  return _internal_pin_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamTicksResponse::set_pin_name(ArgT0&& arg0, ArgT... args) {
 
 pin_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.StreamTicksResponse.pin_name)
}
inline std::string* StreamTicksResponse::mutable_pin_name() {
  std::string* _s = _internal_mutable_pin_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.StreamTicksResponse.pin_name)
  return _s;
}
inline const std::string& StreamTicksResponse::_internal_pin_name() const {
  return pin_name_.Get();
}
inline void StreamTicksResponse::_internal_set_pin_name(const std::string& value) {
  
  pin_name_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamTicksResponse::_internal_mutable_pin_name() {
  
  return pin_name_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamTicksResponse::release_pin_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.StreamTicksResponse.pin_name)
  return pin_name_.Release();
}
inline void StreamTicksResponse::set_allocated_pin_name(std::string* pin_name) {
  if (pin_name != nullptr) {
    
  } else {
    
  }
  pin_name_.SetAllocated(pin_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pin_name_.IsDefault()) {
    pin_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.StreamTicksResponse.pin_name)
}

// uint64 time = 2 [json_name = "time"];
inline void StreamTicksResponse::clear_time() {
  time_ = uint64_t{0u};
}
inline uint64_t StreamTicksResponse::_internal_time() const {
  return time_;
}
inline uint64_t StreamTicksResponse::time() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.StreamTicksResponse.time)
  return _internal_time();
}
inline void StreamTicksResponse::_internal_set_time(uint64_t value) {
  
  time_ = value;
}
inline void StreamTicksResponse::set_time(uint64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.StreamTicksResponse.time)
}

// bool high = 3 [json_name = "high"];
inline void StreamTicksResponse::clear_high() {
  high_ = false;
}
inline bool StreamTicksResponse::_internal_high() const {
  return high_;
}
inline bool StreamTicksResponse::high() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.StreamTicksResponse.high)
  return _internal_high();
}
inline void StreamTicksResponse::_internal_set_high(bool value) {
  
  high_ = value;
}
inline void StreamTicksResponse::set_high(bool value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.StreamTicksResponse.high)
}

// -------------------------------------------------------------------

// SetPowerModeRequest

// string name = 1 [json_name = "name"];
inline void SetPowerModeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& SetPowerModeRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetPowerModeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetPowerModeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.board.v1.SetPowerModeRequest.name)
}
inline std::string* SetPowerModeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.SetPowerModeRequest.name)
  return _s;
}
inline const std::string& SetPowerModeRequest::_internal_name() const {
  return name_.Get();
}
inline void SetPowerModeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* SetPowerModeRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* SetPowerModeRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.SetPowerModeRequest.name)
  return name_.Release();
}
inline void SetPowerModeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.SetPowerModeRequest.name)
}

// .viam.component.board.v1.PowerMode power_mode = 2 [json_name = "powerMode"];
inline void SetPowerModeRequest::clear_power_mode() {
  power_mode_ = 0;
}
inline ::viam::component::board::v1::PowerMode SetPowerModeRequest::_internal_power_mode() const {
  return static_cast< ::viam::component::board::v1::PowerMode >(power_mode_);
}
inline ::viam::component::board::v1::PowerMode SetPowerModeRequest::power_mode() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetPowerModeRequest.power_mode)
  return _internal_power_mode();
}
inline void SetPowerModeRequest::_internal_set_power_mode(::viam::component::board::v1::PowerMode value) {
  
  power_mode_ = value;
}
inline void SetPowerModeRequest::set_power_mode(::viam::component::board::v1::PowerMode value) {
  _internal_set_power_mode(value);
  // @@protoc_insertion_point(field_set:viam.component.board.v1.SetPowerModeRequest.power_mode)
}

// optional .google.protobuf.Duration duration = 3 [json_name = "duration"];
inline bool SetPowerModeRequest::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || duration_ != nullptr);
  return value;
}
inline bool SetPowerModeRequest::has_duration() const {
  return _internal_has_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SetPowerModeRequest::_internal_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& SetPowerModeRequest::duration() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetPowerModeRequest.duration)
  return _internal_duration();
}
inline void SetPowerModeRequest::unsafe_arena_set_allocated_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.SetPowerModeRequest.duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SetPowerModeRequest::release_duration() {
  _has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SetPowerModeRequest::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.SetPowerModeRequest.duration)
  _has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SetPowerModeRequest::_internal_mutable_duration() {
  _has_bits_[0] |= 0x00000001u;
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    duration_ = p;
  }
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* SetPowerModeRequest::mutable_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.SetPowerModeRequest.duration)
  return _msg;
}
inline void SetPowerModeRequest::set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.SetPowerModeRequest.duration)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool SetPowerModeRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool SetPowerModeRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& SetPowerModeRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& SetPowerModeRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.board.v1.SetPowerModeRequest.extra)
  return _internal_extra();
}
inline void SetPowerModeRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.board.v1.SetPowerModeRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetPowerModeRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetPowerModeRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.board.v1.SetPowerModeRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetPowerModeRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* SetPowerModeRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.board.v1.SetPowerModeRequest.extra)
  return _msg;
}
inline void SetPowerModeRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.board.v1.SetPowerModeRequest.extra)
}

// -------------------------------------------------------------------

// SetPowerModeResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace board
}  // namespace component
}  // namespace viam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::viam::component::board::v1::PowerMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::component::board::v1::PowerMode>() {
  return ::viam::component::board::v1::PowerMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_2fboard_2fv1_2fboard_2eproto
