// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/gantry/v1/gantry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_2fgantry_2fv1_2fgantry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_2fgantry_2fv1_2fgantry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_2fgantry_2fv1_2fgantry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_2fgantry_2fv1_2fgantry_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_2fgantry_2fv1_2fgantry_2eproto;
namespace viam {
namespace component {
namespace gantry {
namespace v1 {
class GetLengthsRequest;
struct GetLengthsRequestDefaultTypeInternal;
extern GetLengthsRequestDefaultTypeInternal _GetLengthsRequest_default_instance_;
class GetLengthsResponse;
struct GetLengthsResponseDefaultTypeInternal;
extern GetLengthsResponseDefaultTypeInternal _GetLengthsResponse_default_instance_;
class GetPositionRequest;
struct GetPositionRequestDefaultTypeInternal;
extern GetPositionRequestDefaultTypeInternal _GetPositionRequest_default_instance_;
class GetPositionResponse;
struct GetPositionResponseDefaultTypeInternal;
extern GetPositionResponseDefaultTypeInternal _GetPositionResponse_default_instance_;
class HomeRequest;
struct HomeRequestDefaultTypeInternal;
extern HomeRequestDefaultTypeInternal _HomeRequest_default_instance_;
class HomeResponse;
struct HomeResponseDefaultTypeInternal;
extern HomeResponseDefaultTypeInternal _HomeResponse_default_instance_;
class IsMovingRequest;
struct IsMovingRequestDefaultTypeInternal;
extern IsMovingRequestDefaultTypeInternal _IsMovingRequest_default_instance_;
class IsMovingResponse;
struct IsMovingResponseDefaultTypeInternal;
extern IsMovingResponseDefaultTypeInternal _IsMovingResponse_default_instance_;
class MoveToPositionRequest;
struct MoveToPositionRequestDefaultTypeInternal;
extern MoveToPositionRequestDefaultTypeInternal _MoveToPositionRequest_default_instance_;
class MoveToPositionResponse;
struct MoveToPositionResponseDefaultTypeInternal;
extern MoveToPositionResponseDefaultTypeInternal _MoveToPositionResponse_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StopRequest;
struct StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
struct StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
}  // namespace v1
}  // namespace gantry
}  // namespace component
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::component::gantry::v1::GetLengthsRequest* Arena::CreateMaybeMessage<::viam::component::gantry::v1::GetLengthsRequest>(Arena*);
template<> ::viam::component::gantry::v1::GetLengthsResponse* Arena::CreateMaybeMessage<::viam::component::gantry::v1::GetLengthsResponse>(Arena*);
template<> ::viam::component::gantry::v1::GetPositionRequest* Arena::CreateMaybeMessage<::viam::component::gantry::v1::GetPositionRequest>(Arena*);
template<> ::viam::component::gantry::v1::GetPositionResponse* Arena::CreateMaybeMessage<::viam::component::gantry::v1::GetPositionResponse>(Arena*);
template<> ::viam::component::gantry::v1::HomeRequest* Arena::CreateMaybeMessage<::viam::component::gantry::v1::HomeRequest>(Arena*);
template<> ::viam::component::gantry::v1::HomeResponse* Arena::CreateMaybeMessage<::viam::component::gantry::v1::HomeResponse>(Arena*);
template<> ::viam::component::gantry::v1::IsMovingRequest* Arena::CreateMaybeMessage<::viam::component::gantry::v1::IsMovingRequest>(Arena*);
template<> ::viam::component::gantry::v1::IsMovingResponse* Arena::CreateMaybeMessage<::viam::component::gantry::v1::IsMovingResponse>(Arena*);
template<> ::viam::component::gantry::v1::MoveToPositionRequest* Arena::CreateMaybeMessage<::viam::component::gantry::v1::MoveToPositionRequest>(Arena*);
template<> ::viam::component::gantry::v1::MoveToPositionResponse* Arena::CreateMaybeMessage<::viam::component::gantry::v1::MoveToPositionResponse>(Arena*);
template<> ::viam::component::gantry::v1::Status* Arena::CreateMaybeMessage<::viam::component::gantry::v1::Status>(Arena*);
template<> ::viam::component::gantry::v1::StopRequest* Arena::CreateMaybeMessage<::viam::component::gantry::v1::StopRequest>(Arena*);
template<> ::viam::component::gantry::v1::StopResponse* Arena::CreateMaybeMessage<::viam::component::gantry::v1::StopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace component {
namespace gantry {
namespace v1 {

// ===================================================================

class GetPositionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.GetPositionRequest) */ {
 public:
  inline GetPositionRequest() : GetPositionRequest(nullptr) {}
  ~GetPositionRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPositionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPositionRequest(const GetPositionRequest& from);
  GetPositionRequest(GetPositionRequest&& from) noexcept
    : GetPositionRequest() {
    *this = ::std::move(from);
  }

  inline GetPositionRequest& operator=(const GetPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPositionRequest& operator=(GetPositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPositionRequest* internal_default_instance() {
    return reinterpret_cast<const GetPositionRequest*>(
               &_GetPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetPositionRequest& a, GetPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPositionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPositionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPositionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPositionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPositionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.GetPositionRequest";
  }
  protected:
  explicit GetPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.GetPositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// -------------------------------------------------------------------

class GetPositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.GetPositionResponse) */ {
 public:
  inline GetPositionResponse() : GetPositionResponse(nullptr) {}
  ~GetPositionResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPositionResponse(const GetPositionResponse& from);
  GetPositionResponse(GetPositionResponse&& from) noexcept
    : GetPositionResponse() {
    *this = ::std::move(from);
  }

  inline GetPositionResponse& operator=(const GetPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPositionResponse& operator=(GetPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPositionResponse* internal_default_instance() {
    return reinterpret_cast<const GetPositionResponse*>(
               &_GetPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetPositionResponse& a, GetPositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPositionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPositionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPositionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.GetPositionResponse";
  }
  protected:
  explicit GetPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsMmFieldNumber = 1,
  };
  // repeated double positions_mm = 1 [json_name = "positionsMm"];
  int positions_mm_size() const;
  private:
  int _internal_positions_mm_size() const;
  public:
  void clear_positions_mm();
  private:
  double _internal_positions_mm(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_positions_mm() const;
  void _internal_add_positions_mm(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_positions_mm();
  public:
  double positions_mm(int index) const;
  void set_positions_mm(int index, double value);
  void add_positions_mm(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      positions_mm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_positions_mm();

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.GetPositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > positions_mm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// -------------------------------------------------------------------

class MoveToPositionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.MoveToPositionRequest) */ {
 public:
  inline MoveToPositionRequest() : MoveToPositionRequest(nullptr) {}
  ~MoveToPositionRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveToPositionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveToPositionRequest(const MoveToPositionRequest& from);
  MoveToPositionRequest(MoveToPositionRequest&& from) noexcept
    : MoveToPositionRequest() {
    *this = ::std::move(from);
  }

  inline MoveToPositionRequest& operator=(const MoveToPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveToPositionRequest& operator=(MoveToPositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveToPositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveToPositionRequest* internal_default_instance() {
    return reinterpret_cast<const MoveToPositionRequest*>(
               &_MoveToPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MoveToPositionRequest& a, MoveToPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveToPositionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveToPositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveToPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveToPositionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveToPositionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveToPositionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveToPositionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.MoveToPositionRequest";
  }
  protected:
  explicit MoveToPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsMmFieldNumber = 2,
    kSpeedsMmPerSecFieldNumber = 3,
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // repeated double positions_mm = 2 [json_name = "positionsMm"];
  int positions_mm_size() const;
  private:
  int _internal_positions_mm_size() const;
  public:
  void clear_positions_mm();
  private:
  double _internal_positions_mm(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_positions_mm() const;
  void _internal_add_positions_mm(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_positions_mm();
  public:
  double positions_mm(int index) const;
  void set_positions_mm(int index, double value);
  void add_positions_mm(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      positions_mm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_positions_mm();

  // repeated double speeds_mm_per_sec = 3 [json_name = "speedsMmPerSec"];
  int speeds_mm_per_sec_size() const;
  private:
  int _internal_speeds_mm_per_sec_size() const;
  public:
  void clear_speeds_mm_per_sec();
  private:
  double _internal_speeds_mm_per_sec(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_speeds_mm_per_sec() const;
  void _internal_add_speeds_mm_per_sec(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_speeds_mm_per_sec();
  public:
  double speeds_mm_per_sec(int index) const;
  void set_speeds_mm_per_sec(int index, double value);
  void add_speeds_mm_per_sec(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      speeds_mm_per_sec() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_speeds_mm_per_sec();

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.MoveToPositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > positions_mm_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > speeds_mm_per_sec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// -------------------------------------------------------------------

class MoveToPositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.MoveToPositionResponse) */ {
 public:
  inline MoveToPositionResponse() : MoveToPositionResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MoveToPositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveToPositionResponse(const MoveToPositionResponse& from);
  MoveToPositionResponse(MoveToPositionResponse&& from) noexcept
    : MoveToPositionResponse() {
    *this = ::std::move(from);
  }

  inline MoveToPositionResponse& operator=(const MoveToPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveToPositionResponse& operator=(MoveToPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveToPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveToPositionResponse* internal_default_instance() {
    return reinterpret_cast<const MoveToPositionResponse*>(
               &_MoveToPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MoveToPositionResponse& a, MoveToPositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveToPositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveToPositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveToPositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveToPositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MoveToPositionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MoveToPositionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.MoveToPositionResponse";
  }
  protected:
  explicit MoveToPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.MoveToPositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// -------------------------------------------------------------------

class HomeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.HomeRequest) */ {
 public:
  inline HomeRequest() : HomeRequest(nullptr) {}
  ~HomeRequest() override;
  explicit PROTOBUF_CONSTEXPR HomeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HomeRequest(const HomeRequest& from);
  HomeRequest(HomeRequest&& from) noexcept
    : HomeRequest() {
    *this = ::std::move(from);
  }

  inline HomeRequest& operator=(const HomeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HomeRequest& operator=(HomeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HomeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HomeRequest* internal_default_instance() {
    return reinterpret_cast<const HomeRequest*>(
               &_HomeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HomeRequest& a, HomeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HomeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HomeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HomeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HomeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HomeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HomeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HomeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.HomeRequest";
  }
  protected:
  explicit HomeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.HomeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// -------------------------------------------------------------------

class HomeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.HomeResponse) */ {
 public:
  inline HomeResponse() : HomeResponse(nullptr) {}
  ~HomeResponse() override;
  explicit PROTOBUF_CONSTEXPR HomeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HomeResponse(const HomeResponse& from);
  HomeResponse(HomeResponse&& from) noexcept
    : HomeResponse() {
    *this = ::std::move(from);
  }

  inline HomeResponse& operator=(const HomeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HomeResponse& operator=(HomeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HomeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HomeResponse* internal_default_instance() {
    return reinterpret_cast<const HomeResponse*>(
               &_HomeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HomeResponse& a, HomeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HomeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HomeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HomeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HomeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HomeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HomeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HomeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.HomeResponse";
  }
  protected:
  explicit HomeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHomedFieldNumber = 1,
  };
  // bool homed = 1 [json_name = "homed"];
  void clear_homed();
  bool homed() const;
  void set_homed(bool value);
  private:
  bool _internal_homed() const;
  void _internal_set_homed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.HomeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool homed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// -------------------------------------------------------------------

class GetLengthsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.GetLengthsRequest) */ {
 public:
  inline GetLengthsRequest() : GetLengthsRequest(nullptr) {}
  ~GetLengthsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLengthsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLengthsRequest(const GetLengthsRequest& from);
  GetLengthsRequest(GetLengthsRequest&& from) noexcept
    : GetLengthsRequest() {
    *this = ::std::move(from);
  }

  inline GetLengthsRequest& operator=(const GetLengthsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLengthsRequest& operator=(GetLengthsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLengthsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLengthsRequest* internal_default_instance() {
    return reinterpret_cast<const GetLengthsRequest*>(
               &_GetLengthsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetLengthsRequest& a, GetLengthsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLengthsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLengthsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLengthsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLengthsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLengthsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLengthsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLengthsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.GetLengthsRequest";
  }
  protected:
  explicit GetLengthsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.GetLengthsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// -------------------------------------------------------------------

class GetLengthsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.GetLengthsResponse) */ {
 public:
  inline GetLengthsResponse() : GetLengthsResponse(nullptr) {}
  ~GetLengthsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLengthsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLengthsResponse(const GetLengthsResponse& from);
  GetLengthsResponse(GetLengthsResponse&& from) noexcept
    : GetLengthsResponse() {
    *this = ::std::move(from);
  }

  inline GetLengthsResponse& operator=(const GetLengthsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLengthsResponse& operator=(GetLengthsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLengthsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLengthsResponse* internal_default_instance() {
    return reinterpret_cast<const GetLengthsResponse*>(
               &_GetLengthsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetLengthsResponse& a, GetLengthsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLengthsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLengthsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLengthsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLengthsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLengthsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLengthsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLengthsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.GetLengthsResponse";
  }
  protected:
  explicit GetLengthsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthsMmFieldNumber = 1,
  };
  // repeated double lengths_mm = 1 [json_name = "lengthsMm"];
  int lengths_mm_size() const;
  private:
  int _internal_lengths_mm_size() const;
  public:
  void clear_lengths_mm();
  private:
  double _internal_lengths_mm(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_lengths_mm() const;
  void _internal_add_lengths_mm(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_lengths_mm();
  public:
  double lengths_mm(int index) const;
  void set_lengths_mm(int index, double value);
  void add_lengths_mm(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      lengths_mm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_lengths_mm();

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.GetLengthsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > lengths_mm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// -------------------------------------------------------------------

class StopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {}
  ~StopRequest() override;
  explicit PROTOBUF_CONSTEXPR StopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// -------------------------------------------------------------------

class StopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.StopResponse) */ {
 public:
  inline StopResponse() : StopResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.StopResponse";
  }
  protected:
  explicit StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.StopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsMmFieldNumber = 1,
    kLengthsMmFieldNumber = 2,
    kIsMovingFieldNumber = 3,
  };
  // repeated double positions_mm = 1 [json_name = "positionsMm"];
  int positions_mm_size() const;
  private:
  int _internal_positions_mm_size() const;
  public:
  void clear_positions_mm();
  private:
  double _internal_positions_mm(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_positions_mm() const;
  void _internal_add_positions_mm(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_positions_mm();
  public:
  double positions_mm(int index) const;
  void set_positions_mm(int index, double value);
  void add_positions_mm(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      positions_mm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_positions_mm();

  // repeated double lengths_mm = 2 [json_name = "lengthsMm"];
  int lengths_mm_size() const;
  private:
  int _internal_lengths_mm_size() const;
  public:
  void clear_lengths_mm();
  private:
  double _internal_lengths_mm(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_lengths_mm() const;
  void _internal_add_lengths_mm(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_lengths_mm();
  public:
  double lengths_mm(int index) const;
  void set_lengths_mm(int index, double value);
  void add_lengths_mm(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      lengths_mm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_lengths_mm();

  // bool is_moving = 3 [json_name = "isMoving"];
  void clear_is_moving();
  bool is_moving() const;
  void set_is_moving(bool value);
  private:
  bool _internal_is_moving() const;
  void _internal_set_is_moving(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > positions_mm_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > lengths_mm_;
  bool is_moving_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// -------------------------------------------------------------------

class IsMovingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.IsMovingRequest) */ {
 public:
  inline IsMovingRequest() : IsMovingRequest(nullptr) {}
  ~IsMovingRequest() override;
  explicit PROTOBUF_CONSTEXPR IsMovingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsMovingRequest(const IsMovingRequest& from);
  IsMovingRequest(IsMovingRequest&& from) noexcept
    : IsMovingRequest() {
    *this = ::std::move(from);
  }

  inline IsMovingRequest& operator=(const IsMovingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsMovingRequest& operator=(IsMovingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsMovingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsMovingRequest* internal_default_instance() {
    return reinterpret_cast<const IsMovingRequest*>(
               &_IsMovingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(IsMovingRequest& a, IsMovingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsMovingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsMovingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsMovingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsMovingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IsMovingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IsMovingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsMovingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.IsMovingRequest";
  }
  protected:
  explicit IsMovingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.IsMovingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// -------------------------------------------------------------------

class IsMovingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.gantry.v1.IsMovingResponse) */ {
 public:
  inline IsMovingResponse() : IsMovingResponse(nullptr) {}
  ~IsMovingResponse() override;
  explicit PROTOBUF_CONSTEXPR IsMovingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsMovingResponse(const IsMovingResponse& from);
  IsMovingResponse(IsMovingResponse&& from) noexcept
    : IsMovingResponse() {
    *this = ::std::move(from);
  }

  inline IsMovingResponse& operator=(const IsMovingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsMovingResponse& operator=(IsMovingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsMovingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsMovingResponse* internal_default_instance() {
    return reinterpret_cast<const IsMovingResponse*>(
               &_IsMovingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IsMovingResponse& a, IsMovingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsMovingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsMovingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsMovingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsMovingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IsMovingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IsMovingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsMovingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.gantry.v1.IsMovingResponse";
  }
  protected:
  explicit IsMovingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsMovingFieldNumber = 1,
  };
  // bool is_moving = 1 [json_name = "isMoving"];
  void clear_is_moving();
  bool is_moving() const;
  void set_is_moving(bool value);
  private:
  bool _internal_is_moving() const;
  void _internal_set_is_moving(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.gantry.v1.IsMovingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_moving_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fgantry_2fv1_2fgantry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetPositionRequest

// string name = 1 [json_name = "name"];
inline void GetPositionRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetPositionRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.GetPositionRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPositionRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.GetPositionRequest.name)
}
inline std::string* GetPositionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.gantry.v1.GetPositionRequest.name)
  return _s;
}
inline const std::string& GetPositionRequest::_internal_name() const {
  return name_.Get();
}
inline void GetPositionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPositionRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPositionRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.gantry.v1.GetPositionRequest.name)
  return name_.Release();
}
inline void GetPositionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.gantry.v1.GetPositionRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetPositionRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetPositionRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetPositionRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetPositionRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.GetPositionRequest.extra)
  return _internal_extra();
}
inline void GetPositionRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.gantry.v1.GetPositionRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPositionRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPositionRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.gantry.v1.GetPositionRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPositionRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPositionRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.gantry.v1.GetPositionRequest.extra)
  return _msg;
}
inline void GetPositionRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.gantry.v1.GetPositionRequest.extra)
}

// -------------------------------------------------------------------

// GetPositionResponse

// repeated double positions_mm = 1 [json_name = "positionsMm"];
inline int GetPositionResponse::_internal_positions_mm_size() const {
  return positions_mm_.size();
}
inline int GetPositionResponse::positions_mm_size() const {
  return _internal_positions_mm_size();
}
inline void GetPositionResponse::clear_positions_mm() {
  positions_mm_.Clear();
}
inline double GetPositionResponse::_internal_positions_mm(int index) const {
  return positions_mm_.Get(index);
}
inline double GetPositionResponse::positions_mm(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.GetPositionResponse.positions_mm)
  return _internal_positions_mm(index);
}
inline void GetPositionResponse::set_positions_mm(int index, double value) {
  positions_mm_.Set(index, value);
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.GetPositionResponse.positions_mm)
}
inline void GetPositionResponse::_internal_add_positions_mm(double value) {
  positions_mm_.Add(value);
}
inline void GetPositionResponse::add_positions_mm(double value) {
  _internal_add_positions_mm(value);
  // @@protoc_insertion_point(field_add:viam.component.gantry.v1.GetPositionResponse.positions_mm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GetPositionResponse::_internal_positions_mm() const {
  return positions_mm_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GetPositionResponse::positions_mm() const {
  // @@protoc_insertion_point(field_list:viam.component.gantry.v1.GetPositionResponse.positions_mm)
  return _internal_positions_mm();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GetPositionResponse::_internal_mutable_positions_mm() {
  return &positions_mm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GetPositionResponse::mutable_positions_mm() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.gantry.v1.GetPositionResponse.positions_mm)
  return _internal_mutable_positions_mm();
}

// -------------------------------------------------------------------

// MoveToPositionRequest

// string name = 1 [json_name = "name"];
inline void MoveToPositionRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MoveToPositionRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.MoveToPositionRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveToPositionRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.MoveToPositionRequest.name)
}
inline std::string* MoveToPositionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.gantry.v1.MoveToPositionRequest.name)
  return _s;
}
inline const std::string& MoveToPositionRequest::_internal_name() const {
  return name_.Get();
}
inline void MoveToPositionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveToPositionRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* MoveToPositionRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.gantry.v1.MoveToPositionRequest.name)
  return name_.Release();
}
inline void MoveToPositionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.gantry.v1.MoveToPositionRequest.name)
}

// repeated double positions_mm = 2 [json_name = "positionsMm"];
inline int MoveToPositionRequest::_internal_positions_mm_size() const {
  return positions_mm_.size();
}
inline int MoveToPositionRequest::positions_mm_size() const {
  return _internal_positions_mm_size();
}
inline void MoveToPositionRequest::clear_positions_mm() {
  positions_mm_.Clear();
}
inline double MoveToPositionRequest::_internal_positions_mm(int index) const {
  return positions_mm_.Get(index);
}
inline double MoveToPositionRequest::positions_mm(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.MoveToPositionRequest.positions_mm)
  return _internal_positions_mm(index);
}
inline void MoveToPositionRequest::set_positions_mm(int index, double value) {
  positions_mm_.Set(index, value);
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.MoveToPositionRequest.positions_mm)
}
inline void MoveToPositionRequest::_internal_add_positions_mm(double value) {
  positions_mm_.Add(value);
}
inline void MoveToPositionRequest::add_positions_mm(double value) {
  _internal_add_positions_mm(value);
  // @@protoc_insertion_point(field_add:viam.component.gantry.v1.MoveToPositionRequest.positions_mm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MoveToPositionRequest::_internal_positions_mm() const {
  return positions_mm_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MoveToPositionRequest::positions_mm() const {
  // @@protoc_insertion_point(field_list:viam.component.gantry.v1.MoveToPositionRequest.positions_mm)
  return _internal_positions_mm();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MoveToPositionRequest::_internal_mutable_positions_mm() {
  return &positions_mm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MoveToPositionRequest::mutable_positions_mm() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.gantry.v1.MoveToPositionRequest.positions_mm)
  return _internal_mutable_positions_mm();
}

// repeated double speeds_mm_per_sec = 3 [json_name = "speedsMmPerSec"];
inline int MoveToPositionRequest::_internal_speeds_mm_per_sec_size() const {
  return speeds_mm_per_sec_.size();
}
inline int MoveToPositionRequest::speeds_mm_per_sec_size() const {
  return _internal_speeds_mm_per_sec_size();
}
inline void MoveToPositionRequest::clear_speeds_mm_per_sec() {
  speeds_mm_per_sec_.Clear();
}
inline double MoveToPositionRequest::_internal_speeds_mm_per_sec(int index) const {
  return speeds_mm_per_sec_.Get(index);
}
inline double MoveToPositionRequest::speeds_mm_per_sec(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.MoveToPositionRequest.speeds_mm_per_sec)
  return _internal_speeds_mm_per_sec(index);
}
inline void MoveToPositionRequest::set_speeds_mm_per_sec(int index, double value) {
  speeds_mm_per_sec_.Set(index, value);
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.MoveToPositionRequest.speeds_mm_per_sec)
}
inline void MoveToPositionRequest::_internal_add_speeds_mm_per_sec(double value) {
  speeds_mm_per_sec_.Add(value);
}
inline void MoveToPositionRequest::add_speeds_mm_per_sec(double value) {
  _internal_add_speeds_mm_per_sec(value);
  // @@protoc_insertion_point(field_add:viam.component.gantry.v1.MoveToPositionRequest.speeds_mm_per_sec)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MoveToPositionRequest::_internal_speeds_mm_per_sec() const {
  return speeds_mm_per_sec_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MoveToPositionRequest::speeds_mm_per_sec() const {
  // @@protoc_insertion_point(field_list:viam.component.gantry.v1.MoveToPositionRequest.speeds_mm_per_sec)
  return _internal_speeds_mm_per_sec();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MoveToPositionRequest::_internal_mutable_speeds_mm_per_sec() {
  return &speeds_mm_per_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MoveToPositionRequest::mutable_speeds_mm_per_sec() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.gantry.v1.MoveToPositionRequest.speeds_mm_per_sec)
  return _internal_mutable_speeds_mm_per_sec();
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool MoveToPositionRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool MoveToPositionRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& MoveToPositionRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& MoveToPositionRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.MoveToPositionRequest.extra)
  return _internal_extra();
}
inline void MoveToPositionRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.gantry.v1.MoveToPositionRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveToPositionRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveToPositionRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.gantry.v1.MoveToPositionRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveToPositionRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveToPositionRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.gantry.v1.MoveToPositionRequest.extra)
  return _msg;
}
inline void MoveToPositionRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.gantry.v1.MoveToPositionRequest.extra)
}

// -------------------------------------------------------------------

// MoveToPositionResponse

// -------------------------------------------------------------------

// HomeRequest

// string name = 1 [json_name = "name"];
inline void HomeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& HomeRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.HomeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HomeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.HomeRequest.name)
}
inline std::string* HomeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.gantry.v1.HomeRequest.name)
  return _s;
}
inline const std::string& HomeRequest::_internal_name() const {
  return name_.Get();
}
inline void HomeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* HomeRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* HomeRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.gantry.v1.HomeRequest.name)
  return name_.Release();
}
inline void HomeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.gantry.v1.HomeRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool HomeRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool HomeRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& HomeRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& HomeRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.HomeRequest.extra)
  return _internal_extra();
}
inline void HomeRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.gantry.v1.HomeRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* HomeRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* HomeRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.gantry.v1.HomeRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* HomeRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* HomeRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.gantry.v1.HomeRequest.extra)
  return _msg;
}
inline void HomeRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.gantry.v1.HomeRequest.extra)
}

// -------------------------------------------------------------------

// HomeResponse

// bool homed = 1 [json_name = "homed"];
inline void HomeResponse::clear_homed() {
  homed_ = false;
}
inline bool HomeResponse::_internal_homed() const {
  return homed_;
}
inline bool HomeResponse::homed() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.HomeResponse.homed)
  return _internal_homed();
}
inline void HomeResponse::_internal_set_homed(bool value) {
  
  homed_ = value;
}
inline void HomeResponse::set_homed(bool value) {
  _internal_set_homed(value);
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.HomeResponse.homed)
}

// -------------------------------------------------------------------

// GetLengthsRequest

// string name = 1 [json_name = "name"];
inline void GetLengthsRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetLengthsRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.GetLengthsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLengthsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.GetLengthsRequest.name)
}
inline std::string* GetLengthsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.gantry.v1.GetLengthsRequest.name)
  return _s;
}
inline const std::string& GetLengthsRequest::_internal_name() const {
  return name_.Get();
}
inline void GetLengthsRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLengthsRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLengthsRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.gantry.v1.GetLengthsRequest.name)
  return name_.Release();
}
inline void GetLengthsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.gantry.v1.GetLengthsRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetLengthsRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetLengthsRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetLengthsRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetLengthsRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.GetLengthsRequest.extra)
  return _internal_extra();
}
inline void GetLengthsRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.gantry.v1.GetLengthsRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetLengthsRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetLengthsRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.gantry.v1.GetLengthsRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetLengthsRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetLengthsRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.gantry.v1.GetLengthsRequest.extra)
  return _msg;
}
inline void GetLengthsRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.gantry.v1.GetLengthsRequest.extra)
}

// -------------------------------------------------------------------

// GetLengthsResponse

// repeated double lengths_mm = 1 [json_name = "lengthsMm"];
inline int GetLengthsResponse::_internal_lengths_mm_size() const {
  return lengths_mm_.size();
}
inline int GetLengthsResponse::lengths_mm_size() const {
  return _internal_lengths_mm_size();
}
inline void GetLengthsResponse::clear_lengths_mm() {
  lengths_mm_.Clear();
}
inline double GetLengthsResponse::_internal_lengths_mm(int index) const {
  return lengths_mm_.Get(index);
}
inline double GetLengthsResponse::lengths_mm(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.GetLengthsResponse.lengths_mm)
  return _internal_lengths_mm(index);
}
inline void GetLengthsResponse::set_lengths_mm(int index, double value) {
  lengths_mm_.Set(index, value);
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.GetLengthsResponse.lengths_mm)
}
inline void GetLengthsResponse::_internal_add_lengths_mm(double value) {
  lengths_mm_.Add(value);
}
inline void GetLengthsResponse::add_lengths_mm(double value) {
  _internal_add_lengths_mm(value);
  // @@protoc_insertion_point(field_add:viam.component.gantry.v1.GetLengthsResponse.lengths_mm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GetLengthsResponse::_internal_lengths_mm() const {
  return lengths_mm_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
GetLengthsResponse::lengths_mm() const {
  // @@protoc_insertion_point(field_list:viam.component.gantry.v1.GetLengthsResponse.lengths_mm)
  return _internal_lengths_mm();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GetLengthsResponse::_internal_mutable_lengths_mm() {
  return &lengths_mm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
GetLengthsResponse::mutable_lengths_mm() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.gantry.v1.GetLengthsResponse.lengths_mm)
  return _internal_mutable_lengths_mm();
}

// -------------------------------------------------------------------

// StopRequest

// string name = 1 [json_name = "name"];
inline void StopRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StopRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.StopRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.StopRequest.name)
}
inline std::string* StopRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.gantry.v1.StopRequest.name)
  return _s;
}
inline const std::string& StopRequest::_internal_name() const {
  return name_.Get();
}
inline void StopRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* StopRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* StopRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.gantry.v1.StopRequest.name)
  return name_.Release();
}
inline void StopRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.gantry.v1.StopRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool StopRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool StopRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StopRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StopRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.StopRequest.extra)
  return _internal_extra();
}
inline void StopRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.gantry.v1.StopRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.gantry.v1.StopRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.gantry.v1.StopRequest.extra)
  return _msg;
}
inline void StopRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.gantry.v1.StopRequest.extra)
}

// -------------------------------------------------------------------

// StopResponse

// -------------------------------------------------------------------

// Status

// repeated double positions_mm = 1 [json_name = "positionsMm"];
inline int Status::_internal_positions_mm_size() const {
  return positions_mm_.size();
}
inline int Status::positions_mm_size() const {
  return _internal_positions_mm_size();
}
inline void Status::clear_positions_mm() {
  positions_mm_.Clear();
}
inline double Status::_internal_positions_mm(int index) const {
  return positions_mm_.Get(index);
}
inline double Status::positions_mm(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.Status.positions_mm)
  return _internal_positions_mm(index);
}
inline void Status::set_positions_mm(int index, double value) {
  positions_mm_.Set(index, value);
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.Status.positions_mm)
}
inline void Status::_internal_add_positions_mm(double value) {
  positions_mm_.Add(value);
}
inline void Status::add_positions_mm(double value) {
  _internal_add_positions_mm(value);
  // @@protoc_insertion_point(field_add:viam.component.gantry.v1.Status.positions_mm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Status::_internal_positions_mm() const {
  return positions_mm_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Status::positions_mm() const {
  // @@protoc_insertion_point(field_list:viam.component.gantry.v1.Status.positions_mm)
  return _internal_positions_mm();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Status::_internal_mutable_positions_mm() {
  return &positions_mm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Status::mutable_positions_mm() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.gantry.v1.Status.positions_mm)
  return _internal_mutable_positions_mm();
}

// repeated double lengths_mm = 2 [json_name = "lengthsMm"];
inline int Status::_internal_lengths_mm_size() const {
  return lengths_mm_.size();
}
inline int Status::lengths_mm_size() const {
  return _internal_lengths_mm_size();
}
inline void Status::clear_lengths_mm() {
  lengths_mm_.Clear();
}
inline double Status::_internal_lengths_mm(int index) const {
  return lengths_mm_.Get(index);
}
inline double Status::lengths_mm(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.Status.lengths_mm)
  return _internal_lengths_mm(index);
}
inline void Status::set_lengths_mm(int index, double value) {
  lengths_mm_.Set(index, value);
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.Status.lengths_mm)
}
inline void Status::_internal_add_lengths_mm(double value) {
  lengths_mm_.Add(value);
}
inline void Status::add_lengths_mm(double value) {
  _internal_add_lengths_mm(value);
  // @@protoc_insertion_point(field_add:viam.component.gantry.v1.Status.lengths_mm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Status::_internal_lengths_mm() const {
  return lengths_mm_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Status::lengths_mm() const {
  // @@protoc_insertion_point(field_list:viam.component.gantry.v1.Status.lengths_mm)
  return _internal_lengths_mm();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Status::_internal_mutable_lengths_mm() {
  return &lengths_mm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Status::mutable_lengths_mm() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.gantry.v1.Status.lengths_mm)
  return _internal_mutable_lengths_mm();
}

// bool is_moving = 3 [json_name = "isMoving"];
inline void Status::clear_is_moving() {
  is_moving_ = false;
}
inline bool Status::_internal_is_moving() const {
  return is_moving_;
}
inline bool Status::is_moving() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.Status.is_moving)
  return _internal_is_moving();
}
inline void Status::_internal_set_is_moving(bool value) {
  
  is_moving_ = value;
}
inline void Status::set_is_moving(bool value) {
  _internal_set_is_moving(value);
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.Status.is_moving)
}

// -------------------------------------------------------------------

// IsMovingRequest

// string name = 1 [json_name = "name"];
inline void IsMovingRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& IsMovingRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.IsMovingRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IsMovingRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.IsMovingRequest.name)
}
inline std::string* IsMovingRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.gantry.v1.IsMovingRequest.name)
  return _s;
}
inline const std::string& IsMovingRequest::_internal_name() const {
  return name_.Get();
}
inline void IsMovingRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* IsMovingRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* IsMovingRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.gantry.v1.IsMovingRequest.name)
  return name_.Release();
}
inline void IsMovingRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.gantry.v1.IsMovingRequest.name)
}

// -------------------------------------------------------------------

// IsMovingResponse

// bool is_moving = 1 [json_name = "isMoving"];
inline void IsMovingResponse::clear_is_moving() {
  is_moving_ = false;
}
inline bool IsMovingResponse::_internal_is_moving() const {
  return is_moving_;
}
inline bool IsMovingResponse::is_moving() const {
  // @@protoc_insertion_point(field_get:viam.component.gantry.v1.IsMovingResponse.is_moving)
  return _internal_is_moving();
}
inline void IsMovingResponse::_internal_set_is_moving(bool value) {
  
  is_moving_ = value;
}
inline void IsMovingResponse::set_is_moving(bool value) {
  _internal_set_is_moving(value);
  // @@protoc_insertion_point(field_set:viam.component.gantry.v1.IsMovingResponse.is_moving)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace gantry
}  // namespace component
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_2fgantry_2fv1_2fgantry_2eproto
