// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/audioin/v1/audioin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_2faudioin_2fv1_2faudioin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_2faudioin_2fv1_2faudioin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_2faudioin_2fv1_2faudioin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_2faudioin_2fv1_2faudioin_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto;
namespace viam {
namespace component {
namespace audioin {
namespace v1 {
class AudioChunk;
struct AudioChunkDefaultTypeInternal;
extern AudioChunkDefaultTypeInternal _AudioChunk_default_instance_;
class GetAudioRequest;
struct GetAudioRequestDefaultTypeInternal;
extern GetAudioRequestDefaultTypeInternal _GetAudioRequest_default_instance_;
class GetAudioResponse;
struct GetAudioResponseDefaultTypeInternal;
extern GetAudioResponseDefaultTypeInternal _GetAudioResponse_default_instance_;
}  // namespace v1
}  // namespace audioin
}  // namespace component
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::component::audioin::v1::AudioChunk* Arena::CreateMaybeMessage<::viam::component::audioin::v1::AudioChunk>(Arena*);
template<> ::viam::component::audioin::v1::GetAudioRequest* Arena::CreateMaybeMessage<::viam::component::audioin::v1::GetAudioRequest>(Arena*);
template<> ::viam::component::audioin::v1::GetAudioResponse* Arena::CreateMaybeMessage<::viam::component::audioin::v1::GetAudioResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace component {
namespace audioin {
namespace v1 {

// ===================================================================

class GetAudioRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.audioin.v1.GetAudioRequest) */ {
 public:
  inline GetAudioRequest() : GetAudioRequest(nullptr) {}
  ~GetAudioRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAudioRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAudioRequest(const GetAudioRequest& from);
  GetAudioRequest(GetAudioRequest&& from) noexcept
    : GetAudioRequest() {
    *this = ::std::move(from);
  }

  inline GetAudioRequest& operator=(const GetAudioRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAudioRequest& operator=(GetAudioRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAudioRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAudioRequest* internal_default_instance() {
    return reinterpret_cast<const GetAudioRequest*>(
               &_GetAudioRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetAudioRequest& a, GetAudioRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAudioRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAudioRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAudioRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAudioRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAudioRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAudioRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAudioRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.audioin.v1.GetAudioRequest";
  }
  protected:
  explicit GetAudioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCodecFieldNumber = 3,
    kRequestIdFieldNumber = 4,
    kExtraFieldNumber = 99,
    kPreviousTimestampNanosecondsFieldNumber = 5,
    kDurationSecondsFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string codec = 3 [json_name = "codec"];
  void clear_codec();
  const std::string& codec() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_codec(ArgT0&& arg0, ArgT... args);
  std::string* mutable_codec();
  PROTOBUF_NODISCARD std::string* release_codec();
  void set_allocated_codec(std::string* codec);
  private:
  const std::string& _internal_codec() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_codec(const std::string& value);
  std::string* _internal_mutable_codec();
  public:

  // string request_id = 4 [json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // int64 previous_timestamp_nanoseconds = 5 [json_name = "previousTimestampNanoseconds"];
  void clear_previous_timestamp_nanoseconds();
  int64_t previous_timestamp_nanoseconds() const;
  void set_previous_timestamp_nanoseconds(int64_t value);
  private:
  int64_t _internal_previous_timestamp_nanoseconds() const;
  void _internal_set_previous_timestamp_nanoseconds(int64_t value);
  public:

  // float duration_seconds = 2 [json_name = "durationSeconds"];
  void clear_duration_seconds();
  float duration_seconds() const;
  void set_duration_seconds(float value);
  private:
  float _internal_duration_seconds() const;
  void _internal_set_duration_seconds(float value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.audioin.v1.GetAudioRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  int64_t previous_timestamp_nanoseconds_;
  float duration_seconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2faudioin_2fv1_2faudioin_2eproto;
};
// -------------------------------------------------------------------

class GetAudioResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.audioin.v1.GetAudioResponse) */ {
 public:
  inline GetAudioResponse() : GetAudioResponse(nullptr) {}
  ~GetAudioResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAudioResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAudioResponse(const GetAudioResponse& from);
  GetAudioResponse(GetAudioResponse&& from) noexcept
    : GetAudioResponse() {
    *this = ::std::move(from);
  }

  inline GetAudioResponse& operator=(const GetAudioResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAudioResponse& operator=(GetAudioResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAudioResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAudioResponse* internal_default_instance() {
    return reinterpret_cast<const GetAudioResponse*>(
               &_GetAudioResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetAudioResponse& a, GetAudioResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAudioResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAudioResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAudioResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAudioResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAudioResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAudioResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAudioResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.audioin.v1.GetAudioResponse";
  }
  protected:
  explicit GetAudioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 2,
    kAudioFieldNumber = 1,
  };
  // string request_id = 2 [json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .viam.component.audioin.v1.AudioChunk audio = 1 [json_name = "audio"];
  bool has_audio() const;
  private:
  bool _internal_has_audio() const;
  public:
  void clear_audio();
  const ::viam::component::audioin::v1::AudioChunk& audio() const;
  PROTOBUF_NODISCARD ::viam::component::audioin::v1::AudioChunk* release_audio();
  ::viam::component::audioin::v1::AudioChunk* mutable_audio();
  void set_allocated_audio(::viam::component::audioin::v1::AudioChunk* audio);
  private:
  const ::viam::component::audioin::v1::AudioChunk& _internal_audio() const;
  ::viam::component::audioin::v1::AudioChunk* _internal_mutable_audio();
  public:
  void unsafe_arena_set_allocated_audio(
      ::viam::component::audioin::v1::AudioChunk* audio);
  ::viam::component::audioin::v1::AudioChunk* unsafe_arena_release_audio();

  // @@protoc_insertion_point(class_scope:viam.component.audioin.v1.GetAudioResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::viam::component::audioin::v1::AudioChunk* audio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2faudioin_2fv1_2faudioin_2eproto;
};
// -------------------------------------------------------------------

class AudioChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.audioin.v1.AudioChunk) */ {
 public:
  inline AudioChunk() : AudioChunk(nullptr) {}
  ~AudioChunk() override;
  explicit PROTOBUF_CONSTEXPR AudioChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioChunk(const AudioChunk& from);
  AudioChunk(AudioChunk&& from) noexcept
    : AudioChunk() {
    *this = ::std::move(from);
  }

  inline AudioChunk& operator=(const AudioChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioChunk& operator=(AudioChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioChunk* internal_default_instance() {
    return reinterpret_cast<const AudioChunk*>(
               &_AudioChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AudioChunk& a, AudioChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioChunk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.audioin.v1.AudioChunk";
  }
  protected:
  explicit AudioChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioDataFieldNumber = 1,
    kAudioInfoFieldNumber = 2,
    kStartTimestampNanosecondsFieldNumber = 3,
    kEndTimestampNanosecondsFieldNumber = 4,
    kSequenceFieldNumber = 5,
  };
  // bytes audio_data = 1 [json_name = "audioData"];
  void clear_audio_data();
  const std::string& audio_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_audio_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_audio_data();
  PROTOBUF_NODISCARD std::string* release_audio_data();
  void set_allocated_audio_data(std::string* audio_data);
  private:
  const std::string& _internal_audio_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_audio_data(const std::string& value);
  std::string* _internal_mutable_audio_data();
  public:

  // .viam.common.v1.AudioInfo audio_info = 2 [json_name = "audioInfo"];
  bool has_audio_info() const;
  private:
  bool _internal_has_audio_info() const;
  public:
  void clear_audio_info();
  const ::viam::common::v1::AudioInfo& audio_info() const;
  PROTOBUF_NODISCARD ::viam::common::v1::AudioInfo* release_audio_info();
  ::viam::common::v1::AudioInfo* mutable_audio_info();
  void set_allocated_audio_info(::viam::common::v1::AudioInfo* audio_info);
  private:
  const ::viam::common::v1::AudioInfo& _internal_audio_info() const;
  ::viam::common::v1::AudioInfo* _internal_mutable_audio_info();
  public:
  void unsafe_arena_set_allocated_audio_info(
      ::viam::common::v1::AudioInfo* audio_info);
  ::viam::common::v1::AudioInfo* unsafe_arena_release_audio_info();

  // int64 start_timestamp_nanoseconds = 3 [json_name = "startTimestampNanoseconds"];
  void clear_start_timestamp_nanoseconds();
  int64_t start_timestamp_nanoseconds() const;
  void set_start_timestamp_nanoseconds(int64_t value);
  private:
  int64_t _internal_start_timestamp_nanoseconds() const;
  void _internal_set_start_timestamp_nanoseconds(int64_t value);
  public:

  // int64 end_timestamp_nanoseconds = 4 [json_name = "endTimestampNanoseconds"];
  void clear_end_timestamp_nanoseconds();
  int64_t end_timestamp_nanoseconds() const;
  void set_end_timestamp_nanoseconds(int64_t value);
  private:
  int64_t _internal_end_timestamp_nanoseconds() const;
  void _internal_set_end_timestamp_nanoseconds(int64_t value);
  public:

  // int32 sequence = 5 [json_name = "sequence"];
  void clear_sequence();
  int32_t sequence() const;
  void set_sequence(int32_t value);
  private:
  int32_t _internal_sequence() const;
  void _internal_set_sequence(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.audioin.v1.AudioChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_data_;
  ::viam::common::v1::AudioInfo* audio_info_;
  int64_t start_timestamp_nanoseconds_;
  int64_t end_timestamp_nanoseconds_;
  int32_t sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2faudioin_2fv1_2faudioin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetAudioRequest

// string name = 1 [json_name = "name"];
inline void GetAudioRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetAudioRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.GetAudioRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAudioRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.audioin.v1.GetAudioRequest.name)
}
inline std::string* GetAudioRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.audioin.v1.GetAudioRequest.name)
  return _s;
}
inline const std::string& GetAudioRequest::_internal_name() const {
  return name_.Get();
}
inline void GetAudioRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAudioRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAudioRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.audioin.v1.GetAudioRequest.name)
  return name_.Release();
}
inline void GetAudioRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioin.v1.GetAudioRequest.name)
}

// float duration_seconds = 2 [json_name = "durationSeconds"];
inline void GetAudioRequest::clear_duration_seconds() {
  duration_seconds_ = 0;
}
inline float GetAudioRequest::_internal_duration_seconds() const {
  return duration_seconds_;
}
inline float GetAudioRequest::duration_seconds() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.GetAudioRequest.duration_seconds)
  return _internal_duration_seconds();
}
inline void GetAudioRequest::_internal_set_duration_seconds(float value) {
  
  duration_seconds_ = value;
}
inline void GetAudioRequest::set_duration_seconds(float value) {
  _internal_set_duration_seconds(value);
  // @@protoc_insertion_point(field_set:viam.component.audioin.v1.GetAudioRequest.duration_seconds)
}

// string codec = 3 [json_name = "codec"];
inline void GetAudioRequest::clear_codec() {
  codec_.ClearToEmpty();
}
inline const std::string& GetAudioRequest::codec() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.GetAudioRequest.codec)
  return _internal_codec();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAudioRequest::set_codec(ArgT0&& arg0, ArgT... args) {
 
 codec_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.audioin.v1.GetAudioRequest.codec)
}
inline std::string* GetAudioRequest::mutable_codec() {
  std::string* _s = _internal_mutable_codec();
  // @@protoc_insertion_point(field_mutable:viam.component.audioin.v1.GetAudioRequest.codec)
  return _s;
}
inline const std::string& GetAudioRequest::_internal_codec() const {
  return codec_.Get();
}
inline void GetAudioRequest::_internal_set_codec(const std::string& value) {
  
  codec_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAudioRequest::_internal_mutable_codec() {
  
  return codec_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAudioRequest::release_codec() {
  // @@protoc_insertion_point(field_release:viam.component.audioin.v1.GetAudioRequest.codec)
  return codec_.Release();
}
inline void GetAudioRequest::set_allocated_codec(std::string* codec) {
  if (codec != nullptr) {
    
  } else {
    
  }
  codec_.SetAllocated(codec, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (codec_.IsDefault()) {
    codec_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioin.v1.GetAudioRequest.codec)
}

// string request_id = 4 [json_name = "requestId"];
inline void GetAudioRequest::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& GetAudioRequest::request_id() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.GetAudioRequest.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAudioRequest::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.audioin.v1.GetAudioRequest.request_id)
}
inline std::string* GetAudioRequest::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:viam.component.audioin.v1.GetAudioRequest.request_id)
  return _s;
}
inline const std::string& GetAudioRequest::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetAudioRequest::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAudioRequest::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAudioRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:viam.component.audioin.v1.GetAudioRequest.request_id)
  return request_id_.Release();
}
inline void GetAudioRequest::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioin.v1.GetAudioRequest.request_id)
}

// int64 previous_timestamp_nanoseconds = 5 [json_name = "previousTimestampNanoseconds"];
inline void GetAudioRequest::clear_previous_timestamp_nanoseconds() {
  previous_timestamp_nanoseconds_ = int64_t{0};
}
inline int64_t GetAudioRequest::_internal_previous_timestamp_nanoseconds() const {
  return previous_timestamp_nanoseconds_;
}
inline int64_t GetAudioRequest::previous_timestamp_nanoseconds() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.GetAudioRequest.previous_timestamp_nanoseconds)
  return _internal_previous_timestamp_nanoseconds();
}
inline void GetAudioRequest::_internal_set_previous_timestamp_nanoseconds(int64_t value) {
  
  previous_timestamp_nanoseconds_ = value;
}
inline void GetAudioRequest::set_previous_timestamp_nanoseconds(int64_t value) {
  _internal_set_previous_timestamp_nanoseconds(value);
  // @@protoc_insertion_point(field_set:viam.component.audioin.v1.GetAudioRequest.previous_timestamp_nanoseconds)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetAudioRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetAudioRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetAudioRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetAudioRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.GetAudioRequest.extra)
  return _internal_extra();
}
inline void GetAudioRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.audioin.v1.GetAudioRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetAudioRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetAudioRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.audioin.v1.GetAudioRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetAudioRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetAudioRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.audioin.v1.GetAudioRequest.extra)
  return _msg;
}
inline void GetAudioRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioin.v1.GetAudioRequest.extra)
}

// -------------------------------------------------------------------

// GetAudioResponse

// .viam.component.audioin.v1.AudioChunk audio = 1 [json_name = "audio"];
inline bool GetAudioResponse::_internal_has_audio() const {
  return this != internal_default_instance() && audio_ != nullptr;
}
inline bool GetAudioResponse::has_audio() const {
  return _internal_has_audio();
}
inline void GetAudioResponse::clear_audio() {
  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
}
inline const ::viam::component::audioin::v1::AudioChunk& GetAudioResponse::_internal_audio() const {
  const ::viam::component::audioin::v1::AudioChunk* p = audio_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::component::audioin::v1::AudioChunk&>(
      ::viam::component::audioin::v1::_AudioChunk_default_instance_);
}
inline const ::viam::component::audioin::v1::AudioChunk& GetAudioResponse::audio() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.GetAudioResponse.audio)
  return _internal_audio();
}
inline void GetAudioResponse::unsafe_arena_set_allocated_audio(
    ::viam::component::audioin::v1::AudioChunk* audio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_);
  }
  audio_ = audio;
  if (audio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.audioin.v1.GetAudioResponse.audio)
}
inline ::viam::component::audioin::v1::AudioChunk* GetAudioResponse::release_audio() {
  
  ::viam::component::audioin::v1::AudioChunk* temp = audio_;
  audio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::component::audioin::v1::AudioChunk* GetAudioResponse::unsafe_arena_release_audio() {
  // @@protoc_insertion_point(field_release:viam.component.audioin.v1.GetAudioResponse.audio)
  
  ::viam::component::audioin::v1::AudioChunk* temp = audio_;
  audio_ = nullptr;
  return temp;
}
inline ::viam::component::audioin::v1::AudioChunk* GetAudioResponse::_internal_mutable_audio() {
  
  if (audio_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::component::audioin::v1::AudioChunk>(GetArenaForAllocation());
    audio_ = p;
  }
  return audio_;
}
inline ::viam::component::audioin::v1::AudioChunk* GetAudioResponse::mutable_audio() {
  ::viam::component::audioin::v1::AudioChunk* _msg = _internal_mutable_audio();
  // @@protoc_insertion_point(field_mutable:viam.component.audioin.v1.GetAudioResponse.audio)
  return _msg;
}
inline void GetAudioResponse::set_allocated_audio(::viam::component::audioin::v1::AudioChunk* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete audio_;
  }
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    
  } else {
    
  }
  audio_ = audio;
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioin.v1.GetAudioResponse.audio)
}

// string request_id = 2 [json_name = "requestId"];
inline void GetAudioResponse::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& GetAudioResponse::request_id() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.GetAudioResponse.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAudioResponse::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.audioin.v1.GetAudioResponse.request_id)
}
inline std::string* GetAudioResponse::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:viam.component.audioin.v1.GetAudioResponse.request_id)
  return _s;
}
inline const std::string& GetAudioResponse::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetAudioResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAudioResponse::_internal_mutable_request_id() {
  
  return request_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAudioResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:viam.component.audioin.v1.GetAudioResponse.request_id)
  return request_id_.Release();
}
inline void GetAudioResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(request_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault()) {
    request_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioin.v1.GetAudioResponse.request_id)
}

// -------------------------------------------------------------------

// AudioChunk

// bytes audio_data = 1 [json_name = "audioData"];
inline void AudioChunk::clear_audio_data() {
  audio_data_.ClearToEmpty();
}
inline const std::string& AudioChunk::audio_data() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.AudioChunk.audio_data)
  return _internal_audio_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AudioChunk::set_audio_data(ArgT0&& arg0, ArgT... args) {
 
 audio_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.audioin.v1.AudioChunk.audio_data)
}
inline std::string* AudioChunk::mutable_audio_data() {
  std::string* _s = _internal_mutable_audio_data();
  // @@protoc_insertion_point(field_mutable:viam.component.audioin.v1.AudioChunk.audio_data)
  return _s;
}
inline const std::string& AudioChunk::_internal_audio_data() const {
  return audio_data_.Get();
}
inline void AudioChunk::_internal_set_audio_data(const std::string& value) {
  
  audio_data_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioChunk::_internal_mutable_audio_data() {
  
  return audio_data_.Mutable(GetArenaForAllocation());
}
inline std::string* AudioChunk::release_audio_data() {
  // @@protoc_insertion_point(field_release:viam.component.audioin.v1.AudioChunk.audio_data)
  return audio_data_.Release();
}
inline void AudioChunk::set_allocated_audio_data(std::string* audio_data) {
  if (audio_data != nullptr) {
    
  } else {
    
  }
  audio_data_.SetAllocated(audio_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (audio_data_.IsDefault()) {
    audio_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioin.v1.AudioChunk.audio_data)
}

// .viam.common.v1.AudioInfo audio_info = 2 [json_name = "audioInfo"];
inline bool AudioChunk::_internal_has_audio_info() const {
  return this != internal_default_instance() && audio_info_ != nullptr;
}
inline bool AudioChunk::has_audio_info() const {
  return _internal_has_audio_info();
}
inline const ::viam::common::v1::AudioInfo& AudioChunk::_internal_audio_info() const {
  const ::viam::common::v1::AudioInfo* p = audio_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::AudioInfo&>(
      ::viam::common::v1::_AudioInfo_default_instance_);
}
inline const ::viam::common::v1::AudioInfo& AudioChunk::audio_info() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.AudioChunk.audio_info)
  return _internal_audio_info();
}
inline void AudioChunk::unsafe_arena_set_allocated_audio_info(
    ::viam::common::v1::AudioInfo* audio_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_info_);
  }
  audio_info_ = audio_info;
  if (audio_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.audioin.v1.AudioChunk.audio_info)
}
inline ::viam::common::v1::AudioInfo* AudioChunk::release_audio_info() {
  
  ::viam::common::v1::AudioInfo* temp = audio_info_;
  audio_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::AudioInfo* AudioChunk::unsafe_arena_release_audio_info() {
  // @@protoc_insertion_point(field_release:viam.component.audioin.v1.AudioChunk.audio_info)
  
  ::viam::common::v1::AudioInfo* temp = audio_info_;
  audio_info_ = nullptr;
  return temp;
}
inline ::viam::common::v1::AudioInfo* AudioChunk::_internal_mutable_audio_info() {
  
  if (audio_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::AudioInfo>(GetArenaForAllocation());
    audio_info_ = p;
  }
  return audio_info_;
}
inline ::viam::common::v1::AudioInfo* AudioChunk::mutable_audio_info() {
  ::viam::common::v1::AudioInfo* _msg = _internal_mutable_audio_info();
  // @@protoc_insertion_point(field_mutable:viam.component.audioin.v1.AudioChunk.audio_info)
  return _msg;
}
inline void AudioChunk::set_allocated_audio_info(::viam::common::v1::AudioInfo* audio_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_info_);
  }
  if (audio_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(audio_info));
    if (message_arena != submessage_arena) {
      audio_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio_info, submessage_arena);
    }
    
  } else {
    
  }
  audio_info_ = audio_info;
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioin.v1.AudioChunk.audio_info)
}

// int64 start_timestamp_nanoseconds = 3 [json_name = "startTimestampNanoseconds"];
inline void AudioChunk::clear_start_timestamp_nanoseconds() {
  start_timestamp_nanoseconds_ = int64_t{0};
}
inline int64_t AudioChunk::_internal_start_timestamp_nanoseconds() const {
  return start_timestamp_nanoseconds_;
}
inline int64_t AudioChunk::start_timestamp_nanoseconds() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.AudioChunk.start_timestamp_nanoseconds)
  return _internal_start_timestamp_nanoseconds();
}
inline void AudioChunk::_internal_set_start_timestamp_nanoseconds(int64_t value) {
  
  start_timestamp_nanoseconds_ = value;
}
inline void AudioChunk::set_start_timestamp_nanoseconds(int64_t value) {
  _internal_set_start_timestamp_nanoseconds(value);
  // @@protoc_insertion_point(field_set:viam.component.audioin.v1.AudioChunk.start_timestamp_nanoseconds)
}

// int64 end_timestamp_nanoseconds = 4 [json_name = "endTimestampNanoseconds"];
inline void AudioChunk::clear_end_timestamp_nanoseconds() {
  end_timestamp_nanoseconds_ = int64_t{0};
}
inline int64_t AudioChunk::_internal_end_timestamp_nanoseconds() const {
  return end_timestamp_nanoseconds_;
}
inline int64_t AudioChunk::end_timestamp_nanoseconds() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.AudioChunk.end_timestamp_nanoseconds)
  return _internal_end_timestamp_nanoseconds();
}
inline void AudioChunk::_internal_set_end_timestamp_nanoseconds(int64_t value) {
  
  end_timestamp_nanoseconds_ = value;
}
inline void AudioChunk::set_end_timestamp_nanoseconds(int64_t value) {
  _internal_set_end_timestamp_nanoseconds(value);
  // @@protoc_insertion_point(field_set:viam.component.audioin.v1.AudioChunk.end_timestamp_nanoseconds)
}

// int32 sequence = 5 [json_name = "sequence"];
inline void AudioChunk::clear_sequence() {
  sequence_ = 0;
}
inline int32_t AudioChunk::_internal_sequence() const {
  return sequence_;
}
inline int32_t AudioChunk::sequence() const {
  // @@protoc_insertion_point(field_get:viam.component.audioin.v1.AudioChunk.sequence)
  return _internal_sequence();
}
inline void AudioChunk::_internal_set_sequence(int32_t value) {
  
  sequence_ = value;
}
inline void AudioChunk::set_sequence(int32_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:viam.component.audioin.v1.AudioChunk.sequence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace audioin
}  // namespace component
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_2faudioin_2fv1_2faudioin_2eproto
