// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/audioin/v1/audioin.proto

#include "component/audioin/v1/audioin.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace component {
namespace audioin {
namespace v1 {
PROTOBUF_CONSTEXPR GetAudioRequest::GetAudioRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , codec_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr)
  , previous_timestamp_nanoseconds_(int64_t{0})
  , duration_seconds_(0){}
struct GetAudioRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAudioRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAudioRequestDefaultTypeInternal() {}
  union {
    GetAudioRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAudioRequestDefaultTypeInternal _GetAudioRequest_default_instance_;
PROTOBUF_CONSTEXPR GetAudioResponse::GetAudioResponse(
    ::_pbi::ConstantInitialized)
  : request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , audio_(nullptr){}
struct GetAudioResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAudioResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAudioResponseDefaultTypeInternal() {}
  union {
    GetAudioResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAudioResponseDefaultTypeInternal _GetAudioResponse_default_instance_;
PROTOBUF_CONSTEXPR AudioChunk::AudioChunk(
    ::_pbi::ConstantInitialized)
  : audio_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , audio_info_(nullptr)
  , start_timestamp_nanoseconds_(int64_t{0})
  , end_timestamp_nanoseconds_(int64_t{0})
  , sequence_(0){}
struct AudioChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioChunkDefaultTypeInternal() {}
  union {
    AudioChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioChunkDefaultTypeInternal _AudioChunk_default_instance_;
}  // namespace v1
}  // namespace audioin
}  // namespace component
}  // namespace viam
static ::_pb::Metadata file_level_metadata_component_2faudioin_2fv1_2faudioin_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_component_2faudioin_2fv1_2faudioin_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_component_2faudioin_2fv1_2faudioin_2eproto = nullptr;

const uint32_t TableStruct_component_2faudioin_2fv1_2faudioin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::GetAudioRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::GetAudioRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::GetAudioRequest, duration_seconds_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::GetAudioRequest, codec_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::GetAudioRequest, request_id_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::GetAudioRequest, previous_timestamp_nanoseconds_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::GetAudioRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::GetAudioResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::GetAudioResponse, audio_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::GetAudioResponse, request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::AudioChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::AudioChunk, audio_data_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::AudioChunk, audio_info_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::AudioChunk, start_timestamp_nanoseconds_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::AudioChunk, end_timestamp_nanoseconds_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioin::v1::AudioChunk, sequence_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::component::audioin::v1::GetAudioRequest)},
  { 12, -1, -1, sizeof(::viam::component::audioin::v1::GetAudioResponse)},
  { 20, -1, -1, sizeof(::viam::component::audioin::v1::AudioChunk)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::component::audioin::v1::_GetAudioRequest_default_instance_._instance,
  &::viam::component::audioin::v1::_GetAudioResponse_default_instance_._instance,
  &::viam::component::audioin::v1::_AudioChunk_default_instance_._instance,
};

const char descriptor_table_protodef_component_2faudioin_2fv1_2faudioin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"component/audioin/v1/audioin.proto\022\031vi"
  "am.component.audioin.v1\032\026common/v1/commo"
  "n.proto\032\034google/api/annotations.proto\032\034g"
  "oogle/protobuf/struct.proto\"\372\001\n\017GetAudio"
  "Request\022\022\n\004name\030\001 \001(\tR\004name\022)\n\020duration_"
  "seconds\030\002 \001(\002R\017durationSeconds\022\024\n\005codec\030"
  "\003 \001(\tR\005codec\022\035\n\nrequest_id\030\004 \001(\tR\treques"
  "tId\022D\n\036previous_timestamp_nanoseconds\030\005 "
  "\001(\003R\034previousTimestampNanoseconds\022-\n\005ext"
  "ra\030c \001(\0132\027.google.protobuf.StructR\005extra"
  "\"n\n\020GetAudioResponse\022;\n\005audio\030\001 \001(\0132%.vi"
  "am.component.audioin.v1.AudioChunkR\005audi"
  "o\022\035\n\nrequest_id\030\002 \001(\tR\trequestId\"\375\001\n\nAud"
  "ioChunk\022\035\n\naudio_data\030\001 \001(\014R\taudioData\0228"
  "\n\naudio_info\030\002 \001(\0132\031.viam.common.v1.Audi"
  "oInfoR\taudioInfo\022>\n\033start_timestamp_nano"
  "seconds\030\003 \001(\003R\031startTimestampNanoseconds"
  "\022:\n\031end_timestamp_nanoseconds\030\004 \001(\003R\027end"
  "TimestampNanoseconds\022\032\n\010sequence\030\005 \001(\005R\010"
  "sequence2\356\004\n\016AudioInService\022\236\001\n\010GetAudio"
  "\022*.viam.component.audioin.v1.GetAudioReq"
  "uest\032+.viam.component.audioin.v1.GetAudi"
  "oResponse\"7\202\323\344\223\0021\022//viam/api/v1/componen"
  "t/audioin/{name}/get_audio0\001\022\226\001\n\rGetProp"
  "erties\022$.viam.common.v1.GetPropertiesReq"
  "uest\032%.viam.common.v1.GetPropertiesRespo"
  "nse\"8\202\323\344\223\0022\0220/viam/api/v1/component/audi"
  "oin/{name}/properties\022\210\001\n\tDoCommand\022 .vi"
  "am.common.v1.DoCommandRequest\032!.viam.com"
  "mon.v1.DoCommandResponse\"6\202\323\344\223\0020\"./viam/"
  "api/v1/service/audioin/{name}/do_command"
  "\022\226\001\n\rGetGeometries\022$.viam.common.v1.GetG"
  "eometriesRequest\032%.viam.common.v1.GetGeo"
  "metriesResponse\"8\202\323\344\223\0022\0220/viam/api/v1/co"
  "mponent/audioin/{name}/geometriesBE\n\035com"
  ".viam.component.audioin.v1Z$go.viam.com/"
  "api/component/audioin/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto_deps[3] = {
  &::descriptor_table_common_2fv1_2fcommon_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto = {
    false, false, 1472, descriptor_table_protodef_component_2faudioin_2fv1_2faudioin_2eproto,
    "component/audioin/v1/audioin.proto",
    &descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto_once, descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto_deps, 3, 3,
    schemas, file_default_instances, TableStruct_component_2faudioin_2fv1_2faudioin_2eproto::offsets,
    file_level_metadata_component_2faudioin_2fv1_2faudioin_2eproto, file_level_enum_descriptors_component_2faudioin_2fv1_2faudioin_2eproto,
    file_level_service_descriptors_component_2faudioin_2fv1_2faudioin_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto_getter() {
  return &descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_component_2faudioin_2fv1_2faudioin_2eproto(&descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto);
namespace viam {
namespace component {
namespace audioin {
namespace v1 {

// ===================================================================

class GetAudioRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetAudioRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetAudioRequest::_Internal::extra(const GetAudioRequest* msg) {
  return *msg->extra_;
}
void GetAudioRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetAudioRequest::GetAudioRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.audioin.v1.GetAudioRequest)
}
GetAudioRequest::GetAudioRequest(const GetAudioRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  codec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    codec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_codec().empty()) {
    codec_.Set(from._internal_codec(), 
      GetArenaForAllocation());
  }
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  ::memcpy(&previous_timestamp_nanoseconds_, &from.previous_timestamp_nanoseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_seconds_) -
    reinterpret_cast<char*>(&previous_timestamp_nanoseconds_)) + sizeof(duration_seconds_));
  // @@protoc_insertion_point(copy_constructor:viam.component.audioin.v1.GetAudioRequest)
}

inline void GetAudioRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
codec_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  codec_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extra_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_seconds_) -
    reinterpret_cast<char*>(&extra_)) + sizeof(duration_seconds_));
}

GetAudioRequest::~GetAudioRequest() {
  // @@protoc_insertion_point(destructor:viam.component.audioin.v1.GetAudioRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAudioRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  codec_.Destroy();
  request_id_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetAudioRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAudioRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.audioin.v1.GetAudioRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  codec_.ClearToEmpty();
  request_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  ::memset(&previous_timestamp_nanoseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_seconds_) -
      reinterpret_cast<char*>(&previous_timestamp_nanoseconds_)) + sizeof(duration_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAudioRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.audioin.v1.GetAudioRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // float duration_seconds = 2 [json_name = "durationSeconds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          duration_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string codec = 3 [json_name = "codec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_codec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.audioin.v1.GetAudioRequest.codec"));
        } else
          goto handle_unusual;
        continue;
      // string request_id = 4 [json_name = "requestId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.audioin.v1.GetAudioRequest.request_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 previous_timestamp_nanoseconds = 5 [json_name = "previousTimestampNanoseconds"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          previous_timestamp_nanoseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAudioRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.audioin.v1.GetAudioRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.audioin.v1.GetAudioRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // float duration_seconds = 2 [json_name = "durationSeconds"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = this->_internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_duration_seconds(), target);
  }

  // string codec = 3 [json_name = "codec"];
  if (!this->_internal_codec().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_codec().data(), static_cast<int>(this->_internal_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.audioin.v1.GetAudioRequest.codec");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_codec(), target);
  }

  // string request_id = 4 [json_name = "requestId"];
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.audioin.v1.GetAudioRequest.request_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_request_id(), target);
  }

  // int64 previous_timestamp_nanoseconds = 5 [json_name = "previousTimestampNanoseconds"];
  if (this->_internal_previous_timestamp_nanoseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_previous_timestamp_nanoseconds(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.audioin.v1.GetAudioRequest)
  return target;
}

size_t GetAudioRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.audioin.v1.GetAudioRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string codec = 3 [json_name = "codec"];
  if (!this->_internal_codec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_codec());
  }

  // string request_id = 4 [json_name = "requestId"];
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  // int64 previous_timestamp_nanoseconds = 5 [json_name = "previousTimestampNanoseconds"];
  if (this->_internal_previous_timestamp_nanoseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_previous_timestamp_nanoseconds());
  }

  // float duration_seconds = 2 [json_name = "durationSeconds"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = this->_internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAudioRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAudioRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAudioRequest::GetClassData() const { return &_class_data_; }

void GetAudioRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAudioRequest *>(to)->MergeFrom(
      static_cast<const GetAudioRequest &>(from));
}


void GetAudioRequest::MergeFrom(const GetAudioRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.audioin.v1.GetAudioRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_codec().empty()) {
    _internal_set_codec(from._internal_codec());
  }
  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  if (from._internal_previous_timestamp_nanoseconds() != 0) {
    _internal_set_previous_timestamp_nanoseconds(from._internal_previous_timestamp_nanoseconds());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_duration_seconds = from._internal_duration_seconds();
  uint32_t raw_duration_seconds;
  memcpy(&raw_duration_seconds, &tmp_duration_seconds, sizeof(tmp_duration_seconds));
  if (raw_duration_seconds != 0) {
    _internal_set_duration_seconds(from._internal_duration_seconds());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAudioRequest::CopyFrom(const GetAudioRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.audioin.v1.GetAudioRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAudioRequest::IsInitialized() const {
  return true;
}

void GetAudioRequest::InternalSwap(GetAudioRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &codec_, lhs_arena,
      &other->codec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAudioRequest, duration_seconds_)
      + sizeof(GetAudioRequest::duration_seconds_)
      - PROTOBUF_FIELD_OFFSET(GetAudioRequest, extra_)>(
          reinterpret_cast<char*>(&extra_),
          reinterpret_cast<char*>(&other->extra_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAudioRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto_getter, &descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto_once,
      file_level_metadata_component_2faudioin_2fv1_2faudioin_2eproto[0]);
}

// ===================================================================

class GetAudioResponse::_Internal {
 public:
  static const ::viam::component::audioin::v1::AudioChunk& audio(const GetAudioResponse* msg);
};

const ::viam::component::audioin::v1::AudioChunk&
GetAudioResponse::_Internal::audio(const GetAudioResponse* msg) {
  return *msg->audio_;
}
GetAudioResponse::GetAudioResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.audioin.v1.GetAudioResponse)
}
GetAudioResponse::GetAudioResponse(const GetAudioResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_audio()) {
    audio_ = new ::viam::component::audioin::v1::AudioChunk(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.audioin.v1.GetAudioResponse)
}

inline void GetAudioResponse::SharedCtor() {
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
audio_ = nullptr;
}

GetAudioResponse::~GetAudioResponse() {
  // @@protoc_insertion_point(destructor:viam.component.audioin.v1.GetAudioResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetAudioResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.Destroy();
  if (this != internal_default_instance()) delete audio_;
}

void GetAudioResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetAudioResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.audioin.v1.GetAudioResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAudioResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.component.audioin.v1.AudioChunk audio = 1 [json_name = "audio"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string request_id = 2 [json_name = "requestId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.audioin.v1.GetAudioResponse.request_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetAudioResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.audioin.v1.GetAudioResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.component.audioin.v1.AudioChunk audio = 1 [json_name = "audio"];
  if (this->_internal_has_audio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::audio(this),
        _Internal::audio(this).GetCachedSize(), target, stream);
  }

  // string request_id = 2 [json_name = "requestId"];
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.audioin.v1.GetAudioResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.audioin.v1.GetAudioResponse)
  return target;
}

size_t GetAudioResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.audioin.v1.GetAudioResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 2 [json_name = "requestId"];
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .viam.component.audioin.v1.AudioChunk audio = 1 [json_name = "audio"];
  if (this->_internal_has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetAudioResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetAudioResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetAudioResponse::GetClassData() const { return &_class_data_; }

void GetAudioResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetAudioResponse *>(to)->MergeFrom(
      static_cast<const GetAudioResponse &>(from));
}


void GetAudioResponse::MergeFrom(const GetAudioResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.audioin.v1.GetAudioResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_has_audio()) {
    _internal_mutable_audio()->::viam::component::audioin::v1::AudioChunk::MergeFrom(from._internal_audio());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetAudioResponse::CopyFrom(const GetAudioResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.audioin.v1.GetAudioResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAudioResponse::IsInitialized() const {
  return true;
}

void GetAudioResponse::InternalSwap(GetAudioResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  swap(audio_, other->audio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAudioResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto_getter, &descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto_once,
      file_level_metadata_component_2faudioin_2fv1_2faudioin_2eproto[1]);
}

// ===================================================================

class AudioChunk::_Internal {
 public:
  static const ::viam::common::v1::AudioInfo& audio_info(const AudioChunk* msg);
};

const ::viam::common::v1::AudioInfo&
AudioChunk::_Internal::audio_info(const AudioChunk* msg) {
  return *msg->audio_info_;
}
void AudioChunk::clear_audio_info() {
  if (GetArenaForAllocation() == nullptr && audio_info_ != nullptr) {
    delete audio_info_;
  }
  audio_info_ = nullptr;
}
AudioChunk::AudioChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.audioin.v1.AudioChunk)
}
AudioChunk::AudioChunk(const AudioChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  audio_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    audio_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_data().empty()) {
    audio_data_.Set(from._internal_audio_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_audio_info()) {
    audio_info_ = new ::viam::common::v1::AudioInfo(*from.audio_info_);
  } else {
    audio_info_ = nullptr;
  }
  ::memcpy(&start_timestamp_nanoseconds_, &from.start_timestamp_nanoseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&start_timestamp_nanoseconds_)) + sizeof(sequence_));
  // @@protoc_insertion_point(copy_constructor:viam.component.audioin.v1.AudioChunk)
}

inline void AudioChunk::SharedCtor() {
audio_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  audio_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&audio_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&audio_info_)) + sizeof(sequence_));
}

AudioChunk::~AudioChunk() {
  // @@protoc_insertion_point(destructor:viam.component.audioin.v1.AudioChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  audio_data_.Destroy();
  if (this != internal_default_instance()) delete audio_info_;
}

void AudioChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.audioin.v1.AudioChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audio_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && audio_info_ != nullptr) {
    delete audio_info_;
  }
  audio_info_ = nullptr;
  ::memset(&start_timestamp_nanoseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_) -
      reinterpret_cast<char*>(&start_timestamp_nanoseconds_)) + sizeof(sequence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes audio_data = 1 [json_name = "audioData"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_audio_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.AudioInfo audio_info = 2 [json_name = "audioInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_timestamp_nanoseconds = 3 [json_name = "startTimestampNanoseconds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          start_timestamp_nanoseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 end_timestamp_nanoseconds = 4 [json_name = "endTimestampNanoseconds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          end_timestamp_nanoseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sequence = 5 [json_name = "sequence"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.audioin.v1.AudioChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes audio_data = 1 [json_name = "audioData"];
  if (!this->_internal_audio_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_audio_data(), target);
  }

  // .viam.common.v1.AudioInfo audio_info = 2 [json_name = "audioInfo"];
  if (this->_internal_has_audio_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::audio_info(this),
        _Internal::audio_info(this).GetCachedSize(), target, stream);
  }

  // int64 start_timestamp_nanoseconds = 3 [json_name = "startTimestampNanoseconds"];
  if (this->_internal_start_timestamp_nanoseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_start_timestamp_nanoseconds(), target);
  }

  // int64 end_timestamp_nanoseconds = 4 [json_name = "endTimestampNanoseconds"];
  if (this->_internal_end_timestamp_nanoseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_end_timestamp_nanoseconds(), target);
  }

  // int32 sequence = 5 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.audioin.v1.AudioChunk)
  return target;
}

size_t AudioChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.audioin.v1.AudioChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes audio_data = 1 [json_name = "audioData"];
  if (!this->_internal_audio_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_audio_data());
  }

  // .viam.common.v1.AudioInfo audio_info = 2 [json_name = "audioInfo"];
  if (this->_internal_has_audio_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_info_);
  }

  // int64 start_timestamp_nanoseconds = 3 [json_name = "startTimestampNanoseconds"];
  if (this->_internal_start_timestamp_nanoseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_timestamp_nanoseconds());
  }

  // int64 end_timestamp_nanoseconds = 4 [json_name = "endTimestampNanoseconds"];
  if (this->_internal_end_timestamp_nanoseconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_end_timestamp_nanoseconds());
  }

  // int32 sequence = 5 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioChunk::GetClassData() const { return &_class_data_; }

void AudioChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioChunk *>(to)->MergeFrom(
      static_cast<const AudioChunk &>(from));
}


void AudioChunk::MergeFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.audioin.v1.AudioChunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_audio_data().empty()) {
    _internal_set_audio_data(from._internal_audio_data());
  }
  if (from._internal_has_audio_info()) {
    _internal_mutable_audio_info()->::viam::common::v1::AudioInfo::MergeFrom(from._internal_audio_info());
  }
  if (from._internal_start_timestamp_nanoseconds() != 0) {
    _internal_set_start_timestamp_nanoseconds(from._internal_start_timestamp_nanoseconds());
  }
  if (from._internal_end_timestamp_nanoseconds() != 0) {
    _internal_set_end_timestamp_nanoseconds(from._internal_end_timestamp_nanoseconds());
  }
  if (from._internal_sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioChunk::CopyFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.audioin.v1.AudioChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioChunk::IsInitialized() const {
  return true;
}

void AudioChunk::InternalSwap(AudioChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &audio_data_, lhs_arena,
      &other->audio_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioChunk, sequence_)
      + sizeof(AudioChunk::sequence_)
      - PROTOBUF_FIELD_OFFSET(AudioChunk, audio_info_)>(
          reinterpret_cast<char*>(&audio_info_),
          reinterpret_cast<char*>(&other->audio_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto_getter, &descriptor_table_component_2faudioin_2fv1_2faudioin_2eproto_once,
      file_level_metadata_component_2faudioin_2fv1_2faudioin_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace audioin
}  // namespace component
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::component::audioin::v1::GetAudioRequest*
Arena::CreateMaybeMessage< ::viam::component::audioin::v1::GetAudioRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::audioin::v1::GetAudioRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::audioin::v1::GetAudioResponse*
Arena::CreateMaybeMessage< ::viam::component::audioin::v1::GetAudioResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::audioin::v1::GetAudioResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::audioin::v1::AudioChunk*
Arena::CreateMaybeMessage< ::viam::component::audioin::v1::AudioChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::audioin::v1::AudioChunk >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
