// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: component/powersensor/v1/powersensor.proto

#include "component/powersensor/v1/powersensor.pb.h"
#include "component/powersensor/v1/powersensor.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace viam {
namespace component {
namespace powersensor {
namespace v1 {

static const char* PowerSensorService_method_names[] = {
  "/viam.component.powersensor.v1.PowerSensorService/GetVoltage",
  "/viam.component.powersensor.v1.PowerSensorService/GetCurrent",
  "/viam.component.powersensor.v1.PowerSensorService/GetPower",
  "/viam.component.powersensor.v1.PowerSensorService/GetReadings",
  "/viam.component.powersensor.v1.PowerSensorService/DoCommand",
};

std::unique_ptr< PowerSensorService::Stub> PowerSensorService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PowerSensorService::Stub> stub(new PowerSensorService::Stub(channel));
  return stub;
}

PowerSensorService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetVoltage_(PowerSensorService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCurrent_(PowerSensorService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPower_(PowerSensorService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetReadings_(PowerSensorService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoCommand_(PowerSensorService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PowerSensorService::Stub::GetVoltage(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetVoltageRequest& request, ::viam::component::powersensor::v1::GetVoltageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetVoltage_, context, request, response);
}

void PowerSensorService::Stub::experimental_async::GetVoltage(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetVoltageRequest* request, ::viam::component::powersensor::v1::GetVoltageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVoltage_, context, request, response, std::move(f));
}

void PowerSensorService::Stub::experimental_async::GetVoltage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::powersensor::v1::GetVoltageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetVoltage_, context, request, response, std::move(f));
}

void PowerSensorService::Stub::experimental_async::GetVoltage(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetVoltageRequest* request, ::viam::component::powersensor::v1::GetVoltageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVoltage_, context, request, response, reactor);
}

void PowerSensorService::Stub::experimental_async::GetVoltage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::powersensor::v1::GetVoltageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetVoltage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::component::powersensor::v1::GetVoltageResponse>* PowerSensorService::Stub::AsyncGetVoltageRaw(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetVoltageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::powersensor::v1::GetVoltageResponse>::Create(channel_.get(), cq, rpcmethod_GetVoltage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::component::powersensor::v1::GetVoltageResponse>* PowerSensorService::Stub::PrepareAsyncGetVoltageRaw(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetVoltageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::powersensor::v1::GetVoltageResponse>::Create(channel_.get(), cq, rpcmethod_GetVoltage_, context, request, false);
}

::grpc::Status PowerSensorService::Stub::GetCurrent(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetCurrentRequest& request, ::viam::component::powersensor::v1::GetCurrentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCurrent_, context, request, response);
}

void PowerSensorService::Stub::experimental_async::GetCurrent(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetCurrentRequest* request, ::viam::component::powersensor::v1::GetCurrentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCurrent_, context, request, response, std::move(f));
}

void PowerSensorService::Stub::experimental_async::GetCurrent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::powersensor::v1::GetCurrentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetCurrent_, context, request, response, std::move(f));
}

void PowerSensorService::Stub::experimental_async::GetCurrent(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetCurrentRequest* request, ::viam::component::powersensor::v1::GetCurrentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCurrent_, context, request, response, reactor);
}

void PowerSensorService::Stub::experimental_async::GetCurrent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::powersensor::v1::GetCurrentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetCurrent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::component::powersensor::v1::GetCurrentResponse>* PowerSensorService::Stub::AsyncGetCurrentRaw(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetCurrentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::powersensor::v1::GetCurrentResponse>::Create(channel_.get(), cq, rpcmethod_GetCurrent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::component::powersensor::v1::GetCurrentResponse>* PowerSensorService::Stub::PrepareAsyncGetCurrentRaw(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetCurrentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::powersensor::v1::GetCurrentResponse>::Create(channel_.get(), cq, rpcmethod_GetCurrent_, context, request, false);
}

::grpc::Status PowerSensorService::Stub::GetPower(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetPowerRequest& request, ::viam::component::powersensor::v1::GetPowerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPower_, context, request, response);
}

void PowerSensorService::Stub::experimental_async::GetPower(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetPowerRequest* request, ::viam::component::powersensor::v1::GetPowerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPower_, context, request, response, std::move(f));
}

void PowerSensorService::Stub::experimental_async::GetPower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::powersensor::v1::GetPowerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPower_, context, request, response, std::move(f));
}

void PowerSensorService::Stub::experimental_async::GetPower(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetPowerRequest* request, ::viam::component::powersensor::v1::GetPowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPower_, context, request, response, reactor);
}

void PowerSensorService::Stub::experimental_async::GetPower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::powersensor::v1::GetPowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPower_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::component::powersensor::v1::GetPowerResponse>* PowerSensorService::Stub::AsyncGetPowerRaw(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetPowerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::powersensor::v1::GetPowerResponse>::Create(channel_.get(), cq, rpcmethod_GetPower_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::component::powersensor::v1::GetPowerResponse>* PowerSensorService::Stub::PrepareAsyncGetPowerRaw(::grpc::ClientContext* context, const ::viam::component::powersensor::v1::GetPowerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::powersensor::v1::GetPowerResponse>::Create(channel_.get(), cq, rpcmethod_GetPower_, context, request, false);
}

::grpc::Status PowerSensorService::Stub::GetReadings(::grpc::ClientContext* context, const ::viam::common::v1::GetReadingsRequest& request, ::viam::common::v1::GetReadingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetReadings_, context, request, response);
}

void PowerSensorService::Stub::experimental_async::GetReadings(::grpc::ClientContext* context, const ::viam::common::v1::GetReadingsRequest* request, ::viam::common::v1::GetReadingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetReadings_, context, request, response, std::move(f));
}

void PowerSensorService::Stub::experimental_async::GetReadings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::common::v1::GetReadingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetReadings_, context, request, response, std::move(f));
}

void PowerSensorService::Stub::experimental_async::GetReadings(::grpc::ClientContext* context, const ::viam::common::v1::GetReadingsRequest* request, ::viam::common::v1::GetReadingsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetReadings_, context, request, response, reactor);
}

void PowerSensorService::Stub::experimental_async::GetReadings(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::common::v1::GetReadingsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetReadings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::GetReadingsResponse>* PowerSensorService::Stub::AsyncGetReadingsRaw(::grpc::ClientContext* context, const ::viam::common::v1::GetReadingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::common::v1::GetReadingsResponse>::Create(channel_.get(), cq, rpcmethod_GetReadings_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::GetReadingsResponse>* PowerSensorService::Stub::PrepareAsyncGetReadingsRaw(::grpc::ClientContext* context, const ::viam::common::v1::GetReadingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::common::v1::GetReadingsResponse>::Create(channel_.get(), cq, rpcmethod_GetReadings_, context, request, false);
}

::grpc::Status PowerSensorService::Stub::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoCommand_, context, request, response);
}

void PowerSensorService::Stub::experimental_async::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, std::move(f));
}

void PowerSensorService::Stub::experimental_async::DoCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, std::move(f));
}

void PowerSensorService::Stub::experimental_async::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, reactor);
}

void PowerSensorService::Stub::experimental_async::DoCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* PowerSensorService::Stub::AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::common::v1::DoCommandResponse>::Create(channel_.get(), cq, rpcmethod_DoCommand_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* PowerSensorService::Stub::PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::common::v1::DoCommandResponse>::Create(channel_.get(), cq, rpcmethod_DoCommand_, context, request, false);
}

PowerSensorService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PowerSensorService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PowerSensorService::Service, ::viam::component::powersensor::v1::GetVoltageRequest, ::viam::component::powersensor::v1::GetVoltageResponse>(
          [](PowerSensorService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::component::powersensor::v1::GetVoltageRequest* req,
             ::viam::component::powersensor::v1::GetVoltageResponse* resp) {
               return service->GetVoltage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PowerSensorService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PowerSensorService::Service, ::viam::component::powersensor::v1::GetCurrentRequest, ::viam::component::powersensor::v1::GetCurrentResponse>(
          [](PowerSensorService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::component::powersensor::v1::GetCurrentRequest* req,
             ::viam::component::powersensor::v1::GetCurrentResponse* resp) {
               return service->GetCurrent(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PowerSensorService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PowerSensorService::Service, ::viam::component::powersensor::v1::GetPowerRequest, ::viam::component::powersensor::v1::GetPowerResponse>(
          [](PowerSensorService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::component::powersensor::v1::GetPowerRequest* req,
             ::viam::component::powersensor::v1::GetPowerResponse* resp) {
               return service->GetPower(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PowerSensorService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PowerSensorService::Service, ::viam::common::v1::GetReadingsRequest, ::viam::common::v1::GetReadingsResponse>(
          [](PowerSensorService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::common::v1::GetReadingsRequest* req,
             ::viam::common::v1::GetReadingsResponse* resp) {
               return service->GetReadings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PowerSensorService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PowerSensorService::Service, ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
          [](PowerSensorService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::common::v1::DoCommandRequest* req,
             ::viam::common::v1::DoCommandResponse* resp) {
               return service->DoCommand(ctx, req, resp);
             }, this)));
}

PowerSensorService::Service::~Service() {
}

::grpc::Status PowerSensorService::Service::GetVoltage(::grpc::ServerContext* context, const ::viam::component::powersensor::v1::GetVoltageRequest* request, ::viam::component::powersensor::v1::GetVoltageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PowerSensorService::Service::GetCurrent(::grpc::ServerContext* context, const ::viam::component::powersensor::v1::GetCurrentRequest* request, ::viam::component::powersensor::v1::GetCurrentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PowerSensorService::Service::GetPower(::grpc::ServerContext* context, const ::viam::component::powersensor::v1::GetPowerRequest* request, ::viam::component::powersensor::v1::GetPowerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PowerSensorService::Service::GetReadings(::grpc::ServerContext* context, const ::viam::common::v1::GetReadingsRequest* request, ::viam::common::v1::GetReadingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PowerSensorService::Service::DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viam
}  // namespace component
}  // namespace powersensor
}  // namespace v1

