// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: component/arm/v1/arm.proto

#include "component/arm/v1/arm.pb.h"
#include "component/arm/v1/arm.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace viam {
namespace component {
namespace arm {
namespace v1 {

static const char* ArmService_method_names[] = {
  "/viam.component.arm.v1.ArmService/GetEndPosition",
  "/viam.component.arm.v1.ArmService/MoveToPosition",
  "/viam.component.arm.v1.ArmService/GetJointPositions",
  "/viam.component.arm.v1.ArmService/MoveToJointPositions",
  "/viam.component.arm.v1.ArmService/MoveThroughJointPositions",
  "/viam.component.arm.v1.ArmService/Stop",
  "/viam.component.arm.v1.ArmService/IsMoving",
  "/viam.component.arm.v1.ArmService/DoCommand",
  "/viam.component.arm.v1.ArmService/GetKinematics",
  "/viam.component.arm.v1.ArmService/GetGeometries",
};

std::unique_ptr< ArmService::Stub> ArmService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ArmService::Stub> stub(new ArmService::Stub(channel));
  return stub;
}

ArmService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetEndPosition_(ArmService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveToPosition_(ArmService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJointPositions_(ArmService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveToJointPositions_(ArmService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveThroughJointPositions_(ArmService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(ArmService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsMoving_(ArmService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoCommand_(ArmService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKinematics_(ArmService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetGeometries_(ArmService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ArmService::Stub::GetEndPosition(::grpc::ClientContext* context, const ::viam::component::arm::v1::GetEndPositionRequest& request, ::viam::component::arm::v1::GetEndPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEndPosition_, context, request, response);
}

void ArmService::Stub::experimental_async::GetEndPosition(::grpc::ClientContext* context, const ::viam::component::arm::v1::GetEndPositionRequest* request, ::viam::component::arm::v1::GetEndPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEndPosition_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::GetEndPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::GetEndPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEndPosition_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::GetEndPosition(::grpc::ClientContext* context, const ::viam::component::arm::v1::GetEndPositionRequest* request, ::viam::component::arm::v1::GetEndPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEndPosition_, context, request, response, reactor);
}

void ArmService::Stub::experimental_async::GetEndPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::GetEndPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEndPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::GetEndPositionResponse>* ArmService::Stub::AsyncGetEndPositionRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::GetEndPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::GetEndPositionResponse>::Create(channel_.get(), cq, rpcmethod_GetEndPosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::GetEndPositionResponse>* ArmService::Stub::PrepareAsyncGetEndPositionRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::GetEndPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::GetEndPositionResponse>::Create(channel_.get(), cq, rpcmethod_GetEndPosition_, context, request, false);
}

::grpc::Status ArmService::Stub::MoveToPosition(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveToPositionRequest& request, ::viam::component::arm::v1::MoveToPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveToPosition_, context, request, response);
}

void ArmService::Stub::experimental_async::MoveToPosition(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveToPositionRequest* request, ::viam::component::arm::v1::MoveToPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveToPosition_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::MoveToPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::MoveToPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveToPosition_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::MoveToPosition(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveToPositionRequest* request, ::viam::component::arm::v1::MoveToPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveToPosition_, context, request, response, reactor);
}

void ArmService::Stub::experimental_async::MoveToPosition(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::MoveToPositionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveToPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::MoveToPositionResponse>* ArmService::Stub::AsyncMoveToPositionRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveToPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::MoveToPositionResponse>::Create(channel_.get(), cq, rpcmethod_MoveToPosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::MoveToPositionResponse>* ArmService::Stub::PrepareAsyncMoveToPositionRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveToPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::MoveToPositionResponse>::Create(channel_.get(), cq, rpcmethod_MoveToPosition_, context, request, false);
}

::grpc::Status ArmService::Stub::GetJointPositions(::grpc::ClientContext* context, const ::viam::component::arm::v1::GetJointPositionsRequest& request, ::viam::component::arm::v1::GetJointPositionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetJointPositions_, context, request, response);
}

void ArmService::Stub::experimental_async::GetJointPositions(::grpc::ClientContext* context, const ::viam::component::arm::v1::GetJointPositionsRequest* request, ::viam::component::arm::v1::GetJointPositionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetJointPositions_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::GetJointPositions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::GetJointPositionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetJointPositions_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::GetJointPositions(::grpc::ClientContext* context, const ::viam::component::arm::v1::GetJointPositionsRequest* request, ::viam::component::arm::v1::GetJointPositionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetJointPositions_, context, request, response, reactor);
}

void ArmService::Stub::experimental_async::GetJointPositions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::GetJointPositionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetJointPositions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::GetJointPositionsResponse>* ArmService::Stub::AsyncGetJointPositionsRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::GetJointPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::GetJointPositionsResponse>::Create(channel_.get(), cq, rpcmethod_GetJointPositions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::GetJointPositionsResponse>* ArmService::Stub::PrepareAsyncGetJointPositionsRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::GetJointPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::GetJointPositionsResponse>::Create(channel_.get(), cq, rpcmethod_GetJointPositions_, context, request, false);
}

::grpc::Status ArmService::Stub::MoveToJointPositions(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveToJointPositionsRequest& request, ::viam::component::arm::v1::MoveToJointPositionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveToJointPositions_, context, request, response);
}

void ArmService::Stub::experimental_async::MoveToJointPositions(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveToJointPositionsRequest* request, ::viam::component::arm::v1::MoveToJointPositionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveToJointPositions_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::MoveToJointPositions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::MoveToJointPositionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveToJointPositions_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::MoveToJointPositions(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveToJointPositionsRequest* request, ::viam::component::arm::v1::MoveToJointPositionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveToJointPositions_, context, request, response, reactor);
}

void ArmService::Stub::experimental_async::MoveToJointPositions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::MoveToJointPositionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveToJointPositions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::MoveToJointPositionsResponse>* ArmService::Stub::AsyncMoveToJointPositionsRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveToJointPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::MoveToJointPositionsResponse>::Create(channel_.get(), cq, rpcmethod_MoveToJointPositions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::MoveToJointPositionsResponse>* ArmService::Stub::PrepareAsyncMoveToJointPositionsRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveToJointPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::MoveToJointPositionsResponse>::Create(channel_.get(), cq, rpcmethod_MoveToJointPositions_, context, request, false);
}

::grpc::Status ArmService::Stub::MoveThroughJointPositions(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveThroughJointPositionsRequest& request, ::viam::component::arm::v1::MoveThroughJointPositionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveThroughJointPositions_, context, request, response);
}

void ArmService::Stub::experimental_async::MoveThroughJointPositions(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveThroughJointPositionsRequest* request, ::viam::component::arm::v1::MoveThroughJointPositionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveThroughJointPositions_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::MoveThroughJointPositions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::MoveThroughJointPositionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MoveThroughJointPositions_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::MoveThroughJointPositions(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveThroughJointPositionsRequest* request, ::viam::component::arm::v1::MoveThroughJointPositionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveThroughJointPositions_, context, request, response, reactor);
}

void ArmService::Stub::experimental_async::MoveThroughJointPositions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::MoveThroughJointPositionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_MoveThroughJointPositions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::MoveThroughJointPositionsResponse>* ArmService::Stub::AsyncMoveThroughJointPositionsRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveThroughJointPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::MoveThroughJointPositionsResponse>::Create(channel_.get(), cq, rpcmethod_MoveThroughJointPositions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::MoveThroughJointPositionsResponse>* ArmService::Stub::PrepareAsyncMoveThroughJointPositionsRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::MoveThroughJointPositionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::MoveThroughJointPositionsResponse>::Create(channel_.get(), cq, rpcmethod_MoveThroughJointPositions_, context, request, false);
}

::grpc::Status ArmService::Stub::Stop(::grpc::ClientContext* context, const ::viam::component::arm::v1::StopRequest& request, ::viam::component::arm::v1::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request, response);
}

void ArmService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::viam::component::arm::v1::StopRequest* request, ::viam::component::arm::v1::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::viam::component::arm::v1::StopRequest* request, ::viam::component::arm::v1::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

void ArmService::Stub::experimental_async::Stop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::StopResponse>* ArmService::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::StopResponse>* ArmService::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::StopResponse>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, false);
}

::grpc::Status ArmService::Stub::IsMoving(::grpc::ClientContext* context, const ::viam::component::arm::v1::IsMovingRequest& request, ::viam::component::arm::v1::IsMovingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsMoving_, context, request, response);
}

void ArmService::Stub::experimental_async::IsMoving(::grpc::ClientContext* context, const ::viam::component::arm::v1::IsMovingRequest* request, ::viam::component::arm::v1::IsMovingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsMoving_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::IsMoving(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::IsMovingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsMoving_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::IsMoving(::grpc::ClientContext* context, const ::viam::component::arm::v1::IsMovingRequest* request, ::viam::component::arm::v1::IsMovingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsMoving_, context, request, response, reactor);
}

void ArmService::Stub::experimental_async::IsMoving(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::component::arm::v1::IsMovingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsMoving_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::IsMovingResponse>* ArmService::Stub::AsyncIsMovingRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::IsMovingResponse>::Create(channel_.get(), cq, rpcmethod_IsMoving_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::component::arm::v1::IsMovingResponse>* ArmService::Stub::PrepareAsyncIsMovingRaw(::grpc::ClientContext* context, const ::viam::component::arm::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::component::arm::v1::IsMovingResponse>::Create(channel_.get(), cq, rpcmethod_IsMoving_, context, request, false);
}

::grpc::Status ArmService::Stub::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoCommand_, context, request, response);
}

void ArmService::Stub::experimental_async::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::DoCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, reactor);
}

void ArmService::Stub::experimental_async::DoCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* ArmService::Stub::AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::common::v1::DoCommandResponse>::Create(channel_.get(), cq, rpcmethod_DoCommand_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* ArmService::Stub::PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::common::v1::DoCommandResponse>::Create(channel_.get(), cq, rpcmethod_DoCommand_, context, request, false);
}

::grpc::Status ArmService::Stub::GetKinematics(::grpc::ClientContext* context, const ::viam::common::v1::GetKinematicsRequest& request, ::viam::common::v1::GetKinematicsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetKinematics_, context, request, response);
}

void ArmService::Stub::experimental_async::GetKinematics(::grpc::ClientContext* context, const ::viam::common::v1::GetKinematicsRequest* request, ::viam::common::v1::GetKinematicsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetKinematics_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::GetKinematics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::common::v1::GetKinematicsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetKinematics_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::GetKinematics(::grpc::ClientContext* context, const ::viam::common::v1::GetKinematicsRequest* request, ::viam::common::v1::GetKinematicsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetKinematics_, context, request, response, reactor);
}

void ArmService::Stub::experimental_async::GetKinematics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::common::v1::GetKinematicsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetKinematics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::GetKinematicsResponse>* ArmService::Stub::AsyncGetKinematicsRaw(::grpc::ClientContext* context, const ::viam::common::v1::GetKinematicsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::common::v1::GetKinematicsResponse>::Create(channel_.get(), cq, rpcmethod_GetKinematics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::GetKinematicsResponse>* ArmService::Stub::PrepareAsyncGetKinematicsRaw(::grpc::ClientContext* context, const ::viam::common::v1::GetKinematicsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::common::v1::GetKinematicsResponse>::Create(channel_.get(), cq, rpcmethod_GetKinematics_, context, request, false);
}

::grpc::Status ArmService::Stub::GetGeometries(::grpc::ClientContext* context, const ::viam::common::v1::GetGeometriesRequest& request, ::viam::common::v1::GetGeometriesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetGeometries_, context, request, response);
}

void ArmService::Stub::experimental_async::GetGeometries(::grpc::ClientContext* context, const ::viam::common::v1::GetGeometriesRequest* request, ::viam::common::v1::GetGeometriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGeometries_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::GetGeometries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::common::v1::GetGeometriesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetGeometries_, context, request, response, std::move(f));
}

void ArmService::Stub::experimental_async::GetGeometries(::grpc::ClientContext* context, const ::viam::common::v1::GetGeometriesRequest* request, ::viam::common::v1::GetGeometriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetGeometries_, context, request, response, reactor);
}

void ArmService::Stub::experimental_async::GetGeometries(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::common::v1::GetGeometriesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetGeometries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::GetGeometriesResponse>* ArmService::Stub::AsyncGetGeometriesRaw(::grpc::ClientContext* context, const ::viam::common::v1::GetGeometriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::common::v1::GetGeometriesResponse>::Create(channel_.get(), cq, rpcmethod_GetGeometries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::GetGeometriesResponse>* ArmService::Stub::PrepareAsyncGetGeometriesRaw(::grpc::ClientContext* context, const ::viam::common::v1::GetGeometriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::common::v1::GetGeometriesResponse>::Create(channel_.get(), cq, rpcmethod_GetGeometries_, context, request, false);
}

ArmService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArmService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArmService::Service, ::viam::component::arm::v1::GetEndPositionRequest, ::viam::component::arm::v1::GetEndPositionResponse>(
          [](ArmService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::component::arm::v1::GetEndPositionRequest* req,
             ::viam::component::arm::v1::GetEndPositionResponse* resp) {
               return service->GetEndPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArmService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArmService::Service, ::viam::component::arm::v1::MoveToPositionRequest, ::viam::component::arm::v1::MoveToPositionResponse>(
          [](ArmService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::component::arm::v1::MoveToPositionRequest* req,
             ::viam::component::arm::v1::MoveToPositionResponse* resp) {
               return service->MoveToPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArmService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArmService::Service, ::viam::component::arm::v1::GetJointPositionsRequest, ::viam::component::arm::v1::GetJointPositionsResponse>(
          [](ArmService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::component::arm::v1::GetJointPositionsRequest* req,
             ::viam::component::arm::v1::GetJointPositionsResponse* resp) {
               return service->GetJointPositions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArmService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArmService::Service, ::viam::component::arm::v1::MoveToJointPositionsRequest, ::viam::component::arm::v1::MoveToJointPositionsResponse>(
          [](ArmService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::component::arm::v1::MoveToJointPositionsRequest* req,
             ::viam::component::arm::v1::MoveToJointPositionsResponse* resp) {
               return service->MoveToJointPositions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArmService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArmService::Service, ::viam::component::arm::v1::MoveThroughJointPositionsRequest, ::viam::component::arm::v1::MoveThroughJointPositionsResponse>(
          [](ArmService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::component::arm::v1::MoveThroughJointPositionsRequest* req,
             ::viam::component::arm::v1::MoveThroughJointPositionsResponse* resp) {
               return service->MoveThroughJointPositions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArmService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArmService::Service, ::viam::component::arm::v1::StopRequest, ::viam::component::arm::v1::StopResponse>(
          [](ArmService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::component::arm::v1::StopRequest* req,
             ::viam::component::arm::v1::StopResponse* resp) {
               return service->Stop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArmService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArmService::Service, ::viam::component::arm::v1::IsMovingRequest, ::viam::component::arm::v1::IsMovingResponse>(
          [](ArmService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::component::arm::v1::IsMovingRequest* req,
             ::viam::component::arm::v1::IsMovingResponse* resp) {
               return service->IsMoving(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArmService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArmService::Service, ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
          [](ArmService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::common::v1::DoCommandRequest* req,
             ::viam::common::v1::DoCommandResponse* resp) {
               return service->DoCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArmService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArmService::Service, ::viam::common::v1::GetKinematicsRequest, ::viam::common::v1::GetKinematicsResponse>(
          [](ArmService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::common::v1::GetKinematicsRequest* req,
             ::viam::common::v1::GetKinematicsResponse* resp) {
               return service->GetKinematics(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ArmService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ArmService::Service, ::viam::common::v1::GetGeometriesRequest, ::viam::common::v1::GetGeometriesResponse>(
          [](ArmService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::common::v1::GetGeometriesRequest* req,
             ::viam::common::v1::GetGeometriesResponse* resp) {
               return service->GetGeometries(ctx, req, resp);
             }, this)));
}

ArmService::Service::~Service() {
}

::grpc::Status ArmService::Service::GetEndPosition(::grpc::ServerContext* context, const ::viam::component::arm::v1::GetEndPositionRequest* request, ::viam::component::arm::v1::GetEndPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArmService::Service::MoveToPosition(::grpc::ServerContext* context, const ::viam::component::arm::v1::MoveToPositionRequest* request, ::viam::component::arm::v1::MoveToPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArmService::Service::GetJointPositions(::grpc::ServerContext* context, const ::viam::component::arm::v1::GetJointPositionsRequest* request, ::viam::component::arm::v1::GetJointPositionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArmService::Service::MoveToJointPositions(::grpc::ServerContext* context, const ::viam::component::arm::v1::MoveToJointPositionsRequest* request, ::viam::component::arm::v1::MoveToJointPositionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArmService::Service::MoveThroughJointPositions(::grpc::ServerContext* context, const ::viam::component::arm::v1::MoveThroughJointPositionsRequest* request, ::viam::component::arm::v1::MoveThroughJointPositionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArmService::Service::Stop(::grpc::ServerContext* context, const ::viam::component::arm::v1::StopRequest* request, ::viam::component::arm::v1::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArmService::Service::IsMoving(::grpc::ServerContext* context, const ::viam::component::arm::v1::IsMovingRequest* request, ::viam::component::arm::v1::IsMovingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArmService::Service::DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArmService::Service::GetKinematics(::grpc::ServerContext* context, const ::viam::common::v1::GetKinematicsRequest* request, ::viam::common::v1::GetKinematicsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ArmService::Service::GetGeometries(::grpc::ServerContext* context, const ::viam::common::v1::GetGeometriesRequest* request, ::viam::common::v1::GetGeometriesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viam
}  // namespace component
}  // namespace arm
}  // namespace v1

