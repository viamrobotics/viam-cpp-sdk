// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/camera/v1/camera.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_2fcamera_2fv1_2fcamera_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_component_2fcamera_2fv1_2fcamera_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include "google/api/httpbody.pb.h"
#include "google/protobuf/struct.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_component_2fcamera_2fv1_2fcamera_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_component_2fcamera_2fv1_2fcamera_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto;
namespace viam {
namespace component {
namespace camera {
namespace v1 {
class DistortionParameters;
struct DistortionParametersDefaultTypeInternal;
extern DistortionParametersDefaultTypeInternal _DistortionParameters_default_instance_;
class GetImageRequest;
struct GetImageRequestDefaultTypeInternal;
extern GetImageRequestDefaultTypeInternal _GetImageRequest_default_instance_;
class GetImageResponse;
struct GetImageResponseDefaultTypeInternal;
extern GetImageResponseDefaultTypeInternal _GetImageResponse_default_instance_;
class GetImagesRequest;
struct GetImagesRequestDefaultTypeInternal;
extern GetImagesRequestDefaultTypeInternal _GetImagesRequest_default_instance_;
class GetImagesResponse;
struct GetImagesResponseDefaultTypeInternal;
extern GetImagesResponseDefaultTypeInternal _GetImagesResponse_default_instance_;
class GetPointCloudRequest;
struct GetPointCloudRequestDefaultTypeInternal;
extern GetPointCloudRequestDefaultTypeInternal _GetPointCloudRequest_default_instance_;
class GetPointCloudResponse;
struct GetPointCloudResponseDefaultTypeInternal;
extern GetPointCloudResponseDefaultTypeInternal _GetPointCloudResponse_default_instance_;
class GetPropertiesRequest;
struct GetPropertiesRequestDefaultTypeInternal;
extern GetPropertiesRequestDefaultTypeInternal _GetPropertiesRequest_default_instance_;
class GetPropertiesResponse;
struct GetPropertiesResponseDefaultTypeInternal;
extern GetPropertiesResponseDefaultTypeInternal _GetPropertiesResponse_default_instance_;
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class IntrinsicParameters;
struct IntrinsicParametersDefaultTypeInternal;
extern IntrinsicParametersDefaultTypeInternal _IntrinsicParameters_default_instance_;
class Property;
struct PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class RenderFrameRequest;
struct RenderFrameRequestDefaultTypeInternal;
extern RenderFrameRequestDefaultTypeInternal _RenderFrameRequest_default_instance_;
class Webcam;
struct WebcamDefaultTypeInternal;
extern WebcamDefaultTypeInternal _Webcam_default_instance_;
class Webcams;
struct WebcamsDefaultTypeInternal;
extern WebcamsDefaultTypeInternal _Webcams_default_instance_;
}  // namespace v1
}  // namespace camera
}  // namespace component
}  // namespace viam
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace viam {
namespace component {
namespace camera {
namespace v1 {
enum Format : int {
  FORMAT_UNSPECIFIED = 0,
  FORMAT_RAW_RGBA = 1,
  FORMAT_RAW_DEPTH = 2,
  FORMAT_JPEG = 3,
  FORMAT_PNG = 4,
  Format_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Format_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Format_IsValid(int value);
extern const uint32_t Format_internal_data_[];
constexpr Format Format_MIN = static_cast<Format>(0);
constexpr Format Format_MAX = static_cast<Format>(4);
constexpr int Format_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
Format_descriptor();
template <typename T>
const std::string& Format_Name(T value) {
  static_assert(std::is_same<T, Format>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Format_Name().");
  return Format_Name(static_cast<Format>(value));
}
template <>
inline const std::string& Format_Name(Format value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Format_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool Format_Parse(absl::string_view name, Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Format>(
      Format_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Property final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.Property) */ {
 public:
  inline Property() : Property(nullptr) {}
  ~Property() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Property(::google::protobuf::internal::ConstantInitialized);

  inline Property(const Property& from)
      : Property(nullptr, from) {}
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Property& default_instance() {
    return *internal_default_instance();
  }
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Property* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Property* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Property& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Property& from) {
    Property::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Property* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.Property";
  }
  protected:
  explicit Property(::google::protobuf::Arena* arena);
  Property(::google::protobuf::Arena* arena, const Property& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFormatFieldNumber = 3,
    kWidthPxFieldNumber = 1,
    kHeightPxFieldNumber = 2,
    kFrameRateFieldNumber = 4,
  };
  // string frame_format = 3 [json_name = "frameFormat"];
  void clear_frame_format() ;
  const std::string& frame_format() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_frame_format(Arg_&& arg, Args_... args);
  std::string* mutable_frame_format();
  PROTOBUF_NODISCARD std::string* release_frame_format();
  void set_allocated_frame_format(std::string* value);

  private:
  const std::string& _internal_frame_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_format(
      const std::string& value);
  std::string* _internal_mutable_frame_format();

  public:
  // int32 width_px = 1 [json_name = "widthPx"];
  void clear_width_px() ;
  ::int32_t width_px() const;
  void set_width_px(::int32_t value);

  private:
  ::int32_t _internal_width_px() const;
  void _internal_set_width_px(::int32_t value);

  public:
  // int32 height_px = 2 [json_name = "heightPx"];
  void clear_height_px() ;
  ::int32_t height_px() const;
  void set_height_px(::int32_t value);

  private:
  ::int32_t _internal_height_px() const;
  void _internal_set_height_px(::int32_t value);

  public:
  // float frame_rate = 4 [json_name = "frameRate"];
  void clear_frame_rate() ;
  float frame_rate() const;
  void set_frame_rate(float value);

  private:
  float _internal_frame_rate() const;
  void _internal_set_frame_rate(float value);

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.Property)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr frame_format_;
    ::int32_t width_px_;
    ::int32_t height_px_;
    float frame_rate_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class IntrinsicParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.IntrinsicParameters) */ {
 public:
  inline IntrinsicParameters() : IntrinsicParameters(nullptr) {}
  ~IntrinsicParameters() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IntrinsicParameters(::google::protobuf::internal::ConstantInitialized);

  inline IntrinsicParameters(const IntrinsicParameters& from)
      : IntrinsicParameters(nullptr, from) {}
  IntrinsicParameters(IntrinsicParameters&& from) noexcept
    : IntrinsicParameters() {
    *this = ::std::move(from);
  }

  inline IntrinsicParameters& operator=(const IntrinsicParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntrinsicParameters& operator=(IntrinsicParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntrinsicParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntrinsicParameters* internal_default_instance() {
    return reinterpret_cast<const IntrinsicParameters*>(
               &_IntrinsicParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(IntrinsicParameters& a, IntrinsicParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(IntrinsicParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntrinsicParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntrinsicParameters* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntrinsicParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntrinsicParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IntrinsicParameters& from) {
    IntrinsicParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IntrinsicParameters* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.IntrinsicParameters";
  }
  protected:
  explicit IntrinsicParameters(::google::protobuf::Arena* arena);
  IntrinsicParameters(::google::protobuf::Arena* arena, const IntrinsicParameters& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthPxFieldNumber = 1,
    kHeightPxFieldNumber = 2,
    kFocalXPxFieldNumber = 3,
    kFocalYPxFieldNumber = 4,
    kCenterXPxFieldNumber = 5,
    kCenterYPxFieldNumber = 6,
  };
  // uint32 width_px = 1 [json_name = "widthPx"];
  void clear_width_px() ;
  ::uint32_t width_px() const;
  void set_width_px(::uint32_t value);

  private:
  ::uint32_t _internal_width_px() const;
  void _internal_set_width_px(::uint32_t value);

  public:
  // uint32 height_px = 2 [json_name = "heightPx"];
  void clear_height_px() ;
  ::uint32_t height_px() const;
  void set_height_px(::uint32_t value);

  private:
  ::uint32_t _internal_height_px() const;
  void _internal_set_height_px(::uint32_t value);

  public:
  // double focal_x_px = 3 [json_name = "focalXPx"];
  void clear_focal_x_px() ;
  double focal_x_px() const;
  void set_focal_x_px(double value);

  private:
  double _internal_focal_x_px() const;
  void _internal_set_focal_x_px(double value);

  public:
  // double focal_y_px = 4 [json_name = "focalYPx"];
  void clear_focal_y_px() ;
  double focal_y_px() const;
  void set_focal_y_px(double value);

  private:
  double _internal_focal_y_px() const;
  void _internal_set_focal_y_px(double value);

  public:
  // double center_x_px = 5 [json_name = "centerXPx"];
  void clear_center_x_px() ;
  double center_x_px() const;
  void set_center_x_px(double value);

  private:
  double _internal_center_x_px() const;
  void _internal_set_center_x_px(double value);

  public:
  // double center_y_px = 6 [json_name = "centerYPx"];
  void clear_center_y_px() ;
  double center_y_px() const;
  void set_center_y_px(double value);

  private:
  double _internal_center_y_px() const;
  void _internal_set_center_y_px(double value);

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.IntrinsicParameters)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t width_px_;
    ::uint32_t height_px_;
    double focal_x_px_;
    double focal_y_px_;
    double center_x_px_;
    double center_y_px_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class Image final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Image(::google::protobuf::internal::ConstantInitialized);

  inline Image(const Image& from)
      : Image(nullptr, from) {}
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Image* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Image& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Image& from) {
    Image::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Image* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.Image";
  }
  protected:
  explicit Image(::google::protobuf::Arena* arena);
  Image(::google::protobuf::Arena* arena, const Image& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceNameFieldNumber = 1,
    kImageFieldNumber = 3,
    kFormatFieldNumber = 2,
  };
  // string source_name = 1 [json_name = "sourceName"];
  void clear_source_name() ;
  const std::string& source_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source_name(Arg_&& arg, Args_... args);
  std::string* mutable_source_name();
  PROTOBUF_NODISCARD std::string* release_source_name();
  void set_allocated_source_name(std::string* value);

  private:
  const std::string& _internal_source_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_name(
      const std::string& value);
  std::string* _internal_mutable_source_name();

  public:
  // bytes image = 3 [json_name = "image"];
  void clear_image() ;
  const std::string& image() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image(Arg_&& arg, Args_... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* value);

  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(
      const std::string& value);
  std::string* _internal_mutable_image();

  public:
  // .viam.component.camera.v1.Format format = 2 [json_name = "format"];
  void clear_format() ;
  ::viam::component::camera::v1::Format format() const;
  void set_format(::viam::component::camera::v1::Format value);

  private:
  ::viam::component::camera::v1::Format _internal_format() const;
  void _internal_set_format(::viam::component::camera::v1::Format value);

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.Image)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr source_name_;
    ::google::protobuf::internal::ArenaStringPtr image_;
    int format_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class GetPropertiesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetPropertiesRequest) */ {
 public:
  inline GetPropertiesRequest() : GetPropertiesRequest(nullptr) {}
  ~GetPropertiesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPropertiesRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetPropertiesRequest(const GetPropertiesRequest& from)
      : GetPropertiesRequest(nullptr, from) {}
  GetPropertiesRequest(GetPropertiesRequest&& from) noexcept
    : GetPropertiesRequest() {
    *this = ::std::move(from);
  }

  inline GetPropertiesRequest& operator=(const GetPropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertiesRequest& operator=(GetPropertiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetPropertiesRequest*>(
               &_GetPropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetPropertiesRequest& a, GetPropertiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertiesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertiesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertiesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPropertiesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPropertiesRequest& from) {
    GetPropertiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPropertiesRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.GetPropertiesRequest";
  }
  protected:
  explicit GetPropertiesRequest(::google::protobuf::Arena* arena);
  GetPropertiesRequest(::google::protobuf::Arena* arena, const GetPropertiesRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetPropertiesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class GetPointCloudResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetPointCloudResponse) */ {
 public:
  inline GetPointCloudResponse() : GetPointCloudResponse(nullptr) {}
  ~GetPointCloudResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPointCloudResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetPointCloudResponse(const GetPointCloudResponse& from)
      : GetPointCloudResponse(nullptr, from) {}
  GetPointCloudResponse(GetPointCloudResponse&& from) noexcept
    : GetPointCloudResponse() {
    *this = ::std::move(from);
  }

  inline GetPointCloudResponse& operator=(const GetPointCloudResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPointCloudResponse& operator=(GetPointCloudResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPointCloudResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPointCloudResponse* internal_default_instance() {
    return reinterpret_cast<const GetPointCloudResponse*>(
               &_GetPointCloudResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetPointCloudResponse& a, GetPointCloudResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPointCloudResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPointCloudResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPointCloudResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPointCloudResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPointCloudResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPointCloudResponse& from) {
    GetPointCloudResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPointCloudResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.GetPointCloudResponse";
  }
  protected:
  explicit GetPointCloudResponse(::google::protobuf::Arena* arena);
  GetPointCloudResponse(::google::protobuf::Arena* arena, const GetPointCloudResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypeFieldNumber = 1,
    kPointCloudFieldNumber = 2,
  };
  // string mime_type = 1 [json_name = "mimeType"];
  void clear_mime_type() ;
  const std::string& mime_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mime_type(Arg_&& arg, Args_... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* value);

  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(
      const std::string& value);
  std::string* _internal_mutable_mime_type();

  public:
  // bytes point_cloud = 2 [json_name = "pointCloud"];
  void clear_point_cloud() ;
  const std::string& point_cloud() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_point_cloud(Arg_&& arg, Args_... args);
  std::string* mutable_point_cloud();
  PROTOBUF_NODISCARD std::string* release_point_cloud();
  void set_allocated_point_cloud(std::string* value);

  private:
  const std::string& _internal_point_cloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_cloud(
      const std::string& value);
  std::string* _internal_mutable_point_cloud();

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetPointCloudResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      64, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr mime_type_;
    ::google::protobuf::internal::ArenaStringPtr point_cloud_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class GetImagesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetImagesRequest) */ {
 public:
  inline GetImagesRequest() : GetImagesRequest(nullptr) {}
  ~GetImagesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetImagesRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetImagesRequest(const GetImagesRequest& from)
      : GetImagesRequest(nullptr, from) {}
  GetImagesRequest(GetImagesRequest&& from) noexcept
    : GetImagesRequest() {
    *this = ::std::move(from);
  }

  inline GetImagesRequest& operator=(const GetImagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImagesRequest& operator=(GetImagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImagesRequest* internal_default_instance() {
    return reinterpret_cast<const GetImagesRequest*>(
               &_GetImagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetImagesRequest& a, GetImagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImagesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImagesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetImagesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetImagesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetImagesRequest& from) {
    GetImagesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetImagesRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.GetImagesRequest";
  }
  protected:
  explicit GetImagesRequest(::google::protobuf::Arena* arena);
  GetImagesRequest(::google::protobuf::Arena* arena, const GetImagesRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetImagesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class GetImageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetImageResponse) */ {
 public:
  inline GetImageResponse() : GetImageResponse(nullptr) {}
  ~GetImageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetImageResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetImageResponse(const GetImageResponse& from)
      : GetImageResponse(nullptr, from) {}
  GetImageResponse(GetImageResponse&& from) noexcept
    : GetImageResponse() {
    *this = ::std::move(from);
  }

  inline GetImageResponse& operator=(const GetImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageResponse& operator=(GetImageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImageResponse* internal_default_instance() {
    return reinterpret_cast<const GetImageResponse*>(
               &_GetImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetImageResponse& a, GetImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetImageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetImageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetImageResponse& from) {
    GetImageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetImageResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.GetImageResponse";
  }
  protected:
  explicit GetImageResponse(::google::protobuf::Arena* arena);
  GetImageResponse(::google::protobuf::Arena* arena, const GetImageResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypeFieldNumber = 1,
    kImageFieldNumber = 2,
  };
  // string mime_type = 1 [json_name = "mimeType"];
  void clear_mime_type() ;
  const std::string& mime_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mime_type(Arg_&& arg, Args_... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* value);

  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(
      const std::string& value);
  std::string* _internal_mutable_mime_type();

  public:
  // bytes image = 2 [json_name = "image"];
  void clear_image() ;
  const std::string& image() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image(Arg_&& arg, Args_... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* value);

  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(
      const std::string& value);
  std::string* _internal_mutable_image();

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetImageResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr mime_type_;
    ::google::protobuf::internal::ArenaStringPtr image_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class DistortionParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.DistortionParameters) */ {
 public:
  inline DistortionParameters() : DistortionParameters(nullptr) {}
  ~DistortionParameters() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DistortionParameters(::google::protobuf::internal::ConstantInitialized);

  inline DistortionParameters(const DistortionParameters& from)
      : DistortionParameters(nullptr, from) {}
  DistortionParameters(DistortionParameters&& from) noexcept
    : DistortionParameters() {
    *this = ::std::move(from);
  }

  inline DistortionParameters& operator=(const DistortionParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistortionParameters& operator=(DistortionParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistortionParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistortionParameters* internal_default_instance() {
    return reinterpret_cast<const DistortionParameters*>(
               &_DistortionParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DistortionParameters& a, DistortionParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(DistortionParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistortionParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistortionParameters* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistortionParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DistortionParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DistortionParameters& from) {
    DistortionParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DistortionParameters* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.DistortionParameters";
  }
  protected:
  explicit DistortionParameters(::google::protobuf::Arena* arena);
  DistortionParameters(::google::protobuf::Arena* arena, const DistortionParameters& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kModelFieldNumber = 1,
  };
  // repeated double parameters = 2 [json_name = "parameters"];
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;

  public:
  void clear_parameters() ;
  double parameters(int index) const;
  void set_parameters(int index, double value);
  void add_parameters(double value);
  const ::google::protobuf::RepeatedField<double>& parameters() const;
  ::google::protobuf::RepeatedField<double>* mutable_parameters();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_parameters() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_parameters();

  public:
  // string model = 1 [json_name = "model"];
  void clear_model() ;
  const std::string& model() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model(Arg_&& arg, Args_... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* value);

  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(
      const std::string& value);
  std::string* _internal_mutable_model();

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.DistortionParameters)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<double> parameters_;
    ::google::protobuf::internal::ArenaStringPtr model_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class Webcam final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.Webcam) */ {
 public:
  inline Webcam() : Webcam(nullptr) {}
  ~Webcam() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Webcam(::google::protobuf::internal::ConstantInitialized);

  inline Webcam(const Webcam& from)
      : Webcam(nullptr, from) {}
  Webcam(Webcam&& from) noexcept
    : Webcam() {
    *this = ::std::move(from);
  }

  inline Webcam& operator=(const Webcam& from) {
    CopyFrom(from);
    return *this;
  }
  inline Webcam& operator=(Webcam&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Webcam& default_instance() {
    return *internal_default_instance();
  }
  static inline const Webcam* internal_default_instance() {
    return reinterpret_cast<const Webcam*>(
               &_Webcam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Webcam& a, Webcam& b) {
    a.Swap(&b);
  }
  inline void Swap(Webcam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Webcam* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Webcam* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Webcam>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Webcam& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Webcam& from) {
    Webcam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Webcam* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.Webcam";
  }
  protected:
  explicit Webcam(::google::protobuf::Arena* arena);
  Webcam(::google::protobuf::Arena* arena, const Webcam& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kLabelFieldNumber = 1,
    kStatusFieldNumber = 2,
    kNameFieldNumber = 4,
    kIdFieldNumber = 5,
  };
  // repeated .viam.component.camera.v1.Property properties = 3 [json_name = "properties"];
  int properties_size() const;
  private:
  int _internal_properties_size() const;

  public:
  void clear_properties() ;
  ::viam::component::camera::v1::Property* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField< ::viam::component::camera::v1::Property >*
      mutable_properties();
  private:
  const ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Property>& _internal_properties() const;
  ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Property>* _internal_mutable_properties();
  public:
  const ::viam::component::camera::v1::Property& properties(int index) const;
  ::viam::component::camera::v1::Property* add_properties();
  const ::google::protobuf::RepeatedPtrField< ::viam::component::camera::v1::Property >&
      properties() const;
  // string label = 1 [json_name = "label"];
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string status = 2 [json_name = "status"];
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string name = 4 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string id = 5 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.Webcam)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::viam::component::camera::v1::Property > properties_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class RenderFrameRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.RenderFrameRequest) */ {
 public:
  inline RenderFrameRequest() : RenderFrameRequest(nullptr) {}
  ~RenderFrameRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RenderFrameRequest(::google::protobuf::internal::ConstantInitialized);

  inline RenderFrameRequest(const RenderFrameRequest& from)
      : RenderFrameRequest(nullptr, from) {}
  RenderFrameRequest(RenderFrameRequest&& from) noexcept
    : RenderFrameRequest() {
    *this = ::std::move(from);
  }

  inline RenderFrameRequest& operator=(const RenderFrameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderFrameRequest& operator=(RenderFrameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenderFrameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderFrameRequest* internal_default_instance() {
    return reinterpret_cast<const RenderFrameRequest*>(
               &_RenderFrameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RenderFrameRequest& a, RenderFrameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderFrameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderFrameRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenderFrameRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenderFrameRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RenderFrameRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RenderFrameRequest& from) {
    RenderFrameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RenderFrameRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.RenderFrameRequest";
  }
  protected:
  explicit RenderFrameRequest(::google::protobuf::Arena* arena);
  RenderFrameRequest(::google::protobuf::Arena* arena, const RenderFrameRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMimeTypeFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string mime_type = 2 [json_name = "mimeType"];
  void clear_mime_type() ;
  const std::string& mime_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mime_type(Arg_&& arg, Args_... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* value);

  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(
      const std::string& value);
  std::string* _internal_mutable_mime_type();

  public:
  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  void clear_extra() ;
  const ::google::protobuf::Struct& extra() const;
  PROTOBUF_NODISCARD ::google::protobuf::Struct* release_extra();
  ::google::protobuf::Struct* mutable_extra();
  void set_allocated_extra(::google::protobuf::Struct* value);
  void unsafe_arena_set_allocated_extra(::google::protobuf::Struct* value);
  ::google::protobuf::Struct* unsafe_arena_release_extra();

  private:
  const ::google::protobuf::Struct& _internal_extra() const;
  ::google::protobuf::Struct* _internal_mutable_extra();

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.RenderFrameRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      65, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr mime_type_;
    ::google::protobuf::Struct* extra_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class GetPropertiesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetPropertiesResponse) */ {
 public:
  inline GetPropertiesResponse() : GetPropertiesResponse(nullptr) {}
  ~GetPropertiesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPropertiesResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetPropertiesResponse(const GetPropertiesResponse& from)
      : GetPropertiesResponse(nullptr, from) {}
  GetPropertiesResponse(GetPropertiesResponse&& from) noexcept
    : GetPropertiesResponse() {
    *this = ::std::move(from);
  }

  inline GetPropertiesResponse& operator=(const GetPropertiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertiesResponse& operator=(GetPropertiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertiesResponse* internal_default_instance() {
    return reinterpret_cast<const GetPropertiesResponse*>(
               &_GetPropertiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetPropertiesResponse& a, GetPropertiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertiesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertiesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertiesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPropertiesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPropertiesResponse& from) {
    GetPropertiesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPropertiesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.GetPropertiesResponse";
  }
  protected:
  explicit GetPropertiesResponse(::google::protobuf::Arena* arena);
  GetPropertiesResponse(::google::protobuf::Arena* arena, const GetPropertiesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypesFieldNumber = 4,
    kIntrinsicParametersFieldNumber = 2,
    kDistortionParametersFieldNumber = 3,
    kSupportsPcdFieldNumber = 1,
  };
  // repeated string mime_types = 4 [json_name = "mimeTypes"];
  int mime_types_size() const;
  private:
  int _internal_mime_types_size() const;

  public:
  void clear_mime_types() ;
  const std::string& mime_types(int index) const;
  std::string* mutable_mime_types(int index);
  void set_mime_types(int index, const std::string& value);
  void set_mime_types(int index, std::string&& value);
  void set_mime_types(int index, const char* value);
  void set_mime_types(int index, const char* value, std::size_t size);
  void set_mime_types(int index, absl::string_view value);
  std::string* add_mime_types();
  void add_mime_types(const std::string& value);
  void add_mime_types(std::string&& value);
  void add_mime_types(const char* value);
  void add_mime_types(const char* value, std::size_t size);
  void add_mime_types(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& mime_types() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_mime_types();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_mime_types() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_mime_types();

  public:
  // .viam.component.camera.v1.IntrinsicParameters intrinsic_parameters = 2 [json_name = "intrinsicParameters"];
  bool has_intrinsic_parameters() const;
  void clear_intrinsic_parameters() ;
  const ::viam::component::camera::v1::IntrinsicParameters& intrinsic_parameters() const;
  PROTOBUF_NODISCARD ::viam::component::camera::v1::IntrinsicParameters* release_intrinsic_parameters();
  ::viam::component::camera::v1::IntrinsicParameters* mutable_intrinsic_parameters();
  void set_allocated_intrinsic_parameters(::viam::component::camera::v1::IntrinsicParameters* value);
  void unsafe_arena_set_allocated_intrinsic_parameters(::viam::component::camera::v1::IntrinsicParameters* value);
  ::viam::component::camera::v1::IntrinsicParameters* unsafe_arena_release_intrinsic_parameters();

  private:
  const ::viam::component::camera::v1::IntrinsicParameters& _internal_intrinsic_parameters() const;
  ::viam::component::camera::v1::IntrinsicParameters* _internal_mutable_intrinsic_parameters();

  public:
  // .viam.component.camera.v1.DistortionParameters distortion_parameters = 3 [json_name = "distortionParameters"];
  bool has_distortion_parameters() const;
  void clear_distortion_parameters() ;
  const ::viam::component::camera::v1::DistortionParameters& distortion_parameters() const;
  PROTOBUF_NODISCARD ::viam::component::camera::v1::DistortionParameters* release_distortion_parameters();
  ::viam::component::camera::v1::DistortionParameters* mutable_distortion_parameters();
  void set_allocated_distortion_parameters(::viam::component::camera::v1::DistortionParameters* value);
  void unsafe_arena_set_allocated_distortion_parameters(::viam::component::camera::v1::DistortionParameters* value);
  ::viam::component::camera::v1::DistortionParameters* unsafe_arena_release_distortion_parameters();

  private:
  const ::viam::component::camera::v1::DistortionParameters& _internal_distortion_parameters() const;
  ::viam::component::camera::v1::DistortionParameters* _internal_mutable_distortion_parameters();

  public:
  // bool supports_pcd = 1 [json_name = "supportsPcd"];
  void clear_supports_pcd() ;
  bool supports_pcd() const;
  void set_supports_pcd(bool value);

  private:
  bool _internal_supports_pcd() const;
  void _internal_set_supports_pcd(bool value);

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetPropertiesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      65, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> mime_types_;
    ::viam::component::camera::v1::IntrinsicParameters* intrinsic_parameters_;
    ::viam::component::camera::v1::DistortionParameters* distortion_parameters_;
    bool supports_pcd_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class GetPointCloudRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetPointCloudRequest) */ {
 public:
  inline GetPointCloudRequest() : GetPointCloudRequest(nullptr) {}
  ~GetPointCloudRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPointCloudRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetPointCloudRequest(const GetPointCloudRequest& from)
      : GetPointCloudRequest(nullptr, from) {}
  GetPointCloudRequest(GetPointCloudRequest&& from) noexcept
    : GetPointCloudRequest() {
    *this = ::std::move(from);
  }

  inline GetPointCloudRequest& operator=(const GetPointCloudRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPointCloudRequest& operator=(GetPointCloudRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPointCloudRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPointCloudRequest* internal_default_instance() {
    return reinterpret_cast<const GetPointCloudRequest*>(
               &_GetPointCloudRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetPointCloudRequest& a, GetPointCloudRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPointCloudRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPointCloudRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPointCloudRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPointCloudRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPointCloudRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPointCloudRequest& from) {
    GetPointCloudRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPointCloudRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.GetPointCloudRequest";
  }
  protected:
  explicit GetPointCloudRequest(::google::protobuf::Arena* arena);
  GetPointCloudRequest(::google::protobuf::Arena* arena, const GetPointCloudRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMimeTypeFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string mime_type = 2 [json_name = "mimeType"];
  void clear_mime_type() ;
  const std::string& mime_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mime_type(Arg_&& arg, Args_... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* value);

  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(
      const std::string& value);
  std::string* _internal_mutable_mime_type();

  public:
  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  void clear_extra() ;
  const ::google::protobuf::Struct& extra() const;
  PROTOBUF_NODISCARD ::google::protobuf::Struct* release_extra();
  ::google::protobuf::Struct* mutable_extra();
  void set_allocated_extra(::google::protobuf::Struct* value);
  void unsafe_arena_set_allocated_extra(::google::protobuf::Struct* value);
  ::google::protobuf::Struct* unsafe_arena_release_extra();

  private:
  const ::google::protobuf::Struct& _internal_extra() const;
  ::google::protobuf::Struct* _internal_mutable_extra();

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetPointCloudRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      67, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr mime_type_;
    ::google::protobuf::Struct* extra_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class GetImageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetImageRequest) */ {
 public:
  inline GetImageRequest() : GetImageRequest(nullptr) {}
  ~GetImageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetImageRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetImageRequest(const GetImageRequest& from)
      : GetImageRequest(nullptr, from) {}
  GetImageRequest(GetImageRequest&& from) noexcept
    : GetImageRequest() {
    *this = ::std::move(from);
  }

  inline GetImageRequest& operator=(const GetImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageRequest& operator=(GetImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImageRequest* internal_default_instance() {
    return reinterpret_cast<const GetImageRequest*>(
               &_GetImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetImageRequest& a, GetImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetImageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetImageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetImageRequest& from) {
    GetImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetImageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.GetImageRequest";
  }
  protected:
  explicit GetImageRequest(::google::protobuf::Arena* arena);
  GetImageRequest(::google::protobuf::Arena* arena, const GetImageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMimeTypeFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string mime_type = 2 [json_name = "mimeType"];
  void clear_mime_type() ;
  const std::string& mime_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mime_type(Arg_&& arg, Args_... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* value);

  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(
      const std::string& value);
  std::string* _internal_mutable_mime_type();

  public:
  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  void clear_extra() ;
  const ::google::protobuf::Struct& extra() const;
  PROTOBUF_NODISCARD ::google::protobuf::Struct* release_extra();
  ::google::protobuf::Struct* mutable_extra();
  void set_allocated_extra(::google::protobuf::Struct* value);
  void unsafe_arena_set_allocated_extra(::google::protobuf::Struct* value);
  ::google::protobuf::Struct* unsafe_arena_release_extra();

  private:
  const ::google::protobuf::Struct& _internal_extra() const;
  ::google::protobuf::Struct* _internal_mutable_extra();

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetImageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      62, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr mime_type_;
    ::google::protobuf::Struct* extra_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class Webcams final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.Webcams) */ {
 public:
  inline Webcams() : Webcams(nullptr) {}
  ~Webcams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Webcams(::google::protobuf::internal::ConstantInitialized);

  inline Webcams(const Webcams& from)
      : Webcams(nullptr, from) {}
  Webcams(Webcams&& from) noexcept
    : Webcams() {
    *this = ::std::move(from);
  }

  inline Webcams& operator=(const Webcams& from) {
    CopyFrom(from);
    return *this;
  }
  inline Webcams& operator=(Webcams&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Webcams& default_instance() {
    return *internal_default_instance();
  }
  static inline const Webcams* internal_default_instance() {
    return reinterpret_cast<const Webcams*>(
               &_Webcams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Webcams& a, Webcams& b) {
    a.Swap(&b);
  }
  inline void Swap(Webcams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Webcams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Webcams* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Webcams>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Webcams& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Webcams& from) {
    Webcams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Webcams* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.Webcams";
  }
  protected:
  explicit Webcams(::google::protobuf::Arena* arena);
  Webcams(::google::protobuf::Arena* arena, const Webcams& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWebcamsFieldNumber = 1,
  };
  // repeated .viam.component.camera.v1.Webcam webcams = 1 [json_name = "webcams"];
  int webcams_size() const;
  private:
  int _internal_webcams_size() const;

  public:
  void clear_webcams() ;
  ::viam::component::camera::v1::Webcam* mutable_webcams(int index);
  ::google::protobuf::RepeatedPtrField< ::viam::component::camera::v1::Webcam >*
      mutable_webcams();
  private:
  const ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Webcam>& _internal_webcams() const;
  ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Webcam>* _internal_mutable_webcams();
  public:
  const ::viam::component::camera::v1::Webcam& webcams(int index) const;
  ::viam::component::camera::v1::Webcam* add_webcams();
  const ::google::protobuf::RepeatedPtrField< ::viam::component::camera::v1::Webcam >&
      webcams() const;
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.Webcams)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::viam::component::camera::v1::Webcam > webcams_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};// -------------------------------------------------------------------

class GetImagesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetImagesResponse) */ {
 public:
  inline GetImagesResponse() : GetImagesResponse(nullptr) {}
  ~GetImagesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetImagesResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetImagesResponse(const GetImagesResponse& from)
      : GetImagesResponse(nullptr, from) {}
  GetImagesResponse(GetImagesResponse&& from) noexcept
    : GetImagesResponse() {
    *this = ::std::move(from);
  }

  inline GetImagesResponse& operator=(const GetImagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImagesResponse& operator=(GetImagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImagesResponse* internal_default_instance() {
    return reinterpret_cast<const GetImagesResponse*>(
               &_GetImagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetImagesResponse& a, GetImagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImagesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImagesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetImagesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetImagesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetImagesResponse& from) {
    GetImagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetImagesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.component.camera.v1.GetImagesResponse";
  }
  protected:
  explicit GetImagesResponse(::google::protobuf::Arena* arena);
  GetImagesResponse(::google::protobuf::Arena* arena, const GetImagesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagesFieldNumber = 1,
    kResponseMetadataFieldNumber = 84260,
  };
  // repeated .viam.component.camera.v1.Image images = 1 [json_name = "images"];
  int images_size() const;
  private:
  int _internal_images_size() const;

  public:
  void clear_images() ;
  ::viam::component::camera::v1::Image* mutable_images(int index);
  ::google::protobuf::RepeatedPtrField< ::viam::component::camera::v1::Image >*
      mutable_images();
  private:
  const ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Image>& _internal_images() const;
  ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Image>* _internal_mutable_images();
  public:
  const ::viam::component::camera::v1::Image& images(int index) const;
  ::viam::component::camera::v1::Image* add_images();
  const ::google::protobuf::RepeatedPtrField< ::viam::component::camera::v1::Image >&
      images() const;
  // .viam.common.v1.ResponseMetadata response_metadata = 84260 [json_name = "responseMetadata"];
  bool has_response_metadata() const;
  void clear_response_metadata() ;
  const ::viam::common::v1::ResponseMetadata& response_metadata() const;
  PROTOBUF_NODISCARD ::viam::common::v1::ResponseMetadata* release_response_metadata();
  ::viam::common::v1::ResponseMetadata* mutable_response_metadata();
  void set_allocated_response_metadata(::viam::common::v1::ResponseMetadata* value);
  void unsafe_arena_set_allocated_response_metadata(::viam::common::v1::ResponseMetadata* value);
  ::viam::common::v1::ResponseMetadata* unsafe_arena_release_response_metadata();

  private:
  const ::viam::common::v1::ResponseMetadata& _internal_response_metadata() const;
  ::viam::common::v1::ResponseMetadata* _internal_mutable_response_metadata();

  public:
  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetImagesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::viam::component::camera::v1::Image > images_;
    ::viam::common::v1::ResponseMetadata* response_metadata_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetImageRequest

// string name = 1 [json_name = "name"];
inline void GetImageRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetImageRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetImageRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetImageRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetImageRequest.name)
}
inline std::string* GetImageRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetImageRequest.name)
  return _s;
}
inline const std::string& GetImageRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetImageRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetImageRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetImageRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetImageRequest.name)
  return _impl_.name_.Release();
}
inline void GetImageRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetImageRequest.name)
}

// string mime_type = 2 [json_name = "mimeType"];
inline void GetImageRequest::clear_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mime_type_.ClearToEmpty();
}
inline const std::string& GetImageRequest::mime_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetImageRequest.mime_type)
  return _internal_mime_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetImageRequest::set_mime_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mime_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetImageRequest.mime_type)
}
inline std::string* GetImageRequest::mutable_mime_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetImageRequest.mime_type)
  return _s;
}
inline const std::string& GetImageRequest::_internal_mime_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mime_type_.Get();
}
inline void GetImageRequest::_internal_set_mime_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mime_type_.Set(value, GetArena());
}
inline std::string* GetImageRequest::_internal_mutable_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.mime_type_.Mutable( GetArena());
}
inline std::string* GetImageRequest::release_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetImageRequest.mime_type)
  return _impl_.mime_type_.Release();
}
inline void GetImageRequest::set_allocated_mime_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mime_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mime_type_.IsDefault()) {
          _impl_.mime_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetImageRequest.mime_type)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetImageRequest::has_extra() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extra_ != nullptr);
  return value;
}
inline const ::google::protobuf::Struct& GetImageRequest::_internal_extra() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Struct&>(::google::protobuf::_Struct_default_instance_);
}
inline const ::google::protobuf::Struct& GetImageRequest::extra() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetImageRequest.extra)
  return _internal_extra();
}
inline void GetImageRequest::unsafe_arena_set_allocated_extra(::google::protobuf::Struct* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.camera.v1.GetImageRequest.extra)
}
inline ::google::protobuf::Struct* GetImageRequest::release_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* released = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Struct* GetImageRequest::unsafe_arena_release_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetImageRequest.extra)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* GetImageRequest::_internal_mutable_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArena());
    _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(p);
  }
  return _impl_.extra_;
}
inline ::google::protobuf::Struct* GetImageRequest::mutable_extra() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetImageRequest.extra)
  return _msg;
}
inline void GetImageRequest::set_allocated_extra(::google::protobuf::Struct* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extra_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetImageRequest.extra)
}

// -------------------------------------------------------------------

// GetImageResponse

// string mime_type = 1 [json_name = "mimeType"];
inline void GetImageResponse::clear_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mime_type_.ClearToEmpty();
}
inline const std::string& GetImageResponse::mime_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetImageResponse.mime_type)
  return _internal_mime_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetImageResponse::set_mime_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mime_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetImageResponse.mime_type)
}
inline std::string* GetImageResponse::mutable_mime_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetImageResponse.mime_type)
  return _s;
}
inline const std::string& GetImageResponse::_internal_mime_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mime_type_.Get();
}
inline void GetImageResponse::_internal_set_mime_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mime_type_.Set(value, GetArena());
}
inline std::string* GetImageResponse::_internal_mutable_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.mime_type_.Mutable( GetArena());
}
inline std::string* GetImageResponse::release_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetImageResponse.mime_type)
  return _impl_.mime_type_.Release();
}
inline void GetImageResponse::set_allocated_mime_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mime_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mime_type_.IsDefault()) {
          _impl_.mime_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetImageResponse.mime_type)
}

// bytes image = 2 [json_name = "image"];
inline void GetImageResponse::clear_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_.ClearToEmpty();
}
inline const std::string& GetImageResponse::image() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetImageResponse.image)
  return _internal_image();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetImageResponse::set_image(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetImageResponse.image)
}
inline std::string* GetImageResponse::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetImageResponse.image)
  return _s;
}
inline const std::string& GetImageResponse::_internal_image() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_.Get();
}
inline void GetImageResponse::_internal_set_image(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_.Set(value, GetArena());
}
inline std::string* GetImageResponse::_internal_mutable_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.image_.Mutable( GetArena());
}
inline std::string* GetImageResponse::release_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetImageResponse.image)
  return _impl_.image_.Release();
}
inline void GetImageResponse::set_allocated_image(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_.IsDefault()) {
          _impl_.image_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetImageResponse.image)
}

// -------------------------------------------------------------------

// GetImagesRequest

// string name = 1 [json_name = "name"];
inline void GetImagesRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetImagesRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetImagesRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetImagesRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetImagesRequest.name)
}
inline std::string* GetImagesRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetImagesRequest.name)
  return _s;
}
inline const std::string& GetImagesRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetImagesRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetImagesRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetImagesRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetImagesRequest.name)
  return _impl_.name_.Release();
}
inline void GetImagesRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetImagesRequest.name)
}

// -------------------------------------------------------------------

// GetImagesResponse

// repeated .viam.component.camera.v1.Image images = 1 [json_name = "images"];
inline int GetImagesResponse::_internal_images_size() const {
  return _internal_images().size();
}
inline int GetImagesResponse::images_size() const {
  return _internal_images_size();
}
inline void GetImagesResponse::clear_images() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.images_.Clear();
}
inline ::viam::component::camera::v1::Image* GetImagesResponse::mutable_images(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetImagesResponse.images)
  return _internal_mutable_images()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Image>* GetImagesResponse::mutable_images()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.component.camera.v1.GetImagesResponse.images)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_images();
}
inline const ::viam::component::camera::v1::Image& GetImagesResponse::images(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetImagesResponse.images)
  return _internal_images().Get(index);
}
inline ::viam::component::camera::v1::Image* GetImagesResponse::add_images() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::viam::component::camera::v1::Image* _add = _internal_mutable_images()->Add();
  // @@protoc_insertion_point(field_add:viam.component.camera.v1.GetImagesResponse.images)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Image>& GetImagesResponse::images() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.component.camera.v1.GetImagesResponse.images)
  return _internal_images();
}
inline const ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Image>&
GetImagesResponse::_internal_images() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.images_;
}
inline ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Image>*
GetImagesResponse::_internal_mutable_images() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.images_;
}

// .viam.common.v1.ResponseMetadata response_metadata = 84260 [json_name = "responseMetadata"];
inline bool GetImagesResponse::has_response_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.response_metadata_ != nullptr);
  return value;
}
inline const ::viam::common::v1::ResponseMetadata& GetImagesResponse::_internal_response_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::viam::common::v1::ResponseMetadata* p = _impl_.response_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::ResponseMetadata&>(::viam::common::v1::_ResponseMetadata_default_instance_);
}
inline const ::viam::common::v1::ResponseMetadata& GetImagesResponse::response_metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetImagesResponse.response_metadata)
  return _internal_response_metadata();
}
inline void GetImagesResponse::unsafe_arena_set_allocated_response_metadata(::viam::common::v1::ResponseMetadata* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_metadata_);
  }
  _impl_.response_metadata_ = reinterpret_cast<::viam::common::v1::ResponseMetadata*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.camera.v1.GetImagesResponse.response_metadata)
}
inline ::viam::common::v1::ResponseMetadata* GetImagesResponse::release_response_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::common::v1::ResponseMetadata* released = _impl_.response_metadata_;
  _impl_.response_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::viam::common::v1::ResponseMetadata* GetImagesResponse::unsafe_arena_release_response_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetImagesResponse.response_metadata)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::common::v1::ResponseMetadata* temp = _impl_.response_metadata_;
  _impl_.response_metadata_ = nullptr;
  return temp;
}
inline ::viam::common::v1::ResponseMetadata* GetImagesResponse::_internal_mutable_response_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.response_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::ResponseMetadata>(GetArena());
    _impl_.response_metadata_ = reinterpret_cast<::viam::common::v1::ResponseMetadata*>(p);
  }
  return _impl_.response_metadata_;
}
inline ::viam::common::v1::ResponseMetadata* GetImagesResponse::mutable_response_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::viam::common::v1::ResponseMetadata* _msg = _internal_mutable_response_metadata();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetImagesResponse.response_metadata)
  return _msg;
}
inline void GetImagesResponse::set_allocated_response_metadata(::viam::common::v1::ResponseMetadata* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.response_metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.response_metadata_ = reinterpret_cast<::viam::common::v1::ResponseMetadata*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetImagesResponse.response_metadata)
}

// -------------------------------------------------------------------

// Image

// string source_name = 1 [json_name = "sourceName"];
inline void Image::clear_source_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_name_.ClearToEmpty();
}
inline const std::string& Image::source_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Image.source_name)
  return _internal_source_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Image::set_source_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Image.source_name)
}
inline std::string* Image::mutable_source_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source_name();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Image.source_name)
  return _s;
}
inline const std::string& Image::_internal_source_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.source_name_.Get();
}
inline void Image::_internal_set_source_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_name_.Set(value, GetArena());
}
inline std::string* Image::_internal_mutable_source_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.source_name_.Mutable( GetArena());
}
inline std::string* Image::release_source_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.Image.source_name)
  return _impl_.source_name_.Release();
}
inline void Image::set_allocated_source_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_name_.IsDefault()) {
          _impl_.source_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.Image.source_name)
}

// .viam.component.camera.v1.Format format = 2 [json_name = "format"];
inline void Image::clear_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.format_ = 0;
}
inline ::viam::component::camera::v1::Format Image::format() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Image.format)
  return _internal_format();
}
inline void Image::set_format(::viam::component::camera::v1::Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Image.format)
}
inline ::viam::component::camera::v1::Format Image::_internal_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::viam::component::camera::v1::Format>(_impl_.format_);
}
inline void Image::_internal_set_format(::viam::component::camera::v1::Format value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.format_ = value;
}

// bytes image = 3 [json_name = "image"];
inline void Image::clear_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_.ClearToEmpty();
}
inline const std::string& Image::image() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Image.image)
  return _internal_image();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Image::set_image(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Image.image)
}
inline std::string* Image::mutable_image() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Image.image)
  return _s;
}
inline const std::string& Image::_internal_image() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_.Get();
}
inline void Image::_internal_set_image(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_.Set(value, GetArena());
}
inline std::string* Image::_internal_mutable_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.image_.Mutable( GetArena());
}
inline std::string* Image::release_image() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.Image.image)
  return _impl_.image_.Release();
}
inline void Image::set_allocated_image(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_.IsDefault()) {
          _impl_.image_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.Image.image)
}

// -------------------------------------------------------------------

// RenderFrameRequest

// string name = 1 [json_name = "name"];
inline void RenderFrameRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RenderFrameRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.RenderFrameRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RenderFrameRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.RenderFrameRequest.name)
}
inline std::string* RenderFrameRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.RenderFrameRequest.name)
  return _s;
}
inline const std::string& RenderFrameRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void RenderFrameRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* RenderFrameRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* RenderFrameRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.RenderFrameRequest.name)
  return _impl_.name_.Release();
}
inline void RenderFrameRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.RenderFrameRequest.name)
}

// string mime_type = 2 [json_name = "mimeType"];
inline void RenderFrameRequest::clear_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mime_type_.ClearToEmpty();
}
inline const std::string& RenderFrameRequest::mime_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.RenderFrameRequest.mime_type)
  return _internal_mime_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RenderFrameRequest::set_mime_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mime_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.RenderFrameRequest.mime_type)
}
inline std::string* RenderFrameRequest::mutable_mime_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.RenderFrameRequest.mime_type)
  return _s;
}
inline const std::string& RenderFrameRequest::_internal_mime_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mime_type_.Get();
}
inline void RenderFrameRequest::_internal_set_mime_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mime_type_.Set(value, GetArena());
}
inline std::string* RenderFrameRequest::_internal_mutable_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.mime_type_.Mutable( GetArena());
}
inline std::string* RenderFrameRequest::release_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.RenderFrameRequest.mime_type)
  return _impl_.mime_type_.Release();
}
inline void RenderFrameRequest::set_allocated_mime_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mime_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mime_type_.IsDefault()) {
          _impl_.mime_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.RenderFrameRequest.mime_type)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool RenderFrameRequest::has_extra() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extra_ != nullptr);
  return value;
}
inline const ::google::protobuf::Struct& RenderFrameRequest::_internal_extra() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Struct&>(::google::protobuf::_Struct_default_instance_);
}
inline const ::google::protobuf::Struct& RenderFrameRequest::extra() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.RenderFrameRequest.extra)
  return _internal_extra();
}
inline void RenderFrameRequest::unsafe_arena_set_allocated_extra(::google::protobuf::Struct* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.camera.v1.RenderFrameRequest.extra)
}
inline ::google::protobuf::Struct* RenderFrameRequest::release_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* released = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Struct* RenderFrameRequest::unsafe_arena_release_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.RenderFrameRequest.extra)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* RenderFrameRequest::_internal_mutable_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArena());
    _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(p);
  }
  return _impl_.extra_;
}
inline ::google::protobuf::Struct* RenderFrameRequest::mutable_extra() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.RenderFrameRequest.extra)
  return _msg;
}
inline void RenderFrameRequest::set_allocated_extra(::google::protobuf::Struct* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extra_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.RenderFrameRequest.extra)
}

// -------------------------------------------------------------------

// GetPointCloudRequest

// string name = 1 [json_name = "name"];
inline void GetPointCloudRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetPointCloudRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPointCloudRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPointCloudRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPointCloudRequest.name)
}
inline std::string* GetPointCloudRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPointCloudRequest.name)
  return _s;
}
inline const std::string& GetPointCloudRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetPointCloudRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetPointCloudRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetPointCloudRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPointCloudRequest.name)
  return _impl_.name_.Release();
}
inline void GetPointCloudRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPointCloudRequest.name)
}

// string mime_type = 2 [json_name = "mimeType"];
inline void GetPointCloudRequest::clear_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mime_type_.ClearToEmpty();
}
inline const std::string& GetPointCloudRequest::mime_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPointCloudRequest.mime_type)
  return _internal_mime_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPointCloudRequest::set_mime_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mime_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPointCloudRequest.mime_type)
}
inline std::string* GetPointCloudRequest::mutable_mime_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPointCloudRequest.mime_type)
  return _s;
}
inline const std::string& GetPointCloudRequest::_internal_mime_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mime_type_.Get();
}
inline void GetPointCloudRequest::_internal_set_mime_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mime_type_.Set(value, GetArena());
}
inline std::string* GetPointCloudRequest::_internal_mutable_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.mime_type_.Mutable( GetArena());
}
inline std::string* GetPointCloudRequest::release_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPointCloudRequest.mime_type)
  return _impl_.mime_type_.Release();
}
inline void GetPointCloudRequest::set_allocated_mime_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mime_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mime_type_.IsDefault()) {
          _impl_.mime_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPointCloudRequest.mime_type)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetPointCloudRequest::has_extra() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extra_ != nullptr);
  return value;
}
inline const ::google::protobuf::Struct& GetPointCloudRequest::_internal_extra() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Struct&>(::google::protobuf::_Struct_default_instance_);
}
inline const ::google::protobuf::Struct& GetPointCloudRequest::extra() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPointCloudRequest.extra)
  return _internal_extra();
}
inline void GetPointCloudRequest::unsafe_arena_set_allocated_extra(::google::protobuf::Struct* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.camera.v1.GetPointCloudRequest.extra)
}
inline ::google::protobuf::Struct* GetPointCloudRequest::release_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* released = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Struct* GetPointCloudRequest::unsafe_arena_release_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPointCloudRequest.extra)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* GetPointCloudRequest::_internal_mutable_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArena());
    _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(p);
  }
  return _impl_.extra_;
}
inline ::google::protobuf::Struct* GetPointCloudRequest::mutable_extra() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPointCloudRequest.extra)
  return _msg;
}
inline void GetPointCloudRequest::set_allocated_extra(::google::protobuf::Struct* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extra_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPointCloudRequest.extra)
}

// -------------------------------------------------------------------

// GetPointCloudResponse

// string mime_type = 1 [json_name = "mimeType"];
inline void GetPointCloudResponse::clear_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mime_type_.ClearToEmpty();
}
inline const std::string& GetPointCloudResponse::mime_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPointCloudResponse.mime_type)
  return _internal_mime_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPointCloudResponse::set_mime_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mime_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPointCloudResponse.mime_type)
}
inline std::string* GetPointCloudResponse::mutable_mime_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPointCloudResponse.mime_type)
  return _s;
}
inline const std::string& GetPointCloudResponse::_internal_mime_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mime_type_.Get();
}
inline void GetPointCloudResponse::_internal_set_mime_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mime_type_.Set(value, GetArena());
}
inline std::string* GetPointCloudResponse::_internal_mutable_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.mime_type_.Mutable( GetArena());
}
inline std::string* GetPointCloudResponse::release_mime_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPointCloudResponse.mime_type)
  return _impl_.mime_type_.Release();
}
inline void GetPointCloudResponse::set_allocated_mime_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mime_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.mime_type_.IsDefault()) {
          _impl_.mime_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPointCloudResponse.mime_type)
}

// bytes point_cloud = 2 [json_name = "pointCloud"];
inline void GetPointCloudResponse::clear_point_cloud() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.point_cloud_.ClearToEmpty();
}
inline const std::string& GetPointCloudResponse::point_cloud() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPointCloudResponse.point_cloud)
  return _internal_point_cloud();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPointCloudResponse::set_point_cloud(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.point_cloud_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPointCloudResponse.point_cloud)
}
inline std::string* GetPointCloudResponse::mutable_point_cloud() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_point_cloud();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPointCloudResponse.point_cloud)
  return _s;
}
inline const std::string& GetPointCloudResponse::_internal_point_cloud() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.point_cloud_.Get();
}
inline void GetPointCloudResponse::_internal_set_point_cloud(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.point_cloud_.Set(value, GetArena());
}
inline std::string* GetPointCloudResponse::_internal_mutable_point_cloud() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.point_cloud_.Mutable( GetArena());
}
inline std::string* GetPointCloudResponse::release_point_cloud() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPointCloudResponse.point_cloud)
  return _impl_.point_cloud_.Release();
}
inline void GetPointCloudResponse::set_allocated_point_cloud(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.point_cloud_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.point_cloud_.IsDefault()) {
          _impl_.point_cloud_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPointCloudResponse.point_cloud)
}

// -------------------------------------------------------------------

// GetPropertiesRequest

// string name = 1 [json_name = "name"];
inline void GetPropertiesRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetPropertiesRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPropertiesRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPropertiesRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPropertiesRequest.name)
}
inline std::string* GetPropertiesRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPropertiesRequest.name)
  return _s;
}
inline const std::string& GetPropertiesRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetPropertiesRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetPropertiesRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetPropertiesRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPropertiesRequest.name)
  return _impl_.name_.Release();
}
inline void GetPropertiesRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPropertiesRequest.name)
}

// -------------------------------------------------------------------

// GetPropertiesResponse

// bool supports_pcd = 1 [json_name = "supportsPcd"];
inline void GetPropertiesResponse::clear_supports_pcd() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.supports_pcd_ = false;
}
inline bool GetPropertiesResponse::supports_pcd() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPropertiesResponse.supports_pcd)
  return _internal_supports_pcd();
}
inline void GetPropertiesResponse::set_supports_pcd(bool value) {
  _internal_set_supports_pcd(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPropertiesResponse.supports_pcd)
}
inline bool GetPropertiesResponse::_internal_supports_pcd() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.supports_pcd_;
}
inline void GetPropertiesResponse::_internal_set_supports_pcd(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.supports_pcd_ = value;
}

// .viam.component.camera.v1.IntrinsicParameters intrinsic_parameters = 2 [json_name = "intrinsicParameters"];
inline bool GetPropertiesResponse::has_intrinsic_parameters() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.intrinsic_parameters_ != nullptr);
  return value;
}
inline void GetPropertiesResponse::clear_intrinsic_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.intrinsic_parameters_ != nullptr) _impl_.intrinsic_parameters_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::viam::component::camera::v1::IntrinsicParameters& GetPropertiesResponse::_internal_intrinsic_parameters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::viam::component::camera::v1::IntrinsicParameters* p = _impl_.intrinsic_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::component::camera::v1::IntrinsicParameters&>(::viam::component::camera::v1::_IntrinsicParameters_default_instance_);
}
inline const ::viam::component::camera::v1::IntrinsicParameters& GetPropertiesResponse::intrinsic_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPropertiesResponse.intrinsic_parameters)
  return _internal_intrinsic_parameters();
}
inline void GetPropertiesResponse::unsafe_arena_set_allocated_intrinsic_parameters(::viam::component::camera::v1::IntrinsicParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.intrinsic_parameters_);
  }
  _impl_.intrinsic_parameters_ = reinterpret_cast<::viam::component::camera::v1::IntrinsicParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.camera.v1.GetPropertiesResponse.intrinsic_parameters)
}
inline ::viam::component::camera::v1::IntrinsicParameters* GetPropertiesResponse::release_intrinsic_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::component::camera::v1::IntrinsicParameters* released = _impl_.intrinsic_parameters_;
  _impl_.intrinsic_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::viam::component::camera::v1::IntrinsicParameters* GetPropertiesResponse::unsafe_arena_release_intrinsic_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPropertiesResponse.intrinsic_parameters)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::component::camera::v1::IntrinsicParameters* temp = _impl_.intrinsic_parameters_;
  _impl_.intrinsic_parameters_ = nullptr;
  return temp;
}
inline ::viam::component::camera::v1::IntrinsicParameters* GetPropertiesResponse::_internal_mutable_intrinsic_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.intrinsic_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::component::camera::v1::IntrinsicParameters>(GetArena());
    _impl_.intrinsic_parameters_ = reinterpret_cast<::viam::component::camera::v1::IntrinsicParameters*>(p);
  }
  return _impl_.intrinsic_parameters_;
}
inline ::viam::component::camera::v1::IntrinsicParameters* GetPropertiesResponse::mutable_intrinsic_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::viam::component::camera::v1::IntrinsicParameters* _msg = _internal_mutable_intrinsic_parameters();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPropertiesResponse.intrinsic_parameters)
  return _msg;
}
inline void GetPropertiesResponse::set_allocated_intrinsic_parameters(::viam::component::camera::v1::IntrinsicParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::viam::component::camera::v1::IntrinsicParameters*>(_impl_.intrinsic_parameters_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::viam::component::camera::v1::IntrinsicParameters*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.intrinsic_parameters_ = reinterpret_cast<::viam::component::camera::v1::IntrinsicParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPropertiesResponse.intrinsic_parameters)
}

// .viam.component.camera.v1.DistortionParameters distortion_parameters = 3 [json_name = "distortionParameters"];
inline bool GetPropertiesResponse::has_distortion_parameters() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.distortion_parameters_ != nullptr);
  return value;
}
inline void GetPropertiesResponse::clear_distortion_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.distortion_parameters_ != nullptr) _impl_.distortion_parameters_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::viam::component::camera::v1::DistortionParameters& GetPropertiesResponse::_internal_distortion_parameters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::viam::component::camera::v1::DistortionParameters* p = _impl_.distortion_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::component::camera::v1::DistortionParameters&>(::viam::component::camera::v1::_DistortionParameters_default_instance_);
}
inline const ::viam::component::camera::v1::DistortionParameters& GetPropertiesResponse::distortion_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPropertiesResponse.distortion_parameters)
  return _internal_distortion_parameters();
}
inline void GetPropertiesResponse::unsafe_arena_set_allocated_distortion_parameters(::viam::component::camera::v1::DistortionParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.distortion_parameters_);
  }
  _impl_.distortion_parameters_ = reinterpret_cast<::viam::component::camera::v1::DistortionParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.camera.v1.GetPropertiesResponse.distortion_parameters)
}
inline ::viam::component::camera::v1::DistortionParameters* GetPropertiesResponse::release_distortion_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::viam::component::camera::v1::DistortionParameters* released = _impl_.distortion_parameters_;
  _impl_.distortion_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::viam::component::camera::v1::DistortionParameters* GetPropertiesResponse::unsafe_arena_release_distortion_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPropertiesResponse.distortion_parameters)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::viam::component::camera::v1::DistortionParameters* temp = _impl_.distortion_parameters_;
  _impl_.distortion_parameters_ = nullptr;
  return temp;
}
inline ::viam::component::camera::v1::DistortionParameters* GetPropertiesResponse::_internal_mutable_distortion_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.distortion_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::component::camera::v1::DistortionParameters>(GetArena());
    _impl_.distortion_parameters_ = reinterpret_cast<::viam::component::camera::v1::DistortionParameters*>(p);
  }
  return _impl_.distortion_parameters_;
}
inline ::viam::component::camera::v1::DistortionParameters* GetPropertiesResponse::mutable_distortion_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::viam::component::camera::v1::DistortionParameters* _msg = _internal_mutable_distortion_parameters();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPropertiesResponse.distortion_parameters)
  return _msg;
}
inline void GetPropertiesResponse::set_allocated_distortion_parameters(::viam::component::camera::v1::DistortionParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::viam::component::camera::v1::DistortionParameters*>(_impl_.distortion_parameters_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::viam::component::camera::v1::DistortionParameters*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.distortion_parameters_ = reinterpret_cast<::viam::component::camera::v1::DistortionParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPropertiesResponse.distortion_parameters)
}

// repeated string mime_types = 4 [json_name = "mimeTypes"];
inline int GetPropertiesResponse::_internal_mime_types_size() const {
  return _internal_mime_types().size();
}
inline int GetPropertiesResponse::mime_types_size() const {
  return _internal_mime_types_size();
}
inline void GetPropertiesResponse::clear_mime_types() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mime_types_.Clear();
}
inline std::string* GetPropertiesResponse::add_mime_types()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_mime_types()->Add();
  // @@protoc_insertion_point(field_add_mutable:viam.component.camera.v1.GetPropertiesResponse.mime_types)
  return _s;
}
inline const std::string& GetPropertiesResponse::mime_types(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPropertiesResponse.mime_types)
  return _internal_mime_types().Get(index);
}
inline std::string* GetPropertiesResponse::mutable_mime_types(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPropertiesResponse.mime_types)
  return _internal_mutable_mime_types()->Mutable(index);
}
inline void GetPropertiesResponse::set_mime_types(int index, const std::string& value) {
  _internal_mutable_mime_types()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPropertiesResponse.mime_types)
}
inline void GetPropertiesResponse::set_mime_types(int index, std::string&& value) {
  _internal_mutable_mime_types()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPropertiesResponse.mime_types)
}
inline void GetPropertiesResponse::set_mime_types(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_mime_types()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.component.camera.v1.GetPropertiesResponse.mime_types)
}
inline void GetPropertiesResponse::set_mime_types(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_mime_types()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.component.camera.v1.GetPropertiesResponse.mime_types)
}
inline void GetPropertiesResponse::set_mime_types(int index, absl::string_view value) {
  _internal_mutable_mime_types()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:viam.component.camera.v1.GetPropertiesResponse.mime_types)
}
inline void GetPropertiesResponse::add_mime_types(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_mime_types()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.component.camera.v1.GetPropertiesResponse.mime_types)
}
inline void GetPropertiesResponse::add_mime_types(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_mime_types()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.component.camera.v1.GetPropertiesResponse.mime_types)
}
inline void GetPropertiesResponse::add_mime_types(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_mime_types()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.component.camera.v1.GetPropertiesResponse.mime_types)
}
inline void GetPropertiesResponse::add_mime_types(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_mime_types()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.component.camera.v1.GetPropertiesResponse.mime_types)
}
inline void GetPropertiesResponse::add_mime_types(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_mime_types()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:viam.component.camera.v1.GetPropertiesResponse.mime_types)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetPropertiesResponse::mime_types() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.component.camera.v1.GetPropertiesResponse.mime_types)
  return _internal_mime_types();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetPropertiesResponse::mutable_mime_types() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.component.camera.v1.GetPropertiesResponse.mime_types)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_mime_types();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetPropertiesResponse::_internal_mime_types() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mime_types_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetPropertiesResponse::_internal_mutable_mime_types() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.mime_types_;
}

// -------------------------------------------------------------------

// Webcams

// repeated .viam.component.camera.v1.Webcam webcams = 1 [json_name = "webcams"];
inline int Webcams::_internal_webcams_size() const {
  return _internal_webcams().size();
}
inline int Webcams::webcams_size() const {
  return _internal_webcams_size();
}
inline void Webcams::clear_webcams() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.webcams_.Clear();
}
inline ::viam::component::camera::v1::Webcam* Webcams::mutable_webcams(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Webcams.webcams)
  return _internal_mutable_webcams()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Webcam>* Webcams::mutable_webcams()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.component.camera.v1.Webcams.webcams)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_webcams();
}
inline const ::viam::component::camera::v1::Webcam& Webcams::webcams(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Webcams.webcams)
  return _internal_webcams().Get(index);
}
inline ::viam::component::camera::v1::Webcam* Webcams::add_webcams() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::viam::component::camera::v1::Webcam* _add = _internal_mutable_webcams()->Add();
  // @@protoc_insertion_point(field_add:viam.component.camera.v1.Webcams.webcams)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Webcam>& Webcams::webcams() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.component.camera.v1.Webcams.webcams)
  return _internal_webcams();
}
inline const ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Webcam>&
Webcams::_internal_webcams() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.webcams_;
}
inline ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Webcam>*
Webcams::_internal_mutable_webcams() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.webcams_;
}

// -------------------------------------------------------------------

// Webcam

// string label = 1 [json_name = "label"];
inline void Webcam::clear_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& Webcam::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Webcam.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Webcam::set_label(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Webcam.label)
}
inline std::string* Webcam::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Webcam.label)
  return _s;
}
inline const std::string& Webcam::_internal_label() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.label_.Get();
}
inline void Webcam::_internal_set_label(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.label_.Set(value, GetArena());
}
inline std::string* Webcam::_internal_mutable_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* Webcam::release_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.Webcam.label)
  return _impl_.label_.Release();
}
inline void Webcam::set_allocated_label(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.label_.IsDefault()) {
          _impl_.label_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.Webcam.label)
}

// string status = 2 [json_name = "status"];
inline void Webcam::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& Webcam::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Webcam.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Webcam::set_status(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Webcam.status)
}
inline std::string* Webcam::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Webcam.status)
  return _s;
}
inline const std::string& Webcam::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_.Get();
}
inline void Webcam::_internal_set_status(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_.Set(value, GetArena());
}
inline std::string* Webcam::_internal_mutable_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* Webcam::release_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.Webcam.status)
  return _impl_.status_.Release();
}
inline void Webcam::set_allocated_status(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.Webcam.status)
}

// repeated .viam.component.camera.v1.Property properties = 3 [json_name = "properties"];
inline int Webcam::_internal_properties_size() const {
  return _internal_properties().size();
}
inline int Webcam::properties_size() const {
  return _internal_properties_size();
}
inline void Webcam::clear_properties() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.properties_.Clear();
}
inline ::viam::component::camera::v1::Property* Webcam::mutable_properties(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Webcam.properties)
  return _internal_mutable_properties()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Property>* Webcam::mutable_properties()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.component.camera.v1.Webcam.properties)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_properties();
}
inline const ::viam::component::camera::v1::Property& Webcam::properties(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Webcam.properties)
  return _internal_properties().Get(index);
}
inline ::viam::component::camera::v1::Property* Webcam::add_properties() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::viam::component::camera::v1::Property* _add = _internal_mutable_properties()->Add();
  // @@protoc_insertion_point(field_add:viam.component.camera.v1.Webcam.properties)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Property>& Webcam::properties() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.component.camera.v1.Webcam.properties)
  return _internal_properties();
}
inline const ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Property>&
Webcam::_internal_properties() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.properties_;
}
inline ::google::protobuf::RepeatedPtrField<::viam::component::camera::v1::Property>*
Webcam::_internal_mutable_properties() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.properties_;
}

// string name = 4 [json_name = "name"];
inline void Webcam::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Webcam::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Webcam.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Webcam::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Webcam.name)
}
inline std::string* Webcam::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Webcam.name)
  return _s;
}
inline const std::string& Webcam::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Webcam::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Webcam::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Webcam::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.Webcam.name)
  return _impl_.name_.Release();
}
inline void Webcam::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.Webcam.name)
}

// string id = 5 [json_name = "id"];
inline void Webcam::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Webcam::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Webcam.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Webcam::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Webcam.id)
}
inline std::string* Webcam::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Webcam.id)
  return _s;
}
inline const std::string& Webcam::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Webcam::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Webcam::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Webcam::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.Webcam.id)
  return _impl_.id_.Release();
}
inline void Webcam::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.Webcam.id)
}

// -------------------------------------------------------------------

// Property

// int32 width_px = 1 [json_name = "widthPx"];
inline void Property::clear_width_px() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_px_ = 0;
}
inline ::int32_t Property::width_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Property.width_px)
  return _internal_width_px();
}
inline void Property::set_width_px(::int32_t value) {
  _internal_set_width_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Property.width_px)
}
inline ::int32_t Property::_internal_width_px() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_px_;
}
inline void Property::_internal_set_width_px(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_px_ = value;
}

// int32 height_px = 2 [json_name = "heightPx"];
inline void Property::clear_height_px() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_px_ = 0;
}
inline ::int32_t Property::height_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Property.height_px)
  return _internal_height_px();
}
inline void Property::set_height_px(::int32_t value) {
  _internal_set_height_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Property.height_px)
}
inline ::int32_t Property::_internal_height_px() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_px_;
}
inline void Property::_internal_set_height_px(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_px_ = value;
}

// string frame_format = 3 [json_name = "frameFormat"];
inline void Property::clear_frame_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.frame_format_.ClearToEmpty();
}
inline const std::string& Property::frame_format() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Property.frame_format)
  return _internal_frame_format();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Property::set_frame_format(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.frame_format_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Property.frame_format)
}
inline std::string* Property::mutable_frame_format() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_frame_format();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Property.frame_format)
  return _s;
}
inline const std::string& Property::_internal_frame_format() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.frame_format_.Get();
}
inline void Property::_internal_set_frame_format(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.frame_format_.Set(value, GetArena());
}
inline std::string* Property::_internal_mutable_frame_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.frame_format_.Mutable( GetArena());
}
inline std::string* Property::release_frame_format() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.Property.frame_format)
  return _impl_.frame_format_.Release();
}
inline void Property::set_allocated_frame_format(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.frame_format_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.frame_format_.IsDefault()) {
          _impl_.frame_format_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.Property.frame_format)
}

// float frame_rate = 4 [json_name = "frameRate"];
inline void Property::clear_frame_rate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.frame_rate_ = 0;
}
inline float Property::frame_rate() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Property.frame_rate)
  return _internal_frame_rate();
}
inline void Property::set_frame_rate(float value) {
  _internal_set_frame_rate(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Property.frame_rate)
}
inline float Property::_internal_frame_rate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.frame_rate_;
}
inline void Property::_internal_set_frame_rate(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.frame_rate_ = value;
}

// -------------------------------------------------------------------

// IntrinsicParameters

// uint32 width_px = 1 [json_name = "widthPx"];
inline void IntrinsicParameters::clear_width_px() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.width_px_ = 0u;
}
inline ::uint32_t IntrinsicParameters::width_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.IntrinsicParameters.width_px)
  return _internal_width_px();
}
inline void IntrinsicParameters::set_width_px(::uint32_t value) {
  _internal_set_width_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.IntrinsicParameters.width_px)
}
inline ::uint32_t IntrinsicParameters::_internal_width_px() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.width_px_;
}
inline void IntrinsicParameters::_internal_set_width_px(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.width_px_ = value;
}

// uint32 height_px = 2 [json_name = "heightPx"];
inline void IntrinsicParameters::clear_height_px() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_px_ = 0u;
}
inline ::uint32_t IntrinsicParameters::height_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.IntrinsicParameters.height_px)
  return _internal_height_px();
}
inline void IntrinsicParameters::set_height_px(::uint32_t value) {
  _internal_set_height_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.IntrinsicParameters.height_px)
}
inline ::uint32_t IntrinsicParameters::_internal_height_px() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_px_;
}
inline void IntrinsicParameters::_internal_set_height_px(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_px_ = value;
}

// double focal_x_px = 3 [json_name = "focalXPx"];
inline void IntrinsicParameters::clear_focal_x_px() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.focal_x_px_ = 0;
}
inline double IntrinsicParameters::focal_x_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.IntrinsicParameters.focal_x_px)
  return _internal_focal_x_px();
}
inline void IntrinsicParameters::set_focal_x_px(double value) {
  _internal_set_focal_x_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.IntrinsicParameters.focal_x_px)
}
inline double IntrinsicParameters::_internal_focal_x_px() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.focal_x_px_;
}
inline void IntrinsicParameters::_internal_set_focal_x_px(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.focal_x_px_ = value;
}

// double focal_y_px = 4 [json_name = "focalYPx"];
inline void IntrinsicParameters::clear_focal_y_px() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.focal_y_px_ = 0;
}
inline double IntrinsicParameters::focal_y_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.IntrinsicParameters.focal_y_px)
  return _internal_focal_y_px();
}
inline void IntrinsicParameters::set_focal_y_px(double value) {
  _internal_set_focal_y_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.IntrinsicParameters.focal_y_px)
}
inline double IntrinsicParameters::_internal_focal_y_px() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.focal_y_px_;
}
inline void IntrinsicParameters::_internal_set_focal_y_px(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.focal_y_px_ = value;
}

// double center_x_px = 5 [json_name = "centerXPx"];
inline void IntrinsicParameters::clear_center_x_px() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.center_x_px_ = 0;
}
inline double IntrinsicParameters::center_x_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.IntrinsicParameters.center_x_px)
  return _internal_center_x_px();
}
inline void IntrinsicParameters::set_center_x_px(double value) {
  _internal_set_center_x_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.IntrinsicParameters.center_x_px)
}
inline double IntrinsicParameters::_internal_center_x_px() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.center_x_px_;
}
inline void IntrinsicParameters::_internal_set_center_x_px(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.center_x_px_ = value;
}

// double center_y_px = 6 [json_name = "centerYPx"];
inline void IntrinsicParameters::clear_center_y_px() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.center_y_px_ = 0;
}
inline double IntrinsicParameters::center_y_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.IntrinsicParameters.center_y_px)
  return _internal_center_y_px();
}
inline void IntrinsicParameters::set_center_y_px(double value) {
  _internal_set_center_y_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.IntrinsicParameters.center_y_px)
}
inline double IntrinsicParameters::_internal_center_y_px() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.center_y_px_;
}
inline void IntrinsicParameters::_internal_set_center_y_px(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.center_y_px_ = value;
}

// -------------------------------------------------------------------

// DistortionParameters

// string model = 1 [json_name = "model"];
inline void DistortionParameters::clear_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.model_.ClearToEmpty();
}
inline const std::string& DistortionParameters::model() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.DistortionParameters.model)
  return _internal_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DistortionParameters::set_model(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.DistortionParameters.model)
}
inline std::string* DistortionParameters::mutable_model() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.DistortionParameters.model)
  return _s;
}
inline const std::string& DistortionParameters::_internal_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_.Get();
}
inline void DistortionParameters::_internal_set_model(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_.Set(value, GetArena());
}
inline std::string* DistortionParameters::_internal_mutable_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.model_.Mutable( GetArena());
}
inline std::string* DistortionParameters::release_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.DistortionParameters.model)
  return _impl_.model_.Release();
}
inline void DistortionParameters::set_allocated_model(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.model_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_.IsDefault()) {
          _impl_.model_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.DistortionParameters.model)
}

// repeated double parameters = 2 [json_name = "parameters"];
inline int DistortionParameters::_internal_parameters_size() const {
  return _internal_parameters().size();
}
inline int DistortionParameters::parameters_size() const {
  return _internal_parameters_size();
}
inline void DistortionParameters::clear_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.parameters_.Clear();
}
inline double DistortionParameters::parameters(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.DistortionParameters.parameters)
  return _internal_parameters().Get(index);
}
inline void DistortionParameters::set_parameters(int index, double value) {
  _internal_mutable_parameters()->Set(index, value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.DistortionParameters.parameters)
}
inline void DistortionParameters::add_parameters(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_parameters()->Add(value);
  // @@protoc_insertion_point(field_add:viam.component.camera.v1.DistortionParameters.parameters)
}
inline const ::google::protobuf::RepeatedField<double>& DistortionParameters::parameters() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.component.camera.v1.DistortionParameters.parameters)
  return _internal_parameters();
}
inline ::google::protobuf::RepeatedField<double>* DistortionParameters::mutable_parameters()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.component.camera.v1.DistortionParameters.parameters)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_parameters();
}
inline const ::google::protobuf::RepeatedField<double>& DistortionParameters::_internal_parameters()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.parameters_;
}
inline ::google::protobuf::RepeatedField<double>* DistortionParameters::_internal_mutable_parameters() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.parameters_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace camera
}  // namespace component
}  // namespace viam


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::viam::component::camera::v1::Format> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::viam::component::camera::v1::Format>() {
  return ::viam::component::camera::v1::Format_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_component_2fcamera_2fv1_2fcamera_2eproto_2epb_2eh
