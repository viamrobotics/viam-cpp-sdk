// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/movementsensor/v1/movementsensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
namespace viam {
namespace component {
namespace movementsensor {
namespace v1 {
class GetAccuracyRequest;
struct GetAccuracyRequestDefaultTypeInternal;
extern GetAccuracyRequestDefaultTypeInternal _GetAccuracyRequest_default_instance_;
class GetAccuracyResponse;
struct GetAccuracyResponseDefaultTypeInternal;
extern GetAccuracyResponseDefaultTypeInternal _GetAccuracyResponse_default_instance_;
class GetAccuracyResponse_AccuracyEntry_DoNotUse;
struct GetAccuracyResponse_AccuracyEntry_DoNotUseDefaultTypeInternal;
extern GetAccuracyResponse_AccuracyEntry_DoNotUseDefaultTypeInternal _GetAccuracyResponse_AccuracyEntry_DoNotUse_default_instance_;
class GetAngularVelocityRequest;
struct GetAngularVelocityRequestDefaultTypeInternal;
extern GetAngularVelocityRequestDefaultTypeInternal _GetAngularVelocityRequest_default_instance_;
class GetAngularVelocityResponse;
struct GetAngularVelocityResponseDefaultTypeInternal;
extern GetAngularVelocityResponseDefaultTypeInternal _GetAngularVelocityResponse_default_instance_;
class GetCompassHeadingRequest;
struct GetCompassHeadingRequestDefaultTypeInternal;
extern GetCompassHeadingRequestDefaultTypeInternal _GetCompassHeadingRequest_default_instance_;
class GetCompassHeadingResponse;
struct GetCompassHeadingResponseDefaultTypeInternal;
extern GetCompassHeadingResponseDefaultTypeInternal _GetCompassHeadingResponse_default_instance_;
class GetLinearAccelerationRequest;
struct GetLinearAccelerationRequestDefaultTypeInternal;
extern GetLinearAccelerationRequestDefaultTypeInternal _GetLinearAccelerationRequest_default_instance_;
class GetLinearAccelerationResponse;
struct GetLinearAccelerationResponseDefaultTypeInternal;
extern GetLinearAccelerationResponseDefaultTypeInternal _GetLinearAccelerationResponse_default_instance_;
class GetLinearVelocityRequest;
struct GetLinearVelocityRequestDefaultTypeInternal;
extern GetLinearVelocityRequestDefaultTypeInternal _GetLinearVelocityRequest_default_instance_;
class GetLinearVelocityResponse;
struct GetLinearVelocityResponseDefaultTypeInternal;
extern GetLinearVelocityResponseDefaultTypeInternal _GetLinearVelocityResponse_default_instance_;
class GetOrientationRequest;
struct GetOrientationRequestDefaultTypeInternal;
extern GetOrientationRequestDefaultTypeInternal _GetOrientationRequest_default_instance_;
class GetOrientationResponse;
struct GetOrientationResponseDefaultTypeInternal;
extern GetOrientationResponseDefaultTypeInternal _GetOrientationResponse_default_instance_;
class GetPositionRequest;
struct GetPositionRequestDefaultTypeInternal;
extern GetPositionRequestDefaultTypeInternal _GetPositionRequest_default_instance_;
class GetPositionResponse;
struct GetPositionResponseDefaultTypeInternal;
extern GetPositionResponseDefaultTypeInternal _GetPositionResponse_default_instance_;
class GetPropertiesRequest;
struct GetPropertiesRequestDefaultTypeInternal;
extern GetPropertiesRequestDefaultTypeInternal _GetPropertiesRequest_default_instance_;
class GetPropertiesResponse;
struct GetPropertiesResponseDefaultTypeInternal;
extern GetPropertiesResponseDefaultTypeInternal _GetPropertiesResponse_default_instance_;
}  // namespace v1
}  // namespace movementsensor
}  // namespace component
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::component::movementsensor::v1::GetAccuracyRequest* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetAccuracyRequest>(Arena*);
template<> ::viam::component::movementsensor::v1::GetAccuracyResponse* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetAccuracyResponse>(Arena*);
template<> ::viam::component::movementsensor::v1::GetAccuracyResponse_AccuracyEntry_DoNotUse* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetAccuracyResponse_AccuracyEntry_DoNotUse>(Arena*);
template<> ::viam::component::movementsensor::v1::GetAngularVelocityRequest* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetAngularVelocityRequest>(Arena*);
template<> ::viam::component::movementsensor::v1::GetAngularVelocityResponse* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetAngularVelocityResponse>(Arena*);
template<> ::viam::component::movementsensor::v1::GetCompassHeadingRequest* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetCompassHeadingRequest>(Arena*);
template<> ::viam::component::movementsensor::v1::GetCompassHeadingResponse* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetCompassHeadingResponse>(Arena*);
template<> ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetLinearAccelerationRequest>(Arena*);
template<> ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetLinearAccelerationResponse>(Arena*);
template<> ::viam::component::movementsensor::v1::GetLinearVelocityRequest* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetLinearVelocityRequest>(Arena*);
template<> ::viam::component::movementsensor::v1::GetLinearVelocityResponse* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetLinearVelocityResponse>(Arena*);
template<> ::viam::component::movementsensor::v1::GetOrientationRequest* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetOrientationRequest>(Arena*);
template<> ::viam::component::movementsensor::v1::GetOrientationResponse* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetOrientationResponse>(Arena*);
template<> ::viam::component::movementsensor::v1::GetPositionRequest* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetPositionRequest>(Arena*);
template<> ::viam::component::movementsensor::v1::GetPositionResponse* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetPositionResponse>(Arena*);
template<> ::viam::component::movementsensor::v1::GetPropertiesRequest* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetPropertiesRequest>(Arena*);
template<> ::viam::component::movementsensor::v1::GetPropertiesResponse* Arena::CreateMaybeMessage<::viam::component::movementsensor::v1::GetPropertiesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace component {
namespace movementsensor {
namespace v1 {

// ===================================================================

class GetLinearVelocityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetLinearVelocityRequest) */ {
 public:
  inline GetLinearVelocityRequest() : GetLinearVelocityRequest(nullptr) {}
  ~GetLinearVelocityRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLinearVelocityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLinearVelocityRequest(const GetLinearVelocityRequest& from);
  GetLinearVelocityRequest(GetLinearVelocityRequest&& from) noexcept
    : GetLinearVelocityRequest() {
    *this = ::std::move(from);
  }

  inline GetLinearVelocityRequest& operator=(const GetLinearVelocityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLinearVelocityRequest& operator=(GetLinearVelocityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLinearVelocityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLinearVelocityRequest* internal_default_instance() {
    return reinterpret_cast<const GetLinearVelocityRequest*>(
               &_GetLinearVelocityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetLinearVelocityRequest& a, GetLinearVelocityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLinearVelocityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLinearVelocityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLinearVelocityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLinearVelocityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLinearVelocityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLinearVelocityRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLinearVelocityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetLinearVelocityRequest";
  }
  protected:
  explicit GetLinearVelocityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetLinearVelocityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetLinearVelocityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetLinearVelocityResponse) */ {
 public:
  inline GetLinearVelocityResponse() : GetLinearVelocityResponse(nullptr) {}
  ~GetLinearVelocityResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLinearVelocityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLinearVelocityResponse(const GetLinearVelocityResponse& from);
  GetLinearVelocityResponse(GetLinearVelocityResponse&& from) noexcept
    : GetLinearVelocityResponse() {
    *this = ::std::move(from);
  }

  inline GetLinearVelocityResponse& operator=(const GetLinearVelocityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLinearVelocityResponse& operator=(GetLinearVelocityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLinearVelocityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLinearVelocityResponse* internal_default_instance() {
    return reinterpret_cast<const GetLinearVelocityResponse*>(
               &_GetLinearVelocityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetLinearVelocityResponse& a, GetLinearVelocityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLinearVelocityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLinearVelocityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLinearVelocityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLinearVelocityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLinearVelocityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLinearVelocityResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLinearVelocityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetLinearVelocityResponse";
  }
  protected:
  explicit GetLinearVelocityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearVelocityFieldNumber = 1,
  };
  // .viam.common.v1.Vector3 linear_velocity = 1 [json_name = "linearVelocity"];
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  const ::viam::common::v1::Vector3& linear_velocity() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Vector3* release_linear_velocity();
  ::viam::common::v1::Vector3* mutable_linear_velocity();
  void set_allocated_linear_velocity(::viam::common::v1::Vector3* linear_velocity);
  private:
  const ::viam::common::v1::Vector3& _internal_linear_velocity() const;
  ::viam::common::v1::Vector3* _internal_mutable_linear_velocity();
  public:
  void unsafe_arena_set_allocated_linear_velocity(
      ::viam::common::v1::Vector3* linear_velocity);
  ::viam::common::v1::Vector3* unsafe_arena_release_linear_velocity();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetLinearVelocityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::Vector3* linear_velocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetAngularVelocityRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetAngularVelocityRequest) */ {
 public:
  inline GetAngularVelocityRequest() : GetAngularVelocityRequest(nullptr) {}
  ~GetAngularVelocityRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAngularVelocityRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAngularVelocityRequest(const GetAngularVelocityRequest& from);
  GetAngularVelocityRequest(GetAngularVelocityRequest&& from) noexcept
    : GetAngularVelocityRequest() {
    *this = ::std::move(from);
  }

  inline GetAngularVelocityRequest& operator=(const GetAngularVelocityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAngularVelocityRequest& operator=(GetAngularVelocityRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAngularVelocityRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAngularVelocityRequest* internal_default_instance() {
    return reinterpret_cast<const GetAngularVelocityRequest*>(
               &_GetAngularVelocityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetAngularVelocityRequest& a, GetAngularVelocityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAngularVelocityRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAngularVelocityRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAngularVelocityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAngularVelocityRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAngularVelocityRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAngularVelocityRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAngularVelocityRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetAngularVelocityRequest";
  }
  protected:
  explicit GetAngularVelocityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetAngularVelocityRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetAngularVelocityResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetAngularVelocityResponse) */ {
 public:
  inline GetAngularVelocityResponse() : GetAngularVelocityResponse(nullptr) {}
  ~GetAngularVelocityResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAngularVelocityResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAngularVelocityResponse(const GetAngularVelocityResponse& from);
  GetAngularVelocityResponse(GetAngularVelocityResponse&& from) noexcept
    : GetAngularVelocityResponse() {
    *this = ::std::move(from);
  }

  inline GetAngularVelocityResponse& operator=(const GetAngularVelocityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAngularVelocityResponse& operator=(GetAngularVelocityResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAngularVelocityResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAngularVelocityResponse* internal_default_instance() {
    return reinterpret_cast<const GetAngularVelocityResponse*>(
               &_GetAngularVelocityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetAngularVelocityResponse& a, GetAngularVelocityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAngularVelocityResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAngularVelocityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAngularVelocityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAngularVelocityResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAngularVelocityResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAngularVelocityResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAngularVelocityResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetAngularVelocityResponse";
  }
  protected:
  explicit GetAngularVelocityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngularVelocityFieldNumber = 1,
  };
  // .viam.common.v1.Vector3 angular_velocity = 1 [json_name = "angularVelocity"];
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::viam::common::v1::Vector3& angular_velocity() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Vector3* release_angular_velocity();
  ::viam::common::v1::Vector3* mutable_angular_velocity();
  void set_allocated_angular_velocity(::viam::common::v1::Vector3* angular_velocity);
  private:
  const ::viam::common::v1::Vector3& _internal_angular_velocity() const;
  ::viam::common::v1::Vector3* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::viam::common::v1::Vector3* angular_velocity);
  ::viam::common::v1::Vector3* unsafe_arena_release_angular_velocity();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetAngularVelocityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::Vector3* angular_velocity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetCompassHeadingRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetCompassHeadingRequest) */ {
 public:
  inline GetCompassHeadingRequest() : GetCompassHeadingRequest(nullptr) {}
  ~GetCompassHeadingRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCompassHeadingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCompassHeadingRequest(const GetCompassHeadingRequest& from);
  GetCompassHeadingRequest(GetCompassHeadingRequest&& from) noexcept
    : GetCompassHeadingRequest() {
    *this = ::std::move(from);
  }

  inline GetCompassHeadingRequest& operator=(const GetCompassHeadingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCompassHeadingRequest& operator=(GetCompassHeadingRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCompassHeadingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCompassHeadingRequest* internal_default_instance() {
    return reinterpret_cast<const GetCompassHeadingRequest*>(
               &_GetCompassHeadingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetCompassHeadingRequest& a, GetCompassHeadingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCompassHeadingRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCompassHeadingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCompassHeadingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCompassHeadingRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCompassHeadingRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCompassHeadingRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCompassHeadingRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetCompassHeadingRequest";
  }
  protected:
  explicit GetCompassHeadingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetCompassHeadingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetCompassHeadingResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetCompassHeadingResponse) */ {
 public:
  inline GetCompassHeadingResponse() : GetCompassHeadingResponse(nullptr) {}
  ~GetCompassHeadingResponse() override;
  explicit PROTOBUF_CONSTEXPR GetCompassHeadingResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCompassHeadingResponse(const GetCompassHeadingResponse& from);
  GetCompassHeadingResponse(GetCompassHeadingResponse&& from) noexcept
    : GetCompassHeadingResponse() {
    *this = ::std::move(from);
  }

  inline GetCompassHeadingResponse& operator=(const GetCompassHeadingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCompassHeadingResponse& operator=(GetCompassHeadingResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCompassHeadingResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCompassHeadingResponse* internal_default_instance() {
    return reinterpret_cast<const GetCompassHeadingResponse*>(
               &_GetCompassHeadingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetCompassHeadingResponse& a, GetCompassHeadingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCompassHeadingResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCompassHeadingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCompassHeadingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCompassHeadingResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCompassHeadingResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCompassHeadingResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCompassHeadingResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetCompassHeadingResponse";
  }
  protected:
  explicit GetCompassHeadingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // double value = 1 [json_name = "value"];
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetCompassHeadingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetOrientationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetOrientationRequest) */ {
 public:
  inline GetOrientationRequest() : GetOrientationRequest(nullptr) {}
  ~GetOrientationRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOrientationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrientationRequest(const GetOrientationRequest& from);
  GetOrientationRequest(GetOrientationRequest&& from) noexcept
    : GetOrientationRequest() {
    *this = ::std::move(from);
  }

  inline GetOrientationRequest& operator=(const GetOrientationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrientationRequest& operator=(GetOrientationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrientationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrientationRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrientationRequest*>(
               &_GetOrientationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetOrientationRequest& a, GetOrientationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrientationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrientationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrientationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrientationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrientationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOrientationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrientationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetOrientationRequest";
  }
  protected:
  explicit GetOrientationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetOrientationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetOrientationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetOrientationResponse) */ {
 public:
  inline GetOrientationResponse() : GetOrientationResponse(nullptr) {}
  ~GetOrientationResponse() override;
  explicit PROTOBUF_CONSTEXPR GetOrientationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrientationResponse(const GetOrientationResponse& from);
  GetOrientationResponse(GetOrientationResponse&& from) noexcept
    : GetOrientationResponse() {
    *this = ::std::move(from);
  }

  inline GetOrientationResponse& operator=(const GetOrientationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrientationResponse& operator=(GetOrientationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrientationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrientationResponse* internal_default_instance() {
    return reinterpret_cast<const GetOrientationResponse*>(
               &_GetOrientationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetOrientationResponse& a, GetOrientationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrientationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrientationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrientationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrientationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrientationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOrientationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrientationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetOrientationResponse";
  }
  protected:
  explicit GetOrientationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 1,
  };
  // .viam.common.v1.Orientation orientation = 1 [json_name = "orientation"];
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::viam::common::v1::Orientation& orientation() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Orientation* release_orientation();
  ::viam::common::v1::Orientation* mutable_orientation();
  void set_allocated_orientation(::viam::common::v1::Orientation* orientation);
  private:
  const ::viam::common::v1::Orientation& _internal_orientation() const;
  ::viam::common::v1::Orientation* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::viam::common::v1::Orientation* orientation);
  ::viam::common::v1::Orientation* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetOrientationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::Orientation* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetPositionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetPositionRequest) */ {
 public:
  inline GetPositionRequest() : GetPositionRequest(nullptr) {}
  ~GetPositionRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPositionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPositionRequest(const GetPositionRequest& from);
  GetPositionRequest(GetPositionRequest&& from) noexcept
    : GetPositionRequest() {
    *this = ::std::move(from);
  }

  inline GetPositionRequest& operator=(const GetPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPositionRequest& operator=(GetPositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPositionRequest* internal_default_instance() {
    return reinterpret_cast<const GetPositionRequest*>(
               &_GetPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetPositionRequest& a, GetPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPositionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPositionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPositionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPositionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPositionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetPositionRequest";
  }
  protected:
  explicit GetPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetPositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetPositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetPositionResponse) */ {
 public:
  inline GetPositionResponse() : GetPositionResponse(nullptr) {}
  ~GetPositionResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPositionResponse(const GetPositionResponse& from);
  GetPositionResponse(GetPositionResponse&& from) noexcept
    : GetPositionResponse() {
    *this = ::std::move(from);
  }

  inline GetPositionResponse& operator=(const GetPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPositionResponse& operator=(GetPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPositionResponse* internal_default_instance() {
    return reinterpret_cast<const GetPositionResponse*>(
               &_GetPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetPositionResponse& a, GetPositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPositionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPositionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPositionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetPositionResponse";
  }
  protected:
  explicit GetPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinateFieldNumber = 1,
    kAltitudeMFieldNumber = 2,
  };
  // .viam.common.v1.GeoPoint coordinate = 1 [json_name = "coordinate"];
  bool has_coordinate() const;
  private:
  bool _internal_has_coordinate() const;
  public:
  void clear_coordinate();
  const ::viam::common::v1::GeoPoint& coordinate() const;
  PROTOBUF_NODISCARD ::viam::common::v1::GeoPoint* release_coordinate();
  ::viam::common::v1::GeoPoint* mutable_coordinate();
  void set_allocated_coordinate(::viam::common::v1::GeoPoint* coordinate);
  private:
  const ::viam::common::v1::GeoPoint& _internal_coordinate() const;
  ::viam::common::v1::GeoPoint* _internal_mutable_coordinate();
  public:
  void unsafe_arena_set_allocated_coordinate(
      ::viam::common::v1::GeoPoint* coordinate);
  ::viam::common::v1::GeoPoint* unsafe_arena_release_coordinate();

  // float altitude_m = 2 [json_name = "altitudeM"];
  void clear_altitude_m();
  float altitude_m() const;
  void set_altitude_m(float value);
  private:
  float _internal_altitude_m() const;
  void _internal_set_altitude_m(float value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetPositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::GeoPoint* coordinate_;
  float altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetPropertiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetPropertiesRequest) */ {
 public:
  inline GetPropertiesRequest() : GetPropertiesRequest(nullptr) {}
  ~GetPropertiesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPropertiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPropertiesRequest(const GetPropertiesRequest& from);
  GetPropertiesRequest(GetPropertiesRequest&& from) noexcept
    : GetPropertiesRequest() {
    *this = ::std::move(from);
  }

  inline GetPropertiesRequest& operator=(const GetPropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertiesRequest& operator=(GetPropertiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetPropertiesRequest*>(
               &_GetPropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetPropertiesRequest& a, GetPropertiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPropertiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPropertiesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPropertiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetPropertiesRequest";
  }
  protected:
  explicit GetPropertiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetPropertiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetPropertiesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetPropertiesResponse) */ {
 public:
  inline GetPropertiesResponse() : GetPropertiesResponse(nullptr) {}
  ~GetPropertiesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPropertiesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPropertiesResponse(const GetPropertiesResponse& from);
  GetPropertiesResponse(GetPropertiesResponse&& from) noexcept
    : GetPropertiesResponse() {
    *this = ::std::move(from);
  }

  inline GetPropertiesResponse& operator=(const GetPropertiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertiesResponse& operator=(GetPropertiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertiesResponse* internal_default_instance() {
    return reinterpret_cast<const GetPropertiesResponse*>(
               &_GetPropertiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetPropertiesResponse& a, GetPropertiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertiesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPropertiesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPropertiesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPropertiesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetPropertiesResponse";
  }
  protected:
  explicit GetPropertiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearVelocitySupportedFieldNumber = 1,
    kAngularVelocitySupportedFieldNumber = 2,
    kOrientationSupportedFieldNumber = 3,
    kPositionSupportedFieldNumber = 4,
    kCompassHeadingSupportedFieldNumber = 5,
    kLinearAccelerationSupportedFieldNumber = 6,
  };
  // bool linear_velocity_supported = 1 [json_name = "linearVelocitySupported"];
  void clear_linear_velocity_supported();
  bool linear_velocity_supported() const;
  void set_linear_velocity_supported(bool value);
  private:
  bool _internal_linear_velocity_supported() const;
  void _internal_set_linear_velocity_supported(bool value);
  public:

  // bool angular_velocity_supported = 2 [json_name = "angularVelocitySupported"];
  void clear_angular_velocity_supported();
  bool angular_velocity_supported() const;
  void set_angular_velocity_supported(bool value);
  private:
  bool _internal_angular_velocity_supported() const;
  void _internal_set_angular_velocity_supported(bool value);
  public:

  // bool orientation_supported = 3 [json_name = "orientationSupported"];
  void clear_orientation_supported();
  bool orientation_supported() const;
  void set_orientation_supported(bool value);
  private:
  bool _internal_orientation_supported() const;
  void _internal_set_orientation_supported(bool value);
  public:

  // bool position_supported = 4 [json_name = "positionSupported"];
  void clear_position_supported();
  bool position_supported() const;
  void set_position_supported(bool value);
  private:
  bool _internal_position_supported() const;
  void _internal_set_position_supported(bool value);
  public:

  // bool compass_heading_supported = 5 [json_name = "compassHeadingSupported"];
  void clear_compass_heading_supported();
  bool compass_heading_supported() const;
  void set_compass_heading_supported(bool value);
  private:
  bool _internal_compass_heading_supported() const;
  void _internal_set_compass_heading_supported(bool value);
  public:

  // bool linear_acceleration_supported = 6 [json_name = "linearAccelerationSupported"];
  void clear_linear_acceleration_supported();
  bool linear_acceleration_supported() const;
  void set_linear_acceleration_supported(bool value);
  private:
  bool _internal_linear_acceleration_supported() const;
  void _internal_set_linear_acceleration_supported(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetPropertiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool linear_velocity_supported_;
  bool angular_velocity_supported_;
  bool orientation_supported_;
  bool position_supported_;
  bool compass_heading_supported_;
  bool linear_acceleration_supported_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetAccuracyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetAccuracyRequest) */ {
 public:
  inline GetAccuracyRequest() : GetAccuracyRequest(nullptr) {}
  ~GetAccuracyRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAccuracyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAccuracyRequest(const GetAccuracyRequest& from);
  GetAccuracyRequest(GetAccuracyRequest&& from) noexcept
    : GetAccuracyRequest() {
    *this = ::std::move(from);
  }

  inline GetAccuracyRequest& operator=(const GetAccuracyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccuracyRequest& operator=(GetAccuracyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAccuracyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAccuracyRequest* internal_default_instance() {
    return reinterpret_cast<const GetAccuracyRequest*>(
               &_GetAccuracyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetAccuracyRequest& a, GetAccuracyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccuracyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAccuracyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAccuracyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAccuracyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAccuracyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAccuracyRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccuracyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetAccuracyRequest";
  }
  protected:
  explicit GetAccuracyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetAccuracyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetAccuracyResponse_AccuracyEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetAccuracyResponse_AccuracyEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetAccuracyResponse_AccuracyEntry_DoNotUse, 
    std::string, float,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> SuperType;
  GetAccuracyResponse_AccuracyEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GetAccuracyResponse_AccuracyEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GetAccuracyResponse_AccuracyEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetAccuracyResponse_AccuracyEntry_DoNotUse& other);
  static const GetAccuracyResponse_AccuracyEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetAccuracyResponse_AccuracyEntry_DoNotUse*>(&_GetAccuracyResponse_AccuracyEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "viam.component.movementsensor.v1.GetAccuracyResponse.AccuracyEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};

// -------------------------------------------------------------------

class GetAccuracyResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetAccuracyResponse) */ {
 public:
  inline GetAccuracyResponse() : GetAccuracyResponse(nullptr) {}
  ~GetAccuracyResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAccuracyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAccuracyResponse(const GetAccuracyResponse& from);
  GetAccuracyResponse(GetAccuracyResponse&& from) noexcept
    : GetAccuracyResponse() {
    *this = ::std::move(from);
  }

  inline GetAccuracyResponse& operator=(const GetAccuracyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAccuracyResponse& operator=(GetAccuracyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAccuracyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAccuracyResponse* internal_default_instance() {
    return reinterpret_cast<const GetAccuracyResponse*>(
               &_GetAccuracyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetAccuracyResponse& a, GetAccuracyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAccuracyResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAccuracyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAccuracyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAccuracyResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAccuracyResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAccuracyResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAccuracyResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetAccuracyResponse";
  }
  protected:
  explicit GetAccuracyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAccuracyFieldNumber = 1,
  };
  // map<string, float> accuracy = 1 [json_name = "accuracy"];
  int accuracy_size() const;
  private:
  int _internal_accuracy_size() const;
  public:
  void clear_accuracy();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      _internal_accuracy() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      _internal_mutable_accuracy();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
      accuracy() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
      mutable_accuracy();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetAccuracyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetAccuracyResponse_AccuracyEntry_DoNotUse,
      std::string, float,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT> accuracy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetLinearAccelerationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetLinearAccelerationRequest) */ {
 public:
  inline GetLinearAccelerationRequest() : GetLinearAccelerationRequest(nullptr) {}
  ~GetLinearAccelerationRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLinearAccelerationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLinearAccelerationRequest(const GetLinearAccelerationRequest& from);
  GetLinearAccelerationRequest(GetLinearAccelerationRequest&& from) noexcept
    : GetLinearAccelerationRequest() {
    *this = ::std::move(from);
  }

  inline GetLinearAccelerationRequest& operator=(const GetLinearAccelerationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLinearAccelerationRequest& operator=(GetLinearAccelerationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLinearAccelerationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLinearAccelerationRequest* internal_default_instance() {
    return reinterpret_cast<const GetLinearAccelerationRequest*>(
               &_GetLinearAccelerationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetLinearAccelerationRequest& a, GetLinearAccelerationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLinearAccelerationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLinearAccelerationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLinearAccelerationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLinearAccelerationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLinearAccelerationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLinearAccelerationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLinearAccelerationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetLinearAccelerationRequest";
  }
  protected:
  explicit GetLinearAccelerationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetLinearAccelerationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// -------------------------------------------------------------------

class GetLinearAccelerationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.movementsensor.v1.GetLinearAccelerationResponse) */ {
 public:
  inline GetLinearAccelerationResponse() : GetLinearAccelerationResponse(nullptr) {}
  ~GetLinearAccelerationResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLinearAccelerationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLinearAccelerationResponse(const GetLinearAccelerationResponse& from);
  GetLinearAccelerationResponse(GetLinearAccelerationResponse&& from) noexcept
    : GetLinearAccelerationResponse() {
    *this = ::std::move(from);
  }

  inline GetLinearAccelerationResponse& operator=(const GetLinearAccelerationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLinearAccelerationResponse& operator=(GetLinearAccelerationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLinearAccelerationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLinearAccelerationResponse* internal_default_instance() {
    return reinterpret_cast<const GetLinearAccelerationResponse*>(
               &_GetLinearAccelerationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetLinearAccelerationResponse& a, GetLinearAccelerationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLinearAccelerationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLinearAccelerationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLinearAccelerationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLinearAccelerationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLinearAccelerationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLinearAccelerationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLinearAccelerationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.movementsensor.v1.GetLinearAccelerationResponse";
  }
  protected:
  explicit GetLinearAccelerationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearAccelerationFieldNumber = 1,
  };
  // .viam.common.v1.Vector3 linear_acceleration = 1 [json_name = "linearAcceleration"];
  bool has_linear_acceleration() const;
  private:
  bool _internal_has_linear_acceleration() const;
  public:
  void clear_linear_acceleration();
  const ::viam::common::v1::Vector3& linear_acceleration() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Vector3* release_linear_acceleration();
  ::viam::common::v1::Vector3* mutable_linear_acceleration();
  void set_allocated_linear_acceleration(::viam::common::v1::Vector3* linear_acceleration);
  private:
  const ::viam::common::v1::Vector3& _internal_linear_acceleration() const;
  ::viam::common::v1::Vector3* _internal_mutable_linear_acceleration();
  public:
  void unsafe_arena_set_allocated_linear_acceleration(
      ::viam::common::v1::Vector3* linear_acceleration);
  ::viam::common::v1::Vector3* unsafe_arena_release_linear_acceleration();

  // @@protoc_insertion_point(class_scope:viam.component.movementsensor.v1.GetLinearAccelerationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::Vector3* linear_acceleration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetLinearVelocityRequest

// string name = 1 [json_name = "name"];
inline void GetLinearVelocityRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetLinearVelocityRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetLinearVelocityRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLinearVelocityRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetLinearVelocityRequest.name)
}
inline std::string* GetLinearVelocityRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetLinearVelocityRequest.name)
  return _s;
}
inline const std::string& GetLinearVelocityRequest::_internal_name() const {
  return name_.Get();
}
inline void GetLinearVelocityRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLinearVelocityRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLinearVelocityRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetLinearVelocityRequest.name)
  return name_.Release();
}
inline void GetLinearVelocityRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetLinearVelocityRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetLinearVelocityRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetLinearVelocityRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetLinearVelocityRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetLinearVelocityRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetLinearVelocityRequest.extra)
  return _internal_extra();
}
inline void GetLinearVelocityRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetLinearVelocityRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetLinearVelocityRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetLinearVelocityRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetLinearVelocityRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetLinearVelocityRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetLinearVelocityRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetLinearVelocityRequest.extra)
  return _msg;
}
inline void GetLinearVelocityRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetLinearVelocityRequest.extra)
}

// -------------------------------------------------------------------

// GetLinearVelocityResponse

// .viam.common.v1.Vector3 linear_velocity = 1 [json_name = "linearVelocity"];
inline bool GetLinearVelocityResponse::_internal_has_linear_velocity() const {
  return this != internal_default_instance() && linear_velocity_ != nullptr;
}
inline bool GetLinearVelocityResponse::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline const ::viam::common::v1::Vector3& GetLinearVelocityResponse::_internal_linear_velocity() const {
  const ::viam::common::v1::Vector3* p = linear_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Vector3&>(
      ::viam::common::v1::_Vector3_default_instance_);
}
inline const ::viam::common::v1::Vector3& GetLinearVelocityResponse::linear_velocity() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetLinearVelocityResponse.linear_velocity)
  return _internal_linear_velocity();
}
inline void GetLinearVelocityResponse::unsafe_arena_set_allocated_linear_velocity(
    ::viam::common::v1::Vector3* linear_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetLinearVelocityResponse.linear_velocity)
}
inline ::viam::common::v1::Vector3* GetLinearVelocityResponse::release_linear_velocity() {
  
  ::viam::common::v1::Vector3* temp = linear_velocity_;
  linear_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Vector3* GetLinearVelocityResponse::unsafe_arena_release_linear_velocity() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetLinearVelocityResponse.linear_velocity)
  
  ::viam::common::v1::Vector3* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Vector3* GetLinearVelocityResponse::_internal_mutable_linear_velocity() {
  
  if (linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Vector3>(GetArenaForAllocation());
    linear_velocity_ = p;
  }
  return linear_velocity_;
}
inline ::viam::common::v1::Vector3* GetLinearVelocityResponse::mutable_linear_velocity() {
  ::viam::common::v1::Vector3* _msg = _internal_mutable_linear_velocity();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetLinearVelocityResponse.linear_velocity)
  return _msg;
}
inline void GetLinearVelocityResponse::set_allocated_linear_velocity(::viam::common::v1::Vector3* linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  if (linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity));
    if (message_arena != submessage_arena) {
      linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    
  } else {
    
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetLinearVelocityResponse.linear_velocity)
}

// -------------------------------------------------------------------

// GetAngularVelocityRequest

// string name = 1 [json_name = "name"];
inline void GetAngularVelocityRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetAngularVelocityRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetAngularVelocityRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAngularVelocityRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetAngularVelocityRequest.name)
}
inline std::string* GetAngularVelocityRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetAngularVelocityRequest.name)
  return _s;
}
inline const std::string& GetAngularVelocityRequest::_internal_name() const {
  return name_.Get();
}
inline void GetAngularVelocityRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAngularVelocityRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAngularVelocityRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetAngularVelocityRequest.name)
  return name_.Release();
}
inline void GetAngularVelocityRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetAngularVelocityRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetAngularVelocityRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetAngularVelocityRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetAngularVelocityRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetAngularVelocityRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetAngularVelocityRequest.extra)
  return _internal_extra();
}
inline void GetAngularVelocityRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetAngularVelocityRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetAngularVelocityRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetAngularVelocityRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetAngularVelocityRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetAngularVelocityRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetAngularVelocityRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetAngularVelocityRequest.extra)
  return _msg;
}
inline void GetAngularVelocityRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetAngularVelocityRequest.extra)
}

// -------------------------------------------------------------------

// GetAngularVelocityResponse

// .viam.common.v1.Vector3 angular_velocity = 1 [json_name = "angularVelocity"];
inline bool GetAngularVelocityResponse::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != nullptr;
}
inline bool GetAngularVelocityResponse::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline const ::viam::common::v1::Vector3& GetAngularVelocityResponse::_internal_angular_velocity() const {
  const ::viam::common::v1::Vector3* p = angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Vector3&>(
      ::viam::common::v1::_Vector3_default_instance_);
}
inline const ::viam::common::v1::Vector3& GetAngularVelocityResponse::angular_velocity() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetAngularVelocityResponse.angular_velocity)
  return _internal_angular_velocity();
}
inline void GetAngularVelocityResponse::unsafe_arena_set_allocated_angular_velocity(
    ::viam::common::v1::Vector3* angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetAngularVelocityResponse.angular_velocity)
}
inline ::viam::common::v1::Vector3* GetAngularVelocityResponse::release_angular_velocity() {
  
  ::viam::common::v1::Vector3* temp = angular_velocity_;
  angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Vector3* GetAngularVelocityResponse::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetAngularVelocityResponse.angular_velocity)
  
  ::viam::common::v1::Vector3* temp = angular_velocity_;
  angular_velocity_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Vector3* GetAngularVelocityResponse::_internal_mutable_angular_velocity() {
  
  if (angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Vector3>(GetArenaForAllocation());
    angular_velocity_ = p;
  }
  return angular_velocity_;
}
inline ::viam::common::v1::Vector3* GetAngularVelocityResponse::mutable_angular_velocity() {
  ::viam::common::v1::Vector3* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetAngularVelocityResponse.angular_velocity)
  return _msg;
}
inline void GetAngularVelocityResponse::set_allocated_angular_velocity(::viam::common::v1::Vector3* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity_);
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_velocity));
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetAngularVelocityResponse.angular_velocity)
}

// -------------------------------------------------------------------

// GetCompassHeadingRequest

// string name = 1 [json_name = "name"];
inline void GetCompassHeadingRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetCompassHeadingRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetCompassHeadingRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCompassHeadingRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetCompassHeadingRequest.name)
}
inline std::string* GetCompassHeadingRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetCompassHeadingRequest.name)
  return _s;
}
inline const std::string& GetCompassHeadingRequest::_internal_name() const {
  return name_.Get();
}
inline void GetCompassHeadingRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCompassHeadingRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCompassHeadingRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetCompassHeadingRequest.name)
  return name_.Release();
}
inline void GetCompassHeadingRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetCompassHeadingRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetCompassHeadingRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetCompassHeadingRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetCompassHeadingRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetCompassHeadingRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetCompassHeadingRequest.extra)
  return _internal_extra();
}
inline void GetCompassHeadingRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetCompassHeadingRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetCompassHeadingRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetCompassHeadingRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetCompassHeadingRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetCompassHeadingRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetCompassHeadingRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetCompassHeadingRequest.extra)
  return _msg;
}
inline void GetCompassHeadingRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetCompassHeadingRequest.extra)
}

// -------------------------------------------------------------------

// GetCompassHeadingResponse

// double value = 1 [json_name = "value"];
inline void GetCompassHeadingResponse::clear_value() {
  value_ = 0;
}
inline double GetCompassHeadingResponse::_internal_value() const {
  return value_;
}
inline double GetCompassHeadingResponse::value() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetCompassHeadingResponse.value)
  return _internal_value();
}
inline void GetCompassHeadingResponse::_internal_set_value(double value) {
  
  value_ = value;
}
inline void GetCompassHeadingResponse::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetCompassHeadingResponse.value)
}

// -------------------------------------------------------------------

// GetOrientationRequest

// string name = 1 [json_name = "name"];
inline void GetOrientationRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetOrientationRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetOrientationRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrientationRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetOrientationRequest.name)
}
inline std::string* GetOrientationRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetOrientationRequest.name)
  return _s;
}
inline const std::string& GetOrientationRequest::_internal_name() const {
  return name_.Get();
}
inline void GetOrientationRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOrientationRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOrientationRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetOrientationRequest.name)
  return name_.Release();
}
inline void GetOrientationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetOrientationRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetOrientationRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetOrientationRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetOrientationRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetOrientationRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetOrientationRequest.extra)
  return _internal_extra();
}
inline void GetOrientationRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetOrientationRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetOrientationRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetOrientationRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetOrientationRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetOrientationRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetOrientationRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetOrientationRequest.extra)
  return _msg;
}
inline void GetOrientationRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetOrientationRequest.extra)
}

// -------------------------------------------------------------------

// GetOrientationResponse

// .viam.common.v1.Orientation orientation = 1 [json_name = "orientation"];
inline bool GetOrientationResponse::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool GetOrientationResponse::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::viam::common::v1::Orientation& GetOrientationResponse::_internal_orientation() const {
  const ::viam::common::v1::Orientation* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Orientation&>(
      ::viam::common::v1::_Orientation_default_instance_);
}
inline const ::viam::common::v1::Orientation& GetOrientationResponse::orientation() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetOrientationResponse.orientation)
  return _internal_orientation();
}
inline void GetOrientationResponse::unsafe_arena_set_allocated_orientation(
    ::viam::common::v1::Orientation* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetOrientationResponse.orientation)
}
inline ::viam::common::v1::Orientation* GetOrientationResponse::release_orientation() {
  
  ::viam::common::v1::Orientation* temp = orientation_;
  orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Orientation* GetOrientationResponse::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetOrientationResponse.orientation)
  
  ::viam::common::v1::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Orientation* GetOrientationResponse::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Orientation>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::viam::common::v1::Orientation* GetOrientationResponse::mutable_orientation() {
  ::viam::common::v1::Orientation* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetOrientationResponse.orientation)
  return _msg;
}
inline void GetOrientationResponse::set_allocated_orientation(::viam::common::v1::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetOrientationResponse.orientation)
}

// -------------------------------------------------------------------

// GetPositionRequest

// string name = 1 [json_name = "name"];
inline void GetPositionRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetPositionRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetPositionRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPositionRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetPositionRequest.name)
}
inline std::string* GetPositionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetPositionRequest.name)
  return _s;
}
inline const std::string& GetPositionRequest::_internal_name() const {
  return name_.Get();
}
inline void GetPositionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPositionRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPositionRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetPositionRequest.name)
  return name_.Release();
}
inline void GetPositionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetPositionRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetPositionRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetPositionRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetPositionRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetPositionRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetPositionRequest.extra)
  return _internal_extra();
}
inline void GetPositionRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetPositionRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPositionRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPositionRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetPositionRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPositionRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPositionRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetPositionRequest.extra)
  return _msg;
}
inline void GetPositionRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetPositionRequest.extra)
}

// -------------------------------------------------------------------

// GetPositionResponse

// .viam.common.v1.GeoPoint coordinate = 1 [json_name = "coordinate"];
inline bool GetPositionResponse::_internal_has_coordinate() const {
  return this != internal_default_instance() && coordinate_ != nullptr;
}
inline bool GetPositionResponse::has_coordinate() const {
  return _internal_has_coordinate();
}
inline const ::viam::common::v1::GeoPoint& GetPositionResponse::_internal_coordinate() const {
  const ::viam::common::v1::GeoPoint* p = coordinate_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::GeoPoint&>(
      ::viam::common::v1::_GeoPoint_default_instance_);
}
inline const ::viam::common::v1::GeoPoint& GetPositionResponse::coordinate() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetPositionResponse.coordinate)
  return _internal_coordinate();
}
inline void GetPositionResponse::unsafe_arena_set_allocated_coordinate(
    ::viam::common::v1::GeoPoint* coordinate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  coordinate_ = coordinate;
  if (coordinate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetPositionResponse.coordinate)
}
inline ::viam::common::v1::GeoPoint* GetPositionResponse::release_coordinate() {
  
  ::viam::common::v1::GeoPoint* temp = coordinate_;
  coordinate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::GeoPoint* GetPositionResponse::unsafe_arena_release_coordinate() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetPositionResponse.coordinate)
  
  ::viam::common::v1::GeoPoint* temp = coordinate_;
  coordinate_ = nullptr;
  return temp;
}
inline ::viam::common::v1::GeoPoint* GetPositionResponse::_internal_mutable_coordinate() {
  
  if (coordinate_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::GeoPoint>(GetArenaForAllocation());
    coordinate_ = p;
  }
  return coordinate_;
}
inline ::viam::common::v1::GeoPoint* GetPositionResponse::mutable_coordinate() {
  ::viam::common::v1::GeoPoint* _msg = _internal_mutable_coordinate();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetPositionResponse.coordinate)
  return _msg;
}
inline void GetPositionResponse::set_allocated_coordinate(::viam::common::v1::GeoPoint* coordinate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate_);
  }
  if (coordinate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinate));
    if (message_arena != submessage_arena) {
      coordinate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    
  } else {
    
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetPositionResponse.coordinate)
}

// float altitude_m = 2 [json_name = "altitudeM"];
inline void GetPositionResponse::clear_altitude_m() {
  altitude_m_ = 0;
}
inline float GetPositionResponse::_internal_altitude_m() const {
  return altitude_m_;
}
inline float GetPositionResponse::altitude_m() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetPositionResponse.altitude_m)
  return _internal_altitude_m();
}
inline void GetPositionResponse::_internal_set_altitude_m(float value) {
  
  altitude_m_ = value;
}
inline void GetPositionResponse::set_altitude_m(float value) {
  _internal_set_altitude_m(value);
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetPositionResponse.altitude_m)
}

// -------------------------------------------------------------------

// GetPropertiesRequest

// string name = 1 [json_name = "name"];
inline void GetPropertiesRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetPropertiesRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetPropertiesRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPropertiesRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetPropertiesRequest.name)
}
inline std::string* GetPropertiesRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetPropertiesRequest.name)
  return _s;
}
inline const std::string& GetPropertiesRequest::_internal_name() const {
  return name_.Get();
}
inline void GetPropertiesRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPropertiesRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPropertiesRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetPropertiesRequest.name)
  return name_.Release();
}
inline void GetPropertiesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetPropertiesRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetPropertiesRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetPropertiesRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetPropertiesRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetPropertiesRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetPropertiesRequest.extra)
  return _internal_extra();
}
inline void GetPropertiesRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetPropertiesRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPropertiesRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPropertiesRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetPropertiesRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPropertiesRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPropertiesRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetPropertiesRequest.extra)
  return _msg;
}
inline void GetPropertiesRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetPropertiesRequest.extra)
}

// -------------------------------------------------------------------

// GetPropertiesResponse

// bool linear_velocity_supported = 1 [json_name = "linearVelocitySupported"];
inline void GetPropertiesResponse::clear_linear_velocity_supported() {
  linear_velocity_supported_ = false;
}
inline bool GetPropertiesResponse::_internal_linear_velocity_supported() const {
  return linear_velocity_supported_;
}
inline bool GetPropertiesResponse::linear_velocity_supported() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetPropertiesResponse.linear_velocity_supported)
  return _internal_linear_velocity_supported();
}
inline void GetPropertiesResponse::_internal_set_linear_velocity_supported(bool value) {
  
  linear_velocity_supported_ = value;
}
inline void GetPropertiesResponse::set_linear_velocity_supported(bool value) {
  _internal_set_linear_velocity_supported(value);
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetPropertiesResponse.linear_velocity_supported)
}

// bool angular_velocity_supported = 2 [json_name = "angularVelocitySupported"];
inline void GetPropertiesResponse::clear_angular_velocity_supported() {
  angular_velocity_supported_ = false;
}
inline bool GetPropertiesResponse::_internal_angular_velocity_supported() const {
  return angular_velocity_supported_;
}
inline bool GetPropertiesResponse::angular_velocity_supported() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetPropertiesResponse.angular_velocity_supported)
  return _internal_angular_velocity_supported();
}
inline void GetPropertiesResponse::_internal_set_angular_velocity_supported(bool value) {
  
  angular_velocity_supported_ = value;
}
inline void GetPropertiesResponse::set_angular_velocity_supported(bool value) {
  _internal_set_angular_velocity_supported(value);
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetPropertiesResponse.angular_velocity_supported)
}

// bool orientation_supported = 3 [json_name = "orientationSupported"];
inline void GetPropertiesResponse::clear_orientation_supported() {
  orientation_supported_ = false;
}
inline bool GetPropertiesResponse::_internal_orientation_supported() const {
  return orientation_supported_;
}
inline bool GetPropertiesResponse::orientation_supported() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetPropertiesResponse.orientation_supported)
  return _internal_orientation_supported();
}
inline void GetPropertiesResponse::_internal_set_orientation_supported(bool value) {
  
  orientation_supported_ = value;
}
inline void GetPropertiesResponse::set_orientation_supported(bool value) {
  _internal_set_orientation_supported(value);
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetPropertiesResponse.orientation_supported)
}

// bool position_supported = 4 [json_name = "positionSupported"];
inline void GetPropertiesResponse::clear_position_supported() {
  position_supported_ = false;
}
inline bool GetPropertiesResponse::_internal_position_supported() const {
  return position_supported_;
}
inline bool GetPropertiesResponse::position_supported() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetPropertiesResponse.position_supported)
  return _internal_position_supported();
}
inline void GetPropertiesResponse::_internal_set_position_supported(bool value) {
  
  position_supported_ = value;
}
inline void GetPropertiesResponse::set_position_supported(bool value) {
  _internal_set_position_supported(value);
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetPropertiesResponse.position_supported)
}

// bool compass_heading_supported = 5 [json_name = "compassHeadingSupported"];
inline void GetPropertiesResponse::clear_compass_heading_supported() {
  compass_heading_supported_ = false;
}
inline bool GetPropertiesResponse::_internal_compass_heading_supported() const {
  return compass_heading_supported_;
}
inline bool GetPropertiesResponse::compass_heading_supported() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetPropertiesResponse.compass_heading_supported)
  return _internal_compass_heading_supported();
}
inline void GetPropertiesResponse::_internal_set_compass_heading_supported(bool value) {
  
  compass_heading_supported_ = value;
}
inline void GetPropertiesResponse::set_compass_heading_supported(bool value) {
  _internal_set_compass_heading_supported(value);
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetPropertiesResponse.compass_heading_supported)
}

// bool linear_acceleration_supported = 6 [json_name = "linearAccelerationSupported"];
inline void GetPropertiesResponse::clear_linear_acceleration_supported() {
  linear_acceleration_supported_ = false;
}
inline bool GetPropertiesResponse::_internal_linear_acceleration_supported() const {
  return linear_acceleration_supported_;
}
inline bool GetPropertiesResponse::linear_acceleration_supported() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetPropertiesResponse.linear_acceleration_supported)
  return _internal_linear_acceleration_supported();
}
inline void GetPropertiesResponse::_internal_set_linear_acceleration_supported(bool value) {
  
  linear_acceleration_supported_ = value;
}
inline void GetPropertiesResponse::set_linear_acceleration_supported(bool value) {
  _internal_set_linear_acceleration_supported(value);
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetPropertiesResponse.linear_acceleration_supported)
}

// -------------------------------------------------------------------

// GetAccuracyRequest

// string name = 1 [json_name = "name"];
inline void GetAccuracyRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetAccuracyRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetAccuracyRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAccuracyRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetAccuracyRequest.name)
}
inline std::string* GetAccuracyRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetAccuracyRequest.name)
  return _s;
}
inline const std::string& GetAccuracyRequest::_internal_name() const {
  return name_.Get();
}
inline void GetAccuracyRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAccuracyRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAccuracyRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetAccuracyRequest.name)
  return name_.Release();
}
inline void GetAccuracyRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetAccuracyRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetAccuracyRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetAccuracyRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetAccuracyRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetAccuracyRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetAccuracyRequest.extra)
  return _internal_extra();
}
inline void GetAccuracyRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetAccuracyRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetAccuracyRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetAccuracyRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetAccuracyRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetAccuracyRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetAccuracyRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetAccuracyRequest.extra)
  return _msg;
}
inline void GetAccuracyRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetAccuracyRequest.extra)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetAccuracyResponse

// map<string, float> accuracy = 1 [json_name = "accuracy"];
inline int GetAccuracyResponse::_internal_accuracy_size() const {
  return accuracy_.size();
}
inline int GetAccuracyResponse::accuracy_size() const {
  return _internal_accuracy_size();
}
inline void GetAccuracyResponse::clear_accuracy() {
  accuracy_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
GetAccuracyResponse::_internal_accuracy() const {
  return accuracy_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >&
GetAccuracyResponse::accuracy() const {
  // @@protoc_insertion_point(field_map:viam.component.movementsensor.v1.GetAccuracyResponse.accuracy)
  return _internal_accuracy();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
GetAccuracyResponse::_internal_mutable_accuracy() {
  return accuracy_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, float >*
GetAccuracyResponse::mutable_accuracy() {
  // @@protoc_insertion_point(field_mutable_map:viam.component.movementsensor.v1.GetAccuracyResponse.accuracy)
  return _internal_mutable_accuracy();
}

// -------------------------------------------------------------------

// GetLinearAccelerationRequest

// string name = 1 [json_name = "name"];
inline void GetLinearAccelerationRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetLinearAccelerationRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetLinearAccelerationRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLinearAccelerationRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.movementsensor.v1.GetLinearAccelerationRequest.name)
}
inline std::string* GetLinearAccelerationRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetLinearAccelerationRequest.name)
  return _s;
}
inline const std::string& GetLinearAccelerationRequest::_internal_name() const {
  return name_.Get();
}
inline void GetLinearAccelerationRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLinearAccelerationRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLinearAccelerationRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetLinearAccelerationRequest.name)
  return name_.Release();
}
inline void GetLinearAccelerationRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetLinearAccelerationRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetLinearAccelerationRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetLinearAccelerationRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetLinearAccelerationRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetLinearAccelerationRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetLinearAccelerationRequest.extra)
  return _internal_extra();
}
inline void GetLinearAccelerationRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetLinearAccelerationRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetLinearAccelerationRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetLinearAccelerationRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetLinearAccelerationRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetLinearAccelerationRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetLinearAccelerationRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetLinearAccelerationRequest.extra)
  return _msg;
}
inline void GetLinearAccelerationRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetLinearAccelerationRequest.extra)
}

// -------------------------------------------------------------------

// GetLinearAccelerationResponse

// .viam.common.v1.Vector3 linear_acceleration = 1 [json_name = "linearAcceleration"];
inline bool GetLinearAccelerationResponse::_internal_has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != nullptr;
}
inline bool GetLinearAccelerationResponse::has_linear_acceleration() const {
  return _internal_has_linear_acceleration();
}
inline const ::viam::common::v1::Vector3& GetLinearAccelerationResponse::_internal_linear_acceleration() const {
  const ::viam::common::v1::Vector3* p = linear_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Vector3&>(
      ::viam::common::v1::_Vector3_default_instance_);
}
inline const ::viam::common::v1::Vector3& GetLinearAccelerationResponse::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:viam.component.movementsensor.v1.GetLinearAccelerationResponse.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void GetLinearAccelerationResponse::unsafe_arena_set_allocated_linear_acceleration(
    ::viam::common::v1::Vector3* linear_acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.movementsensor.v1.GetLinearAccelerationResponse.linear_acceleration)
}
inline ::viam::common::v1::Vector3* GetLinearAccelerationResponse::release_linear_acceleration() {
  
  ::viam::common::v1::Vector3* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Vector3* GetLinearAccelerationResponse::unsafe_arena_release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:viam.component.movementsensor.v1.GetLinearAccelerationResponse.linear_acceleration)
  
  ::viam::common::v1::Vector3* temp = linear_acceleration_;
  linear_acceleration_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Vector3* GetLinearAccelerationResponse::_internal_mutable_linear_acceleration() {
  
  if (linear_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Vector3>(GetArenaForAllocation());
    linear_acceleration_ = p;
  }
  return linear_acceleration_;
}
inline ::viam::common::v1::Vector3* GetLinearAccelerationResponse::mutable_linear_acceleration() {
  ::viam::common::v1::Vector3* _msg = _internal_mutable_linear_acceleration();
  // @@protoc_insertion_point(field_mutable:viam.component.movementsensor.v1.GetLinearAccelerationResponse.linear_acceleration)
  return _msg;
}
inline void GetLinearAccelerationResponse::set_allocated_linear_acceleration(::viam::common::v1::Vector3* linear_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration_);
  }
  if (linear_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_acceleration));
    if (message_arena != submessage_arena) {
      linear_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  linear_acceleration_ = linear_acceleration;
  // @@protoc_insertion_point(field_set_allocated:viam.component.movementsensor.v1.GetLinearAccelerationResponse.linear_acceleration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace movementsensor
}  // namespace component
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto
