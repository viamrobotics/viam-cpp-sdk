// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service/navigation/v1/navigation.proto

#include "service/navigation/v1/navigation.pb.h"
#include "service/navigation/v1/navigation.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace viam {
namespace service {
namespace navigation {
namespace v1 {

static const char* NavigationService_method_names[] = {
  "/viam.service.navigation.v1.NavigationService/GetMode",
  "/viam.service.navigation.v1.NavigationService/SetMode",
  "/viam.service.navigation.v1.NavigationService/GetLocation",
  "/viam.service.navigation.v1.NavigationService/GetWaypoints",
  "/viam.service.navigation.v1.NavigationService/AddWaypoint",
  "/viam.service.navigation.v1.NavigationService/RemoveWaypoint",
  "/viam.service.navigation.v1.NavigationService/GetObstacles",
  "/viam.service.navigation.v1.NavigationService/GetPaths",
  "/viam.service.navigation.v1.NavigationService/GetProperties",
  "/viam.service.navigation.v1.NavigationService/DoCommand",
};

std::unique_ptr< NavigationService::Stub> NavigationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NavigationService::Stub> stub(new NavigationService::Stub(channel));
  return stub;
}

NavigationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetMode_(NavigationService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMode_(NavigationService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLocation_(NavigationService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWaypoints_(NavigationService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddWaypoint_(NavigationService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveWaypoint_(NavigationService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObstacles_(NavigationService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPaths_(NavigationService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProperties_(NavigationService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoCommand_(NavigationService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NavigationService::Stub::GetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::viam::service::navigation::v1::GetModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetMode_, context, request, response);
}

void NavigationService::Stub::experimental_async::GetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest* request, ::viam::service::navigation::v1::GetModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMode_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::GetMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::GetModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetMode_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::GetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest* request, ::viam::service::navigation::v1::GetModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMode_, context, request, response, reactor);
}

void NavigationService::Stub::experimental_async::GetMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::GetModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetModeResponse>* NavigationService::Stub::AsyncGetModeRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::GetModeResponse>::Create(channel_.get(), cq, rpcmethod_GetMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetModeResponse>* NavigationService::Stub::PrepareAsyncGetModeRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::GetModeResponse>::Create(channel_.get(), cq, rpcmethod_GetMode_, context, request, false);
}

::grpc::Status NavigationService::Stub::SetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::viam::service::navigation::v1::SetModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMode_, context, request, response);
}

void NavigationService::Stub::experimental_async::SetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest* request, ::viam::service::navigation::v1::SetModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMode_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::SetMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::SetModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetMode_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::SetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest* request, ::viam::service::navigation::v1::SetModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMode_, context, request, response, reactor);
}

void NavigationService::Stub::experimental_async::SetMode(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::SetModeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::SetModeResponse>* NavigationService::Stub::AsyncSetModeRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::SetModeResponse>::Create(channel_.get(), cq, rpcmethod_SetMode_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::SetModeResponse>* NavigationService::Stub::PrepareAsyncSetModeRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::SetModeResponse>::Create(channel_.get(), cq, rpcmethod_SetMode_, context, request, false);
}

::grpc::Status NavigationService::Stub::GetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::viam::service::navigation::v1::GetLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLocation_, context, request, response);
}

void NavigationService::Stub::experimental_async::GetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest* request, ::viam::service::navigation::v1::GetLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLocation_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::GetLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::GetLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLocation_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::GetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest* request, ::viam::service::navigation::v1::GetLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLocation_, context, request, response, reactor);
}

void NavigationService::Stub::experimental_async::GetLocation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::GetLocationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetLocationResponse>* NavigationService::Stub::AsyncGetLocationRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::GetLocationResponse>::Create(channel_.get(), cq, rpcmethod_GetLocation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetLocationResponse>* NavigationService::Stub::PrepareAsyncGetLocationRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::GetLocationResponse>::Create(channel_.get(), cq, rpcmethod_GetLocation_, context, request, false);
}

::grpc::Status NavigationService::Stub::GetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::viam::service::navigation::v1::GetWaypointsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWaypoints_, context, request, response);
}

void NavigationService::Stub::experimental_async::GetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest* request, ::viam::service::navigation::v1::GetWaypointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWaypoints_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::GetWaypoints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::GetWaypointsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetWaypoints_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::GetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest* request, ::viam::service::navigation::v1::GetWaypointsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWaypoints_, context, request, response, reactor);
}

void NavigationService::Stub::experimental_async::GetWaypoints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::GetWaypointsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetWaypoints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetWaypointsResponse>* NavigationService::Stub::AsyncGetWaypointsRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::GetWaypointsResponse>::Create(channel_.get(), cq, rpcmethod_GetWaypoints_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetWaypointsResponse>* NavigationService::Stub::PrepareAsyncGetWaypointsRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::GetWaypointsResponse>::Create(channel_.get(), cq, rpcmethod_GetWaypoints_, context, request, false);
}

::grpc::Status NavigationService::Stub::AddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::viam::service::navigation::v1::AddWaypointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddWaypoint_, context, request, response);
}

void NavigationService::Stub::experimental_async::AddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest* request, ::viam::service::navigation::v1::AddWaypointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddWaypoint_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::AddWaypoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::AddWaypointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddWaypoint_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::AddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest* request, ::viam::service::navigation::v1::AddWaypointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddWaypoint_, context, request, response, reactor);
}

void NavigationService::Stub::experimental_async::AddWaypoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::AddWaypointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddWaypoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::AddWaypointResponse>* NavigationService::Stub::AsyncAddWaypointRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::AddWaypointResponse>::Create(channel_.get(), cq, rpcmethod_AddWaypoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::AddWaypointResponse>* NavigationService::Stub::PrepareAsyncAddWaypointRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::AddWaypointResponse>::Create(channel_.get(), cq, rpcmethod_AddWaypoint_, context, request, false);
}

::grpc::Status NavigationService::Stub::RemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::viam::service::navigation::v1::RemoveWaypointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveWaypoint_, context, request, response);
}

void NavigationService::Stub::experimental_async::RemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest* request, ::viam::service::navigation::v1::RemoveWaypointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveWaypoint_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::RemoveWaypoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::RemoveWaypointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveWaypoint_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::RemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest* request, ::viam::service::navigation::v1::RemoveWaypointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveWaypoint_, context, request, response, reactor);
}

void NavigationService::Stub::experimental_async::RemoveWaypoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::RemoveWaypointResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveWaypoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::RemoveWaypointResponse>* NavigationService::Stub::AsyncRemoveWaypointRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::RemoveWaypointResponse>::Create(channel_.get(), cq, rpcmethod_RemoveWaypoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::RemoveWaypointResponse>* NavigationService::Stub::PrepareAsyncRemoveWaypointRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::RemoveWaypointResponse>::Create(channel_.get(), cq, rpcmethod_RemoveWaypoint_, context, request, false);
}

::grpc::Status NavigationService::Stub::GetObstacles(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetObstaclesRequest& request, ::viam::service::navigation::v1::GetObstaclesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetObstacles_, context, request, response);
}

void NavigationService::Stub::experimental_async::GetObstacles(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetObstaclesRequest* request, ::viam::service::navigation::v1::GetObstaclesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObstacles_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::GetObstacles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::GetObstaclesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetObstacles_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::GetObstacles(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetObstaclesRequest* request, ::viam::service::navigation::v1::GetObstaclesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObstacles_, context, request, response, reactor);
}

void NavigationService::Stub::experimental_async::GetObstacles(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::GetObstaclesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetObstacles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetObstaclesResponse>* NavigationService::Stub::AsyncGetObstaclesRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetObstaclesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::GetObstaclesResponse>::Create(channel_.get(), cq, rpcmethod_GetObstacles_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetObstaclesResponse>* NavigationService::Stub::PrepareAsyncGetObstaclesRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetObstaclesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::GetObstaclesResponse>::Create(channel_.get(), cq, rpcmethod_GetObstacles_, context, request, false);
}

::grpc::Status NavigationService::Stub::GetPaths(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetPathsRequest& request, ::viam::service::navigation::v1::GetPathsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPaths_, context, request, response);
}

void NavigationService::Stub::experimental_async::GetPaths(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetPathsRequest* request, ::viam::service::navigation::v1::GetPathsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPaths_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::GetPaths(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::GetPathsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPaths_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::GetPaths(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetPathsRequest* request, ::viam::service::navigation::v1::GetPathsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPaths_, context, request, response, reactor);
}

void NavigationService::Stub::experimental_async::GetPaths(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::GetPathsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPaths_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetPathsResponse>* NavigationService::Stub::AsyncGetPathsRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetPathsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::GetPathsResponse>::Create(channel_.get(), cq, rpcmethod_GetPaths_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetPathsResponse>* NavigationService::Stub::PrepareAsyncGetPathsRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetPathsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::GetPathsResponse>::Create(channel_.get(), cq, rpcmethod_GetPaths_, context, request, false);
}

::grpc::Status NavigationService::Stub::GetProperties(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetPropertiesRequest& request, ::viam::service::navigation::v1::GetPropertiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProperties_, context, request, response);
}

void NavigationService::Stub::experimental_async::GetProperties(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetPropertiesRequest* request, ::viam::service::navigation::v1::GetPropertiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProperties_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::GetProperties(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::GetPropertiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetProperties_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::GetProperties(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetPropertiesRequest* request, ::viam::service::navigation::v1::GetPropertiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProperties_, context, request, response, reactor);
}

void NavigationService::Stub::experimental_async::GetProperties(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::service::navigation::v1::GetPropertiesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetProperties_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetPropertiesResponse>* NavigationService::Stub::AsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::GetPropertiesResponse>::Create(channel_.get(), cq, rpcmethod_GetProperties_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetPropertiesResponse>* NavigationService::Stub::PrepareAsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::service::navigation::v1::GetPropertiesResponse>::Create(channel_.get(), cq, rpcmethod_GetProperties_, context, request, false);
}

::grpc::Status NavigationService::Stub::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoCommand_, context, request, response);
}

void NavigationService::Stub::experimental_async::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::DoCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, std::move(f));
}

void NavigationService::Stub::experimental_async::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, reactor);
}

void NavigationService::Stub::experimental_async::DoCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* NavigationService::Stub::AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::common::v1::DoCommandResponse>::Create(channel_.get(), cq, rpcmethod_DoCommand_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* NavigationService::Stub::PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::common::v1::DoCommandResponse>::Create(channel_.get(), cq, rpcmethod_DoCommand_, context, request, false);
}

NavigationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavigationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavigationService::Service, ::viam::service::navigation::v1::GetModeRequest, ::viam::service::navigation::v1::GetModeResponse>(
          [](NavigationService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::service::navigation::v1::GetModeRequest* req,
             ::viam::service::navigation::v1::GetModeResponse* resp) {
               return service->GetMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavigationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavigationService::Service, ::viam::service::navigation::v1::SetModeRequest, ::viam::service::navigation::v1::SetModeResponse>(
          [](NavigationService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::service::navigation::v1::SetModeRequest* req,
             ::viam::service::navigation::v1::SetModeResponse* resp) {
               return service->SetMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavigationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavigationService::Service, ::viam::service::navigation::v1::GetLocationRequest, ::viam::service::navigation::v1::GetLocationResponse>(
          [](NavigationService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::service::navigation::v1::GetLocationRequest* req,
             ::viam::service::navigation::v1::GetLocationResponse* resp) {
               return service->GetLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavigationService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavigationService::Service, ::viam::service::navigation::v1::GetWaypointsRequest, ::viam::service::navigation::v1::GetWaypointsResponse>(
          [](NavigationService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::service::navigation::v1::GetWaypointsRequest* req,
             ::viam::service::navigation::v1::GetWaypointsResponse* resp) {
               return service->GetWaypoints(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavigationService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavigationService::Service, ::viam::service::navigation::v1::AddWaypointRequest, ::viam::service::navigation::v1::AddWaypointResponse>(
          [](NavigationService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::service::navigation::v1::AddWaypointRequest* req,
             ::viam::service::navigation::v1::AddWaypointResponse* resp) {
               return service->AddWaypoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavigationService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavigationService::Service, ::viam::service::navigation::v1::RemoveWaypointRequest, ::viam::service::navigation::v1::RemoveWaypointResponse>(
          [](NavigationService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::service::navigation::v1::RemoveWaypointRequest* req,
             ::viam::service::navigation::v1::RemoveWaypointResponse* resp) {
               return service->RemoveWaypoint(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavigationService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavigationService::Service, ::viam::service::navigation::v1::GetObstaclesRequest, ::viam::service::navigation::v1::GetObstaclesResponse>(
          [](NavigationService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::service::navigation::v1::GetObstaclesRequest* req,
             ::viam::service::navigation::v1::GetObstaclesResponse* resp) {
               return service->GetObstacles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavigationService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavigationService::Service, ::viam::service::navigation::v1::GetPathsRequest, ::viam::service::navigation::v1::GetPathsResponse>(
          [](NavigationService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::service::navigation::v1::GetPathsRequest* req,
             ::viam::service::navigation::v1::GetPathsResponse* resp) {
               return service->GetPaths(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavigationService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavigationService::Service, ::viam::service::navigation::v1::GetPropertiesRequest, ::viam::service::navigation::v1::GetPropertiesResponse>(
          [](NavigationService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::service::navigation::v1::GetPropertiesRequest* req,
             ::viam::service::navigation::v1::GetPropertiesResponse* resp) {
               return service->GetProperties(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NavigationService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NavigationService::Service, ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
          [](NavigationService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::common::v1::DoCommandRequest* req,
             ::viam::common::v1::DoCommandResponse* resp) {
               return service->DoCommand(ctx, req, resp);
             }, this)));
}

NavigationService::Service::~Service() {
}

::grpc::Status NavigationService::Service::GetMode(::grpc::ServerContext* context, const ::viam::service::navigation::v1::GetModeRequest* request, ::viam::service::navigation::v1::GetModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavigationService::Service::SetMode(::grpc::ServerContext* context, const ::viam::service::navigation::v1::SetModeRequest* request, ::viam::service::navigation::v1::SetModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavigationService::Service::GetLocation(::grpc::ServerContext* context, const ::viam::service::navigation::v1::GetLocationRequest* request, ::viam::service::navigation::v1::GetLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavigationService::Service::GetWaypoints(::grpc::ServerContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest* request, ::viam::service::navigation::v1::GetWaypointsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavigationService::Service::AddWaypoint(::grpc::ServerContext* context, const ::viam::service::navigation::v1::AddWaypointRequest* request, ::viam::service::navigation::v1::AddWaypointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavigationService::Service::RemoveWaypoint(::grpc::ServerContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest* request, ::viam::service::navigation::v1::RemoveWaypointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavigationService::Service::GetObstacles(::grpc::ServerContext* context, const ::viam::service::navigation::v1::GetObstaclesRequest* request, ::viam::service::navigation::v1::GetObstaclesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavigationService::Service::GetPaths(::grpc::ServerContext* context, const ::viam::service::navigation::v1::GetPathsRequest* request, ::viam::service::navigation::v1::GetPathsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavigationService::Service::GetProperties(::grpc::ServerContext* context, const ::viam::service::navigation::v1::GetPropertiesRequest* request, ::viam::service::navigation::v1::GetPropertiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NavigationService::Service::DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viam
}  // namespace service
}  // namespace navigation
}  // namespace v1

