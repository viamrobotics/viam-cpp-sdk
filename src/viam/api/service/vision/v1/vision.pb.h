// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/vision/v1/vision.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2fvision_2fv1_2fvision_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2fvision_2fv1_2fvision_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2fvision_2fv1_2fvision_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2fvision_2fv1_2fvision_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2fvision_2fv1_2fvision_2eproto;
namespace viam {
namespace service {
namespace vision {
namespace v1 {
class Classification;
struct ClassificationDefaultTypeInternal;
extern ClassificationDefaultTypeInternal _Classification_default_instance_;
class Detection;
struct DetectionDefaultTypeInternal;
extern DetectionDefaultTypeInternal _Detection_default_instance_;
class GetClassificationsFromCameraRequest;
struct GetClassificationsFromCameraRequestDefaultTypeInternal;
extern GetClassificationsFromCameraRequestDefaultTypeInternal _GetClassificationsFromCameraRequest_default_instance_;
class GetClassificationsFromCameraResponse;
struct GetClassificationsFromCameraResponseDefaultTypeInternal;
extern GetClassificationsFromCameraResponseDefaultTypeInternal _GetClassificationsFromCameraResponse_default_instance_;
class GetClassificationsRequest;
struct GetClassificationsRequestDefaultTypeInternal;
extern GetClassificationsRequestDefaultTypeInternal _GetClassificationsRequest_default_instance_;
class GetClassificationsResponse;
struct GetClassificationsResponseDefaultTypeInternal;
extern GetClassificationsResponseDefaultTypeInternal _GetClassificationsResponse_default_instance_;
class GetDetectionsFromCameraRequest;
struct GetDetectionsFromCameraRequestDefaultTypeInternal;
extern GetDetectionsFromCameraRequestDefaultTypeInternal _GetDetectionsFromCameraRequest_default_instance_;
class GetDetectionsFromCameraResponse;
struct GetDetectionsFromCameraResponseDefaultTypeInternal;
extern GetDetectionsFromCameraResponseDefaultTypeInternal _GetDetectionsFromCameraResponse_default_instance_;
class GetDetectionsRequest;
struct GetDetectionsRequestDefaultTypeInternal;
extern GetDetectionsRequestDefaultTypeInternal _GetDetectionsRequest_default_instance_;
class GetDetectionsResponse;
struct GetDetectionsResponseDefaultTypeInternal;
extern GetDetectionsResponseDefaultTypeInternal _GetDetectionsResponse_default_instance_;
class GetObjectPointCloudsRequest;
struct GetObjectPointCloudsRequestDefaultTypeInternal;
extern GetObjectPointCloudsRequestDefaultTypeInternal _GetObjectPointCloudsRequest_default_instance_;
class GetObjectPointCloudsResponse;
struct GetObjectPointCloudsResponseDefaultTypeInternal;
extern GetObjectPointCloudsResponseDefaultTypeInternal _GetObjectPointCloudsResponse_default_instance_;
}  // namespace v1
}  // namespace vision
}  // namespace service
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::service::vision::v1::Classification* Arena::CreateMaybeMessage<::viam::service::vision::v1::Classification>(Arena*);
template<> ::viam::service::vision::v1::Detection* Arena::CreateMaybeMessage<::viam::service::vision::v1::Detection>(Arena*);
template<> ::viam::service::vision::v1::GetClassificationsFromCameraRequest* Arena::CreateMaybeMessage<::viam::service::vision::v1::GetClassificationsFromCameraRequest>(Arena*);
template<> ::viam::service::vision::v1::GetClassificationsFromCameraResponse* Arena::CreateMaybeMessage<::viam::service::vision::v1::GetClassificationsFromCameraResponse>(Arena*);
template<> ::viam::service::vision::v1::GetClassificationsRequest* Arena::CreateMaybeMessage<::viam::service::vision::v1::GetClassificationsRequest>(Arena*);
template<> ::viam::service::vision::v1::GetClassificationsResponse* Arena::CreateMaybeMessage<::viam::service::vision::v1::GetClassificationsResponse>(Arena*);
template<> ::viam::service::vision::v1::GetDetectionsFromCameraRequest* Arena::CreateMaybeMessage<::viam::service::vision::v1::GetDetectionsFromCameraRequest>(Arena*);
template<> ::viam::service::vision::v1::GetDetectionsFromCameraResponse* Arena::CreateMaybeMessage<::viam::service::vision::v1::GetDetectionsFromCameraResponse>(Arena*);
template<> ::viam::service::vision::v1::GetDetectionsRequest* Arena::CreateMaybeMessage<::viam::service::vision::v1::GetDetectionsRequest>(Arena*);
template<> ::viam::service::vision::v1::GetDetectionsResponse* Arena::CreateMaybeMessage<::viam::service::vision::v1::GetDetectionsResponse>(Arena*);
template<> ::viam::service::vision::v1::GetObjectPointCloudsRequest* Arena::CreateMaybeMessage<::viam::service::vision::v1::GetObjectPointCloudsRequest>(Arena*);
template<> ::viam::service::vision::v1::GetObjectPointCloudsResponse* Arena::CreateMaybeMessage<::viam::service::vision::v1::GetObjectPointCloudsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace service {
namespace vision {
namespace v1 {

// ===================================================================

class GetDetectionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.vision.v1.GetDetectionsRequest) */ {
 public:
  inline GetDetectionsRequest() : GetDetectionsRequest(nullptr) {}
  ~GetDetectionsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDetectionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDetectionsRequest(const GetDetectionsRequest& from);
  GetDetectionsRequest(GetDetectionsRequest&& from) noexcept
    : GetDetectionsRequest() {
    *this = ::std::move(from);
  }

  inline GetDetectionsRequest& operator=(const GetDetectionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDetectionsRequest& operator=(GetDetectionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDetectionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDetectionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetDetectionsRequest*>(
               &_GetDetectionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetDetectionsRequest& a, GetDetectionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDetectionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDetectionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDetectionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDetectionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDetectionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDetectionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDetectionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.vision.v1.GetDetectionsRequest";
  }
  protected:
  explicit GetDetectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kImageFieldNumber = 2,
    kMimeTypeFieldNumber = 5,
    kExtraFieldNumber = 99,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes image = 2 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string mime_type = 5 [json_name = "mimeType"];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // int64 width = 3 [json_name = "width"];
  void clear_width();
  int64_t width() const;
  void set_width(int64_t value);
  private:
  int64_t _internal_width() const;
  void _internal_set_width(int64_t value);
  public:

  // int64 height = 4 [json_name = "height"];
  void clear_height();
  int64_t height() const;
  void set_height(int64_t value);
  private:
  int64_t _internal_height() const;
  void _internal_set_height(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.service.vision.v1.GetDetectionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  int64_t width_;
  int64_t height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fvision_2fv1_2fvision_2eproto;
};
// -------------------------------------------------------------------

class GetDetectionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.vision.v1.GetDetectionsResponse) */ {
 public:
  inline GetDetectionsResponse() : GetDetectionsResponse(nullptr) {}
  ~GetDetectionsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDetectionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDetectionsResponse(const GetDetectionsResponse& from);
  GetDetectionsResponse(GetDetectionsResponse&& from) noexcept
    : GetDetectionsResponse() {
    *this = ::std::move(from);
  }

  inline GetDetectionsResponse& operator=(const GetDetectionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDetectionsResponse& operator=(GetDetectionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDetectionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDetectionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetDetectionsResponse*>(
               &_GetDetectionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetDetectionsResponse& a, GetDetectionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDetectionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDetectionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDetectionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDetectionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDetectionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDetectionsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDetectionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.vision.v1.GetDetectionsResponse";
  }
  protected:
  explicit GetDetectionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionsFieldNumber = 1,
  };
  // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
  int detections_size() const;
  private:
  int _internal_detections_size() const;
  public:
  void clear_detections();
  ::viam::service::vision::v1::Detection* mutable_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Detection >*
      mutable_detections();
  private:
  const ::viam::service::vision::v1::Detection& _internal_detections(int index) const;
  ::viam::service::vision::v1::Detection* _internal_add_detections();
  public:
  const ::viam::service::vision::v1::Detection& detections(int index) const;
  ::viam::service::vision::v1::Detection* add_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Detection >&
      detections() const;

  // @@protoc_insertion_point(class_scope:viam.service.vision.v1.GetDetectionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Detection > detections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fvision_2fv1_2fvision_2eproto;
};
// -------------------------------------------------------------------

class GetDetectionsFromCameraRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.vision.v1.GetDetectionsFromCameraRequest) */ {
 public:
  inline GetDetectionsFromCameraRequest() : GetDetectionsFromCameraRequest(nullptr) {}
  ~GetDetectionsFromCameraRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDetectionsFromCameraRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDetectionsFromCameraRequest(const GetDetectionsFromCameraRequest& from);
  GetDetectionsFromCameraRequest(GetDetectionsFromCameraRequest&& from) noexcept
    : GetDetectionsFromCameraRequest() {
    *this = ::std::move(from);
  }

  inline GetDetectionsFromCameraRequest& operator=(const GetDetectionsFromCameraRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDetectionsFromCameraRequest& operator=(GetDetectionsFromCameraRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDetectionsFromCameraRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDetectionsFromCameraRequest* internal_default_instance() {
    return reinterpret_cast<const GetDetectionsFromCameraRequest*>(
               &_GetDetectionsFromCameraRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetDetectionsFromCameraRequest& a, GetDetectionsFromCameraRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDetectionsFromCameraRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDetectionsFromCameraRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDetectionsFromCameraRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDetectionsFromCameraRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDetectionsFromCameraRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDetectionsFromCameraRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDetectionsFromCameraRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.vision.v1.GetDetectionsFromCameraRequest";
  }
  protected:
  explicit GetDetectionsFromCameraRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCameraNameFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string camera_name = 2 [json_name = "cameraName"];
  void clear_camera_name();
  const std::string& camera_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera_name();
  PROTOBUF_NODISCARD std::string* release_camera_name();
  void set_allocated_camera_name(std::string* camera_name);
  private:
  const std::string& _internal_camera_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera_name(const std::string& value);
  std::string* _internal_mutable_camera_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.service.vision.v1.GetDetectionsFromCameraRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fvision_2fv1_2fvision_2eproto;
};
// -------------------------------------------------------------------

class GetDetectionsFromCameraResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.vision.v1.GetDetectionsFromCameraResponse) */ {
 public:
  inline GetDetectionsFromCameraResponse() : GetDetectionsFromCameraResponse(nullptr) {}
  ~GetDetectionsFromCameraResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDetectionsFromCameraResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDetectionsFromCameraResponse(const GetDetectionsFromCameraResponse& from);
  GetDetectionsFromCameraResponse(GetDetectionsFromCameraResponse&& from) noexcept
    : GetDetectionsFromCameraResponse() {
    *this = ::std::move(from);
  }

  inline GetDetectionsFromCameraResponse& operator=(const GetDetectionsFromCameraResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDetectionsFromCameraResponse& operator=(GetDetectionsFromCameraResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDetectionsFromCameraResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDetectionsFromCameraResponse* internal_default_instance() {
    return reinterpret_cast<const GetDetectionsFromCameraResponse*>(
               &_GetDetectionsFromCameraResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetDetectionsFromCameraResponse& a, GetDetectionsFromCameraResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDetectionsFromCameraResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDetectionsFromCameraResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDetectionsFromCameraResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDetectionsFromCameraResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDetectionsFromCameraResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetDetectionsFromCameraResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDetectionsFromCameraResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.vision.v1.GetDetectionsFromCameraResponse";
  }
  protected:
  explicit GetDetectionsFromCameraResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionsFieldNumber = 1,
  };
  // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
  int detections_size() const;
  private:
  int _internal_detections_size() const;
  public:
  void clear_detections();
  ::viam::service::vision::v1::Detection* mutable_detections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Detection >*
      mutable_detections();
  private:
  const ::viam::service::vision::v1::Detection& _internal_detections(int index) const;
  ::viam::service::vision::v1::Detection* _internal_add_detections();
  public:
  const ::viam::service::vision::v1::Detection& detections(int index) const;
  ::viam::service::vision::v1::Detection* add_detections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Detection >&
      detections() const;

  // @@protoc_insertion_point(class_scope:viam.service.vision.v1.GetDetectionsFromCameraResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Detection > detections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fvision_2fv1_2fvision_2eproto;
};
// -------------------------------------------------------------------

class Detection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.vision.v1.Detection) */ {
 public:
  inline Detection() : Detection(nullptr) {}
  ~Detection() override;
  explicit PROTOBUF_CONSTEXPR Detection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Detection(const Detection& from);
  Detection(Detection&& from) noexcept
    : Detection() {
    *this = ::std::move(from);
  }

  inline Detection& operator=(const Detection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection& operator=(Detection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Detection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Detection* internal_default_instance() {
    return reinterpret_cast<const Detection*>(
               &_Detection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Detection& a, Detection& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Detection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Detection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Detection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Detection& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.vision.v1.Detection";
  }
  protected:
  explicit Detection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassNameFieldNumber = 6,
    kXMinFieldNumber = 1,
    kYMinFieldNumber = 2,
    kXMaxFieldNumber = 3,
    kYMaxFieldNumber = 4,
    kConfidenceFieldNumber = 5,
  };
  // string class_name = 6 [json_name = "className"];
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // optional int64 x_min = 1 [json_name = "xMin"];
  bool has_x_min() const;
  private:
  bool _internal_has_x_min() const;
  public:
  void clear_x_min();
  int64_t x_min() const;
  void set_x_min(int64_t value);
  private:
  int64_t _internal_x_min() const;
  void _internal_set_x_min(int64_t value);
  public:

  // optional int64 y_min = 2 [json_name = "yMin"];
  bool has_y_min() const;
  private:
  bool _internal_has_y_min() const;
  public:
  void clear_y_min();
  int64_t y_min() const;
  void set_y_min(int64_t value);
  private:
  int64_t _internal_y_min() const;
  void _internal_set_y_min(int64_t value);
  public:

  // optional int64 x_max = 3 [json_name = "xMax"];
  bool has_x_max() const;
  private:
  bool _internal_has_x_max() const;
  public:
  void clear_x_max();
  int64_t x_max() const;
  void set_x_max(int64_t value);
  private:
  int64_t _internal_x_max() const;
  void _internal_set_x_max(int64_t value);
  public:

  // optional int64 y_max = 4 [json_name = "yMax"];
  bool has_y_max() const;
  private:
  bool _internal_has_y_max() const;
  public:
  void clear_y_max();
  int64_t y_max() const;
  void set_y_max(int64_t value);
  private:
  int64_t _internal_y_max() const;
  void _internal_set_y_max(int64_t value);
  public:

  // double confidence = 5 [json_name = "confidence"];
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.service.vision.v1.Detection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  int64_t x_min_;
  int64_t y_min_;
  int64_t x_max_;
  int64_t y_max_;
  double confidence_;
  friend struct ::TableStruct_service_2fvision_2fv1_2fvision_2eproto;
};
// -------------------------------------------------------------------

class GetClassificationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.vision.v1.GetClassificationsRequest) */ {
 public:
  inline GetClassificationsRequest() : GetClassificationsRequest(nullptr) {}
  ~GetClassificationsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetClassificationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetClassificationsRequest(const GetClassificationsRequest& from);
  GetClassificationsRequest(GetClassificationsRequest&& from) noexcept
    : GetClassificationsRequest() {
    *this = ::std::move(from);
  }

  inline GetClassificationsRequest& operator=(const GetClassificationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClassificationsRequest& operator=(GetClassificationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetClassificationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetClassificationsRequest* internal_default_instance() {
    return reinterpret_cast<const GetClassificationsRequest*>(
               &_GetClassificationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetClassificationsRequest& a, GetClassificationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClassificationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClassificationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetClassificationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetClassificationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetClassificationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetClassificationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClassificationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.vision.v1.GetClassificationsRequest";
  }
  protected:
  explicit GetClassificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kImageFieldNumber = 2,
    kMimeTypeFieldNumber = 5,
    kExtraFieldNumber = 99,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kNFieldNumber = 6,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes image = 2 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // string mime_type = 5 [json_name = "mimeType"];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // int32 width = 3 [json_name = "width"];
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 4 [json_name = "height"];
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 n = 6 [json_name = "n"];
  void clear_n();
  int32_t n() const;
  void set_n(int32_t value);
  private:
  int32_t _internal_n() const;
  void _internal_set_n(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.service.vision.v1.GetClassificationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  int32_t width_;
  int32_t height_;
  int32_t n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fvision_2fv1_2fvision_2eproto;
};
// -------------------------------------------------------------------

class GetClassificationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.vision.v1.GetClassificationsResponse) */ {
 public:
  inline GetClassificationsResponse() : GetClassificationsResponse(nullptr) {}
  ~GetClassificationsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetClassificationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetClassificationsResponse(const GetClassificationsResponse& from);
  GetClassificationsResponse(GetClassificationsResponse&& from) noexcept
    : GetClassificationsResponse() {
    *this = ::std::move(from);
  }

  inline GetClassificationsResponse& operator=(const GetClassificationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClassificationsResponse& operator=(GetClassificationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetClassificationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetClassificationsResponse* internal_default_instance() {
    return reinterpret_cast<const GetClassificationsResponse*>(
               &_GetClassificationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetClassificationsResponse& a, GetClassificationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClassificationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClassificationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetClassificationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetClassificationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetClassificationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetClassificationsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClassificationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.vision.v1.GetClassificationsResponse";
  }
  protected:
  explicit GetClassificationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassificationsFieldNumber = 1,
  };
  // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
  int classifications_size() const;
  private:
  int _internal_classifications_size() const;
  public:
  void clear_classifications();
  ::viam::service::vision::v1::Classification* mutable_classifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Classification >*
      mutable_classifications();
  private:
  const ::viam::service::vision::v1::Classification& _internal_classifications(int index) const;
  ::viam::service::vision::v1::Classification* _internal_add_classifications();
  public:
  const ::viam::service::vision::v1::Classification& classifications(int index) const;
  ::viam::service::vision::v1::Classification* add_classifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Classification >&
      classifications() const;

  // @@protoc_insertion_point(class_scope:viam.service.vision.v1.GetClassificationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Classification > classifications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fvision_2fv1_2fvision_2eproto;
};
// -------------------------------------------------------------------

class GetClassificationsFromCameraRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.vision.v1.GetClassificationsFromCameraRequest) */ {
 public:
  inline GetClassificationsFromCameraRequest() : GetClassificationsFromCameraRequest(nullptr) {}
  ~GetClassificationsFromCameraRequest() override;
  explicit PROTOBUF_CONSTEXPR GetClassificationsFromCameraRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetClassificationsFromCameraRequest(const GetClassificationsFromCameraRequest& from);
  GetClassificationsFromCameraRequest(GetClassificationsFromCameraRequest&& from) noexcept
    : GetClassificationsFromCameraRequest() {
    *this = ::std::move(from);
  }

  inline GetClassificationsFromCameraRequest& operator=(const GetClassificationsFromCameraRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClassificationsFromCameraRequest& operator=(GetClassificationsFromCameraRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetClassificationsFromCameraRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetClassificationsFromCameraRequest* internal_default_instance() {
    return reinterpret_cast<const GetClassificationsFromCameraRequest*>(
               &_GetClassificationsFromCameraRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetClassificationsFromCameraRequest& a, GetClassificationsFromCameraRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClassificationsFromCameraRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClassificationsFromCameraRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetClassificationsFromCameraRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetClassificationsFromCameraRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetClassificationsFromCameraRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetClassificationsFromCameraRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClassificationsFromCameraRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.vision.v1.GetClassificationsFromCameraRequest";
  }
  protected:
  explicit GetClassificationsFromCameraRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCameraNameFieldNumber = 2,
    kExtraFieldNumber = 99,
    kNFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string camera_name = 2 [json_name = "cameraName"];
  void clear_camera_name();
  const std::string& camera_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera_name();
  PROTOBUF_NODISCARD std::string* release_camera_name();
  void set_allocated_camera_name(std::string* camera_name);
  private:
  const std::string& _internal_camera_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera_name(const std::string& value);
  std::string* _internal_mutable_camera_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // int32 n = 3 [json_name = "n"];
  void clear_n();
  int32_t n() const;
  void set_n(int32_t value);
  private:
  int32_t _internal_n() const;
  void _internal_set_n(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.service.vision.v1.GetClassificationsFromCameraRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  int32_t n_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fvision_2fv1_2fvision_2eproto;
};
// -------------------------------------------------------------------

class GetClassificationsFromCameraResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.vision.v1.GetClassificationsFromCameraResponse) */ {
 public:
  inline GetClassificationsFromCameraResponse() : GetClassificationsFromCameraResponse(nullptr) {}
  ~GetClassificationsFromCameraResponse() override;
  explicit PROTOBUF_CONSTEXPR GetClassificationsFromCameraResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetClassificationsFromCameraResponse(const GetClassificationsFromCameraResponse& from);
  GetClassificationsFromCameraResponse(GetClassificationsFromCameraResponse&& from) noexcept
    : GetClassificationsFromCameraResponse() {
    *this = ::std::move(from);
  }

  inline GetClassificationsFromCameraResponse& operator=(const GetClassificationsFromCameraResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClassificationsFromCameraResponse& operator=(GetClassificationsFromCameraResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetClassificationsFromCameraResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetClassificationsFromCameraResponse* internal_default_instance() {
    return reinterpret_cast<const GetClassificationsFromCameraResponse*>(
               &_GetClassificationsFromCameraResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetClassificationsFromCameraResponse& a, GetClassificationsFromCameraResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetClassificationsFromCameraResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClassificationsFromCameraResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetClassificationsFromCameraResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetClassificationsFromCameraResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetClassificationsFromCameraResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetClassificationsFromCameraResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClassificationsFromCameraResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.vision.v1.GetClassificationsFromCameraResponse";
  }
  protected:
  explicit GetClassificationsFromCameraResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassificationsFieldNumber = 1,
  };
  // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
  int classifications_size() const;
  private:
  int _internal_classifications_size() const;
  public:
  void clear_classifications();
  ::viam::service::vision::v1::Classification* mutable_classifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Classification >*
      mutable_classifications();
  private:
  const ::viam::service::vision::v1::Classification& _internal_classifications(int index) const;
  ::viam::service::vision::v1::Classification* _internal_add_classifications();
  public:
  const ::viam::service::vision::v1::Classification& classifications(int index) const;
  ::viam::service::vision::v1::Classification* add_classifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Classification >&
      classifications() const;

  // @@protoc_insertion_point(class_scope:viam.service.vision.v1.GetClassificationsFromCameraResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Classification > classifications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fvision_2fv1_2fvision_2eproto;
};
// -------------------------------------------------------------------

class Classification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.vision.v1.Classification) */ {
 public:
  inline Classification() : Classification(nullptr) {}
  ~Classification() override;
  explicit PROTOBUF_CONSTEXPR Classification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Classification(const Classification& from);
  Classification(Classification&& from) noexcept
    : Classification() {
    *this = ::std::move(from);
  }

  inline Classification& operator=(const Classification& from) {
    CopyFrom(from);
    return *this;
  }
  inline Classification& operator=(Classification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Classification& default_instance() {
    return *internal_default_instance();
  }
  static inline const Classification* internal_default_instance() {
    return reinterpret_cast<const Classification*>(
               &_Classification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Classification& a, Classification& b) {
    a.Swap(&b);
  }
  inline void Swap(Classification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Classification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Classification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Classification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Classification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Classification& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Classification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.vision.v1.Classification";
  }
  protected:
  explicit Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassNameFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // string class_name = 1 [json_name = "className"];
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // double confidence = 2 [json_name = "confidence"];
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.service.vision.v1.Classification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  double confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fvision_2fv1_2fvision_2eproto;
};
// -------------------------------------------------------------------

class GetObjectPointCloudsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.vision.v1.GetObjectPointCloudsRequest) */ {
 public:
  inline GetObjectPointCloudsRequest() : GetObjectPointCloudsRequest(nullptr) {}
  ~GetObjectPointCloudsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetObjectPointCloudsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetObjectPointCloudsRequest(const GetObjectPointCloudsRequest& from);
  GetObjectPointCloudsRequest(GetObjectPointCloudsRequest&& from) noexcept
    : GetObjectPointCloudsRequest() {
    *this = ::std::move(from);
  }

  inline GetObjectPointCloudsRequest& operator=(const GetObjectPointCloudsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetObjectPointCloudsRequest& operator=(GetObjectPointCloudsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetObjectPointCloudsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetObjectPointCloudsRequest* internal_default_instance() {
    return reinterpret_cast<const GetObjectPointCloudsRequest*>(
               &_GetObjectPointCloudsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetObjectPointCloudsRequest& a, GetObjectPointCloudsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetObjectPointCloudsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetObjectPointCloudsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetObjectPointCloudsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetObjectPointCloudsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetObjectPointCloudsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetObjectPointCloudsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectPointCloudsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.vision.v1.GetObjectPointCloudsRequest";
  }
  protected:
  explicit GetObjectPointCloudsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCameraNameFieldNumber = 2,
    kMimeTypeFieldNumber = 3,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string camera_name = 2 [json_name = "cameraName"];
  void clear_camera_name();
  const std::string& camera_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera_name();
  PROTOBUF_NODISCARD std::string* release_camera_name();
  void set_allocated_camera_name(std::string* camera_name);
  private:
  const std::string& _internal_camera_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera_name(const std::string& value);
  std::string* _internal_mutable_camera_name();
  public:

  // string mime_type = 3 [json_name = "mimeType"];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.service.vision.v1.GetObjectPointCloudsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fvision_2fv1_2fvision_2eproto;
};
// -------------------------------------------------------------------

class GetObjectPointCloudsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.vision.v1.GetObjectPointCloudsResponse) */ {
 public:
  inline GetObjectPointCloudsResponse() : GetObjectPointCloudsResponse(nullptr) {}
  ~GetObjectPointCloudsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetObjectPointCloudsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetObjectPointCloudsResponse(const GetObjectPointCloudsResponse& from);
  GetObjectPointCloudsResponse(GetObjectPointCloudsResponse&& from) noexcept
    : GetObjectPointCloudsResponse() {
    *this = ::std::move(from);
  }

  inline GetObjectPointCloudsResponse& operator=(const GetObjectPointCloudsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetObjectPointCloudsResponse& operator=(GetObjectPointCloudsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetObjectPointCloudsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetObjectPointCloudsResponse* internal_default_instance() {
    return reinterpret_cast<const GetObjectPointCloudsResponse*>(
               &_GetObjectPointCloudsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetObjectPointCloudsResponse& a, GetObjectPointCloudsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetObjectPointCloudsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetObjectPointCloudsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetObjectPointCloudsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetObjectPointCloudsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetObjectPointCloudsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetObjectPointCloudsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetObjectPointCloudsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.vision.v1.GetObjectPointCloudsResponse";
  }
  protected:
  explicit GetObjectPointCloudsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectsFieldNumber = 2,
    kMimeTypeFieldNumber = 1,
  };
  // repeated .viam.common.v1.PointCloudObject objects = 2 [json_name = "objects"];
  int objects_size() const;
  private:
  int _internal_objects_size() const;
  public:
  void clear_objects();
  ::viam::common::v1::PointCloudObject* mutable_objects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::PointCloudObject >*
      mutable_objects();
  private:
  const ::viam::common::v1::PointCloudObject& _internal_objects(int index) const;
  ::viam::common::v1::PointCloudObject* _internal_add_objects();
  public:
  const ::viam::common::v1::PointCloudObject& objects(int index) const;
  ::viam::common::v1::PointCloudObject* add_objects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::PointCloudObject >&
      objects() const;

  // string mime_type = 1 [json_name = "mimeType"];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // @@protoc_insertion_point(class_scope:viam.service.vision.v1.GetObjectPointCloudsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::PointCloudObject > objects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fvision_2fv1_2fvision_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetDetectionsRequest

// string name = 1 [json_name = "name"];
inline void GetDetectionsRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetDetectionsRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetDetectionsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDetectionsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetDetectionsRequest.name)
}
inline std::string* GetDetectionsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetDetectionsRequest.name)
  return _s;
}
inline const std::string& GetDetectionsRequest::_internal_name() const {
  return name_.Get();
}
inline void GetDetectionsRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDetectionsRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDetectionsRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetDetectionsRequest.name)
  return name_.Release();
}
inline void GetDetectionsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetDetectionsRequest.name)
}

// bytes image = 2 [json_name = "image"];
inline void GetDetectionsRequest::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& GetDetectionsRequest::image() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetDetectionsRequest.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDetectionsRequest::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetDetectionsRequest.image)
}
inline std::string* GetDetectionsRequest::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetDetectionsRequest.image)
  return _s;
}
inline const std::string& GetDetectionsRequest::_internal_image() const {
  return image_.Get();
}
inline void GetDetectionsRequest::_internal_set_image(const std::string& value) {
  
  image_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDetectionsRequest::_internal_mutable_image() {
  
  return image_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDetectionsRequest::release_image() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetDetectionsRequest.image)
  return image_.Release();
}
inline void GetDetectionsRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault()) {
    image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetDetectionsRequest.image)
}

// int64 width = 3 [json_name = "width"];
inline void GetDetectionsRequest::clear_width() {
  width_ = int64_t{0};
}
inline int64_t GetDetectionsRequest::_internal_width() const {
  return width_;
}
inline int64_t GetDetectionsRequest::width() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetDetectionsRequest.width)
  return _internal_width();
}
inline void GetDetectionsRequest::_internal_set_width(int64_t value) {
  
  width_ = value;
}
inline void GetDetectionsRequest::set_width(int64_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetDetectionsRequest.width)
}

// int64 height = 4 [json_name = "height"];
inline void GetDetectionsRequest::clear_height() {
  height_ = int64_t{0};
}
inline int64_t GetDetectionsRequest::_internal_height() const {
  return height_;
}
inline int64_t GetDetectionsRequest::height() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetDetectionsRequest.height)
  return _internal_height();
}
inline void GetDetectionsRequest::_internal_set_height(int64_t value) {
  
  height_ = value;
}
inline void GetDetectionsRequest::set_height(int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetDetectionsRequest.height)
}

// string mime_type = 5 [json_name = "mimeType"];
inline void GetDetectionsRequest::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& GetDetectionsRequest::mime_type() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetDetectionsRequest.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDetectionsRequest::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetDetectionsRequest.mime_type)
}
inline std::string* GetDetectionsRequest::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetDetectionsRequest.mime_type)
  return _s;
}
inline const std::string& GetDetectionsRequest::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void GetDetectionsRequest::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDetectionsRequest::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDetectionsRequest::release_mime_type() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetDetectionsRequest.mime_type)
  return mime_type_.Release();
}
inline void GetDetectionsRequest::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetDetectionsRequest.mime_type)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetDetectionsRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetDetectionsRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetDetectionsRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetDetectionsRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetDetectionsRequest.extra)
  return _internal_extra();
}
inline void GetDetectionsRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.vision.v1.GetDetectionsRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetDetectionsRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetDetectionsRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetDetectionsRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetDetectionsRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetDetectionsRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetDetectionsRequest.extra)
  return _msg;
}
inline void GetDetectionsRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetDetectionsRequest.extra)
}

// -------------------------------------------------------------------

// GetDetectionsResponse

// repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
inline int GetDetectionsResponse::_internal_detections_size() const {
  return detections_.size();
}
inline int GetDetectionsResponse::detections_size() const {
  return _internal_detections_size();
}
inline void GetDetectionsResponse::clear_detections() {
  detections_.Clear();
}
inline ::viam::service::vision::v1::Detection* GetDetectionsResponse::mutable_detections(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetDetectionsResponse.detections)
  return detections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Detection >*
GetDetectionsResponse::mutable_detections() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.vision.v1.GetDetectionsResponse.detections)
  return &detections_;
}
inline const ::viam::service::vision::v1::Detection& GetDetectionsResponse::_internal_detections(int index) const {
  return detections_.Get(index);
}
inline const ::viam::service::vision::v1::Detection& GetDetectionsResponse::detections(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetDetectionsResponse.detections)
  return _internal_detections(index);
}
inline ::viam::service::vision::v1::Detection* GetDetectionsResponse::_internal_add_detections() {
  return detections_.Add();
}
inline ::viam::service::vision::v1::Detection* GetDetectionsResponse::add_detections() {
  ::viam::service::vision::v1::Detection* _add = _internal_add_detections();
  // @@protoc_insertion_point(field_add:viam.service.vision.v1.GetDetectionsResponse.detections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Detection >&
GetDetectionsResponse::detections() const {
  // @@protoc_insertion_point(field_list:viam.service.vision.v1.GetDetectionsResponse.detections)
  return detections_;
}

// -------------------------------------------------------------------

// GetDetectionsFromCameraRequest

// string name = 1 [json_name = "name"];
inline void GetDetectionsFromCameraRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetDetectionsFromCameraRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetDetectionsFromCameraRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDetectionsFromCameraRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetDetectionsFromCameraRequest.name)
}
inline std::string* GetDetectionsFromCameraRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetDetectionsFromCameraRequest.name)
  return _s;
}
inline const std::string& GetDetectionsFromCameraRequest::_internal_name() const {
  return name_.Get();
}
inline void GetDetectionsFromCameraRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDetectionsFromCameraRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDetectionsFromCameraRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetDetectionsFromCameraRequest.name)
  return name_.Release();
}
inline void GetDetectionsFromCameraRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetDetectionsFromCameraRequest.name)
}

// string camera_name = 2 [json_name = "cameraName"];
inline void GetDetectionsFromCameraRequest::clear_camera_name() {
  camera_name_.ClearToEmpty();
}
inline const std::string& GetDetectionsFromCameraRequest::camera_name() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetDetectionsFromCameraRequest.camera_name)
  return _internal_camera_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDetectionsFromCameraRequest::set_camera_name(ArgT0&& arg0, ArgT... args) {
 
 camera_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetDetectionsFromCameraRequest.camera_name)
}
inline std::string* GetDetectionsFromCameraRequest::mutable_camera_name() {
  std::string* _s = _internal_mutable_camera_name();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetDetectionsFromCameraRequest.camera_name)
  return _s;
}
inline const std::string& GetDetectionsFromCameraRequest::_internal_camera_name() const {
  return camera_name_.Get();
}
inline void GetDetectionsFromCameraRequest::_internal_set_camera_name(const std::string& value) {
  
  camera_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDetectionsFromCameraRequest::_internal_mutable_camera_name() {
  
  return camera_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDetectionsFromCameraRequest::release_camera_name() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetDetectionsFromCameraRequest.camera_name)
  return camera_name_.Release();
}
inline void GetDetectionsFromCameraRequest::set_allocated_camera_name(std::string* camera_name) {
  if (camera_name != nullptr) {
    
  } else {
    
  }
  camera_name_.SetAllocated(camera_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camera_name_.IsDefault()) {
    camera_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetDetectionsFromCameraRequest.camera_name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetDetectionsFromCameraRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetDetectionsFromCameraRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetDetectionsFromCameraRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetDetectionsFromCameraRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetDetectionsFromCameraRequest.extra)
  return _internal_extra();
}
inline void GetDetectionsFromCameraRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.vision.v1.GetDetectionsFromCameraRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetDetectionsFromCameraRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetDetectionsFromCameraRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetDetectionsFromCameraRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetDetectionsFromCameraRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetDetectionsFromCameraRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetDetectionsFromCameraRequest.extra)
  return _msg;
}
inline void GetDetectionsFromCameraRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetDetectionsFromCameraRequest.extra)
}

// -------------------------------------------------------------------

// GetDetectionsFromCameraResponse

// repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
inline int GetDetectionsFromCameraResponse::_internal_detections_size() const {
  return detections_.size();
}
inline int GetDetectionsFromCameraResponse::detections_size() const {
  return _internal_detections_size();
}
inline void GetDetectionsFromCameraResponse::clear_detections() {
  detections_.Clear();
}
inline ::viam::service::vision::v1::Detection* GetDetectionsFromCameraResponse::mutable_detections(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetDetectionsFromCameraResponse.detections)
  return detections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Detection >*
GetDetectionsFromCameraResponse::mutable_detections() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.vision.v1.GetDetectionsFromCameraResponse.detections)
  return &detections_;
}
inline const ::viam::service::vision::v1::Detection& GetDetectionsFromCameraResponse::_internal_detections(int index) const {
  return detections_.Get(index);
}
inline const ::viam::service::vision::v1::Detection& GetDetectionsFromCameraResponse::detections(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetDetectionsFromCameraResponse.detections)
  return _internal_detections(index);
}
inline ::viam::service::vision::v1::Detection* GetDetectionsFromCameraResponse::_internal_add_detections() {
  return detections_.Add();
}
inline ::viam::service::vision::v1::Detection* GetDetectionsFromCameraResponse::add_detections() {
  ::viam::service::vision::v1::Detection* _add = _internal_add_detections();
  // @@protoc_insertion_point(field_add:viam.service.vision.v1.GetDetectionsFromCameraResponse.detections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Detection >&
GetDetectionsFromCameraResponse::detections() const {
  // @@protoc_insertion_point(field_list:viam.service.vision.v1.GetDetectionsFromCameraResponse.detections)
  return detections_;
}

// -------------------------------------------------------------------

// Detection

// optional int64 x_min = 1 [json_name = "xMin"];
inline bool Detection::_internal_has_x_min() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Detection::has_x_min() const {
  return _internal_has_x_min();
}
inline void Detection::clear_x_min() {
  x_min_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t Detection::_internal_x_min() const {
  return x_min_;
}
inline int64_t Detection::x_min() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.Detection.x_min)
  return _internal_x_min();
}
inline void Detection::_internal_set_x_min(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  x_min_ = value;
}
inline void Detection::set_x_min(int64_t value) {
  _internal_set_x_min(value);
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.Detection.x_min)
}

// optional int64 y_min = 2 [json_name = "yMin"];
inline bool Detection::_internal_has_y_min() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Detection::has_y_min() const {
  return _internal_has_y_min();
}
inline void Detection::clear_y_min() {
  y_min_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t Detection::_internal_y_min() const {
  return y_min_;
}
inline int64_t Detection::y_min() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.Detection.y_min)
  return _internal_y_min();
}
inline void Detection::_internal_set_y_min(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  y_min_ = value;
}
inline void Detection::set_y_min(int64_t value) {
  _internal_set_y_min(value);
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.Detection.y_min)
}

// optional int64 x_max = 3 [json_name = "xMax"];
inline bool Detection::_internal_has_x_max() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Detection::has_x_max() const {
  return _internal_has_x_max();
}
inline void Detection::clear_x_max() {
  x_max_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t Detection::_internal_x_max() const {
  return x_max_;
}
inline int64_t Detection::x_max() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.Detection.x_max)
  return _internal_x_max();
}
inline void Detection::_internal_set_x_max(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  x_max_ = value;
}
inline void Detection::set_x_max(int64_t value) {
  _internal_set_x_max(value);
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.Detection.x_max)
}

// optional int64 y_max = 4 [json_name = "yMax"];
inline bool Detection::_internal_has_y_max() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Detection::has_y_max() const {
  return _internal_has_y_max();
}
inline void Detection::clear_y_max() {
  y_max_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t Detection::_internal_y_max() const {
  return y_max_;
}
inline int64_t Detection::y_max() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.Detection.y_max)
  return _internal_y_max();
}
inline void Detection::_internal_set_y_max(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  y_max_ = value;
}
inline void Detection::set_y_max(int64_t value) {
  _internal_set_y_max(value);
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.Detection.y_max)
}

// double confidence = 5 [json_name = "confidence"];
inline void Detection::clear_confidence() {
  confidence_ = 0;
}
inline double Detection::_internal_confidence() const {
  return confidence_;
}
inline double Detection::confidence() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.Detection.confidence)
  return _internal_confidence();
}
inline void Detection::_internal_set_confidence(double value) {
  
  confidence_ = value;
}
inline void Detection::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.Detection.confidence)
}

// string class_name = 6 [json_name = "className"];
inline void Detection::clear_class_name() {
  class_name_.ClearToEmpty();
}
inline const std::string& Detection::class_name() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.Detection.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Detection::set_class_name(ArgT0&& arg0, ArgT... args) {
 
 class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.Detection.class_name)
}
inline std::string* Detection::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.Detection.class_name)
  return _s;
}
inline const std::string& Detection::_internal_class_name() const {
  return class_name_.Get();
}
inline void Detection::_internal_set_class_name(const std::string& value) {
  
  class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Detection::_internal_mutable_class_name() {
  
  return class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Detection::release_class_name() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.Detection.class_name)
  return class_name_.Release();
}
inline void Detection::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.Detection.class_name)
}

// -------------------------------------------------------------------

// GetClassificationsRequest

// string name = 1 [json_name = "name"];
inline void GetClassificationsRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetClassificationsRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetClassificationsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetClassificationsRequest.name)
}
inline std::string* GetClassificationsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetClassificationsRequest.name)
  return _s;
}
inline const std::string& GetClassificationsRequest::_internal_name() const {
  return name_.Get();
}
inline void GetClassificationsRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetClassificationsRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetClassificationsRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetClassificationsRequest.name)
  return name_.Release();
}
inline void GetClassificationsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetClassificationsRequest.name)
}

// bytes image = 2 [json_name = "image"];
inline void GetClassificationsRequest::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& GetClassificationsRequest::image() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsRequest.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetClassificationsRequest::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetClassificationsRequest.image)
}
inline std::string* GetClassificationsRequest::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetClassificationsRequest.image)
  return _s;
}
inline const std::string& GetClassificationsRequest::_internal_image() const {
  return image_.Get();
}
inline void GetClassificationsRequest::_internal_set_image(const std::string& value) {
  
  image_.Set(value, GetArenaForAllocation());
}
inline std::string* GetClassificationsRequest::_internal_mutable_image() {
  
  return image_.Mutable(GetArenaForAllocation());
}
inline std::string* GetClassificationsRequest::release_image() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetClassificationsRequest.image)
  return image_.Release();
}
inline void GetClassificationsRequest::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault()) {
    image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetClassificationsRequest.image)
}

// int32 width = 3 [json_name = "width"];
inline void GetClassificationsRequest::clear_width() {
  width_ = 0;
}
inline int32_t GetClassificationsRequest::_internal_width() const {
  return width_;
}
inline int32_t GetClassificationsRequest::width() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsRequest.width)
  return _internal_width();
}
inline void GetClassificationsRequest::_internal_set_width(int32_t value) {
  
  width_ = value;
}
inline void GetClassificationsRequest::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetClassificationsRequest.width)
}

// int32 height = 4 [json_name = "height"];
inline void GetClassificationsRequest::clear_height() {
  height_ = 0;
}
inline int32_t GetClassificationsRequest::_internal_height() const {
  return height_;
}
inline int32_t GetClassificationsRequest::height() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsRequest.height)
  return _internal_height();
}
inline void GetClassificationsRequest::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void GetClassificationsRequest::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetClassificationsRequest.height)
}

// string mime_type = 5 [json_name = "mimeType"];
inline void GetClassificationsRequest::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& GetClassificationsRequest::mime_type() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsRequest.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetClassificationsRequest::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetClassificationsRequest.mime_type)
}
inline std::string* GetClassificationsRequest::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetClassificationsRequest.mime_type)
  return _s;
}
inline const std::string& GetClassificationsRequest::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void GetClassificationsRequest::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GetClassificationsRequest::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GetClassificationsRequest::release_mime_type() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetClassificationsRequest.mime_type)
  return mime_type_.Release();
}
inline void GetClassificationsRequest::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetClassificationsRequest.mime_type)
}

// int32 n = 6 [json_name = "n"];
inline void GetClassificationsRequest::clear_n() {
  n_ = 0;
}
inline int32_t GetClassificationsRequest::_internal_n() const {
  return n_;
}
inline int32_t GetClassificationsRequest::n() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsRequest.n)
  return _internal_n();
}
inline void GetClassificationsRequest::_internal_set_n(int32_t value) {
  
  n_ = value;
}
inline void GetClassificationsRequest::set_n(int32_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetClassificationsRequest.n)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetClassificationsRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetClassificationsRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetClassificationsRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetClassificationsRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsRequest.extra)
  return _internal_extra();
}
inline void GetClassificationsRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.vision.v1.GetClassificationsRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetClassificationsRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetClassificationsRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetClassificationsRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetClassificationsRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetClassificationsRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetClassificationsRequest.extra)
  return _msg;
}
inline void GetClassificationsRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetClassificationsRequest.extra)
}

// -------------------------------------------------------------------

// GetClassificationsResponse

// repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
inline int GetClassificationsResponse::_internal_classifications_size() const {
  return classifications_.size();
}
inline int GetClassificationsResponse::classifications_size() const {
  return _internal_classifications_size();
}
inline void GetClassificationsResponse::clear_classifications() {
  classifications_.Clear();
}
inline ::viam::service::vision::v1::Classification* GetClassificationsResponse::mutable_classifications(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetClassificationsResponse.classifications)
  return classifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Classification >*
GetClassificationsResponse::mutable_classifications() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.vision.v1.GetClassificationsResponse.classifications)
  return &classifications_;
}
inline const ::viam::service::vision::v1::Classification& GetClassificationsResponse::_internal_classifications(int index) const {
  return classifications_.Get(index);
}
inline const ::viam::service::vision::v1::Classification& GetClassificationsResponse::classifications(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsResponse.classifications)
  return _internal_classifications(index);
}
inline ::viam::service::vision::v1::Classification* GetClassificationsResponse::_internal_add_classifications() {
  return classifications_.Add();
}
inline ::viam::service::vision::v1::Classification* GetClassificationsResponse::add_classifications() {
  ::viam::service::vision::v1::Classification* _add = _internal_add_classifications();
  // @@protoc_insertion_point(field_add:viam.service.vision.v1.GetClassificationsResponse.classifications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Classification >&
GetClassificationsResponse::classifications() const {
  // @@protoc_insertion_point(field_list:viam.service.vision.v1.GetClassificationsResponse.classifications)
  return classifications_;
}

// -------------------------------------------------------------------

// GetClassificationsFromCameraRequest

// string name = 1 [json_name = "name"];
inline void GetClassificationsFromCameraRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetClassificationsFromCameraRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsFromCameraRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetClassificationsFromCameraRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetClassificationsFromCameraRequest.name)
}
inline std::string* GetClassificationsFromCameraRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetClassificationsFromCameraRequest.name)
  return _s;
}
inline const std::string& GetClassificationsFromCameraRequest::_internal_name() const {
  return name_.Get();
}
inline void GetClassificationsFromCameraRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetClassificationsFromCameraRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetClassificationsFromCameraRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetClassificationsFromCameraRequest.name)
  return name_.Release();
}
inline void GetClassificationsFromCameraRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetClassificationsFromCameraRequest.name)
}

// string camera_name = 2 [json_name = "cameraName"];
inline void GetClassificationsFromCameraRequest::clear_camera_name() {
  camera_name_.ClearToEmpty();
}
inline const std::string& GetClassificationsFromCameraRequest::camera_name() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsFromCameraRequest.camera_name)
  return _internal_camera_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetClassificationsFromCameraRequest::set_camera_name(ArgT0&& arg0, ArgT... args) {
 
 camera_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetClassificationsFromCameraRequest.camera_name)
}
inline std::string* GetClassificationsFromCameraRequest::mutable_camera_name() {
  std::string* _s = _internal_mutable_camera_name();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetClassificationsFromCameraRequest.camera_name)
  return _s;
}
inline const std::string& GetClassificationsFromCameraRequest::_internal_camera_name() const {
  return camera_name_.Get();
}
inline void GetClassificationsFromCameraRequest::_internal_set_camera_name(const std::string& value) {
  
  camera_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetClassificationsFromCameraRequest::_internal_mutable_camera_name() {
  
  return camera_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetClassificationsFromCameraRequest::release_camera_name() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetClassificationsFromCameraRequest.camera_name)
  return camera_name_.Release();
}
inline void GetClassificationsFromCameraRequest::set_allocated_camera_name(std::string* camera_name) {
  if (camera_name != nullptr) {
    
  } else {
    
  }
  camera_name_.SetAllocated(camera_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camera_name_.IsDefault()) {
    camera_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetClassificationsFromCameraRequest.camera_name)
}

// int32 n = 3 [json_name = "n"];
inline void GetClassificationsFromCameraRequest::clear_n() {
  n_ = 0;
}
inline int32_t GetClassificationsFromCameraRequest::_internal_n() const {
  return n_;
}
inline int32_t GetClassificationsFromCameraRequest::n() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsFromCameraRequest.n)
  return _internal_n();
}
inline void GetClassificationsFromCameraRequest::_internal_set_n(int32_t value) {
  
  n_ = value;
}
inline void GetClassificationsFromCameraRequest::set_n(int32_t value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetClassificationsFromCameraRequest.n)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetClassificationsFromCameraRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetClassificationsFromCameraRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetClassificationsFromCameraRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetClassificationsFromCameraRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsFromCameraRequest.extra)
  return _internal_extra();
}
inline void GetClassificationsFromCameraRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.vision.v1.GetClassificationsFromCameraRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetClassificationsFromCameraRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetClassificationsFromCameraRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetClassificationsFromCameraRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetClassificationsFromCameraRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetClassificationsFromCameraRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetClassificationsFromCameraRequest.extra)
  return _msg;
}
inline void GetClassificationsFromCameraRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetClassificationsFromCameraRequest.extra)
}

// -------------------------------------------------------------------

// GetClassificationsFromCameraResponse

// repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
inline int GetClassificationsFromCameraResponse::_internal_classifications_size() const {
  return classifications_.size();
}
inline int GetClassificationsFromCameraResponse::classifications_size() const {
  return _internal_classifications_size();
}
inline void GetClassificationsFromCameraResponse::clear_classifications() {
  classifications_.Clear();
}
inline ::viam::service::vision::v1::Classification* GetClassificationsFromCameraResponse::mutable_classifications(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetClassificationsFromCameraResponse.classifications)
  return classifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Classification >*
GetClassificationsFromCameraResponse::mutable_classifications() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.vision.v1.GetClassificationsFromCameraResponse.classifications)
  return &classifications_;
}
inline const ::viam::service::vision::v1::Classification& GetClassificationsFromCameraResponse::_internal_classifications(int index) const {
  return classifications_.Get(index);
}
inline const ::viam::service::vision::v1::Classification& GetClassificationsFromCameraResponse::classifications(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetClassificationsFromCameraResponse.classifications)
  return _internal_classifications(index);
}
inline ::viam::service::vision::v1::Classification* GetClassificationsFromCameraResponse::_internal_add_classifications() {
  return classifications_.Add();
}
inline ::viam::service::vision::v1::Classification* GetClassificationsFromCameraResponse::add_classifications() {
  ::viam::service::vision::v1::Classification* _add = _internal_add_classifications();
  // @@protoc_insertion_point(field_add:viam.service.vision.v1.GetClassificationsFromCameraResponse.classifications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::vision::v1::Classification >&
GetClassificationsFromCameraResponse::classifications() const {
  // @@protoc_insertion_point(field_list:viam.service.vision.v1.GetClassificationsFromCameraResponse.classifications)
  return classifications_;
}

// -------------------------------------------------------------------

// Classification

// string class_name = 1 [json_name = "className"];
inline void Classification::clear_class_name() {
  class_name_.ClearToEmpty();
}
inline const std::string& Classification::class_name() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.Classification.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Classification::set_class_name(ArgT0&& arg0, ArgT... args) {
 
 class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.Classification.class_name)
}
inline std::string* Classification::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.Classification.class_name)
  return _s;
}
inline const std::string& Classification::_internal_class_name() const {
  return class_name_.Get();
}
inline void Classification::_internal_set_class_name(const std::string& value) {
  
  class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Classification::_internal_mutable_class_name() {
  
  return class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Classification::release_class_name() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.Classification.class_name)
  return class_name_.Release();
}
inline void Classification::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.Classification.class_name)
}

// double confidence = 2 [json_name = "confidence"];
inline void Classification::clear_confidence() {
  confidence_ = 0;
}
inline double Classification::_internal_confidence() const {
  return confidence_;
}
inline double Classification::confidence() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.Classification.confidence)
  return _internal_confidence();
}
inline void Classification::_internal_set_confidence(double value) {
  
  confidence_ = value;
}
inline void Classification::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.Classification.confidence)
}

// -------------------------------------------------------------------

// GetObjectPointCloudsRequest

// string name = 1 [json_name = "name"];
inline void GetObjectPointCloudsRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetObjectPointCloudsRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetObjectPointCloudsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetObjectPointCloudsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetObjectPointCloudsRequest.name)
}
inline std::string* GetObjectPointCloudsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetObjectPointCloudsRequest.name)
  return _s;
}
inline const std::string& GetObjectPointCloudsRequest::_internal_name() const {
  return name_.Get();
}
inline void GetObjectPointCloudsRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetObjectPointCloudsRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetObjectPointCloudsRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetObjectPointCloudsRequest.name)
  return name_.Release();
}
inline void GetObjectPointCloudsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetObjectPointCloudsRequest.name)
}

// string camera_name = 2 [json_name = "cameraName"];
inline void GetObjectPointCloudsRequest::clear_camera_name() {
  camera_name_.ClearToEmpty();
}
inline const std::string& GetObjectPointCloudsRequest::camera_name() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetObjectPointCloudsRequest.camera_name)
  return _internal_camera_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetObjectPointCloudsRequest::set_camera_name(ArgT0&& arg0, ArgT... args) {
 
 camera_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetObjectPointCloudsRequest.camera_name)
}
inline std::string* GetObjectPointCloudsRequest::mutable_camera_name() {
  std::string* _s = _internal_mutable_camera_name();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetObjectPointCloudsRequest.camera_name)
  return _s;
}
inline const std::string& GetObjectPointCloudsRequest::_internal_camera_name() const {
  return camera_name_.Get();
}
inline void GetObjectPointCloudsRequest::_internal_set_camera_name(const std::string& value) {
  
  camera_name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetObjectPointCloudsRequest::_internal_mutable_camera_name() {
  
  return camera_name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetObjectPointCloudsRequest::release_camera_name() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetObjectPointCloudsRequest.camera_name)
  return camera_name_.Release();
}
inline void GetObjectPointCloudsRequest::set_allocated_camera_name(std::string* camera_name) {
  if (camera_name != nullptr) {
    
  } else {
    
  }
  camera_name_.SetAllocated(camera_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (camera_name_.IsDefault()) {
    camera_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetObjectPointCloudsRequest.camera_name)
}

// string mime_type = 3 [json_name = "mimeType"];
inline void GetObjectPointCloudsRequest::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& GetObjectPointCloudsRequest::mime_type() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetObjectPointCloudsRequest.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetObjectPointCloudsRequest::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetObjectPointCloudsRequest.mime_type)
}
inline std::string* GetObjectPointCloudsRequest::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetObjectPointCloudsRequest.mime_type)
  return _s;
}
inline const std::string& GetObjectPointCloudsRequest::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void GetObjectPointCloudsRequest::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GetObjectPointCloudsRequest::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GetObjectPointCloudsRequest::release_mime_type() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetObjectPointCloudsRequest.mime_type)
  return mime_type_.Release();
}
inline void GetObjectPointCloudsRequest::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetObjectPointCloudsRequest.mime_type)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetObjectPointCloudsRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetObjectPointCloudsRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetObjectPointCloudsRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetObjectPointCloudsRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetObjectPointCloudsRequest.extra)
  return _internal_extra();
}
inline void GetObjectPointCloudsRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.vision.v1.GetObjectPointCloudsRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetObjectPointCloudsRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetObjectPointCloudsRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetObjectPointCloudsRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetObjectPointCloudsRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetObjectPointCloudsRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetObjectPointCloudsRequest.extra)
  return _msg;
}
inline void GetObjectPointCloudsRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetObjectPointCloudsRequest.extra)
}

// -------------------------------------------------------------------

// GetObjectPointCloudsResponse

// string mime_type = 1 [json_name = "mimeType"];
inline void GetObjectPointCloudsResponse::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& GetObjectPointCloudsResponse::mime_type() const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetObjectPointCloudsResponse.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetObjectPointCloudsResponse::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.vision.v1.GetObjectPointCloudsResponse.mime_type)
}
inline std::string* GetObjectPointCloudsResponse::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetObjectPointCloudsResponse.mime_type)
  return _s;
}
inline const std::string& GetObjectPointCloudsResponse::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void GetObjectPointCloudsResponse::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GetObjectPointCloudsResponse::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GetObjectPointCloudsResponse::release_mime_type() {
  // @@protoc_insertion_point(field_release:viam.service.vision.v1.GetObjectPointCloudsResponse.mime_type)
  return mime_type_.Release();
}
inline void GetObjectPointCloudsResponse::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.vision.v1.GetObjectPointCloudsResponse.mime_type)
}

// repeated .viam.common.v1.PointCloudObject objects = 2 [json_name = "objects"];
inline int GetObjectPointCloudsResponse::_internal_objects_size() const {
  return objects_.size();
}
inline int GetObjectPointCloudsResponse::objects_size() const {
  return _internal_objects_size();
}
inline ::viam::common::v1::PointCloudObject* GetObjectPointCloudsResponse::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.vision.v1.GetObjectPointCloudsResponse.objects)
  return objects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::PointCloudObject >*
GetObjectPointCloudsResponse::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.vision.v1.GetObjectPointCloudsResponse.objects)
  return &objects_;
}
inline const ::viam::common::v1::PointCloudObject& GetObjectPointCloudsResponse::_internal_objects(int index) const {
  return objects_.Get(index);
}
inline const ::viam::common::v1::PointCloudObject& GetObjectPointCloudsResponse::objects(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.vision.v1.GetObjectPointCloudsResponse.objects)
  return _internal_objects(index);
}
inline ::viam::common::v1::PointCloudObject* GetObjectPointCloudsResponse::_internal_add_objects() {
  return objects_.Add();
}
inline ::viam::common::v1::PointCloudObject* GetObjectPointCloudsResponse::add_objects() {
  ::viam::common::v1::PointCloudObject* _add = _internal_add_objects();
  // @@protoc_insertion_point(field_add:viam.service.vision.v1.GetObjectPointCloudsResponse.objects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::PointCloudObject >&
GetObjectPointCloudsResponse::objects() const {
  // @@protoc_insertion_point(field_list:viam.service.vision.v1.GetObjectPointCloudsResponse.objects)
  return objects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace vision
}  // namespace service
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2fvision_2fv1_2fvision_2eproto
