// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/vision/v1/vision.proto

#include "service/vision/v1/vision.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace service {
namespace vision {
namespace v1 {
PROTOBUF_CONSTEXPR GetDetectionsRequest::GetDetectionsRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr)
  , width_(int64_t{0})
  , height_(int64_t{0}){}
struct GetDetectionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDetectionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDetectionsRequestDefaultTypeInternal() {}
  union {
    GetDetectionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDetectionsRequestDefaultTypeInternal _GetDetectionsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDetectionsResponse::GetDetectionsResponse(
    ::_pbi::ConstantInitialized)
  : detections_(){}
struct GetDetectionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDetectionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDetectionsResponseDefaultTypeInternal() {}
  union {
    GetDetectionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDetectionsResponseDefaultTypeInternal _GetDetectionsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetDetectionsFromCameraRequest::GetDetectionsFromCameraRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , camera_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct GetDetectionsFromCameraRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDetectionsFromCameraRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDetectionsFromCameraRequestDefaultTypeInternal() {}
  union {
    GetDetectionsFromCameraRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDetectionsFromCameraRequestDefaultTypeInternal _GetDetectionsFromCameraRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDetectionsFromCameraResponse::GetDetectionsFromCameraResponse(
    ::_pbi::ConstantInitialized)
  : detections_(){}
struct GetDetectionsFromCameraResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDetectionsFromCameraResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDetectionsFromCameraResponseDefaultTypeInternal() {}
  union {
    GetDetectionsFromCameraResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDetectionsFromCameraResponseDefaultTypeInternal _GetDetectionsFromCameraResponse_default_instance_;
PROTOBUF_CONSTEXPR Detection::Detection(
    ::_pbi::ConstantInitialized)
  : class_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , x_min_(int64_t{0})
  , y_min_(int64_t{0})
  , x_max_(int64_t{0})
  , y_max_(int64_t{0})
  , confidence_(0){}
struct DetectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectionDefaultTypeInternal() {}
  union {
    Detection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectionDefaultTypeInternal _Detection_default_instance_;
PROTOBUF_CONSTEXPR GetClassificationsRequest::GetClassificationsRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr)
  , width_(0)
  , height_(0)
  , n_(0){}
struct GetClassificationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClassificationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClassificationsRequestDefaultTypeInternal() {}
  union {
    GetClassificationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClassificationsRequestDefaultTypeInternal _GetClassificationsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetClassificationsResponse::GetClassificationsResponse(
    ::_pbi::ConstantInitialized)
  : classifications_(){}
struct GetClassificationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClassificationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClassificationsResponseDefaultTypeInternal() {}
  union {
    GetClassificationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClassificationsResponseDefaultTypeInternal _GetClassificationsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetClassificationsFromCameraRequest::GetClassificationsFromCameraRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , camera_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr)
  , n_(0){}
struct GetClassificationsFromCameraRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClassificationsFromCameraRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClassificationsFromCameraRequestDefaultTypeInternal() {}
  union {
    GetClassificationsFromCameraRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClassificationsFromCameraRequestDefaultTypeInternal _GetClassificationsFromCameraRequest_default_instance_;
PROTOBUF_CONSTEXPR GetClassificationsFromCameraResponse::GetClassificationsFromCameraResponse(
    ::_pbi::ConstantInitialized)
  : classifications_(){}
struct GetClassificationsFromCameraResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClassificationsFromCameraResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClassificationsFromCameraResponseDefaultTypeInternal() {}
  union {
    GetClassificationsFromCameraResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClassificationsFromCameraResponseDefaultTypeInternal _GetClassificationsFromCameraResponse_default_instance_;
PROTOBUF_CONSTEXPR Classification::Classification(
    ::_pbi::ConstantInitialized)
  : class_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , confidence_(0){}
struct ClassificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassificationDefaultTypeInternal() {}
  union {
    Classification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassificationDefaultTypeInternal _Classification_default_instance_;
PROTOBUF_CONSTEXPR GetObjectPointCloudsRequest::GetObjectPointCloudsRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , camera_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct GetObjectPointCloudsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetObjectPointCloudsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetObjectPointCloudsRequestDefaultTypeInternal() {}
  union {
    GetObjectPointCloudsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetObjectPointCloudsRequestDefaultTypeInternal _GetObjectPointCloudsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetObjectPointCloudsResponse::GetObjectPointCloudsResponse(
    ::_pbi::ConstantInitialized)
  : objects_()
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetObjectPointCloudsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetObjectPointCloudsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetObjectPointCloudsResponseDefaultTypeInternal() {}
  union {
    GetObjectPointCloudsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetObjectPointCloudsResponseDefaultTypeInternal _GetObjectPointCloudsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPropertiesRequest::GetPropertiesRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct GetPropertiesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPropertiesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPropertiesRequestDefaultTypeInternal() {}
  union {
    GetPropertiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPropertiesRequestDefaultTypeInternal _GetPropertiesRequest_default_instance_;
PROTOBUF_CONSTEXPR CaptureAllFromCameraRequest::CaptureAllFromCameraRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , camera_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr)
  , return_image_(false)
  , return_classifications_(false)
  , return_detections_(false)
  , return_object_point_clouds_(false){}
struct CaptureAllFromCameraRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptureAllFromCameraRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptureAllFromCameraRequestDefaultTypeInternal() {}
  union {
    CaptureAllFromCameraRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptureAllFromCameraRequestDefaultTypeInternal _CaptureAllFromCameraRequest_default_instance_;
PROTOBUF_CONSTEXPR CaptureAllFromCameraResponse::CaptureAllFromCameraResponse(
    ::_pbi::ConstantInitialized)
  : detections_()
  , classifications_()
  , objects_()
  , image_(nullptr)
  , extra_(nullptr){}
struct CaptureAllFromCameraResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptureAllFromCameraResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptureAllFromCameraResponseDefaultTypeInternal() {}
  union {
    CaptureAllFromCameraResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptureAllFromCameraResponseDefaultTypeInternal _CaptureAllFromCameraResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPropertiesResponse::GetPropertiesResponse(
    ::_pbi::ConstantInitialized)
  : classifications_supported_(false)
  , detections_supported_(false)
  , object_point_clouds_supported_(false){}
struct GetPropertiesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPropertiesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPropertiesResponseDefaultTypeInternal() {}
  union {
    GetPropertiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPropertiesResponseDefaultTypeInternal _GetPropertiesResponse_default_instance_;
}  // namespace v1
}  // namespace vision
}  // namespace service
}  // namespace viam
static ::_pb::Metadata file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_service_2fvision_2fv1_2fvision_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_service_2fvision_2fv1_2fvision_2eproto = nullptr;

const uint32_t TableStruct_service_2fvision_2fv1_2fvision_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, image_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, width_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, height_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsResponse, detections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraRequest, camera_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraResponse, detections_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, x_min_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, y_min_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, x_max_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, y_max_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, confidence_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, class_name_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, image_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, width_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, height_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, n_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsResponse, classifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraRequest, camera_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraRequest, n_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraResponse, classifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Classification, class_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Classification, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsRequest, camera_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsRequest, mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsResponse, mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsResponse, objects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetPropertiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetPropertiesRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetPropertiesRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraRequest, camera_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraRequest, return_image_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraRequest, return_classifications_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraRequest, return_detections_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraRequest, return_object_point_clouds_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraResponse, image_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraResponse, detections_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraResponse, classifications_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraResponse, objects_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::CaptureAllFromCameraResponse, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetPropertiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetPropertiesResponse, classifications_supported_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetPropertiesResponse, detections_supported_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetPropertiesResponse, object_point_clouds_supported_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::service::vision::v1::GetDetectionsRequest)},
  { 12, -1, -1, sizeof(::viam::service::vision::v1::GetDetectionsResponse)},
  { 19, -1, -1, sizeof(::viam::service::vision::v1::GetDetectionsFromCameraRequest)},
  { 28, -1, -1, sizeof(::viam::service::vision::v1::GetDetectionsFromCameraResponse)},
  { 35, 47, -1, sizeof(::viam::service::vision::v1::Detection)},
  { 53, -1, -1, sizeof(::viam::service::vision::v1::GetClassificationsRequest)},
  { 66, -1, -1, sizeof(::viam::service::vision::v1::GetClassificationsResponse)},
  { 73, -1, -1, sizeof(::viam::service::vision::v1::GetClassificationsFromCameraRequest)},
  { 83, -1, -1, sizeof(::viam::service::vision::v1::GetClassificationsFromCameraResponse)},
  { 90, -1, -1, sizeof(::viam::service::vision::v1::Classification)},
  { 98, -1, -1, sizeof(::viam::service::vision::v1::GetObjectPointCloudsRequest)},
  { 108, -1, -1, sizeof(::viam::service::vision::v1::GetObjectPointCloudsResponse)},
  { 116, -1, -1, sizeof(::viam::service::vision::v1::GetPropertiesRequest)},
  { 124, -1, -1, sizeof(::viam::service::vision::v1::CaptureAllFromCameraRequest)},
  { 137, -1, -1, sizeof(::viam::service::vision::v1::CaptureAllFromCameraResponse)},
  { 148, -1, -1, sizeof(::viam::service::vision::v1::GetPropertiesResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::service::vision::v1::_GetDetectionsRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetDetectionsResponse_default_instance_._instance,
  &::viam::service::vision::v1::_GetDetectionsFromCameraRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetDetectionsFromCameraResponse_default_instance_._instance,
  &::viam::service::vision::v1::_Detection_default_instance_._instance,
  &::viam::service::vision::v1::_GetClassificationsRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetClassificationsResponse_default_instance_._instance,
  &::viam::service::vision::v1::_GetClassificationsFromCameraRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetClassificationsFromCameraResponse_default_instance_._instance,
  &::viam::service::vision::v1::_Classification_default_instance_._instance,
  &::viam::service::vision::v1::_GetObjectPointCloudsRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetObjectPointCloudsResponse_default_instance_._instance,
  &::viam::service::vision::v1::_GetPropertiesRequest_default_instance_._instance,
  &::viam::service::vision::v1::_CaptureAllFromCameraRequest_default_instance_._instance,
  &::viam::service::vision::v1::_CaptureAllFromCameraResponse_default_instance_._instance,
  &::viam::service::vision::v1::_GetPropertiesResponse_default_instance_._instance,
};

const char descriptor_table_protodef_service_2fvision_2fv1_2fvision_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036service/vision/v1/vision.proto\022\026viam.s"
  "ervice.vision.v1\032\026common/v1/common.proto"
  "\032 component/camera/v1/camera.proto\032\034goog"
  "le/api/annotations.proto\032\034google/protobu"
  "f/struct.proto\"\272\001\n\024GetDetectionsRequest\022"
  "\022\n\004name\030\001 \001(\tR\004name\022\024\n\005image\030\002 \001(\014R\005imag"
  "e\022\024\n\005width\030\003 \001(\003R\005width\022\026\n\006height\030\004 \001(\003R"
  "\006height\022\033\n\tmime_type\030\005 \001(\tR\010mimeType\022-\n\005"
  "extra\030c \001(\0132\027.google.protobuf.StructR\005ex"
  "tra\"Z\n\025GetDetectionsResponse\022A\n\ndetectio"
  "ns\030\001 \003(\0132!.viam.service.vision.v1.Detect"
  "ionR\ndetections\"\204\001\n\036GetDetectionsFromCam"
  "eraRequest\022\022\n\004name\030\001 \001(\tR\004name\022\037\n\013camera"
  "_name\030\002 \001(\tR\ncameraName\022-\n\005extra\030c \001(\0132\027"
  ".google.protobuf.StructR\005extra\"d\n\037GetDet"
  "ectionsFromCameraResponse\022A\n\ndetections\030"
  "\001 \003(\0132!.viam.service.vision.v1.Detection"
  "R\ndetections\"\332\001\n\tDetection\022\030\n\005x_min\030\001 \001("
  "\003H\000R\004xMin\210\001\001\022\030\n\005y_min\030\002 \001(\003H\001R\004yMin\210\001\001\022\030"
  "\n\005x_max\030\003 \001(\003H\002R\004xMax\210\001\001\022\030\n\005y_max\030\004 \001(\003H"
  "\003R\004yMax\210\001\001\022\036\n\nconfidence\030\005 \001(\001R\nconfiden"
  "ce\022\035\n\nclass_name\030\006 \001(\tR\tclassNameB\010\n\006_x_"
  "minB\010\n\006_y_minB\010\n\006_x_maxB\010\n\006_y_max\"\315\001\n\031Ge"
  "tClassificationsRequest\022\022\n\004name\030\001 \001(\tR\004n"
  "ame\022\024\n\005image\030\002 \001(\014R\005image\022\024\n\005width\030\003 \001(\005"
  "R\005width\022\026\n\006height\030\004 \001(\005R\006height\022\033\n\tmime_"
  "type\030\005 \001(\tR\010mimeType\022\014\n\001n\030\006 \001(\005R\001n\022-\n\005ex"
  "tra\030c \001(\0132\027.google.protobuf.StructR\005extr"
  "a\"n\n\032GetClassificationsResponse\022P\n\017class"
  "ifications\030\001 \003(\0132&.viam.service.vision.v"
  "1.ClassificationR\017classifications\"\227\001\n#Ge"
  "tClassificationsFromCameraRequest\022\022\n\004nam"
  "e\030\001 \001(\tR\004name\022\037\n\013camera_name\030\002 \001(\tR\ncame"
  "raName\022\014\n\001n\030\003 \001(\005R\001n\022-\n\005extra\030c \001(\0132\027.go"
  "ogle.protobuf.StructR\005extra\"x\n$GetClassi"
  "ficationsFromCameraResponse\022P\n\017classific"
  "ations\030\001 \003(\0132&.viam.service.vision.v1.Cl"
  "assificationR\017classifications\"O\n\016Classif"
  "ication\022\035\n\nclass_name\030\001 \001(\tR\tclassName\022\036"
  "\n\nconfidence\030\002 \001(\001R\nconfidence\"\236\001\n\033GetOb"
  "jectPointCloudsRequest\022\022\n\004name\030\001 \001(\tR\004na"
  "me\022\037\n\013camera_name\030\002 \001(\tR\ncameraName\022\033\n\tm"
  "ime_type\030\003 \001(\tR\010mimeType\022-\n\005extra\030c \001(\0132"
  "\027.google.protobuf.StructR\005extra\"w\n\034GetOb"
  "jectPointCloudsResponse\022\033\n\tmime_type\030\001 \001"
  "(\tR\010mimeType\022:\n\007objects\030\002 \003(\0132 .viam.com"
  "mon.v1.PointCloudObjectR\007objects\"Y\n\024GetP"
  "ropertiesRequest\022\022\n\004name\030\001 \001(\tR\004name\022-\n\005"
  "extra\030c \001(\0132\027.google.protobuf.StructR\005ex"
  "tra\"\305\002\n\033CaptureAllFromCameraRequest\022\022\n\004n"
  "ame\030\001 \001(\tR\004name\022\037\n\013camera_name\030\002 \001(\tR\nca"
  "meraName\022!\n\014return_image\030\003 \001(\010R\013returnIm"
  "age\0225\n\026return_classifications\030\004 \001(\010R\025ret"
  "urnClassifications\022+\n\021return_detections\030"
  "\005 \001(\010R\020returnDetections\022;\n\032return_object"
  "_point_clouds\030\006 \001(\010R\027returnObjectPointCl"
  "ouds\022-\n\005extra\030c \001(\0132\027.google.protobuf.St"
  "ructR\005extra\"\325\002\n\034CaptureAllFromCameraResp"
  "onse\0225\n\005image\030\001 \001(\0132\037.viam.component.cam"
  "era.v1.ImageR\005image\022A\n\ndetections\030\002 \003(\0132"
  "!.viam.service.vision.v1.DetectionR\ndete"
  "ctions\022P\n\017classifications\030\003 \003(\0132&.viam.s"
  "ervice.vision.v1.ClassificationR\017classif"
  "ications\022:\n\007objects\030\004 \003(\0132 .viam.common."
  "v1.PointCloudObjectR\007objects\022-\n\005extra\030c "
  "\001(\0132\027.google.protobuf.StructR\005extra\"\312\001\n\025"
  "GetPropertiesResponse\022;\n\031classifications"
  "_supported\030\001 \001(\010R\030classificationsSupport"
  "ed\0221\n\024detections_supported\030\002 \001(\010R\023detect"
  "ionsSupported\022A\n\035object_point_clouds_sup"
  "ported\030\003 \001(\010R\032objectPointCloudsSupported"
  "2\315\013\n\rVisionService\022\310\001\n\027GetDetectionsFrom"
  "Camera\0226.viam.service.vision.v1.GetDetec"
  "tionsFromCameraRequest\0327.viam.service.vi"
  "sion.v1.GetDetectionsFromCameraResponse\""
  "<\202\323\344\223\0026\"4/viam/api/v1/service/vision/{na"
  "me}/camera_detections\022\243\001\n\rGetDetections\022"
  ",.viam.service.vision.v1.GetDetectionsRe"
  "quest\032-.viam.service.vision.v1.GetDetect"
  "ionsResponse\"5\202\323\344\223\002/\"-/viam/api/v1/servi"
  "ce/vision/{name}/detections\022\334\001\n\034GetClass"
  "ificationsFromCamera\022;.viam.service.visi"
  "on.v1.GetClassificationsFromCameraReques"
  "t\032<.viam.service.vision.v1.GetClassifica"
  "tionsFromCameraResponse\"A\202\323\344\223\002;\"9/viam/a"
  "pi/v1/service/vision/{name}/camera_class"
  "ifications\022\267\001\n\022GetClassifications\0221.viam"
  ".service.vision.v1.GetClassificationsReq"
  "uest\0322.viam.service.vision.v1.GetClassif"
  "icationsResponse\":\202\323\344\223\0024\"2/viam/api/v1/s"
  "ervice/vision/{name}/classifications\022\301\001\n"
  "\024GetObjectPointClouds\0223.viam.service.vis"
  "ion.v1.GetObjectPointCloudsRequest\0324.via"
  "m.service.vision.v1.GetObjectPointClouds"
  "Response\">\202\323\344\223\0028\"6/viam/api/v1/service/v"
  "ision/{name}/object_point_clouds\022\247\001\n\rGet"
  "Properties\022,.viam.service.vision.v1.GetP"
  "ropertiesRequest\032-.viam.service.vision.v"
  "1.GetPropertiesResponse\"9\202\323\344\223\0023\"1/viam/a"
  "pi/v1/service/vision/{name}/get_properti"
  "es\022\271\001\n\024CaptureAllFromCamera\0223.viam.servi"
  "ce.vision.v1.CaptureAllFromCameraRequest"
  "\0324.viam.service.vision.v1.CaptureAllFrom"
  "CameraResponse\"6\202\323\344\223\0020\"./viam/api/v1/ser"
  "vice/vision/{name}/capture_all\022\207\001\n\tDoCom"
  "mand\022 .viam.common.v1.DoCommandRequest\032!"
  ".viam.common.v1.DoCommandResponse\"5\202\323\344\223\002"
  "/\"-/viam/api/v1/service/vision/{name}/do"
  "_commandB\?\n\032com.viam.service.vision.v1Z!"
  "go.viam.com/api/service/vision/v1b\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_service_2fvision_2fv1_2fvision_2eproto_deps[4] = {
  &::descriptor_table_common_2fv1_2fcommon_2eproto,
  &::descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_service_2fvision_2fv1_2fvision_2eproto = {
    false, false, 4401, descriptor_table_protodef_service_2fvision_2fv1_2fvision_2eproto,
    "service/vision/v1/vision.proto",
    &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once, descriptor_table_service_2fvision_2fv1_2fvision_2eproto_deps, 4, 16,
    schemas, file_default_instances, TableStruct_service_2fvision_2fv1_2fvision_2eproto::offsets,
    file_level_metadata_service_2fvision_2fv1_2fvision_2eproto, file_level_enum_descriptors_service_2fvision_2fv1_2fvision_2eproto,
    file_level_service_descriptors_service_2fvision_2fv1_2fvision_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter() {
  return &descriptor_table_service_2fvision_2fv1_2fvision_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_service_2fvision_2fv1_2fvision_2eproto(&descriptor_table_service_2fvision_2fv1_2fvision_2eproto);
namespace viam {
namespace service {
namespace vision {
namespace v1 {

// ===================================================================

class GetDetectionsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetDetectionsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetDetectionsRequest::_Internal::extra(const GetDetectionsRequest* msg) {
  return *msg->extra_;
}
void GetDetectionsRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetDetectionsRequest::GetDetectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetDetectionsRequest)
}
GetDetectionsRequest::GetDetectionsRequest(const GetDetectionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    image_.Set(from._internal_image(), 
      GetArenaForAllocation());
  }
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetDetectionsRequest)
}

inline void GetDetectionsRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extra_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&extra_)) + sizeof(height_));
}

GetDetectionsRequest::~GetDetectionsRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetDetectionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDetectionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  image_.Destroy();
  mime_type_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetDetectionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDetectionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetDetectionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  image_.ClearToEmpty();
  mime_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDetectionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetDetectionsRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2 [json_name = "image"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 width = 3 [json_name = "width"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 height = 4 [json_name = "height"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 5 [json_name = "mimeType"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetDetectionsRequest.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDetectionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetDetectionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetDetectionsRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes image = 2 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  // int64 width = 3 [json_name = "width"];
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_width(), target);
  }

  // int64 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_height(), target);
  }

  // string mime_type = 5 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetDetectionsRequest.mime_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mime_type(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetDetectionsRequest)
  return target;
}

size_t GetDetectionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetDetectionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes image = 2 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // string mime_type = 5 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  // int64 width = 3 [json_name = "width"];
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_width());
  }

  // int64 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDetectionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDetectionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDetectionsRequest::GetClassData() const { return &_class_data_; }

void GetDetectionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDetectionsRequest *>(to)->MergeFrom(
      static_cast<const GetDetectionsRequest &>(from));
}


void GetDetectionsRequest::MergeFrom(const GetDetectionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetDetectionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDetectionsRequest::CopyFrom(const GetDetectionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetDetectionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDetectionsRequest::IsInitialized() const {
  return true;
}

void GetDetectionsRequest::InternalSwap(GetDetectionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDetectionsRequest, height_)
      + sizeof(GetDetectionsRequest::height_)
      - PROTOBUF_FIELD_OFFSET(GetDetectionsRequest, extra_)>(
          reinterpret_cast<char*>(&extra_),
          reinterpret_cast<char*>(&other->extra_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDetectionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[0]);
}

// ===================================================================

class GetDetectionsResponse::_Internal {
 public:
};

GetDetectionsResponse::GetDetectionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  detections_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetDetectionsResponse)
}
GetDetectionsResponse::GetDetectionsResponse(const GetDetectionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detections_(from.detections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetDetectionsResponse)
}

inline void GetDetectionsResponse::SharedCtor() {
}

GetDetectionsResponse::~GetDetectionsResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetDetectionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDetectionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetDetectionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDetectionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetDetectionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDetectionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDetectionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetDetectionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detections_size()); i < n; i++) {
    const auto& repfield = this->_internal_detections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetDetectionsResponse)
  return target;
}

size_t GetDetectionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetDetectionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
  total_size += 1UL * this->_internal_detections_size();
  for (const auto& msg : this->detections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDetectionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDetectionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDetectionsResponse::GetClassData() const { return &_class_data_; }

void GetDetectionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDetectionsResponse *>(to)->MergeFrom(
      static_cast<const GetDetectionsResponse &>(from));
}


void GetDetectionsResponse::MergeFrom(const GetDetectionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetDetectionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDetectionsResponse::CopyFrom(const GetDetectionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetDetectionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDetectionsResponse::IsInitialized() const {
  return true;
}

void GetDetectionsResponse::InternalSwap(GetDetectionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  detections_.InternalSwap(&other->detections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDetectionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[1]);
}

// ===================================================================

class GetDetectionsFromCameraRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetDetectionsFromCameraRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetDetectionsFromCameraRequest::_Internal::extra(const GetDetectionsFromCameraRequest* msg) {
  return *msg->extra_;
}
void GetDetectionsFromCameraRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetDetectionsFromCameraRequest::GetDetectionsFromCameraRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetDetectionsFromCameraRequest)
}
GetDetectionsFromCameraRequest::GetDetectionsFromCameraRequest(const GetDetectionsFromCameraRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    camera_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    camera_name_.Set(from._internal_camera_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetDetectionsFromCameraRequest)
}

inline void GetDetectionsFromCameraRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
camera_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  camera_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

GetDetectionsFromCameraRequest::~GetDetectionsFromCameraRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDetectionsFromCameraRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  camera_name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetDetectionsFromCameraRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDetectionsFromCameraRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  camera_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDetectionsFromCameraRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetDetectionsFromCameraRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string camera_name = 2 [json_name = "cameraName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetDetectionsFromCameraRequest.camera_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDetectionsFromCameraRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetDetectionsFromCameraRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetDetectionsFromCameraRequest.camera_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_name(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  return target;
}

size_t GetDetectionsFromCameraRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDetectionsFromCameraRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDetectionsFromCameraRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDetectionsFromCameraRequest::GetClassData() const { return &_class_data_; }

void GetDetectionsFromCameraRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDetectionsFromCameraRequest *>(to)->MergeFrom(
      static_cast<const GetDetectionsFromCameraRequest &>(from));
}


void GetDetectionsFromCameraRequest::MergeFrom(const GetDetectionsFromCameraRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_camera_name().empty()) {
    _internal_set_camera_name(from._internal_camera_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDetectionsFromCameraRequest::CopyFrom(const GetDetectionsFromCameraRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDetectionsFromCameraRequest::IsInitialized() const {
  return true;
}

void GetDetectionsFromCameraRequest::InternalSwap(GetDetectionsFromCameraRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &camera_name_, lhs_arena,
      &other->camera_name_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDetectionsFromCameraRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[2]);
}

// ===================================================================

class GetDetectionsFromCameraResponse::_Internal {
 public:
};

GetDetectionsFromCameraResponse::GetDetectionsFromCameraResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  detections_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetDetectionsFromCameraResponse)
}
GetDetectionsFromCameraResponse::GetDetectionsFromCameraResponse(const GetDetectionsFromCameraResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detections_(from.detections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetDetectionsFromCameraResponse)
}

inline void GetDetectionsFromCameraResponse::SharedCtor() {
}

GetDetectionsFromCameraResponse::~GetDetectionsFromCameraResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDetectionsFromCameraResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetDetectionsFromCameraResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDetectionsFromCameraResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDetectionsFromCameraResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDetectionsFromCameraResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detections_size()); i < n; i++) {
    const auto& repfield = this->_internal_detections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  return target;
}

size_t GetDetectionsFromCameraResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
  total_size += 1UL * this->_internal_detections_size();
  for (const auto& msg : this->detections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDetectionsFromCameraResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDetectionsFromCameraResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDetectionsFromCameraResponse::GetClassData() const { return &_class_data_; }

void GetDetectionsFromCameraResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDetectionsFromCameraResponse *>(to)->MergeFrom(
      static_cast<const GetDetectionsFromCameraResponse &>(from));
}


void GetDetectionsFromCameraResponse::MergeFrom(const GetDetectionsFromCameraResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDetectionsFromCameraResponse::CopyFrom(const GetDetectionsFromCameraResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDetectionsFromCameraResponse::IsInitialized() const {
  return true;
}

void GetDetectionsFromCameraResponse::InternalSwap(GetDetectionsFromCameraResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  detections_.InternalSwap(&other->detections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDetectionsFromCameraResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[3]);
}

// ===================================================================

class Detection::_Internal {
 public:
  using HasBits = decltype(std::declval<Detection>()._has_bits_);
  static void set_has_x_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Detection::Detection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.Detection)
}
Detection::Detection(const Detection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_name().empty()) {
    class_name_.Set(from._internal_class_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_min_, &from.x_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&x_min_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.Detection)
}

inline void Detection::SharedCtor() {
class_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&x_min_)) + sizeof(confidence_));
}

Detection::~Detection() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.Detection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Detection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.Destroy();
}

void Detection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Detection::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.Detection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_max_) -
        reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  }
  confidence_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 x_min = 1 [json_name = "xMin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x_min(&has_bits);
          x_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 y_min = 2 [json_name = "yMin"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y_min(&has_bits);
          y_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 x_max = 3 [json_name = "xMax"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_x_max(&has_bits);
          x_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 y_max = 4 [json_name = "yMax"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_y_max(&has_bits);
          y_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double confidence = 5 [json_name = "confidence"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string class_name = 6 [json_name = "className"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.Detection.class_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Detection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.Detection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 x_min = 1 [json_name = "xMin"];
  if (_internal_has_x_min()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_x_min(), target);
  }

  // optional int64 y_min = 2 [json_name = "yMin"];
  if (_internal_has_y_min()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_y_min(), target);
  }

  // optional int64 x_max = 3 [json_name = "xMax"];
  if (_internal_has_x_max()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_x_max(), target);
  }

  // optional int64 y_max = 4 [json_name = "yMax"];
  if (_internal_has_y_max()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_y_max(), target);
  }

  // double confidence = 5 [json_name = "confidence"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_confidence(), target);
  }

  // string class_name = 6 [json_name = "className"];
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.Detection.class_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_class_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.Detection)
  return target;
}

size_t Detection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.Detection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_name = 6 [json_name = "className"];
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 x_min = 1 [json_name = "xMin"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_x_min());
    }

    // optional int64 y_min = 2 [json_name = "yMin"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_y_min());
    }

    // optional int64 x_max = 3 [json_name = "xMax"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_x_max());
    }

    // optional int64 y_max = 4 [json_name = "yMax"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_y_max());
    }

  }
  // double confidence = 5 [json_name = "confidence"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Detection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Detection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Detection::GetClassData() const { return &_class_data_; }

void Detection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Detection *>(to)->MergeFrom(
      static_cast<const Detection &>(from));
}


void Detection::MergeFrom(const Detection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.Detection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_min_ = from.x_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_min_ = from.y_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_max_ = from.x_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_max_ = from.y_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = from._internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Detection::CopyFrom(const Detection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.Detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection::IsInitialized() const {
  return true;
}

void Detection::InternalSwap(Detection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detection, confidence_)
      + sizeof(Detection::confidence_)
      - PROTOBUF_FIELD_OFFSET(Detection, x_min_)>(
          reinterpret_cast<char*>(&x_min_),
          reinterpret_cast<char*>(&other->x_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[4]);
}

// ===================================================================

class GetClassificationsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetClassificationsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetClassificationsRequest::_Internal::extra(const GetClassificationsRequest* msg) {
  return *msg->extra_;
}
void GetClassificationsRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetClassificationsRequest::GetClassificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetClassificationsRequest)
}
GetClassificationsRequest::GetClassificationsRequest(const GetClassificationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    image_.Set(from._internal_image(), 
      GetArenaForAllocation());
  }
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_) -
    reinterpret_cast<char*>(&width_)) + sizeof(n_));
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetClassificationsRequest)
}

inline void GetClassificationsRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extra_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&n_) -
    reinterpret_cast<char*>(&extra_)) + sizeof(n_));
}

GetClassificationsRequest::~GetClassificationsRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetClassificationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClassificationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  image_.Destroy();
  mime_type_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetClassificationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetClassificationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetClassificationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  image_.ClearToEmpty();
  mime_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_) -
      reinterpret_cast<char*>(&width_)) + sizeof(n_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClassificationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetClassificationsRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2 [json_name = "image"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 3 [json_name = "width"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 4 [json_name = "height"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 5 [json_name = "mimeType"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetClassificationsRequest.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // int32 n = 6 [json_name = "n"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClassificationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetClassificationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetClassificationsRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes image = 2 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  // int32 width = 3 [json_name = "width"];
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // string mime_type = 5 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetClassificationsRequest.mime_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mime_type(), target);
  }

  // int32 n = 6 [json_name = "n"];
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_n(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetClassificationsRequest)
  return target;
}

size_t GetClassificationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetClassificationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes image = 2 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // string mime_type = 5 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  // int32 width = 3 [json_name = "width"];
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 n = 6 [json_name = "n"];
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClassificationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetClassificationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassificationsRequest::GetClassData() const { return &_class_data_; }

void GetClassificationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetClassificationsRequest *>(to)->MergeFrom(
      static_cast<const GetClassificationsRequest &>(from));
}


void GetClassificationsRequest::MergeFrom(const GetClassificationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetClassificationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_n() != 0) {
    _internal_set_n(from._internal_n());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClassificationsRequest::CopyFrom(const GetClassificationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetClassificationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClassificationsRequest::IsInitialized() const {
  return true;
}

void GetClassificationsRequest::InternalSwap(GetClassificationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetClassificationsRequest, n_)
      + sizeof(GetClassificationsRequest::n_)
      - PROTOBUF_FIELD_OFFSET(GetClassificationsRequest, extra_)>(
          reinterpret_cast<char*>(&extra_),
          reinterpret_cast<char*>(&other->extra_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClassificationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[5]);
}

// ===================================================================

class GetClassificationsResponse::_Internal {
 public:
};

GetClassificationsResponse::GetClassificationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  classifications_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetClassificationsResponse)
}
GetClassificationsResponse::GetClassificationsResponse(const GetClassificationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      classifications_(from.classifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetClassificationsResponse)
}

inline void GetClassificationsResponse::SharedCtor() {
}

GetClassificationsResponse::~GetClassificationsResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetClassificationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClassificationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetClassificationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetClassificationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetClassificationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifications_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClassificationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClassificationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetClassificationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classifications_size()); i < n; i++) {
    const auto& repfield = this->_internal_classifications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetClassificationsResponse)
  return target;
}

size_t GetClassificationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetClassificationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
  total_size += 1UL * this->_internal_classifications_size();
  for (const auto& msg : this->classifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClassificationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetClassificationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassificationsResponse::GetClassData() const { return &_class_data_; }

void GetClassificationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetClassificationsResponse *>(to)->MergeFrom(
      static_cast<const GetClassificationsResponse &>(from));
}


void GetClassificationsResponse::MergeFrom(const GetClassificationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetClassificationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  classifications_.MergeFrom(from.classifications_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClassificationsResponse::CopyFrom(const GetClassificationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetClassificationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClassificationsResponse::IsInitialized() const {
  return true;
}

void GetClassificationsResponse::InternalSwap(GetClassificationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  classifications_.InternalSwap(&other->classifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClassificationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[6]);
}

// ===================================================================

class GetClassificationsFromCameraRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetClassificationsFromCameraRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetClassificationsFromCameraRequest::_Internal::extra(const GetClassificationsFromCameraRequest* msg) {
  return *msg->extra_;
}
void GetClassificationsFromCameraRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetClassificationsFromCameraRequest::GetClassificationsFromCameraRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetClassificationsFromCameraRequest)
}
GetClassificationsFromCameraRequest::GetClassificationsFromCameraRequest(const GetClassificationsFromCameraRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    camera_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    camera_name_.Set(from._internal_camera_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  n_ = from.n_;
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetClassificationsFromCameraRequest)
}

inline void GetClassificationsFromCameraRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
camera_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  camera_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extra_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&n_) -
    reinterpret_cast<char*>(&extra_)) + sizeof(n_));
}

GetClassificationsFromCameraRequest::~GetClassificationsFromCameraRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClassificationsFromCameraRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  camera_name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetClassificationsFromCameraRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetClassificationsFromCameraRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  camera_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  n_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClassificationsFromCameraRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetClassificationsFromCameraRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string camera_name = 2 [json_name = "cameraName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetClassificationsFromCameraRequest.camera_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 n = 3 [json_name = "n"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClassificationsFromCameraRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetClassificationsFromCameraRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetClassificationsFromCameraRequest.camera_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_name(), target);
  }

  // int32 n = 3 [json_name = "n"];
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_n(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  return target;
}

size_t GetClassificationsFromCameraRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  // int32 n = 3 [json_name = "n"];
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClassificationsFromCameraRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetClassificationsFromCameraRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassificationsFromCameraRequest::GetClassData() const { return &_class_data_; }

void GetClassificationsFromCameraRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetClassificationsFromCameraRequest *>(to)->MergeFrom(
      static_cast<const GetClassificationsFromCameraRequest &>(from));
}


void GetClassificationsFromCameraRequest::MergeFrom(const GetClassificationsFromCameraRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_camera_name().empty()) {
    _internal_set_camera_name(from._internal_camera_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  if (from._internal_n() != 0) {
    _internal_set_n(from._internal_n());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClassificationsFromCameraRequest::CopyFrom(const GetClassificationsFromCameraRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClassificationsFromCameraRequest::IsInitialized() const {
  return true;
}

void GetClassificationsFromCameraRequest::InternalSwap(GetClassificationsFromCameraRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &camera_name_, lhs_arena,
      &other->camera_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetClassificationsFromCameraRequest, n_)
      + sizeof(GetClassificationsFromCameraRequest::n_)
      - PROTOBUF_FIELD_OFFSET(GetClassificationsFromCameraRequest, extra_)>(
          reinterpret_cast<char*>(&extra_),
          reinterpret_cast<char*>(&other->extra_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClassificationsFromCameraRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[7]);
}

// ===================================================================

class GetClassificationsFromCameraResponse::_Internal {
 public:
};

GetClassificationsFromCameraResponse::GetClassificationsFromCameraResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  classifications_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetClassificationsFromCameraResponse)
}
GetClassificationsFromCameraResponse::GetClassificationsFromCameraResponse(const GetClassificationsFromCameraResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      classifications_(from.classifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetClassificationsFromCameraResponse)
}

inline void GetClassificationsFromCameraResponse::SharedCtor() {
}

GetClassificationsFromCameraResponse::~GetClassificationsFromCameraResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClassificationsFromCameraResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetClassificationsFromCameraResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetClassificationsFromCameraResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifications_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClassificationsFromCameraResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClassificationsFromCameraResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classifications_size()); i < n; i++) {
    const auto& repfield = this->_internal_classifications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  return target;
}

size_t GetClassificationsFromCameraResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
  total_size += 1UL * this->_internal_classifications_size();
  for (const auto& msg : this->classifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClassificationsFromCameraResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetClassificationsFromCameraResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassificationsFromCameraResponse::GetClassData() const { return &_class_data_; }

void GetClassificationsFromCameraResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetClassificationsFromCameraResponse *>(to)->MergeFrom(
      static_cast<const GetClassificationsFromCameraResponse &>(from));
}


void GetClassificationsFromCameraResponse::MergeFrom(const GetClassificationsFromCameraResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  classifications_.MergeFrom(from.classifications_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClassificationsFromCameraResponse::CopyFrom(const GetClassificationsFromCameraResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClassificationsFromCameraResponse::IsInitialized() const {
  return true;
}

void GetClassificationsFromCameraResponse::InternalSwap(GetClassificationsFromCameraResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  classifications_.InternalSwap(&other->classifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClassificationsFromCameraResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[8]);
}

// ===================================================================

class Classification::_Internal {
 public:
};

Classification::Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.Classification)
}
Classification::Classification(const Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_name().empty()) {
    class_name_.Set(from._internal_class_name(), 
      GetArenaForAllocation());
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.Classification)
}

inline void Classification::SharedCtor() {
class_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
confidence_ = 0;
}

Classification::~Classification() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.Classification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.Destroy();
}

void Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.Classification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmpty();
  confidence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Classification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_name = 1 [json_name = "className"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.Classification.class_name"));
        } else
          goto handle_unusual;
        continue;
      // double confidence = 2 [json_name = "confidence"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Classification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.Classification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1 [json_name = "className"];
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.Classification.class_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_name(), target);
  }

  // double confidence = 2 [json_name = "confidence"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.Classification)
  return target;
}

size_t Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.Classification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_name = 1 [json_name = "className"];
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // double confidence = 2 [json_name = "confidence"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Classification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Classification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Classification::GetClassData() const { return &_class_data_; }

void Classification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Classification *>(to)->MergeFrom(
      static_cast<const Classification &>(from));
}


void Classification::MergeFrom(const Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = from._internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Classification::CopyFrom(const Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Classification::IsInitialized() const {
  return true;
}

void Classification::InternalSwap(Classification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Classification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[9]);
}

// ===================================================================

class GetObjectPointCloudsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetObjectPointCloudsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetObjectPointCloudsRequest::_Internal::extra(const GetObjectPointCloudsRequest* msg) {
  return *msg->extra_;
}
void GetObjectPointCloudsRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetObjectPointCloudsRequest::GetObjectPointCloudsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetObjectPointCloudsRequest)
}
GetObjectPointCloudsRequest::GetObjectPointCloudsRequest(const GetObjectPointCloudsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    camera_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    camera_name_.Set(from._internal_camera_name(), 
      GetArenaForAllocation());
  }
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetObjectPointCloudsRequest)
}

inline void GetObjectPointCloudsRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
camera_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  camera_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

GetObjectPointCloudsRequest::~GetObjectPointCloudsRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetObjectPointCloudsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetObjectPointCloudsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  camera_name_.Destroy();
  mime_type_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetObjectPointCloudsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetObjectPointCloudsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetObjectPointCloudsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  camera_name_.ClearToEmpty();
  mime_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetObjectPointCloudsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetObjectPointCloudsRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string camera_name = 2 [json_name = "cameraName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetObjectPointCloudsRequest.camera_name"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 3 [json_name = "mimeType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetObjectPointCloudsRequest.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetObjectPointCloudsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetObjectPointCloudsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetObjectPointCloudsRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetObjectPointCloudsRequest.camera_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_name(), target);
  }

  // string mime_type = 3 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetObjectPointCloudsRequest.mime_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mime_type(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetObjectPointCloudsRequest)
  return target;
}

size_t GetObjectPointCloudsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetObjectPointCloudsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_name());
  }

  // string mime_type = 3 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetObjectPointCloudsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetObjectPointCloudsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetObjectPointCloudsRequest::GetClassData() const { return &_class_data_; }

void GetObjectPointCloudsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetObjectPointCloudsRequest *>(to)->MergeFrom(
      static_cast<const GetObjectPointCloudsRequest &>(from));
}


void GetObjectPointCloudsRequest::MergeFrom(const GetObjectPointCloudsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetObjectPointCloudsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_camera_name().empty()) {
    _internal_set_camera_name(from._internal_camera_name());
  }
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetObjectPointCloudsRequest::CopyFrom(const GetObjectPointCloudsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetObjectPointCloudsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectPointCloudsRequest::IsInitialized() const {
  return true;
}

void GetObjectPointCloudsRequest::InternalSwap(GetObjectPointCloudsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &camera_name_, lhs_arena,
      &other->camera_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetObjectPointCloudsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[10]);
}

// ===================================================================

class GetObjectPointCloudsResponse::_Internal {
 public:
};

void GetObjectPointCloudsResponse::clear_objects() {
  objects_.Clear();
}
GetObjectPointCloudsResponse::GetObjectPointCloudsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  objects_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetObjectPointCloudsResponse)
}
GetObjectPointCloudsResponse::GetObjectPointCloudsResponse(const GetObjectPointCloudsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetObjectPointCloudsResponse)
}

inline void GetObjectPointCloudsResponse::SharedCtor() {
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetObjectPointCloudsResponse::~GetObjectPointCloudsResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetObjectPointCloudsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetObjectPointCloudsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mime_type_.Destroy();
}

void GetObjectPointCloudsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetObjectPointCloudsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetObjectPointCloudsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  mime_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetObjectPointCloudsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mime_type = 1 [json_name = "mimeType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetObjectPointCloudsResponse.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.common.v1.PointCloudObject objects = 2 [json_name = "objects"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetObjectPointCloudsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetObjectPointCloudsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mime_type = 1 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetObjectPointCloudsResponse.mime_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mime_type(), target);
  }

  // repeated .viam.common.v1.PointCloudObject objects = 2 [json_name = "objects"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetObjectPointCloudsResponse)
  return target;
}

size_t GetObjectPointCloudsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetObjectPointCloudsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.common.v1.PointCloudObject objects = 2 [json_name = "objects"];
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string mime_type = 1 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetObjectPointCloudsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetObjectPointCloudsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetObjectPointCloudsResponse::GetClassData() const { return &_class_data_; }

void GetObjectPointCloudsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetObjectPointCloudsResponse *>(to)->MergeFrom(
      static_cast<const GetObjectPointCloudsResponse &>(from));
}


void GetObjectPointCloudsResponse::MergeFrom(const GetObjectPointCloudsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetObjectPointCloudsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetObjectPointCloudsResponse::CopyFrom(const GetObjectPointCloudsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetObjectPointCloudsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectPointCloudsResponse::IsInitialized() const {
  return true;
}

void GetObjectPointCloudsResponse::InternalSwap(GetObjectPointCloudsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetObjectPointCloudsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[11]);
}

// ===================================================================

class GetPropertiesRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetPropertiesRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetPropertiesRequest::_Internal::extra(const GetPropertiesRequest* msg) {
  return *msg->extra_;
}
void GetPropertiesRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetPropertiesRequest::GetPropertiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetPropertiesRequest)
}
GetPropertiesRequest::GetPropertiesRequest(const GetPropertiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetPropertiesRequest)
}

inline void GetPropertiesRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

GetPropertiesRequest::~GetPropertiesRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetPropertiesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPropertiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetPropertiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPropertiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetPropertiesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPropertiesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetPropertiesRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPropertiesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetPropertiesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetPropertiesRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetPropertiesRequest)
  return target;
}

size_t GetPropertiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetPropertiesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPropertiesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPropertiesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPropertiesRequest::GetClassData() const { return &_class_data_; }

void GetPropertiesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPropertiesRequest *>(to)->MergeFrom(
      static_cast<const GetPropertiesRequest &>(from));
}


void GetPropertiesRequest::MergeFrom(const GetPropertiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetPropertiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPropertiesRequest::CopyFrom(const GetPropertiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetPropertiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPropertiesRequest::IsInitialized() const {
  return true;
}

void GetPropertiesRequest::InternalSwap(GetPropertiesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPropertiesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[12]);
}

// ===================================================================

class CaptureAllFromCameraRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const CaptureAllFromCameraRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
CaptureAllFromCameraRequest::_Internal::extra(const CaptureAllFromCameraRequest* msg) {
  return *msg->extra_;
}
void CaptureAllFromCameraRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
CaptureAllFromCameraRequest::CaptureAllFromCameraRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.CaptureAllFromCameraRequest)
}
CaptureAllFromCameraRequest::CaptureAllFromCameraRequest(const CaptureAllFromCameraRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    camera_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    camera_name_.Set(from._internal_camera_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  ::memcpy(&return_image_, &from.return_image_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_object_point_clouds_) -
    reinterpret_cast<char*>(&return_image_)) + sizeof(return_object_point_clouds_));
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.CaptureAllFromCameraRequest)
}

inline void CaptureAllFromCameraRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
camera_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  camera_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extra_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&return_object_point_clouds_) -
    reinterpret_cast<char*>(&extra_)) + sizeof(return_object_point_clouds_));
}

CaptureAllFromCameraRequest::~CaptureAllFromCameraRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.CaptureAllFromCameraRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CaptureAllFromCameraRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  camera_name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void CaptureAllFromCameraRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CaptureAllFromCameraRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.CaptureAllFromCameraRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  camera_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  ::memset(&return_image_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_object_point_clouds_) -
      reinterpret_cast<char*>(&return_image_)) + sizeof(return_object_point_clouds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CaptureAllFromCameraRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.CaptureAllFromCameraRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string camera_name = 2 [json_name = "cameraName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.CaptureAllFromCameraRequest.camera_name"));
        } else
          goto handle_unusual;
        continue;
      // bool return_image = 3 [json_name = "returnImage"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          return_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool return_classifications = 4 [json_name = "returnClassifications"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          return_classifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool return_detections = 5 [json_name = "returnDetections"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          return_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool return_object_point_clouds = 6 [json_name = "returnObjectPointClouds"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          return_object_point_clouds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CaptureAllFromCameraRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.CaptureAllFromCameraRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.CaptureAllFromCameraRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.CaptureAllFromCameraRequest.camera_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_name(), target);
  }

  // bool return_image = 3 [json_name = "returnImage"];
  if (this->_internal_return_image() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_return_image(), target);
  }

  // bool return_classifications = 4 [json_name = "returnClassifications"];
  if (this->_internal_return_classifications() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_return_classifications(), target);
  }

  // bool return_detections = 5 [json_name = "returnDetections"];
  if (this->_internal_return_detections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_return_detections(), target);
  }

  // bool return_object_point_clouds = 6 [json_name = "returnObjectPointClouds"];
  if (this->_internal_return_object_point_clouds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_return_object_point_clouds(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.CaptureAllFromCameraRequest)
  return target;
}

size_t CaptureAllFromCameraRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.CaptureAllFromCameraRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  // bool return_image = 3 [json_name = "returnImage"];
  if (this->_internal_return_image() != 0) {
    total_size += 1 + 1;
  }

  // bool return_classifications = 4 [json_name = "returnClassifications"];
  if (this->_internal_return_classifications() != 0) {
    total_size += 1 + 1;
  }

  // bool return_detections = 5 [json_name = "returnDetections"];
  if (this->_internal_return_detections() != 0) {
    total_size += 1 + 1;
  }

  // bool return_object_point_clouds = 6 [json_name = "returnObjectPointClouds"];
  if (this->_internal_return_object_point_clouds() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CaptureAllFromCameraRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CaptureAllFromCameraRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CaptureAllFromCameraRequest::GetClassData() const { return &_class_data_; }

void CaptureAllFromCameraRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CaptureAllFromCameraRequest *>(to)->MergeFrom(
      static_cast<const CaptureAllFromCameraRequest &>(from));
}


void CaptureAllFromCameraRequest::MergeFrom(const CaptureAllFromCameraRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.CaptureAllFromCameraRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_camera_name().empty()) {
    _internal_set_camera_name(from._internal_camera_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  if (from._internal_return_image() != 0) {
    _internal_set_return_image(from._internal_return_image());
  }
  if (from._internal_return_classifications() != 0) {
    _internal_set_return_classifications(from._internal_return_classifications());
  }
  if (from._internal_return_detections() != 0) {
    _internal_set_return_detections(from._internal_return_detections());
  }
  if (from._internal_return_object_point_clouds() != 0) {
    _internal_set_return_object_point_clouds(from._internal_return_object_point_clouds());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CaptureAllFromCameraRequest::CopyFrom(const CaptureAllFromCameraRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.CaptureAllFromCameraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureAllFromCameraRequest::IsInitialized() const {
  return true;
}

void CaptureAllFromCameraRequest::InternalSwap(CaptureAllFromCameraRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &camera_name_, lhs_arena,
      &other->camera_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaptureAllFromCameraRequest, return_object_point_clouds_)
      + sizeof(CaptureAllFromCameraRequest::return_object_point_clouds_)
      - PROTOBUF_FIELD_OFFSET(CaptureAllFromCameraRequest, extra_)>(
          reinterpret_cast<char*>(&extra_),
          reinterpret_cast<char*>(&other->extra_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CaptureAllFromCameraRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[13]);
}

// ===================================================================

class CaptureAllFromCameraResponse::_Internal {
 public:
  static const ::viam::component::camera::v1::Image& image(const CaptureAllFromCameraResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const CaptureAllFromCameraResponse* msg);
};

const ::viam::component::camera::v1::Image&
CaptureAllFromCameraResponse::_Internal::image(const CaptureAllFromCameraResponse* msg) {
  return *msg->image_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
CaptureAllFromCameraResponse::_Internal::extra(const CaptureAllFromCameraResponse* msg) {
  return *msg->extra_;
}
void CaptureAllFromCameraResponse::clear_image() {
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
void CaptureAllFromCameraResponse::clear_objects() {
  objects_.Clear();
}
void CaptureAllFromCameraResponse::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
CaptureAllFromCameraResponse::CaptureAllFromCameraResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  detections_(arena),
  classifications_(arena),
  objects_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.CaptureAllFromCameraResponse)
}
CaptureAllFromCameraResponse::CaptureAllFromCameraResponse(const CaptureAllFromCameraResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detections_(from.detections_),
      classifications_(from.classifications_),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    image_ = new ::viam::component::camera::v1::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.CaptureAllFromCameraResponse)
}

inline void CaptureAllFromCameraResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&image_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extra_) -
    reinterpret_cast<char*>(&image_)) + sizeof(extra_));
}

CaptureAllFromCameraResponse::~CaptureAllFromCameraResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.CaptureAllFromCameraResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CaptureAllFromCameraResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete image_;
  if (this != internal_default_instance()) delete extra_;
}

void CaptureAllFromCameraResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CaptureAllFromCameraResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.CaptureAllFromCameraResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  classifications_.Clear();
  objects_.Clear();
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CaptureAllFromCameraResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.component.camera.v1.Image image = 1 [json_name = "image"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.service.vision.v1.Detection detections = 2 [json_name = "detections"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.service.vision.v1.Classification classifications = 3 [json_name = "classifications"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.common.v1.PointCloudObject objects = 4 [json_name = "objects"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CaptureAllFromCameraResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.CaptureAllFromCameraResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.component.camera.v1.Image image = 1 [json_name = "image"];
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // repeated .viam.service.vision.v1.Detection detections = 2 [json_name = "detections"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detections_size()); i < n; i++) {
    const auto& repfield = this->_internal_detections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.service.vision.v1.Classification classifications = 3 [json_name = "classifications"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classifications_size()); i < n; i++) {
    const auto& repfield = this->_internal_classifications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.common.v1.PointCloudObject objects = 4 [json_name = "objects"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.CaptureAllFromCameraResponse)
  return target;
}

size_t CaptureAllFromCameraResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.CaptureAllFromCameraResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Detection detections = 2 [json_name = "detections"];
  total_size += 1UL * this->_internal_detections_size();
  for (const auto& msg : this->detections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.service.vision.v1.Classification classifications = 3 [json_name = "classifications"];
  total_size += 1UL * this->_internal_classifications_size();
  for (const auto& msg : this->classifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.common.v1.PointCloudObject objects = 4 [json_name = "objects"];
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .viam.component.camera.v1.Image image = 1 [json_name = "image"];
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CaptureAllFromCameraResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CaptureAllFromCameraResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CaptureAllFromCameraResponse::GetClassData() const { return &_class_data_; }

void CaptureAllFromCameraResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CaptureAllFromCameraResponse *>(to)->MergeFrom(
      static_cast<const CaptureAllFromCameraResponse &>(from));
}


void CaptureAllFromCameraResponse::MergeFrom(const CaptureAllFromCameraResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.CaptureAllFromCameraResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  classifications_.MergeFrom(from.classifications_);
  objects_.MergeFrom(from.objects_);
  if (from._internal_has_image()) {
    _internal_mutable_image()->::viam::component::camera::v1::Image::MergeFrom(from._internal_image());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CaptureAllFromCameraResponse::CopyFrom(const CaptureAllFromCameraResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.CaptureAllFromCameraResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureAllFromCameraResponse::IsInitialized() const {
  return true;
}

void CaptureAllFromCameraResponse::InternalSwap(CaptureAllFromCameraResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  detections_.InternalSwap(&other->detections_);
  classifications_.InternalSwap(&other->classifications_);
  objects_.InternalSwap(&other->objects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaptureAllFromCameraResponse, extra_)
      + sizeof(CaptureAllFromCameraResponse::extra_)
      - PROTOBUF_FIELD_OFFSET(CaptureAllFromCameraResponse, image_)>(
          reinterpret_cast<char*>(&image_),
          reinterpret_cast<char*>(&other->image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CaptureAllFromCameraResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[14]);
}

// ===================================================================

class GetPropertiesResponse::_Internal {
 public:
};

GetPropertiesResponse::GetPropertiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetPropertiesResponse)
}
GetPropertiesResponse::GetPropertiesResponse(const GetPropertiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&classifications_supported_, &from.classifications_supported_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_point_clouds_supported_) -
    reinterpret_cast<char*>(&classifications_supported_)) + sizeof(object_point_clouds_supported_));
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetPropertiesResponse)
}

inline void GetPropertiesResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&classifications_supported_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&object_point_clouds_supported_) -
    reinterpret_cast<char*>(&classifications_supported_)) + sizeof(object_point_clouds_supported_));
}

GetPropertiesResponse::~GetPropertiesResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetPropertiesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPropertiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetPropertiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPropertiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetPropertiesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&classifications_supported_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_point_clouds_supported_) -
      reinterpret_cast<char*>(&classifications_supported_)) + sizeof(object_point_clouds_supported_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPropertiesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool classifications_supported = 1 [json_name = "classificationsSupported"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          classifications_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool detections_supported = 2 [json_name = "detectionsSupported"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          detections_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool object_point_clouds_supported = 3 [json_name = "objectPointCloudsSupported"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          object_point_clouds_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPropertiesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetPropertiesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool classifications_supported = 1 [json_name = "classificationsSupported"];
  if (this->_internal_classifications_supported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_classifications_supported(), target);
  }

  // bool detections_supported = 2 [json_name = "detectionsSupported"];
  if (this->_internal_detections_supported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_detections_supported(), target);
  }

  // bool object_point_clouds_supported = 3 [json_name = "objectPointCloudsSupported"];
  if (this->_internal_object_point_clouds_supported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_object_point_clouds_supported(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetPropertiesResponse)
  return target;
}

size_t GetPropertiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetPropertiesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool classifications_supported = 1 [json_name = "classificationsSupported"];
  if (this->_internal_classifications_supported() != 0) {
    total_size += 1 + 1;
  }

  // bool detections_supported = 2 [json_name = "detectionsSupported"];
  if (this->_internal_detections_supported() != 0) {
    total_size += 1 + 1;
  }

  // bool object_point_clouds_supported = 3 [json_name = "objectPointCloudsSupported"];
  if (this->_internal_object_point_clouds_supported() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPropertiesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPropertiesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPropertiesResponse::GetClassData() const { return &_class_data_; }

void GetPropertiesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPropertiesResponse *>(to)->MergeFrom(
      static_cast<const GetPropertiesResponse &>(from));
}


void GetPropertiesResponse::MergeFrom(const GetPropertiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetPropertiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_classifications_supported() != 0) {
    _internal_set_classifications_supported(from._internal_classifications_supported());
  }
  if (from._internal_detections_supported() != 0) {
    _internal_set_detections_supported(from._internal_detections_supported());
  }
  if (from._internal_object_point_clouds_supported() != 0) {
    _internal_set_object_point_clouds_supported(from._internal_object_point_clouds_supported());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPropertiesResponse::CopyFrom(const GetPropertiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetPropertiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPropertiesResponse::IsInitialized() const {
  return true;
}

void GetPropertiesResponse::InternalSwap(GetPropertiesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPropertiesResponse, object_point_clouds_supported_)
      + sizeof(GetPropertiesResponse::object_point_clouds_supported_)
      - PROTOBUF_FIELD_OFFSET(GetPropertiesResponse, classifications_supported_)>(
          reinterpret_cast<char*>(&classifications_supported_),
          reinterpret_cast<char*>(&other->classifications_supported_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPropertiesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace vision
}  // namespace service
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetDetectionsRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetDetectionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetDetectionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetDetectionsResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetDetectionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetDetectionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetDetectionsFromCameraRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetDetectionsFromCameraRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetDetectionsFromCameraRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetDetectionsFromCameraResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetDetectionsFromCameraResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetDetectionsFromCameraResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::Detection*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::Detection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::Detection >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetClassificationsRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetClassificationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetClassificationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetClassificationsResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetClassificationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetClassificationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetClassificationsFromCameraRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetClassificationsFromCameraRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetClassificationsFromCameraRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetClassificationsFromCameraResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetClassificationsFromCameraResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetClassificationsFromCameraResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::Classification*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetObjectPointCloudsRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetObjectPointCloudsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetObjectPointCloudsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetObjectPointCloudsResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetObjectPointCloudsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetObjectPointCloudsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetPropertiesRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetPropertiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetPropertiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::CaptureAllFromCameraRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::CaptureAllFromCameraRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::CaptureAllFromCameraRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::CaptureAllFromCameraResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::CaptureAllFromCameraResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::CaptureAllFromCameraResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetPropertiesResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetPropertiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetPropertiesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
