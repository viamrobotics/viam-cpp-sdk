// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/motion/v1/motion.proto

#include "service/motion/v1/motion.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace service {
namespace motion {
namespace v1 {
PROTOBUF_CONSTEXPR MoveRequest::MoveRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , destination_(nullptr)
  , component_name_(nullptr)
  , world_state_(nullptr)
  , constraints_(nullptr)
  , extra_(nullptr){}
struct MoveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveRequestDefaultTypeInternal() {}
  union {
    MoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
PROTOBUF_CONSTEXPR MoveResponse::MoveResponse(
    ::_pbi::ConstantInitialized)
  : success_(false){}
struct MoveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveResponseDefaultTypeInternal() {}
  union {
    MoveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveResponseDefaultTypeInternal _MoveResponse_default_instance_;
PROTOBUF_CONSTEXPR MoveOnMapRequest::MoveOnMapRequest(
    ::_pbi::ConstantInitialized)
  : obstacles_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , destination_(nullptr)
  , component_name_(nullptr)
  , slam_service_name_(nullptr)
  , motion_configuration_(nullptr)
  , extra_(nullptr){}
struct MoveOnMapRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveOnMapRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveOnMapRequestDefaultTypeInternal() {}
  union {
    MoveOnMapRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveOnMapRequestDefaultTypeInternal _MoveOnMapRequest_default_instance_;
PROTOBUF_CONSTEXPR MoveOnMapResponse::MoveOnMapResponse(
    ::_pbi::ConstantInitialized)
  : execution_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct MoveOnMapResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveOnMapResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveOnMapResponseDefaultTypeInternal() {}
  union {
    MoveOnMapResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveOnMapResponseDefaultTypeInternal _MoveOnMapResponse_default_instance_;
PROTOBUF_CONSTEXPR ObstacleDetector::ObstacleDetector(
    ::_pbi::ConstantInitialized)
  : vision_service_(nullptr)
  , camera_(nullptr){}
struct ObstacleDetectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ObstacleDetectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ObstacleDetectorDefaultTypeInternal() {}
  union {
    ObstacleDetector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ObstacleDetectorDefaultTypeInternal _ObstacleDetector_default_instance_;
PROTOBUF_CONSTEXPR MotionConfiguration::MotionConfiguration(
    ::_pbi::ConstantInitialized)
  : obstacle_detectors_()
  , position_polling_frequency_hz_(0)
  , obstacle_polling_frequency_hz_(0)
  , plan_deviation_m_(0)
  , linear_m_per_sec_(0)
  , angular_degs_per_sec_(0){}
struct MotionConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MotionConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MotionConfigurationDefaultTypeInternal() {}
  union {
    MotionConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MotionConfigurationDefaultTypeInternal _MotionConfiguration_default_instance_;
PROTOBUF_CONSTEXPR MoveOnGlobeRequest::MoveOnGlobeRequest(
    ::_pbi::ConstantInitialized)
  : obstacles_()
  , bounding_regions_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , destination_(nullptr)
  , component_name_(nullptr)
  , movement_sensor_name_(nullptr)
  , motion_configuration_(nullptr)
  , extra_(nullptr)
  , heading_(0){}
struct MoveOnGlobeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveOnGlobeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveOnGlobeRequestDefaultTypeInternal() {}
  union {
    MoveOnGlobeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveOnGlobeRequestDefaultTypeInternal _MoveOnGlobeRequest_default_instance_;
PROTOBUF_CONSTEXPR MoveOnGlobeResponse::MoveOnGlobeResponse(
    ::_pbi::ConstantInitialized)
  : execution_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct MoveOnGlobeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveOnGlobeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveOnGlobeResponseDefaultTypeInternal() {}
  union {
    MoveOnGlobeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveOnGlobeResponseDefaultTypeInternal _MoveOnGlobeResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPoseRequest::GetPoseRequest(
    ::_pbi::ConstantInitialized)
  : supplemental_transforms_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , destination_frame_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , component_name_(nullptr)
  , extra_(nullptr){}
struct GetPoseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPoseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPoseRequestDefaultTypeInternal() {}
  union {
    GetPoseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPoseRequestDefaultTypeInternal _GetPoseRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPoseResponse::GetPoseResponse(
    ::_pbi::ConstantInitialized)
  : pose_(nullptr){}
struct GetPoseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPoseResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPoseResponseDefaultTypeInternal() {}
  union {
    GetPoseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPoseResponseDefaultTypeInternal _GetPoseResponse_default_instance_;
PROTOBUF_CONSTEXPR StopPlanRequest::StopPlanRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , component_name_(nullptr)
  , extra_(nullptr){}
struct StopPlanRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopPlanRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopPlanRequestDefaultTypeInternal() {}
  union {
    StopPlanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopPlanRequestDefaultTypeInternal _StopPlanRequest_default_instance_;
PROTOBUF_CONSTEXPR StopPlanResponse::StopPlanResponse(
    ::_pbi::ConstantInitialized){}
struct StopPlanResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopPlanResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopPlanResponseDefaultTypeInternal() {}
  union {
    StopPlanResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopPlanResponseDefaultTypeInternal _StopPlanResponse_default_instance_;
PROTOBUF_CONSTEXPR ListPlanStatusesRequest::ListPlanStatusesRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr)
  , only_active_plans_(false){}
struct ListPlanStatusesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListPlanStatusesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListPlanStatusesRequestDefaultTypeInternal() {}
  union {
    ListPlanStatusesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListPlanStatusesRequestDefaultTypeInternal _ListPlanStatusesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListPlanStatusesResponse::ListPlanStatusesResponse(
    ::_pbi::ConstantInitialized)
  : plan_statuses_with_ids_(){}
struct ListPlanStatusesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListPlanStatusesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListPlanStatusesResponseDefaultTypeInternal() {}
  union {
    ListPlanStatusesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListPlanStatusesResponseDefaultTypeInternal _ListPlanStatusesResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPlanRequest::GetPlanRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , execution_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , component_name_(nullptr)
  , extra_(nullptr)
  , last_plan_only_(false){}
struct GetPlanRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPlanRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPlanRequestDefaultTypeInternal() {}
  union {
    GetPlanRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPlanRequestDefaultTypeInternal _GetPlanRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPlanResponse::GetPlanResponse(
    ::_pbi::ConstantInitialized)
  : replan_history_()
  , current_plan_with_status_(nullptr){}
struct GetPlanResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPlanResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPlanResponseDefaultTypeInternal() {}
  union {
    GetPlanResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPlanResponseDefaultTypeInternal _GetPlanResponse_default_instance_;
PROTOBUF_CONSTEXPR Constraints::Constraints(
    ::_pbi::ConstantInitialized)
  : linear_constraint_()
  , orientation_constraint_()
  , collision_specification_(){}
struct ConstraintsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConstraintsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConstraintsDefaultTypeInternal() {}
  union {
    Constraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConstraintsDefaultTypeInternal _Constraints_default_instance_;
PROTOBUF_CONSTEXPR LinearConstraint::LinearConstraint(
    ::_pbi::ConstantInitialized)
  : line_tolerance_mm_(0)
  , orientation_tolerance_degs_(0){}
struct LinearConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinearConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinearConstraintDefaultTypeInternal() {}
  union {
    LinearConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinearConstraintDefaultTypeInternal _LinearConstraint_default_instance_;
PROTOBUF_CONSTEXPR OrientationConstraint::OrientationConstraint(
    ::_pbi::ConstantInitialized)
  : orientation_tolerance_degs_(0){}
struct OrientationConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrientationConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrientationConstraintDefaultTypeInternal() {}
  union {
    OrientationConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrientationConstraintDefaultTypeInternal _OrientationConstraint_default_instance_;
PROTOBUF_CONSTEXPR CollisionSpecification_AllowedFrameCollisions::CollisionSpecification_AllowedFrameCollisions(
    ::_pbi::ConstantInitialized)
  : frame1_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , frame2_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CollisionSpecification_AllowedFrameCollisionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollisionSpecification_AllowedFrameCollisionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollisionSpecification_AllowedFrameCollisionsDefaultTypeInternal() {}
  union {
    CollisionSpecification_AllowedFrameCollisions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollisionSpecification_AllowedFrameCollisionsDefaultTypeInternal _CollisionSpecification_AllowedFrameCollisions_default_instance_;
PROTOBUF_CONSTEXPR CollisionSpecification::CollisionSpecification(
    ::_pbi::ConstantInitialized)
  : allows_(){}
struct CollisionSpecificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollisionSpecificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollisionSpecificationDefaultTypeInternal() {}
  union {
    CollisionSpecification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollisionSpecificationDefaultTypeInternal _CollisionSpecification_default_instance_;
PROTOBUF_CONSTEXPR PlanWithStatus::PlanWithStatus(
    ::_pbi::ConstantInitialized)
  : status_history_()
  , plan_(nullptr)
  , status_(nullptr){}
struct PlanWithStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanWithStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanWithStatusDefaultTypeInternal() {}
  union {
    PlanWithStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanWithStatusDefaultTypeInternal _PlanWithStatus_default_instance_;
PROTOBUF_CONSTEXPR PlanStatusWithID::PlanStatusWithID(
    ::_pbi::ConstantInitialized)
  : plan_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , execution_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , component_name_(nullptr)
  , status_(nullptr){}
struct PlanStatusWithIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanStatusWithIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanStatusWithIDDefaultTypeInternal() {}
  union {
    PlanStatusWithID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanStatusWithIDDefaultTypeInternal _PlanStatusWithID_default_instance_;
PROTOBUF_CONSTEXPR PlanStatus::PlanStatus(
    ::_pbi::ConstantInitialized)
  : reason_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , timestamp_(nullptr)
  , state_(0)
{}
struct PlanStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanStatusDefaultTypeInternal() {}
  union {
    PlanStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanStatusDefaultTypeInternal _PlanStatus_default_instance_;
PROTOBUF_CONSTEXPR Plan::Plan(
    ::_pbi::ConstantInitialized)
  : steps_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , execution_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , component_name_(nullptr){}
struct PlanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanDefaultTypeInternal() {}
  union {
    Plan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanDefaultTypeInternal _Plan_default_instance_;
PROTOBUF_CONSTEXPR PlanStep_StepEntry_DoNotUse::PlanStep_StepEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct PlanStep_StepEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanStep_StepEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanStep_StepEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlanStep_StepEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanStep_StepEntry_DoNotUseDefaultTypeInternal _PlanStep_StepEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR PlanStep::PlanStep(
    ::_pbi::ConstantInitialized)
  : step_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct PlanStepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlanStepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlanStepDefaultTypeInternal() {}
  union {
    PlanStep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlanStepDefaultTypeInternal _PlanStep_default_instance_;
PROTOBUF_CONSTEXPR ComponentState::ComponentState(
    ::_pbi::ConstantInitialized)
  : pose_(nullptr){}
struct ComponentStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentStateDefaultTypeInternal() {}
  union {
    ComponentState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentStateDefaultTypeInternal _ComponentState_default_instance_;
}  // namespace v1
}  // namespace motion
}  // namespace service
}  // namespace viam
static ::_pb::Metadata file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[28];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_service_2fmotion_2fv1_2fmotion_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_service_2fmotion_2fv1_2fmotion_2eproto = nullptr;

const uint32_t TableStruct_service_2fmotion_2fv1_2fmotion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, destination_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, world_state_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, constraints_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, extra_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveResponse, success_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnMapRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnMapRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnMapRequest, destination_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnMapRequest, component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnMapRequest, slam_service_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnMapRequest, motion_configuration_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnMapRequest, obstacles_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnMapRequest, extra_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnMapResponse, execution_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::ObstacleDetector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::ObstacleDetector, vision_service_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::ObstacleDetector, camera_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MotionConfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MotionConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MotionConfiguration, obstacle_detectors_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MotionConfiguration, position_polling_frequency_hz_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MotionConfiguration, obstacle_polling_frequency_hz_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MotionConfiguration, plan_deviation_m_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MotionConfiguration, linear_m_per_sec_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MotionConfiguration, angular_degs_per_sec_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeRequest, destination_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeRequest, heading_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeRequest, component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeRequest, movement_sensor_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeRequest, obstacles_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeRequest, motion_configuration_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeRequest, bounding_regions_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeRequest, extra_),
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveOnGlobeResponse, execution_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseRequest, component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseRequest, destination_frame_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseRequest, supplemental_transforms_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseResponse, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::StopPlanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::StopPlanRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::StopPlanRequest, component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::StopPlanRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::StopPlanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::ListPlanStatusesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::ListPlanStatusesRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::ListPlanStatusesRequest, only_active_plans_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::ListPlanStatusesRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::ListPlanStatusesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::ListPlanStatusesResponse, plan_statuses_with_ids_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPlanRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPlanRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPlanRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPlanRequest, component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPlanRequest, last_plan_only_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPlanRequest, execution_id_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPlanRequest, extra_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPlanResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPlanResponse, current_plan_with_status_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPlanResponse, replan_history_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Constraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Constraints, linear_constraint_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Constraints, orientation_constraint_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Constraints, collision_specification_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::LinearConstraint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::LinearConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::LinearConstraint, line_tolerance_mm_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::LinearConstraint, orientation_tolerance_degs_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::OrientationConstraint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::OrientationConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::OrientationConstraint, orientation_tolerance_degs_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions, frame1_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions, frame2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::CollisionSpecification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::CollisionSpecification, allows_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanWithStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanWithStatus, plan_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanWithStatus, status_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanWithStatus, status_history_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStatusWithID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStatusWithID, plan_id_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStatusWithID, component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStatusWithID, execution_id_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStatusWithID, status_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStatus, state_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStatus, timestamp_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStatus, reason_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Plan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Plan, id_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Plan, component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Plan, execution_id_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Plan, steps_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStep_StepEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStep_StepEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStep_StepEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStep_StepEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::PlanStep, step_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::ComponentState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::ComponentState, pose_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::viam::service::motion::v1::MoveRequest)},
  { 18, -1, -1, sizeof(::viam::service::motion::v1::MoveResponse)},
  { 25, 38, -1, sizeof(::viam::service::motion::v1::MoveOnMapRequest)},
  { 45, -1, -1, sizeof(::viam::service::motion::v1::MoveOnMapResponse)},
  { 52, -1, -1, sizeof(::viam::service::motion::v1::ObstacleDetector)},
  { 60, 72, -1, sizeof(::viam::service::motion::v1::MotionConfiguration)},
  { 78, 93, -1, sizeof(::viam::service::motion::v1::MoveOnGlobeRequest)},
  { 102, -1, -1, sizeof(::viam::service::motion::v1::MoveOnGlobeResponse)},
  { 109, -1, -1, sizeof(::viam::service::motion::v1::GetPoseRequest)},
  { 120, -1, -1, sizeof(::viam::service::motion::v1::GetPoseResponse)},
  { 127, -1, -1, sizeof(::viam::service::motion::v1::StopPlanRequest)},
  { 136, -1, -1, sizeof(::viam::service::motion::v1::StopPlanResponse)},
  { 142, -1, -1, sizeof(::viam::service::motion::v1::ListPlanStatusesRequest)},
  { 151, -1, -1, sizeof(::viam::service::motion::v1::ListPlanStatusesResponse)},
  { 158, 169, -1, sizeof(::viam::service::motion::v1::GetPlanRequest)},
  { 174, -1, -1, sizeof(::viam::service::motion::v1::GetPlanResponse)},
  { 182, -1, -1, sizeof(::viam::service::motion::v1::Constraints)},
  { 191, 199, -1, sizeof(::viam::service::motion::v1::LinearConstraint)},
  { 201, 208, -1, sizeof(::viam::service::motion::v1::OrientationConstraint)},
  { 209, -1, -1, sizeof(::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions)},
  { 217, -1, -1, sizeof(::viam::service::motion::v1::CollisionSpecification)},
  { 224, -1, -1, sizeof(::viam::service::motion::v1::PlanWithStatus)},
  { 233, -1, -1, sizeof(::viam::service::motion::v1::PlanStatusWithID)},
  { 243, 252, -1, sizeof(::viam::service::motion::v1::PlanStatus)},
  { 255, -1, -1, sizeof(::viam::service::motion::v1::Plan)},
  { 265, 273, -1, sizeof(::viam::service::motion::v1::PlanStep_StepEntry_DoNotUse)},
  { 275, -1, -1, sizeof(::viam::service::motion::v1::PlanStep)},
  { 282, -1, -1, sizeof(::viam::service::motion::v1::ComponentState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::service::motion::v1::_MoveRequest_default_instance_._instance,
  &::viam::service::motion::v1::_MoveResponse_default_instance_._instance,
  &::viam::service::motion::v1::_MoveOnMapRequest_default_instance_._instance,
  &::viam::service::motion::v1::_MoveOnMapResponse_default_instance_._instance,
  &::viam::service::motion::v1::_ObstacleDetector_default_instance_._instance,
  &::viam::service::motion::v1::_MotionConfiguration_default_instance_._instance,
  &::viam::service::motion::v1::_MoveOnGlobeRequest_default_instance_._instance,
  &::viam::service::motion::v1::_MoveOnGlobeResponse_default_instance_._instance,
  &::viam::service::motion::v1::_GetPoseRequest_default_instance_._instance,
  &::viam::service::motion::v1::_GetPoseResponse_default_instance_._instance,
  &::viam::service::motion::v1::_StopPlanRequest_default_instance_._instance,
  &::viam::service::motion::v1::_StopPlanResponse_default_instance_._instance,
  &::viam::service::motion::v1::_ListPlanStatusesRequest_default_instance_._instance,
  &::viam::service::motion::v1::_ListPlanStatusesResponse_default_instance_._instance,
  &::viam::service::motion::v1::_GetPlanRequest_default_instance_._instance,
  &::viam::service::motion::v1::_GetPlanResponse_default_instance_._instance,
  &::viam::service::motion::v1::_Constraints_default_instance_._instance,
  &::viam::service::motion::v1::_LinearConstraint_default_instance_._instance,
  &::viam::service::motion::v1::_OrientationConstraint_default_instance_._instance,
  &::viam::service::motion::v1::_CollisionSpecification_AllowedFrameCollisions_default_instance_._instance,
  &::viam::service::motion::v1::_CollisionSpecification_default_instance_._instance,
  &::viam::service::motion::v1::_PlanWithStatus_default_instance_._instance,
  &::viam::service::motion::v1::_PlanStatusWithID_default_instance_._instance,
  &::viam::service::motion::v1::_PlanStatus_default_instance_._instance,
  &::viam::service::motion::v1::_Plan_default_instance_._instance,
  &::viam::service::motion::v1::_PlanStep_StepEntry_DoNotUse_default_instance_._instance,
  &::viam::service::motion::v1::_PlanStep_default_instance_._instance,
  &::viam::service::motion::v1::_ComponentState_default_instance_._instance,
};

const char descriptor_table_protodef_service_2fmotion_2fv1_2fmotion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036service/motion/v1/motion.proto\022\026viam.s"
  "ervice.motion.v1\032\026common/v1/common.proto"
  "\032\034google/api/annotations.proto\032\034google/p"
  "rotobuf/struct.proto\032\037google/protobuf/ti"
  "mestamp.proto\"\202\003\n\013MoveRequest\022\022\n\004name\030\001 "
  "\001(\tR\004name\022=\n\013destination\030\002 \001(\0132\033.viam.co"
  "mmon.v1.PoseInFrameR\013destination\022C\n\016comp"
  "onent_name\030\003 \001(\0132\034.viam.common.v1.Resour"
  "ceNameR\rcomponentName\022@\n\013world_state\030\004 \001"
  "(\0132\032.viam.common.v1.WorldStateH\000R\nworldS"
  "tate\210\001\001\022J\n\013constraints\030\005 \001(\0132#.viam.serv"
  "ice.motion.v1.ConstraintsH\001R\013constraints"
  "\210\001\001\022-\n\005extra\030c \001(\0132\027.google.protobuf.Str"
  "uctR\005extraB\016\n\014_world_stateB\016\n\014_constrain"
  "ts\"(\n\014MoveResponse\022\030\n\007success\030\001 \001(\010R\007suc"
  "cess\"\322\003\n\020MoveOnMapRequest\022\022\n\004name\030\001 \001(\tR"
  "\004name\0226\n\013destination\030\002 \001(\0132\024.viam.common"
  ".v1.PoseR\013destination\022C\n\016component_name\030"
  "\003 \001(\0132\034.viam.common.v1.ResourceNameR\rcom"
  "ponentName\022H\n\021slam_service_name\030\004 \001(\0132\034."
  "viam.common.v1.ResourceNameR\017slamService"
  "Name\022c\n\024motion_configuration\030\005 \001(\0132+.via"
  "m.service.motion.v1.MotionConfigurationH"
  "\000R\023motionConfiguration\210\001\001\0226\n\tobstacles\030\006"
  " \003(\0132\030.viam.common.v1.GeometryR\tobstacle"
  "s\022-\n\005extra\030c \001(\0132\027.google.protobuf.Struc"
  "tR\005extraB\027\n\025_motion_configuration\"6\n\021Mov"
  "eOnMapResponse\022!\n\014execution_id\030\001 \001(\tR\013ex"
  "ecutionId\"\215\001\n\020ObstacleDetector\022C\n\016vision"
  "_service\030\001 \001(\0132\034.viam.common.v1.Resource"
  "NameR\rvisionService\0224\n\006camera\030\002 \001(\0132\034.vi"
  "am.common.v1.ResourceNameR\006camera\"\230\004\n\023Mo"
  "tionConfiguration\022W\n\022obstacle_detectors\030"
  "\001 \003(\0132(.viam.service.motion.v1.ObstacleD"
  "etectorR\021obstacleDetectors\022F\n\035position_p"
  "olling_frequency_hz\030\002 \001(\001H\000R\032positionPol"
  "lingFrequencyHz\210\001\001\022F\n\035obstacle_polling_f"
  "requency_hz\030\003 \001(\001H\001R\032obstaclePollingFreq"
  "uencyHz\210\001\001\022-\n\020plan_deviation_m\030\004 \001(\001H\002R\016"
  "planDeviationM\210\001\001\022,\n\020linear_m_per_sec\030\005 "
  "\001(\001H\003R\rlinearMPerSec\210\001\001\0224\n\024angular_degs_"
  "per_sec\030\006 \001(\001H\004R\021angularDegsPerSec\210\001\001B \n"
  "\036_position_polling_frequency_hzB \n\036_obst"
  "acle_polling_frequency_hzB\023\n\021_plan_devia"
  "tion_mB\023\n\021_linear_m_per_secB\027\n\025_angular_"
  "degs_per_sec\"\324\004\n\022MoveOnGlobeRequest\022\022\n\004n"
  "ame\030\001 \001(\tR\004name\022:\n\013destination\030\002 \001(\0132\030.v"
  "iam.common.v1.GeoPointR\013destination\022\035\n\007h"
  "eading\030\003 \001(\001H\000R\007heading\210\001\001\022C\n\016component_"
  "name\030\004 \001(\0132\034.viam.common.v1.ResourceName"
  "R\rcomponentName\022N\n\024movement_sensor_name\030"
  "\005 \001(\0132\034.viam.common.v1.ResourceNameR\022mov"
  "ementSensorName\0229\n\tobstacles\030\006 \003(\0132\033.via"
  "m.common.v1.GeoGeometryR\tobstacles\022c\n\024mo"
  "tion_configuration\030\007 \001(\0132+.viam.service."
  "motion.v1.MotionConfigurationH\001R\023motionC"
  "onfiguration\210\001\001\022F\n\020bounding_regions\030\010 \003("
  "\0132\033.viam.common.v1.GeoGeometryR\017bounding"
  "Regions\022-\n\005extra\030c \001(\0132\027.google.protobuf"
  ".StructR\005extraB\n\n\010_headingB\027\n\025_motion_co"
  "nfiguration\"8\n\023MoveOnGlobeResponse\022!\n\014ex"
  "ecution_id\030\001 \001(\tR\013executionId\"\231\002\n\016GetPos"
  "eRequest\022\022\n\004name\030\001 \001(\tR\004name\022C\n\016componen"
  "t_name\030\002 \001(\0132\034.viam.common.v1.ResourceNa"
  "meR\rcomponentName\022+\n\021destination_frame\030\003"
  " \001(\tR\020destinationFrame\022R\n\027supplemental_t"
  "ransforms\030\004 \003(\0132\031.viam.common.v1.Transfo"
  "rmR\026supplementalTransforms\022-\n\005extra\030c \001("
  "\0132\027.google.protobuf.StructR\005extra\"B\n\017Get"
  "PoseResponse\022/\n\004pose\030\001 \001(\0132\033.viam.common"
  ".v1.PoseInFrameR\004pose\"\231\001\n\017StopPlanReques"
  "t\022\022\n\004name\030\001 \001(\tR\004name\022C\n\016component_name\030"
  "\002 \001(\0132\034.viam.common.v1.ResourceNameR\rcom"
  "ponentName\022-\n\005extra\030c \001(\0132\027.google.proto"
  "buf.StructR\005extra\"\022\n\020StopPlanResponse\"\210\001"
  "\n\027ListPlanStatusesRequest\022\022\n\004name\030\001 \001(\tR"
  "\004name\022*\n\021only_active_plans\030\002 \001(\010R\017onlyAc"
  "tivePlans\022-\n\005extra\030c \001(\0132\027.google.protob"
  "uf.StructR\005extra\"y\n\030ListPlanStatusesResp"
  "onse\022]\n\026plan_statuses_with_ids\030\001 \003(\0132(.v"
  "iam.service.motion.v1.PlanStatusWithIDR\023"
  "planStatusesWithIds\"\367\001\n\016GetPlanRequest\022\022"
  "\n\004name\030\001 \001(\tR\004name\022C\n\016component_name\030\002 \001"
  "(\0132\034.viam.common.v1.ResourceNameR\rcompon"
  "entName\022$\n\016last_plan_only\030\003 \001(\010R\014lastPla"
  "nOnly\022&\n\014execution_id\030\004 \001(\tH\000R\013execution"
  "Id\210\001\001\022-\n\005extra\030c \001(\0132\027.google.protobuf.S"
  "tructR\005extraB\017\n\r_execution_id\"\301\001\n\017GetPla"
  "nResponse\022_\n\030current_plan_with_status\030\001 "
  "\001(\0132&.viam.service.motion.v1.PlanWithSta"
  "tusR\025currentPlanWithStatus\022M\n\016replan_his"
  "tory\030\002 \003(\0132&.viam.service.motion.v1.Plan"
  "WithStatusR\rreplanHistory\"\263\002\n\013Constraint"
  "s\022U\n\021linear_constraint\030\001 \003(\0132(.viam.serv"
  "ice.motion.v1.LinearConstraintR\020linearCo"
  "nstraint\022d\n\026orientation_constraint\030\002 \003(\013"
  "2-.viam.service.motion.v1.OrientationCon"
  "straintR\025orientationConstraint\022g\n\027collis"
  "ion_specification\030\003 \003(\0132..viam.service.m"
  "otion.v1.CollisionSpecificationR\026collisi"
  "onSpecification\"\273\001\n\020LinearConstraint\022/\n\021"
  "line_tolerance_mm\030\001 \001(\002H\000R\017lineTolerance"
  "Mm\210\001\001\022A\n\032orientation_tolerance_degs\030\002 \001("
  "\002H\001R\030orientationToleranceDegs\210\001\001B\024\n\022_lin"
  "e_tolerance_mmB\035\n\033_orientation_tolerance"
  "_degs\"y\n\025OrientationConstraint\022A\n\032orient"
  "ation_tolerance_degs\030\001 \001(\002H\000R\030orientatio"
  "nToleranceDegs\210\001\001B\035\n\033_orientation_tolera"
  "nce_degs\"\301\001\n\026CollisionSpecification\022]\n\006a"
  "llows\030\001 \003(\0132E.viam.service.motion.v1.Col"
  "lisionSpecification.AllowedFrameCollisio"
  "nsR\006allows\032H\n\026AllowedFrameCollisions\022\026\n\006"
  "frame1\030\001 \001(\tR\006frame1\022\026\n\006frame2\030\002 \001(\tR\006fr"
  "ame2\"\311\001\n\016PlanWithStatus\0220\n\004plan\030\001 \001(\0132\034."
  "viam.service.motion.v1.PlanR\004plan\022:\n\006sta"
  "tus\030\002 \001(\0132\".viam.service.motion.v1.PlanS"
  "tatusR\006status\022I\n\016status_history\030\003 \003(\0132\"."
  "viam.service.motion.v1.PlanStatusR\rstatu"
  "sHistory\"\317\001\n\020PlanStatusWithID\022\027\n\007plan_id"
  "\030\001 \001(\tR\006planId\022C\n\016component_name\030\002 \001(\0132\034"
  ".viam.common.v1.ResourceNameR\rcomponentN"
  "ame\022!\n\014execution_id\030\003 \001(\tR\013executionId\022:"
  "\n\006status\030\004 \001(\0132\".viam.service.motion.v1."
  "PlanStatusR\006status\"\247\001\n\nPlanStatus\0227\n\005sta"
  "te\030\001 \001(\0162!.viam.service.motion.v1.PlanSt"
  "ateR\005state\0228\n\ttimestamp\030\002 \001(\0132\032.google.p"
  "rotobuf.TimestampR\ttimestamp\022\033\n\006reason\030\003"
  " \001(\tH\000R\006reason\210\001\001B\t\n\007_reason\"\266\001\n\004Plan\022\016\n"
  "\002id\030\001 \001(\tR\002id\022C\n\016component_name\030\002 \001(\0132\034."
  "viam.common.v1.ResourceNameR\rcomponentNa"
  "me\022!\n\014execution_id\030\003 \001(\tR\013executionId\0226\n"
  "\005steps\030\004 \003(\0132 .viam.service.motion.v1.Pl"
  "anStepR\005steps\"\253\001\n\010PlanStep\022>\n\004step\030\001 \003(\013"
  "2*.viam.service.motion.v1.PlanStep.StepE"
  "ntryR\004step\032_\n\tStepEntry\022\020\n\003key\030\001 \001(\tR\003ke"
  "y\022<\n\005value\030\002 \001(\0132&.viam.service.motion.v"
  "1.ComponentStateR\005value:\0028\001\":\n\016Component"
  "State\022(\n\004pose\030\001 \001(\0132\024.viam.common.v1.Pos"
  "eR\004pose*\214\001\n\tPlanState\022\032\n\026PLAN_STATE_UNSP"
  "ECIFIED\020\000\022\032\n\026PLAN_STATE_IN_PROGRESS\020\001\022\026\n"
  "\022PLAN_STATE_STOPPED\020\002\022\030\n\024PLAN_STATE_SUCC"
  "EEDED\020\003\022\025\n\021PLAN_STATE_FAILED\020\0042\311\t\n\rMotio"
  "nService\022\202\001\n\004Move\022#.viam.service.motion."
  "v1.MoveRequest\032$.viam.service.motion.v1."
  "MoveResponse\"/\202\323\344\223\002)\"\'/viam/api/v1/servi"
  "ce/motion/{name}/move\022\230\001\n\tMoveOnMap\022(.vi"
  "am.service.motion.v1.MoveOnMapRequest\032)."
  "viam.service.motion.v1.MoveOnMapResponse"
  "\"6\202\323\344\223\0020\"./viam/api/v1/service/motion/{n"
  "ame}/move_on_map\022\240\001\n\013MoveOnGlobe\022*.viam."
  "service.motion.v1.MoveOnGlobeRequest\032+.v"
  "iam.service.motion.v1.MoveOnGlobeRespons"
  "e\"8\202\323\344\223\0022\"0/viam/api/v1/service/motion/{"
  "name}/move_on_globe\022\213\001\n\007GetPose\022&.viam.s"
  "ervice.motion.v1.GetPoseRequest\032\'.viam.s"
  "ervice.motion.v1.GetPoseResponse\"/\202\323\344\223\002)"
  "\022\'/viam/api/v1/service/motion/{name}/pos"
  "e\022\223\001\n\010StopPlan\022\'.viam.service.motion.v1."
  "StopPlanRequest\032(.viam.service.motion.v1"
  ".StopPlanResponse\"4\202\323\344\223\002.\032,/viam/api/v1/"
  "service/motion/{name}/stop_plan\022\264\001\n\020List"
  "PlanStatuses\022/.viam.service.motion.v1.Li"
  "stPlanStatusesRequest\0320.viam.service.mot"
  "ion.v1.ListPlanStatusesResponse\"=\202\323\344\223\0027\022"
  "5/viam/api/v1/service/motion/{name}/list"
  "_plan_statuses\022\217\001\n\007GetPlan\022&.viam.servic"
  "e.motion.v1.GetPlanRequest\032\'.viam.servic"
  "e.motion.v1.GetPlanResponse\"3\202\323\344\223\002-\022+/vi"
  "am/api/v1/service/motion/{name}/get_plan"
  "\022\207\001\n\tDoCommand\022 .viam.common.v1.DoComman"
  "dRequest\032!.viam.common.v1.DoCommandRespo"
  "nse\"5\202\323\344\223\002/\"-/viam/api/v1/service/motion"
  "/{name}/do_commandB\?\n\032com.viam.service.m"
  "otion.v1Z!go.viam.com/api/service/motion"
  "/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_deps[4] = {
  &::descriptor_table_common_2fv1_2fcommon_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto = {
    false, false, 6971, descriptor_table_protodef_service_2fmotion_2fv1_2fmotion_2eproto,
    "service/motion/v1/motion.proto",
    &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once, descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_deps, 4, 28,
    schemas, file_default_instances, TableStruct_service_2fmotion_2fv1_2fmotion_2eproto::offsets,
    file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto, file_level_enum_descriptors_service_2fmotion_2fv1_2fmotion_2eproto,
    file_level_service_descriptors_service_2fmotion_2fv1_2fmotion_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter() {
  return &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_service_2fmotion_2fv1_2fmotion_2eproto(&descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto);
namespace viam {
namespace service {
namespace motion {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto);
  return file_level_enum_descriptors_service_2fmotion_2fv1_2fmotion_2eproto[0];
}
bool PlanState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MoveRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveRequest>()._has_bits_);
  static const ::viam::common::v1::PoseInFrame& destination(const MoveRequest* msg);
  static const ::viam::common::v1::ResourceName& component_name(const MoveRequest* msg);
  static const ::viam::common::v1::WorldState& world_state(const MoveRequest* msg);
  static void set_has_world_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::viam::service::motion::v1::Constraints& constraints(const MoveRequest* msg);
  static void set_has_constraints(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const MoveRequest* msg);
};

const ::viam::common::v1::PoseInFrame&
MoveRequest::_Internal::destination(const MoveRequest* msg) {
  return *msg->destination_;
}
const ::viam::common::v1::ResourceName&
MoveRequest::_Internal::component_name(const MoveRequest* msg) {
  return *msg->component_name_;
}
const ::viam::common::v1::WorldState&
MoveRequest::_Internal::world_state(const MoveRequest* msg) {
  return *msg->world_state_;
}
const ::viam::service::motion::v1::Constraints&
MoveRequest::_Internal::constraints(const MoveRequest* msg) {
  return *msg->constraints_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
MoveRequest::_Internal::extra(const MoveRequest* msg) {
  return *msg->extra_;
}
void MoveRequest::clear_destination() {
  if (GetArenaForAllocation() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
void MoveRequest::clear_component_name() {
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
}
void MoveRequest::clear_world_state() {
  if (world_state_ != nullptr) world_state_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void MoveRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
MoveRequest::MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.MoveRequest)
}
MoveRequest::MoveRequest(const MoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_destination()) {
    destination_ = new ::viam::common::v1::PoseInFrame(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from._internal_has_component_name()) {
    component_name_ = new ::viam::common::v1::ResourceName(*from.component_name_);
  } else {
    component_name_ = nullptr;
  }
  if (from._internal_has_world_state()) {
    world_state_ = new ::viam::common::v1::WorldState(*from.world_state_);
  } else {
    world_state_ = nullptr;
  }
  if (from._internal_has_constraints()) {
    constraints_ = new ::viam::service::motion::v1::Constraints(*from.constraints_);
  } else {
    constraints_ = nullptr;
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.MoveRequest)
}

inline void MoveRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&destination_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extra_) -
    reinterpret_cast<char*>(&destination_)) + sizeof(extra_));
}

MoveRequest::~MoveRequest() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.MoveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete component_name_;
  if (this != internal_default_instance()) delete world_state_;
  if (this != internal_default_instance()) delete constraints_;
  if (this != internal_default_instance()) delete extra_;
}

void MoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.MoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(world_state_ != nullptr);
      world_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(constraints_ != nullptr);
      constraints_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.MoveRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .viam.service.motion.v1.Constraints constraints = 5 [json_name = "constraints"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.MoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.MoveRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::destination(this),
        _Internal::destination(this).GetCachedSize(), target, stream);
  }

  // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::component_name(this),
        _Internal::component_name(this).GetCachedSize(), target, stream);
  }

  // optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
  if (_internal_has_world_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::world_state(this),
        _Internal::world_state(this).GetCachedSize(), target, stream);
  }

  // optional .viam.service.motion.v1.Constraints constraints = 5 [json_name = "constraints"];
  if (_internal_has_constraints()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::constraints(this),
        _Internal::constraints(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.MoveRequest)
  return target;
}

size_t MoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.MoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_name_);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *world_state_);
    }

    // optional .viam.service.motion.v1.Constraints constraints = 5 [json_name = "constraints"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *constraints_);
    }

  }
  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveRequest::GetClassData() const { return &_class_data_; }

void MoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveRequest *>(to)->MergeFrom(
      static_cast<const MoveRequest &>(from));
}


void MoveRequest::MergeFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.MoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_destination()) {
    _internal_mutable_destination()->::viam::common::v1::PoseInFrame::MergeFrom(from._internal_destination());
  }
  if (from._internal_has_component_name()) {
    _internal_mutable_component_name()->::viam::common::v1::ResourceName::MergeFrom(from._internal_component_name());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_world_state()->::viam::common::v1::WorldState::MergeFrom(from._internal_world_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_constraints()->::viam::service::motion::v1::Constraints::MergeFrom(from._internal_constraints());
    }
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  return true;
}

void MoveRequest::InternalSwap(MoveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveRequest, extra_)
      + sizeof(MoveRequest::extra_)
      - PROTOBUF_FIELD_OFFSET(MoveRequest, destination_)>(
          reinterpret_cast<char*>(&destination_),
          reinterpret_cast<char*>(&other->destination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[0]);
}

// ===================================================================

class MoveResponse::_Internal {
 public:
};

MoveResponse::MoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.MoveResponse)
}
MoveResponse::MoveResponse(const MoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.MoveResponse)
}

inline void MoveResponse::SharedCtor() {
success_ = false;
}

MoveResponse::~MoveResponse() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.MoveResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.MoveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.MoveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.MoveResponse)
  return target;
}

size_t MoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.MoveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveResponse::GetClassData() const { return &_class_data_; }

void MoveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveResponse *>(to)->MergeFrom(
      static_cast<const MoveResponse &>(from));
}


void MoveResponse::MergeFrom(const MoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.MoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveResponse::CopyFrom(const MoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.MoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveResponse::IsInitialized() const {
  return true;
}

void MoveResponse::InternalSwap(MoveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[1]);
}

// ===================================================================

class MoveOnMapRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveOnMapRequest>()._has_bits_);
  static const ::viam::common::v1::Pose& destination(const MoveOnMapRequest* msg);
  static const ::viam::common::v1::ResourceName& component_name(const MoveOnMapRequest* msg);
  static const ::viam::common::v1::ResourceName& slam_service_name(const MoveOnMapRequest* msg);
  static const ::viam::service::motion::v1::MotionConfiguration& motion_configuration(const MoveOnMapRequest* msg);
  static void set_has_motion_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const MoveOnMapRequest* msg);
};

const ::viam::common::v1::Pose&
MoveOnMapRequest::_Internal::destination(const MoveOnMapRequest* msg) {
  return *msg->destination_;
}
const ::viam::common::v1::ResourceName&
MoveOnMapRequest::_Internal::component_name(const MoveOnMapRequest* msg) {
  return *msg->component_name_;
}
const ::viam::common::v1::ResourceName&
MoveOnMapRequest::_Internal::slam_service_name(const MoveOnMapRequest* msg) {
  return *msg->slam_service_name_;
}
const ::viam::service::motion::v1::MotionConfiguration&
MoveOnMapRequest::_Internal::motion_configuration(const MoveOnMapRequest* msg) {
  return *msg->motion_configuration_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
MoveOnMapRequest::_Internal::extra(const MoveOnMapRequest* msg) {
  return *msg->extra_;
}
void MoveOnMapRequest::clear_destination() {
  if (GetArenaForAllocation() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
void MoveOnMapRequest::clear_component_name() {
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
}
void MoveOnMapRequest::clear_slam_service_name() {
  if (GetArenaForAllocation() == nullptr && slam_service_name_ != nullptr) {
    delete slam_service_name_;
  }
  slam_service_name_ = nullptr;
}
void MoveOnMapRequest::clear_obstacles() {
  obstacles_.Clear();
}
void MoveOnMapRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
MoveOnMapRequest::MoveOnMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  obstacles_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.MoveOnMapRequest)
}
MoveOnMapRequest::MoveOnMapRequest(const MoveOnMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_destination()) {
    destination_ = new ::viam::common::v1::Pose(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from._internal_has_component_name()) {
    component_name_ = new ::viam::common::v1::ResourceName(*from.component_name_);
  } else {
    component_name_ = nullptr;
  }
  if (from._internal_has_slam_service_name()) {
    slam_service_name_ = new ::viam::common::v1::ResourceName(*from.slam_service_name_);
  } else {
    slam_service_name_ = nullptr;
  }
  if (from._internal_has_motion_configuration()) {
    motion_configuration_ = new ::viam::service::motion::v1::MotionConfiguration(*from.motion_configuration_);
  } else {
    motion_configuration_ = nullptr;
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.MoveOnMapRequest)
}

inline void MoveOnMapRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&destination_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extra_) -
    reinterpret_cast<char*>(&destination_)) + sizeof(extra_));
}

MoveOnMapRequest::~MoveOnMapRequest() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.MoveOnMapRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveOnMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete component_name_;
  if (this != internal_default_instance()) delete slam_service_name_;
  if (this != internal_default_instance()) delete motion_configuration_;
  if (this != internal_default_instance()) delete extra_;
}

void MoveOnMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveOnMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.MoveOnMapRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && slam_service_name_ != nullptr) {
    delete slam_service_name_;
  }
  slam_service_name_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(motion_configuration_ != nullptr);
    motion_configuration_->Clear();
  }
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveOnMapRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.MoveOnMapRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.Pose destination = 2 [json_name = "destination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName slam_service_name = 4 [json_name = "slamServiceName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_slam_service_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .viam.service.motion.v1.MotionConfiguration motion_configuration = 5 [json_name = "motionConfiguration"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.common.v1.Geometry obstacles = 6 [json_name = "obstacles"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveOnMapRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.MoveOnMapRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.MoveOnMapRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .viam.common.v1.Pose destination = 2 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::destination(this),
        _Internal::destination(this).GetCachedSize(), target, stream);
  }

  // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::component_name(this),
        _Internal::component_name(this).GetCachedSize(), target, stream);
  }

  // .viam.common.v1.ResourceName slam_service_name = 4 [json_name = "slamServiceName"];
  if (this->_internal_has_slam_service_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::slam_service_name(this),
        _Internal::slam_service_name(this).GetCachedSize(), target, stream);
  }

  // optional .viam.service.motion.v1.MotionConfiguration motion_configuration = 5 [json_name = "motionConfiguration"];
  if (_internal_has_motion_configuration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::motion_configuration(this),
        _Internal::motion_configuration(this).GetCachedSize(), target, stream);
  }

  // repeated .viam.common.v1.Geometry obstacles = 6 [json_name = "obstacles"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacles_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.MoveOnMapRequest)
  return target;
}

size_t MoveOnMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.MoveOnMapRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.common.v1.Geometry obstacles = 6 [json_name = "obstacles"];
  total_size += 1UL * this->_internal_obstacles_size();
  for (const auto& msg : this->obstacles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .viam.common.v1.Pose destination = 2 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_name_);
  }

  // .viam.common.v1.ResourceName slam_service_name = 4 [json_name = "slamServiceName"];
  if (this->_internal_has_slam_service_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slam_service_name_);
  }

  // optional .viam.service.motion.v1.MotionConfiguration motion_configuration = 5 [json_name = "motionConfiguration"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motion_configuration_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveOnMapRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveOnMapRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveOnMapRequest::GetClassData() const { return &_class_data_; }

void MoveOnMapRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveOnMapRequest *>(to)->MergeFrom(
      static_cast<const MoveOnMapRequest &>(from));
}


void MoveOnMapRequest::MergeFrom(const MoveOnMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.MoveOnMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_destination()) {
    _internal_mutable_destination()->::viam::common::v1::Pose::MergeFrom(from._internal_destination());
  }
  if (from._internal_has_component_name()) {
    _internal_mutable_component_name()->::viam::common::v1::ResourceName::MergeFrom(from._internal_component_name());
  }
  if (from._internal_has_slam_service_name()) {
    _internal_mutable_slam_service_name()->::viam::common::v1::ResourceName::MergeFrom(from._internal_slam_service_name());
  }
  if (from._internal_has_motion_configuration()) {
    _internal_mutable_motion_configuration()->::viam::service::motion::v1::MotionConfiguration::MergeFrom(from._internal_motion_configuration());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveOnMapRequest::CopyFrom(const MoveOnMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.MoveOnMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveOnMapRequest::IsInitialized() const {
  return true;
}

void MoveOnMapRequest::InternalSwap(MoveOnMapRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacles_.InternalSwap(&other->obstacles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveOnMapRequest, extra_)
      + sizeof(MoveOnMapRequest::extra_)
      - PROTOBUF_FIELD_OFFSET(MoveOnMapRequest, destination_)>(
          reinterpret_cast<char*>(&destination_),
          reinterpret_cast<char*>(&other->destination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveOnMapRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[2]);
}

// ===================================================================

class MoveOnMapResponse::_Internal {
 public:
};

MoveOnMapResponse::MoveOnMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.MoveOnMapResponse)
}
MoveOnMapResponse::MoveOnMapResponse(const MoveOnMapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  execution_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    execution_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_id().empty()) {
    execution_id_.Set(from._internal_execution_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.MoveOnMapResponse)
}

inline void MoveOnMapResponse::SharedCtor() {
execution_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  execution_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MoveOnMapResponse::~MoveOnMapResponse() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.MoveOnMapResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveOnMapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  execution_id_.Destroy();
}

void MoveOnMapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveOnMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.MoveOnMapResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  execution_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveOnMapResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string execution_id = 1 [json_name = "executionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_execution_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.MoveOnMapResponse.execution_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveOnMapResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.MoveOnMapResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string execution_id = 1 [json_name = "executionId"];
  if (!this->_internal_execution_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execution_id().data(), static_cast<int>(this->_internal_execution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.MoveOnMapResponse.execution_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_execution_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.MoveOnMapResponse)
  return target;
}

size_t MoveOnMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.MoveOnMapResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string execution_id = 1 [json_name = "executionId"];
  if (!this->_internal_execution_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execution_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveOnMapResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveOnMapResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveOnMapResponse::GetClassData() const { return &_class_data_; }

void MoveOnMapResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveOnMapResponse *>(to)->MergeFrom(
      static_cast<const MoveOnMapResponse &>(from));
}


void MoveOnMapResponse::MergeFrom(const MoveOnMapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.MoveOnMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_execution_id().empty()) {
    _internal_set_execution_id(from._internal_execution_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveOnMapResponse::CopyFrom(const MoveOnMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.MoveOnMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveOnMapResponse::IsInitialized() const {
  return true;
}

void MoveOnMapResponse::InternalSwap(MoveOnMapResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &execution_id_, lhs_arena,
      &other->execution_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveOnMapResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[3]);
}

// ===================================================================

class ObstacleDetector::_Internal {
 public:
  static const ::viam::common::v1::ResourceName& vision_service(const ObstacleDetector* msg);
  static const ::viam::common::v1::ResourceName& camera(const ObstacleDetector* msg);
};

const ::viam::common::v1::ResourceName&
ObstacleDetector::_Internal::vision_service(const ObstacleDetector* msg) {
  return *msg->vision_service_;
}
const ::viam::common::v1::ResourceName&
ObstacleDetector::_Internal::camera(const ObstacleDetector* msg) {
  return *msg->camera_;
}
void ObstacleDetector::clear_vision_service() {
  if (GetArenaForAllocation() == nullptr && vision_service_ != nullptr) {
    delete vision_service_;
  }
  vision_service_ = nullptr;
}
void ObstacleDetector::clear_camera() {
  if (GetArenaForAllocation() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
}
ObstacleDetector::ObstacleDetector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.ObstacleDetector)
}
ObstacleDetector::ObstacleDetector(const ObstacleDetector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vision_service()) {
    vision_service_ = new ::viam::common::v1::ResourceName(*from.vision_service_);
  } else {
    vision_service_ = nullptr;
  }
  if (from._internal_has_camera()) {
    camera_ = new ::viam::common::v1::ResourceName(*from.camera_);
  } else {
    camera_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.ObstacleDetector)
}

inline void ObstacleDetector::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vision_service_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&camera_) -
    reinterpret_cast<char*>(&vision_service_)) + sizeof(camera_));
}

ObstacleDetector::~ObstacleDetector() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.ObstacleDetector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ObstacleDetector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vision_service_;
  if (this != internal_default_instance()) delete camera_;
}

void ObstacleDetector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleDetector::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.ObstacleDetector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && vision_service_ != nullptr) {
    delete vision_service_;
  }
  vision_service_ = nullptr;
  if (GetArenaForAllocation() == nullptr && camera_ != nullptr) {
    delete camera_;
  }
  camera_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleDetector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.common.v1.ResourceName vision_service = 1 [json_name = "visionService"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vision_service(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName camera = 2 [json_name = "camera"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleDetector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.ObstacleDetector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.common.v1.ResourceName vision_service = 1 [json_name = "visionService"];
  if (this->_internal_has_vision_service()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vision_service(this),
        _Internal::vision_service(this).GetCachedSize(), target, stream);
  }

  // .viam.common.v1.ResourceName camera = 2 [json_name = "camera"];
  if (this->_internal_has_camera()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::camera(this),
        _Internal::camera(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.ObstacleDetector)
  return target;
}

size_t ObstacleDetector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.ObstacleDetector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.common.v1.ResourceName vision_service = 1 [json_name = "visionService"];
  if (this->_internal_has_vision_service()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vision_service_);
  }

  // .viam.common.v1.ResourceName camera = 2 [json_name = "camera"];
  if (this->_internal_has_camera()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleDetector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleDetector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleDetector::GetClassData() const { return &_class_data_; }

void ObstacleDetector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleDetector *>(to)->MergeFrom(
      static_cast<const ObstacleDetector &>(from));
}


void ObstacleDetector::MergeFrom(const ObstacleDetector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.ObstacleDetector)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vision_service()) {
    _internal_mutable_vision_service()->::viam::common::v1::ResourceName::MergeFrom(from._internal_vision_service());
  }
  if (from._internal_has_camera()) {
    _internal_mutable_camera()->::viam::common::v1::ResourceName::MergeFrom(from._internal_camera());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleDetector::CopyFrom(const ObstacleDetector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.ObstacleDetector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleDetector::IsInitialized() const {
  return true;
}

void ObstacleDetector::InternalSwap(ObstacleDetector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleDetector, camera_)
      + sizeof(ObstacleDetector::camera_)
      - PROTOBUF_FIELD_OFFSET(ObstacleDetector, vision_service_)>(
          reinterpret_cast<char*>(&vision_service_),
          reinterpret_cast<char*>(&other->vision_service_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleDetector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[4]);
}

// ===================================================================

class MotionConfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionConfiguration>()._has_bits_);
  static void set_has_position_polling_frequency_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_obstacle_polling_frequency_hz(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_plan_deviation_m(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_linear_m_per_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_angular_degs_per_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

MotionConfiguration::MotionConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  obstacle_detectors_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.MotionConfiguration)
}
MotionConfiguration::MotionConfiguration(const MotionConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      obstacle_detectors_(from.obstacle_detectors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&position_polling_frequency_hz_, &from.position_polling_frequency_hz_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_degs_per_sec_) -
    reinterpret_cast<char*>(&position_polling_frequency_hz_)) + sizeof(angular_degs_per_sec_));
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.MotionConfiguration)
}

inline void MotionConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_polling_frequency_hz_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angular_degs_per_sec_) -
    reinterpret_cast<char*>(&position_polling_frequency_hz_)) + sizeof(angular_degs_per_sec_));
}

MotionConfiguration::~MotionConfiguration() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.MotionConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MotionConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MotionConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MotionConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.MotionConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacle_detectors_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&position_polling_frequency_hz_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_degs_per_sec_) -
        reinterpret_cast<char*>(&position_polling_frequency_hz_)) + sizeof(angular_degs_per_sec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MotionConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.motion.v1.ObstacleDetector obstacle_detectors = 1 [json_name = "obstacleDetectors"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacle_detectors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional double position_polling_frequency_hz = 2 [json_name = "positionPollingFrequencyHz"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_position_polling_frequency_hz(&has_bits);
          position_polling_frequency_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double obstacle_polling_frequency_hz = 3 [json_name = "obstaclePollingFrequencyHz"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_obstacle_polling_frequency_hz(&has_bits);
          obstacle_polling_frequency_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double plan_deviation_m = 4 [json_name = "planDeviationM"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_plan_deviation_m(&has_bits);
          plan_deviation_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double linear_m_per_sec = 5 [json_name = "linearMPerSec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_linear_m_per_sec(&has_bits);
          linear_m_per_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double angular_degs_per_sec = 6 [json_name = "angularDegsPerSec"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_angular_degs_per_sec(&has_bits);
          angular_degs_per_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MotionConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.MotionConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.ObstacleDetector obstacle_detectors = 1 [json_name = "obstacleDetectors"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacle_detectors_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacle_detectors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional double position_polling_frequency_hz = 2 [json_name = "positionPollingFrequencyHz"];
  if (_internal_has_position_polling_frequency_hz()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_position_polling_frequency_hz(), target);
  }

  // optional double obstacle_polling_frequency_hz = 3 [json_name = "obstaclePollingFrequencyHz"];
  if (_internal_has_obstacle_polling_frequency_hz()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_obstacle_polling_frequency_hz(), target);
  }

  // optional double plan_deviation_m = 4 [json_name = "planDeviationM"];
  if (_internal_has_plan_deviation_m()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_plan_deviation_m(), target);
  }

  // optional double linear_m_per_sec = 5 [json_name = "linearMPerSec"];
  if (_internal_has_linear_m_per_sec()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_linear_m_per_sec(), target);
  }

  // optional double angular_degs_per_sec = 6 [json_name = "angularDegsPerSec"];
  if (_internal_has_angular_degs_per_sec()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_angular_degs_per_sec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.MotionConfiguration)
  return target;
}

size_t MotionConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.MotionConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.ObstacleDetector obstacle_detectors = 1 [json_name = "obstacleDetectors"];
  total_size += 1UL * this->_internal_obstacle_detectors_size();
  for (const auto& msg : this->obstacle_detectors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional double position_polling_frequency_hz = 2 [json_name = "positionPollingFrequencyHz"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double obstacle_polling_frequency_hz = 3 [json_name = "obstaclePollingFrequencyHz"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double plan_deviation_m = 4 [json_name = "planDeviationM"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double linear_m_per_sec = 5 [json_name = "linearMPerSec"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double angular_degs_per_sec = 6 [json_name = "angularDegsPerSec"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MotionConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MotionConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MotionConfiguration::GetClassData() const { return &_class_data_; }

void MotionConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MotionConfiguration *>(to)->MergeFrom(
      static_cast<const MotionConfiguration &>(from));
}


void MotionConfiguration::MergeFrom(const MotionConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.MotionConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  obstacle_detectors_.MergeFrom(from.obstacle_detectors_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      position_polling_frequency_hz_ = from.position_polling_frequency_hz_;
    }
    if (cached_has_bits & 0x00000002u) {
      obstacle_polling_frequency_hz_ = from.obstacle_polling_frequency_hz_;
    }
    if (cached_has_bits & 0x00000004u) {
      plan_deviation_m_ = from.plan_deviation_m_;
    }
    if (cached_has_bits & 0x00000008u) {
      linear_m_per_sec_ = from.linear_m_per_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      angular_degs_per_sec_ = from.angular_degs_per_sec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MotionConfiguration::CopyFrom(const MotionConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.MotionConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionConfiguration::IsInitialized() const {
  return true;
}

void MotionConfiguration::InternalSwap(MotionConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacle_detectors_.InternalSwap(&other->obstacle_detectors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MotionConfiguration, angular_degs_per_sec_)
      + sizeof(MotionConfiguration::angular_degs_per_sec_)
      - PROTOBUF_FIELD_OFFSET(MotionConfiguration, position_polling_frequency_hz_)>(
          reinterpret_cast<char*>(&position_polling_frequency_hz_),
          reinterpret_cast<char*>(&other->position_polling_frequency_hz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[5]);
}

// ===================================================================

class MoveOnGlobeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveOnGlobeRequest>()._has_bits_);
  static const ::viam::common::v1::GeoPoint& destination(const MoveOnGlobeRequest* msg);
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::viam::common::v1::ResourceName& component_name(const MoveOnGlobeRequest* msg);
  static const ::viam::common::v1::ResourceName& movement_sensor_name(const MoveOnGlobeRequest* msg);
  static const ::viam::service::motion::v1::MotionConfiguration& motion_configuration(const MoveOnGlobeRequest* msg);
  static void set_has_motion_configuration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const MoveOnGlobeRequest* msg);
};

const ::viam::common::v1::GeoPoint&
MoveOnGlobeRequest::_Internal::destination(const MoveOnGlobeRequest* msg) {
  return *msg->destination_;
}
const ::viam::common::v1::ResourceName&
MoveOnGlobeRequest::_Internal::component_name(const MoveOnGlobeRequest* msg) {
  return *msg->component_name_;
}
const ::viam::common::v1::ResourceName&
MoveOnGlobeRequest::_Internal::movement_sensor_name(const MoveOnGlobeRequest* msg) {
  return *msg->movement_sensor_name_;
}
const ::viam::service::motion::v1::MotionConfiguration&
MoveOnGlobeRequest::_Internal::motion_configuration(const MoveOnGlobeRequest* msg) {
  return *msg->motion_configuration_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
MoveOnGlobeRequest::_Internal::extra(const MoveOnGlobeRequest* msg) {
  return *msg->extra_;
}
void MoveOnGlobeRequest::clear_destination() {
  if (GetArenaForAllocation() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
void MoveOnGlobeRequest::clear_component_name() {
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
}
void MoveOnGlobeRequest::clear_movement_sensor_name() {
  if (GetArenaForAllocation() == nullptr && movement_sensor_name_ != nullptr) {
    delete movement_sensor_name_;
  }
  movement_sensor_name_ = nullptr;
}
void MoveOnGlobeRequest::clear_obstacles() {
  obstacles_.Clear();
}
void MoveOnGlobeRequest::clear_bounding_regions() {
  bounding_regions_.Clear();
}
void MoveOnGlobeRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
MoveOnGlobeRequest::MoveOnGlobeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  obstacles_(arena),
  bounding_regions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.MoveOnGlobeRequest)
}
MoveOnGlobeRequest::MoveOnGlobeRequest(const MoveOnGlobeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      obstacles_(from.obstacles_),
      bounding_regions_(from.bounding_regions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_destination()) {
    destination_ = new ::viam::common::v1::GeoPoint(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from._internal_has_component_name()) {
    component_name_ = new ::viam::common::v1::ResourceName(*from.component_name_);
  } else {
    component_name_ = nullptr;
  }
  if (from._internal_has_movement_sensor_name()) {
    movement_sensor_name_ = new ::viam::common::v1::ResourceName(*from.movement_sensor_name_);
  } else {
    movement_sensor_name_ = nullptr;
  }
  if (from._internal_has_motion_configuration()) {
    motion_configuration_ = new ::viam::service::motion::v1::MotionConfiguration(*from.motion_configuration_);
  } else {
    motion_configuration_ = nullptr;
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  heading_ = from.heading_;
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.MoveOnGlobeRequest)
}

inline void MoveOnGlobeRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&destination_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&destination_)) + sizeof(heading_));
}

MoveOnGlobeRequest::~MoveOnGlobeRequest() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.MoveOnGlobeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveOnGlobeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete component_name_;
  if (this != internal_default_instance()) delete movement_sensor_name_;
  if (this != internal_default_instance()) delete motion_configuration_;
  if (this != internal_default_instance()) delete extra_;
}

void MoveOnGlobeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveOnGlobeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.MoveOnGlobeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  bounding_regions_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && movement_sensor_name_ != nullptr) {
    delete movement_sensor_name_;
  }
  movement_sensor_name_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(motion_configuration_ != nullptr);
    motion_configuration_->Clear();
  }
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  heading_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveOnGlobeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.MoveOnGlobeRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.GeoPoint destination = 2 [json_name = "destination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 3 [json_name = "heading"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName component_name = 4 [json_name = "componentName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName movement_sensor_name = 5 [json_name = "movementSensorName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_movement_sensor_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.common.v1.GeoGeometry obstacles = 6 [json_name = "obstacles"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .viam.service.motion.v1.MotionConfiguration motion_configuration = 7 [json_name = "motionConfiguration"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_motion_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.common.v1.GeoGeometry bounding_regions = 8 [json_name = "boundingRegions"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bounding_regions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveOnGlobeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.MoveOnGlobeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.MoveOnGlobeRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .viam.common.v1.GeoPoint destination = 2 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::destination(this),
        _Internal::destination(this).GetCachedSize(), target, stream);
  }

  // optional double heading = 3 [json_name = "heading"];
  if (_internal_has_heading()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // .viam.common.v1.ResourceName component_name = 4 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::component_name(this),
        _Internal::component_name(this).GetCachedSize(), target, stream);
  }

  // .viam.common.v1.ResourceName movement_sensor_name = 5 [json_name = "movementSensorName"];
  if (this->_internal_has_movement_sensor_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::movement_sensor_name(this),
        _Internal::movement_sensor_name(this).GetCachedSize(), target, stream);
  }

  // repeated .viam.common.v1.GeoGeometry obstacles = 6 [json_name = "obstacles"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacles_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .viam.service.motion.v1.MotionConfiguration motion_configuration = 7 [json_name = "motionConfiguration"];
  if (_internal_has_motion_configuration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::motion_configuration(this),
        _Internal::motion_configuration(this).GetCachedSize(), target, stream);
  }

  // repeated .viam.common.v1.GeoGeometry bounding_regions = 8 [json_name = "boundingRegions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bounding_regions_size()); i < n; i++) {
    const auto& repfield = this->_internal_bounding_regions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.MoveOnGlobeRequest)
  return target;
}

size_t MoveOnGlobeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.MoveOnGlobeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.common.v1.GeoGeometry obstacles = 6 [json_name = "obstacles"];
  total_size += 1UL * this->_internal_obstacles_size();
  for (const auto& msg : this->obstacles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.common.v1.GeoGeometry bounding_regions = 8 [json_name = "boundingRegions"];
  total_size += 1UL * this->_internal_bounding_regions_size();
  for (const auto& msg : this->bounding_regions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .viam.common.v1.GeoPoint destination = 2 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .viam.common.v1.ResourceName component_name = 4 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_name_);
  }

  // .viam.common.v1.ResourceName movement_sensor_name = 5 [json_name = "movementSensorName"];
  if (this->_internal_has_movement_sensor_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *movement_sensor_name_);
  }

  // optional .viam.service.motion.v1.MotionConfiguration motion_configuration = 7 [json_name = "motionConfiguration"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *motion_configuration_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  // optional double heading = 3 [json_name = "heading"];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveOnGlobeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveOnGlobeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveOnGlobeRequest::GetClassData() const { return &_class_data_; }

void MoveOnGlobeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveOnGlobeRequest *>(to)->MergeFrom(
      static_cast<const MoveOnGlobeRequest &>(from));
}


void MoveOnGlobeRequest::MergeFrom(const MoveOnGlobeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.MoveOnGlobeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  bounding_regions_.MergeFrom(from.bounding_regions_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_destination()) {
    _internal_mutable_destination()->::viam::common::v1::GeoPoint::MergeFrom(from._internal_destination());
  }
  if (from._internal_has_component_name()) {
    _internal_mutable_component_name()->::viam::common::v1::ResourceName::MergeFrom(from._internal_component_name());
  }
  if (from._internal_has_movement_sensor_name()) {
    _internal_mutable_movement_sensor_name()->::viam::common::v1::ResourceName::MergeFrom(from._internal_movement_sensor_name());
  }
  if (from._internal_has_motion_configuration()) {
    _internal_mutable_motion_configuration()->::viam::service::motion::v1::MotionConfiguration::MergeFrom(from._internal_motion_configuration());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  if (from._internal_has_heading()) {
    _internal_set_heading(from._internal_heading());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveOnGlobeRequest::CopyFrom(const MoveOnGlobeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.MoveOnGlobeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveOnGlobeRequest::IsInitialized() const {
  return true;
}

void MoveOnGlobeRequest::InternalSwap(MoveOnGlobeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  obstacles_.InternalSwap(&other->obstacles_);
  bounding_regions_.InternalSwap(&other->bounding_regions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveOnGlobeRequest, heading_)
      + sizeof(MoveOnGlobeRequest::heading_)
      - PROTOBUF_FIELD_OFFSET(MoveOnGlobeRequest, destination_)>(
          reinterpret_cast<char*>(&destination_),
          reinterpret_cast<char*>(&other->destination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveOnGlobeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[6]);
}

// ===================================================================

class MoveOnGlobeResponse::_Internal {
 public:
};

MoveOnGlobeResponse::MoveOnGlobeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.MoveOnGlobeResponse)
}
MoveOnGlobeResponse::MoveOnGlobeResponse(const MoveOnGlobeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  execution_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    execution_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_id().empty()) {
    execution_id_.Set(from._internal_execution_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.MoveOnGlobeResponse)
}

inline void MoveOnGlobeResponse::SharedCtor() {
execution_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  execution_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MoveOnGlobeResponse::~MoveOnGlobeResponse() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.MoveOnGlobeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveOnGlobeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  execution_id_.Destroy();
}

void MoveOnGlobeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MoveOnGlobeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.MoveOnGlobeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  execution_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveOnGlobeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string execution_id = 1 [json_name = "executionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_execution_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.MoveOnGlobeResponse.execution_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveOnGlobeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.MoveOnGlobeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string execution_id = 1 [json_name = "executionId"];
  if (!this->_internal_execution_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execution_id().data(), static_cast<int>(this->_internal_execution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.MoveOnGlobeResponse.execution_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_execution_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.MoveOnGlobeResponse)
  return target;
}

size_t MoveOnGlobeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.MoveOnGlobeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string execution_id = 1 [json_name = "executionId"];
  if (!this->_internal_execution_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execution_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveOnGlobeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MoveOnGlobeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveOnGlobeResponse::GetClassData() const { return &_class_data_; }

void MoveOnGlobeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MoveOnGlobeResponse *>(to)->MergeFrom(
      static_cast<const MoveOnGlobeResponse &>(from));
}


void MoveOnGlobeResponse::MergeFrom(const MoveOnGlobeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.MoveOnGlobeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_execution_id().empty()) {
    _internal_set_execution_id(from._internal_execution_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveOnGlobeResponse::CopyFrom(const MoveOnGlobeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.MoveOnGlobeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveOnGlobeResponse::IsInitialized() const {
  return true;
}

void MoveOnGlobeResponse::InternalSwap(MoveOnGlobeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &execution_id_, lhs_arena,
      &other->execution_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveOnGlobeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[7]);
}

// ===================================================================

class GetPoseRequest::_Internal {
 public:
  static const ::viam::common::v1::ResourceName& component_name(const GetPoseRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetPoseRequest* msg);
};

const ::viam::common::v1::ResourceName&
GetPoseRequest::_Internal::component_name(const GetPoseRequest* msg) {
  return *msg->component_name_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
GetPoseRequest::_Internal::extra(const GetPoseRequest* msg) {
  return *msg->extra_;
}
void GetPoseRequest::clear_component_name() {
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
}
void GetPoseRequest::clear_supplemental_transforms() {
  supplemental_transforms_.Clear();
}
void GetPoseRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetPoseRequest::GetPoseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  supplemental_transforms_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.GetPoseRequest)
}
GetPoseRequest::GetPoseRequest(const GetPoseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supplemental_transforms_(from.supplemental_transforms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  destination_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    destination_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_frame().empty()) {
    destination_frame_.Set(from._internal_destination_frame(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_component_name()) {
    component_name_ = new ::viam::common::v1::ResourceName(*from.component_name_);
  } else {
    component_name_ = nullptr;
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.GetPoseRequest)
}

inline void GetPoseRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
destination_frame_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  destination_frame_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_name_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extra_) -
    reinterpret_cast<char*>(&component_name_)) + sizeof(extra_));
}

GetPoseRequest::~GetPoseRequest() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.GetPoseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPoseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  destination_frame_.Destroy();
  if (this != internal_default_instance()) delete component_name_;
  if (this != internal_default_instance()) delete extra_;
}

void GetPoseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPoseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.GetPoseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supplemental_transforms_.Clear();
  name_.ClearToEmpty();
  destination_frame_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPoseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.GetPoseRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string destination_frame = 3 [json_name = "destinationFrame"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_destination_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.GetPoseRequest.destination_frame"));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.common.v1.Transform supplemental_transforms = 4 [json_name = "supplementalTransforms"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supplemental_transforms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPoseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.GetPoseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.GetPoseRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::component_name(this),
        _Internal::component_name(this).GetCachedSize(), target, stream);
  }

  // string destination_frame = 3 [json_name = "destinationFrame"];
  if (!this->_internal_destination_frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_frame().data(), static_cast<int>(this->_internal_destination_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.GetPoseRequest.destination_frame");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_destination_frame(), target);
  }

  // repeated .viam.common.v1.Transform supplemental_transforms = 4 [json_name = "supplementalTransforms"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_supplemental_transforms_size()); i < n; i++) {
    const auto& repfield = this->_internal_supplemental_transforms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.GetPoseRequest)
  return target;
}

size_t GetPoseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.GetPoseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.common.v1.Transform supplemental_transforms = 4 [json_name = "supplementalTransforms"];
  total_size += 1UL * this->_internal_supplemental_transforms_size();
  for (const auto& msg : this->supplemental_transforms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string destination_frame = 3 [json_name = "destinationFrame"];
  if (!this->_internal_destination_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_frame());
  }

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_name_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPoseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPoseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPoseRequest::GetClassData() const { return &_class_data_; }

void GetPoseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPoseRequest *>(to)->MergeFrom(
      static_cast<const GetPoseRequest &>(from));
}


void GetPoseRequest::MergeFrom(const GetPoseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.GetPoseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  supplemental_transforms_.MergeFrom(from.supplemental_transforms_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_destination_frame().empty()) {
    _internal_set_destination_frame(from._internal_destination_frame());
  }
  if (from._internal_has_component_name()) {
    _internal_mutable_component_name()->::viam::common::v1::ResourceName::MergeFrom(from._internal_component_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPoseRequest::CopyFrom(const GetPoseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.GetPoseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPoseRequest::IsInitialized() const {
  return true;
}

void GetPoseRequest::InternalSwap(GetPoseRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  supplemental_transforms_.InternalSwap(&other->supplemental_transforms_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &destination_frame_, lhs_arena,
      &other->destination_frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPoseRequest, extra_)
      + sizeof(GetPoseRequest::extra_)
      - PROTOBUF_FIELD_OFFSET(GetPoseRequest, component_name_)>(
          reinterpret_cast<char*>(&component_name_),
          reinterpret_cast<char*>(&other->component_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPoseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[8]);
}

// ===================================================================

class GetPoseResponse::_Internal {
 public:
  static const ::viam::common::v1::PoseInFrame& pose(const GetPoseResponse* msg);
};

const ::viam::common::v1::PoseInFrame&
GetPoseResponse::_Internal::pose(const GetPoseResponse* msg) {
  return *msg->pose_;
}
void GetPoseResponse::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
GetPoseResponse::GetPoseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.GetPoseResponse)
}
GetPoseResponse::GetPoseResponse(const GetPoseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::viam::common::v1::PoseInFrame(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.GetPoseResponse)
}

inline void GetPoseResponse::SharedCtor() {
pose_ = nullptr;
}

GetPoseResponse::~GetPoseResponse() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.GetPoseResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPoseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void GetPoseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPoseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.GetPoseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPoseResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.common.v1.PoseInFrame pose = 1 [json_name = "pose"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPoseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.GetPoseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.common.v1.PoseInFrame pose = 1 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.GetPoseResponse)
  return target;
}

size_t GetPoseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.GetPoseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.common.v1.PoseInFrame pose = 1 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPoseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPoseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPoseResponse::GetClassData() const { return &_class_data_; }

void GetPoseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPoseResponse *>(to)->MergeFrom(
      static_cast<const GetPoseResponse &>(from));
}


void GetPoseResponse::MergeFrom(const GetPoseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.GetPoseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::viam::common::v1::PoseInFrame::MergeFrom(from._internal_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPoseResponse::CopyFrom(const GetPoseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.GetPoseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPoseResponse::IsInitialized() const {
  return true;
}

void GetPoseResponse::InternalSwap(GetPoseResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPoseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[9]);
}

// ===================================================================

class StopPlanRequest::_Internal {
 public:
  static const ::viam::common::v1::ResourceName& component_name(const StopPlanRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const StopPlanRequest* msg);
};

const ::viam::common::v1::ResourceName&
StopPlanRequest::_Internal::component_name(const StopPlanRequest* msg) {
  return *msg->component_name_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
StopPlanRequest::_Internal::extra(const StopPlanRequest* msg) {
  return *msg->extra_;
}
void StopPlanRequest::clear_component_name() {
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
}
void StopPlanRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
StopPlanRequest::StopPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.StopPlanRequest)
}
StopPlanRequest::StopPlanRequest(const StopPlanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_component_name()) {
    component_name_ = new ::viam::common::v1::ResourceName(*from.component_name_);
  } else {
    component_name_ = nullptr;
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.StopPlanRequest)
}

inline void StopPlanRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_name_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extra_) -
    reinterpret_cast<char*>(&component_name_)) + sizeof(extra_));
}

StopPlanRequest::~StopPlanRequest() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.StopPlanRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopPlanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete component_name_;
  if (this != internal_default_instance()) delete extra_;
}

void StopPlanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopPlanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.StopPlanRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopPlanRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.StopPlanRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopPlanRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.StopPlanRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.StopPlanRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::component_name(this),
        _Internal::component_name(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.StopPlanRequest)
  return target;
}

size_t StopPlanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.StopPlanRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_name_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopPlanRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StopPlanRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopPlanRequest::GetClassData() const { return &_class_data_; }

void StopPlanRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StopPlanRequest *>(to)->MergeFrom(
      static_cast<const StopPlanRequest &>(from));
}


void StopPlanRequest::MergeFrom(const StopPlanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.StopPlanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_component_name()) {
    _internal_mutable_component_name()->::viam::common::v1::ResourceName::MergeFrom(from._internal_component_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopPlanRequest::CopyFrom(const StopPlanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.StopPlanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPlanRequest::IsInitialized() const {
  return true;
}

void StopPlanRequest::InternalSwap(StopPlanRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopPlanRequest, extra_)
      + sizeof(StopPlanRequest::extra_)
      - PROTOBUF_FIELD_OFFSET(StopPlanRequest, component_name_)>(
          reinterpret_cast<char*>(&component_name_),
          reinterpret_cast<char*>(&other->component_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopPlanRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[10]);
}

// ===================================================================

class StopPlanResponse::_Internal {
 public:
};

StopPlanResponse::StopPlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.StopPlanResponse)
}
StopPlanResponse::StopPlanResponse(const StopPlanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.StopPlanResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopPlanResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopPlanResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StopPlanResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[11]);
}

// ===================================================================

class ListPlanStatusesRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const ListPlanStatusesRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ListPlanStatusesRequest::_Internal::extra(const ListPlanStatusesRequest* msg) {
  return *msg->extra_;
}
void ListPlanStatusesRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
ListPlanStatusesRequest::ListPlanStatusesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.ListPlanStatusesRequest)
}
ListPlanStatusesRequest::ListPlanStatusesRequest(const ListPlanStatusesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  only_active_plans_ = from.only_active_plans_;
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.ListPlanStatusesRequest)
}

inline void ListPlanStatusesRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extra_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&only_active_plans_) -
    reinterpret_cast<char*>(&extra_)) + sizeof(only_active_plans_));
}

ListPlanStatusesRequest::~ListPlanStatusesRequest() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.ListPlanStatusesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListPlanStatusesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void ListPlanStatusesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListPlanStatusesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.ListPlanStatusesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  only_active_plans_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPlanStatusesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.ListPlanStatusesRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // bool only_active_plans = 2 [json_name = "onlyActivePlans"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          only_active_plans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPlanStatusesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.ListPlanStatusesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.ListPlanStatusesRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool only_active_plans = 2 [json_name = "onlyActivePlans"];
  if (this->_internal_only_active_plans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_only_active_plans(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.ListPlanStatusesRequest)
  return target;
}

size_t ListPlanStatusesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.ListPlanStatusesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  // bool only_active_plans = 2 [json_name = "onlyActivePlans"];
  if (this->_internal_only_active_plans() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPlanStatusesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPlanStatusesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPlanStatusesRequest::GetClassData() const { return &_class_data_; }

void ListPlanStatusesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListPlanStatusesRequest *>(to)->MergeFrom(
      static_cast<const ListPlanStatusesRequest &>(from));
}


void ListPlanStatusesRequest::MergeFrom(const ListPlanStatusesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.ListPlanStatusesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  if (from._internal_only_active_plans() != 0) {
    _internal_set_only_active_plans(from._internal_only_active_plans());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPlanStatusesRequest::CopyFrom(const ListPlanStatusesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.ListPlanStatusesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPlanStatusesRequest::IsInitialized() const {
  return true;
}

void ListPlanStatusesRequest::InternalSwap(ListPlanStatusesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListPlanStatusesRequest, only_active_plans_)
      + sizeof(ListPlanStatusesRequest::only_active_plans_)
      - PROTOBUF_FIELD_OFFSET(ListPlanStatusesRequest, extra_)>(
          reinterpret_cast<char*>(&extra_),
          reinterpret_cast<char*>(&other->extra_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPlanStatusesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[12]);
}

// ===================================================================

class ListPlanStatusesResponse::_Internal {
 public:
};

ListPlanStatusesResponse::ListPlanStatusesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  plan_statuses_with_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.ListPlanStatusesResponse)
}
ListPlanStatusesResponse::ListPlanStatusesResponse(const ListPlanStatusesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      plan_statuses_with_ids_(from.plan_statuses_with_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.ListPlanStatusesResponse)
}

inline void ListPlanStatusesResponse::SharedCtor() {
}

ListPlanStatusesResponse::~ListPlanStatusesResponse() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.ListPlanStatusesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListPlanStatusesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListPlanStatusesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListPlanStatusesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.ListPlanStatusesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plan_statuses_with_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPlanStatusesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.motion.v1.PlanStatusWithID plan_statuses_with_ids = 1 [json_name = "planStatusesWithIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_plan_statuses_with_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListPlanStatusesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.ListPlanStatusesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.PlanStatusWithID plan_statuses_with_ids = 1 [json_name = "planStatusesWithIds"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_plan_statuses_with_ids_size()); i < n; i++) {
    const auto& repfield = this->_internal_plan_statuses_with_ids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.ListPlanStatusesResponse)
  return target;
}

size_t ListPlanStatusesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.ListPlanStatusesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.PlanStatusWithID plan_statuses_with_ids = 1 [json_name = "planStatusesWithIds"];
  total_size += 1UL * this->_internal_plan_statuses_with_ids_size();
  for (const auto& msg : this->plan_statuses_with_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPlanStatusesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPlanStatusesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPlanStatusesResponse::GetClassData() const { return &_class_data_; }

void ListPlanStatusesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListPlanStatusesResponse *>(to)->MergeFrom(
      static_cast<const ListPlanStatusesResponse &>(from));
}


void ListPlanStatusesResponse::MergeFrom(const ListPlanStatusesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.ListPlanStatusesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  plan_statuses_with_ids_.MergeFrom(from.plan_statuses_with_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPlanStatusesResponse::CopyFrom(const ListPlanStatusesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.ListPlanStatusesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPlanStatusesResponse::IsInitialized() const {
  return true;
}

void ListPlanStatusesResponse::InternalSwap(ListPlanStatusesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  plan_statuses_with_ids_.InternalSwap(&other->plan_statuses_with_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPlanStatusesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[13]);
}

// ===================================================================

class GetPlanRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetPlanRequest>()._has_bits_);
  static const ::viam::common::v1::ResourceName& component_name(const GetPlanRequest* msg);
  static void set_has_execution_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetPlanRequest* msg);
};

const ::viam::common::v1::ResourceName&
GetPlanRequest::_Internal::component_name(const GetPlanRequest* msg) {
  return *msg->component_name_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
GetPlanRequest::_Internal::extra(const GetPlanRequest* msg) {
  return *msg->extra_;
}
void GetPlanRequest::clear_component_name() {
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
}
void GetPlanRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetPlanRequest::GetPlanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.GetPlanRequest)
}
GetPlanRequest::GetPlanRequest(const GetPlanRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  execution_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    execution_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_execution_id()) {
    execution_id_.Set(from._internal_execution_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_component_name()) {
    component_name_ = new ::viam::common::v1::ResourceName(*from.component_name_);
  } else {
    component_name_ = nullptr;
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  last_plan_only_ = from.last_plan_only_;
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.GetPlanRequest)
}

inline void GetPlanRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
execution_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  execution_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_name_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_plan_only_) -
    reinterpret_cast<char*>(&component_name_)) + sizeof(last_plan_only_));
}

GetPlanRequest::~GetPlanRequest() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.GetPlanRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPlanRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  execution_id_.Destroy();
  if (this != internal_default_instance()) delete component_name_;
  if (this != internal_default_instance()) delete extra_;
}

void GetPlanRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPlanRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.GetPlanRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    execution_id_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  last_plan_only_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlanRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.GetPlanRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool last_plan_only = 3 [json_name = "lastPlanOnly"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          last_plan_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string execution_id = 4 [json_name = "executionId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_execution_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.GetPlanRequest.execution_id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPlanRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.GetPlanRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.GetPlanRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::component_name(this),
        _Internal::component_name(this).GetCachedSize(), target, stream);
  }

  // bool last_plan_only = 3 [json_name = "lastPlanOnly"];
  if (this->_internal_last_plan_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_last_plan_only(), target);
  }

  // optional string execution_id = 4 [json_name = "executionId"];
  if (_internal_has_execution_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execution_id().data(), static_cast<int>(this->_internal_execution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.GetPlanRequest.execution_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_execution_id(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.GetPlanRequest)
  return target;
}

size_t GetPlanRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.GetPlanRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // optional string execution_id = 4 [json_name = "executionId"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execution_id());
  }

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_name_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  // bool last_plan_only = 3 [json_name = "lastPlanOnly"];
  if (this->_internal_last_plan_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPlanRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPlanRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPlanRequest::GetClassData() const { return &_class_data_; }

void GetPlanRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPlanRequest *>(to)->MergeFrom(
      static_cast<const GetPlanRequest &>(from));
}


void GetPlanRequest::MergeFrom(const GetPlanRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.GetPlanRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_execution_id()) {
    _internal_set_execution_id(from._internal_execution_id());
  }
  if (from._internal_has_component_name()) {
    _internal_mutable_component_name()->::viam::common::v1::ResourceName::MergeFrom(from._internal_component_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  if (from._internal_last_plan_only() != 0) {
    _internal_set_last_plan_only(from._internal_last_plan_only());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPlanRequest::CopyFrom(const GetPlanRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.GetPlanRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlanRequest::IsInitialized() const {
  return true;
}

void GetPlanRequest::InternalSwap(GetPlanRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &execution_id_, lhs_arena,
      &other->execution_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPlanRequest, last_plan_only_)
      + sizeof(GetPlanRequest::last_plan_only_)
      - PROTOBUF_FIELD_OFFSET(GetPlanRequest, component_name_)>(
          reinterpret_cast<char*>(&component_name_),
          reinterpret_cast<char*>(&other->component_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlanRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[14]);
}

// ===================================================================

class GetPlanResponse::_Internal {
 public:
  static const ::viam::service::motion::v1::PlanWithStatus& current_plan_with_status(const GetPlanResponse* msg);
};

const ::viam::service::motion::v1::PlanWithStatus&
GetPlanResponse::_Internal::current_plan_with_status(const GetPlanResponse* msg) {
  return *msg->current_plan_with_status_;
}
GetPlanResponse::GetPlanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  replan_history_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.GetPlanResponse)
}
GetPlanResponse::GetPlanResponse(const GetPlanResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      replan_history_(from.replan_history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_plan_with_status()) {
    current_plan_with_status_ = new ::viam::service::motion::v1::PlanWithStatus(*from.current_plan_with_status_);
  } else {
    current_plan_with_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.GetPlanResponse)
}

inline void GetPlanResponse::SharedCtor() {
current_plan_with_status_ = nullptr;
}

GetPlanResponse::~GetPlanResponse() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.GetPlanResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPlanResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete current_plan_with_status_;
}

void GetPlanResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPlanResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.GetPlanResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replan_history_.Clear();
  if (GetArenaForAllocation() == nullptr && current_plan_with_status_ != nullptr) {
    delete current_plan_with_status_;
  }
  current_plan_with_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPlanResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.service.motion.v1.PlanWithStatus current_plan_with_status = 1 [json_name = "currentPlanWithStatus"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_plan_with_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.service.motion.v1.PlanWithStatus replan_history = 2 [json_name = "replanHistory"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replan_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPlanResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.GetPlanResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.service.motion.v1.PlanWithStatus current_plan_with_status = 1 [json_name = "currentPlanWithStatus"];
  if (this->_internal_has_current_plan_with_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::current_plan_with_status(this),
        _Internal::current_plan_with_status(this).GetCachedSize(), target, stream);
  }

  // repeated .viam.service.motion.v1.PlanWithStatus replan_history = 2 [json_name = "replanHistory"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_replan_history_size()); i < n; i++) {
    const auto& repfield = this->_internal_replan_history(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.GetPlanResponse)
  return target;
}

size_t GetPlanResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.GetPlanResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.PlanWithStatus replan_history = 2 [json_name = "replanHistory"];
  total_size += 1UL * this->_internal_replan_history_size();
  for (const auto& msg : this->replan_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .viam.service.motion.v1.PlanWithStatus current_plan_with_status = 1 [json_name = "currentPlanWithStatus"];
  if (this->_internal_has_current_plan_with_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_plan_with_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPlanResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPlanResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPlanResponse::GetClassData() const { return &_class_data_; }

void GetPlanResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPlanResponse *>(to)->MergeFrom(
      static_cast<const GetPlanResponse &>(from));
}


void GetPlanResponse::MergeFrom(const GetPlanResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.GetPlanResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  replan_history_.MergeFrom(from.replan_history_);
  if (from._internal_has_current_plan_with_status()) {
    _internal_mutable_current_plan_with_status()->::viam::service::motion::v1::PlanWithStatus::MergeFrom(from._internal_current_plan_with_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPlanResponse::CopyFrom(const GetPlanResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.GetPlanResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPlanResponse::IsInitialized() const {
  return true;
}

void GetPlanResponse::InternalSwap(GetPlanResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  replan_history_.InternalSwap(&other->replan_history_);
  swap(current_plan_with_status_, other->current_plan_with_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPlanResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[15]);
}

// ===================================================================

class Constraints::_Internal {
 public:
};

Constraints::Constraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  linear_constraint_(arena),
  orientation_constraint_(arena),
  collision_specification_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.Constraints)
}
Constraints::Constraints(const Constraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      linear_constraint_(from.linear_constraint_),
      orientation_constraint_(from.orientation_constraint_),
      collision_specification_(from.collision_specification_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.Constraints)
}

inline void Constraints::SharedCtor() {
}

Constraints::~Constraints() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.Constraints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Constraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Constraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Constraints::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.Constraints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linear_constraint_.Clear();
  orientation_constraint_.Clear();
  collision_specification_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Constraints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.motion.v1.LinearConstraint linear_constraint = 1 [json_name = "linearConstraint"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linear_constraint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.service.motion.v1.OrientationConstraint orientation_constraint = 2 [json_name = "orientationConstraint"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orientation_constraint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.service.motion.v1.CollisionSpecification collision_specification = 3 [json_name = "collisionSpecification"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collision_specification(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Constraints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.Constraints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.LinearConstraint linear_constraint = 1 [json_name = "linearConstraint"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_linear_constraint_size()); i < n; i++) {
    const auto& repfield = this->_internal_linear_constraint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.service.motion.v1.OrientationConstraint orientation_constraint = 2 [json_name = "orientationConstraint"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orientation_constraint_size()); i < n; i++) {
    const auto& repfield = this->_internal_orientation_constraint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.service.motion.v1.CollisionSpecification collision_specification = 3 [json_name = "collisionSpecification"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collision_specification_size()); i < n; i++) {
    const auto& repfield = this->_internal_collision_specification(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.Constraints)
  return target;
}

size_t Constraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.Constraints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.LinearConstraint linear_constraint = 1 [json_name = "linearConstraint"];
  total_size += 1UL * this->_internal_linear_constraint_size();
  for (const auto& msg : this->linear_constraint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.service.motion.v1.OrientationConstraint orientation_constraint = 2 [json_name = "orientationConstraint"];
  total_size += 1UL * this->_internal_orientation_constraint_size();
  for (const auto& msg : this->orientation_constraint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.service.motion.v1.CollisionSpecification collision_specification = 3 [json_name = "collisionSpecification"];
  total_size += 1UL * this->_internal_collision_specification_size();
  for (const auto& msg : this->collision_specification_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Constraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Constraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Constraints::GetClassData() const { return &_class_data_; }

void Constraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Constraints *>(to)->MergeFrom(
      static_cast<const Constraints &>(from));
}


void Constraints::MergeFrom(const Constraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.Constraints)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  linear_constraint_.MergeFrom(from.linear_constraint_);
  orientation_constraint_.MergeFrom(from.orientation_constraint_);
  collision_specification_.MergeFrom(from.collision_specification_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Constraints::CopyFrom(const Constraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.Constraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constraints::IsInitialized() const {
  return true;
}

void Constraints::InternalSwap(Constraints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  linear_constraint_.InternalSwap(&other->linear_constraint_);
  orientation_constraint_.InternalSwap(&other->orientation_constraint_);
  collision_specification_.InternalSwap(&other->collision_specification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Constraints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[16]);
}

// ===================================================================

class LinearConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<LinearConstraint>()._has_bits_);
  static void set_has_line_tolerance_mm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_orientation_tolerance_degs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LinearConstraint::LinearConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.LinearConstraint)
}
LinearConstraint::LinearConstraint(const LinearConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&line_tolerance_mm_, &from.line_tolerance_mm_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_tolerance_degs_) -
    reinterpret_cast<char*>(&line_tolerance_mm_)) + sizeof(orientation_tolerance_degs_));
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.LinearConstraint)
}

inline void LinearConstraint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&line_tolerance_mm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_tolerance_degs_) -
    reinterpret_cast<char*>(&line_tolerance_mm_)) + sizeof(orientation_tolerance_degs_));
}

LinearConstraint::~LinearConstraint() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.LinearConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinearConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LinearConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinearConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.LinearConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&line_tolerance_mm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orientation_tolerance_degs_) -
        reinterpret_cast<char*>(&line_tolerance_mm_)) + sizeof(orientation_tolerance_degs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float line_tolerance_mm = 1 [json_name = "lineToleranceMm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_line_tolerance_mm(&has_bits);
          line_tolerance_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float orientation_tolerance_degs = 2 [json_name = "orientationToleranceDegs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_orientation_tolerance_degs(&has_bits);
          orientation_tolerance_degs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinearConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.LinearConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float line_tolerance_mm = 1 [json_name = "lineToleranceMm"];
  if (_internal_has_line_tolerance_mm()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_line_tolerance_mm(), target);
  }

  // optional float orientation_tolerance_degs = 2 [json_name = "orientationToleranceDegs"];
  if (_internal_has_orientation_tolerance_degs()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_orientation_tolerance_degs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.LinearConstraint)
  return target;
}

size_t LinearConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.LinearConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float line_tolerance_mm = 1 [json_name = "lineToleranceMm"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float orientation_tolerance_degs = 2 [json_name = "orientationToleranceDegs"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinearConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LinearConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinearConstraint::GetClassData() const { return &_class_data_; }

void LinearConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LinearConstraint *>(to)->MergeFrom(
      static_cast<const LinearConstraint &>(from));
}


void LinearConstraint::MergeFrom(const LinearConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.LinearConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      line_tolerance_mm_ = from.line_tolerance_mm_;
    }
    if (cached_has_bits & 0x00000002u) {
      orientation_tolerance_degs_ = from.orientation_tolerance_degs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinearConstraint::CopyFrom(const LinearConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.LinearConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearConstraint::IsInitialized() const {
  return true;
}

void LinearConstraint::InternalSwap(LinearConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinearConstraint, orientation_tolerance_degs_)
      + sizeof(LinearConstraint::orientation_tolerance_degs_)
      - PROTOBUF_FIELD_OFFSET(LinearConstraint, line_tolerance_mm_)>(
          reinterpret_cast<char*>(&line_tolerance_mm_),
          reinterpret_cast<char*>(&other->line_tolerance_mm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[17]);
}

// ===================================================================

class OrientationConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<OrientationConstraint>()._has_bits_);
  static void set_has_orientation_tolerance_degs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OrientationConstraint::OrientationConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.OrientationConstraint)
}
OrientationConstraint::OrientationConstraint(const OrientationConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  orientation_tolerance_degs_ = from.orientation_tolerance_degs_;
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.OrientationConstraint)
}

inline void OrientationConstraint::SharedCtor() {
orientation_tolerance_degs_ = 0;
}

OrientationConstraint::~OrientationConstraint() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.OrientationConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrientationConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OrientationConstraint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrientationConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.OrientationConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orientation_tolerance_degs_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrientationConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float orientation_tolerance_degs = 1 [json_name = "orientationToleranceDegs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_orientation_tolerance_degs(&has_bits);
          orientation_tolerance_degs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrientationConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.OrientationConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float orientation_tolerance_degs = 1 [json_name = "orientationToleranceDegs"];
  if (_internal_has_orientation_tolerance_degs()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_orientation_tolerance_degs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.OrientationConstraint)
  return target;
}

size_t OrientationConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.OrientationConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float orientation_tolerance_degs = 1 [json_name = "orientationToleranceDegs"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrientationConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrientationConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrientationConstraint::GetClassData() const { return &_class_data_; }

void OrientationConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OrientationConstraint *>(to)->MergeFrom(
      static_cast<const OrientationConstraint &>(from));
}


void OrientationConstraint::MergeFrom(const OrientationConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.OrientationConstraint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_orientation_tolerance_degs()) {
    _internal_set_orientation_tolerance_degs(from._internal_orientation_tolerance_degs());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrientationConstraint::CopyFrom(const OrientationConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.OrientationConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrientationConstraint::IsInitialized() const {
  return true;
}

void OrientationConstraint::InternalSwap(OrientationConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(orientation_tolerance_degs_, other->orientation_tolerance_degs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrientationConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[18]);
}

// ===================================================================

class CollisionSpecification_AllowedFrameCollisions::_Internal {
 public:
};

CollisionSpecification_AllowedFrameCollisions::CollisionSpecification_AllowedFrameCollisions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
}
CollisionSpecification_AllowedFrameCollisions::CollisionSpecification_AllowedFrameCollisions(const CollisionSpecification_AllowedFrameCollisions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame1().empty()) {
    frame1_.Set(from._internal_frame1(), 
      GetArenaForAllocation());
  }
  frame2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame2().empty()) {
    frame2_.Set(from._internal_frame2(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
}

inline void CollisionSpecification_AllowedFrameCollisions::SharedCtor() {
frame1_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame1_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
frame2_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame2_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CollisionSpecification_AllowedFrameCollisions::~CollisionSpecification_AllowedFrameCollisions() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollisionSpecification_AllowedFrameCollisions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame1_.Destroy();
  frame2_.Destroy();
}

void CollisionSpecification_AllowedFrameCollisions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollisionSpecification_AllowedFrameCollisions::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame1_.ClearToEmpty();
  frame2_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollisionSpecification_AllowedFrameCollisions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string frame1 = 1 [json_name = "frame1"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_frame1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions.frame1"));
        } else
          goto handle_unusual;
        continue;
      // string frame2 = 2 [json_name = "frame2"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_frame2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions.frame2"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollisionSpecification_AllowedFrameCollisions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string frame1 = 1 [json_name = "frame1"];
  if (!this->_internal_frame1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame1().data(), static_cast<int>(this->_internal_frame1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions.frame1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame1(), target);
  }

  // string frame2 = 2 [json_name = "frame2"];
  if (!this->_internal_frame2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame2().data(), static_cast<int>(this->_internal_frame2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions.frame2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  return target;
}

size_t CollisionSpecification_AllowedFrameCollisions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame1 = 1 [json_name = "frame1"];
  if (!this->_internal_frame1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame1());
  }

  // string frame2 = 2 [json_name = "frame2"];
  if (!this->_internal_frame2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollisionSpecification_AllowedFrameCollisions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollisionSpecification_AllowedFrameCollisions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollisionSpecification_AllowedFrameCollisions::GetClassData() const { return &_class_data_; }

void CollisionSpecification_AllowedFrameCollisions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CollisionSpecification_AllowedFrameCollisions *>(to)->MergeFrom(
      static_cast<const CollisionSpecification_AllowedFrameCollisions &>(from));
}


void CollisionSpecification_AllowedFrameCollisions::MergeFrom(const CollisionSpecification_AllowedFrameCollisions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_frame1().empty()) {
    _internal_set_frame1(from._internal_frame1());
  }
  if (!from._internal_frame2().empty()) {
    _internal_set_frame2(from._internal_frame2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollisionSpecification_AllowedFrameCollisions::CopyFrom(const CollisionSpecification_AllowedFrameCollisions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionSpecification_AllowedFrameCollisions::IsInitialized() const {
  return true;
}

void CollisionSpecification_AllowedFrameCollisions::InternalSwap(CollisionSpecification_AllowedFrameCollisions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frame1_, lhs_arena,
      &other->frame1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frame2_, lhs_arena,
      &other->frame2_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CollisionSpecification_AllowedFrameCollisions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[19]);
}

// ===================================================================

class CollisionSpecification::_Internal {
 public:
};

CollisionSpecification::CollisionSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  allows_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.CollisionSpecification)
}
CollisionSpecification::CollisionSpecification(const CollisionSpecification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      allows_(from.allows_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.CollisionSpecification)
}

inline void CollisionSpecification::SharedCtor() {
}

CollisionSpecification::~CollisionSpecification() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.CollisionSpecification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollisionSpecification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CollisionSpecification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CollisionSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.CollisionSpecification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allows_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollisionSpecification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions allows = 1 [json_name = "allows"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollisionSpecification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.CollisionSpecification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions allows = 1 [json_name = "allows"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_allows_size()); i < n; i++) {
    const auto& repfield = this->_internal_allows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.CollisionSpecification)
  return target;
}

size_t CollisionSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.CollisionSpecification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions allows = 1 [json_name = "allows"];
  total_size += 1UL * this->_internal_allows_size();
  for (const auto& msg : this->allows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollisionSpecification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CollisionSpecification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollisionSpecification::GetClassData() const { return &_class_data_; }

void CollisionSpecification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CollisionSpecification *>(to)->MergeFrom(
      static_cast<const CollisionSpecification &>(from));
}


void CollisionSpecification::MergeFrom(const CollisionSpecification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.CollisionSpecification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  allows_.MergeFrom(from.allows_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollisionSpecification::CopyFrom(const CollisionSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.CollisionSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionSpecification::IsInitialized() const {
  return true;
}

void CollisionSpecification::InternalSwap(CollisionSpecification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  allows_.InternalSwap(&other->allows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollisionSpecification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[20]);
}

// ===================================================================

class PlanWithStatus::_Internal {
 public:
  static const ::viam::service::motion::v1::Plan& plan(const PlanWithStatus* msg);
  static const ::viam::service::motion::v1::PlanStatus& status(const PlanWithStatus* msg);
};

const ::viam::service::motion::v1::Plan&
PlanWithStatus::_Internal::plan(const PlanWithStatus* msg) {
  return *msg->plan_;
}
const ::viam::service::motion::v1::PlanStatus&
PlanWithStatus::_Internal::status(const PlanWithStatus* msg) {
  return *msg->status_;
}
PlanWithStatus::PlanWithStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  status_history_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.PlanWithStatus)
}
PlanWithStatus::PlanWithStatus(const PlanWithStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      status_history_(from.status_history_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plan()) {
    plan_ = new ::viam::service::motion::v1::Plan(*from.plan_);
  } else {
    plan_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::viam::service::motion::v1::PlanStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.PlanWithStatus)
}

inline void PlanWithStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&plan_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&plan_)) + sizeof(status_));
}

PlanWithStatus::~PlanWithStatus() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.PlanWithStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanWithStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete plan_;
  if (this != internal_default_instance()) delete status_;
}

void PlanWithStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlanWithStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.PlanWithStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_history_.Clear();
  if (GetArenaForAllocation() == nullptr && plan_ != nullptr) {
    delete plan_;
  }
  plan_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanWithStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.service.motion.v1.Plan plan = 1 [json_name = "plan"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plan(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.service.motion.v1.PlanStatus status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.service.motion.v1.PlanStatus status_history = 3 [json_name = "statusHistory"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_status_history(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanWithStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.PlanWithStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.service.motion.v1.Plan plan = 1 [json_name = "plan"];
  if (this->_internal_has_plan()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::plan(this),
        _Internal::plan(this).GetCachedSize(), target, stream);
  }

  // .viam.service.motion.v1.PlanStatus status = 2 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // repeated .viam.service.motion.v1.PlanStatus status_history = 3 [json_name = "statusHistory"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_status_history_size()); i < n; i++) {
    const auto& repfield = this->_internal_status_history(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.PlanWithStatus)
  return target;
}

size_t PlanWithStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.PlanWithStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.PlanStatus status_history = 3 [json_name = "statusHistory"];
  total_size += 1UL * this->_internal_status_history_size();
  for (const auto& msg : this->status_history_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .viam.service.motion.v1.Plan plan = 1 [json_name = "plan"];
  if (this->_internal_has_plan()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plan_);
  }

  // .viam.service.motion.v1.PlanStatus status = 2 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanWithStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanWithStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanWithStatus::GetClassData() const { return &_class_data_; }

void PlanWithStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanWithStatus *>(to)->MergeFrom(
      static_cast<const PlanWithStatus &>(from));
}


void PlanWithStatus::MergeFrom(const PlanWithStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.PlanWithStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  status_history_.MergeFrom(from.status_history_);
  if (from._internal_has_plan()) {
    _internal_mutable_plan()->::viam::service::motion::v1::Plan::MergeFrom(from._internal_plan());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::viam::service::motion::v1::PlanStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanWithStatus::CopyFrom(const PlanWithStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.PlanWithStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanWithStatus::IsInitialized() const {
  return true;
}

void PlanWithStatus::InternalSwap(PlanWithStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  status_history_.InternalSwap(&other->status_history_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanWithStatus, status_)
      + sizeof(PlanWithStatus::status_)
      - PROTOBUF_FIELD_OFFSET(PlanWithStatus, plan_)>(
          reinterpret_cast<char*>(&plan_),
          reinterpret_cast<char*>(&other->plan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanWithStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[21]);
}

// ===================================================================

class PlanStatusWithID::_Internal {
 public:
  static const ::viam::common::v1::ResourceName& component_name(const PlanStatusWithID* msg);
  static const ::viam::service::motion::v1::PlanStatus& status(const PlanStatusWithID* msg);
};

const ::viam::common::v1::ResourceName&
PlanStatusWithID::_Internal::component_name(const PlanStatusWithID* msg) {
  return *msg->component_name_;
}
const ::viam::service::motion::v1::PlanStatus&
PlanStatusWithID::_Internal::status(const PlanStatusWithID* msg) {
  return *msg->status_;
}
void PlanStatusWithID::clear_component_name() {
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
}
PlanStatusWithID::PlanStatusWithID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.PlanStatusWithID)
}
PlanStatusWithID::PlanStatusWithID(const PlanStatusWithID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plan_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    plan_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plan_id().empty()) {
    plan_id_.Set(from._internal_plan_id(), 
      GetArenaForAllocation());
  }
  execution_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    execution_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_id().empty()) {
    execution_id_.Set(from._internal_execution_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_component_name()) {
    component_name_ = new ::viam::common::v1::ResourceName(*from.component_name_);
  } else {
    component_name_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::viam::service::motion::v1::PlanStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.PlanStatusWithID)
}

inline void PlanStatusWithID::SharedCtor() {
plan_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  plan_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
execution_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  execution_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&component_name_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&component_name_)) + sizeof(status_));
}

PlanStatusWithID::~PlanStatusWithID() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.PlanStatusWithID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanStatusWithID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  plan_id_.Destroy();
  execution_id_.Destroy();
  if (this != internal_default_instance()) delete component_name_;
  if (this != internal_default_instance()) delete status_;
}

void PlanStatusWithID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlanStatusWithID::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.PlanStatusWithID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plan_id_.ClearToEmpty();
  execution_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanStatusWithID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string plan_id = 1 [json_name = "planId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_plan_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.PlanStatusWithID.plan_id"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string execution_id = 3 [json_name = "executionId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_execution_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.PlanStatusWithID.execution_id"));
        } else
          goto handle_unusual;
        continue;
      // .viam.service.motion.v1.PlanStatus status = 4 [json_name = "status"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanStatusWithID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.PlanStatusWithID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string plan_id = 1 [json_name = "planId"];
  if (!this->_internal_plan_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plan_id().data(), static_cast<int>(this->_internal_plan_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.PlanStatusWithID.plan_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_plan_id(), target);
  }

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::component_name(this),
        _Internal::component_name(this).GetCachedSize(), target, stream);
  }

  // string execution_id = 3 [json_name = "executionId"];
  if (!this->_internal_execution_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execution_id().data(), static_cast<int>(this->_internal_execution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.PlanStatusWithID.execution_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_execution_id(), target);
  }

  // .viam.service.motion.v1.PlanStatus status = 4 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.PlanStatusWithID)
  return target;
}

size_t PlanStatusWithID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.PlanStatusWithID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plan_id = 1 [json_name = "planId"];
  if (!this->_internal_plan_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plan_id());
  }

  // string execution_id = 3 [json_name = "executionId"];
  if (!this->_internal_execution_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execution_id());
  }

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_name_);
  }

  // .viam.service.motion.v1.PlanStatus status = 4 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanStatusWithID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanStatusWithID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanStatusWithID::GetClassData() const { return &_class_data_; }

void PlanStatusWithID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanStatusWithID *>(to)->MergeFrom(
      static_cast<const PlanStatusWithID &>(from));
}


void PlanStatusWithID::MergeFrom(const PlanStatusWithID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.PlanStatusWithID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plan_id().empty()) {
    _internal_set_plan_id(from._internal_plan_id());
  }
  if (!from._internal_execution_id().empty()) {
    _internal_set_execution_id(from._internal_execution_id());
  }
  if (from._internal_has_component_name()) {
    _internal_mutable_component_name()->::viam::common::v1::ResourceName::MergeFrom(from._internal_component_name());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::viam::service::motion::v1::PlanStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanStatusWithID::CopyFrom(const PlanStatusWithID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.PlanStatusWithID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanStatusWithID::IsInitialized() const {
  return true;
}

void PlanStatusWithID::InternalSwap(PlanStatusWithID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &plan_id_, lhs_arena,
      &other->plan_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &execution_id_, lhs_arena,
      &other->execution_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanStatusWithID, status_)
      + sizeof(PlanStatusWithID::status_)
      - PROTOBUF_FIELD_OFFSET(PlanStatusWithID, component_name_)>(
          reinterpret_cast<char*>(&component_name_),
          reinterpret_cast<char*>(&other->component_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanStatusWithID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[22]);
}

// ===================================================================

class PlanStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<PlanStatus>()._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const PlanStatus* msg);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
PlanStatus::_Internal::timestamp(const PlanStatus* msg) {
  return *msg->timestamp_;
}
void PlanStatus::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
PlanStatus::PlanStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.PlanStatus)
}
PlanStatus::PlanStatus(const PlanStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    reason_.Set(from._internal_reason(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.PlanStatus)
}

inline void PlanStatus::SharedCtor() {
reason_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reason_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(state_));
}

PlanStatus::~PlanStatus() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.PlanStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlanStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reason_.Destroy();
  if (this != internal_default_instance()) delete timestamp_;
}

void PlanStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlanStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.PlanStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    reason_.ClearNonDefaultToEmpty();
  }
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.service.motion.v1.PlanState state = 1 [json_name = "state"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::viam::service::motion::v1::PlanState>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2 [json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string reason = 3 [json_name = "reason"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.PlanStatus.reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.PlanStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.service.motion.v1.PlanState state = 1 [json_name = "state"];
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // optional string reason = 3 [json_name = "reason"];
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.PlanStatus.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.PlanStatus)
  return target;
}

size_t PlanStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.PlanStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string reason = 3 [json_name = "reason"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .google.protobuf.Timestamp timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .viam.service.motion.v1.PlanState state = 1 [json_name = "state"];
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanStatus::GetClassData() const { return &_class_data_; }

void PlanStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanStatus *>(to)->MergeFrom(
      static_cast<const PlanStatus &>(from));
}


void PlanStatus::MergeFrom(const PlanStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.PlanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanStatus::CopyFrom(const PlanStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.PlanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanStatus::IsInitialized() const {
  return true;
}

void PlanStatus::InternalSwap(PlanStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reason_, lhs_arena,
      &other->reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlanStatus, state_)
      + sizeof(PlanStatus::state_)
      - PROTOBUF_FIELD_OFFSET(PlanStatus, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[23]);
}

// ===================================================================

class Plan::_Internal {
 public:
  static const ::viam::common::v1::ResourceName& component_name(const Plan* msg);
};

const ::viam::common::v1::ResourceName&
Plan::_Internal::component_name(const Plan* msg) {
  return *msg->component_name_;
}
void Plan::clear_component_name() {
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
}
Plan::Plan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steps_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.Plan)
}
Plan::Plan(const Plan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      steps_(from.steps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  execution_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    execution_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_execution_id().empty()) {
    execution_id_.Set(from._internal_execution_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_component_name()) {
    component_name_ = new ::viam::common::v1::ResourceName(*from.component_name_);
  } else {
    component_name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.Plan)
}

inline void Plan::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
execution_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  execution_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
component_name_ = nullptr;
}

Plan::~Plan() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.Plan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Plan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  execution_id_.Destroy();
  if (this != internal_default_instance()) delete component_name_;
}

void Plan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Plan::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.Plan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steps_.Clear();
  id_.ClearToEmpty();
  execution_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && component_name_ != nullptr) {
    delete component_name_;
  }
  component_name_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Plan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.Plan.id"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string execution_id = 3 [json_name = "executionId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_execution_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.Plan.execution_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.service.motion.v1.PlanStep steps = 4 [json_name = "steps"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_steps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Plan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.Plan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.Plan.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::component_name(this),
        _Internal::component_name(this).GetCachedSize(), target, stream);
  }

  // string execution_id = 3 [json_name = "executionId"];
  if (!this->_internal_execution_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_execution_id().data(), static_cast<int>(this->_internal_execution_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.Plan.execution_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_execution_id(), target);
  }

  // repeated .viam.service.motion.v1.PlanStep steps = 4 [json_name = "steps"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_steps_size()); i < n; i++) {
    const auto& repfield = this->_internal_steps(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.Plan)
  return target;
}

size_t Plan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.Plan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.PlanStep steps = 4 [json_name = "steps"];
  total_size += 1UL * this->_internal_steps_size();
  for (const auto& msg : this->steps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string execution_id = 3 [json_name = "executionId"];
  if (!this->_internal_execution_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_execution_id());
  }

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *component_name_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Plan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Plan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Plan::GetClassData() const { return &_class_data_; }

void Plan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Plan *>(to)->MergeFrom(
      static_cast<const Plan &>(from));
}


void Plan::MergeFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.Plan)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steps_.MergeFrom(from.steps_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_execution_id().empty()) {
    _internal_set_execution_id(from._internal_execution_id());
  }
  if (from._internal_has_component_name()) {
    _internal_mutable_component_name()->::viam::common::v1::ResourceName::MergeFrom(from._internal_component_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Plan::CopyFrom(const Plan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.Plan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Plan::IsInitialized() const {
  return true;
}

void Plan::InternalSwap(Plan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  steps_.InternalSwap(&other->steps_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &execution_id_, lhs_arena,
      &other->execution_id_, rhs_arena
  );
  swap(component_name_, other->component_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Plan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[24]);
}

// ===================================================================

PlanStep_StepEntry_DoNotUse::PlanStep_StepEntry_DoNotUse() {}
PlanStep_StepEntry_DoNotUse::PlanStep_StepEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PlanStep_StepEntry_DoNotUse::MergeFrom(const PlanStep_StepEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PlanStep_StepEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[25]);
}

// ===================================================================

class PlanStep::_Internal {
 public:
};

PlanStep::PlanStep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  step_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &PlanStep::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.PlanStep)
}
PlanStep::PlanStep(const PlanStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  step_.MergeFrom(from.step_);
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.PlanStep)
}

inline void PlanStep::SharedCtor() {
}

PlanStep::~PlanStep() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.PlanStep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void PlanStep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  step_.Destruct();
}

void PlanStep::ArenaDtor(void* object) {
  PlanStep* _this = reinterpret_cast< PlanStep* >(object);
  _this->step_.Destruct();
}
void PlanStep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlanStep::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.PlanStep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  step_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlanStep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .viam.service.motion.v1.ComponentState> step = 1 [json_name = "step"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&step_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlanStep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.PlanStep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .viam.service.motion.v1.ComponentState> step = 1 [json_name = "step"];
  if (!this->_internal_step().empty()) {
    using MapType = ::_pb::Map<std::string, ::viam::service::motion::v1::ComponentState>;
    using WireHelper = PlanStep_StepEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_step();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "viam.service.motion.v1.PlanStep.StepEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.PlanStep)
  return target;
}

size_t PlanStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.PlanStep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .viam.service.motion.v1.ComponentState> step = 1 [json_name = "step"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_step_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::service::motion::v1::ComponentState >::const_iterator
      it = this->_internal_step().begin();
      it != this->_internal_step().end(); ++it) {
    total_size += PlanStep_StepEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlanStep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlanStep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlanStep::GetClassData() const { return &_class_data_; }

void PlanStep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlanStep *>(to)->MergeFrom(
      static_cast<const PlanStep &>(from));
}


void PlanStep::MergeFrom(const PlanStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.PlanStep)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  step_.MergeFrom(from.step_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlanStep::CopyFrom(const PlanStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.PlanStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanStep::IsInitialized() const {
  return true;
}

void PlanStep::InternalSwap(PlanStep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  step_.InternalSwap(&other->step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanStep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[26]);
}

// ===================================================================

class ComponentState::_Internal {
 public:
  static const ::viam::common::v1::Pose& pose(const ComponentState* msg);
};

const ::viam::common::v1::Pose&
ComponentState::_Internal::pose(const ComponentState* msg) {
  return *msg->pose_;
}
void ComponentState::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
ComponentState::ComponentState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.ComponentState)
}
ComponentState::ComponentState(const ComponentState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::viam::common::v1::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.ComponentState)
}

inline void ComponentState::SharedCtor() {
pose_ = nullptr;
}

ComponentState::~ComponentState() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.ComponentState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void ComponentState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComponentState::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.ComponentState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.common.v1.Pose pose = 1 [json_name = "pose"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.ComponentState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.common.v1.Pose pose = 1 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.ComponentState)
  return target;
}

size_t ComponentState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.ComponentState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.common.v1.Pose pose = 1 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ComponentState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentState::GetClassData() const { return &_class_data_; }

void ComponentState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ComponentState *>(to)->MergeFrom(
      static_cast<const ComponentState &>(from));
}


void ComponentState::MergeFrom(const ComponentState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.ComponentState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::viam::common::v1::Pose::MergeFrom(from._internal_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentState::CopyFrom(const ComponentState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.ComponentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentState::IsInitialized() const {
  return true;
}

void ComponentState::InternalSwap(ComponentState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace motion
}  // namespace service
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::MoveRequest*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::MoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::MoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::MoveResponse*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::MoveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::MoveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::MoveOnMapRequest*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::MoveOnMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::MoveOnMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::MoveOnMapResponse*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::MoveOnMapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::MoveOnMapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::ObstacleDetector*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::ObstacleDetector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::ObstacleDetector >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::MotionConfiguration*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::MotionConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::MotionConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::MoveOnGlobeRequest*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::MoveOnGlobeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::MoveOnGlobeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::MoveOnGlobeResponse*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::MoveOnGlobeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::MoveOnGlobeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::GetPoseRequest*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::GetPoseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::GetPoseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::GetPoseResponse*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::GetPoseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::GetPoseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::StopPlanRequest*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::StopPlanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::StopPlanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::StopPlanResponse*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::StopPlanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::StopPlanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::ListPlanStatusesRequest*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::ListPlanStatusesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::ListPlanStatusesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::ListPlanStatusesResponse*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::ListPlanStatusesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::ListPlanStatusesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::GetPlanRequest*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::GetPlanRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::GetPlanRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::GetPlanResponse*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::GetPlanResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::GetPlanResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::Constraints*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::Constraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::Constraints >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::LinearConstraint*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::LinearConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::LinearConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::OrientationConstraint*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::OrientationConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::OrientationConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::CollisionSpecification*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::CollisionSpecification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::CollisionSpecification >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::PlanWithStatus*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::PlanWithStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::PlanWithStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::PlanStatusWithID*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::PlanStatusWithID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::PlanStatusWithID >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::PlanStatus*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::PlanStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::PlanStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::Plan*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::Plan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::Plan >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::PlanStep_StepEntry_DoNotUse*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::PlanStep_StepEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::PlanStep_StepEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::PlanStep*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::PlanStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::PlanStep >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::ComponentState*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::ComponentState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::ComponentState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
