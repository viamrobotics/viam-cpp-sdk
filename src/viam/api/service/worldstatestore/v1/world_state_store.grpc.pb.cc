// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service/worldstatestore/v1/world_state_store.proto

#include "service/worldstatestore/v1/world_state_store.pb.h"
#include "service/worldstatestore/v1/world_state_store.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace viam {
namespace service {
namespace worldstatestore {
namespace v1 {

static const char* WorldStateStoreService_method_names[] = {
  "/viam.service.worldstatestore.v1.WorldStateStoreService/ListUUIDs",
  "/viam.service.worldstatestore.v1.WorldStateStoreService/GetTransform",
  "/viam.service.worldstatestore.v1.WorldStateStoreService/StreamTransformChanges",
  "/viam.service.worldstatestore.v1.WorldStateStoreService/DoCommand",
};

std::unique_ptr< WorldStateStoreService::Stub> WorldStateStoreService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WorldStateStoreService::Stub> stub(new WorldStateStoreService::Stub(channel, options));
  return stub;
}

WorldStateStoreService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListUUIDs_(WorldStateStoreService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransform_(WorldStateStoreService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamTransformChanges_(WorldStateStoreService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DoCommand_(WorldStateStoreService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WorldStateStoreService::Stub::ListUUIDs(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::ListUUIDsRequest& request, ::viam::service::worldstatestore::v1::ListUUIDsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::service::worldstatestore::v1::ListUUIDsRequest, ::viam::service::worldstatestore::v1::ListUUIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListUUIDs_, context, request, response);
}

void WorldStateStoreService::Stub::async::ListUUIDs(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::ListUUIDsRequest* request, ::viam::service::worldstatestore::v1::ListUUIDsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::service::worldstatestore::v1::ListUUIDsRequest, ::viam::service::worldstatestore::v1::ListUUIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListUUIDs_, context, request, response, std::move(f));
}

void WorldStateStoreService::Stub::async::ListUUIDs(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::ListUUIDsRequest* request, ::viam::service::worldstatestore::v1::ListUUIDsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListUUIDs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::worldstatestore::v1::ListUUIDsResponse>* WorldStateStoreService::Stub::PrepareAsyncListUUIDsRaw(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::ListUUIDsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::service::worldstatestore::v1::ListUUIDsResponse, ::viam::service::worldstatestore::v1::ListUUIDsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListUUIDs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::service::worldstatestore::v1::ListUUIDsResponse>* WorldStateStoreService::Stub::AsyncListUUIDsRaw(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::ListUUIDsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListUUIDsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status WorldStateStoreService::Stub::GetTransform(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::GetTransformRequest& request, ::viam::service::worldstatestore::v1::GetTransformResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::service::worldstatestore::v1::GetTransformRequest, ::viam::service::worldstatestore::v1::GetTransformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransform_, context, request, response);
}

void WorldStateStoreService::Stub::async::GetTransform(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::GetTransformRequest* request, ::viam::service::worldstatestore::v1::GetTransformResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::service::worldstatestore::v1::GetTransformRequest, ::viam::service::worldstatestore::v1::GetTransformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransform_, context, request, response, std::move(f));
}

void WorldStateStoreService::Stub::async::GetTransform(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::GetTransformRequest* request, ::viam::service::worldstatestore::v1::GetTransformResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::worldstatestore::v1::GetTransformResponse>* WorldStateStoreService::Stub::PrepareAsyncGetTransformRaw(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::GetTransformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::service::worldstatestore::v1::GetTransformResponse, ::viam::service::worldstatestore::v1::GetTransformRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransform_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::service::worldstatestore::v1::GetTransformResponse>* WorldStateStoreService::Stub::AsyncGetTransformRaw(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::GetTransformRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransformRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::viam::service::worldstatestore::v1::StreamTransformChangesResponse>* WorldStateStoreService::Stub::StreamTransformChangesRaw(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::StreamTransformChangesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::viam::service::worldstatestore::v1::StreamTransformChangesResponse>::Create(channel_.get(), rpcmethod_StreamTransformChanges_, context, request);
}

void WorldStateStoreService::Stub::async::StreamTransformChanges(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::StreamTransformChangesRequest* request, ::grpc::ClientReadReactor< ::viam::service::worldstatestore::v1::StreamTransformChangesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::viam::service::worldstatestore::v1::StreamTransformChangesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamTransformChanges_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::viam::service::worldstatestore::v1::StreamTransformChangesResponse>* WorldStateStoreService::Stub::AsyncStreamTransformChangesRaw(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::StreamTransformChangesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::viam::service::worldstatestore::v1::StreamTransformChangesResponse>::Create(channel_.get(), cq, rpcmethod_StreamTransformChanges_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::viam::service::worldstatestore::v1::StreamTransformChangesResponse>* WorldStateStoreService::Stub::PrepareAsyncStreamTransformChangesRaw(::grpc::ClientContext* context, const ::viam::service::worldstatestore::v1::StreamTransformChangesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::viam::service::worldstatestore::v1::StreamTransformChangesResponse>::Create(channel_.get(), cq, rpcmethod_StreamTransformChanges_, context, request, false, nullptr);
}

::grpc::Status WorldStateStoreService::Stub::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoCommand_, context, request, response);
}

void WorldStateStoreService::Stub::async::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, std::move(f));
}

void WorldStateStoreService::Stub::async::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* WorldStateStoreService::Stub::PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::common::v1::DoCommandResponse, ::viam::common::v1::DoCommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* WorldStateStoreService::Stub::AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

WorldStateStoreService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorldStateStoreService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorldStateStoreService::Service, ::viam::service::worldstatestore::v1::ListUUIDsRequest, ::viam::service::worldstatestore::v1::ListUUIDsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorldStateStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::worldstatestore::v1::ListUUIDsRequest* req,
             ::viam::service::worldstatestore::v1::ListUUIDsResponse* resp) {
               return service->ListUUIDs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorldStateStoreService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorldStateStoreService::Service, ::viam::service::worldstatestore::v1::GetTransformRequest, ::viam::service::worldstatestore::v1::GetTransformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorldStateStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::worldstatestore::v1::GetTransformRequest* req,
             ::viam::service::worldstatestore::v1::GetTransformResponse* resp) {
               return service->GetTransform(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorldStateStoreService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< WorldStateStoreService::Service, ::viam::service::worldstatestore::v1::StreamTransformChangesRequest, ::viam::service::worldstatestore::v1::StreamTransformChangesResponse>(
          [](WorldStateStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::worldstatestore::v1::StreamTransformChangesRequest* req,
             ::grpc::ServerWriter<::viam::service::worldstatestore::v1::StreamTransformChangesResponse>* writer) {
               return service->StreamTransformChanges(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WorldStateStoreService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WorldStateStoreService::Service, ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](WorldStateStoreService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::common::v1::DoCommandRequest* req,
             ::viam::common::v1::DoCommandResponse* resp) {
               return service->DoCommand(ctx, req, resp);
             }, this)));
}

WorldStateStoreService::Service::~Service() {
}

::grpc::Status WorldStateStoreService::Service::ListUUIDs(::grpc::ServerContext* context, const ::viam::service::worldstatestore::v1::ListUUIDsRequest* request, ::viam::service::worldstatestore::v1::ListUUIDsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorldStateStoreService::Service::GetTransform(::grpc::ServerContext* context, const ::viam::service::worldstatestore::v1::GetTransformRequest* request, ::viam::service::worldstatestore::v1::GetTransformResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorldStateStoreService::Service::StreamTransformChanges(::grpc::ServerContext* context, const ::viam::service::worldstatestore::v1::StreamTransformChangesRequest* request, ::grpc::ServerWriter< ::viam::service::worldstatestore::v1::StreamTransformChangesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WorldStateStoreService::Service::DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viam
}  // namespace service
}  // namespace worldstatestore
}  // namespace v1

