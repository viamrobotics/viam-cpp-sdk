// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/worldstatestore/v1/world_state_store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2fworldstatestore_2fv1_2fworld_5fstate_5fstore_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2fworldstatestore_2fv1_2fworld_5fstate_5fstore_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2fworldstatestore_2fv1_2fworld_5fstate_5fstore_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2fworldstatestore_2fv1_2fworld_5fstate_5fstore_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2fworldstatestore_2fv1_2fworld_5fstate_5fstore_2eproto;
namespace viam {
namespace service {
namespace worldstatestore {
namespace v1 {
class GetTransformRequest;
struct GetTransformRequestDefaultTypeInternal;
extern GetTransformRequestDefaultTypeInternal _GetTransformRequest_default_instance_;
class GetTransformResponse;
struct GetTransformResponseDefaultTypeInternal;
extern GetTransformResponseDefaultTypeInternal _GetTransformResponse_default_instance_;
class ListUUIDsRequest;
struct ListUUIDsRequestDefaultTypeInternal;
extern ListUUIDsRequestDefaultTypeInternal _ListUUIDsRequest_default_instance_;
class ListUUIDsResponse;
struct ListUUIDsResponseDefaultTypeInternal;
extern ListUUIDsResponseDefaultTypeInternal _ListUUIDsResponse_default_instance_;
class StreamTransformChangesRequest;
struct StreamTransformChangesRequestDefaultTypeInternal;
extern StreamTransformChangesRequestDefaultTypeInternal _StreamTransformChangesRequest_default_instance_;
class StreamTransformChangesResponse;
struct StreamTransformChangesResponseDefaultTypeInternal;
extern StreamTransformChangesResponseDefaultTypeInternal _StreamTransformChangesResponse_default_instance_;
}  // namespace v1
}  // namespace worldstatestore
}  // namespace service
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::service::worldstatestore::v1::GetTransformRequest* Arena::CreateMaybeMessage<::viam::service::worldstatestore::v1::GetTransformRequest>(Arena*);
template<> ::viam::service::worldstatestore::v1::GetTransformResponse* Arena::CreateMaybeMessage<::viam::service::worldstatestore::v1::GetTransformResponse>(Arena*);
template<> ::viam::service::worldstatestore::v1::ListUUIDsRequest* Arena::CreateMaybeMessage<::viam::service::worldstatestore::v1::ListUUIDsRequest>(Arena*);
template<> ::viam::service::worldstatestore::v1::ListUUIDsResponse* Arena::CreateMaybeMessage<::viam::service::worldstatestore::v1::ListUUIDsResponse>(Arena*);
template<> ::viam::service::worldstatestore::v1::StreamTransformChangesRequest* Arena::CreateMaybeMessage<::viam::service::worldstatestore::v1::StreamTransformChangesRequest>(Arena*);
template<> ::viam::service::worldstatestore::v1::StreamTransformChangesResponse* Arena::CreateMaybeMessage<::viam::service::worldstatestore::v1::StreamTransformChangesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace service {
namespace worldstatestore {
namespace v1 {

enum TransformChangeType : int {
  TRANSFORM_CHANGE_TYPE_UNSPECIFIED = 0,
  TRANSFORM_CHANGE_TYPE_ADDED = 1,
  TRANSFORM_CHANGE_TYPE_REMOVED = 2,
  TRANSFORM_CHANGE_TYPE_UPDATED = 3,
  TransformChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TransformChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TransformChangeType_IsValid(int value);
constexpr TransformChangeType TransformChangeType_MIN = TRANSFORM_CHANGE_TYPE_UNSPECIFIED;
constexpr TransformChangeType TransformChangeType_MAX = TRANSFORM_CHANGE_TYPE_UPDATED;
constexpr int TransformChangeType_ARRAYSIZE = TransformChangeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransformChangeType_descriptor();
template<typename T>
inline const std::string& TransformChangeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransformChangeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransformChangeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransformChangeType_descriptor(), enum_t_value);
}
inline bool TransformChangeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TransformChangeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransformChangeType>(
    TransformChangeType_descriptor(), name, value);
}
// ===================================================================

class ListUUIDsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.worldstatestore.v1.ListUUIDsRequest) */ {
 public:
  inline ListUUIDsRequest() : ListUUIDsRequest(nullptr) {}
  ~ListUUIDsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListUUIDsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUUIDsRequest(const ListUUIDsRequest& from);
  ListUUIDsRequest(ListUUIDsRequest&& from) noexcept
    : ListUUIDsRequest() {
    *this = ::std::move(from);
  }

  inline ListUUIDsRequest& operator=(const ListUUIDsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUUIDsRequest& operator=(ListUUIDsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUUIDsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUUIDsRequest* internal_default_instance() {
    return reinterpret_cast<const ListUUIDsRequest*>(
               &_ListUUIDsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListUUIDsRequest& a, ListUUIDsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUUIDsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUUIDsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListUUIDsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListUUIDsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUUIDsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUUIDsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUUIDsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.worldstatestore.v1.ListUUIDsRequest";
  }
  protected:
  explicit ListUUIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.service.worldstatestore.v1.ListUUIDsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fworldstatestore_2fv1_2fworld_5fstate_5fstore_2eproto;
};
// -------------------------------------------------------------------

class ListUUIDsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.worldstatestore.v1.ListUUIDsResponse) */ {
 public:
  inline ListUUIDsResponse() : ListUUIDsResponse(nullptr) {}
  ~ListUUIDsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListUUIDsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUUIDsResponse(const ListUUIDsResponse& from);
  ListUUIDsResponse(ListUUIDsResponse&& from) noexcept
    : ListUUIDsResponse() {
    *this = ::std::move(from);
  }

  inline ListUUIDsResponse& operator=(const ListUUIDsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUUIDsResponse& operator=(ListUUIDsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUUIDsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUUIDsResponse* internal_default_instance() {
    return reinterpret_cast<const ListUUIDsResponse*>(
               &_ListUUIDsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListUUIDsResponse& a, ListUUIDsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUUIDsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUUIDsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListUUIDsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListUUIDsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUUIDsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUUIDsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUUIDsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.worldstatestore.v1.ListUUIDsResponse";
  }
  protected:
  explicit ListUUIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidsFieldNumber = 1,
  };
  // repeated bytes uuids = 1 [json_name = "uuids"];
  int uuids_size() const;
  private:
  int _internal_uuids_size() const;
  public:
  void clear_uuids();
  const std::string& uuids(int index) const;
  std::string* mutable_uuids(int index);
  void set_uuids(int index, const std::string& value);
  void set_uuids(int index, std::string&& value);
  void set_uuids(int index, const char* value);
  void set_uuids(int index, const void* value, size_t size);
  std::string* add_uuids();
  void add_uuids(const std::string& value);
  void add_uuids(std::string&& value);
  void add_uuids(const char* value);
  void add_uuids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_uuids();
  private:
  const std::string& _internal_uuids(int index) const;
  std::string* _internal_add_uuids();
  public:

  // @@protoc_insertion_point(class_scope:viam.service.worldstatestore.v1.ListUUIDsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> uuids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fworldstatestore_2fv1_2fworld_5fstate_5fstore_2eproto;
};
// -------------------------------------------------------------------

class GetTransformRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.worldstatestore.v1.GetTransformRequest) */ {
 public:
  inline GetTransformRequest() : GetTransformRequest(nullptr) {}
  ~GetTransformRequest() override;
  explicit PROTOBUF_CONSTEXPR GetTransformRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTransformRequest(const GetTransformRequest& from);
  GetTransformRequest(GetTransformRequest&& from) noexcept
    : GetTransformRequest() {
    *this = ::std::move(from);
  }

  inline GetTransformRequest& operator=(const GetTransformRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransformRequest& operator=(GetTransformRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTransformRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTransformRequest* internal_default_instance() {
    return reinterpret_cast<const GetTransformRequest*>(
               &_GetTransformRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetTransformRequest& a, GetTransformRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransformRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTransformRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTransformRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTransformRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTransformRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTransformRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransformRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.worldstatestore.v1.GetTransformRequest";
  }
  protected:
  explicit GetTransformRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kUuidFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes uuid = 2 [json_name = "uuid"];
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.service.worldstatestore.v1.GetTransformRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fworldstatestore_2fv1_2fworld_5fstate_5fstore_2eproto;
};
// -------------------------------------------------------------------

class GetTransformResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.worldstatestore.v1.GetTransformResponse) */ {
 public:
  inline GetTransformResponse() : GetTransformResponse(nullptr) {}
  ~GetTransformResponse() override;
  explicit PROTOBUF_CONSTEXPR GetTransformResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTransformResponse(const GetTransformResponse& from);
  GetTransformResponse(GetTransformResponse&& from) noexcept
    : GetTransformResponse() {
    *this = ::std::move(from);
  }

  inline GetTransformResponse& operator=(const GetTransformResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransformResponse& operator=(GetTransformResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTransformResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTransformResponse* internal_default_instance() {
    return reinterpret_cast<const GetTransformResponse*>(
               &_GetTransformResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetTransformResponse& a, GetTransformResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransformResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTransformResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTransformResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTransformResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTransformResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTransformResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransformResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.worldstatestore.v1.GetTransformResponse";
  }
  protected:
  explicit GetTransformResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 2,
  };
  // .viam.common.v1.Transform transform = 2 [json_name = "transform"];
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::viam::common::v1::Transform& transform() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Transform* release_transform();
  ::viam::common::v1::Transform* mutable_transform();
  void set_allocated_transform(::viam::common::v1::Transform* transform);
  private:
  const ::viam::common::v1::Transform& _internal_transform() const;
  ::viam::common::v1::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::viam::common::v1::Transform* transform);
  ::viam::common::v1::Transform* unsafe_arena_release_transform();

  // @@protoc_insertion_point(class_scope:viam.service.worldstatestore.v1.GetTransformResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::Transform* transform_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fworldstatestore_2fv1_2fworld_5fstate_5fstore_2eproto;
};
// -------------------------------------------------------------------

class StreamTransformChangesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.worldstatestore.v1.StreamTransformChangesRequest) */ {
 public:
  inline StreamTransformChangesRequest() : StreamTransformChangesRequest(nullptr) {}
  ~StreamTransformChangesRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamTransformChangesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamTransformChangesRequest(const StreamTransformChangesRequest& from);
  StreamTransformChangesRequest(StreamTransformChangesRequest&& from) noexcept
    : StreamTransformChangesRequest() {
    *this = ::std::move(from);
  }

  inline StreamTransformChangesRequest& operator=(const StreamTransformChangesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamTransformChangesRequest& operator=(StreamTransformChangesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamTransformChangesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamTransformChangesRequest* internal_default_instance() {
    return reinterpret_cast<const StreamTransformChangesRequest*>(
               &_StreamTransformChangesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StreamTransformChangesRequest& a, StreamTransformChangesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamTransformChangesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamTransformChangesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamTransformChangesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamTransformChangesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamTransformChangesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamTransformChangesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamTransformChangesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.worldstatestore.v1.StreamTransformChangesRequest";
  }
  protected:
  explicit StreamTransformChangesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.service.worldstatestore.v1.StreamTransformChangesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fworldstatestore_2fv1_2fworld_5fstate_5fstore_2eproto;
};
// -------------------------------------------------------------------

class StreamTransformChangesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.worldstatestore.v1.StreamTransformChangesResponse) */ {
 public:
  inline StreamTransformChangesResponse() : StreamTransformChangesResponse(nullptr) {}
  ~StreamTransformChangesResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamTransformChangesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamTransformChangesResponse(const StreamTransformChangesResponse& from);
  StreamTransformChangesResponse(StreamTransformChangesResponse&& from) noexcept
    : StreamTransformChangesResponse() {
    *this = ::std::move(from);
  }

  inline StreamTransformChangesResponse& operator=(const StreamTransformChangesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamTransformChangesResponse& operator=(StreamTransformChangesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamTransformChangesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamTransformChangesResponse* internal_default_instance() {
    return reinterpret_cast<const StreamTransformChangesResponse*>(
               &_StreamTransformChangesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StreamTransformChangesResponse& a, StreamTransformChangesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamTransformChangesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamTransformChangesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamTransformChangesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamTransformChangesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamTransformChangesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamTransformChangesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamTransformChangesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.worldstatestore.v1.StreamTransformChangesResponse";
  }
  protected:
  explicit StreamTransformChangesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 2,
    kUpdatedFieldsFieldNumber = 3,
    kChangeTypeFieldNumber = 1,
  };
  // .viam.common.v1.Transform transform = 2 [json_name = "transform"];
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::viam::common::v1::Transform& transform() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Transform* release_transform();
  ::viam::common::v1::Transform* mutable_transform();
  void set_allocated_transform(::viam::common::v1::Transform* transform);
  private:
  const ::viam::common::v1::Transform& _internal_transform() const;
  ::viam::common::v1::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::viam::common::v1::Transform* transform);
  ::viam::common::v1::Transform* unsafe_arena_release_transform();

  // .google.protobuf.FieldMask updated_fields = 3 [json_name = "updatedFields"];
  bool has_updated_fields() const;
  private:
  bool _internal_has_updated_fields() const;
  public:
  void clear_updated_fields();
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& updated_fields() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::FieldMask* release_updated_fields();
  ::PROTOBUF_NAMESPACE_ID::FieldMask* mutable_updated_fields();
  void set_allocated_updated_fields(::PROTOBUF_NAMESPACE_ID::FieldMask* updated_fields);
  private:
  const ::PROTOBUF_NAMESPACE_ID::FieldMask& _internal_updated_fields() const;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_updated_fields();
  public:
  void unsafe_arena_set_allocated_updated_fields(
      ::PROTOBUF_NAMESPACE_ID::FieldMask* updated_fields);
  ::PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_updated_fields();

  // .viam.service.worldstatestore.v1.TransformChangeType change_type = 1 [json_name = "changeType"];
  void clear_change_type();
  ::viam::service::worldstatestore::v1::TransformChangeType change_type() const;
  void set_change_type(::viam::service::worldstatestore::v1::TransformChangeType value);
  private:
  ::viam::service::worldstatestore::v1::TransformChangeType _internal_change_type() const;
  void _internal_set_change_type(::viam::service::worldstatestore::v1::TransformChangeType value);
  public:

  // @@protoc_insertion_point(class_scope:viam.service.worldstatestore.v1.StreamTransformChangesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::Transform* transform_;
  ::PROTOBUF_NAMESPACE_ID::FieldMask* updated_fields_;
  int change_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fworldstatestore_2fv1_2fworld_5fstate_5fstore_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListUUIDsRequest

// string name = 1 [json_name = "name"];
inline void ListUUIDsRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListUUIDsRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.worldstatestore.v1.ListUUIDsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListUUIDsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.worldstatestore.v1.ListUUIDsRequest.name)
}
inline std::string* ListUUIDsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.worldstatestore.v1.ListUUIDsRequest.name)
  return _s;
}
inline const std::string& ListUUIDsRequest::_internal_name() const {
  return name_.Get();
}
inline void ListUUIDsRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListUUIDsRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListUUIDsRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.worldstatestore.v1.ListUUIDsRequest.name)
  return name_.Release();
}
inline void ListUUIDsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.worldstatestore.v1.ListUUIDsRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool ListUUIDsRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool ListUUIDsRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& ListUUIDsRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& ListUUIDsRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.worldstatestore.v1.ListUUIDsRequest.extra)
  return _internal_extra();
}
inline void ListUUIDsRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.worldstatestore.v1.ListUUIDsRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ListUUIDsRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ListUUIDsRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.worldstatestore.v1.ListUUIDsRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ListUUIDsRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* ListUUIDsRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.worldstatestore.v1.ListUUIDsRequest.extra)
  return _msg;
}
inline void ListUUIDsRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.worldstatestore.v1.ListUUIDsRequest.extra)
}

// -------------------------------------------------------------------

// ListUUIDsResponse

// repeated bytes uuids = 1 [json_name = "uuids"];
inline int ListUUIDsResponse::_internal_uuids_size() const {
  return uuids_.size();
}
inline int ListUUIDsResponse::uuids_size() const {
  return _internal_uuids_size();
}
inline void ListUUIDsResponse::clear_uuids() {
  uuids_.Clear();
}
inline std::string* ListUUIDsResponse::add_uuids() {
  std::string* _s = _internal_add_uuids();
  // @@protoc_insertion_point(field_add_mutable:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
  return _s;
}
inline const std::string& ListUUIDsResponse::_internal_uuids(int index) const {
  return uuids_.Get(index);
}
inline const std::string& ListUUIDsResponse::uuids(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
  return _internal_uuids(index);
}
inline std::string* ListUUIDsResponse::mutable_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
  return uuids_.Mutable(index);
}
inline void ListUUIDsResponse::set_uuids(int index, const std::string& value) {
  uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
}
inline void ListUUIDsResponse::set_uuids(int index, std::string&& value) {
  uuids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
}
inline void ListUUIDsResponse::set_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
}
inline void ListUUIDsResponse::set_uuids(int index, const void* value, size_t size) {
  uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
}
inline std::string* ListUUIDsResponse::_internal_add_uuids() {
  return uuids_.Add();
}
inline void ListUUIDsResponse::add_uuids(const std::string& value) {
  uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
}
inline void ListUUIDsResponse::add_uuids(std::string&& value) {
  uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
}
inline void ListUUIDsResponse::add_uuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
}
inline void ListUUIDsResponse::add_uuids(const void* value, size_t size) {
  uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListUUIDsResponse::uuids() const {
  // @@protoc_insertion_point(field_list:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
  return uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListUUIDsResponse::mutable_uuids() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.worldstatestore.v1.ListUUIDsResponse.uuids)
  return &uuids_;
}

// -------------------------------------------------------------------

// GetTransformRequest

// string name = 1 [json_name = "name"];
inline void GetTransformRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetTransformRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.worldstatestore.v1.GetTransformRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTransformRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.worldstatestore.v1.GetTransformRequest.name)
}
inline std::string* GetTransformRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.worldstatestore.v1.GetTransformRequest.name)
  return _s;
}
inline const std::string& GetTransformRequest::_internal_name() const {
  return name_.Get();
}
inline void GetTransformRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTransformRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTransformRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.worldstatestore.v1.GetTransformRequest.name)
  return name_.Release();
}
inline void GetTransformRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.worldstatestore.v1.GetTransformRequest.name)
}

// bytes uuid = 2 [json_name = "uuid"];
inline void GetTransformRequest::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& GetTransformRequest::uuid() const {
  // @@protoc_insertion_point(field_get:viam.service.worldstatestore.v1.GetTransformRequest.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTransformRequest::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.worldstatestore.v1.GetTransformRequest.uuid)
}
inline std::string* GetTransformRequest::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:viam.service.worldstatestore.v1.GetTransformRequest.uuid)
  return _s;
}
inline const std::string& GetTransformRequest::_internal_uuid() const {
  return uuid_.Get();
}
inline void GetTransformRequest::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTransformRequest::_internal_mutable_uuid() {
  
  return uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTransformRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:viam.service.worldstatestore.v1.GetTransformRequest.uuid)
  return uuid_.Release();
}
inline void GetTransformRequest::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault()) {
    uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.worldstatestore.v1.GetTransformRequest.uuid)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetTransformRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetTransformRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetTransformRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetTransformRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.worldstatestore.v1.GetTransformRequest.extra)
  return _internal_extra();
}
inline void GetTransformRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.worldstatestore.v1.GetTransformRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetTransformRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetTransformRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.worldstatestore.v1.GetTransformRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetTransformRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetTransformRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.worldstatestore.v1.GetTransformRequest.extra)
  return _msg;
}
inline void GetTransformRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.worldstatestore.v1.GetTransformRequest.extra)
}

// -------------------------------------------------------------------

// GetTransformResponse

// .viam.common.v1.Transform transform = 2 [json_name = "transform"];
inline bool GetTransformResponse::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool GetTransformResponse::has_transform() const {
  return _internal_has_transform();
}
inline const ::viam::common::v1::Transform& GetTransformResponse::_internal_transform() const {
  const ::viam::common::v1::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Transform&>(
      ::viam::common::v1::_Transform_default_instance_);
}
inline const ::viam::common::v1::Transform& GetTransformResponse::transform() const {
  // @@protoc_insertion_point(field_get:viam.service.worldstatestore.v1.GetTransformResponse.transform)
  return _internal_transform();
}
inline void GetTransformResponse::unsafe_arena_set_allocated_transform(
    ::viam::common::v1::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.worldstatestore.v1.GetTransformResponse.transform)
}
inline ::viam::common::v1::Transform* GetTransformResponse::release_transform() {
  
  ::viam::common::v1::Transform* temp = transform_;
  transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Transform* GetTransformResponse::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:viam.service.worldstatestore.v1.GetTransformResponse.transform)
  
  ::viam::common::v1::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Transform* GetTransformResponse::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Transform>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::viam::common::v1::Transform* GetTransformResponse::mutable_transform() {
  ::viam::common::v1::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:viam.service.worldstatestore.v1.GetTransformResponse.transform)
  return _msg;
}
inline void GetTransformResponse::set_allocated_transform(::viam::common::v1::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:viam.service.worldstatestore.v1.GetTransformResponse.transform)
}

// -------------------------------------------------------------------

// StreamTransformChangesRequest

// string name = 1 [json_name = "name"];
inline void StreamTransformChangesRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& StreamTransformChangesRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.worldstatestore.v1.StreamTransformChangesRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamTransformChangesRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.worldstatestore.v1.StreamTransformChangesRequest.name)
}
inline std::string* StreamTransformChangesRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.worldstatestore.v1.StreamTransformChangesRequest.name)
  return _s;
}
inline const std::string& StreamTransformChangesRequest::_internal_name() const {
  return name_.Get();
}
inline void StreamTransformChangesRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamTransformChangesRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamTransformChangesRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.worldstatestore.v1.StreamTransformChangesRequest.name)
  return name_.Release();
}
inline void StreamTransformChangesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.worldstatestore.v1.StreamTransformChangesRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool StreamTransformChangesRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool StreamTransformChangesRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StreamTransformChangesRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StreamTransformChangesRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.worldstatestore.v1.StreamTransformChangesRequest.extra)
  return _internal_extra();
}
inline void StreamTransformChangesRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.worldstatestore.v1.StreamTransformChangesRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StreamTransformChangesRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StreamTransformChangesRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.worldstatestore.v1.StreamTransformChangesRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StreamTransformChangesRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StreamTransformChangesRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.worldstatestore.v1.StreamTransformChangesRequest.extra)
  return _msg;
}
inline void StreamTransformChangesRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.worldstatestore.v1.StreamTransformChangesRequest.extra)
}

// -------------------------------------------------------------------

// StreamTransformChangesResponse

// .viam.service.worldstatestore.v1.TransformChangeType change_type = 1 [json_name = "changeType"];
inline void StreamTransformChangesResponse::clear_change_type() {
  change_type_ = 0;
}
inline ::viam::service::worldstatestore::v1::TransformChangeType StreamTransformChangesResponse::_internal_change_type() const {
  return static_cast< ::viam::service::worldstatestore::v1::TransformChangeType >(change_type_);
}
inline ::viam::service::worldstatestore::v1::TransformChangeType StreamTransformChangesResponse::change_type() const {
  // @@protoc_insertion_point(field_get:viam.service.worldstatestore.v1.StreamTransformChangesResponse.change_type)
  return _internal_change_type();
}
inline void StreamTransformChangesResponse::_internal_set_change_type(::viam::service::worldstatestore::v1::TransformChangeType value) {
  
  change_type_ = value;
}
inline void StreamTransformChangesResponse::set_change_type(::viam::service::worldstatestore::v1::TransformChangeType value) {
  _internal_set_change_type(value);
  // @@protoc_insertion_point(field_set:viam.service.worldstatestore.v1.StreamTransformChangesResponse.change_type)
}

// .viam.common.v1.Transform transform = 2 [json_name = "transform"];
inline bool StreamTransformChangesResponse::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool StreamTransformChangesResponse::has_transform() const {
  return _internal_has_transform();
}
inline const ::viam::common::v1::Transform& StreamTransformChangesResponse::_internal_transform() const {
  const ::viam::common::v1::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Transform&>(
      ::viam::common::v1::_Transform_default_instance_);
}
inline const ::viam::common::v1::Transform& StreamTransformChangesResponse::transform() const {
  // @@protoc_insertion_point(field_get:viam.service.worldstatestore.v1.StreamTransformChangesResponse.transform)
  return _internal_transform();
}
inline void StreamTransformChangesResponse::unsafe_arena_set_allocated_transform(
    ::viam::common::v1::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.worldstatestore.v1.StreamTransformChangesResponse.transform)
}
inline ::viam::common::v1::Transform* StreamTransformChangesResponse::release_transform() {
  
  ::viam::common::v1::Transform* temp = transform_;
  transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Transform* StreamTransformChangesResponse::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:viam.service.worldstatestore.v1.StreamTransformChangesResponse.transform)
  
  ::viam::common::v1::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Transform* StreamTransformChangesResponse::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Transform>(GetArenaForAllocation());
    transform_ = p;
  }
  return transform_;
}
inline ::viam::common::v1::Transform* StreamTransformChangesResponse::mutable_transform() {
  ::viam::common::v1::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:viam.service.worldstatestore.v1.StreamTransformChangesResponse.transform)
  return _msg;
}
inline void StreamTransformChangesResponse::set_allocated_transform(::viam::common::v1::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform));
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:viam.service.worldstatestore.v1.StreamTransformChangesResponse.transform)
}

// .google.protobuf.FieldMask updated_fields = 3 [json_name = "updatedFields"];
inline bool StreamTransformChangesResponse::_internal_has_updated_fields() const {
  return this != internal_default_instance() && updated_fields_ != nullptr;
}
inline bool StreamTransformChangesResponse::has_updated_fields() const {
  return _internal_has_updated_fields();
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& StreamTransformChangesResponse::_internal_updated_fields() const {
  const ::PROTOBUF_NAMESPACE_ID::FieldMask* p = updated_fields_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::FieldMask&>(
      ::PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::FieldMask& StreamTransformChangesResponse::updated_fields() const {
  // @@protoc_insertion_point(field_get:viam.service.worldstatestore.v1.StreamTransformChangesResponse.updated_fields)
  return _internal_updated_fields();
}
inline void StreamTransformChangesResponse::unsafe_arena_set_allocated_updated_fields(
    ::PROTOBUF_NAMESPACE_ID::FieldMask* updated_fields) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_fields_);
  }
  updated_fields_ = updated_fields;
  if (updated_fields) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.worldstatestore.v1.StreamTransformChangesResponse.updated_fields)
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* StreamTransformChangesResponse::release_updated_fields() {
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = updated_fields_;
  updated_fields_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* StreamTransformChangesResponse::unsafe_arena_release_updated_fields() {
  // @@protoc_insertion_point(field_release:viam.service.worldstatestore.v1.StreamTransformChangesResponse.updated_fields)
  
  ::PROTOBUF_NAMESPACE_ID::FieldMask* temp = updated_fields_;
  updated_fields_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* StreamTransformChangesResponse::_internal_mutable_updated_fields() {
  
  if (updated_fields_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaForAllocation());
    updated_fields_ = p;
  }
  return updated_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::FieldMask* StreamTransformChangesResponse::mutable_updated_fields() {
  ::PROTOBUF_NAMESPACE_ID::FieldMask* _msg = _internal_mutable_updated_fields();
  // @@protoc_insertion_point(field_mutable:viam.service.worldstatestore.v1.StreamTransformChangesResponse.updated_fields)
  return _msg;
}
inline void StreamTransformChangesResponse::set_allocated_updated_fields(::PROTOBUF_NAMESPACE_ID::FieldMask* updated_fields) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_fields_);
  }
  if (updated_fields) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_fields));
    if (message_arena != submessage_arena) {
      updated_fields = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_fields, submessage_arena);
    }
    
  } else {
    
  }
  updated_fields_ = updated_fields;
  // @@protoc_insertion_point(field_set_allocated:viam.service.worldstatestore.v1.StreamTransformChangesResponse.updated_fields)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace worldstatestore
}  // namespace service
}  // namespace viam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::viam::service::worldstatestore::v1::TransformChangeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::service::worldstatestore::v1::TransformChangeType>() {
  return ::viam::service::worldstatestore::v1::TransformChangeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2fworldstatestore_2fv1_2fworld_5fstate_5fstore_2eproto
