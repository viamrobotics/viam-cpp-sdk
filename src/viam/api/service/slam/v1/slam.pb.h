// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/slam/v1/slam.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2fslam_2fv1_2fslam_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_service_2fslam_2fv1_2fslam_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_service_2fslam_2fv1_2fslam_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2fslam_2fv1_2fslam_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_service_2fslam_2fv1_2fslam_2eproto;
namespace viam {
namespace service {
namespace slam {
namespace v1 {
class GetInternalStateRequest;
struct GetInternalStateRequestDefaultTypeInternal;
extern GetInternalStateRequestDefaultTypeInternal _GetInternalStateRequest_default_instance_;
class GetInternalStateResponse;
struct GetInternalStateResponseDefaultTypeInternal;
extern GetInternalStateResponseDefaultTypeInternal _GetInternalStateResponse_default_instance_;
class GetPointCloudMapRequest;
struct GetPointCloudMapRequestDefaultTypeInternal;
extern GetPointCloudMapRequestDefaultTypeInternal _GetPointCloudMapRequest_default_instance_;
class GetPointCloudMapResponse;
struct GetPointCloudMapResponseDefaultTypeInternal;
extern GetPointCloudMapResponseDefaultTypeInternal _GetPointCloudMapResponse_default_instance_;
class GetPositionRequest;
struct GetPositionRequestDefaultTypeInternal;
extern GetPositionRequestDefaultTypeInternal _GetPositionRequest_default_instance_;
class GetPositionResponse;
struct GetPositionResponseDefaultTypeInternal;
extern GetPositionResponseDefaultTypeInternal _GetPositionResponse_default_instance_;
class GetPropertiesRequest;
struct GetPropertiesRequestDefaultTypeInternal;
extern GetPropertiesRequestDefaultTypeInternal _GetPropertiesRequest_default_instance_;
class GetPropertiesResponse;
struct GetPropertiesResponseDefaultTypeInternal;
extern GetPropertiesResponseDefaultTypeInternal _GetPropertiesResponse_default_instance_;
class SensorInfo;
struct SensorInfoDefaultTypeInternal;
extern SensorInfoDefaultTypeInternal _SensorInfo_default_instance_;
}  // namespace v1
}  // namespace slam
}  // namespace service
}  // namespace viam
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace viam {
namespace service {
namespace slam {
namespace v1 {
enum MappingMode : int {
  MAPPING_MODE_UNSPECIFIED = 0,
  MAPPING_MODE_CREATE_NEW_MAP = 1,
  MAPPING_MODE_LOCALIZE_ONLY = 2,
  MAPPING_MODE_UPDATE_EXISTING_MAP = 3,
  MappingMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MappingMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MappingMode_IsValid(int value);
extern const uint32_t MappingMode_internal_data_[];
constexpr MappingMode MappingMode_MIN = static_cast<MappingMode>(0);
constexpr MappingMode MappingMode_MAX = static_cast<MappingMode>(3);
constexpr int MappingMode_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
MappingMode_descriptor();
template <typename T>
const std::string& MappingMode_Name(T value) {
  static_assert(std::is_same<T, MappingMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MappingMode_Name().");
  return MappingMode_Name(static_cast<MappingMode>(value));
}
template <>
inline const std::string& MappingMode_Name(MappingMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MappingMode_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool MappingMode_Parse(absl::string_view name, MappingMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MappingMode>(
      MappingMode_descriptor(), name, value);
}
enum SensorType : int {
  SENSOR_TYPE_UNSPECIFIED = 0,
  SENSOR_TYPE_CAMERA = 1,
  SENSOR_TYPE_MOVEMENT_SENSOR = 2,
  SensorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SensorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SensorType_IsValid(int value);
extern const uint32_t SensorType_internal_data_[];
constexpr SensorType SensorType_MIN = static_cast<SensorType>(0);
constexpr SensorType SensorType_MAX = static_cast<SensorType>(2);
constexpr int SensorType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SensorType_descriptor();
template <typename T>
const std::string& SensorType_Name(T value) {
  static_assert(std::is_same<T, SensorType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SensorType_Name().");
  return SensorType_Name(static_cast<SensorType>(value));
}
template <>
inline const std::string& SensorType_Name(SensorType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SensorType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SensorType_Parse(absl::string_view name, SensorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SensorType>(
      SensorType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SensorInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.SensorInfo) */ {
 public:
  inline SensorInfo() : SensorInfo(nullptr) {}
  ~SensorInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SensorInfo(::google::protobuf::internal::ConstantInitialized);

  inline SensorInfo(const SensorInfo& from)
      : SensorInfo(nullptr, from) {}
  SensorInfo(SensorInfo&& from) noexcept
    : SensorInfo() {
    *this = ::std::move(from);
  }

  inline SensorInfo& operator=(const SensorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorInfo& operator=(SensorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SensorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SensorInfo* internal_default_instance() {
    return reinterpret_cast<const SensorInfo*>(
               &_SensorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SensorInfo& a, SensorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SensorInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SensorInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SensorInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SensorInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SensorInfo& from) {
    SensorInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SensorInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.slam.v1.SensorInfo";
  }
  protected:
  explicit SensorInfo(::google::protobuf::Arena* arena);
  SensorInfo(::google::protobuf::Arena* arena, const SensorInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .viam.service.slam.v1.SensorType type = 2 [json_name = "type"];
  void clear_type() ;
  ::viam::service::slam::v1::SensorType type() const;
  void set_type(::viam::service::slam::v1::SensorType value);

  private:
  ::viam::service::slam::v1::SensorType _internal_type() const;
  void _internal_set_type(::viam::service::slam::v1::SensorType value);

  public:
  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.SensorInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      44, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};// -------------------------------------------------------------------

class GetPropertiesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetPropertiesRequest) */ {
 public:
  inline GetPropertiesRequest() : GetPropertiesRequest(nullptr) {}
  ~GetPropertiesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPropertiesRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetPropertiesRequest(const GetPropertiesRequest& from)
      : GetPropertiesRequest(nullptr, from) {}
  GetPropertiesRequest(GetPropertiesRequest&& from) noexcept
    : GetPropertiesRequest() {
    *this = ::std::move(from);
  }

  inline GetPropertiesRequest& operator=(const GetPropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertiesRequest& operator=(GetPropertiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetPropertiesRequest*>(
               &_GetPropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetPropertiesRequest& a, GetPropertiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertiesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertiesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertiesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPropertiesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPropertiesRequest& from) {
    GetPropertiesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPropertiesRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.slam.v1.GetPropertiesRequest";
  }
  protected:
  explicit GetPropertiesRequest(::google::protobuf::Arena* arena);
  GetPropertiesRequest(::google::protobuf::Arena* arena, const GetPropertiesRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetPropertiesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      54, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};// -------------------------------------------------------------------

class GetPositionRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetPositionRequest) */ {
 public:
  inline GetPositionRequest() : GetPositionRequest(nullptr) {}
  ~GetPositionRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPositionRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetPositionRequest(const GetPositionRequest& from)
      : GetPositionRequest(nullptr, from) {}
  GetPositionRequest(GetPositionRequest&& from) noexcept
    : GetPositionRequest() {
    *this = ::std::move(from);
  }

  inline GetPositionRequest& operator=(const GetPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPositionRequest& operator=(GetPositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPositionRequest* internal_default_instance() {
    return reinterpret_cast<const GetPositionRequest*>(
               &_GetPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetPositionRequest& a, GetPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPositionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPositionRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPositionRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPositionRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPositionRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPositionRequest& from) {
    GetPositionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPositionRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.slam.v1.GetPositionRequest";
  }
  protected:
  explicit GetPositionRequest(::google::protobuf::Arena* arena);
  GetPositionRequest(::google::protobuf::Arena* arena, const GetPositionRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetPositionRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      52, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};// -------------------------------------------------------------------

class GetPointCloudMapResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetPointCloudMapResponse) */ {
 public:
  inline GetPointCloudMapResponse() : GetPointCloudMapResponse(nullptr) {}
  ~GetPointCloudMapResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPointCloudMapResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetPointCloudMapResponse(const GetPointCloudMapResponse& from)
      : GetPointCloudMapResponse(nullptr, from) {}
  GetPointCloudMapResponse(GetPointCloudMapResponse&& from) noexcept
    : GetPointCloudMapResponse() {
    *this = ::std::move(from);
  }

  inline GetPointCloudMapResponse& operator=(const GetPointCloudMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPointCloudMapResponse& operator=(GetPointCloudMapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPointCloudMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPointCloudMapResponse* internal_default_instance() {
    return reinterpret_cast<const GetPointCloudMapResponse*>(
               &_GetPointCloudMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetPointCloudMapResponse& a, GetPointCloudMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPointCloudMapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPointCloudMapResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPointCloudMapResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPointCloudMapResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPointCloudMapResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPointCloudMapResponse& from) {
    GetPointCloudMapResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPointCloudMapResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.slam.v1.GetPointCloudMapResponse";
  }
  protected:
  explicit GetPointCloudMapResponse(::google::protobuf::Arena* arena);
  GetPointCloudMapResponse(::google::protobuf::Arena* arena, const GetPointCloudMapResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudPcdChunkFieldNumber = 1,
  };
  // bytes point_cloud_pcd_chunk = 1 [json_name = "pointCloudPcdChunk"];
  void clear_point_cloud_pcd_chunk() ;
  const std::string& point_cloud_pcd_chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_point_cloud_pcd_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_point_cloud_pcd_chunk();
  PROTOBUF_NODISCARD std::string* release_point_cloud_pcd_chunk();
  void set_allocated_point_cloud_pcd_chunk(std::string* value);

  private:
  const std::string& _internal_point_cloud_pcd_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_cloud_pcd_chunk(
      const std::string& value);
  std::string* _internal_mutable_point_cloud_pcd_chunk();

  public:
  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetPointCloudMapResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr point_cloud_pcd_chunk_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};// -------------------------------------------------------------------

class GetPointCloudMapRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetPointCloudMapRequest) */ {
 public:
  inline GetPointCloudMapRequest() : GetPointCloudMapRequest(nullptr) {}
  ~GetPointCloudMapRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPointCloudMapRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetPointCloudMapRequest(const GetPointCloudMapRequest& from)
      : GetPointCloudMapRequest(nullptr, from) {}
  GetPointCloudMapRequest(GetPointCloudMapRequest&& from) noexcept
    : GetPointCloudMapRequest() {
    *this = ::std::move(from);
  }

  inline GetPointCloudMapRequest& operator=(const GetPointCloudMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPointCloudMapRequest& operator=(GetPointCloudMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPointCloudMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPointCloudMapRequest* internal_default_instance() {
    return reinterpret_cast<const GetPointCloudMapRequest*>(
               &_GetPointCloudMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetPointCloudMapRequest& a, GetPointCloudMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPointCloudMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPointCloudMapRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPointCloudMapRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPointCloudMapRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPointCloudMapRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPointCloudMapRequest& from) {
    GetPointCloudMapRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPointCloudMapRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.slam.v1.GetPointCloudMapRequest";
  }
  protected:
  explicit GetPointCloudMapRequest(::google::protobuf::Arena* arena);
  GetPointCloudMapRequest(::google::protobuf::Arena* arena, const GetPointCloudMapRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kReturnEditedMapFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional bool return_edited_map = 2 [json_name = "returnEditedMap"];
  bool has_return_edited_map() const;
  void clear_return_edited_map() ;
  bool return_edited_map() const;
  void set_return_edited_map(bool value);

  private:
  bool _internal_return_edited_map() const;
  void _internal_set_return_edited_map(bool value);

  public:
  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetPointCloudMapRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    bool return_edited_map_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};// -------------------------------------------------------------------

class GetInternalStateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetInternalStateResponse) */ {
 public:
  inline GetInternalStateResponse() : GetInternalStateResponse(nullptr) {}
  ~GetInternalStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetInternalStateResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetInternalStateResponse(const GetInternalStateResponse& from)
      : GetInternalStateResponse(nullptr, from) {}
  GetInternalStateResponse(GetInternalStateResponse&& from) noexcept
    : GetInternalStateResponse() {
    *this = ::std::move(from);
  }

  inline GetInternalStateResponse& operator=(const GetInternalStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInternalStateResponse& operator=(GetInternalStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInternalStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInternalStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetInternalStateResponse*>(
               &_GetInternalStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetInternalStateResponse& a, GetInternalStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInternalStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInternalStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInternalStateResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInternalStateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetInternalStateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetInternalStateResponse& from) {
    GetInternalStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetInternalStateResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.slam.v1.GetInternalStateResponse";
  }
  protected:
  explicit GetInternalStateResponse(::google::protobuf::Arena* arena);
  GetInternalStateResponse(::google::protobuf::Arena* arena, const GetInternalStateResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalStateChunkFieldNumber = 1,
  };
  // bytes internal_state_chunk = 1 [json_name = "internalStateChunk"];
  void clear_internal_state_chunk() ;
  const std::string& internal_state_chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_internal_state_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_internal_state_chunk();
  PROTOBUF_NODISCARD std::string* release_internal_state_chunk();
  void set_allocated_internal_state_chunk(std::string* value);

  private:
  const std::string& _internal_internal_state_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_internal_state_chunk(
      const std::string& value);
  std::string* _internal_mutable_internal_state_chunk();

  public:
  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetInternalStateResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr internal_state_chunk_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};// -------------------------------------------------------------------

class GetInternalStateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetInternalStateRequest) */ {
 public:
  inline GetInternalStateRequest() : GetInternalStateRequest(nullptr) {}
  ~GetInternalStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetInternalStateRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetInternalStateRequest(const GetInternalStateRequest& from)
      : GetInternalStateRequest(nullptr, from) {}
  GetInternalStateRequest(GetInternalStateRequest&& from) noexcept
    : GetInternalStateRequest() {
    *this = ::std::move(from);
  }

  inline GetInternalStateRequest& operator=(const GetInternalStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInternalStateRequest& operator=(GetInternalStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInternalStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInternalStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetInternalStateRequest*>(
               &_GetInternalStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetInternalStateRequest& a, GetInternalStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInternalStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInternalStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInternalStateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInternalStateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetInternalStateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetInternalStateRequest& from) {
    GetInternalStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetInternalStateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.slam.v1.GetInternalStateRequest";
  }
  protected:
  explicit GetInternalStateRequest(::google::protobuf::Arena* arena);
  GetInternalStateRequest(::google::protobuf::Arena* arena, const GetInternalStateRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetInternalStateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};// -------------------------------------------------------------------

class GetPropertiesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetPropertiesResponse) */ {
 public:
  inline GetPropertiesResponse() : GetPropertiesResponse(nullptr) {}
  ~GetPropertiesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPropertiesResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetPropertiesResponse(const GetPropertiesResponse& from)
      : GetPropertiesResponse(nullptr, from) {}
  GetPropertiesResponse(GetPropertiesResponse&& from) noexcept
    : GetPropertiesResponse() {
    *this = ::std::move(from);
  }

  inline GetPropertiesResponse& operator=(const GetPropertiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertiesResponse& operator=(GetPropertiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertiesResponse* internal_default_instance() {
    return reinterpret_cast<const GetPropertiesResponse*>(
               &_GetPropertiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetPropertiesResponse& a, GetPropertiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertiesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertiesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertiesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPropertiesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPropertiesResponse& from) {
    GetPropertiesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPropertiesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.slam.v1.GetPropertiesResponse";
  }
  protected:
  explicit GetPropertiesResponse(::google::protobuf::Arena* arena);
  GetPropertiesResponse(::google::protobuf::Arena* arena, const GetPropertiesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorInfoFieldNumber = 4,
    kInternalStateFileTypeFieldNumber = 3,
    kCloudSlamFieldNumber = 1,
    kMappingModeFieldNumber = 2,
  };
  // repeated .viam.service.slam.v1.SensorInfo sensor_info = 4 [json_name = "sensorInfo"];
  int sensor_info_size() const;
  private:
  int _internal_sensor_info_size() const;

  public:
  void clear_sensor_info() ;
  ::viam::service::slam::v1::SensorInfo* mutable_sensor_info(int index);
  ::google::protobuf::RepeatedPtrField< ::viam::service::slam::v1::SensorInfo >*
      mutable_sensor_info();
  private:
  const ::google::protobuf::RepeatedPtrField<::viam::service::slam::v1::SensorInfo>& _internal_sensor_info() const;
  ::google::protobuf::RepeatedPtrField<::viam::service::slam::v1::SensorInfo>* _internal_mutable_sensor_info();
  public:
  const ::viam::service::slam::v1::SensorInfo& sensor_info(int index) const;
  ::viam::service::slam::v1::SensorInfo* add_sensor_info();
  const ::google::protobuf::RepeatedPtrField< ::viam::service::slam::v1::SensorInfo >&
      sensor_info() const;
  // optional string internal_state_file_type = 3 [json_name = "internalStateFileType"];
  bool has_internal_state_file_type() const;
  void clear_internal_state_file_type() ;
  const std::string& internal_state_file_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_internal_state_file_type(Arg_&& arg, Args_... args);
  std::string* mutable_internal_state_file_type();
  PROTOBUF_NODISCARD std::string* release_internal_state_file_type();
  void set_allocated_internal_state_file_type(std::string* value);

  private:
  const std::string& _internal_internal_state_file_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_internal_state_file_type(
      const std::string& value);
  std::string* _internal_mutable_internal_state_file_type();

  public:
  // bool cloud_slam = 1 [json_name = "cloudSlam"];
  void clear_cloud_slam() ;
  bool cloud_slam() const;
  void set_cloud_slam(bool value);

  private:
  bool _internal_cloud_slam() const;
  void _internal_set_cloud_slam(bool value);

  public:
  // .viam.service.slam.v1.MappingMode mapping_mode = 2 [json_name = "mappingMode"];
  void clear_mapping_mode() ;
  ::viam::service::slam::v1::MappingMode mapping_mode() const;
  void set_mapping_mode(::viam::service::slam::v1::MappingMode value);

  private:
  ::viam::service::slam::v1::MappingMode _internal_mapping_mode() const;
  void _internal_set_mapping_mode(::viam::service::slam::v1::MappingMode value);

  public:
  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetPropertiesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      75, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::viam::service::slam::v1::SensorInfo > sensor_info_;
    ::google::protobuf::internal::ArenaStringPtr internal_state_file_type_;
    bool cloud_slam_;
    int mapping_mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};// -------------------------------------------------------------------

class GetPositionResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetPositionResponse) */ {
 public:
  inline GetPositionResponse() : GetPositionResponse(nullptr) {}
  ~GetPositionResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPositionResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetPositionResponse(const GetPositionResponse& from)
      : GetPositionResponse(nullptr, from) {}
  GetPositionResponse(GetPositionResponse&& from) noexcept
    : GetPositionResponse() {
    *this = ::std::move(from);
  }

  inline GetPositionResponse& operator=(const GetPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPositionResponse& operator=(GetPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPositionResponse* internal_default_instance() {
    return reinterpret_cast<const GetPositionResponse*>(
               &_GetPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetPositionResponse& a, GetPositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPositionResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPositionResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPositionResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPositionResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPositionResponse& from) {
    GetPositionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPositionResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.slam.v1.GetPositionResponse";
  }
  protected:
  explicit GetPositionResponse(::google::protobuf::Arena* arena);
  GetPositionResponse(::google::protobuf::Arena* arena, const GetPositionResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
  };
  // .viam.common.v1.Pose pose = 1 [json_name = "pose"];
  bool has_pose() const;
  void clear_pose() ;
  const ::viam::common::v1::Pose& pose() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Pose* release_pose();
  ::viam::common::v1::Pose* mutable_pose();
  void set_allocated_pose(::viam::common::v1::Pose* value);
  void unsafe_arena_set_allocated_pose(::viam::common::v1::Pose* value);
  ::viam::common::v1::Pose* unsafe_arena_release_pose();

  private:
  const ::viam::common::v1::Pose& _internal_pose() const;
  ::viam::common::v1::Pose* _internal_mutable_pose();

  public:
  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetPositionResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::viam::common::v1::Pose* pose_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetPositionRequest

// string name = 1 [json_name = "name"];
inline void GetPositionRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetPositionRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPositionRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPositionRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetPositionRequest.name)
}
inline std::string* GetPositionRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPositionRequest.name)
  return _s;
}
inline const std::string& GetPositionRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetPositionRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetPositionRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetPositionRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetPositionRequest.name)
  return _impl_.name_.Release();
}
inline void GetPositionRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetPositionRequest.name)
}

// -------------------------------------------------------------------

// GetPositionResponse

// .viam.common.v1.Pose pose = 1 [json_name = "pose"];
inline bool GetPositionResponse::has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline const ::viam::common::v1::Pose& GetPositionResponse::_internal_pose() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::viam::common::v1::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Pose&>(::viam::common::v1::_Pose_default_instance_);
}
inline const ::viam::common::v1::Pose& GetPositionResponse::pose() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPositionResponse.pose)
  return _internal_pose();
}
inline void GetPositionResponse::unsafe_arena_set_allocated_pose(::viam::common::v1::Pose* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = reinterpret_cast<::viam::common::v1::Pose*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.slam.v1.GetPositionResponse.pose)
}
inline ::viam::common::v1::Pose* GetPositionResponse::release_pose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::common::v1::Pose* released = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::viam::common::v1::Pose* GetPositionResponse::unsafe_arena_release_pose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetPositionResponse.pose)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::common::v1::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Pose* GetPositionResponse::_internal_mutable_pose() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Pose>(GetArena());
    _impl_.pose_ = reinterpret_cast<::viam::common::v1::Pose*>(p);
  }
  return _impl_.pose_;
}
inline ::viam::common::v1::Pose* GetPositionResponse::mutable_pose() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::viam::common::v1::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPositionResponse.pose)
  return _msg;
}
inline void GetPositionResponse::set_allocated_pose(::viam::common::v1::Pose* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.pose_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.pose_ = reinterpret_cast<::viam::common::v1::Pose*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetPositionResponse.pose)
}

// -------------------------------------------------------------------

// GetPointCloudMapRequest

// string name = 1 [json_name = "name"];
inline void GetPointCloudMapRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetPointCloudMapRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPointCloudMapRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPointCloudMapRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetPointCloudMapRequest.name)
}
inline std::string* GetPointCloudMapRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPointCloudMapRequest.name)
  return _s;
}
inline const std::string& GetPointCloudMapRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetPointCloudMapRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetPointCloudMapRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetPointCloudMapRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetPointCloudMapRequest.name)
  return _impl_.name_.Release();
}
inline void GetPointCloudMapRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetPointCloudMapRequest.name)
}

// optional bool return_edited_map = 2 [json_name = "returnEditedMap"];
inline bool GetPointCloudMapRequest::has_return_edited_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetPointCloudMapRequest::clear_return_edited_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.return_edited_map_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool GetPointCloudMapRequest::return_edited_map() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPointCloudMapRequest.return_edited_map)
  return _internal_return_edited_map();
}
inline void GetPointCloudMapRequest::set_return_edited_map(bool value) {
  _internal_set_return_edited_map(value);
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetPointCloudMapRequest.return_edited_map)
}
inline bool GetPointCloudMapRequest::_internal_return_edited_map() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.return_edited_map_;
}
inline void GetPointCloudMapRequest::_internal_set_return_edited_map(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.return_edited_map_ = value;
}

// -------------------------------------------------------------------

// GetPointCloudMapResponse

// bytes point_cloud_pcd_chunk = 1 [json_name = "pointCloudPcdChunk"];
inline void GetPointCloudMapResponse::clear_point_cloud_pcd_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.point_cloud_pcd_chunk_.ClearToEmpty();
}
inline const std::string& GetPointCloudMapResponse::point_cloud_pcd_chunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPointCloudMapResponse.point_cloud_pcd_chunk)
  return _internal_point_cloud_pcd_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPointCloudMapResponse::set_point_cloud_pcd_chunk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.point_cloud_pcd_chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetPointCloudMapResponse.point_cloud_pcd_chunk)
}
inline std::string* GetPointCloudMapResponse::mutable_point_cloud_pcd_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_point_cloud_pcd_chunk();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPointCloudMapResponse.point_cloud_pcd_chunk)
  return _s;
}
inline const std::string& GetPointCloudMapResponse::_internal_point_cloud_pcd_chunk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.point_cloud_pcd_chunk_.Get();
}
inline void GetPointCloudMapResponse::_internal_set_point_cloud_pcd_chunk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.point_cloud_pcd_chunk_.Set(value, GetArena());
}
inline std::string* GetPointCloudMapResponse::_internal_mutable_point_cloud_pcd_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.point_cloud_pcd_chunk_.Mutable( GetArena());
}
inline std::string* GetPointCloudMapResponse::release_point_cloud_pcd_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetPointCloudMapResponse.point_cloud_pcd_chunk)
  return _impl_.point_cloud_pcd_chunk_.Release();
}
inline void GetPointCloudMapResponse::set_allocated_point_cloud_pcd_chunk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.point_cloud_pcd_chunk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.point_cloud_pcd_chunk_.IsDefault()) {
          _impl_.point_cloud_pcd_chunk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetPointCloudMapResponse.point_cloud_pcd_chunk)
}

// -------------------------------------------------------------------

// GetInternalStateRequest

// string name = 1 [json_name = "name"];
inline void GetInternalStateRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetInternalStateRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetInternalStateRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetInternalStateRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetInternalStateRequest.name)
}
inline std::string* GetInternalStateRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetInternalStateRequest.name)
  return _s;
}
inline const std::string& GetInternalStateRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetInternalStateRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetInternalStateRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetInternalStateRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetInternalStateRequest.name)
  return _impl_.name_.Release();
}
inline void GetInternalStateRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetInternalStateRequest.name)
}

// -------------------------------------------------------------------

// GetInternalStateResponse

// bytes internal_state_chunk = 1 [json_name = "internalStateChunk"];
inline void GetInternalStateResponse::clear_internal_state_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.internal_state_chunk_.ClearToEmpty();
}
inline const std::string& GetInternalStateResponse::internal_state_chunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetInternalStateResponse.internal_state_chunk)
  return _internal_internal_state_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetInternalStateResponse::set_internal_state_chunk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.internal_state_chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetInternalStateResponse.internal_state_chunk)
}
inline std::string* GetInternalStateResponse::mutable_internal_state_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_internal_state_chunk();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetInternalStateResponse.internal_state_chunk)
  return _s;
}
inline const std::string& GetInternalStateResponse::_internal_internal_state_chunk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.internal_state_chunk_.Get();
}
inline void GetInternalStateResponse::_internal_set_internal_state_chunk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.internal_state_chunk_.Set(value, GetArena());
}
inline std::string* GetInternalStateResponse::_internal_mutable_internal_state_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.internal_state_chunk_.Mutable( GetArena());
}
inline std::string* GetInternalStateResponse::release_internal_state_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetInternalStateResponse.internal_state_chunk)
  return _impl_.internal_state_chunk_.Release();
}
inline void GetInternalStateResponse::set_allocated_internal_state_chunk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.internal_state_chunk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.internal_state_chunk_.IsDefault()) {
          _impl_.internal_state_chunk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetInternalStateResponse.internal_state_chunk)
}

// -------------------------------------------------------------------

// GetPropertiesRequest

// string name = 1 [json_name = "name"];
inline void GetPropertiesRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetPropertiesRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPropertiesRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPropertiesRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetPropertiesRequest.name)
}
inline std::string* GetPropertiesRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPropertiesRequest.name)
  return _s;
}
inline const std::string& GetPropertiesRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void GetPropertiesRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* GetPropertiesRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* GetPropertiesRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetPropertiesRequest.name)
  return _impl_.name_.Release();
}
inline void GetPropertiesRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetPropertiesRequest.name)
}

// -------------------------------------------------------------------

// GetPropertiesResponse

// bool cloud_slam = 1 [json_name = "cloudSlam"];
inline void GetPropertiesResponse::clear_cloud_slam() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cloud_slam_ = false;
}
inline bool GetPropertiesResponse::cloud_slam() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPropertiesResponse.cloud_slam)
  return _internal_cloud_slam();
}
inline void GetPropertiesResponse::set_cloud_slam(bool value) {
  _internal_set_cloud_slam(value);
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetPropertiesResponse.cloud_slam)
}
inline bool GetPropertiesResponse::_internal_cloud_slam() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cloud_slam_;
}
inline void GetPropertiesResponse::_internal_set_cloud_slam(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cloud_slam_ = value;
}

// .viam.service.slam.v1.MappingMode mapping_mode = 2 [json_name = "mappingMode"];
inline void GetPropertiesResponse::clear_mapping_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mapping_mode_ = 0;
}
inline ::viam::service::slam::v1::MappingMode GetPropertiesResponse::mapping_mode() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPropertiesResponse.mapping_mode)
  return _internal_mapping_mode();
}
inline void GetPropertiesResponse::set_mapping_mode(::viam::service::slam::v1::MappingMode value) {
  _internal_set_mapping_mode(value);
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetPropertiesResponse.mapping_mode)
}
inline ::viam::service::slam::v1::MappingMode GetPropertiesResponse::_internal_mapping_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::viam::service::slam::v1::MappingMode>(_impl_.mapping_mode_);
}
inline void GetPropertiesResponse::_internal_set_mapping_mode(::viam::service::slam::v1::MappingMode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mapping_mode_ = value;
}

// optional string internal_state_file_type = 3 [json_name = "internalStateFileType"];
inline bool GetPropertiesResponse::has_internal_state_file_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetPropertiesResponse::clear_internal_state_file_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.internal_state_file_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetPropertiesResponse::internal_state_file_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPropertiesResponse.internal_state_file_type)
  return _internal_internal_state_file_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPropertiesResponse::set_internal_state_file_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.internal_state_file_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetPropertiesResponse.internal_state_file_type)
}
inline std::string* GetPropertiesResponse::mutable_internal_state_file_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_internal_state_file_type();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPropertiesResponse.internal_state_file_type)
  return _s;
}
inline const std::string& GetPropertiesResponse::_internal_internal_state_file_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.internal_state_file_type_.Get();
}
inline void GetPropertiesResponse::_internal_set_internal_state_file_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.internal_state_file_type_.Set(value, GetArena());
}
inline std::string* GetPropertiesResponse::_internal_mutable_internal_state_file_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.internal_state_file_type_.Mutable( GetArena());
}
inline std::string* GetPropertiesResponse::release_internal_state_file_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetPropertiesResponse.internal_state_file_type)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.internal_state_file_type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.internal_state_file_type_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GetPropertiesResponse::set_allocated_internal_state_file_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.internal_state_file_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.internal_state_file_type_.IsDefault()) {
          _impl_.internal_state_file_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetPropertiesResponse.internal_state_file_type)
}

// repeated .viam.service.slam.v1.SensorInfo sensor_info = 4 [json_name = "sensorInfo"];
inline int GetPropertiesResponse::_internal_sensor_info_size() const {
  return _internal_sensor_info().size();
}
inline int GetPropertiesResponse::sensor_info_size() const {
  return _internal_sensor_info_size();
}
inline void GetPropertiesResponse::clear_sensor_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sensor_info_.Clear();
}
inline ::viam::service::slam::v1::SensorInfo* GetPropertiesResponse::mutable_sensor_info(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPropertiesResponse.sensor_info)
  return _internal_mutable_sensor_info()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::viam::service::slam::v1::SensorInfo>* GetPropertiesResponse::mutable_sensor_info()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.service.slam.v1.GetPropertiesResponse.sensor_info)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sensor_info();
}
inline const ::viam::service::slam::v1::SensorInfo& GetPropertiesResponse::sensor_info(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPropertiesResponse.sensor_info)
  return _internal_sensor_info().Get(index);
}
inline ::viam::service::slam::v1::SensorInfo* GetPropertiesResponse::add_sensor_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::viam::service::slam::v1::SensorInfo* _add = _internal_mutable_sensor_info()->Add();
  // @@protoc_insertion_point(field_add:viam.service.slam.v1.GetPropertiesResponse.sensor_info)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::viam::service::slam::v1::SensorInfo>& GetPropertiesResponse::sensor_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.service.slam.v1.GetPropertiesResponse.sensor_info)
  return _internal_sensor_info();
}
inline const ::google::protobuf::RepeatedPtrField<::viam::service::slam::v1::SensorInfo>&
GetPropertiesResponse::_internal_sensor_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sensor_info_;
}
inline ::google::protobuf::RepeatedPtrField<::viam::service::slam::v1::SensorInfo>*
GetPropertiesResponse::_internal_mutable_sensor_info() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sensor_info_;
}

// -------------------------------------------------------------------

// SensorInfo

// string name = 1 [json_name = "name"];
inline void SensorInfo::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SensorInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.SensorInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SensorInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.SensorInfo.name)
}
inline std::string* SensorInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.SensorInfo.name)
  return _s;
}
inline const std::string& SensorInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void SensorInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SensorInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SensorInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.SensorInfo.name)
  return _impl_.name_.Release();
}
inline void SensorInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.SensorInfo.name)
}

// .viam.service.slam.v1.SensorType type = 2 [json_name = "type"];
inline void SensorInfo::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::viam::service::slam::v1::SensorType SensorInfo::type() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.SensorInfo.type)
  return _internal_type();
}
inline void SensorInfo::set_type(::viam::service::slam::v1::SensorType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.SensorInfo.type)
}
inline ::viam::service::slam::v1::SensorType SensorInfo::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::viam::service::slam::v1::SensorType>(_impl_.type_);
}
inline void SensorInfo::_internal_set_type(::viam::service::slam::v1::SensorType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace slam
}  // namespace service
}  // namespace viam


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::viam::service::slam::v1::MappingMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::viam::service::slam::v1::MappingMode>() {
  return ::viam::service::slam::v1::MappingMode_descriptor();
}
template <>
struct is_proto_enum<::viam::service::slam::v1::SensorType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::viam::service::slam::v1::SensorType>() {
  return ::viam::service::slam::v1::SensorType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_service_2fslam_2fv1_2fslam_2eproto_2epb_2eh
