// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/slam/v1/slam.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2fslam_2fv1_2fslam_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2fslam_2fv1_2fslam_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2fslam_2fv1_2fslam_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2fslam_2fv1_2fslam_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2fslam_2fv1_2fslam_2eproto;
namespace viam {
namespace service {
namespace slam {
namespace v1 {
class GetInternalStateRequest;
struct GetInternalStateRequestDefaultTypeInternal;
extern GetInternalStateRequestDefaultTypeInternal _GetInternalStateRequest_default_instance_;
class GetInternalStateResponse;
struct GetInternalStateResponseDefaultTypeInternal;
extern GetInternalStateResponseDefaultTypeInternal _GetInternalStateResponse_default_instance_;
class GetLatestMapInfoRequest;
struct GetLatestMapInfoRequestDefaultTypeInternal;
extern GetLatestMapInfoRequestDefaultTypeInternal _GetLatestMapInfoRequest_default_instance_;
class GetLatestMapInfoResponse;
struct GetLatestMapInfoResponseDefaultTypeInternal;
extern GetLatestMapInfoResponseDefaultTypeInternal _GetLatestMapInfoResponse_default_instance_;
class GetPointCloudMapRequest;
struct GetPointCloudMapRequestDefaultTypeInternal;
extern GetPointCloudMapRequestDefaultTypeInternal _GetPointCloudMapRequest_default_instance_;
class GetPointCloudMapResponse;
struct GetPointCloudMapResponseDefaultTypeInternal;
extern GetPointCloudMapResponseDefaultTypeInternal _GetPointCloudMapResponse_default_instance_;
class GetPositionRequest;
struct GetPositionRequestDefaultTypeInternal;
extern GetPositionRequestDefaultTypeInternal _GetPositionRequest_default_instance_;
class GetPositionResponse;
struct GetPositionResponseDefaultTypeInternal;
extern GetPositionResponseDefaultTypeInternal _GetPositionResponse_default_instance_;
}  // namespace v1
}  // namespace slam
}  // namespace service
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::service::slam::v1::GetInternalStateRequest* Arena::CreateMaybeMessage<::viam::service::slam::v1::GetInternalStateRequest>(Arena*);
template<> ::viam::service::slam::v1::GetInternalStateResponse* Arena::CreateMaybeMessage<::viam::service::slam::v1::GetInternalStateResponse>(Arena*);
template<> ::viam::service::slam::v1::GetLatestMapInfoRequest* Arena::CreateMaybeMessage<::viam::service::slam::v1::GetLatestMapInfoRequest>(Arena*);
template<> ::viam::service::slam::v1::GetLatestMapInfoResponse* Arena::CreateMaybeMessage<::viam::service::slam::v1::GetLatestMapInfoResponse>(Arena*);
template<> ::viam::service::slam::v1::GetPointCloudMapRequest* Arena::CreateMaybeMessage<::viam::service::slam::v1::GetPointCloudMapRequest>(Arena*);
template<> ::viam::service::slam::v1::GetPointCloudMapResponse* Arena::CreateMaybeMessage<::viam::service::slam::v1::GetPointCloudMapResponse>(Arena*);
template<> ::viam::service::slam::v1::GetPositionRequest* Arena::CreateMaybeMessage<::viam::service::slam::v1::GetPositionRequest>(Arena*);
template<> ::viam::service::slam::v1::GetPositionResponse* Arena::CreateMaybeMessage<::viam::service::slam::v1::GetPositionResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace service {
namespace slam {
namespace v1 {

// ===================================================================

class GetPositionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetPositionRequest) */ {
 public:
  inline GetPositionRequest() : GetPositionRequest(nullptr) {}
  ~GetPositionRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPositionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPositionRequest(const GetPositionRequest& from);
  GetPositionRequest(GetPositionRequest&& from) noexcept
    : GetPositionRequest() {
    *this = ::std::move(from);
  }

  inline GetPositionRequest& operator=(const GetPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPositionRequest& operator=(GetPositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPositionRequest* internal_default_instance() {
    return reinterpret_cast<const GetPositionRequest*>(
               &_GetPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetPositionRequest& a, GetPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPositionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPositionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPositionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPositionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPositionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.slam.v1.GetPositionRequest";
  }
  protected:
  explicit GetPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetPositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};
// -------------------------------------------------------------------

class GetPositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetPositionResponse) */ {
 public:
  inline GetPositionResponse() : GetPositionResponse(nullptr) {}
  ~GetPositionResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPositionResponse(const GetPositionResponse& from);
  GetPositionResponse(GetPositionResponse&& from) noexcept
    : GetPositionResponse() {
    *this = ::std::move(from);
  }

  inline GetPositionResponse& operator=(const GetPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPositionResponse& operator=(GetPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPositionResponse* internal_default_instance() {
    return reinterpret_cast<const GetPositionResponse*>(
               &_GetPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetPositionResponse& a, GetPositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPositionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPositionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPositionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.slam.v1.GetPositionResponse";
  }
  protected:
  explicit GetPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentReferenceFieldNumber = 2,
    kPoseFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string component_reference = 2 [json_name = "componentReference"];
  void clear_component_reference();
  const std::string& component_reference() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_reference(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_reference();
  PROTOBUF_NODISCARD std::string* release_component_reference();
  void set_allocated_component_reference(std::string* component_reference);
  private:
  const std::string& _internal_component_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_reference(const std::string& value);
  std::string* _internal_mutable_component_reference();
  public:

  // .viam.common.v1.Pose pose = 1 [json_name = "pose"];
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::viam::common::v1::Pose& pose() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Pose* release_pose();
  ::viam::common::v1::Pose* mutable_pose();
  void set_allocated_pose(::viam::common::v1::Pose* pose);
  private:
  const ::viam::common::v1::Pose& _internal_pose() const;
  ::viam::common::v1::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::viam::common::v1::Pose* pose);
  ::viam::common::v1::Pose* unsafe_arena_release_pose();

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetPositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_reference_;
  ::viam::common::v1::Pose* pose_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};
// -------------------------------------------------------------------

class GetPointCloudMapRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetPointCloudMapRequest) */ {
 public:
  inline GetPointCloudMapRequest() : GetPointCloudMapRequest(nullptr) {}
  ~GetPointCloudMapRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPointCloudMapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPointCloudMapRequest(const GetPointCloudMapRequest& from);
  GetPointCloudMapRequest(GetPointCloudMapRequest&& from) noexcept
    : GetPointCloudMapRequest() {
    *this = ::std::move(from);
  }

  inline GetPointCloudMapRequest& operator=(const GetPointCloudMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPointCloudMapRequest& operator=(GetPointCloudMapRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPointCloudMapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPointCloudMapRequest* internal_default_instance() {
    return reinterpret_cast<const GetPointCloudMapRequest*>(
               &_GetPointCloudMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetPointCloudMapRequest& a, GetPointCloudMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPointCloudMapRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPointCloudMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPointCloudMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPointCloudMapRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPointCloudMapRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPointCloudMapRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPointCloudMapRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.slam.v1.GetPointCloudMapRequest";
  }
  protected:
  explicit GetPointCloudMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetPointCloudMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};
// -------------------------------------------------------------------

class GetPointCloudMapResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetPointCloudMapResponse) */ {
 public:
  inline GetPointCloudMapResponse() : GetPointCloudMapResponse(nullptr) {}
  ~GetPointCloudMapResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPointCloudMapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPointCloudMapResponse(const GetPointCloudMapResponse& from);
  GetPointCloudMapResponse(GetPointCloudMapResponse&& from) noexcept
    : GetPointCloudMapResponse() {
    *this = ::std::move(from);
  }

  inline GetPointCloudMapResponse& operator=(const GetPointCloudMapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPointCloudMapResponse& operator=(GetPointCloudMapResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPointCloudMapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPointCloudMapResponse* internal_default_instance() {
    return reinterpret_cast<const GetPointCloudMapResponse*>(
               &_GetPointCloudMapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetPointCloudMapResponse& a, GetPointCloudMapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPointCloudMapResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPointCloudMapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPointCloudMapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPointCloudMapResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPointCloudMapResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPointCloudMapResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPointCloudMapResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.slam.v1.GetPointCloudMapResponse";
  }
  protected:
  explicit GetPointCloudMapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudPcdChunkFieldNumber = 1,
  };
  // bytes point_cloud_pcd_chunk = 1 [json_name = "pointCloudPcdChunk"];
  void clear_point_cloud_pcd_chunk();
  const std::string& point_cloud_pcd_chunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_cloud_pcd_chunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_cloud_pcd_chunk();
  PROTOBUF_NODISCARD std::string* release_point_cloud_pcd_chunk();
  void set_allocated_point_cloud_pcd_chunk(std::string* point_cloud_pcd_chunk);
  private:
  const std::string& _internal_point_cloud_pcd_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_cloud_pcd_chunk(const std::string& value);
  std::string* _internal_mutable_point_cloud_pcd_chunk();
  public:

  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetPointCloudMapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_cloud_pcd_chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};
// -------------------------------------------------------------------

class GetInternalStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetInternalStateRequest) */ {
 public:
  inline GetInternalStateRequest() : GetInternalStateRequest(nullptr) {}
  ~GetInternalStateRequest() override;
  explicit PROTOBUF_CONSTEXPR GetInternalStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInternalStateRequest(const GetInternalStateRequest& from);
  GetInternalStateRequest(GetInternalStateRequest&& from) noexcept
    : GetInternalStateRequest() {
    *this = ::std::move(from);
  }

  inline GetInternalStateRequest& operator=(const GetInternalStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInternalStateRequest& operator=(GetInternalStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInternalStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInternalStateRequest* internal_default_instance() {
    return reinterpret_cast<const GetInternalStateRequest*>(
               &_GetInternalStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetInternalStateRequest& a, GetInternalStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInternalStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInternalStateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInternalStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInternalStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInternalStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInternalStateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInternalStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.slam.v1.GetInternalStateRequest";
  }
  protected:
  explicit GetInternalStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetInternalStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};
// -------------------------------------------------------------------

class GetInternalStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetInternalStateResponse) */ {
 public:
  inline GetInternalStateResponse() : GetInternalStateResponse(nullptr) {}
  ~GetInternalStateResponse() override;
  explicit PROTOBUF_CONSTEXPR GetInternalStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInternalStateResponse(const GetInternalStateResponse& from);
  GetInternalStateResponse(GetInternalStateResponse&& from) noexcept
    : GetInternalStateResponse() {
    *this = ::std::move(from);
  }

  inline GetInternalStateResponse& operator=(const GetInternalStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInternalStateResponse& operator=(GetInternalStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInternalStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInternalStateResponse* internal_default_instance() {
    return reinterpret_cast<const GetInternalStateResponse*>(
               &_GetInternalStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetInternalStateResponse& a, GetInternalStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInternalStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInternalStateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInternalStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInternalStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInternalStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInternalStateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInternalStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.slam.v1.GetInternalStateResponse";
  }
  protected:
  explicit GetInternalStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalStateChunkFieldNumber = 1,
  };
  // bytes internal_state_chunk = 1 [json_name = "internalStateChunk"];
  void clear_internal_state_chunk();
  const std::string& internal_state_chunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_internal_state_chunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_internal_state_chunk();
  PROTOBUF_NODISCARD std::string* release_internal_state_chunk();
  void set_allocated_internal_state_chunk(std::string* internal_state_chunk);
  private:
  const std::string& _internal_internal_state_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_internal_state_chunk(const std::string& value);
  std::string* _internal_mutable_internal_state_chunk();
  public:

  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetInternalStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr internal_state_chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};
// -------------------------------------------------------------------

class GetLatestMapInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetLatestMapInfoRequest) */ {
 public:
  inline GetLatestMapInfoRequest() : GetLatestMapInfoRequest(nullptr) {}
  ~GetLatestMapInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetLatestMapInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLatestMapInfoRequest(const GetLatestMapInfoRequest& from);
  GetLatestMapInfoRequest(GetLatestMapInfoRequest&& from) noexcept
    : GetLatestMapInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetLatestMapInfoRequest& operator=(const GetLatestMapInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLatestMapInfoRequest& operator=(GetLatestMapInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLatestMapInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLatestMapInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetLatestMapInfoRequest*>(
               &_GetLatestMapInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetLatestMapInfoRequest& a, GetLatestMapInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLatestMapInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLatestMapInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLatestMapInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLatestMapInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLatestMapInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLatestMapInfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLatestMapInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.slam.v1.GetLatestMapInfoRequest";
  }
  protected:
  explicit GetLatestMapInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetLatestMapInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};
// -------------------------------------------------------------------

class GetLatestMapInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.slam.v1.GetLatestMapInfoResponse) */ {
 public:
  inline GetLatestMapInfoResponse() : GetLatestMapInfoResponse(nullptr) {}
  ~GetLatestMapInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetLatestMapInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetLatestMapInfoResponse(const GetLatestMapInfoResponse& from);
  GetLatestMapInfoResponse(GetLatestMapInfoResponse&& from) noexcept
    : GetLatestMapInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetLatestMapInfoResponse& operator=(const GetLatestMapInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLatestMapInfoResponse& operator=(GetLatestMapInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLatestMapInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLatestMapInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetLatestMapInfoResponse*>(
               &_GetLatestMapInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetLatestMapInfoResponse& a, GetLatestMapInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLatestMapInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLatestMapInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLatestMapInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetLatestMapInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetLatestMapInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetLatestMapInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLatestMapInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.slam.v1.GetLatestMapInfoResponse";
  }
  protected:
  explicit GetLatestMapInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastMapUpdateFieldNumber = 1,
  };
  // .google.protobuf.Timestamp last_map_update = 1 [json_name = "lastMapUpdate"];
  bool has_last_map_update() const;
  private:
  bool _internal_has_last_map_update() const;
  public:
  void clear_last_map_update();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_map_update() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_map_update();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_map_update();
  void set_allocated_last_map_update(::PROTOBUF_NAMESPACE_ID::Timestamp* last_map_update);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_map_update() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_map_update();
  public:
  void unsafe_arena_set_allocated_last_map_update(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_map_update);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_map_update();

  // @@protoc_insertion_point(class_scope:viam.service.slam.v1.GetLatestMapInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* last_map_update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fslam_2fv1_2fslam_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetPositionRequest

// string name = 1 [json_name = "name"];
inline void GetPositionRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetPositionRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPositionRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPositionRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetPositionRequest.name)
}
inline std::string* GetPositionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPositionRequest.name)
  return _s;
}
inline const std::string& GetPositionRequest::_internal_name() const {
  return name_.Get();
}
inline void GetPositionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPositionRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPositionRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetPositionRequest.name)
  return name_.Release();
}
inline void GetPositionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetPositionRequest.name)
}

// -------------------------------------------------------------------

// GetPositionResponse

// .viam.common.v1.Pose pose = 1 [json_name = "pose"];
inline bool GetPositionResponse::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool GetPositionResponse::has_pose() const {
  return _internal_has_pose();
}
inline const ::viam::common::v1::Pose& GetPositionResponse::_internal_pose() const {
  const ::viam::common::v1::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Pose&>(
      ::viam::common::v1::_Pose_default_instance_);
}
inline const ::viam::common::v1::Pose& GetPositionResponse::pose() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPositionResponse.pose)
  return _internal_pose();
}
inline void GetPositionResponse::unsafe_arena_set_allocated_pose(
    ::viam::common::v1::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.slam.v1.GetPositionResponse.pose)
}
inline ::viam::common::v1::Pose* GetPositionResponse::release_pose() {
  
  ::viam::common::v1::Pose* temp = pose_;
  pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Pose* GetPositionResponse::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetPositionResponse.pose)
  
  ::viam::common::v1::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Pose* GetPositionResponse::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Pose>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::viam::common::v1::Pose* GetPositionResponse::mutable_pose() {
  ::viam::common::v1::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPositionResponse.pose)
  return _msg;
}
inline void GetPositionResponse::set_allocated_pose(::viam::common::v1::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetPositionResponse.pose)
}

// string component_reference = 2 [json_name = "componentReference"];
inline void GetPositionResponse::clear_component_reference() {
  component_reference_.ClearToEmpty();
}
inline const std::string& GetPositionResponse::component_reference() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPositionResponse.component_reference)
  return _internal_component_reference();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPositionResponse::set_component_reference(ArgT0&& arg0, ArgT... args) {
 
 component_reference_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetPositionResponse.component_reference)
}
inline std::string* GetPositionResponse::mutable_component_reference() {
  std::string* _s = _internal_mutable_component_reference();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPositionResponse.component_reference)
  return _s;
}
inline const std::string& GetPositionResponse::_internal_component_reference() const {
  return component_reference_.Get();
}
inline void GetPositionResponse::_internal_set_component_reference(const std::string& value) {
  
  component_reference_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPositionResponse::_internal_mutable_component_reference() {
  
  return component_reference_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPositionResponse::release_component_reference() {
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetPositionResponse.component_reference)
  return component_reference_.Release();
}
inline void GetPositionResponse::set_allocated_component_reference(std::string* component_reference) {
  if (component_reference != nullptr) {
    
  } else {
    
  }
  component_reference_.SetAllocated(component_reference, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_reference_.IsDefault()) {
    component_reference_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetPositionResponse.component_reference)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetPositionResponse::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetPositionResponse::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetPositionResponse::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetPositionResponse::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPositionResponse.extra)
  return _internal_extra();
}
inline void GetPositionResponse::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.slam.v1.GetPositionResponse.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPositionResponse::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPositionResponse::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetPositionResponse.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPositionResponse::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPositionResponse::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPositionResponse.extra)
  return _msg;
}
inline void GetPositionResponse::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetPositionResponse.extra)
}

// -------------------------------------------------------------------

// GetPointCloudMapRequest

// string name = 1 [json_name = "name"];
inline void GetPointCloudMapRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetPointCloudMapRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPointCloudMapRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPointCloudMapRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetPointCloudMapRequest.name)
}
inline std::string* GetPointCloudMapRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPointCloudMapRequest.name)
  return _s;
}
inline const std::string& GetPointCloudMapRequest::_internal_name() const {
  return name_.Get();
}
inline void GetPointCloudMapRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPointCloudMapRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPointCloudMapRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetPointCloudMapRequest.name)
  return name_.Release();
}
inline void GetPointCloudMapRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetPointCloudMapRequest.name)
}

// -------------------------------------------------------------------

// GetPointCloudMapResponse

// bytes point_cloud_pcd_chunk = 1 [json_name = "pointCloudPcdChunk"];
inline void GetPointCloudMapResponse::clear_point_cloud_pcd_chunk() {
  point_cloud_pcd_chunk_.ClearToEmpty();
}
inline const std::string& GetPointCloudMapResponse::point_cloud_pcd_chunk() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetPointCloudMapResponse.point_cloud_pcd_chunk)
  return _internal_point_cloud_pcd_chunk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPointCloudMapResponse::set_point_cloud_pcd_chunk(ArgT0&& arg0, ArgT... args) {
 
 point_cloud_pcd_chunk_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetPointCloudMapResponse.point_cloud_pcd_chunk)
}
inline std::string* GetPointCloudMapResponse::mutable_point_cloud_pcd_chunk() {
  std::string* _s = _internal_mutable_point_cloud_pcd_chunk();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetPointCloudMapResponse.point_cloud_pcd_chunk)
  return _s;
}
inline const std::string& GetPointCloudMapResponse::_internal_point_cloud_pcd_chunk() const {
  return point_cloud_pcd_chunk_.Get();
}
inline void GetPointCloudMapResponse::_internal_set_point_cloud_pcd_chunk(const std::string& value) {
  
  point_cloud_pcd_chunk_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPointCloudMapResponse::_internal_mutable_point_cloud_pcd_chunk() {
  
  return point_cloud_pcd_chunk_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPointCloudMapResponse::release_point_cloud_pcd_chunk() {
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetPointCloudMapResponse.point_cloud_pcd_chunk)
  return point_cloud_pcd_chunk_.Release();
}
inline void GetPointCloudMapResponse::set_allocated_point_cloud_pcd_chunk(std::string* point_cloud_pcd_chunk) {
  if (point_cloud_pcd_chunk != nullptr) {
    
  } else {
    
  }
  point_cloud_pcd_chunk_.SetAllocated(point_cloud_pcd_chunk, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (point_cloud_pcd_chunk_.IsDefault()) {
    point_cloud_pcd_chunk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetPointCloudMapResponse.point_cloud_pcd_chunk)
}

// -------------------------------------------------------------------

// GetInternalStateRequest

// string name = 1 [json_name = "name"];
inline void GetInternalStateRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetInternalStateRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetInternalStateRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInternalStateRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetInternalStateRequest.name)
}
inline std::string* GetInternalStateRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetInternalStateRequest.name)
  return _s;
}
inline const std::string& GetInternalStateRequest::_internal_name() const {
  return name_.Get();
}
inline void GetInternalStateRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetInternalStateRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetInternalStateRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetInternalStateRequest.name)
  return name_.Release();
}
inline void GetInternalStateRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetInternalStateRequest.name)
}

// -------------------------------------------------------------------

// GetInternalStateResponse

// bytes internal_state_chunk = 1 [json_name = "internalStateChunk"];
inline void GetInternalStateResponse::clear_internal_state_chunk() {
  internal_state_chunk_.ClearToEmpty();
}
inline const std::string& GetInternalStateResponse::internal_state_chunk() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetInternalStateResponse.internal_state_chunk)
  return _internal_internal_state_chunk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInternalStateResponse::set_internal_state_chunk(ArgT0&& arg0, ArgT... args) {
 
 internal_state_chunk_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetInternalStateResponse.internal_state_chunk)
}
inline std::string* GetInternalStateResponse::mutable_internal_state_chunk() {
  std::string* _s = _internal_mutable_internal_state_chunk();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetInternalStateResponse.internal_state_chunk)
  return _s;
}
inline const std::string& GetInternalStateResponse::_internal_internal_state_chunk() const {
  return internal_state_chunk_.Get();
}
inline void GetInternalStateResponse::_internal_set_internal_state_chunk(const std::string& value) {
  
  internal_state_chunk_.Set(value, GetArenaForAllocation());
}
inline std::string* GetInternalStateResponse::_internal_mutable_internal_state_chunk() {
  
  return internal_state_chunk_.Mutable(GetArenaForAllocation());
}
inline std::string* GetInternalStateResponse::release_internal_state_chunk() {
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetInternalStateResponse.internal_state_chunk)
  return internal_state_chunk_.Release();
}
inline void GetInternalStateResponse::set_allocated_internal_state_chunk(std::string* internal_state_chunk) {
  if (internal_state_chunk != nullptr) {
    
  } else {
    
  }
  internal_state_chunk_.SetAllocated(internal_state_chunk, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (internal_state_chunk_.IsDefault()) {
    internal_state_chunk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetInternalStateResponse.internal_state_chunk)
}

// -------------------------------------------------------------------

// GetLatestMapInfoRequest

// string name = 1 [json_name = "name"];
inline void GetLatestMapInfoRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetLatestMapInfoRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetLatestMapInfoRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetLatestMapInfoRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.slam.v1.GetLatestMapInfoRequest.name)
}
inline std::string* GetLatestMapInfoRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetLatestMapInfoRequest.name)
  return _s;
}
inline const std::string& GetLatestMapInfoRequest::_internal_name() const {
  return name_.Get();
}
inline void GetLatestMapInfoRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetLatestMapInfoRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetLatestMapInfoRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetLatestMapInfoRequest.name)
  return name_.Release();
}
inline void GetLatestMapInfoRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetLatestMapInfoRequest.name)
}

// -------------------------------------------------------------------

// GetLatestMapInfoResponse

// .google.protobuf.Timestamp last_map_update = 1 [json_name = "lastMapUpdate"];
inline bool GetLatestMapInfoResponse::_internal_has_last_map_update() const {
  return this != internal_default_instance() && last_map_update_ != nullptr;
}
inline bool GetLatestMapInfoResponse::has_last_map_update() const {
  return _internal_has_last_map_update();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetLatestMapInfoResponse::_internal_last_map_update() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = last_map_update_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetLatestMapInfoResponse::last_map_update() const {
  // @@protoc_insertion_point(field_get:viam.service.slam.v1.GetLatestMapInfoResponse.last_map_update)
  return _internal_last_map_update();
}
inline void GetLatestMapInfoResponse::unsafe_arena_set_allocated_last_map_update(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_map_update) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_map_update_);
  }
  last_map_update_ = last_map_update;
  if (last_map_update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.slam.v1.GetLatestMapInfoResponse.last_map_update)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetLatestMapInfoResponse::release_last_map_update() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_map_update_;
  last_map_update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetLatestMapInfoResponse::unsafe_arena_release_last_map_update() {
  // @@protoc_insertion_point(field_release:viam.service.slam.v1.GetLatestMapInfoResponse.last_map_update)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_map_update_;
  last_map_update_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetLatestMapInfoResponse::_internal_mutable_last_map_update() {
  
  if (last_map_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    last_map_update_ = p;
  }
  return last_map_update_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetLatestMapInfoResponse::mutable_last_map_update() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_map_update();
  // @@protoc_insertion_point(field_mutable:viam.service.slam.v1.GetLatestMapInfoResponse.last_map_update)
  return _msg;
}
inline void GetLatestMapInfoResponse::set_allocated_last_map_update(::PROTOBUF_NAMESPACE_ID::Timestamp* last_map_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_map_update_);
  }
  if (last_map_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_map_update));
    if (message_arena != submessage_arena) {
      last_map_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_map_update, submessage_arena);
    }
    
  } else {
    
  }
  last_map_update_ = last_map_update;
  // @@protoc_insertion_point(field_set_allocated:viam.service.slam.v1.GetLatestMapInfoResponse.last_map_update)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace slam
}  // namespace service
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2fslam_2fv1_2fslam_2eproto
