// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/shell/v1/shell.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2fshell_2fv1_2fshell_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_service_2fshell_2fv1_2fshell_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include "google/protobuf/struct.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_service_2fshell_2fv1_2fshell_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2fshell_2fv1_2fshell_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_service_2fshell_2fv1_2fshell_2eproto;
namespace viam {
namespace service {
namespace shell {
namespace v1 {
class CopyFilesFromMachineRequest;
struct CopyFilesFromMachineRequestDefaultTypeInternal;
extern CopyFilesFromMachineRequestDefaultTypeInternal _CopyFilesFromMachineRequest_default_instance_;
class CopyFilesFromMachineRequestMetadata;
struct CopyFilesFromMachineRequestMetadataDefaultTypeInternal;
extern CopyFilesFromMachineRequestMetadataDefaultTypeInternal _CopyFilesFromMachineRequestMetadata_default_instance_;
class CopyFilesFromMachineResponse;
struct CopyFilesFromMachineResponseDefaultTypeInternal;
extern CopyFilesFromMachineResponseDefaultTypeInternal _CopyFilesFromMachineResponse_default_instance_;
class CopyFilesFromMachineResponseMetadata;
struct CopyFilesFromMachineResponseMetadataDefaultTypeInternal;
extern CopyFilesFromMachineResponseMetadataDefaultTypeInternal _CopyFilesFromMachineResponseMetadata_default_instance_;
class CopyFilesToMachineRequest;
struct CopyFilesToMachineRequestDefaultTypeInternal;
extern CopyFilesToMachineRequestDefaultTypeInternal _CopyFilesToMachineRequest_default_instance_;
class CopyFilesToMachineRequestMetadata;
struct CopyFilesToMachineRequestMetadataDefaultTypeInternal;
extern CopyFilesToMachineRequestMetadataDefaultTypeInternal _CopyFilesToMachineRequestMetadata_default_instance_;
class CopyFilesToMachineResponse;
struct CopyFilesToMachineResponseDefaultTypeInternal;
extern CopyFilesToMachineResponseDefaultTypeInternal _CopyFilesToMachineResponse_default_instance_;
class FileData;
struct FileDataDefaultTypeInternal;
extern FileDataDefaultTypeInternal _FileData_default_instance_;
class ShellRequest;
struct ShellRequestDefaultTypeInternal;
extern ShellRequestDefaultTypeInternal _ShellRequest_default_instance_;
class ShellResponse;
struct ShellResponseDefaultTypeInternal;
extern ShellResponseDefaultTypeInternal _ShellResponse_default_instance_;
}  // namespace v1
}  // namespace shell
}  // namespace service
}  // namespace viam
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace viam {
namespace service {
namespace shell {
namespace v1 {
enum CopyFilesSourceType : int {
  COPY_FILES_SOURCE_TYPE_UNSPECIFIED = 0,
  COPY_FILES_SOURCE_TYPE_SINGLE_FILE = 1,
  COPY_FILES_SOURCE_TYPE_SINGLE_DIRECTORY = 2,
  COPY_FILES_SOURCE_TYPE_MULTIPLE_FILES = 3,
  CopyFilesSourceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CopyFilesSourceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CopyFilesSourceType_IsValid(int value);
extern const uint32_t CopyFilesSourceType_internal_data_[];
constexpr CopyFilesSourceType CopyFilesSourceType_MIN = static_cast<CopyFilesSourceType>(0);
constexpr CopyFilesSourceType CopyFilesSourceType_MAX = static_cast<CopyFilesSourceType>(3);
constexpr int CopyFilesSourceType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
CopyFilesSourceType_descriptor();
template <typename T>
const std::string& CopyFilesSourceType_Name(T value) {
  static_assert(std::is_same<T, CopyFilesSourceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CopyFilesSourceType_Name().");
  return CopyFilesSourceType_Name(static_cast<CopyFilesSourceType>(value));
}
template <>
inline const std::string& CopyFilesSourceType_Name(CopyFilesSourceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CopyFilesSourceType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool CopyFilesSourceType_Parse(absl::string_view name, CopyFilesSourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CopyFilesSourceType>(
      CopyFilesSourceType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ShellResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.shell.v1.ShellResponse) */ {
 public:
  inline ShellResponse() : ShellResponse(nullptr) {}
  ~ShellResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ShellResponse(::google::protobuf::internal::ConstantInitialized);

  inline ShellResponse(const ShellResponse& from)
      : ShellResponse(nullptr, from) {}
  ShellResponse(ShellResponse&& from) noexcept
    : ShellResponse() {
    *this = ::std::move(from);
  }

  inline ShellResponse& operator=(const ShellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellResponse& operator=(ShellResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShellResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShellResponse* internal_default_instance() {
    return reinterpret_cast<const ShellResponse*>(
               &_ShellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ShellResponse& a, ShellResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShellResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShellResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShellResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShellResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ShellResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ShellResponse& from) {
    ShellResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ShellResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.shell.v1.ShellResponse";
  }
  protected:
  explicit ShellResponse(::google::protobuf::Arena* arena);
  ShellResponse(::google::protobuf::Arena* arena, const ShellResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataOutFieldNumber = 1,
    kDataErrFieldNumber = 2,
    kEofFieldNumber = 3,
  };
  // string data_out = 1 [json_name = "dataOut"];
  void clear_data_out() ;
  const std::string& data_out() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_out(Arg_&& arg, Args_... args);
  std::string* mutable_data_out();
  PROTOBUF_NODISCARD std::string* release_data_out();
  void set_allocated_data_out(std::string* value);

  private:
  const std::string& _internal_data_out() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_out(
      const std::string& value);
  std::string* _internal_mutable_data_out();

  public:
  // string data_err = 2 [json_name = "dataErr"];
  void clear_data_err() ;
  const std::string& data_err() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_err(Arg_&& arg, Args_... args);
  std::string* mutable_data_err();
  PROTOBUF_NODISCARD std::string* release_data_err();
  void set_allocated_data_err(std::string* value);

  private:
  const std::string& _internal_data_err() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_err(
      const std::string& value);
  std::string* _internal_mutable_data_err();

  public:
  // bool eof = 3 [json_name = "eof"];
  void clear_eof() ;
  bool eof() const;
  void set_eof(bool value);

  private:
  bool _internal_eof() const;
  void _internal_set_eof(bool value);

  public:
  // @@protoc_insertion_point(class_scope:viam.service.shell.v1.ShellResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr data_out_;
    ::google::protobuf::internal::ArenaStringPtr data_err_;
    bool eof_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fshell_2fv1_2fshell_2eproto;
};// -------------------------------------------------------------------

class CopyFilesToMachineResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.shell.v1.CopyFilesToMachineResponse) */ {
 public:
  inline CopyFilesToMachineResponse() : CopyFilesToMachineResponse(nullptr) {}
  ~CopyFilesToMachineResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CopyFilesToMachineResponse(::google::protobuf::internal::ConstantInitialized);

  inline CopyFilesToMachineResponse(const CopyFilesToMachineResponse& from)
      : CopyFilesToMachineResponse(nullptr, from) {}
  CopyFilesToMachineResponse(CopyFilesToMachineResponse&& from) noexcept
    : CopyFilesToMachineResponse() {
    *this = ::std::move(from);
  }

  inline CopyFilesToMachineResponse& operator=(const CopyFilesToMachineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyFilesToMachineResponse& operator=(CopyFilesToMachineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CopyFilesToMachineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CopyFilesToMachineResponse* internal_default_instance() {
    return reinterpret_cast<const CopyFilesToMachineResponse*>(
               &_CopyFilesToMachineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CopyFilesToMachineResponse& a, CopyFilesToMachineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyFilesToMachineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopyFilesToMachineResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CopyFilesToMachineResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CopyFilesToMachineResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CopyFilesToMachineResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CopyFilesToMachineResponse& from) {
    CopyFilesToMachineResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CopyFilesToMachineResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.shell.v1.CopyFilesToMachineResponse";
  }
  protected:
  explicit CopyFilesToMachineResponse(::google::protobuf::Arena* arena);
  CopyFilesToMachineResponse(::google::protobuf::Arena* arena, const CopyFilesToMachineResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckLastFileFieldNumber = 1,
  };
  // bool ack_last_file = 1 [json_name = "ackLastFile"];
  void clear_ack_last_file() ;
  bool ack_last_file() const;
  void set_ack_last_file(bool value);

  private:
  bool _internal_ack_last_file() const;
  void _internal_set_ack_last_file(bool value);

  public:
  // @@protoc_insertion_point(class_scope:viam.service.shell.v1.CopyFilesToMachineResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool ack_last_file_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fshell_2fv1_2fshell_2eproto;
};// -------------------------------------------------------------------

class CopyFilesFromMachineResponseMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.shell.v1.CopyFilesFromMachineResponseMetadata) */ {
 public:
  inline CopyFilesFromMachineResponseMetadata() : CopyFilesFromMachineResponseMetadata(nullptr) {}
  ~CopyFilesFromMachineResponseMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CopyFilesFromMachineResponseMetadata(::google::protobuf::internal::ConstantInitialized);

  inline CopyFilesFromMachineResponseMetadata(const CopyFilesFromMachineResponseMetadata& from)
      : CopyFilesFromMachineResponseMetadata(nullptr, from) {}
  CopyFilesFromMachineResponseMetadata(CopyFilesFromMachineResponseMetadata&& from) noexcept
    : CopyFilesFromMachineResponseMetadata() {
    *this = ::std::move(from);
  }

  inline CopyFilesFromMachineResponseMetadata& operator=(const CopyFilesFromMachineResponseMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyFilesFromMachineResponseMetadata& operator=(CopyFilesFromMachineResponseMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CopyFilesFromMachineResponseMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CopyFilesFromMachineResponseMetadata* internal_default_instance() {
    return reinterpret_cast<const CopyFilesFromMachineResponseMetadata*>(
               &_CopyFilesFromMachineResponseMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CopyFilesFromMachineResponseMetadata& a, CopyFilesFromMachineResponseMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyFilesFromMachineResponseMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopyFilesFromMachineResponseMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CopyFilesFromMachineResponseMetadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CopyFilesFromMachineResponseMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CopyFilesFromMachineResponseMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CopyFilesFromMachineResponseMetadata& from) {
    CopyFilesFromMachineResponseMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CopyFilesFromMachineResponseMetadata* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.shell.v1.CopyFilesFromMachineResponseMetadata";
  }
  protected:
  explicit CopyFilesFromMachineResponseMetadata(::google::protobuf::Arena* arena);
  CopyFilesFromMachineResponseMetadata(::google::protobuf::Arena* arena, const CopyFilesFromMachineResponseMetadata& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceTypeFieldNumber = 1,
  };
  // .viam.service.shell.v1.CopyFilesSourceType source_type = 1 [json_name = "sourceType"];
  void clear_source_type() ;
  ::viam::service::shell::v1::CopyFilesSourceType source_type() const;
  void set_source_type(::viam::service::shell::v1::CopyFilesSourceType value);

  private:
  ::viam::service::shell::v1::CopyFilesSourceType _internal_source_type() const;
  void _internal_set_source_type(::viam::service::shell::v1::CopyFilesSourceType value);

  public:
  // @@protoc_insertion_point(class_scope:viam.service.shell.v1.CopyFilesFromMachineResponseMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int source_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fshell_2fv1_2fshell_2eproto;
};// -------------------------------------------------------------------

class ShellRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.shell.v1.ShellRequest) */ {
 public:
  inline ShellRequest() : ShellRequest(nullptr) {}
  ~ShellRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ShellRequest(::google::protobuf::internal::ConstantInitialized);

  inline ShellRequest(const ShellRequest& from)
      : ShellRequest(nullptr, from) {}
  ShellRequest(ShellRequest&& from) noexcept
    : ShellRequest() {
    *this = ::std::move(from);
  }

  inline ShellRequest& operator=(const ShellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellRequest& operator=(ShellRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShellRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShellRequest* internal_default_instance() {
    return reinterpret_cast<const ShellRequest*>(
               &_ShellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ShellRequest& a, ShellRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShellRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShellRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShellRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShellRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ShellRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ShellRequest& from) {
    ShellRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ShellRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.shell.v1.ShellRequest";
  }
  protected:
  explicit ShellRequest(::google::protobuf::Arena* arena);
  ShellRequest(::google::protobuf::Arena* arena, const ShellRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataInFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string data_in = 2 [json_name = "dataIn"];
  void clear_data_in() ;
  const std::string& data_in() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_in(Arg_&& arg, Args_... args);
  std::string* mutable_data_in();
  PROTOBUF_NODISCARD std::string* release_data_in();
  void set_allocated_data_in(std::string* value);

  private:
  const std::string& _internal_data_in() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_in(
      const std::string& value);
  std::string* _internal_mutable_data_in();

  public:
  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  void clear_extra() ;
  const ::google::protobuf::Struct& extra() const;
  PROTOBUF_NODISCARD ::google::protobuf::Struct* release_extra();
  ::google::protobuf::Struct* mutable_extra();
  void set_allocated_extra(::google::protobuf::Struct* value);
  void unsafe_arena_set_allocated_extra(::google::protobuf::Struct* value);
  ::google::protobuf::Struct* unsafe_arena_release_extra();

  private:
  const ::google::protobuf::Struct& _internal_extra() const;
  ::google::protobuf::Struct* _internal_mutable_extra();

  public:
  // @@protoc_insertion_point(class_scope:viam.service.shell.v1.ShellRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      54, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr data_in_;
    ::google::protobuf::Struct* extra_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fshell_2fv1_2fshell_2eproto;
};// -------------------------------------------------------------------

class FileData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.shell.v1.FileData) */ {
 public:
  inline FileData() : FileData(nullptr) {}
  ~FileData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileData(::google::protobuf::internal::ConstantInitialized);

  inline FileData(const FileData& from)
      : FileData(nullptr, from) {}
  FileData(FileData&& from) noexcept
    : FileData() {
    *this = ::std::move(from);
  }

  inline FileData& operator=(const FileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileData& operator=(FileData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileData* internal_default_instance() {
    return reinterpret_cast<const FileData*>(
               &_FileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileData& a, FileData& b) {
    a.Swap(&b);
  }
  inline void Swap(FileData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileData& from) {
    FileData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.shell.v1.FileData";
  }
  protected:
  explicit FileData(::google::protobuf::Arena* arena);
  FileData(::google::protobuf::Arena* arena, const FileData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDataFieldNumber = 4,
    kModTimeFieldNumber = 6,
    kSizeFieldNumber = 2,
    kIsDirFieldNumber = 3,
    kEofFieldNumber = 5,
    kModeFieldNumber = 7,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bytes data = 4 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* value);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // optional .google.protobuf.Timestamp mod_time = 6 [json_name = "modTime"];
  bool has_mod_time() const;
  void clear_mod_time() ;
  const ::google::protobuf::Timestamp& mod_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_mod_time();
  ::google::protobuf::Timestamp* mutable_mod_time();
  void set_allocated_mod_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_mod_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_mod_time();

  private:
  const ::google::protobuf::Timestamp& _internal_mod_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_mod_time();

  public:
  // int64 size = 2 [json_name = "size"];
  void clear_size() ;
  ::int64_t size() const;
  void set_size(::int64_t value);

  private:
  ::int64_t _internal_size() const;
  void _internal_set_size(::int64_t value);

  public:
  // bool is_dir = 3 [json_name = "isDir"];
  void clear_is_dir() ;
  bool is_dir() const;
  void set_is_dir(bool value);

  private:
  bool _internal_is_dir() const;
  void _internal_set_is_dir(bool value);

  public:
  // bool eof = 5 [json_name = "eof"];
  void clear_eof() ;
  bool eof() const;
  void set_eof(bool value);

  private:
  bool _internal_eof() const;
  void _internal_set_eof(bool value);

  public:
  // optional uint32 mode = 7 [json_name = "mode"];
  bool has_mode() const;
  void clear_mode() ;
  ::uint32_t mode() const;
  void set_mode(::uint32_t value);

  private:
  ::uint32_t _internal_mode() const;
  void _internal_set_mode(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:viam.service.shell.v1.FileData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      43, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::Timestamp* mod_time_;
    ::int64_t size_;
    bool is_dir_;
    bool eof_;
    ::uint32_t mode_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fshell_2fv1_2fshell_2eproto;
};// -------------------------------------------------------------------

class CopyFilesToMachineRequestMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.shell.v1.CopyFilesToMachineRequestMetadata) */ {
 public:
  inline CopyFilesToMachineRequestMetadata() : CopyFilesToMachineRequestMetadata(nullptr) {}
  ~CopyFilesToMachineRequestMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CopyFilesToMachineRequestMetadata(::google::protobuf::internal::ConstantInitialized);

  inline CopyFilesToMachineRequestMetadata(const CopyFilesToMachineRequestMetadata& from)
      : CopyFilesToMachineRequestMetadata(nullptr, from) {}
  CopyFilesToMachineRequestMetadata(CopyFilesToMachineRequestMetadata&& from) noexcept
    : CopyFilesToMachineRequestMetadata() {
    *this = ::std::move(from);
  }

  inline CopyFilesToMachineRequestMetadata& operator=(const CopyFilesToMachineRequestMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyFilesToMachineRequestMetadata& operator=(CopyFilesToMachineRequestMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CopyFilesToMachineRequestMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CopyFilesToMachineRequestMetadata* internal_default_instance() {
    return reinterpret_cast<const CopyFilesToMachineRequestMetadata*>(
               &_CopyFilesToMachineRequestMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CopyFilesToMachineRequestMetadata& a, CopyFilesToMachineRequestMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyFilesToMachineRequestMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopyFilesToMachineRequestMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CopyFilesToMachineRequestMetadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CopyFilesToMachineRequestMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CopyFilesToMachineRequestMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CopyFilesToMachineRequestMetadata& from) {
    CopyFilesToMachineRequestMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CopyFilesToMachineRequestMetadata* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.shell.v1.CopyFilesToMachineRequestMetadata";
  }
  protected:
  explicit CopyFilesToMachineRequestMetadata(::google::protobuf::Arena* arena);
  CopyFilesToMachineRequestMetadata(::google::protobuf::Arena* arena, const CopyFilesToMachineRequestMetadata& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDestinationFieldNumber = 3,
    kExtraFieldNumber = 99,
    kSourceTypeFieldNumber = 2,
    kPreserveFieldNumber = 4,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string destination = 3 [json_name = "destination"];
  void clear_destination() ;
  const std::string& destination() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_destination(Arg_&& arg, Args_... args);
  std::string* mutable_destination();
  PROTOBUF_NODISCARD std::string* release_destination();
  void set_allocated_destination(std::string* value);

  private:
  const std::string& _internal_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination(
      const std::string& value);
  std::string* _internal_mutable_destination();

  public:
  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  void clear_extra() ;
  const ::google::protobuf::Struct& extra() const;
  PROTOBUF_NODISCARD ::google::protobuf::Struct* release_extra();
  ::google::protobuf::Struct* mutable_extra();
  void set_allocated_extra(::google::protobuf::Struct* value);
  void unsafe_arena_set_allocated_extra(::google::protobuf::Struct* value);
  ::google::protobuf::Struct* unsafe_arena_release_extra();

  private:
  const ::google::protobuf::Struct& _internal_extra() const;
  ::google::protobuf::Struct* _internal_mutable_extra();

  public:
  // .viam.service.shell.v1.CopyFilesSourceType source_type = 2 [json_name = "sourceType"];
  void clear_source_type() ;
  ::viam::service::shell::v1::CopyFilesSourceType source_type() const;
  void set_source_type(::viam::service::shell::v1::CopyFilesSourceType value);

  private:
  ::viam::service::shell::v1::CopyFilesSourceType _internal_source_type() const;
  void _internal_set_source_type(::viam::service::shell::v1::CopyFilesSourceType value);

  public:
  // bool preserve = 4 [json_name = "preserve"];
  void clear_preserve() ;
  bool preserve() const;
  void set_preserve(bool value);

  private:
  bool _internal_preserve() const;
  void _internal_set_preserve(bool value);

  public:
  // @@protoc_insertion_point(class_scope:viam.service.shell.v1.CopyFilesToMachineRequestMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      79, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr destination_;
    ::google::protobuf::Struct* extra_;
    int source_type_;
    bool preserve_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fshell_2fv1_2fshell_2eproto;
};// -------------------------------------------------------------------

class CopyFilesFromMachineRequestMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata) */ {
 public:
  inline CopyFilesFromMachineRequestMetadata() : CopyFilesFromMachineRequestMetadata(nullptr) {}
  ~CopyFilesFromMachineRequestMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CopyFilesFromMachineRequestMetadata(::google::protobuf::internal::ConstantInitialized);

  inline CopyFilesFromMachineRequestMetadata(const CopyFilesFromMachineRequestMetadata& from)
      : CopyFilesFromMachineRequestMetadata(nullptr, from) {}
  CopyFilesFromMachineRequestMetadata(CopyFilesFromMachineRequestMetadata&& from) noexcept
    : CopyFilesFromMachineRequestMetadata() {
    *this = ::std::move(from);
  }

  inline CopyFilesFromMachineRequestMetadata& operator=(const CopyFilesFromMachineRequestMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyFilesFromMachineRequestMetadata& operator=(CopyFilesFromMachineRequestMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CopyFilesFromMachineRequestMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CopyFilesFromMachineRequestMetadata* internal_default_instance() {
    return reinterpret_cast<const CopyFilesFromMachineRequestMetadata*>(
               &_CopyFilesFromMachineRequestMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CopyFilesFromMachineRequestMetadata& a, CopyFilesFromMachineRequestMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyFilesFromMachineRequestMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopyFilesFromMachineRequestMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CopyFilesFromMachineRequestMetadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CopyFilesFromMachineRequestMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CopyFilesFromMachineRequestMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CopyFilesFromMachineRequestMetadata& from) {
    CopyFilesFromMachineRequestMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CopyFilesFromMachineRequestMetadata* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.shell.v1.CopyFilesFromMachineRequestMetadata";
  }
  protected:
  explicit CopyFilesFromMachineRequestMetadata(::google::protobuf::Arena* arena);
  CopyFilesFromMachineRequestMetadata(::google::protobuf::Arena* arena, const CopyFilesFromMachineRequestMetadata& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 2,
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
    kAllowRecursionFieldNumber = 3,
    kPreserveFieldNumber = 4,
  };
  // repeated string paths = 2 [json_name = "paths"];
  int paths_size() const;
  private:
  int _internal_paths_size() const;

  public:
  void clear_paths() ;
  const std::string& paths(int index) const;
  std::string* mutable_paths(int index);
  void set_paths(int index, const std::string& value);
  void set_paths(int index, std::string&& value);
  void set_paths(int index, const char* value);
  void set_paths(int index, const char* value, std::size_t size);
  void set_paths(int index, absl::string_view value);
  std::string* add_paths();
  void add_paths(const std::string& value);
  void add_paths(std::string&& value);
  void add_paths(const char* value);
  void add_paths(const char* value, std::size_t size);
  void add_paths(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& paths() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_paths();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_paths() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_paths();

  public:
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  void clear_extra() ;
  const ::google::protobuf::Struct& extra() const;
  PROTOBUF_NODISCARD ::google::protobuf::Struct* release_extra();
  ::google::protobuf::Struct* mutable_extra();
  void set_allocated_extra(::google::protobuf::Struct* value);
  void unsafe_arena_set_allocated_extra(::google::protobuf::Struct* value);
  ::google::protobuf::Struct* unsafe_arena_release_extra();

  private:
  const ::google::protobuf::Struct& _internal_extra() const;
  ::google::protobuf::Struct* _internal_mutable_extra();

  public:
  // bool allow_recursion = 3 [json_name = "allowRecursion"];
  void clear_allow_recursion() ;
  bool allow_recursion() const;
  void set_allow_recursion(bool value);

  private:
  bool _internal_allow_recursion() const;
  void _internal_set_allow_recursion(bool value);

  public:
  // bool preserve = 4 [json_name = "preserve"];
  void clear_preserve() ;
  bool preserve() const;
  void set_preserve(bool value);

  private:
  bool _internal_preserve() const;
  void _internal_set_preserve(bool value);

  public:
  // @@protoc_insertion_point(class_scope:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 1,
      75, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> paths_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::Struct* extra_;
    bool allow_recursion_;
    bool preserve_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fshell_2fv1_2fshell_2eproto;
};// -------------------------------------------------------------------

class CopyFilesToMachineRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.shell.v1.CopyFilesToMachineRequest) */ {
 public:
  inline CopyFilesToMachineRequest() : CopyFilesToMachineRequest(nullptr) {}
  ~CopyFilesToMachineRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CopyFilesToMachineRequest(::google::protobuf::internal::ConstantInitialized);

  inline CopyFilesToMachineRequest(const CopyFilesToMachineRequest& from)
      : CopyFilesToMachineRequest(nullptr, from) {}
  CopyFilesToMachineRequest(CopyFilesToMachineRequest&& from) noexcept
    : CopyFilesToMachineRequest() {
    *this = ::std::move(from);
  }

  inline CopyFilesToMachineRequest& operator=(const CopyFilesToMachineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyFilesToMachineRequest& operator=(CopyFilesToMachineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CopyFilesToMachineRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kMetadata = 1,
    kFileData = 2,
    REQUEST_NOT_SET = 0,
  };

  static inline const CopyFilesToMachineRequest* internal_default_instance() {
    return reinterpret_cast<const CopyFilesToMachineRequest*>(
               &_CopyFilesToMachineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CopyFilesToMachineRequest& a, CopyFilesToMachineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyFilesToMachineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopyFilesToMachineRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CopyFilesToMachineRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CopyFilesToMachineRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CopyFilesToMachineRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CopyFilesToMachineRequest& from) {
    CopyFilesToMachineRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CopyFilesToMachineRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.shell.v1.CopyFilesToMachineRequest";
  }
  protected:
  explicit CopyFilesToMachineRequest(::google::protobuf::Arena* arena);
  CopyFilesToMachineRequest(::google::protobuf::Arena* arena, const CopyFilesToMachineRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kFileDataFieldNumber = 2,
  };
  // .viam.service.shell.v1.CopyFilesToMachineRequestMetadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;

  public:
  void clear_metadata() ;
  const ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata& metadata() const;
  PROTOBUF_NODISCARD ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* release_metadata();
  ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* mutable_metadata();
  void set_allocated_metadata(::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* value);
  void unsafe_arena_set_allocated_metadata(::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* value);
  ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* unsafe_arena_release_metadata();

  private:
  const ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata& _internal_metadata() const;
  ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* _internal_mutable_metadata();

  public:
  // .viam.service.shell.v1.FileData file_data = 2 [json_name = "fileData"];
  bool has_file_data() const;
  private:
  bool _internal_has_file_data() const;

  public:
  void clear_file_data() ;
  const ::viam::service::shell::v1::FileData& file_data() const;
  PROTOBUF_NODISCARD ::viam::service::shell::v1::FileData* release_file_data();
  ::viam::service::shell::v1::FileData* mutable_file_data();
  void set_allocated_file_data(::viam::service::shell::v1::FileData* value);
  void unsafe_arena_set_allocated_file_data(::viam::service::shell::v1::FileData* value);
  ::viam::service::shell::v1::FileData* unsafe_arena_release_file_data();

  private:
  const ::viam::service::shell::v1::FileData& _internal_file_data() const;
  ::viam::service::shell::v1::FileData* _internal_mutable_file_data();

  public:
  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:viam.service.shell.v1.CopyFilesToMachineRequest)
 private:
  class _Internal;
  void set_has_metadata();
  void set_has_file_data();

  inline bool has_request() const;
  inline void clear_has_request();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* metadata_;
      ::viam::service::shell::v1::FileData* file_data_;
    } request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fshell_2fv1_2fshell_2eproto;
};// -------------------------------------------------------------------

class CopyFilesFromMachineResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.shell.v1.CopyFilesFromMachineResponse) */ {
 public:
  inline CopyFilesFromMachineResponse() : CopyFilesFromMachineResponse(nullptr) {}
  ~CopyFilesFromMachineResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CopyFilesFromMachineResponse(::google::protobuf::internal::ConstantInitialized);

  inline CopyFilesFromMachineResponse(const CopyFilesFromMachineResponse& from)
      : CopyFilesFromMachineResponse(nullptr, from) {}
  CopyFilesFromMachineResponse(CopyFilesFromMachineResponse&& from) noexcept
    : CopyFilesFromMachineResponse() {
    *this = ::std::move(from);
  }

  inline CopyFilesFromMachineResponse& operator=(const CopyFilesFromMachineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyFilesFromMachineResponse& operator=(CopyFilesFromMachineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CopyFilesFromMachineResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kMetadata = 1,
    kFileData = 2,
    RESPONSE_NOT_SET = 0,
  };

  static inline const CopyFilesFromMachineResponse* internal_default_instance() {
    return reinterpret_cast<const CopyFilesFromMachineResponse*>(
               &_CopyFilesFromMachineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CopyFilesFromMachineResponse& a, CopyFilesFromMachineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyFilesFromMachineResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopyFilesFromMachineResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CopyFilesFromMachineResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CopyFilesFromMachineResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CopyFilesFromMachineResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CopyFilesFromMachineResponse& from) {
    CopyFilesFromMachineResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CopyFilesFromMachineResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.shell.v1.CopyFilesFromMachineResponse";
  }
  protected:
  explicit CopyFilesFromMachineResponse(::google::protobuf::Arena* arena);
  CopyFilesFromMachineResponse(::google::protobuf::Arena* arena, const CopyFilesFromMachineResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kFileDataFieldNumber = 2,
  };
  // .viam.service.shell.v1.CopyFilesFromMachineResponseMetadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;

  public:
  void clear_metadata() ;
  const ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata& metadata() const;
  PROTOBUF_NODISCARD ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* release_metadata();
  ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* mutable_metadata();
  void set_allocated_metadata(::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* value);
  void unsafe_arena_set_allocated_metadata(::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* value);
  ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* unsafe_arena_release_metadata();

  private:
  const ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata& _internal_metadata() const;
  ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* _internal_mutable_metadata();

  public:
  // .viam.service.shell.v1.FileData file_data = 2 [json_name = "fileData"];
  bool has_file_data() const;
  private:
  bool _internal_has_file_data() const;

  public:
  void clear_file_data() ;
  const ::viam::service::shell::v1::FileData& file_data() const;
  PROTOBUF_NODISCARD ::viam::service::shell::v1::FileData* release_file_data();
  ::viam::service::shell::v1::FileData* mutable_file_data();
  void set_allocated_file_data(::viam::service::shell::v1::FileData* value);
  void unsafe_arena_set_allocated_file_data(::viam::service::shell::v1::FileData* value);
  ::viam::service::shell::v1::FileData* unsafe_arena_release_file_data();

  private:
  const ::viam::service::shell::v1::FileData& _internal_file_data() const;
  ::viam::service::shell::v1::FileData* _internal_mutable_file_data();

  public:
  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:viam.service.shell.v1.CopyFilesFromMachineResponse)
 private:
  class _Internal;
  void set_has_metadata();
  void set_has_file_data();

  inline bool has_response() const;
  inline void clear_has_response();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* metadata_;
      ::viam::service::shell::v1::FileData* file_data_;
    } response_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fshell_2fv1_2fshell_2eproto;
};// -------------------------------------------------------------------

class CopyFilesFromMachineRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.service.shell.v1.CopyFilesFromMachineRequest) */ {
 public:
  inline CopyFilesFromMachineRequest() : CopyFilesFromMachineRequest(nullptr) {}
  ~CopyFilesFromMachineRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CopyFilesFromMachineRequest(::google::protobuf::internal::ConstantInitialized);

  inline CopyFilesFromMachineRequest(const CopyFilesFromMachineRequest& from)
      : CopyFilesFromMachineRequest(nullptr, from) {}
  CopyFilesFromMachineRequest(CopyFilesFromMachineRequest&& from) noexcept
    : CopyFilesFromMachineRequest() {
    *this = ::std::move(from);
  }

  inline CopyFilesFromMachineRequest& operator=(const CopyFilesFromMachineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CopyFilesFromMachineRequest& operator=(CopyFilesFromMachineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CopyFilesFromMachineRequest& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kMetadata = 1,
    kAckLastFile = 2,
    REQUEST_NOT_SET = 0,
  };

  static inline const CopyFilesFromMachineRequest* internal_default_instance() {
    return reinterpret_cast<const CopyFilesFromMachineRequest*>(
               &_CopyFilesFromMachineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CopyFilesFromMachineRequest& a, CopyFilesFromMachineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CopyFilesFromMachineRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CopyFilesFromMachineRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CopyFilesFromMachineRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CopyFilesFromMachineRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CopyFilesFromMachineRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CopyFilesFromMachineRequest& from) {
    CopyFilesFromMachineRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CopyFilesFromMachineRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.service.shell.v1.CopyFilesFromMachineRequest";
  }
  protected:
  explicit CopyFilesFromMachineRequest(::google::protobuf::Arena* arena);
  CopyFilesFromMachineRequest(::google::protobuf::Arena* arena, const CopyFilesFromMachineRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kAckLastFileFieldNumber = 2,
  };
  // .viam.service.shell.v1.CopyFilesFromMachineRequestMetadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;

  public:
  void clear_metadata() ;
  const ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata& metadata() const;
  PROTOBUF_NODISCARD ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* release_metadata();
  ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* mutable_metadata();
  void set_allocated_metadata(::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* value);
  void unsafe_arena_set_allocated_metadata(::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* value);
  ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* unsafe_arena_release_metadata();

  private:
  const ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata& _internal_metadata() const;
  ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* _internal_mutable_metadata();

  public:
  // bool ack_last_file = 2 [json_name = "ackLastFile"];
  bool has_ack_last_file() const;
  void clear_ack_last_file() ;
  bool ack_last_file() const;
  void set_ack_last_file(bool value);

  private:
  bool _internal_ack_last_file() const;
  void _internal_set_ack_last_file(bool value);

  public:
  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:viam.service.shell.v1.CopyFilesFromMachineRequest)
 private:
  class _Internal;
  void set_has_metadata();
  void set_has_ack_last_file();

  inline bool has_request() const;
  inline void clear_has_request();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* metadata_;
      bool ack_last_file_;
    } request_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fshell_2fv1_2fshell_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ShellRequest

// string name = 1 [json_name = "name"];
inline void ShellRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ShellRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.ShellRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShellRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.ShellRequest.name)
}
inline std::string* ShellRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.ShellRequest.name)
  return _s;
}
inline const std::string& ShellRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ShellRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ShellRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ShellRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.ShellRequest.name)
  return _impl_.name_.Release();
}
inline void ShellRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.ShellRequest.name)
}

// string data_in = 2 [json_name = "dataIn"];
inline void ShellRequest::clear_data_in() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_in_.ClearToEmpty();
}
inline const std::string& ShellRequest::data_in() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.ShellRequest.data_in)
  return _internal_data_in();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShellRequest::set_data_in(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_in_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.ShellRequest.data_in)
}
inline std::string* ShellRequest::mutable_data_in() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_in();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.ShellRequest.data_in)
  return _s;
}
inline const std::string& ShellRequest::_internal_data_in() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_in_.Get();
}
inline void ShellRequest::_internal_set_data_in(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_in_.Set(value, GetArena());
}
inline std::string* ShellRequest::_internal_mutable_data_in() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_in_.Mutable( GetArena());
}
inline std::string* ShellRequest::release_data_in() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.ShellRequest.data_in)
  return _impl_.data_in_.Release();
}
inline void ShellRequest::set_allocated_data_in(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_in_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_in_.IsDefault()) {
          _impl_.data_in_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.ShellRequest.data_in)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool ShellRequest::has_extra() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extra_ != nullptr);
  return value;
}
inline const ::google::protobuf::Struct& ShellRequest::_internal_extra() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Struct&>(::google::protobuf::_Struct_default_instance_);
}
inline const ::google::protobuf::Struct& ShellRequest::extra() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.ShellRequest.extra)
  return _internal_extra();
}
inline void ShellRequest::unsafe_arena_set_allocated_extra(::google::protobuf::Struct* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.shell.v1.ShellRequest.extra)
}
inline ::google::protobuf::Struct* ShellRequest::release_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* released = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Struct* ShellRequest::unsafe_arena_release_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.ShellRequest.extra)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* ShellRequest::_internal_mutable_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArena());
    _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(p);
  }
  return _impl_.extra_;
}
inline ::google::protobuf::Struct* ShellRequest::mutable_extra() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.ShellRequest.extra)
  return _msg;
}
inline void ShellRequest::set_allocated_extra(::google::protobuf::Struct* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extra_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.ShellRequest.extra)
}

// -------------------------------------------------------------------

// ShellResponse

// string data_out = 1 [json_name = "dataOut"];
inline void ShellResponse::clear_data_out() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_out_.ClearToEmpty();
}
inline const std::string& ShellResponse::data_out() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.ShellResponse.data_out)
  return _internal_data_out();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShellResponse::set_data_out(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_out_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.ShellResponse.data_out)
}
inline std::string* ShellResponse::mutable_data_out() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_out();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.ShellResponse.data_out)
  return _s;
}
inline const std::string& ShellResponse::_internal_data_out() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_out_.Get();
}
inline void ShellResponse::_internal_set_data_out(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_out_.Set(value, GetArena());
}
inline std::string* ShellResponse::_internal_mutable_data_out() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_out_.Mutable( GetArena());
}
inline std::string* ShellResponse::release_data_out() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.ShellResponse.data_out)
  return _impl_.data_out_.Release();
}
inline void ShellResponse::set_allocated_data_out(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_out_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_out_.IsDefault()) {
          _impl_.data_out_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.ShellResponse.data_out)
}

// string data_err = 2 [json_name = "dataErr"];
inline void ShellResponse::clear_data_err() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_err_.ClearToEmpty();
}
inline const std::string& ShellResponse::data_err() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.ShellResponse.data_err)
  return _internal_data_err();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ShellResponse::set_data_err(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_err_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.ShellResponse.data_err)
}
inline std::string* ShellResponse::mutable_data_err() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data_err();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.ShellResponse.data_err)
  return _s;
}
inline const std::string& ShellResponse::_internal_data_err() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_err_.Get();
}
inline void ShellResponse::_internal_set_data_err(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_err_.Set(value, GetArena());
}
inline std::string* ShellResponse::_internal_mutable_data_err() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_err_.Mutable( GetArena());
}
inline std::string* ShellResponse::release_data_err() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.ShellResponse.data_err)
  return _impl_.data_err_.Release();
}
inline void ShellResponse::set_allocated_data_err(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_err_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_err_.IsDefault()) {
          _impl_.data_err_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.ShellResponse.data_err)
}

// bool eof = 3 [json_name = "eof"];
inline void ShellResponse::clear_eof() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eof_ = false;
}
inline bool ShellResponse::eof() const {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.ShellResponse.eof)
  return _internal_eof();
}
inline void ShellResponse::set_eof(bool value) {
  _internal_set_eof(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.ShellResponse.eof)
}
inline bool ShellResponse::_internal_eof() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eof_;
}
inline void ShellResponse::_internal_set_eof(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.eof_ = value;
}

// -------------------------------------------------------------------

// FileData

// string name = 1 [json_name = "name"];
inline void FileData::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FileData::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.FileData.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileData::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.FileData.name)
}
inline std::string* FileData::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.FileData.name)
  return _s;
}
inline const std::string& FileData::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void FileData::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* FileData::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* FileData::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.FileData.name)
  return _impl_.name_.Release();
}
inline void FileData::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.FileData.name)
}

// int64 size = 2 [json_name = "size"];
inline void FileData::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.size_ = ::int64_t{0};
}
inline ::int64_t FileData::size() const {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.FileData.size)
  return _internal_size();
}
inline void FileData::set_size(::int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.FileData.size)
}
inline ::int64_t FileData::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void FileData::_internal_set_size(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.size_ = value;
}

// bool is_dir = 3 [json_name = "isDir"];
inline void FileData::clear_is_dir() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_dir_ = false;
}
inline bool FileData::is_dir() const {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.FileData.is_dir)
  return _internal_is_dir();
}
inline void FileData::set_is_dir(bool value) {
  _internal_set_is_dir(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.FileData.is_dir)
}
inline bool FileData::_internal_is_dir() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_dir_;
}
inline void FileData::_internal_set_is_dir(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_dir_ = value;
}

// bytes data = 4 [json_name = "data"];
inline void FileData::clear_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.ClearToEmpty();
}
inline const std::string& FileData::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.FileData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileData::set_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.FileData.data)
}
inline std::string* FileData::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.FileData.data)
  return _s;
}
inline const std::string& FileData::_internal_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.data_.Get();
}
inline void FileData::_internal_set_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.data_.Set(value, GetArena());
}
inline std::string* FileData::_internal_mutable_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.data_.Mutable( GetArena());
}
inline std::string* FileData::release_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.FileData.data)
  return _impl_.data_.Release();
}
inline void FileData::set_allocated_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.data_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.FileData.data)
}

// bool eof = 5 [json_name = "eof"];
inline void FileData::clear_eof() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eof_ = false;
}
inline bool FileData::eof() const {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.FileData.eof)
  return _internal_eof();
}
inline void FileData::set_eof(bool value) {
  _internal_set_eof(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.FileData.eof)
}
inline bool FileData::_internal_eof() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eof_;
}
inline void FileData::_internal_set_eof(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.eof_ = value;
}

// optional .google.protobuf.Timestamp mod_time = 6 [json_name = "modTime"];
inline bool FileData::has_mod_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mod_time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& FileData::_internal_mod_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.mod_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& FileData::mod_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.FileData.mod_time)
  return _internal_mod_time();
}
inline void FileData::unsafe_arena_set_allocated_mod_time(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mod_time_);
  }
  _impl_.mod_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.shell.v1.FileData.mod_time)
}
inline ::google::protobuf::Timestamp* FileData::release_mod_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.mod_time_;
  _impl_.mod_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* FileData::unsafe_arena_release_mod_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.FileData.mod_time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.mod_time_;
  _impl_.mod_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* FileData::_internal_mutable_mod_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.mod_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.mod_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.mod_time_;
}
inline ::google::protobuf::Timestamp* FileData::mutable_mod_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_mod_time();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.FileData.mod_time)
  return _msg;
}
inline void FileData::set_allocated_mod_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.mod_time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.mod_time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.FileData.mod_time)
}

// optional uint32 mode = 7 [json_name = "mode"];
inline bool FileData::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FileData::clear_mode() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mode_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t FileData::mode() const {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.FileData.mode)
  return _internal_mode();
}
inline void FileData::set_mode(::uint32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.FileData.mode)
}
inline ::uint32_t FileData::_internal_mode() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mode_;
}
inline void FileData::_internal_set_mode(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// CopyFilesToMachineRequestMetadata

// string name = 1 [json_name = "name"];
inline void CopyFilesToMachineRequestMetadata::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CopyFilesToMachineRequestMetadata::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CopyFilesToMachineRequestMetadata::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.name)
}
inline std::string* CopyFilesToMachineRequestMetadata::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.name)
  return _s;
}
inline const std::string& CopyFilesToMachineRequestMetadata::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CopyFilesToMachineRequestMetadata::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CopyFilesToMachineRequestMetadata::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CopyFilesToMachineRequestMetadata::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.name)
  return _impl_.name_.Release();
}
inline void CopyFilesToMachineRequestMetadata::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.name)
}

// .viam.service.shell.v1.CopyFilesSourceType source_type = 2 [json_name = "sourceType"];
inline void CopyFilesToMachineRequestMetadata::clear_source_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_type_ = 0;
}
inline ::viam::service::shell::v1::CopyFilesSourceType CopyFilesToMachineRequestMetadata::source_type() const {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.source_type)
  return _internal_source_type();
}
inline void CopyFilesToMachineRequestMetadata::set_source_type(::viam::service::shell::v1::CopyFilesSourceType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.source_type)
}
inline ::viam::service::shell::v1::CopyFilesSourceType CopyFilesToMachineRequestMetadata::_internal_source_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::viam::service::shell::v1::CopyFilesSourceType>(_impl_.source_type_);
}
inline void CopyFilesToMachineRequestMetadata::_internal_set_source_type(::viam::service::shell::v1::CopyFilesSourceType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_type_ = value;
}

// string destination = 3 [json_name = "destination"];
inline void CopyFilesToMachineRequestMetadata::clear_destination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.destination_.ClearToEmpty();
}
inline const std::string& CopyFilesToMachineRequestMetadata::destination() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.destination)
  return _internal_destination();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CopyFilesToMachineRequestMetadata::set_destination(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.destination_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.destination)
}
inline std::string* CopyFilesToMachineRequestMetadata::mutable_destination() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.destination)
  return _s;
}
inline const std::string& CopyFilesToMachineRequestMetadata::_internal_destination() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.destination_.Get();
}
inline void CopyFilesToMachineRequestMetadata::_internal_set_destination(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.destination_.Set(value, GetArena());
}
inline std::string* CopyFilesToMachineRequestMetadata::_internal_mutable_destination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.destination_.Mutable( GetArena());
}
inline std::string* CopyFilesToMachineRequestMetadata::release_destination() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.destination)
  return _impl_.destination_.Release();
}
inline void CopyFilesToMachineRequestMetadata::set_allocated_destination(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.destination_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.destination_.IsDefault()) {
          _impl_.destination_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.destination)
}

// bool preserve = 4 [json_name = "preserve"];
inline void CopyFilesToMachineRequestMetadata::clear_preserve() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.preserve_ = false;
}
inline bool CopyFilesToMachineRequestMetadata::preserve() const {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.preserve)
  return _internal_preserve();
}
inline void CopyFilesToMachineRequestMetadata::set_preserve(bool value) {
  _internal_set_preserve(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.preserve)
}
inline bool CopyFilesToMachineRequestMetadata::_internal_preserve() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.preserve_;
}
inline void CopyFilesToMachineRequestMetadata::_internal_set_preserve(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.preserve_ = value;
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool CopyFilesToMachineRequestMetadata::has_extra() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extra_ != nullptr);
  return value;
}
inline const ::google::protobuf::Struct& CopyFilesToMachineRequestMetadata::_internal_extra() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Struct&>(::google::protobuf::_Struct_default_instance_);
}
inline const ::google::protobuf::Struct& CopyFilesToMachineRequestMetadata::extra() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.extra)
  return _internal_extra();
}
inline void CopyFilesToMachineRequestMetadata::unsafe_arena_set_allocated_extra(::google::protobuf::Struct* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.extra)
}
inline ::google::protobuf::Struct* CopyFilesToMachineRequestMetadata::release_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* released = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Struct* CopyFilesToMachineRequestMetadata::unsafe_arena_release_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.extra)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* CopyFilesToMachineRequestMetadata::_internal_mutable_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArena());
    _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(p);
  }
  return _impl_.extra_;
}
inline ::google::protobuf::Struct* CopyFilesToMachineRequestMetadata::mutable_extra() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.extra)
  return _msg;
}
inline void CopyFilesToMachineRequestMetadata::set_allocated_extra(::google::protobuf::Struct* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extra_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.CopyFilesToMachineRequestMetadata.extra)
}

// -------------------------------------------------------------------

// CopyFilesToMachineRequest

// .viam.service.shell.v1.CopyFilesToMachineRequestMetadata metadata = 1 [json_name = "metadata"];
inline bool CopyFilesToMachineRequest::has_metadata() const {
  return request_case() == kMetadata;
}
inline bool CopyFilesToMachineRequest::_internal_has_metadata() const {
  return request_case() == kMetadata;
}
inline void CopyFilesToMachineRequest::set_has_metadata() {
  _impl_._oneof_case_[0] = kMetadata;
}
inline void CopyFilesToMachineRequest::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kMetadata) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.metadata_;
    }
    clear_has_request();
  }
}
inline ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* CopyFilesToMachineRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.CopyFilesToMachineRequest.metadata)
  if (request_case() == kMetadata) {
    clear_has_request();
    auto* temp = _impl_.request_.metadata_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata& CopyFilesToMachineRequest::_internal_metadata() const {
  return request_case() == kMetadata ? *_impl_.request_.metadata_ : reinterpret_cast<::viam::service::shell::v1::CopyFilesToMachineRequestMetadata&>(::viam::service::shell::v1::_CopyFilesToMachineRequestMetadata_default_instance_);
}
inline const ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata& CopyFilesToMachineRequest::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesToMachineRequest.metadata)
  return _internal_metadata();
}
inline ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* CopyFilesToMachineRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.service.shell.v1.CopyFilesToMachineRequest.metadata)
  if (request_case() == kMetadata) {
    clear_has_request();
    auto* temp = _impl_.request_.metadata_;
    _impl_.request_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CopyFilesToMachineRequest::unsafe_arena_set_allocated_metadata(::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_metadata();
    _impl_.request_.metadata_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.shell.v1.CopyFilesToMachineRequest.metadata)
}
inline ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* CopyFilesToMachineRequest::_internal_mutable_metadata() {
  if (request_case() != kMetadata) {
    clear_request();
    set_has_metadata();
    _impl_.request_.metadata_ = CreateMaybeMessage<::viam::service::shell::v1::CopyFilesToMachineRequestMetadata>(GetArena());
  }
  return _impl_.request_.metadata_;
}
inline ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* CopyFilesToMachineRequest::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::viam::service::shell::v1::CopyFilesToMachineRequestMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.CopyFilesToMachineRequest.metadata)
  return _msg;
}

// .viam.service.shell.v1.FileData file_data = 2 [json_name = "fileData"];
inline bool CopyFilesToMachineRequest::has_file_data() const {
  return request_case() == kFileData;
}
inline bool CopyFilesToMachineRequest::_internal_has_file_data() const {
  return request_case() == kFileData;
}
inline void CopyFilesToMachineRequest::set_has_file_data() {
  _impl_._oneof_case_[0] = kFileData;
}
inline void CopyFilesToMachineRequest::clear_file_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kFileData) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.file_data_;
    }
    clear_has_request();
  }
}
inline ::viam::service::shell::v1::FileData* CopyFilesToMachineRequest::release_file_data() {
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.CopyFilesToMachineRequest.file_data)
  if (request_case() == kFileData) {
    clear_has_request();
    auto* temp = _impl_.request_.file_data_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.file_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::service::shell::v1::FileData& CopyFilesToMachineRequest::_internal_file_data() const {
  return request_case() == kFileData ? *_impl_.request_.file_data_ : reinterpret_cast<::viam::service::shell::v1::FileData&>(::viam::service::shell::v1::_FileData_default_instance_);
}
inline const ::viam::service::shell::v1::FileData& CopyFilesToMachineRequest::file_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesToMachineRequest.file_data)
  return _internal_file_data();
}
inline ::viam::service::shell::v1::FileData* CopyFilesToMachineRequest::unsafe_arena_release_file_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.service.shell.v1.CopyFilesToMachineRequest.file_data)
  if (request_case() == kFileData) {
    clear_has_request();
    auto* temp = _impl_.request_.file_data_;
    _impl_.request_.file_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CopyFilesToMachineRequest::unsafe_arena_set_allocated_file_data(::viam::service::shell::v1::FileData* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_file_data();
    _impl_.request_.file_data_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.shell.v1.CopyFilesToMachineRequest.file_data)
}
inline ::viam::service::shell::v1::FileData* CopyFilesToMachineRequest::_internal_mutable_file_data() {
  if (request_case() != kFileData) {
    clear_request();
    set_has_file_data();
    _impl_.request_.file_data_ = CreateMaybeMessage<::viam::service::shell::v1::FileData>(GetArena());
  }
  return _impl_.request_.file_data_;
}
inline ::viam::service::shell::v1::FileData* CopyFilesToMachineRequest::mutable_file_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::viam::service::shell::v1::FileData* _msg = _internal_mutable_file_data();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.CopyFilesToMachineRequest.file_data)
  return _msg;
}

inline bool CopyFilesToMachineRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void CopyFilesToMachineRequest::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline CopyFilesToMachineRequest::RequestCase CopyFilesToMachineRequest::request_case() const {
  return CopyFilesToMachineRequest::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CopyFilesToMachineResponse

// bool ack_last_file = 1 [json_name = "ackLastFile"];
inline void CopyFilesToMachineResponse::clear_ack_last_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ack_last_file_ = false;
}
inline bool CopyFilesToMachineResponse::ack_last_file() const {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesToMachineResponse.ack_last_file)
  return _internal_ack_last_file();
}
inline void CopyFilesToMachineResponse::set_ack_last_file(bool value) {
  _internal_set_ack_last_file(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.CopyFilesToMachineResponse.ack_last_file)
}
inline bool CopyFilesToMachineResponse::_internal_ack_last_file() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ack_last_file_;
}
inline void CopyFilesToMachineResponse::_internal_set_ack_last_file(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ack_last_file_ = value;
}

// -------------------------------------------------------------------

// CopyFilesFromMachineRequestMetadata

// string name = 1 [json_name = "name"];
inline void CopyFilesFromMachineRequestMetadata::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CopyFilesFromMachineRequestMetadata::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CopyFilesFromMachineRequestMetadata::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.name)
}
inline std::string* CopyFilesFromMachineRequestMetadata::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.name)
  return _s;
}
inline const std::string& CopyFilesFromMachineRequestMetadata::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CopyFilesFromMachineRequestMetadata::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CopyFilesFromMachineRequestMetadata::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CopyFilesFromMachineRequestMetadata::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.name)
  return _impl_.name_.Release();
}
inline void CopyFilesFromMachineRequestMetadata::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.name)
}

// repeated string paths = 2 [json_name = "paths"];
inline int CopyFilesFromMachineRequestMetadata::_internal_paths_size() const {
  return _internal_paths().size();
}
inline int CopyFilesFromMachineRequestMetadata::paths_size() const {
  return _internal_paths_size();
}
inline void CopyFilesFromMachineRequestMetadata::clear_paths() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.paths_.Clear();
}
inline std::string* CopyFilesFromMachineRequestMetadata::add_paths()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_paths()->Add();
  // @@protoc_insertion_point(field_add_mutable:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
  return _s;
}
inline const std::string& CopyFilesFromMachineRequestMetadata::paths(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
  return _internal_paths().Get(index);
}
inline std::string* CopyFilesFromMachineRequestMetadata::mutable_paths(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
  return _internal_mutable_paths()->Mutable(index);
}
inline void CopyFilesFromMachineRequestMetadata::set_paths(int index, const std::string& value) {
  _internal_mutable_paths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
}
inline void CopyFilesFromMachineRequestMetadata::set_paths(int index, std::string&& value) {
  _internal_mutable_paths()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
}
inline void CopyFilesFromMachineRequestMetadata::set_paths(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_paths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
}
inline void CopyFilesFromMachineRequestMetadata::set_paths(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_paths()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
}
inline void CopyFilesFromMachineRequestMetadata::set_paths(int index, absl::string_view value) {
  _internal_mutable_paths()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
}
inline void CopyFilesFromMachineRequestMetadata::add_paths(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_paths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
}
inline void CopyFilesFromMachineRequestMetadata::add_paths(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_paths()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
}
inline void CopyFilesFromMachineRequestMetadata::add_paths(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_paths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
}
inline void CopyFilesFromMachineRequestMetadata::add_paths(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_paths()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
}
inline void CopyFilesFromMachineRequestMetadata::add_paths(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_paths()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CopyFilesFromMachineRequestMetadata::paths() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
  return _internal_paths();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CopyFilesFromMachineRequestMetadata::mutable_paths() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.paths)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_paths();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CopyFilesFromMachineRequestMetadata::_internal_paths() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.paths_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CopyFilesFromMachineRequestMetadata::_internal_mutable_paths() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.paths_;
}

// bool allow_recursion = 3 [json_name = "allowRecursion"];
inline void CopyFilesFromMachineRequestMetadata::clear_allow_recursion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.allow_recursion_ = false;
}
inline bool CopyFilesFromMachineRequestMetadata::allow_recursion() const {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.allow_recursion)
  return _internal_allow_recursion();
}
inline void CopyFilesFromMachineRequestMetadata::set_allow_recursion(bool value) {
  _internal_set_allow_recursion(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.allow_recursion)
}
inline bool CopyFilesFromMachineRequestMetadata::_internal_allow_recursion() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.allow_recursion_;
}
inline void CopyFilesFromMachineRequestMetadata::_internal_set_allow_recursion(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.allow_recursion_ = value;
}

// bool preserve = 4 [json_name = "preserve"];
inline void CopyFilesFromMachineRequestMetadata::clear_preserve() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.preserve_ = false;
}
inline bool CopyFilesFromMachineRequestMetadata::preserve() const {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.preserve)
  return _internal_preserve();
}
inline void CopyFilesFromMachineRequestMetadata::set_preserve(bool value) {
  _internal_set_preserve(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.preserve)
}
inline bool CopyFilesFromMachineRequestMetadata::_internal_preserve() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.preserve_;
}
inline void CopyFilesFromMachineRequestMetadata::_internal_set_preserve(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.preserve_ = value;
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool CopyFilesFromMachineRequestMetadata::has_extra() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extra_ != nullptr);
  return value;
}
inline const ::google::protobuf::Struct& CopyFilesFromMachineRequestMetadata::_internal_extra() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Struct&>(::google::protobuf::_Struct_default_instance_);
}
inline const ::google::protobuf::Struct& CopyFilesFromMachineRequestMetadata::extra() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.extra)
  return _internal_extra();
}
inline void CopyFilesFromMachineRequestMetadata::unsafe_arena_set_allocated_extra(::google::protobuf::Struct* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.extra)
}
inline ::google::protobuf::Struct* CopyFilesFromMachineRequestMetadata::release_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* released = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Struct* CopyFilesFromMachineRequestMetadata::unsafe_arena_release_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.extra)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* CopyFilesFromMachineRequestMetadata::_internal_mutable_extra() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArena());
    _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(p);
  }
  return _impl_.extra_;
}
inline ::google::protobuf::Struct* CopyFilesFromMachineRequestMetadata::mutable_extra() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.extra)
  return _msg;
}
inline void CopyFilesFromMachineRequestMetadata::set_allocated_extra(::google::protobuf::Struct* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.extra_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.extra_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.service.shell.v1.CopyFilesFromMachineRequestMetadata.extra)
}

// -------------------------------------------------------------------

// CopyFilesFromMachineRequest

// .viam.service.shell.v1.CopyFilesFromMachineRequestMetadata metadata = 1 [json_name = "metadata"];
inline bool CopyFilesFromMachineRequest::has_metadata() const {
  return request_case() == kMetadata;
}
inline bool CopyFilesFromMachineRequest::_internal_has_metadata() const {
  return request_case() == kMetadata;
}
inline void CopyFilesFromMachineRequest::set_has_metadata() {
  _impl_._oneof_case_[0] = kMetadata;
}
inline void CopyFilesFromMachineRequest::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kMetadata) {
    if (GetArena() == nullptr) {
      delete _impl_.request_.metadata_;
    }
    clear_has_request();
  }
}
inline ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* CopyFilesFromMachineRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.CopyFilesFromMachineRequest.metadata)
  if (request_case() == kMetadata) {
    clear_has_request();
    auto* temp = _impl_.request_.metadata_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata& CopyFilesFromMachineRequest::_internal_metadata() const {
  return request_case() == kMetadata ? *_impl_.request_.metadata_ : reinterpret_cast<::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata&>(::viam::service::shell::v1::_CopyFilesFromMachineRequestMetadata_default_instance_);
}
inline const ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata& CopyFilesFromMachineRequest::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesFromMachineRequest.metadata)
  return _internal_metadata();
}
inline ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* CopyFilesFromMachineRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.service.shell.v1.CopyFilesFromMachineRequest.metadata)
  if (request_case() == kMetadata) {
    clear_has_request();
    auto* temp = _impl_.request_.metadata_;
    _impl_.request_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CopyFilesFromMachineRequest::unsafe_arena_set_allocated_metadata(::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_request();
  if (value) {
    set_has_metadata();
    _impl_.request_.metadata_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.shell.v1.CopyFilesFromMachineRequest.metadata)
}
inline ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* CopyFilesFromMachineRequest::_internal_mutable_metadata() {
  if (request_case() != kMetadata) {
    clear_request();
    set_has_metadata();
    _impl_.request_.metadata_ = CreateMaybeMessage<::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata>(GetArena());
  }
  return _impl_.request_.metadata_;
}
inline ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* CopyFilesFromMachineRequest::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::viam::service::shell::v1::CopyFilesFromMachineRequestMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.CopyFilesFromMachineRequest.metadata)
  return _msg;
}

// bool ack_last_file = 2 [json_name = "ackLastFile"];
inline bool CopyFilesFromMachineRequest::has_ack_last_file() const {
  return request_case() == kAckLastFile;
}
inline void CopyFilesFromMachineRequest::set_has_ack_last_file() {
  _impl_._oneof_case_[0] = kAckLastFile;
}
inline void CopyFilesFromMachineRequest::clear_ack_last_file() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (request_case() == kAckLastFile) {
    _impl_.request_.ack_last_file_ = false;
    clear_has_request();
  }
}
inline bool CopyFilesFromMachineRequest::ack_last_file() const {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesFromMachineRequest.ack_last_file)
  return _internal_ack_last_file();
}
inline void CopyFilesFromMachineRequest::set_ack_last_file(bool value) {
  _internal_set_ack_last_file(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.CopyFilesFromMachineRequest.ack_last_file)
}
inline bool CopyFilesFromMachineRequest::_internal_ack_last_file() const {
  if (request_case() == kAckLastFile) {
    return _impl_.request_.ack_last_file_;
  }
  return false;
}
inline void CopyFilesFromMachineRequest::_internal_set_ack_last_file(bool value) {
  if (request_case() != kAckLastFile) {
    clear_request();
    set_has_ack_last_file();
  }
  _impl_.request_.ack_last_file_ = value;
}

inline bool CopyFilesFromMachineRequest::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void CopyFilesFromMachineRequest::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline CopyFilesFromMachineRequest::RequestCase CopyFilesFromMachineRequest::request_case() const {
  return CopyFilesFromMachineRequest::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CopyFilesFromMachineResponseMetadata

// .viam.service.shell.v1.CopyFilesSourceType source_type = 1 [json_name = "sourceType"];
inline void CopyFilesFromMachineResponseMetadata::clear_source_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.source_type_ = 0;
}
inline ::viam::service::shell::v1::CopyFilesSourceType CopyFilesFromMachineResponseMetadata::source_type() const {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesFromMachineResponseMetadata.source_type)
  return _internal_source_type();
}
inline void CopyFilesFromMachineResponseMetadata::set_source_type(::viam::service::shell::v1::CopyFilesSourceType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:viam.service.shell.v1.CopyFilesFromMachineResponseMetadata.source_type)
}
inline ::viam::service::shell::v1::CopyFilesSourceType CopyFilesFromMachineResponseMetadata::_internal_source_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::viam::service::shell::v1::CopyFilesSourceType>(_impl_.source_type_);
}
inline void CopyFilesFromMachineResponseMetadata::_internal_set_source_type(::viam::service::shell::v1::CopyFilesSourceType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.source_type_ = value;
}

// -------------------------------------------------------------------

// CopyFilesFromMachineResponse

// .viam.service.shell.v1.CopyFilesFromMachineResponseMetadata metadata = 1 [json_name = "metadata"];
inline bool CopyFilesFromMachineResponse::has_metadata() const {
  return response_case() == kMetadata;
}
inline bool CopyFilesFromMachineResponse::_internal_has_metadata() const {
  return response_case() == kMetadata;
}
inline void CopyFilesFromMachineResponse::set_has_metadata() {
  _impl_._oneof_case_[0] = kMetadata;
}
inline void CopyFilesFromMachineResponse::clear_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (response_case() == kMetadata) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.metadata_;
    }
    clear_has_response();
  }
}
inline ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* CopyFilesFromMachineResponse::release_metadata() {
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.CopyFilesFromMachineResponse.metadata)
  if (response_case() == kMetadata) {
    clear_has_response();
    auto* temp = _impl_.response_.metadata_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata& CopyFilesFromMachineResponse::_internal_metadata() const {
  return response_case() == kMetadata ? *_impl_.response_.metadata_ : reinterpret_cast<::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata&>(::viam::service::shell::v1::_CopyFilesFromMachineResponseMetadata_default_instance_);
}
inline const ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata& CopyFilesFromMachineResponse::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesFromMachineResponse.metadata)
  return _internal_metadata();
}
inline ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* CopyFilesFromMachineResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.service.shell.v1.CopyFilesFromMachineResponse.metadata)
  if (response_case() == kMetadata) {
    clear_has_response();
    auto* temp = _impl_.response_.metadata_;
    _impl_.response_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CopyFilesFromMachineResponse::unsafe_arena_set_allocated_metadata(::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_metadata();
    _impl_.response_.metadata_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.shell.v1.CopyFilesFromMachineResponse.metadata)
}
inline ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* CopyFilesFromMachineResponse::_internal_mutable_metadata() {
  if (response_case() != kMetadata) {
    clear_response();
    set_has_metadata();
    _impl_.response_.metadata_ = CreateMaybeMessage<::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata>(GetArena());
  }
  return _impl_.response_.metadata_;
}
inline ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* CopyFilesFromMachineResponse::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::viam::service::shell::v1::CopyFilesFromMachineResponseMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.CopyFilesFromMachineResponse.metadata)
  return _msg;
}

// .viam.service.shell.v1.FileData file_data = 2 [json_name = "fileData"];
inline bool CopyFilesFromMachineResponse::has_file_data() const {
  return response_case() == kFileData;
}
inline bool CopyFilesFromMachineResponse::_internal_has_file_data() const {
  return response_case() == kFileData;
}
inline void CopyFilesFromMachineResponse::set_has_file_data() {
  _impl_._oneof_case_[0] = kFileData;
}
inline void CopyFilesFromMachineResponse::clear_file_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (response_case() == kFileData) {
    if (GetArena() == nullptr) {
      delete _impl_.response_.file_data_;
    }
    clear_has_response();
  }
}
inline ::viam::service::shell::v1::FileData* CopyFilesFromMachineResponse::release_file_data() {
  // @@protoc_insertion_point(field_release:viam.service.shell.v1.CopyFilesFromMachineResponse.file_data)
  if (response_case() == kFileData) {
    clear_has_response();
    auto* temp = _impl_.response_.file_data_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.file_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::service::shell::v1::FileData& CopyFilesFromMachineResponse::_internal_file_data() const {
  return response_case() == kFileData ? *_impl_.response_.file_data_ : reinterpret_cast<::viam::service::shell::v1::FileData&>(::viam::service::shell::v1::_FileData_default_instance_);
}
inline const ::viam::service::shell::v1::FileData& CopyFilesFromMachineResponse::file_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.service.shell.v1.CopyFilesFromMachineResponse.file_data)
  return _internal_file_data();
}
inline ::viam::service::shell::v1::FileData* CopyFilesFromMachineResponse::unsafe_arena_release_file_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.service.shell.v1.CopyFilesFromMachineResponse.file_data)
  if (response_case() == kFileData) {
    clear_has_response();
    auto* temp = _impl_.response_.file_data_;
    _impl_.response_.file_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CopyFilesFromMachineResponse::unsafe_arena_set_allocated_file_data(::viam::service::shell::v1::FileData* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_response();
  if (value) {
    set_has_file_data();
    _impl_.response_.file_data_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.shell.v1.CopyFilesFromMachineResponse.file_data)
}
inline ::viam::service::shell::v1::FileData* CopyFilesFromMachineResponse::_internal_mutable_file_data() {
  if (response_case() != kFileData) {
    clear_response();
    set_has_file_data();
    _impl_.response_.file_data_ = CreateMaybeMessage<::viam::service::shell::v1::FileData>(GetArena());
  }
  return _impl_.response_.file_data_;
}
inline ::viam::service::shell::v1::FileData* CopyFilesFromMachineResponse::mutable_file_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::viam::service::shell::v1::FileData* _msg = _internal_mutable_file_data();
  // @@protoc_insertion_point(field_mutable:viam.service.shell.v1.CopyFilesFromMachineResponse.file_data)
  return _msg;
}

inline bool CopyFilesFromMachineResponse::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void CopyFilesFromMachineResponse::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline CopyFilesFromMachineResponse::ResponseCase CopyFilesFromMachineResponse::response_case() const {
  return CopyFilesFromMachineResponse::ResponseCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace shell
}  // namespace service
}  // namespace viam


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::viam::service::shell::v1::CopyFilesSourceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::viam::service::shell::v1::CopyFilesSourceType>() {
  return ::viam::service::shell::v1::CopyFilesSourceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_service_2fshell_2fv1_2fshell_2eproto_2epb_2eh
