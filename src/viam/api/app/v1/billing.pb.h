// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/v1/billing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fv1_2fbilling_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_2fv1_2fbilling_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_2fv1_2fbilling_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fv1_2fbilling_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_app_2fv1_2fbilling_2eproto;
namespace viam {
namespace app {
namespace v1 {
class GetAvailableBillingTiersRequest;
struct GetAvailableBillingTiersRequestDefaultTypeInternal;
extern GetAvailableBillingTiersRequestDefaultTypeInternal _GetAvailableBillingTiersRequest_default_instance_;
class GetAvailableBillingTiersResponse;
struct GetAvailableBillingTiersResponseDefaultTypeInternal;
extern GetAvailableBillingTiersResponseDefaultTypeInternal _GetAvailableBillingTiersResponse_default_instance_;
class GetCurrentMonthUsageRequest;
struct GetCurrentMonthUsageRequestDefaultTypeInternal;
extern GetCurrentMonthUsageRequestDefaultTypeInternal _GetCurrentMonthUsageRequest_default_instance_;
class GetCurrentMonthUsageResponse;
struct GetCurrentMonthUsageResponseDefaultTypeInternal;
extern GetCurrentMonthUsageResponseDefaultTypeInternal _GetCurrentMonthUsageResponse_default_instance_;
class GetInvoicePdfRequest;
struct GetInvoicePdfRequestDefaultTypeInternal;
extern GetInvoicePdfRequestDefaultTypeInternal _GetInvoicePdfRequest_default_instance_;
class GetInvoicePdfResponse;
struct GetInvoicePdfResponseDefaultTypeInternal;
extern GetInvoicePdfResponseDefaultTypeInternal _GetInvoicePdfResponse_default_instance_;
class GetInvoicesSummaryRequest;
struct GetInvoicesSummaryRequestDefaultTypeInternal;
extern GetInvoicesSummaryRequestDefaultTypeInternal _GetInvoicesSummaryRequest_default_instance_;
class GetInvoicesSummaryResponse;
struct GetInvoicesSummaryResponseDefaultTypeInternal;
extern GetInvoicesSummaryResponseDefaultTypeInternal _GetInvoicesSummaryResponse_default_instance_;
class GetOrgBillingInformationRequest;
struct GetOrgBillingInformationRequestDefaultTypeInternal;
extern GetOrgBillingInformationRequestDefaultTypeInternal _GetOrgBillingInformationRequest_default_instance_;
class GetOrgBillingInformationResponse;
struct GetOrgBillingInformationResponseDefaultTypeInternal;
extern GetOrgBillingInformationResponseDefaultTypeInternal _GetOrgBillingInformationResponse_default_instance_;
class InvoiceSummary;
struct InvoiceSummaryDefaultTypeInternal;
extern InvoiceSummaryDefaultTypeInternal _InvoiceSummary_default_instance_;
class PaymentMethodCard;
struct PaymentMethodCardDefaultTypeInternal;
extern PaymentMethodCardDefaultTypeInternal _PaymentMethodCard_default_instance_;
class ResourceUsageCosts;
struct ResourceUsageCostsDefaultTypeInternal;
extern ResourceUsageCostsDefaultTypeInternal _ResourceUsageCosts_default_instance_;
class ResourceUsageCostsBySource;
struct ResourceUsageCostsBySourceDefaultTypeInternal;
extern ResourceUsageCostsBySourceDefaultTypeInternal _ResourceUsageCostsBySource_default_instance_;
class SendPaymentRequiredEmailRequest;
struct SendPaymentRequiredEmailRequestDefaultTypeInternal;
extern SendPaymentRequiredEmailRequestDefaultTypeInternal _SendPaymentRequiredEmailRequest_default_instance_;
class SendPaymentRequiredEmailResponse;
struct SendPaymentRequiredEmailResponseDefaultTypeInternal;
extern SendPaymentRequiredEmailResponseDefaultTypeInternal _SendPaymentRequiredEmailResponse_default_instance_;
class UpdateOrganizationBillingTierRequest;
struct UpdateOrganizationBillingTierRequestDefaultTypeInternal;
extern UpdateOrganizationBillingTierRequestDefaultTypeInternal _UpdateOrganizationBillingTierRequest_default_instance_;
class UpdateOrganizationBillingTierResponse;
struct UpdateOrganizationBillingTierResponseDefaultTypeInternal;
extern UpdateOrganizationBillingTierResponseDefaultTypeInternal _UpdateOrganizationBillingTierResponse_default_instance_;
class UsageCost;
struct UsageCostDefaultTypeInternal;
extern UsageCostDefaultTypeInternal _UsageCost_default_instance_;
}  // namespace v1
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::app::v1::GetAvailableBillingTiersRequest* Arena::CreateMaybeMessage<::viam::app::v1::GetAvailableBillingTiersRequest>(Arena*);
template<> ::viam::app::v1::GetAvailableBillingTiersResponse* Arena::CreateMaybeMessage<::viam::app::v1::GetAvailableBillingTiersResponse>(Arena*);
template<> ::viam::app::v1::GetCurrentMonthUsageRequest* Arena::CreateMaybeMessage<::viam::app::v1::GetCurrentMonthUsageRequest>(Arena*);
template<> ::viam::app::v1::GetCurrentMonthUsageResponse* Arena::CreateMaybeMessage<::viam::app::v1::GetCurrentMonthUsageResponse>(Arena*);
template<> ::viam::app::v1::GetInvoicePdfRequest* Arena::CreateMaybeMessage<::viam::app::v1::GetInvoicePdfRequest>(Arena*);
template<> ::viam::app::v1::GetInvoicePdfResponse* Arena::CreateMaybeMessage<::viam::app::v1::GetInvoicePdfResponse>(Arena*);
template<> ::viam::app::v1::GetInvoicesSummaryRequest* Arena::CreateMaybeMessage<::viam::app::v1::GetInvoicesSummaryRequest>(Arena*);
template<> ::viam::app::v1::GetInvoicesSummaryResponse* Arena::CreateMaybeMessage<::viam::app::v1::GetInvoicesSummaryResponse>(Arena*);
template<> ::viam::app::v1::GetOrgBillingInformationRequest* Arena::CreateMaybeMessage<::viam::app::v1::GetOrgBillingInformationRequest>(Arena*);
template<> ::viam::app::v1::GetOrgBillingInformationResponse* Arena::CreateMaybeMessage<::viam::app::v1::GetOrgBillingInformationResponse>(Arena*);
template<> ::viam::app::v1::InvoiceSummary* Arena::CreateMaybeMessage<::viam::app::v1::InvoiceSummary>(Arena*);
template<> ::viam::app::v1::PaymentMethodCard* Arena::CreateMaybeMessage<::viam::app::v1::PaymentMethodCard>(Arena*);
template<> ::viam::app::v1::ResourceUsageCosts* Arena::CreateMaybeMessage<::viam::app::v1::ResourceUsageCosts>(Arena*);
template<> ::viam::app::v1::ResourceUsageCostsBySource* Arena::CreateMaybeMessage<::viam::app::v1::ResourceUsageCostsBySource>(Arena*);
template<> ::viam::app::v1::SendPaymentRequiredEmailRequest* Arena::CreateMaybeMessage<::viam::app::v1::SendPaymentRequiredEmailRequest>(Arena*);
template<> ::viam::app::v1::SendPaymentRequiredEmailResponse* Arena::CreateMaybeMessage<::viam::app::v1::SendPaymentRequiredEmailResponse>(Arena*);
template<> ::viam::app::v1::UpdateOrganizationBillingTierRequest* Arena::CreateMaybeMessage<::viam::app::v1::UpdateOrganizationBillingTierRequest>(Arena*);
template<> ::viam::app::v1::UpdateOrganizationBillingTierResponse* Arena::CreateMaybeMessage<::viam::app::v1::UpdateOrganizationBillingTierResponse>(Arena*);
template<> ::viam::app::v1::UsageCost* Arena::CreateMaybeMessage<::viam::app::v1::UsageCost>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace app {
namespace v1 {

enum PaymentMethodType : int {
  PAYMENT_METHOD_TYPE_UNSPECIFIED = 0,
  PAYMENT_METHOD_TYPE_CARD = 1,
  PaymentMethodType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PaymentMethodType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PaymentMethodType_IsValid(int value);
constexpr PaymentMethodType PaymentMethodType_MIN = PAYMENT_METHOD_TYPE_UNSPECIFIED;
constexpr PaymentMethodType PaymentMethodType_MAX = PAYMENT_METHOD_TYPE_CARD;
constexpr int PaymentMethodType_ARRAYSIZE = PaymentMethodType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentMethodType_descriptor();
template<typename T>
inline const std::string& PaymentMethodType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PaymentMethodType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PaymentMethodType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PaymentMethodType_descriptor(), enum_t_value);
}
inline bool PaymentMethodType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PaymentMethodType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PaymentMethodType>(
    PaymentMethodType_descriptor(), name, value);
}
enum UsageCostType : int {
  USAGE_COST_TYPE_UNSPECIFIED = 0,
  USAGE_COST_TYPE_DATA_UPLOAD PROTOBUF_DEPRECATED_ENUM = 1,
  USAGE_COST_TYPE_DATA_EGRESS PROTOBUF_DEPRECATED_ENUM = 2,
  USAGE_COST_TYPE_REMOTE_CONTROL = 3,
  USAGE_COST_TYPE_STANDARD_COMPUTE = 4,
  USAGE_COST_TYPE_CLOUD_STORAGE PROTOBUF_DEPRECATED_ENUM = 5,
  USAGE_COST_TYPE_BINARY_DATA_CLOUD_STORAGE = 6,
  USAGE_COST_TYPE_OTHER_CLOUD_STORAGE PROTOBUF_DEPRECATED_ENUM = 7,
  USAGE_COST_TYPE_PER_MACHINE = 8,
  USAGE_COST_TYPE_TRIGGER_NOTIFICATION = 9,
  USAGE_COST_TYPE_TABULAR_DATA_CLOUD_STORAGE = 10,
  USAGE_COST_TYPE_CONFIG_HISTORY_CLOUD_STORAGE = 11,
  USAGE_COST_TYPE_LOGS_CLOUD_STORAGE = 12,
  USAGE_COST_TYPE_TRAINING_LOGS_CLOUD_STORAGE = 13,
  USAGE_COST_TYPE_PACKAGES_CLOUD_STORAGE = 14,
  USAGE_COST_TYPE_BINARY_DATA_UPLOAD = 15,
  USAGE_COST_TYPE_TABULAR_DATA_UPLOAD = 16,
  USAGE_COST_TYPE_LOGS_UPLOAD = 17,
  USAGE_COST_TYPE_BINARY_DATA_EGRESS = 18,
  USAGE_COST_TYPE_TABULAR_DATA_EGRESS = 19,
  USAGE_COST_TYPE_LOGS_EGRESS = 20,
  USAGE_COST_TYPE_TRAINING_LOGS_EGRESS = 21,
  USAGE_COST_TYPE_TABULAR_DATA_DATABASE_CLOUD_STORAGE = 22,
  USAGE_COST_TYPE_TABULAR_DATA_DATABASE_COMPUTE = 23,
  UsageCostType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UsageCostType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UsageCostType_IsValid(int value);
constexpr UsageCostType UsageCostType_MIN = USAGE_COST_TYPE_UNSPECIFIED;
constexpr UsageCostType UsageCostType_MAX = USAGE_COST_TYPE_TABULAR_DATA_DATABASE_COMPUTE;
constexpr int UsageCostType_ARRAYSIZE = UsageCostType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsageCostType_descriptor();
template<typename T>
inline const std::string& UsageCostType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UsageCostType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UsageCostType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UsageCostType_descriptor(), enum_t_value);
}
inline bool UsageCostType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UsageCostType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UsageCostType>(
    UsageCostType_descriptor(), name, value);
}
enum SourceType : int {
  SOURCE_TYPE_UNSPECIFIED = 0,
  SOURCE_TYPE_ORG = 1,
  SOURCE_TYPE_FRAGMENT = 2,
  SourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SourceType_IsValid(int value);
constexpr SourceType SourceType_MIN = SOURCE_TYPE_UNSPECIFIED;
constexpr SourceType SourceType_MAX = SOURCE_TYPE_FRAGMENT;
constexpr int SourceType_ARRAYSIZE = SourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceType_descriptor();
template<typename T>
inline const std::string& SourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SourceType_descriptor(), enum_t_value);
}
inline bool SourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SourceType>(
    SourceType_descriptor(), name, value);
}
// ===================================================================

class InvoiceSummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.InvoiceSummary) */ {
 public:
  inline InvoiceSummary() : InvoiceSummary(nullptr) {}
  ~InvoiceSummary() override;
  explicit PROTOBUF_CONSTEXPR InvoiceSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvoiceSummary(const InvoiceSummary& from);
  InvoiceSummary(InvoiceSummary&& from) noexcept
    : InvoiceSummary() {
    *this = ::std::move(from);
  }

  inline InvoiceSummary& operator=(const InvoiceSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvoiceSummary& operator=(InvoiceSummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvoiceSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvoiceSummary* internal_default_instance() {
    return reinterpret_cast<const InvoiceSummary*>(
               &_InvoiceSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InvoiceSummary& a, InvoiceSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(InvoiceSummary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvoiceSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvoiceSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvoiceSummary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvoiceSummary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InvoiceSummary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvoiceSummary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.InvoiceSummary";
  }
  protected:
  explicit InvoiceSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 4,
    kInvoiceDateFieldNumber = 2,
    kDueDateFieldNumber = 5,
    kPaidDateFieldNumber = 6,
    kInvoiceAmountFieldNumber = 3,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string status = 4 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .google.protobuf.Timestamp invoice_date = 2 [json_name = "invoiceDate"];
  bool has_invoice_date() const;
  private:
  bool _internal_has_invoice_date() const;
  public:
  void clear_invoice_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& invoice_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_invoice_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_invoice_date();
  void set_allocated_invoice_date(::PROTOBUF_NAMESPACE_ID::Timestamp* invoice_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_invoice_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_invoice_date();
  public:
  void unsafe_arena_set_allocated_invoice_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* invoice_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_invoice_date();

  // .google.protobuf.Timestamp due_date = 5 [json_name = "dueDate"];
  bool has_due_date() const;
  private:
  bool _internal_has_due_date() const;
  public:
  void clear_due_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& due_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_due_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_due_date();
  void set_allocated_due_date(::PROTOBUF_NAMESPACE_ID::Timestamp* due_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_due_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_due_date();
  public:
  void unsafe_arena_set_allocated_due_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* due_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_due_date();

  // .google.protobuf.Timestamp paid_date = 6 [json_name = "paidDate"];
  bool has_paid_date() const;
  private:
  bool _internal_has_paid_date() const;
  public:
  void clear_paid_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& paid_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_paid_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_paid_date();
  void set_allocated_paid_date(::PROTOBUF_NAMESPACE_ID::Timestamp* paid_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_paid_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_paid_date();
  public:
  void unsafe_arena_set_allocated_paid_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* paid_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_paid_date();

  // double invoice_amount = 3 [json_name = "invoiceAmount"];
  void clear_invoice_amount();
  double invoice_amount() const;
  void set_invoice_amount(double value);
  private:
  double _internal_invoice_amount() const;
  void _internal_set_invoice_amount(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.InvoiceSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* invoice_date_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* due_date_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* paid_date_;
  double invoice_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class PaymentMethodCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.PaymentMethodCard) */ {
 public:
  inline PaymentMethodCard() : PaymentMethodCard(nullptr) {}
  ~PaymentMethodCard() override;
  explicit PROTOBUF_CONSTEXPR PaymentMethodCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaymentMethodCard(const PaymentMethodCard& from);
  PaymentMethodCard(PaymentMethodCard&& from) noexcept
    : PaymentMethodCard() {
    *this = ::std::move(from);
  }

  inline PaymentMethodCard& operator=(const PaymentMethodCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentMethodCard& operator=(PaymentMethodCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaymentMethodCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaymentMethodCard* internal_default_instance() {
    return reinterpret_cast<const PaymentMethodCard*>(
               &_PaymentMethodCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PaymentMethodCard& a, PaymentMethodCard& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentMethodCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentMethodCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PaymentMethodCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PaymentMethodCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaymentMethodCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaymentMethodCard& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentMethodCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.PaymentMethodCard";
  }
  protected:
  explicit PaymentMethodCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBrandFieldNumber = 1,
    kLastFourDigitsFieldNumber = 2,
  };
  // string brand = 1 [json_name = "brand"];
  void clear_brand();
  const std::string& brand() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_brand(ArgT0&& arg0, ArgT... args);
  std::string* mutable_brand();
  PROTOBUF_NODISCARD std::string* release_brand();
  void set_allocated_brand(std::string* brand);
  private:
  const std::string& _internal_brand() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brand(const std::string& value);
  std::string* _internal_mutable_brand();
  public:

  // string last_four_digits = 2 [json_name = "lastFourDigits"];
  void clear_last_four_digits();
  const std::string& last_four_digits() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_four_digits(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_four_digits();
  PROTOBUF_NODISCARD std::string* release_last_four_digits();
  void set_allocated_last_four_digits(std::string* last_four_digits);
  private:
  const std::string& _internal_last_four_digits() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_four_digits(const std::string& value);
  std::string* _internal_mutable_last_four_digits();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.PaymentMethodCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr brand_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_four_digits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentMonthUsageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.GetCurrentMonthUsageRequest) */ {
 public:
  inline GetCurrentMonthUsageRequest() : GetCurrentMonthUsageRequest(nullptr) {}
  ~GetCurrentMonthUsageRequest() override;
  explicit PROTOBUF_CONSTEXPR GetCurrentMonthUsageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentMonthUsageRequest(const GetCurrentMonthUsageRequest& from);
  GetCurrentMonthUsageRequest(GetCurrentMonthUsageRequest&& from) noexcept
    : GetCurrentMonthUsageRequest() {
    *this = ::std::move(from);
  }

  inline GetCurrentMonthUsageRequest& operator=(const GetCurrentMonthUsageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentMonthUsageRequest& operator=(GetCurrentMonthUsageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrentMonthUsageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentMonthUsageRequest* internal_default_instance() {
    return reinterpret_cast<const GetCurrentMonthUsageRequest*>(
               &_GetCurrentMonthUsageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetCurrentMonthUsageRequest& a, GetCurrentMonthUsageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentMonthUsageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentMonthUsageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCurrentMonthUsageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCurrentMonthUsageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCurrentMonthUsageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCurrentMonthUsageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentMonthUsageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.GetCurrentMonthUsageRequest";
  }
  protected:
  explicit GetCurrentMonthUsageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.GetCurrentMonthUsageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class UsageCost final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.UsageCost) */ {
 public:
  inline UsageCost() : UsageCost(nullptr) {}
  ~UsageCost() override;
  explicit PROTOBUF_CONSTEXPR UsageCost(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UsageCost(const UsageCost& from);
  UsageCost(UsageCost&& from) noexcept
    : UsageCost() {
    *this = ::std::move(from);
  }

  inline UsageCost& operator=(const UsageCost& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsageCost& operator=(UsageCost&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsageCost& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsageCost* internal_default_instance() {
    return reinterpret_cast<const UsageCost*>(
               &_UsageCost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UsageCost& a, UsageCost& b) {
    a.Swap(&b);
  }
  inline void Swap(UsageCost* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsageCost* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UsageCost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UsageCost>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UsageCost& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UsageCost& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsageCost* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.UsageCost";
  }
  protected:
  explicit UsageCost(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCostFieldNumber = 2,
    kResourceTypeFieldNumber = 1,
  };
  // double cost = 2 [json_name = "cost"];
  void clear_cost();
  double cost() const;
  void set_cost(double value);
  private:
  double _internal_cost() const;
  void _internal_set_cost(double value);
  public:

  // .viam.app.v1.UsageCostType resource_type = 1 [json_name = "resourceType"];
  void clear_resource_type();
  ::viam::app::v1::UsageCostType resource_type() const;
  void set_resource_type(::viam::app::v1::UsageCostType value);
  private:
  ::viam::app::v1::UsageCostType _internal_resource_type() const;
  void _internal_set_resource_type(::viam::app::v1::UsageCostType value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.UsageCost)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double cost_;
  int resource_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class ResourceUsageCostsBySource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.ResourceUsageCostsBySource) */ {
 public:
  inline ResourceUsageCostsBySource() : ResourceUsageCostsBySource(nullptr) {}
  ~ResourceUsageCostsBySource() override;
  explicit PROTOBUF_CONSTEXPR ResourceUsageCostsBySource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceUsageCostsBySource(const ResourceUsageCostsBySource& from);
  ResourceUsageCostsBySource(ResourceUsageCostsBySource&& from) noexcept
    : ResourceUsageCostsBySource() {
    *this = ::std::move(from);
  }

  inline ResourceUsageCostsBySource& operator=(const ResourceUsageCostsBySource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceUsageCostsBySource& operator=(ResourceUsageCostsBySource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceUsageCostsBySource& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceUsageCostsBySource* internal_default_instance() {
    return reinterpret_cast<const ResourceUsageCostsBySource*>(
               &_ResourceUsageCostsBySource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResourceUsageCostsBySource& a, ResourceUsageCostsBySource& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceUsageCostsBySource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceUsageCostsBySource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceUsageCostsBySource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceUsageCostsBySource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceUsageCostsBySource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceUsageCostsBySource& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceUsageCostsBySource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.ResourceUsageCostsBySource";
  }
  protected:
  explicit ResourceUsageCostsBySource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTierNameFieldNumber = 3,
    kResourceUsageCostsFieldNumber = 2,
    kSourceTypeFieldNumber = 1,
  };
  // string tier_name = 3 [json_name = "tierName"];
  void clear_tier_name();
  const std::string& tier_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tier_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tier_name();
  PROTOBUF_NODISCARD std::string* release_tier_name();
  void set_allocated_tier_name(std::string* tier_name);
  private:
  const std::string& _internal_tier_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tier_name(const std::string& value);
  std::string* _internal_mutable_tier_name();
  public:

  // .viam.app.v1.ResourceUsageCosts resource_usage_costs = 2 [json_name = "resourceUsageCosts"];
  bool has_resource_usage_costs() const;
  private:
  bool _internal_has_resource_usage_costs() const;
  public:
  void clear_resource_usage_costs();
  const ::viam::app::v1::ResourceUsageCosts& resource_usage_costs() const;
  PROTOBUF_NODISCARD ::viam::app::v1::ResourceUsageCosts* release_resource_usage_costs();
  ::viam::app::v1::ResourceUsageCosts* mutable_resource_usage_costs();
  void set_allocated_resource_usage_costs(::viam::app::v1::ResourceUsageCosts* resource_usage_costs);
  private:
  const ::viam::app::v1::ResourceUsageCosts& _internal_resource_usage_costs() const;
  ::viam::app::v1::ResourceUsageCosts* _internal_mutable_resource_usage_costs();
  public:
  void unsafe_arena_set_allocated_resource_usage_costs(
      ::viam::app::v1::ResourceUsageCosts* resource_usage_costs);
  ::viam::app::v1::ResourceUsageCosts* unsafe_arena_release_resource_usage_costs();

  // .viam.app.v1.SourceType source_type = 1 [json_name = "sourceType"];
  void clear_source_type();
  ::viam::app::v1::SourceType source_type() const;
  void set_source_type(::viam::app::v1::SourceType value);
  private:
  ::viam::app::v1::SourceType _internal_source_type() const;
  void _internal_set_source_type(::viam::app::v1::SourceType value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.ResourceUsageCostsBySource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tier_name_;
  ::viam::app::v1::ResourceUsageCosts* resource_usage_costs_;
  int source_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class ResourceUsageCosts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.ResourceUsageCosts) */ {
 public:
  inline ResourceUsageCosts() : ResourceUsageCosts(nullptr) {}
  ~ResourceUsageCosts() override;
  explicit PROTOBUF_CONSTEXPR ResourceUsageCosts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceUsageCosts(const ResourceUsageCosts& from);
  ResourceUsageCosts(ResourceUsageCosts&& from) noexcept
    : ResourceUsageCosts() {
    *this = ::std::move(from);
  }

  inline ResourceUsageCosts& operator=(const ResourceUsageCosts& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceUsageCosts& operator=(ResourceUsageCosts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceUsageCosts& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceUsageCosts* internal_default_instance() {
    return reinterpret_cast<const ResourceUsageCosts*>(
               &_ResourceUsageCosts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResourceUsageCosts& a, ResourceUsageCosts& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceUsageCosts* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceUsageCosts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceUsageCosts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceUsageCosts>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceUsageCosts& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceUsageCosts& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceUsageCosts* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.ResourceUsageCosts";
  }
  protected:
  explicit ResourceUsageCosts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsageCostsFieldNumber = 1,
    kDiscountFieldNumber = 2,
    kTotalWithDiscountFieldNumber = 3,
    kTotalWithoutDiscountFieldNumber = 4,
  };
  // repeated .viam.app.v1.UsageCost usage_costs = 1 [json_name = "usageCosts"];
  int usage_costs_size() const;
  private:
  int _internal_usage_costs_size() const;
  public:
  void clear_usage_costs();
  ::viam::app::v1::UsageCost* mutable_usage_costs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::UsageCost >*
      mutable_usage_costs();
  private:
  const ::viam::app::v1::UsageCost& _internal_usage_costs(int index) const;
  ::viam::app::v1::UsageCost* _internal_add_usage_costs();
  public:
  const ::viam::app::v1::UsageCost& usage_costs(int index) const;
  ::viam::app::v1::UsageCost* add_usage_costs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::UsageCost >&
      usage_costs() const;

  // double discount = 2 [json_name = "discount"];
  void clear_discount();
  double discount() const;
  void set_discount(double value);
  private:
  double _internal_discount() const;
  void _internal_set_discount(double value);
  public:

  // double total_with_discount = 3 [json_name = "totalWithDiscount"];
  void clear_total_with_discount();
  double total_with_discount() const;
  void set_total_with_discount(double value);
  private:
  double _internal_total_with_discount() const;
  void _internal_set_total_with_discount(double value);
  public:

  // double total_without_discount = 4 [json_name = "totalWithoutDiscount"];
  void clear_total_without_discount();
  double total_without_discount() const;
  void set_total_without_discount(double value);
  private:
  double _internal_total_without_discount() const;
  void _internal_set_total_without_discount(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.ResourceUsageCosts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::UsageCost > usage_costs_;
  double discount_;
  double total_with_discount_;
  double total_without_discount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class GetCurrentMonthUsageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.GetCurrentMonthUsageResponse) */ {
 public:
  inline GetCurrentMonthUsageResponse() : GetCurrentMonthUsageResponse(nullptr) {}
  ~GetCurrentMonthUsageResponse() override;
  explicit PROTOBUF_CONSTEXPR GetCurrentMonthUsageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCurrentMonthUsageResponse(const GetCurrentMonthUsageResponse& from);
  GetCurrentMonthUsageResponse(GetCurrentMonthUsageResponse&& from) noexcept
    : GetCurrentMonthUsageResponse() {
    *this = ::std::move(from);
  }

  inline GetCurrentMonthUsageResponse& operator=(const GetCurrentMonthUsageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCurrentMonthUsageResponse& operator=(GetCurrentMonthUsageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCurrentMonthUsageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCurrentMonthUsageResponse* internal_default_instance() {
    return reinterpret_cast<const GetCurrentMonthUsageResponse*>(
               &_GetCurrentMonthUsageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetCurrentMonthUsageResponse& a, GetCurrentMonthUsageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCurrentMonthUsageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCurrentMonthUsageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCurrentMonthUsageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCurrentMonthUsageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCurrentMonthUsageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCurrentMonthUsageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCurrentMonthUsageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.GetCurrentMonthUsageResponse";
  }
  protected:
  explicit GetCurrentMonthUsageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceUsageCostsBySourceFieldNumber = 14,
    kStartDateFieldNumber = 1,
    kEndDateFieldNumber = 2,
    kCloudStorageUsageCostFieldNumber = 3,
    kDataUploadUsageCostFieldNumber = 4,
    kDataEgresUsageCostFieldNumber = 5,
    kRemoteControlUsageCostFieldNumber = 6,
    kStandardComputeUsageCostFieldNumber = 7,
    kDiscountAmountFieldNumber = 8,
    kTotalUsageWithDiscountFieldNumber = 9,
    kTotalUsageWithoutDiscountFieldNumber = 10,
    kPerMachineUsageCostFieldNumber = 11,
    kBinaryDataCloudStorageUsageCostFieldNumber = 12,
    kOtherCloudStorageUsageCostFieldNumber = 13,
    kSubtotalFieldNumber = 15,
  };
  // repeated .viam.app.v1.ResourceUsageCostsBySource resource_usage_costs_by_source = 14 [json_name = "resourceUsageCostsBySource"];
  int resource_usage_costs_by_source_size() const;
  private:
  int _internal_resource_usage_costs_by_source_size() const;
  public:
  void clear_resource_usage_costs_by_source();
  ::viam::app::v1::ResourceUsageCostsBySource* mutable_resource_usage_costs_by_source(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::ResourceUsageCostsBySource >*
      mutable_resource_usage_costs_by_source();
  private:
  const ::viam::app::v1::ResourceUsageCostsBySource& _internal_resource_usage_costs_by_source(int index) const;
  ::viam::app::v1::ResourceUsageCostsBySource* _internal_add_resource_usage_costs_by_source();
  public:
  const ::viam::app::v1::ResourceUsageCostsBySource& resource_usage_costs_by_source(int index) const;
  ::viam::app::v1::ResourceUsageCostsBySource* add_resource_usage_costs_by_source();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::ResourceUsageCostsBySource >&
      resource_usage_costs_by_source() const;

  // .google.protobuf.Timestamp start_date = 1 [json_name = "startDate"];
  bool has_start_date() const;
  private:
  bool _internal_has_start_date() const;
  public:
  void clear_start_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_date();
  void set_allocated_start_date(::PROTOBUF_NAMESPACE_ID::Timestamp* start_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_date();
  public:
  void unsafe_arena_set_allocated_start_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_date();

  // .google.protobuf.Timestamp end_date = 2 [json_name = "endDate"];
  bool has_end_date() const;
  private:
  bool _internal_has_end_date() const;
  public:
  void clear_end_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_date();
  void set_allocated_end_date(::PROTOBUF_NAMESPACE_ID::Timestamp* end_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_date();
  public:
  void unsafe_arena_set_allocated_end_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_date();

  // double cloud_storage_usage_cost = 3 [json_name = "cloudStorageUsageCost", deprecated = true];
  PROTOBUF_DEPRECATED void clear_cloud_storage_usage_cost();
  PROTOBUF_DEPRECATED double cloud_storage_usage_cost() const;
  PROTOBUF_DEPRECATED void set_cloud_storage_usage_cost(double value);
  private:
  double _internal_cloud_storage_usage_cost() const;
  void _internal_set_cloud_storage_usage_cost(double value);
  public:

  // double data_upload_usage_cost = 4 [json_name = "dataUploadUsageCost", deprecated = true];
  PROTOBUF_DEPRECATED void clear_data_upload_usage_cost();
  PROTOBUF_DEPRECATED double data_upload_usage_cost() const;
  PROTOBUF_DEPRECATED void set_data_upload_usage_cost(double value);
  private:
  double _internal_data_upload_usage_cost() const;
  void _internal_set_data_upload_usage_cost(double value);
  public:

  // double data_egres_usage_cost = 5 [json_name = "dataEgresUsageCost", deprecated = true];
  PROTOBUF_DEPRECATED void clear_data_egres_usage_cost();
  PROTOBUF_DEPRECATED double data_egres_usage_cost() const;
  PROTOBUF_DEPRECATED void set_data_egres_usage_cost(double value);
  private:
  double _internal_data_egres_usage_cost() const;
  void _internal_set_data_egres_usage_cost(double value);
  public:

  // double remote_control_usage_cost = 6 [json_name = "remoteControlUsageCost", deprecated = true];
  PROTOBUF_DEPRECATED void clear_remote_control_usage_cost();
  PROTOBUF_DEPRECATED double remote_control_usage_cost() const;
  PROTOBUF_DEPRECATED void set_remote_control_usage_cost(double value);
  private:
  double _internal_remote_control_usage_cost() const;
  void _internal_set_remote_control_usage_cost(double value);
  public:

  // double standard_compute_usage_cost = 7 [json_name = "standardComputeUsageCost", deprecated = true];
  PROTOBUF_DEPRECATED void clear_standard_compute_usage_cost();
  PROTOBUF_DEPRECATED double standard_compute_usage_cost() const;
  PROTOBUF_DEPRECATED void set_standard_compute_usage_cost(double value);
  private:
  double _internal_standard_compute_usage_cost() const;
  void _internal_set_standard_compute_usage_cost(double value);
  public:

  // double discount_amount = 8 [json_name = "discountAmount", deprecated = true];
  PROTOBUF_DEPRECATED void clear_discount_amount();
  PROTOBUF_DEPRECATED double discount_amount() const;
  PROTOBUF_DEPRECATED void set_discount_amount(double value);
  private:
  double _internal_discount_amount() const;
  void _internal_set_discount_amount(double value);
  public:

  // double total_usage_with_discount = 9 [json_name = "totalUsageWithDiscount", deprecated = true];
  PROTOBUF_DEPRECATED void clear_total_usage_with_discount();
  PROTOBUF_DEPRECATED double total_usage_with_discount() const;
  PROTOBUF_DEPRECATED void set_total_usage_with_discount(double value);
  private:
  double _internal_total_usage_with_discount() const;
  void _internal_set_total_usage_with_discount(double value);
  public:

  // double total_usage_without_discount = 10 [json_name = "totalUsageWithoutDiscount", deprecated = true];
  PROTOBUF_DEPRECATED void clear_total_usage_without_discount();
  PROTOBUF_DEPRECATED double total_usage_without_discount() const;
  PROTOBUF_DEPRECATED void set_total_usage_without_discount(double value);
  private:
  double _internal_total_usage_without_discount() const;
  void _internal_set_total_usage_without_discount(double value);
  public:

  // double per_machine_usage_cost = 11 [json_name = "perMachineUsageCost", deprecated = true];
  PROTOBUF_DEPRECATED void clear_per_machine_usage_cost();
  PROTOBUF_DEPRECATED double per_machine_usage_cost() const;
  PROTOBUF_DEPRECATED void set_per_machine_usage_cost(double value);
  private:
  double _internal_per_machine_usage_cost() const;
  void _internal_set_per_machine_usage_cost(double value);
  public:

  // double binary_data_cloud_storage_usage_cost = 12 [json_name = "binaryDataCloudStorageUsageCost", deprecated = true];
  PROTOBUF_DEPRECATED void clear_binary_data_cloud_storage_usage_cost();
  PROTOBUF_DEPRECATED double binary_data_cloud_storage_usage_cost() const;
  PROTOBUF_DEPRECATED void set_binary_data_cloud_storage_usage_cost(double value);
  private:
  double _internal_binary_data_cloud_storage_usage_cost() const;
  void _internal_set_binary_data_cloud_storage_usage_cost(double value);
  public:

  // double other_cloud_storage_usage_cost = 13 [json_name = "otherCloudStorageUsageCost", deprecated = true];
  PROTOBUF_DEPRECATED void clear_other_cloud_storage_usage_cost();
  PROTOBUF_DEPRECATED double other_cloud_storage_usage_cost() const;
  PROTOBUF_DEPRECATED void set_other_cloud_storage_usage_cost(double value);
  private:
  double _internal_other_cloud_storage_usage_cost() const;
  void _internal_set_other_cloud_storage_usage_cost(double value);
  public:

  // double subtotal = 15 [json_name = "subtotal"];
  void clear_subtotal();
  double subtotal() const;
  void set_subtotal(double value);
  private:
  double _internal_subtotal() const;
  void _internal_set_subtotal(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.GetCurrentMonthUsageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::ResourceUsageCostsBySource > resource_usage_costs_by_source_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* start_date_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* end_date_;
  double cloud_storage_usage_cost_;
  double data_upload_usage_cost_;
  double data_egres_usage_cost_;
  double remote_control_usage_cost_;
  double standard_compute_usage_cost_;
  double discount_amount_;
  double total_usage_with_discount_;
  double total_usage_without_discount_;
  double per_machine_usage_cost_;
  double binary_data_cloud_storage_usage_cost_;
  double other_cloud_storage_usage_cost_;
  double subtotal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class GetOrgBillingInformationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.GetOrgBillingInformationRequest) */ {
 public:
  inline GetOrgBillingInformationRequest() : GetOrgBillingInformationRequest(nullptr) {}
  ~GetOrgBillingInformationRequest() override;
  explicit PROTOBUF_CONSTEXPR GetOrgBillingInformationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrgBillingInformationRequest(const GetOrgBillingInformationRequest& from);
  GetOrgBillingInformationRequest(GetOrgBillingInformationRequest&& from) noexcept
    : GetOrgBillingInformationRequest() {
    *this = ::std::move(from);
  }

  inline GetOrgBillingInformationRequest& operator=(const GetOrgBillingInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrgBillingInformationRequest& operator=(GetOrgBillingInformationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrgBillingInformationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrgBillingInformationRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrgBillingInformationRequest*>(
               &_GetOrgBillingInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetOrgBillingInformationRequest& a, GetOrgBillingInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrgBillingInformationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrgBillingInformationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrgBillingInformationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrgBillingInformationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrgBillingInformationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOrgBillingInformationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrgBillingInformationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.GetOrgBillingInformationRequest";
  }
  protected:
  explicit GetOrgBillingInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.GetOrgBillingInformationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class GetOrgBillingInformationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.GetOrgBillingInformationResponse) */ {
 public:
  inline GetOrgBillingInformationResponse() : GetOrgBillingInformationResponse(nullptr) {}
  ~GetOrgBillingInformationResponse() override;
  explicit PROTOBUF_CONSTEXPR GetOrgBillingInformationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOrgBillingInformationResponse(const GetOrgBillingInformationResponse& from);
  GetOrgBillingInformationResponse(GetOrgBillingInformationResponse&& from) noexcept
    : GetOrgBillingInformationResponse() {
    *this = ::std::move(from);
  }

  inline GetOrgBillingInformationResponse& operator=(const GetOrgBillingInformationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrgBillingInformationResponse& operator=(GetOrgBillingInformationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrgBillingInformationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrgBillingInformationResponse* internal_default_instance() {
    return reinterpret_cast<const GetOrgBillingInformationResponse*>(
               &_GetOrgBillingInformationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetOrgBillingInformationResponse& a, GetOrgBillingInformationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOrgBillingInformationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrgBillingInformationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrgBillingInformationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOrgBillingInformationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOrgBillingInformationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOrgBillingInformationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOrgBillingInformationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.GetOrgBillingInformationResponse";
  }
  protected:
  explicit GetOrgBillingInformationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBillingEmailFieldNumber = 2,
    kBillingTierFieldNumber = 4,
    kMethodFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string billing_email = 2 [json_name = "billingEmail"];
  void clear_billing_email();
  const std::string& billing_email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_billing_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_billing_email();
  PROTOBUF_NODISCARD std::string* release_billing_email();
  void set_allocated_billing_email(std::string* billing_email);
  private:
  const std::string& _internal_billing_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_billing_email(const std::string& value);
  std::string* _internal_mutable_billing_email();
  public:

  // optional string billing_tier = 4 [json_name = "billingTier"];
  bool has_billing_tier() const;
  private:
  bool _internal_has_billing_tier() const;
  public:
  void clear_billing_tier();
  const std::string& billing_tier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_billing_tier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_billing_tier();
  PROTOBUF_NODISCARD std::string* release_billing_tier();
  void set_allocated_billing_tier(std::string* billing_tier);
  private:
  const std::string& _internal_billing_tier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_billing_tier(const std::string& value);
  std::string* _internal_mutable_billing_tier();
  public:

  // optional .viam.app.v1.PaymentMethodCard method = 3 [json_name = "method"];
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const ::viam::app::v1::PaymentMethodCard& method() const;
  PROTOBUF_NODISCARD ::viam::app::v1::PaymentMethodCard* release_method();
  ::viam::app::v1::PaymentMethodCard* mutable_method();
  void set_allocated_method(::viam::app::v1::PaymentMethodCard* method);
  private:
  const ::viam::app::v1::PaymentMethodCard& _internal_method() const;
  ::viam::app::v1::PaymentMethodCard* _internal_mutable_method();
  public:
  void unsafe_arena_set_allocated_method(
      ::viam::app::v1::PaymentMethodCard* method);
  ::viam::app::v1::PaymentMethodCard* unsafe_arena_release_method();

  // .viam.app.v1.PaymentMethodType type = 1 [json_name = "type"];
  void clear_type();
  ::viam::app::v1::PaymentMethodType type() const;
  void set_type(::viam::app::v1::PaymentMethodType value);
  private:
  ::viam::app::v1::PaymentMethodType _internal_type() const;
  void _internal_set_type(::viam::app::v1::PaymentMethodType value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.GetOrgBillingInformationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr billing_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr billing_tier_;
  ::viam::app::v1::PaymentMethodCard* method_;
  int type_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class GetInvoicesSummaryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.GetInvoicesSummaryRequest) */ {
 public:
  inline GetInvoicesSummaryRequest() : GetInvoicesSummaryRequest(nullptr) {}
  ~GetInvoicesSummaryRequest() override;
  explicit PROTOBUF_CONSTEXPR GetInvoicesSummaryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInvoicesSummaryRequest(const GetInvoicesSummaryRequest& from);
  GetInvoicesSummaryRequest(GetInvoicesSummaryRequest&& from) noexcept
    : GetInvoicesSummaryRequest() {
    *this = ::std::move(from);
  }

  inline GetInvoicesSummaryRequest& operator=(const GetInvoicesSummaryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvoicesSummaryRequest& operator=(GetInvoicesSummaryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInvoicesSummaryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInvoicesSummaryRequest* internal_default_instance() {
    return reinterpret_cast<const GetInvoicesSummaryRequest*>(
               &_GetInvoicesSummaryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetInvoicesSummaryRequest& a, GetInvoicesSummaryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvoicesSummaryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInvoicesSummaryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInvoicesSummaryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInvoicesSummaryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInvoicesSummaryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInvoicesSummaryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvoicesSummaryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.GetInvoicesSummaryRequest";
  }
  protected:
  explicit GetInvoicesSummaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.GetInvoicesSummaryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class GetInvoicesSummaryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.GetInvoicesSummaryResponse) */ {
 public:
  inline GetInvoicesSummaryResponse() : GetInvoicesSummaryResponse(nullptr) {}
  ~GetInvoicesSummaryResponse() override;
  explicit PROTOBUF_CONSTEXPR GetInvoicesSummaryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInvoicesSummaryResponse(const GetInvoicesSummaryResponse& from);
  GetInvoicesSummaryResponse(GetInvoicesSummaryResponse&& from) noexcept
    : GetInvoicesSummaryResponse() {
    *this = ::std::move(from);
  }

  inline GetInvoicesSummaryResponse& operator=(const GetInvoicesSummaryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvoicesSummaryResponse& operator=(GetInvoicesSummaryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInvoicesSummaryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInvoicesSummaryResponse* internal_default_instance() {
    return reinterpret_cast<const GetInvoicesSummaryResponse*>(
               &_GetInvoicesSummaryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetInvoicesSummaryResponse& a, GetInvoicesSummaryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvoicesSummaryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInvoicesSummaryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInvoicesSummaryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInvoicesSummaryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInvoicesSummaryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInvoicesSummaryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvoicesSummaryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.GetInvoicesSummaryResponse";
  }
  protected:
  explicit GetInvoicesSummaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvoicesFieldNumber = 2,
    kOutstandingBalanceFieldNumber = 1,
  };
  // repeated .viam.app.v1.InvoiceSummary invoices = 2 [json_name = "invoices"];
  int invoices_size() const;
  private:
  int _internal_invoices_size() const;
  public:
  void clear_invoices();
  ::viam::app::v1::InvoiceSummary* mutable_invoices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::InvoiceSummary >*
      mutable_invoices();
  private:
  const ::viam::app::v1::InvoiceSummary& _internal_invoices(int index) const;
  ::viam::app::v1::InvoiceSummary* _internal_add_invoices();
  public:
  const ::viam::app::v1::InvoiceSummary& invoices(int index) const;
  ::viam::app::v1::InvoiceSummary* add_invoices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::InvoiceSummary >&
      invoices() const;

  // double outstanding_balance = 1 [json_name = "outstandingBalance"];
  void clear_outstanding_balance();
  double outstanding_balance() const;
  void set_outstanding_balance(double value);
  private:
  double _internal_outstanding_balance() const;
  void _internal_set_outstanding_balance(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.GetInvoicesSummaryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::InvoiceSummary > invoices_;
  double outstanding_balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class GetInvoicePdfRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.GetInvoicePdfRequest) */ {
 public:
  inline GetInvoicePdfRequest() : GetInvoicePdfRequest(nullptr) {}
  ~GetInvoicePdfRequest() override;
  explicit PROTOBUF_CONSTEXPR GetInvoicePdfRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInvoicePdfRequest(const GetInvoicePdfRequest& from);
  GetInvoicePdfRequest(GetInvoicePdfRequest&& from) noexcept
    : GetInvoicePdfRequest() {
    *this = ::std::move(from);
  }

  inline GetInvoicePdfRequest& operator=(const GetInvoicePdfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvoicePdfRequest& operator=(GetInvoicePdfRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInvoicePdfRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInvoicePdfRequest* internal_default_instance() {
    return reinterpret_cast<const GetInvoicePdfRequest*>(
               &_GetInvoicePdfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetInvoicePdfRequest& a, GetInvoicePdfRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvoicePdfRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInvoicePdfRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInvoicePdfRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInvoicePdfRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInvoicePdfRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInvoicePdfRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvoicePdfRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.GetInvoicePdfRequest";
  }
  protected:
  explicit GetInvoicePdfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOrgIdFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string org_id = 2 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.GetInvoicePdfRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class GetInvoicePdfResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.GetInvoicePdfResponse) */ {
 public:
  inline GetInvoicePdfResponse() : GetInvoicePdfResponse(nullptr) {}
  ~GetInvoicePdfResponse() override;
  explicit PROTOBUF_CONSTEXPR GetInvoicePdfResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInvoicePdfResponse(const GetInvoicePdfResponse& from);
  GetInvoicePdfResponse(GetInvoicePdfResponse&& from) noexcept
    : GetInvoicePdfResponse() {
    *this = ::std::move(from);
  }

  inline GetInvoicePdfResponse& operator=(const GetInvoicePdfResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInvoicePdfResponse& operator=(GetInvoicePdfResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInvoicePdfResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInvoicePdfResponse* internal_default_instance() {
    return reinterpret_cast<const GetInvoicePdfResponse*>(
               &_GetInvoicePdfResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetInvoicePdfResponse& a, GetInvoicePdfResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInvoicePdfResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInvoicePdfResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetInvoicePdfResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetInvoicePdfResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetInvoicePdfResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetInvoicePdfResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInvoicePdfResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.GetInvoicePdfResponse";
  }
  protected:
  explicit GetInvoicePdfResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkFieldNumber = 1,
  };
  // bytes chunk = 1 [json_name = "chunk"];
  void clear_chunk();
  const std::string& chunk() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chunk(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chunk();
  PROTOBUF_NODISCARD std::string* release_chunk();
  void set_allocated_chunk(std::string* chunk);
  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(const std::string& value);
  std::string* _internal_mutable_chunk();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.GetInvoicePdfResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class SendPaymentRequiredEmailRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.SendPaymentRequiredEmailRequest) */ {
 public:
  inline SendPaymentRequiredEmailRequest() : SendPaymentRequiredEmailRequest(nullptr) {}
  ~SendPaymentRequiredEmailRequest() override;
  explicit PROTOBUF_CONSTEXPR SendPaymentRequiredEmailRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPaymentRequiredEmailRequest(const SendPaymentRequiredEmailRequest& from);
  SendPaymentRequiredEmailRequest(SendPaymentRequiredEmailRequest&& from) noexcept
    : SendPaymentRequiredEmailRequest() {
    *this = ::std::move(from);
  }

  inline SendPaymentRequiredEmailRequest& operator=(const SendPaymentRequiredEmailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPaymentRequiredEmailRequest& operator=(SendPaymentRequiredEmailRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPaymentRequiredEmailRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPaymentRequiredEmailRequest* internal_default_instance() {
    return reinterpret_cast<const SendPaymentRequiredEmailRequest*>(
               &_SendPaymentRequiredEmailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SendPaymentRequiredEmailRequest& a, SendPaymentRequiredEmailRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPaymentRequiredEmailRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPaymentRequiredEmailRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPaymentRequiredEmailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPaymentRequiredEmailRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendPaymentRequiredEmailRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendPaymentRequiredEmailRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPaymentRequiredEmailRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.SendPaymentRequiredEmailRequest";
  }
  protected:
  explicit SendPaymentRequiredEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerOrgIdFieldNumber = 1,
    kBillingOwnerOrgIdFieldNumber = 2,
  };
  // string customer_org_id = 1 [json_name = "customerOrgId"];
  void clear_customer_org_id();
  const std::string& customer_org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_customer_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_customer_org_id();
  PROTOBUF_NODISCARD std::string* release_customer_org_id();
  void set_allocated_customer_org_id(std::string* customer_org_id);
  private:
  const std::string& _internal_customer_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_org_id(const std::string& value);
  std::string* _internal_mutable_customer_org_id();
  public:

  // string billing_owner_org_id = 2 [json_name = "billingOwnerOrgId"];
  void clear_billing_owner_org_id();
  const std::string& billing_owner_org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_billing_owner_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_billing_owner_org_id();
  PROTOBUF_NODISCARD std::string* release_billing_owner_org_id();
  void set_allocated_billing_owner_org_id(std::string* billing_owner_org_id);
  private:
  const std::string& _internal_billing_owner_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_billing_owner_org_id(const std::string& value);
  std::string* _internal_mutable_billing_owner_org_id();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.SendPaymentRequiredEmailRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_org_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr billing_owner_org_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class SendPaymentRequiredEmailResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.v1.SendPaymentRequiredEmailResponse) */ {
 public:
  inline SendPaymentRequiredEmailResponse() : SendPaymentRequiredEmailResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR SendPaymentRequiredEmailResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendPaymentRequiredEmailResponse(const SendPaymentRequiredEmailResponse& from);
  SendPaymentRequiredEmailResponse(SendPaymentRequiredEmailResponse&& from) noexcept
    : SendPaymentRequiredEmailResponse() {
    *this = ::std::move(from);
  }

  inline SendPaymentRequiredEmailResponse& operator=(const SendPaymentRequiredEmailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPaymentRequiredEmailResponse& operator=(SendPaymentRequiredEmailResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendPaymentRequiredEmailResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendPaymentRequiredEmailResponse* internal_default_instance() {
    return reinterpret_cast<const SendPaymentRequiredEmailResponse*>(
               &_SendPaymentRequiredEmailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SendPaymentRequiredEmailResponse& a, SendPaymentRequiredEmailResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPaymentRequiredEmailResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendPaymentRequiredEmailResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendPaymentRequiredEmailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendPaymentRequiredEmailResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SendPaymentRequiredEmailResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SendPaymentRequiredEmailResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.SendPaymentRequiredEmailResponse";
  }
  protected:
  explicit SendPaymentRequiredEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.v1.SendPaymentRequiredEmailResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class GetAvailableBillingTiersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.v1.GetAvailableBillingTiersRequest) */ {
 public:
  inline GetAvailableBillingTiersRequest() : GetAvailableBillingTiersRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetAvailableBillingTiersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAvailableBillingTiersRequest(const GetAvailableBillingTiersRequest& from);
  GetAvailableBillingTiersRequest(GetAvailableBillingTiersRequest&& from) noexcept
    : GetAvailableBillingTiersRequest() {
    *this = ::std::move(from);
  }

  inline GetAvailableBillingTiersRequest& operator=(const GetAvailableBillingTiersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAvailableBillingTiersRequest& operator=(GetAvailableBillingTiersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAvailableBillingTiersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAvailableBillingTiersRequest* internal_default_instance() {
    return reinterpret_cast<const GetAvailableBillingTiersRequest*>(
               &_GetAvailableBillingTiersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetAvailableBillingTiersRequest& a, GetAvailableBillingTiersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAvailableBillingTiersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAvailableBillingTiersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAvailableBillingTiersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAvailableBillingTiersRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetAvailableBillingTiersRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetAvailableBillingTiersRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.GetAvailableBillingTiersRequest";
  }
  protected:
  explicit GetAvailableBillingTiersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.v1.GetAvailableBillingTiersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class GetAvailableBillingTiersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.GetAvailableBillingTiersResponse) */ {
 public:
  inline GetAvailableBillingTiersResponse() : GetAvailableBillingTiersResponse(nullptr) {}
  ~GetAvailableBillingTiersResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAvailableBillingTiersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAvailableBillingTiersResponse(const GetAvailableBillingTiersResponse& from);
  GetAvailableBillingTiersResponse(GetAvailableBillingTiersResponse&& from) noexcept
    : GetAvailableBillingTiersResponse() {
    *this = ::std::move(from);
  }

  inline GetAvailableBillingTiersResponse& operator=(const GetAvailableBillingTiersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAvailableBillingTiersResponse& operator=(GetAvailableBillingTiersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAvailableBillingTiersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAvailableBillingTiersResponse* internal_default_instance() {
    return reinterpret_cast<const GetAvailableBillingTiersResponse*>(
               &_GetAvailableBillingTiersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetAvailableBillingTiersResponse& a, GetAvailableBillingTiersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAvailableBillingTiersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAvailableBillingTiersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAvailableBillingTiersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAvailableBillingTiersResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAvailableBillingTiersResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetAvailableBillingTiersResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAvailableBillingTiersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.GetAvailableBillingTiersResponse";
  }
  protected:
  explicit GetAvailableBillingTiersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTiersFieldNumber = 1,
  };
  // repeated string tiers = 1 [json_name = "tiers"];
  int tiers_size() const;
  private:
  int _internal_tiers_size() const;
  public:
  void clear_tiers();
  const std::string& tiers(int index) const;
  std::string* mutable_tiers(int index);
  void set_tiers(int index, const std::string& value);
  void set_tiers(int index, std::string&& value);
  void set_tiers(int index, const char* value);
  void set_tiers(int index, const char* value, size_t size);
  std::string* add_tiers();
  void add_tiers(const std::string& value);
  void add_tiers(std::string&& value);
  void add_tiers(const char* value);
  void add_tiers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tiers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tiers();
  private:
  const std::string& _internal_tiers(int index) const;
  std::string* _internal_add_tiers();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.GetAvailableBillingTiersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tiers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrganizationBillingTierRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.UpdateOrganizationBillingTierRequest) */ {
 public:
  inline UpdateOrganizationBillingTierRequest() : UpdateOrganizationBillingTierRequest(nullptr) {}
  ~UpdateOrganizationBillingTierRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateOrganizationBillingTierRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrganizationBillingTierRequest(const UpdateOrganizationBillingTierRequest& from);
  UpdateOrganizationBillingTierRequest(UpdateOrganizationBillingTierRequest&& from) noexcept
    : UpdateOrganizationBillingTierRequest() {
    *this = ::std::move(from);
  }

  inline UpdateOrganizationBillingTierRequest& operator=(const UpdateOrganizationBillingTierRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrganizationBillingTierRequest& operator=(UpdateOrganizationBillingTierRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrganizationBillingTierRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrganizationBillingTierRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateOrganizationBillingTierRequest*>(
               &_UpdateOrganizationBillingTierRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(UpdateOrganizationBillingTierRequest& a, UpdateOrganizationBillingTierRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrganizationBillingTierRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrganizationBillingTierRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrganizationBillingTierRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrganizationBillingTierRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateOrganizationBillingTierRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateOrganizationBillingTierRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateOrganizationBillingTierRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.UpdateOrganizationBillingTierRequest";
  }
  protected:
  explicit UpdateOrganizationBillingTierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kBillingTierFieldNumber = 2,
  };
  // string organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_NODISCARD std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // string billing_tier = 2 [json_name = "billingTier"];
  void clear_billing_tier();
  const std::string& billing_tier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_billing_tier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_billing_tier();
  PROTOBUF_NODISCARD std::string* release_billing_tier();
  void set_allocated_billing_tier(std::string* billing_tier);
  private:
  const std::string& _internal_billing_tier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_billing_tier(const std::string& value);
  std::string* _internal_mutable_billing_tier();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.UpdateOrganizationBillingTierRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr billing_tier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// -------------------------------------------------------------------

class UpdateOrganizationBillingTierResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.v1.UpdateOrganizationBillingTierResponse) */ {
 public:
  inline UpdateOrganizationBillingTierResponse() : UpdateOrganizationBillingTierResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UpdateOrganizationBillingTierResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateOrganizationBillingTierResponse(const UpdateOrganizationBillingTierResponse& from);
  UpdateOrganizationBillingTierResponse(UpdateOrganizationBillingTierResponse&& from) noexcept
    : UpdateOrganizationBillingTierResponse() {
    *this = ::std::move(from);
  }

  inline UpdateOrganizationBillingTierResponse& operator=(const UpdateOrganizationBillingTierResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateOrganizationBillingTierResponse& operator=(UpdateOrganizationBillingTierResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateOrganizationBillingTierResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateOrganizationBillingTierResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateOrganizationBillingTierResponse*>(
               &_UpdateOrganizationBillingTierResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UpdateOrganizationBillingTierResponse& a, UpdateOrganizationBillingTierResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateOrganizationBillingTierResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateOrganizationBillingTierResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateOrganizationBillingTierResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateOrganizationBillingTierResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateOrganizationBillingTierResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateOrganizationBillingTierResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.UpdateOrganizationBillingTierResponse";
  }
  protected:
  explicit UpdateOrganizationBillingTierResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.v1.UpdateOrganizationBillingTierResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_app_2fv1_2fbilling_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InvoiceSummary

// string id = 1 [json_name = "id"];
inline void InvoiceSummary::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& InvoiceSummary::id() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.InvoiceSummary.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvoiceSummary::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.InvoiceSummary.id)
}
inline std::string* InvoiceSummary::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.InvoiceSummary.id)
  return _s;
}
inline const std::string& InvoiceSummary::_internal_id() const {
  return id_.Get();
}
inline void InvoiceSummary::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* InvoiceSummary::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* InvoiceSummary::release_id() {
  // @@protoc_insertion_point(field_release:viam.app.v1.InvoiceSummary.id)
  return id_.Release();
}
inline void InvoiceSummary::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.InvoiceSummary.id)
}

// .google.protobuf.Timestamp invoice_date = 2 [json_name = "invoiceDate"];
inline bool InvoiceSummary::_internal_has_invoice_date() const {
  return this != internal_default_instance() && invoice_date_ != nullptr;
}
inline bool InvoiceSummary::has_invoice_date() const {
  return _internal_has_invoice_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& InvoiceSummary::_internal_invoice_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = invoice_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& InvoiceSummary::invoice_date() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.InvoiceSummary.invoice_date)
  return _internal_invoice_date();
}
inline void InvoiceSummary::unsafe_arena_set_allocated_invoice_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* invoice_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invoice_date_);
  }
  invoice_date_ = invoice_date;
  if (invoice_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.v1.InvoiceSummary.invoice_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* InvoiceSummary::release_invoice_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = invoice_date_;
  invoice_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* InvoiceSummary::unsafe_arena_release_invoice_date() {
  // @@protoc_insertion_point(field_release:viam.app.v1.InvoiceSummary.invoice_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = invoice_date_;
  invoice_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* InvoiceSummary::_internal_mutable_invoice_date() {
  
  if (invoice_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    invoice_date_ = p;
  }
  return invoice_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* InvoiceSummary::mutable_invoice_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_invoice_date();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.InvoiceSummary.invoice_date)
  return _msg;
}
inline void InvoiceSummary::set_allocated_invoice_date(::PROTOBUF_NAMESPACE_ID::Timestamp* invoice_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(invoice_date_);
  }
  if (invoice_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invoice_date));
    if (message_arena != submessage_arena) {
      invoice_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoice_date, submessage_arena);
    }
    
  } else {
    
  }
  invoice_date_ = invoice_date;
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.InvoiceSummary.invoice_date)
}

// double invoice_amount = 3 [json_name = "invoiceAmount"];
inline void InvoiceSummary::clear_invoice_amount() {
  invoice_amount_ = 0;
}
inline double InvoiceSummary::_internal_invoice_amount() const {
  return invoice_amount_;
}
inline double InvoiceSummary::invoice_amount() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.InvoiceSummary.invoice_amount)
  return _internal_invoice_amount();
}
inline void InvoiceSummary::_internal_set_invoice_amount(double value) {
  
  invoice_amount_ = value;
}
inline void InvoiceSummary::set_invoice_amount(double value) {
  _internal_set_invoice_amount(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.InvoiceSummary.invoice_amount)
}

// string status = 4 [json_name = "status"];
inline void InvoiceSummary::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& InvoiceSummary::status() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.InvoiceSummary.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InvoiceSummary::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.InvoiceSummary.status)
}
inline std::string* InvoiceSummary::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.InvoiceSummary.status)
  return _s;
}
inline const std::string& InvoiceSummary::_internal_status() const {
  return status_.Get();
}
inline void InvoiceSummary::_internal_set_status(const std::string& value) {
  
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* InvoiceSummary::_internal_mutable_status() {
  
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* InvoiceSummary::release_status() {
  // @@protoc_insertion_point(field_release:viam.app.v1.InvoiceSummary.status)
  return status_.Release();
}
inline void InvoiceSummary::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.InvoiceSummary.status)
}

// .google.protobuf.Timestamp due_date = 5 [json_name = "dueDate"];
inline bool InvoiceSummary::_internal_has_due_date() const {
  return this != internal_default_instance() && due_date_ != nullptr;
}
inline bool InvoiceSummary::has_due_date() const {
  return _internal_has_due_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& InvoiceSummary::_internal_due_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = due_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& InvoiceSummary::due_date() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.InvoiceSummary.due_date)
  return _internal_due_date();
}
inline void InvoiceSummary::unsafe_arena_set_allocated_due_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* due_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(due_date_);
  }
  due_date_ = due_date;
  if (due_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.v1.InvoiceSummary.due_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* InvoiceSummary::release_due_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = due_date_;
  due_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* InvoiceSummary::unsafe_arena_release_due_date() {
  // @@protoc_insertion_point(field_release:viam.app.v1.InvoiceSummary.due_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = due_date_;
  due_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* InvoiceSummary::_internal_mutable_due_date() {
  
  if (due_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    due_date_ = p;
  }
  return due_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* InvoiceSummary::mutable_due_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_due_date();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.InvoiceSummary.due_date)
  return _msg;
}
inline void InvoiceSummary::set_allocated_due_date(::PROTOBUF_NAMESPACE_ID::Timestamp* due_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(due_date_);
  }
  if (due_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(due_date));
    if (message_arena != submessage_arena) {
      due_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, due_date, submessage_arena);
    }
    
  } else {
    
  }
  due_date_ = due_date;
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.InvoiceSummary.due_date)
}

// .google.protobuf.Timestamp paid_date = 6 [json_name = "paidDate"];
inline bool InvoiceSummary::_internal_has_paid_date() const {
  return this != internal_default_instance() && paid_date_ != nullptr;
}
inline bool InvoiceSummary::has_paid_date() const {
  return _internal_has_paid_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& InvoiceSummary::_internal_paid_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = paid_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& InvoiceSummary::paid_date() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.InvoiceSummary.paid_date)
  return _internal_paid_date();
}
inline void InvoiceSummary::unsafe_arena_set_allocated_paid_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* paid_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paid_date_);
  }
  paid_date_ = paid_date;
  if (paid_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.v1.InvoiceSummary.paid_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* InvoiceSummary::release_paid_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = paid_date_;
  paid_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* InvoiceSummary::unsafe_arena_release_paid_date() {
  // @@protoc_insertion_point(field_release:viam.app.v1.InvoiceSummary.paid_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = paid_date_;
  paid_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* InvoiceSummary::_internal_mutable_paid_date() {
  
  if (paid_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    paid_date_ = p;
  }
  return paid_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* InvoiceSummary::mutable_paid_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_paid_date();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.InvoiceSummary.paid_date)
  return _msg;
}
inline void InvoiceSummary::set_allocated_paid_date(::PROTOBUF_NAMESPACE_ID::Timestamp* paid_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(paid_date_);
  }
  if (paid_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paid_date));
    if (message_arena != submessage_arena) {
      paid_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paid_date, submessage_arena);
    }
    
  } else {
    
  }
  paid_date_ = paid_date;
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.InvoiceSummary.paid_date)
}

// -------------------------------------------------------------------

// PaymentMethodCard

// string brand = 1 [json_name = "brand"];
inline void PaymentMethodCard::clear_brand() {
  brand_.ClearToEmpty();
}
inline const std::string& PaymentMethodCard::brand() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.PaymentMethodCard.brand)
  return _internal_brand();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentMethodCard::set_brand(ArgT0&& arg0, ArgT... args) {
 
 brand_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.PaymentMethodCard.brand)
}
inline std::string* PaymentMethodCard::mutable_brand() {
  std::string* _s = _internal_mutable_brand();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.PaymentMethodCard.brand)
  return _s;
}
inline const std::string& PaymentMethodCard::_internal_brand() const {
  return brand_.Get();
}
inline void PaymentMethodCard::_internal_set_brand(const std::string& value) {
  
  brand_.Set(value, GetArenaForAllocation());
}
inline std::string* PaymentMethodCard::_internal_mutable_brand() {
  
  return brand_.Mutable(GetArenaForAllocation());
}
inline std::string* PaymentMethodCard::release_brand() {
  // @@protoc_insertion_point(field_release:viam.app.v1.PaymentMethodCard.brand)
  return brand_.Release();
}
inline void PaymentMethodCard::set_allocated_brand(std::string* brand) {
  if (brand != nullptr) {
    
  } else {
    
  }
  brand_.SetAllocated(brand, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (brand_.IsDefault()) {
    brand_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.PaymentMethodCard.brand)
}

// string last_four_digits = 2 [json_name = "lastFourDigits"];
inline void PaymentMethodCard::clear_last_four_digits() {
  last_four_digits_.ClearToEmpty();
}
inline const std::string& PaymentMethodCard::last_four_digits() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.PaymentMethodCard.last_four_digits)
  return _internal_last_four_digits();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PaymentMethodCard::set_last_four_digits(ArgT0&& arg0, ArgT... args) {
 
 last_four_digits_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.PaymentMethodCard.last_four_digits)
}
inline std::string* PaymentMethodCard::mutable_last_four_digits() {
  std::string* _s = _internal_mutable_last_four_digits();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.PaymentMethodCard.last_four_digits)
  return _s;
}
inline const std::string& PaymentMethodCard::_internal_last_four_digits() const {
  return last_four_digits_.Get();
}
inline void PaymentMethodCard::_internal_set_last_four_digits(const std::string& value) {
  
  last_four_digits_.Set(value, GetArenaForAllocation());
}
inline std::string* PaymentMethodCard::_internal_mutable_last_four_digits() {
  
  return last_four_digits_.Mutable(GetArenaForAllocation());
}
inline std::string* PaymentMethodCard::release_last_four_digits() {
  // @@protoc_insertion_point(field_release:viam.app.v1.PaymentMethodCard.last_four_digits)
  return last_four_digits_.Release();
}
inline void PaymentMethodCard::set_allocated_last_four_digits(std::string* last_four_digits) {
  if (last_four_digits != nullptr) {
    
  } else {
    
  }
  last_four_digits_.SetAllocated(last_four_digits, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_four_digits_.IsDefault()) {
    last_four_digits_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.PaymentMethodCard.last_four_digits)
}

// -------------------------------------------------------------------

// GetCurrentMonthUsageRequest

// string org_id = 1 [json_name = "orgId"];
inline void GetCurrentMonthUsageRequest::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& GetCurrentMonthUsageRequest::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageRequest.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCurrentMonthUsageRequest::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageRequest.org_id)
}
inline std::string* GetCurrentMonthUsageRequest::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetCurrentMonthUsageRequest.org_id)
  return _s;
}
inline const std::string& GetCurrentMonthUsageRequest::_internal_org_id() const {
  return org_id_.Get();
}
inline void GetCurrentMonthUsageRequest::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCurrentMonthUsageRequest::_internal_mutable_org_id() {
  
  return org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetCurrentMonthUsageRequest::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.v1.GetCurrentMonthUsageRequest.org_id)
  return org_id_.Release();
}
inline void GetCurrentMonthUsageRequest::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (org_id_.IsDefault()) {
    org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetCurrentMonthUsageRequest.org_id)
}

// -------------------------------------------------------------------

// UsageCost

// .viam.app.v1.UsageCostType resource_type = 1 [json_name = "resourceType"];
inline void UsageCost::clear_resource_type() {
  resource_type_ = 0;
}
inline ::viam::app::v1::UsageCostType UsageCost::_internal_resource_type() const {
  return static_cast< ::viam::app::v1::UsageCostType >(resource_type_);
}
inline ::viam::app::v1::UsageCostType UsageCost::resource_type() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.UsageCost.resource_type)
  return _internal_resource_type();
}
inline void UsageCost::_internal_set_resource_type(::viam::app::v1::UsageCostType value) {
  
  resource_type_ = value;
}
inline void UsageCost::set_resource_type(::viam::app::v1::UsageCostType value) {
  _internal_set_resource_type(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.UsageCost.resource_type)
}

// double cost = 2 [json_name = "cost"];
inline void UsageCost::clear_cost() {
  cost_ = 0;
}
inline double UsageCost::_internal_cost() const {
  return cost_;
}
inline double UsageCost::cost() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.UsageCost.cost)
  return _internal_cost();
}
inline void UsageCost::_internal_set_cost(double value) {
  
  cost_ = value;
}
inline void UsageCost::set_cost(double value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.UsageCost.cost)
}

// -------------------------------------------------------------------

// ResourceUsageCostsBySource

// .viam.app.v1.SourceType source_type = 1 [json_name = "sourceType"];
inline void ResourceUsageCostsBySource::clear_source_type() {
  source_type_ = 0;
}
inline ::viam::app::v1::SourceType ResourceUsageCostsBySource::_internal_source_type() const {
  return static_cast< ::viam::app::v1::SourceType >(source_type_);
}
inline ::viam::app::v1::SourceType ResourceUsageCostsBySource::source_type() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.ResourceUsageCostsBySource.source_type)
  return _internal_source_type();
}
inline void ResourceUsageCostsBySource::_internal_set_source_type(::viam::app::v1::SourceType value) {
  
  source_type_ = value;
}
inline void ResourceUsageCostsBySource::set_source_type(::viam::app::v1::SourceType value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.ResourceUsageCostsBySource.source_type)
}

// .viam.app.v1.ResourceUsageCosts resource_usage_costs = 2 [json_name = "resourceUsageCosts"];
inline bool ResourceUsageCostsBySource::_internal_has_resource_usage_costs() const {
  return this != internal_default_instance() && resource_usage_costs_ != nullptr;
}
inline bool ResourceUsageCostsBySource::has_resource_usage_costs() const {
  return _internal_has_resource_usage_costs();
}
inline void ResourceUsageCostsBySource::clear_resource_usage_costs() {
  if (GetArenaForAllocation() == nullptr && resource_usage_costs_ != nullptr) {
    delete resource_usage_costs_;
  }
  resource_usage_costs_ = nullptr;
}
inline const ::viam::app::v1::ResourceUsageCosts& ResourceUsageCostsBySource::_internal_resource_usage_costs() const {
  const ::viam::app::v1::ResourceUsageCosts* p = resource_usage_costs_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::v1::ResourceUsageCosts&>(
      ::viam::app::v1::_ResourceUsageCosts_default_instance_);
}
inline const ::viam::app::v1::ResourceUsageCosts& ResourceUsageCostsBySource::resource_usage_costs() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.ResourceUsageCostsBySource.resource_usage_costs)
  return _internal_resource_usage_costs();
}
inline void ResourceUsageCostsBySource::unsafe_arena_set_allocated_resource_usage_costs(
    ::viam::app::v1::ResourceUsageCosts* resource_usage_costs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_usage_costs_);
  }
  resource_usage_costs_ = resource_usage_costs;
  if (resource_usage_costs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.v1.ResourceUsageCostsBySource.resource_usage_costs)
}
inline ::viam::app::v1::ResourceUsageCosts* ResourceUsageCostsBySource::release_resource_usage_costs() {
  
  ::viam::app::v1::ResourceUsageCosts* temp = resource_usage_costs_;
  resource_usage_costs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::v1::ResourceUsageCosts* ResourceUsageCostsBySource::unsafe_arena_release_resource_usage_costs() {
  // @@protoc_insertion_point(field_release:viam.app.v1.ResourceUsageCostsBySource.resource_usage_costs)
  
  ::viam::app::v1::ResourceUsageCosts* temp = resource_usage_costs_;
  resource_usage_costs_ = nullptr;
  return temp;
}
inline ::viam::app::v1::ResourceUsageCosts* ResourceUsageCostsBySource::_internal_mutable_resource_usage_costs() {
  
  if (resource_usage_costs_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::v1::ResourceUsageCosts>(GetArenaForAllocation());
    resource_usage_costs_ = p;
  }
  return resource_usage_costs_;
}
inline ::viam::app::v1::ResourceUsageCosts* ResourceUsageCostsBySource::mutable_resource_usage_costs() {
  ::viam::app::v1::ResourceUsageCosts* _msg = _internal_mutable_resource_usage_costs();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.ResourceUsageCostsBySource.resource_usage_costs)
  return _msg;
}
inline void ResourceUsageCostsBySource::set_allocated_resource_usage_costs(::viam::app::v1::ResourceUsageCosts* resource_usage_costs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete resource_usage_costs_;
  }
  if (resource_usage_costs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(resource_usage_costs);
    if (message_arena != submessage_arena) {
      resource_usage_costs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource_usage_costs, submessage_arena);
    }
    
  } else {
    
  }
  resource_usage_costs_ = resource_usage_costs;
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.ResourceUsageCostsBySource.resource_usage_costs)
}

// string tier_name = 3 [json_name = "tierName"];
inline void ResourceUsageCostsBySource::clear_tier_name() {
  tier_name_.ClearToEmpty();
}
inline const std::string& ResourceUsageCostsBySource::tier_name() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.ResourceUsageCostsBySource.tier_name)
  return _internal_tier_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceUsageCostsBySource::set_tier_name(ArgT0&& arg0, ArgT... args) {
 
 tier_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.ResourceUsageCostsBySource.tier_name)
}
inline std::string* ResourceUsageCostsBySource::mutable_tier_name() {
  std::string* _s = _internal_mutable_tier_name();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.ResourceUsageCostsBySource.tier_name)
  return _s;
}
inline const std::string& ResourceUsageCostsBySource::_internal_tier_name() const {
  return tier_name_.Get();
}
inline void ResourceUsageCostsBySource::_internal_set_tier_name(const std::string& value) {
  
  tier_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceUsageCostsBySource::_internal_mutable_tier_name() {
  
  return tier_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceUsageCostsBySource::release_tier_name() {
  // @@protoc_insertion_point(field_release:viam.app.v1.ResourceUsageCostsBySource.tier_name)
  return tier_name_.Release();
}
inline void ResourceUsageCostsBySource::set_allocated_tier_name(std::string* tier_name) {
  if (tier_name != nullptr) {
    
  } else {
    
  }
  tier_name_.SetAllocated(tier_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tier_name_.IsDefault()) {
    tier_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.ResourceUsageCostsBySource.tier_name)
}

// -------------------------------------------------------------------

// ResourceUsageCosts

// repeated .viam.app.v1.UsageCost usage_costs = 1 [json_name = "usageCosts"];
inline int ResourceUsageCosts::_internal_usage_costs_size() const {
  return usage_costs_.size();
}
inline int ResourceUsageCosts::usage_costs_size() const {
  return _internal_usage_costs_size();
}
inline void ResourceUsageCosts::clear_usage_costs() {
  usage_costs_.Clear();
}
inline ::viam::app::v1::UsageCost* ResourceUsageCosts::mutable_usage_costs(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.v1.ResourceUsageCosts.usage_costs)
  return usage_costs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::UsageCost >*
ResourceUsageCosts::mutable_usage_costs() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.v1.ResourceUsageCosts.usage_costs)
  return &usage_costs_;
}
inline const ::viam::app::v1::UsageCost& ResourceUsageCosts::_internal_usage_costs(int index) const {
  return usage_costs_.Get(index);
}
inline const ::viam::app::v1::UsageCost& ResourceUsageCosts::usage_costs(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.v1.ResourceUsageCosts.usage_costs)
  return _internal_usage_costs(index);
}
inline ::viam::app::v1::UsageCost* ResourceUsageCosts::_internal_add_usage_costs() {
  return usage_costs_.Add();
}
inline ::viam::app::v1::UsageCost* ResourceUsageCosts::add_usage_costs() {
  ::viam::app::v1::UsageCost* _add = _internal_add_usage_costs();
  // @@protoc_insertion_point(field_add:viam.app.v1.ResourceUsageCosts.usage_costs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::UsageCost >&
ResourceUsageCosts::usage_costs() const {
  // @@protoc_insertion_point(field_list:viam.app.v1.ResourceUsageCosts.usage_costs)
  return usage_costs_;
}

// double discount = 2 [json_name = "discount"];
inline void ResourceUsageCosts::clear_discount() {
  discount_ = 0;
}
inline double ResourceUsageCosts::_internal_discount() const {
  return discount_;
}
inline double ResourceUsageCosts::discount() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.ResourceUsageCosts.discount)
  return _internal_discount();
}
inline void ResourceUsageCosts::_internal_set_discount(double value) {
  
  discount_ = value;
}
inline void ResourceUsageCosts::set_discount(double value) {
  _internal_set_discount(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.ResourceUsageCosts.discount)
}

// double total_with_discount = 3 [json_name = "totalWithDiscount"];
inline void ResourceUsageCosts::clear_total_with_discount() {
  total_with_discount_ = 0;
}
inline double ResourceUsageCosts::_internal_total_with_discount() const {
  return total_with_discount_;
}
inline double ResourceUsageCosts::total_with_discount() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.ResourceUsageCosts.total_with_discount)
  return _internal_total_with_discount();
}
inline void ResourceUsageCosts::_internal_set_total_with_discount(double value) {
  
  total_with_discount_ = value;
}
inline void ResourceUsageCosts::set_total_with_discount(double value) {
  _internal_set_total_with_discount(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.ResourceUsageCosts.total_with_discount)
}

// double total_without_discount = 4 [json_name = "totalWithoutDiscount"];
inline void ResourceUsageCosts::clear_total_without_discount() {
  total_without_discount_ = 0;
}
inline double ResourceUsageCosts::_internal_total_without_discount() const {
  return total_without_discount_;
}
inline double ResourceUsageCosts::total_without_discount() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.ResourceUsageCosts.total_without_discount)
  return _internal_total_without_discount();
}
inline void ResourceUsageCosts::_internal_set_total_without_discount(double value) {
  
  total_without_discount_ = value;
}
inline void ResourceUsageCosts::set_total_without_discount(double value) {
  _internal_set_total_without_discount(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.ResourceUsageCosts.total_without_discount)
}

// -------------------------------------------------------------------

// GetCurrentMonthUsageResponse

// .google.protobuf.Timestamp start_date = 1 [json_name = "startDate"];
inline bool GetCurrentMonthUsageResponse::_internal_has_start_date() const {
  return this != internal_default_instance() && start_date_ != nullptr;
}
inline bool GetCurrentMonthUsageResponse::has_start_date() const {
  return _internal_has_start_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetCurrentMonthUsageResponse::_internal_start_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = start_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetCurrentMonthUsageResponse::start_date() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.start_date)
  return _internal_start_date();
}
inline void GetCurrentMonthUsageResponse::unsafe_arena_set_allocated_start_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  start_date_ = start_date;
  if (start_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.v1.GetCurrentMonthUsageResponse.start_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetCurrentMonthUsageResponse::release_start_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_date_;
  start_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetCurrentMonthUsageResponse::unsafe_arena_release_start_date() {
  // @@protoc_insertion_point(field_release:viam.app.v1.GetCurrentMonthUsageResponse.start_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_date_;
  start_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetCurrentMonthUsageResponse::_internal_mutable_start_date() {
  
  if (start_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    start_date_ = p;
  }
  return start_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetCurrentMonthUsageResponse::mutable_start_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start_date();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetCurrentMonthUsageResponse.start_date)
  return _msg;
}
inline void GetCurrentMonthUsageResponse::set_allocated_start_date(::PROTOBUF_NAMESPACE_ID::Timestamp* start_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date_);
  }
  if (start_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_date));
    if (message_arena != submessage_arena) {
      start_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_date, submessage_arena);
    }
    
  } else {
    
  }
  start_date_ = start_date;
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetCurrentMonthUsageResponse.start_date)
}

// .google.protobuf.Timestamp end_date = 2 [json_name = "endDate"];
inline bool GetCurrentMonthUsageResponse::_internal_has_end_date() const {
  return this != internal_default_instance() && end_date_ != nullptr;
}
inline bool GetCurrentMonthUsageResponse::has_end_date() const {
  return _internal_has_end_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetCurrentMonthUsageResponse::_internal_end_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = end_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetCurrentMonthUsageResponse::end_date() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.end_date)
  return _internal_end_date();
}
inline void GetCurrentMonthUsageResponse::unsafe_arena_set_allocated_end_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  end_date_ = end_date;
  if (end_date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.v1.GetCurrentMonthUsageResponse.end_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetCurrentMonthUsageResponse::release_end_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_date_;
  end_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetCurrentMonthUsageResponse::unsafe_arena_release_end_date() {
  // @@protoc_insertion_point(field_release:viam.app.v1.GetCurrentMonthUsageResponse.end_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_date_;
  end_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetCurrentMonthUsageResponse::_internal_mutable_end_date() {
  
  if (end_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    end_date_ = p;
  }
  return end_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetCurrentMonthUsageResponse::mutable_end_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end_date();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetCurrentMonthUsageResponse.end_date)
  return _msg;
}
inline void GetCurrentMonthUsageResponse::set_allocated_end_date(::PROTOBUF_NAMESPACE_ID::Timestamp* end_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date_);
  }
  if (end_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_date));
    if (message_arena != submessage_arena) {
      end_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_date, submessage_arena);
    }
    
  } else {
    
  }
  end_date_ = end_date;
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetCurrentMonthUsageResponse.end_date)
}

// repeated .viam.app.v1.ResourceUsageCostsBySource resource_usage_costs_by_source = 14 [json_name = "resourceUsageCostsBySource"];
inline int GetCurrentMonthUsageResponse::_internal_resource_usage_costs_by_source_size() const {
  return resource_usage_costs_by_source_.size();
}
inline int GetCurrentMonthUsageResponse::resource_usage_costs_by_source_size() const {
  return _internal_resource_usage_costs_by_source_size();
}
inline void GetCurrentMonthUsageResponse::clear_resource_usage_costs_by_source() {
  resource_usage_costs_by_source_.Clear();
}
inline ::viam::app::v1::ResourceUsageCostsBySource* GetCurrentMonthUsageResponse::mutable_resource_usage_costs_by_source(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetCurrentMonthUsageResponse.resource_usage_costs_by_source)
  return resource_usage_costs_by_source_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::ResourceUsageCostsBySource >*
GetCurrentMonthUsageResponse::mutable_resource_usage_costs_by_source() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.v1.GetCurrentMonthUsageResponse.resource_usage_costs_by_source)
  return &resource_usage_costs_by_source_;
}
inline const ::viam::app::v1::ResourceUsageCostsBySource& GetCurrentMonthUsageResponse::_internal_resource_usage_costs_by_source(int index) const {
  return resource_usage_costs_by_source_.Get(index);
}
inline const ::viam::app::v1::ResourceUsageCostsBySource& GetCurrentMonthUsageResponse::resource_usage_costs_by_source(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.resource_usage_costs_by_source)
  return _internal_resource_usage_costs_by_source(index);
}
inline ::viam::app::v1::ResourceUsageCostsBySource* GetCurrentMonthUsageResponse::_internal_add_resource_usage_costs_by_source() {
  return resource_usage_costs_by_source_.Add();
}
inline ::viam::app::v1::ResourceUsageCostsBySource* GetCurrentMonthUsageResponse::add_resource_usage_costs_by_source() {
  ::viam::app::v1::ResourceUsageCostsBySource* _add = _internal_add_resource_usage_costs_by_source();
  // @@protoc_insertion_point(field_add:viam.app.v1.GetCurrentMonthUsageResponse.resource_usage_costs_by_source)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::ResourceUsageCostsBySource >&
GetCurrentMonthUsageResponse::resource_usage_costs_by_source() const {
  // @@protoc_insertion_point(field_list:viam.app.v1.GetCurrentMonthUsageResponse.resource_usage_costs_by_source)
  return resource_usage_costs_by_source_;
}

// double subtotal = 15 [json_name = "subtotal"];
inline void GetCurrentMonthUsageResponse::clear_subtotal() {
  subtotal_ = 0;
}
inline double GetCurrentMonthUsageResponse::_internal_subtotal() const {
  return subtotal_;
}
inline double GetCurrentMonthUsageResponse::subtotal() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.subtotal)
  return _internal_subtotal();
}
inline void GetCurrentMonthUsageResponse::_internal_set_subtotal(double value) {
  
  subtotal_ = value;
}
inline void GetCurrentMonthUsageResponse::set_subtotal(double value) {
  _internal_set_subtotal(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageResponse.subtotal)
}

// double cloud_storage_usage_cost = 3 [json_name = "cloudStorageUsageCost", deprecated = true];
inline void GetCurrentMonthUsageResponse::clear_cloud_storage_usage_cost() {
  cloud_storage_usage_cost_ = 0;
}
inline double GetCurrentMonthUsageResponse::_internal_cloud_storage_usage_cost() const {
  return cloud_storage_usage_cost_;
}
inline double GetCurrentMonthUsageResponse::cloud_storage_usage_cost() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.cloud_storage_usage_cost)
  return _internal_cloud_storage_usage_cost();
}
inline void GetCurrentMonthUsageResponse::_internal_set_cloud_storage_usage_cost(double value) {
  
  cloud_storage_usage_cost_ = value;
}
inline void GetCurrentMonthUsageResponse::set_cloud_storage_usage_cost(double value) {
  _internal_set_cloud_storage_usage_cost(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageResponse.cloud_storage_usage_cost)
}

// double data_upload_usage_cost = 4 [json_name = "dataUploadUsageCost", deprecated = true];
inline void GetCurrentMonthUsageResponse::clear_data_upload_usage_cost() {
  data_upload_usage_cost_ = 0;
}
inline double GetCurrentMonthUsageResponse::_internal_data_upload_usage_cost() const {
  return data_upload_usage_cost_;
}
inline double GetCurrentMonthUsageResponse::data_upload_usage_cost() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.data_upload_usage_cost)
  return _internal_data_upload_usage_cost();
}
inline void GetCurrentMonthUsageResponse::_internal_set_data_upload_usage_cost(double value) {
  
  data_upload_usage_cost_ = value;
}
inline void GetCurrentMonthUsageResponse::set_data_upload_usage_cost(double value) {
  _internal_set_data_upload_usage_cost(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageResponse.data_upload_usage_cost)
}

// double data_egres_usage_cost = 5 [json_name = "dataEgresUsageCost", deprecated = true];
inline void GetCurrentMonthUsageResponse::clear_data_egres_usage_cost() {
  data_egres_usage_cost_ = 0;
}
inline double GetCurrentMonthUsageResponse::_internal_data_egres_usage_cost() const {
  return data_egres_usage_cost_;
}
inline double GetCurrentMonthUsageResponse::data_egres_usage_cost() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.data_egres_usage_cost)
  return _internal_data_egres_usage_cost();
}
inline void GetCurrentMonthUsageResponse::_internal_set_data_egres_usage_cost(double value) {
  
  data_egres_usage_cost_ = value;
}
inline void GetCurrentMonthUsageResponse::set_data_egres_usage_cost(double value) {
  _internal_set_data_egres_usage_cost(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageResponse.data_egres_usage_cost)
}

// double remote_control_usage_cost = 6 [json_name = "remoteControlUsageCost", deprecated = true];
inline void GetCurrentMonthUsageResponse::clear_remote_control_usage_cost() {
  remote_control_usage_cost_ = 0;
}
inline double GetCurrentMonthUsageResponse::_internal_remote_control_usage_cost() const {
  return remote_control_usage_cost_;
}
inline double GetCurrentMonthUsageResponse::remote_control_usage_cost() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.remote_control_usage_cost)
  return _internal_remote_control_usage_cost();
}
inline void GetCurrentMonthUsageResponse::_internal_set_remote_control_usage_cost(double value) {
  
  remote_control_usage_cost_ = value;
}
inline void GetCurrentMonthUsageResponse::set_remote_control_usage_cost(double value) {
  _internal_set_remote_control_usage_cost(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageResponse.remote_control_usage_cost)
}

// double standard_compute_usage_cost = 7 [json_name = "standardComputeUsageCost", deprecated = true];
inline void GetCurrentMonthUsageResponse::clear_standard_compute_usage_cost() {
  standard_compute_usage_cost_ = 0;
}
inline double GetCurrentMonthUsageResponse::_internal_standard_compute_usage_cost() const {
  return standard_compute_usage_cost_;
}
inline double GetCurrentMonthUsageResponse::standard_compute_usage_cost() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.standard_compute_usage_cost)
  return _internal_standard_compute_usage_cost();
}
inline void GetCurrentMonthUsageResponse::_internal_set_standard_compute_usage_cost(double value) {
  
  standard_compute_usage_cost_ = value;
}
inline void GetCurrentMonthUsageResponse::set_standard_compute_usage_cost(double value) {
  _internal_set_standard_compute_usage_cost(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageResponse.standard_compute_usage_cost)
}

// double discount_amount = 8 [json_name = "discountAmount", deprecated = true];
inline void GetCurrentMonthUsageResponse::clear_discount_amount() {
  discount_amount_ = 0;
}
inline double GetCurrentMonthUsageResponse::_internal_discount_amount() const {
  return discount_amount_;
}
inline double GetCurrentMonthUsageResponse::discount_amount() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.discount_amount)
  return _internal_discount_amount();
}
inline void GetCurrentMonthUsageResponse::_internal_set_discount_amount(double value) {
  
  discount_amount_ = value;
}
inline void GetCurrentMonthUsageResponse::set_discount_amount(double value) {
  _internal_set_discount_amount(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageResponse.discount_amount)
}

// double total_usage_with_discount = 9 [json_name = "totalUsageWithDiscount", deprecated = true];
inline void GetCurrentMonthUsageResponse::clear_total_usage_with_discount() {
  total_usage_with_discount_ = 0;
}
inline double GetCurrentMonthUsageResponse::_internal_total_usage_with_discount() const {
  return total_usage_with_discount_;
}
inline double GetCurrentMonthUsageResponse::total_usage_with_discount() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.total_usage_with_discount)
  return _internal_total_usage_with_discount();
}
inline void GetCurrentMonthUsageResponse::_internal_set_total_usage_with_discount(double value) {
  
  total_usage_with_discount_ = value;
}
inline void GetCurrentMonthUsageResponse::set_total_usage_with_discount(double value) {
  _internal_set_total_usage_with_discount(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageResponse.total_usage_with_discount)
}

// double total_usage_without_discount = 10 [json_name = "totalUsageWithoutDiscount", deprecated = true];
inline void GetCurrentMonthUsageResponse::clear_total_usage_without_discount() {
  total_usage_without_discount_ = 0;
}
inline double GetCurrentMonthUsageResponse::_internal_total_usage_without_discount() const {
  return total_usage_without_discount_;
}
inline double GetCurrentMonthUsageResponse::total_usage_without_discount() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.total_usage_without_discount)
  return _internal_total_usage_without_discount();
}
inline void GetCurrentMonthUsageResponse::_internal_set_total_usage_without_discount(double value) {
  
  total_usage_without_discount_ = value;
}
inline void GetCurrentMonthUsageResponse::set_total_usage_without_discount(double value) {
  _internal_set_total_usage_without_discount(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageResponse.total_usage_without_discount)
}

// double per_machine_usage_cost = 11 [json_name = "perMachineUsageCost", deprecated = true];
inline void GetCurrentMonthUsageResponse::clear_per_machine_usage_cost() {
  per_machine_usage_cost_ = 0;
}
inline double GetCurrentMonthUsageResponse::_internal_per_machine_usage_cost() const {
  return per_machine_usage_cost_;
}
inline double GetCurrentMonthUsageResponse::per_machine_usage_cost() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.per_machine_usage_cost)
  return _internal_per_machine_usage_cost();
}
inline void GetCurrentMonthUsageResponse::_internal_set_per_machine_usage_cost(double value) {
  
  per_machine_usage_cost_ = value;
}
inline void GetCurrentMonthUsageResponse::set_per_machine_usage_cost(double value) {
  _internal_set_per_machine_usage_cost(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageResponse.per_machine_usage_cost)
}

// double binary_data_cloud_storage_usage_cost = 12 [json_name = "binaryDataCloudStorageUsageCost", deprecated = true];
inline void GetCurrentMonthUsageResponse::clear_binary_data_cloud_storage_usage_cost() {
  binary_data_cloud_storage_usage_cost_ = 0;
}
inline double GetCurrentMonthUsageResponse::_internal_binary_data_cloud_storage_usage_cost() const {
  return binary_data_cloud_storage_usage_cost_;
}
inline double GetCurrentMonthUsageResponse::binary_data_cloud_storage_usage_cost() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.binary_data_cloud_storage_usage_cost)
  return _internal_binary_data_cloud_storage_usage_cost();
}
inline void GetCurrentMonthUsageResponse::_internal_set_binary_data_cloud_storage_usage_cost(double value) {
  
  binary_data_cloud_storage_usage_cost_ = value;
}
inline void GetCurrentMonthUsageResponse::set_binary_data_cloud_storage_usage_cost(double value) {
  _internal_set_binary_data_cloud_storage_usage_cost(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageResponse.binary_data_cloud_storage_usage_cost)
}

// double other_cloud_storage_usage_cost = 13 [json_name = "otherCloudStorageUsageCost", deprecated = true];
inline void GetCurrentMonthUsageResponse::clear_other_cloud_storage_usage_cost() {
  other_cloud_storage_usage_cost_ = 0;
}
inline double GetCurrentMonthUsageResponse::_internal_other_cloud_storage_usage_cost() const {
  return other_cloud_storage_usage_cost_;
}
inline double GetCurrentMonthUsageResponse::other_cloud_storage_usage_cost() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetCurrentMonthUsageResponse.other_cloud_storage_usage_cost)
  return _internal_other_cloud_storage_usage_cost();
}
inline void GetCurrentMonthUsageResponse::_internal_set_other_cloud_storage_usage_cost(double value) {
  
  other_cloud_storage_usage_cost_ = value;
}
inline void GetCurrentMonthUsageResponse::set_other_cloud_storage_usage_cost(double value) {
  _internal_set_other_cloud_storage_usage_cost(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetCurrentMonthUsageResponse.other_cloud_storage_usage_cost)
}

// -------------------------------------------------------------------

// GetOrgBillingInformationRequest

// string org_id = 1 [json_name = "orgId"];
inline void GetOrgBillingInformationRequest::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& GetOrgBillingInformationRequest::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetOrgBillingInformationRequest.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrgBillingInformationRequest::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetOrgBillingInformationRequest.org_id)
}
inline std::string* GetOrgBillingInformationRequest::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetOrgBillingInformationRequest.org_id)
  return _s;
}
inline const std::string& GetOrgBillingInformationRequest::_internal_org_id() const {
  return org_id_.Get();
}
inline void GetOrgBillingInformationRequest::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOrgBillingInformationRequest::_internal_mutable_org_id() {
  
  return org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOrgBillingInformationRequest::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.v1.GetOrgBillingInformationRequest.org_id)
  return org_id_.Release();
}
inline void GetOrgBillingInformationRequest::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (org_id_.IsDefault()) {
    org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetOrgBillingInformationRequest.org_id)
}

// -------------------------------------------------------------------

// GetOrgBillingInformationResponse

// .viam.app.v1.PaymentMethodType type = 1 [json_name = "type"];
inline void GetOrgBillingInformationResponse::clear_type() {
  type_ = 0;
}
inline ::viam::app::v1::PaymentMethodType GetOrgBillingInformationResponse::_internal_type() const {
  return static_cast< ::viam::app::v1::PaymentMethodType >(type_);
}
inline ::viam::app::v1::PaymentMethodType GetOrgBillingInformationResponse::type() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetOrgBillingInformationResponse.type)
  return _internal_type();
}
inline void GetOrgBillingInformationResponse::_internal_set_type(::viam::app::v1::PaymentMethodType value) {
  
  type_ = value;
}
inline void GetOrgBillingInformationResponse::set_type(::viam::app::v1::PaymentMethodType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetOrgBillingInformationResponse.type)
}

// string billing_email = 2 [json_name = "billingEmail"];
inline void GetOrgBillingInformationResponse::clear_billing_email() {
  billing_email_.ClearToEmpty();
}
inline const std::string& GetOrgBillingInformationResponse::billing_email() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetOrgBillingInformationResponse.billing_email)
  return _internal_billing_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrgBillingInformationResponse::set_billing_email(ArgT0&& arg0, ArgT... args) {
 
 billing_email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetOrgBillingInformationResponse.billing_email)
}
inline std::string* GetOrgBillingInformationResponse::mutable_billing_email() {
  std::string* _s = _internal_mutable_billing_email();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetOrgBillingInformationResponse.billing_email)
  return _s;
}
inline const std::string& GetOrgBillingInformationResponse::_internal_billing_email() const {
  return billing_email_.Get();
}
inline void GetOrgBillingInformationResponse::_internal_set_billing_email(const std::string& value) {
  
  billing_email_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOrgBillingInformationResponse::_internal_mutable_billing_email() {
  
  return billing_email_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOrgBillingInformationResponse::release_billing_email() {
  // @@protoc_insertion_point(field_release:viam.app.v1.GetOrgBillingInformationResponse.billing_email)
  return billing_email_.Release();
}
inline void GetOrgBillingInformationResponse::set_allocated_billing_email(std::string* billing_email) {
  if (billing_email != nullptr) {
    
  } else {
    
  }
  billing_email_.SetAllocated(billing_email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (billing_email_.IsDefault()) {
    billing_email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetOrgBillingInformationResponse.billing_email)
}

// optional .viam.app.v1.PaymentMethodCard method = 3 [json_name = "method"];
inline bool GetOrgBillingInformationResponse::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || method_ != nullptr);
  return value;
}
inline bool GetOrgBillingInformationResponse::has_method() const {
  return _internal_has_method();
}
inline void GetOrgBillingInformationResponse::clear_method() {
  if (method_ != nullptr) method_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::viam::app::v1::PaymentMethodCard& GetOrgBillingInformationResponse::_internal_method() const {
  const ::viam::app::v1::PaymentMethodCard* p = method_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::v1::PaymentMethodCard&>(
      ::viam::app::v1::_PaymentMethodCard_default_instance_);
}
inline const ::viam::app::v1::PaymentMethodCard& GetOrgBillingInformationResponse::method() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetOrgBillingInformationResponse.method)
  return _internal_method();
}
inline void GetOrgBillingInformationResponse::unsafe_arena_set_allocated_method(
    ::viam::app::v1::PaymentMethodCard* method) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(method_);
  }
  method_ = method;
  if (method) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.v1.GetOrgBillingInformationResponse.method)
}
inline ::viam::app::v1::PaymentMethodCard* GetOrgBillingInformationResponse::release_method() {
  _has_bits_[0] &= ~0x00000002u;
  ::viam::app::v1::PaymentMethodCard* temp = method_;
  method_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::v1::PaymentMethodCard* GetOrgBillingInformationResponse::unsafe_arena_release_method() {
  // @@protoc_insertion_point(field_release:viam.app.v1.GetOrgBillingInformationResponse.method)
  _has_bits_[0] &= ~0x00000002u;
  ::viam::app::v1::PaymentMethodCard* temp = method_;
  method_ = nullptr;
  return temp;
}
inline ::viam::app::v1::PaymentMethodCard* GetOrgBillingInformationResponse::_internal_mutable_method() {
  _has_bits_[0] |= 0x00000002u;
  if (method_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::v1::PaymentMethodCard>(GetArenaForAllocation());
    method_ = p;
  }
  return method_;
}
inline ::viam::app::v1::PaymentMethodCard* GetOrgBillingInformationResponse::mutable_method() {
  ::viam::app::v1::PaymentMethodCard* _msg = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetOrgBillingInformationResponse.method)
  return _msg;
}
inline void GetOrgBillingInformationResponse::set_allocated_method(::viam::app::v1::PaymentMethodCard* method) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete method_;
  }
  if (method) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(method);
    if (message_arena != submessage_arena) {
      method = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, method, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  method_ = method;
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetOrgBillingInformationResponse.method)
}

// optional string billing_tier = 4 [json_name = "billingTier"];
inline bool GetOrgBillingInformationResponse::_internal_has_billing_tier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetOrgBillingInformationResponse::has_billing_tier() const {
  return _internal_has_billing_tier();
}
inline void GetOrgBillingInformationResponse::clear_billing_tier() {
  billing_tier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetOrgBillingInformationResponse::billing_tier() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetOrgBillingInformationResponse.billing_tier)
  return _internal_billing_tier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOrgBillingInformationResponse::set_billing_tier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 billing_tier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetOrgBillingInformationResponse.billing_tier)
}
inline std::string* GetOrgBillingInformationResponse::mutable_billing_tier() {
  std::string* _s = _internal_mutable_billing_tier();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetOrgBillingInformationResponse.billing_tier)
  return _s;
}
inline const std::string& GetOrgBillingInformationResponse::_internal_billing_tier() const {
  return billing_tier_.Get();
}
inline void GetOrgBillingInformationResponse::_internal_set_billing_tier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  billing_tier_.Set(value, GetArenaForAllocation());
}
inline std::string* GetOrgBillingInformationResponse::_internal_mutable_billing_tier() {
  _has_bits_[0] |= 0x00000001u;
  return billing_tier_.Mutable(GetArenaForAllocation());
}
inline std::string* GetOrgBillingInformationResponse::release_billing_tier() {
  // @@protoc_insertion_point(field_release:viam.app.v1.GetOrgBillingInformationResponse.billing_tier)
  if (!_internal_has_billing_tier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = billing_tier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (billing_tier_.IsDefault()) {
    billing_tier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetOrgBillingInformationResponse::set_allocated_billing_tier(std::string* billing_tier) {
  if (billing_tier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  billing_tier_.SetAllocated(billing_tier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (billing_tier_.IsDefault()) {
    billing_tier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetOrgBillingInformationResponse.billing_tier)
}

// -------------------------------------------------------------------

// GetInvoicesSummaryRequest

// string org_id = 1 [json_name = "orgId"];
inline void GetInvoicesSummaryRequest::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& GetInvoicesSummaryRequest::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetInvoicesSummaryRequest.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInvoicesSummaryRequest::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetInvoicesSummaryRequest.org_id)
}
inline std::string* GetInvoicesSummaryRequest::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetInvoicesSummaryRequest.org_id)
  return _s;
}
inline const std::string& GetInvoicesSummaryRequest::_internal_org_id() const {
  return org_id_.Get();
}
inline void GetInvoicesSummaryRequest::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetInvoicesSummaryRequest::_internal_mutable_org_id() {
  
  return org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetInvoicesSummaryRequest::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.v1.GetInvoicesSummaryRequest.org_id)
  return org_id_.Release();
}
inline void GetInvoicesSummaryRequest::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (org_id_.IsDefault()) {
    org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetInvoicesSummaryRequest.org_id)
}

// -------------------------------------------------------------------

// GetInvoicesSummaryResponse

// double outstanding_balance = 1 [json_name = "outstandingBalance"];
inline void GetInvoicesSummaryResponse::clear_outstanding_balance() {
  outstanding_balance_ = 0;
}
inline double GetInvoicesSummaryResponse::_internal_outstanding_balance() const {
  return outstanding_balance_;
}
inline double GetInvoicesSummaryResponse::outstanding_balance() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetInvoicesSummaryResponse.outstanding_balance)
  return _internal_outstanding_balance();
}
inline void GetInvoicesSummaryResponse::_internal_set_outstanding_balance(double value) {
  
  outstanding_balance_ = value;
}
inline void GetInvoicesSummaryResponse::set_outstanding_balance(double value) {
  _internal_set_outstanding_balance(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetInvoicesSummaryResponse.outstanding_balance)
}

// repeated .viam.app.v1.InvoiceSummary invoices = 2 [json_name = "invoices"];
inline int GetInvoicesSummaryResponse::_internal_invoices_size() const {
  return invoices_.size();
}
inline int GetInvoicesSummaryResponse::invoices_size() const {
  return _internal_invoices_size();
}
inline void GetInvoicesSummaryResponse::clear_invoices() {
  invoices_.Clear();
}
inline ::viam::app::v1::InvoiceSummary* GetInvoicesSummaryResponse::mutable_invoices(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetInvoicesSummaryResponse.invoices)
  return invoices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::InvoiceSummary >*
GetInvoicesSummaryResponse::mutable_invoices() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.v1.GetInvoicesSummaryResponse.invoices)
  return &invoices_;
}
inline const ::viam::app::v1::InvoiceSummary& GetInvoicesSummaryResponse::_internal_invoices(int index) const {
  return invoices_.Get(index);
}
inline const ::viam::app::v1::InvoiceSummary& GetInvoicesSummaryResponse::invoices(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetInvoicesSummaryResponse.invoices)
  return _internal_invoices(index);
}
inline ::viam::app::v1::InvoiceSummary* GetInvoicesSummaryResponse::_internal_add_invoices() {
  return invoices_.Add();
}
inline ::viam::app::v1::InvoiceSummary* GetInvoicesSummaryResponse::add_invoices() {
  ::viam::app::v1::InvoiceSummary* _add = _internal_add_invoices();
  // @@protoc_insertion_point(field_add:viam.app.v1.GetInvoicesSummaryResponse.invoices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::v1::InvoiceSummary >&
GetInvoicesSummaryResponse::invoices() const {
  // @@protoc_insertion_point(field_list:viam.app.v1.GetInvoicesSummaryResponse.invoices)
  return invoices_;
}

// -------------------------------------------------------------------

// GetInvoicePdfRequest

// string id = 1 [json_name = "id"];
inline void GetInvoicePdfRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetInvoicePdfRequest::id() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetInvoicePdfRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInvoicePdfRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetInvoicePdfRequest.id)
}
inline std::string* GetInvoicePdfRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetInvoicePdfRequest.id)
  return _s;
}
inline const std::string& GetInvoicePdfRequest::_internal_id() const {
  return id_.Get();
}
inline void GetInvoicePdfRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetInvoicePdfRequest::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetInvoicePdfRequest::release_id() {
  // @@protoc_insertion_point(field_release:viam.app.v1.GetInvoicePdfRequest.id)
  return id_.Release();
}
inline void GetInvoicePdfRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetInvoicePdfRequest.id)
}

// string org_id = 2 [json_name = "orgId"];
inline void GetInvoicePdfRequest::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& GetInvoicePdfRequest::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetInvoicePdfRequest.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInvoicePdfRequest::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetInvoicePdfRequest.org_id)
}
inline std::string* GetInvoicePdfRequest::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetInvoicePdfRequest.org_id)
  return _s;
}
inline const std::string& GetInvoicePdfRequest::_internal_org_id() const {
  return org_id_.Get();
}
inline void GetInvoicePdfRequest::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetInvoicePdfRequest::_internal_mutable_org_id() {
  
  return org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetInvoicePdfRequest::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.v1.GetInvoicePdfRequest.org_id)
  return org_id_.Release();
}
inline void GetInvoicePdfRequest::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (org_id_.IsDefault()) {
    org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetInvoicePdfRequest.org_id)
}

// -------------------------------------------------------------------

// GetInvoicePdfResponse

// bytes chunk = 1 [json_name = "chunk"];
inline void GetInvoicePdfResponse::clear_chunk() {
  chunk_.ClearToEmpty();
}
inline const std::string& GetInvoicePdfResponse::chunk() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetInvoicePdfResponse.chunk)
  return _internal_chunk();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInvoicePdfResponse::set_chunk(ArgT0&& arg0, ArgT... args) {
 
 chunk_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetInvoicePdfResponse.chunk)
}
inline std::string* GetInvoicePdfResponse::mutable_chunk() {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetInvoicePdfResponse.chunk)
  return _s;
}
inline const std::string& GetInvoicePdfResponse::_internal_chunk() const {
  return chunk_.Get();
}
inline void GetInvoicePdfResponse::_internal_set_chunk(const std::string& value) {
  
  chunk_.Set(value, GetArenaForAllocation());
}
inline std::string* GetInvoicePdfResponse::_internal_mutable_chunk() {
  
  return chunk_.Mutable(GetArenaForAllocation());
}
inline std::string* GetInvoicePdfResponse::release_chunk() {
  // @@protoc_insertion_point(field_release:viam.app.v1.GetInvoicePdfResponse.chunk)
  return chunk_.Release();
}
inline void GetInvoicePdfResponse::set_allocated_chunk(std::string* chunk) {
  if (chunk != nullptr) {
    
  } else {
    
  }
  chunk_.SetAllocated(chunk, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chunk_.IsDefault()) {
    chunk_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetInvoicePdfResponse.chunk)
}

// -------------------------------------------------------------------

// SendPaymentRequiredEmailRequest

// string customer_org_id = 1 [json_name = "customerOrgId"];
inline void SendPaymentRequiredEmailRequest::clear_customer_org_id() {
  customer_org_id_.ClearToEmpty();
}
inline const std::string& SendPaymentRequiredEmailRequest::customer_org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.SendPaymentRequiredEmailRequest.customer_org_id)
  return _internal_customer_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendPaymentRequiredEmailRequest::set_customer_org_id(ArgT0&& arg0, ArgT... args) {
 
 customer_org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.SendPaymentRequiredEmailRequest.customer_org_id)
}
inline std::string* SendPaymentRequiredEmailRequest::mutable_customer_org_id() {
  std::string* _s = _internal_mutable_customer_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.SendPaymentRequiredEmailRequest.customer_org_id)
  return _s;
}
inline const std::string& SendPaymentRequiredEmailRequest::_internal_customer_org_id() const {
  return customer_org_id_.Get();
}
inline void SendPaymentRequiredEmailRequest::_internal_set_customer_org_id(const std::string& value) {
  
  customer_org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPaymentRequiredEmailRequest::_internal_mutable_customer_org_id() {
  
  return customer_org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SendPaymentRequiredEmailRequest::release_customer_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.v1.SendPaymentRequiredEmailRequest.customer_org_id)
  return customer_org_id_.Release();
}
inline void SendPaymentRequiredEmailRequest::set_allocated_customer_org_id(std::string* customer_org_id) {
  if (customer_org_id != nullptr) {
    
  } else {
    
  }
  customer_org_id_.SetAllocated(customer_org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (customer_org_id_.IsDefault()) {
    customer_org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.SendPaymentRequiredEmailRequest.customer_org_id)
}

// string billing_owner_org_id = 2 [json_name = "billingOwnerOrgId"];
inline void SendPaymentRequiredEmailRequest::clear_billing_owner_org_id() {
  billing_owner_org_id_.ClearToEmpty();
}
inline const std::string& SendPaymentRequiredEmailRequest::billing_owner_org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.SendPaymentRequiredEmailRequest.billing_owner_org_id)
  return _internal_billing_owner_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendPaymentRequiredEmailRequest::set_billing_owner_org_id(ArgT0&& arg0, ArgT... args) {
 
 billing_owner_org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.SendPaymentRequiredEmailRequest.billing_owner_org_id)
}
inline std::string* SendPaymentRequiredEmailRequest::mutable_billing_owner_org_id() {
  std::string* _s = _internal_mutable_billing_owner_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.SendPaymentRequiredEmailRequest.billing_owner_org_id)
  return _s;
}
inline const std::string& SendPaymentRequiredEmailRequest::_internal_billing_owner_org_id() const {
  return billing_owner_org_id_.Get();
}
inline void SendPaymentRequiredEmailRequest::_internal_set_billing_owner_org_id(const std::string& value) {
  
  billing_owner_org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SendPaymentRequiredEmailRequest::_internal_mutable_billing_owner_org_id() {
  
  return billing_owner_org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SendPaymentRequiredEmailRequest::release_billing_owner_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.v1.SendPaymentRequiredEmailRequest.billing_owner_org_id)
  return billing_owner_org_id_.Release();
}
inline void SendPaymentRequiredEmailRequest::set_allocated_billing_owner_org_id(std::string* billing_owner_org_id) {
  if (billing_owner_org_id != nullptr) {
    
  } else {
    
  }
  billing_owner_org_id_.SetAllocated(billing_owner_org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (billing_owner_org_id_.IsDefault()) {
    billing_owner_org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.SendPaymentRequiredEmailRequest.billing_owner_org_id)
}

// -------------------------------------------------------------------

// SendPaymentRequiredEmailResponse

// -------------------------------------------------------------------

// GetAvailableBillingTiersRequest

// -------------------------------------------------------------------

// GetAvailableBillingTiersResponse

// repeated string tiers = 1 [json_name = "tiers"];
inline int GetAvailableBillingTiersResponse::_internal_tiers_size() const {
  return tiers_.size();
}
inline int GetAvailableBillingTiersResponse::tiers_size() const {
  return _internal_tiers_size();
}
inline void GetAvailableBillingTiersResponse::clear_tiers() {
  tiers_.Clear();
}
inline std::string* GetAvailableBillingTiersResponse::add_tiers() {
  std::string* _s = _internal_add_tiers();
  // @@protoc_insertion_point(field_add_mutable:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
  return _s;
}
inline const std::string& GetAvailableBillingTiersResponse::_internal_tiers(int index) const {
  return tiers_.Get(index);
}
inline const std::string& GetAvailableBillingTiersResponse::tiers(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
  return _internal_tiers(index);
}
inline std::string* GetAvailableBillingTiersResponse::mutable_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
  return tiers_.Mutable(index);
}
inline void GetAvailableBillingTiersResponse::set_tiers(int index, const std::string& value) {
  tiers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
}
inline void GetAvailableBillingTiersResponse::set_tiers(int index, std::string&& value) {
  tiers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
}
inline void GetAvailableBillingTiersResponse::set_tiers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tiers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
}
inline void GetAvailableBillingTiersResponse::set_tiers(int index, const char* value, size_t size) {
  tiers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
}
inline std::string* GetAvailableBillingTiersResponse::_internal_add_tiers() {
  return tiers_.Add();
}
inline void GetAvailableBillingTiersResponse::add_tiers(const std::string& value) {
  tiers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
}
inline void GetAvailableBillingTiersResponse::add_tiers(std::string&& value) {
  tiers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
}
inline void GetAvailableBillingTiersResponse::add_tiers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tiers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
}
inline void GetAvailableBillingTiersResponse::add_tiers(const char* value, size_t size) {
  tiers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAvailableBillingTiersResponse::tiers() const {
  // @@protoc_insertion_point(field_list:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
  return tiers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAvailableBillingTiersResponse::mutable_tiers() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.v1.GetAvailableBillingTiersResponse.tiers)
  return &tiers_;
}

// -------------------------------------------------------------------

// UpdateOrganizationBillingTierRequest

// string organization_id = 1 [json_name = "organizationId"];
inline void UpdateOrganizationBillingTierRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& UpdateOrganizationBillingTierRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.UpdateOrganizationBillingTierRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateOrganizationBillingTierRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.UpdateOrganizationBillingTierRequest.organization_id)
}
inline std::string* UpdateOrganizationBillingTierRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.UpdateOrganizationBillingTierRequest.organization_id)
  return _s;
}
inline const std::string& UpdateOrganizationBillingTierRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void UpdateOrganizationBillingTierRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateOrganizationBillingTierRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateOrganizationBillingTierRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:viam.app.v1.UpdateOrganizationBillingTierRequest.organization_id)
  return organization_id_.Release();
}
inline void UpdateOrganizationBillingTierRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(organization_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (organization_id_.IsDefault()) {
    organization_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.UpdateOrganizationBillingTierRequest.organization_id)
}

// string billing_tier = 2 [json_name = "billingTier"];
inline void UpdateOrganizationBillingTierRequest::clear_billing_tier() {
  billing_tier_.ClearToEmpty();
}
inline const std::string& UpdateOrganizationBillingTierRequest::billing_tier() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.UpdateOrganizationBillingTierRequest.billing_tier)
  return _internal_billing_tier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateOrganizationBillingTierRequest::set_billing_tier(ArgT0&& arg0, ArgT... args) {
 
 billing_tier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.v1.UpdateOrganizationBillingTierRequest.billing_tier)
}
inline std::string* UpdateOrganizationBillingTierRequest::mutable_billing_tier() {
  std::string* _s = _internal_mutable_billing_tier();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.UpdateOrganizationBillingTierRequest.billing_tier)
  return _s;
}
inline const std::string& UpdateOrganizationBillingTierRequest::_internal_billing_tier() const {
  return billing_tier_.Get();
}
inline void UpdateOrganizationBillingTierRequest::_internal_set_billing_tier(const std::string& value) {
  
  billing_tier_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateOrganizationBillingTierRequest::_internal_mutable_billing_tier() {
  
  return billing_tier_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateOrganizationBillingTierRequest::release_billing_tier() {
  // @@protoc_insertion_point(field_release:viam.app.v1.UpdateOrganizationBillingTierRequest.billing_tier)
  return billing_tier_.Release();
}
inline void UpdateOrganizationBillingTierRequest::set_allocated_billing_tier(std::string* billing_tier) {
  if (billing_tier != nullptr) {
    
  } else {
    
  }
  billing_tier_.SetAllocated(billing_tier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (billing_tier_.IsDefault()) {
    billing_tier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.UpdateOrganizationBillingTierRequest.billing_tier)
}

// -------------------------------------------------------------------

// UpdateOrganizationBillingTierResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace app
}  // namespace viam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::viam::app::v1::PaymentMethodType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::app::v1::PaymentMethodType>() {
  return ::viam::app::v1::PaymentMethodType_descriptor();
}
template <> struct is_proto_enum< ::viam::app::v1::UsageCostType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::app::v1::UsageCostType>() {
  return ::viam::app::v1::UsageCostType_descriptor();
}
template <> struct is_proto_enum< ::viam::app::v1::SourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::app::v1::SourceType>() {
  return ::viam::app::v1::SourceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_2fv1_2fbilling_2eproto
