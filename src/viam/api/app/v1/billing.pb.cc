// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/v1/billing.proto

#include "app/v1/billing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace app {
namespace v1 {
PROTOBUF_CONSTEXPR InvoiceSummary::InvoiceSummary(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , invoice_date_(nullptr)
  , due_date_(nullptr)
  , paid_date_(nullptr)
  , invoice_amount_(0){}
struct InvoiceSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvoiceSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvoiceSummaryDefaultTypeInternal() {}
  union {
    InvoiceSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvoiceSummaryDefaultTypeInternal _InvoiceSummary_default_instance_;
PROTOBUF_CONSTEXPR PaymentMethodCard::PaymentMethodCard(
    ::_pbi::ConstantInitialized)
  : brand_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_four_digits_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PaymentMethodCardDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaymentMethodCardDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaymentMethodCardDefaultTypeInternal() {}
  union {
    PaymentMethodCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaymentMethodCardDefaultTypeInternal _PaymentMethodCard_default_instance_;
PROTOBUF_CONSTEXPR GetCurrentMonthUsageRequest::GetCurrentMonthUsageRequest(
    ::_pbi::ConstantInitialized)
  : org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetCurrentMonthUsageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCurrentMonthUsageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCurrentMonthUsageRequestDefaultTypeInternal() {}
  union {
    GetCurrentMonthUsageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCurrentMonthUsageRequestDefaultTypeInternal _GetCurrentMonthUsageRequest_default_instance_;
PROTOBUF_CONSTEXPR UsageCost::UsageCost(
    ::_pbi::ConstantInitialized)
  : cost_(0)
  , resource_type_(0)
{}
struct UsageCostDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UsageCostDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UsageCostDefaultTypeInternal() {}
  union {
    UsageCost _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UsageCostDefaultTypeInternal _UsageCost_default_instance_;
PROTOBUF_CONSTEXPR ResourceUsageCostsBySource::ResourceUsageCostsBySource(
    ::_pbi::ConstantInitialized)
  : tier_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , resource_usage_costs_(nullptr)
  , source_type_(0)
{}
struct ResourceUsageCostsBySourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceUsageCostsBySourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceUsageCostsBySourceDefaultTypeInternal() {}
  union {
    ResourceUsageCostsBySource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceUsageCostsBySourceDefaultTypeInternal _ResourceUsageCostsBySource_default_instance_;
PROTOBUF_CONSTEXPR ResourceUsageCosts::ResourceUsageCosts(
    ::_pbi::ConstantInitialized)
  : usage_costs_()
  , discount_(0)
  , total_with_discount_(0)
  , total_without_discount_(0){}
struct ResourceUsageCostsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceUsageCostsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceUsageCostsDefaultTypeInternal() {}
  union {
    ResourceUsageCosts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceUsageCostsDefaultTypeInternal _ResourceUsageCosts_default_instance_;
PROTOBUF_CONSTEXPR GetCurrentMonthUsageResponse::GetCurrentMonthUsageResponse(
    ::_pbi::ConstantInitialized)
  : resource_usage_costs_by_source_()
  , start_date_(nullptr)
  , end_date_(nullptr)
  , cloud_storage_usage_cost_(0)
  , data_upload_usage_cost_(0)
  , data_egres_usage_cost_(0)
  , remote_control_usage_cost_(0)
  , standard_compute_usage_cost_(0)
  , discount_amount_(0)
  , total_usage_with_discount_(0)
  , total_usage_without_discount_(0)
  , per_machine_usage_cost_(0)
  , binary_data_cloud_storage_usage_cost_(0)
  , other_cloud_storage_usage_cost_(0)
  , subtotal_(0){}
struct GetCurrentMonthUsageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCurrentMonthUsageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCurrentMonthUsageResponseDefaultTypeInternal() {}
  union {
    GetCurrentMonthUsageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCurrentMonthUsageResponseDefaultTypeInternal _GetCurrentMonthUsageResponse_default_instance_;
PROTOBUF_CONSTEXPR GetOrgBillingInformationRequest::GetOrgBillingInformationRequest(
    ::_pbi::ConstantInitialized)
  : org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetOrgBillingInformationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrgBillingInformationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrgBillingInformationRequestDefaultTypeInternal() {}
  union {
    GetOrgBillingInformationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrgBillingInformationRequestDefaultTypeInternal _GetOrgBillingInformationRequest_default_instance_;
PROTOBUF_CONSTEXPR GetOrgBillingInformationResponse::GetOrgBillingInformationResponse(
    ::_pbi::ConstantInitialized)
  : billing_email_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , billing_tier_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , method_(nullptr)
  , type_(0)
{}
struct GetOrgBillingInformationResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetOrgBillingInformationResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetOrgBillingInformationResponseDefaultTypeInternal() {}
  union {
    GetOrgBillingInformationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetOrgBillingInformationResponseDefaultTypeInternal _GetOrgBillingInformationResponse_default_instance_;
PROTOBUF_CONSTEXPR GetInvoicesSummaryRequest::GetInvoicesSummaryRequest(
    ::_pbi::ConstantInitialized)
  : org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetInvoicesSummaryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInvoicesSummaryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInvoicesSummaryRequestDefaultTypeInternal() {}
  union {
    GetInvoicesSummaryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInvoicesSummaryRequestDefaultTypeInternal _GetInvoicesSummaryRequest_default_instance_;
PROTOBUF_CONSTEXPR GetInvoicesSummaryResponse::GetInvoicesSummaryResponse(
    ::_pbi::ConstantInitialized)
  : invoices_()
  , outstanding_balance_(0){}
struct GetInvoicesSummaryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInvoicesSummaryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInvoicesSummaryResponseDefaultTypeInternal() {}
  union {
    GetInvoicesSummaryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInvoicesSummaryResponseDefaultTypeInternal _GetInvoicesSummaryResponse_default_instance_;
PROTOBUF_CONSTEXPR GetInvoicePdfRequest::GetInvoicePdfRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetInvoicePdfRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInvoicePdfRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInvoicePdfRequestDefaultTypeInternal() {}
  union {
    GetInvoicePdfRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInvoicePdfRequestDefaultTypeInternal _GetInvoicePdfRequest_default_instance_;
PROTOBUF_CONSTEXPR GetInvoicePdfResponse::GetInvoicePdfResponse(
    ::_pbi::ConstantInitialized)
  : chunk_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetInvoicePdfResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInvoicePdfResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInvoicePdfResponseDefaultTypeInternal() {}
  union {
    GetInvoicePdfResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInvoicePdfResponseDefaultTypeInternal _GetInvoicePdfResponse_default_instance_;
PROTOBUF_CONSTEXPR SendPaymentRequiredEmailRequest::SendPaymentRequiredEmailRequest(
    ::_pbi::ConstantInitialized)
  : customer_org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , billing_owner_org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SendPaymentRequiredEmailRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendPaymentRequiredEmailRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendPaymentRequiredEmailRequestDefaultTypeInternal() {}
  union {
    SendPaymentRequiredEmailRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendPaymentRequiredEmailRequestDefaultTypeInternal _SendPaymentRequiredEmailRequest_default_instance_;
PROTOBUF_CONSTEXPR SendPaymentRequiredEmailResponse::SendPaymentRequiredEmailResponse(
    ::_pbi::ConstantInitialized){}
struct SendPaymentRequiredEmailResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendPaymentRequiredEmailResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendPaymentRequiredEmailResponseDefaultTypeInternal() {}
  union {
    SendPaymentRequiredEmailResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendPaymentRequiredEmailResponseDefaultTypeInternal _SendPaymentRequiredEmailResponse_default_instance_;
}  // namespace v1
}  // namespace app
}  // namespace viam
static ::_pb::Metadata file_level_metadata_app_2fv1_2fbilling_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_app_2fv1_2fbilling_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_app_2fv1_2fbilling_2eproto = nullptr;

const uint32_t TableStruct_app_2fv1_2fbilling_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, invoice_date_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, invoice_amount_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, status_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, due_date_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, paid_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::PaymentMethodCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::PaymentMethodCard, brand_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::PaymentMethodCard, last_four_digits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageRequest, org_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::UsageCost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::UsageCost, resource_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::UsageCost, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ResourceUsageCostsBySource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ResourceUsageCostsBySource, source_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ResourceUsageCostsBySource, resource_usage_costs_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ResourceUsageCostsBySource, tier_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ResourceUsageCosts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ResourceUsageCosts, usage_costs_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ResourceUsageCosts, discount_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ResourceUsageCosts, total_with_discount_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ResourceUsageCosts, total_without_discount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, start_date_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, end_date_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, resource_usage_costs_by_source_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, subtotal_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, cloud_storage_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, data_upload_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, data_egres_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, remote_control_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, standard_compute_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, discount_amount_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, total_usage_with_discount_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, total_usage_without_discount_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, per_machine_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, binary_data_cloud_storage_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageResponse, other_cloud_storage_usage_cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetOrgBillingInformationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetOrgBillingInformationRequest, org_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetOrgBillingInformationResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetOrgBillingInformationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetOrgBillingInformationResponse, type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetOrgBillingInformationResponse, billing_email_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetOrgBillingInformationResponse, method_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetOrgBillingInformationResponse, billing_tier_),
  ~0u,
  ~0u,
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoicesSummaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoicesSummaryRequest, org_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoicesSummaryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoicesSummaryResponse, outstanding_balance_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoicesSummaryResponse, invoices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoicePdfRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoicePdfRequest, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoicePdfRequest, org_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoicePdfResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoicePdfResponse, chunk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::SendPaymentRequiredEmailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::SendPaymentRequiredEmailRequest, customer_org_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::SendPaymentRequiredEmailRequest, billing_owner_org_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::SendPaymentRequiredEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::app::v1::InvoiceSummary)},
  { 12, -1, -1, sizeof(::viam::app::v1::PaymentMethodCard)},
  { 20, -1, -1, sizeof(::viam::app::v1::GetCurrentMonthUsageRequest)},
  { 27, -1, -1, sizeof(::viam::app::v1::UsageCost)},
  { 35, -1, -1, sizeof(::viam::app::v1::ResourceUsageCostsBySource)},
  { 44, -1, -1, sizeof(::viam::app::v1::ResourceUsageCosts)},
  { 54, -1, -1, sizeof(::viam::app::v1::GetCurrentMonthUsageResponse)},
  { 75, -1, -1, sizeof(::viam::app::v1::GetOrgBillingInformationRequest)},
  { 82, 92, -1, sizeof(::viam::app::v1::GetOrgBillingInformationResponse)},
  { 96, -1, -1, sizeof(::viam::app::v1::GetInvoicesSummaryRequest)},
  { 103, -1, -1, sizeof(::viam::app::v1::GetInvoicesSummaryResponse)},
  { 111, -1, -1, sizeof(::viam::app::v1::GetInvoicePdfRequest)},
  { 119, -1, -1, sizeof(::viam::app::v1::GetInvoicePdfResponse)},
  { 126, -1, -1, sizeof(::viam::app::v1::SendPaymentRequiredEmailRequest)},
  { 134, -1, -1, sizeof(::viam::app::v1::SendPaymentRequiredEmailResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::app::v1::_InvoiceSummary_default_instance_._instance,
  &::viam::app::v1::_PaymentMethodCard_default_instance_._instance,
  &::viam::app::v1::_GetCurrentMonthUsageRequest_default_instance_._instance,
  &::viam::app::v1::_UsageCost_default_instance_._instance,
  &::viam::app::v1::_ResourceUsageCostsBySource_default_instance_._instance,
  &::viam::app::v1::_ResourceUsageCosts_default_instance_._instance,
  &::viam::app::v1::_GetCurrentMonthUsageResponse_default_instance_._instance,
  &::viam::app::v1::_GetOrgBillingInformationRequest_default_instance_._instance,
  &::viam::app::v1::_GetOrgBillingInformationResponse_default_instance_._instance,
  &::viam::app::v1::_GetInvoicesSummaryRequest_default_instance_._instance,
  &::viam::app::v1::_GetInvoicesSummaryResponse_default_instance_._instance,
  &::viam::app::v1::_GetInvoicePdfRequest_default_instance_._instance,
  &::viam::app::v1::_GetInvoicePdfResponse_default_instance_._instance,
  &::viam::app::v1::_SendPaymentRequiredEmailRequest_default_instance_._instance,
  &::viam::app::v1::_SendPaymentRequiredEmailResponse_default_instance_._instance,
};

const char descriptor_table_protodef_app_2fv1_2fbilling_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024app/v1/billing.proto\022\013viam.app.v1\032\037goo"
  "gle/protobuf/timestamp.proto\"\216\002\n\016Invoice"
  "Summary\022\016\n\002id\030\001 \001(\tR\002id\022=\n\014invoice_date\030"
  "\002 \001(\0132\032.google.protobuf.TimestampR\013invoi"
  "ceDate\022%\n\016invoice_amount\030\003 \001(\001R\rinvoiceA"
  "mount\022\026\n\006status\030\004 \001(\tR\006status\0225\n\010due_dat"
  "e\030\005 \001(\0132\032.google.protobuf.TimestampR\007due"
  "Date\0227\n\tpaid_date\030\006 \001(\0132\032.google.protobu"
  "f.TimestampR\010paidDate\"S\n\021PaymentMethodCa"
  "rd\022\024\n\005brand\030\001 \001(\tR\005brand\022(\n\020last_four_di"
  "gits\030\002 \001(\tR\016lastFourDigits\"4\n\033GetCurrent"
  "MonthUsageRequest\022\025\n\006org_id\030\001 \001(\tR\005orgId"
  "\"`\n\tUsageCost\022\?\n\rresource_type\030\001 \001(\0162\032.v"
  "iam.app.v1.UsageCostTypeR\014resourceType\022\022"
  "\n\004cost\030\002 \001(\001R\004cost\"\306\001\n\032ResourceUsageCost"
  "sBySource\0228\n\013source_type\030\001 \001(\0162\027.viam.ap"
  "p.v1.SourceTypeR\nsourceType\022Q\n\024resource_"
  "usage_costs\030\002 \001(\0132\037.viam.app.v1.Resource"
  "UsageCostsR\022resourceUsageCosts\022\033\n\ttier_n"
  "ame\030\003 \001(\tR\010tierName\"\317\001\n\022ResourceUsageCos"
  "ts\0227\n\013usage_costs\030\001 \003(\0132\026.viam.app.v1.Us"
  "ageCostR\nusageCosts\022\032\n\010discount\030\002 \001(\001R\010d"
  "iscount\022.\n\023total_with_discount\030\003 \001(\001R\021to"
  "talWithDiscount\0224\n\026total_without_discoun"
  "t\030\004 \001(\001R\024totalWithoutDiscount\"\315\007\n\034GetCur"
  "rentMonthUsageResponse\0229\n\nstart_date\030\001 \001"
  "(\0132\032.google.protobuf.TimestampR\tstartDat"
  "e\0225\n\010end_date\030\002 \001(\0132\032.google.protobuf.Ti"
  "mestampR\007endDate\022k\n\036resource_usage_costs"
  "_by_source\030\016 \003(\0132\'.viam.app.v1.ResourceU"
  "sageCostsBySourceR\032resourceUsageCostsByS"
  "ource\022\032\n\010subtotal\030\017 \001(\001R\010subtotal\022;\n\030clo"
  "ud_storage_usage_cost\030\003 \001(\001B\002\030\001R\025cloudSt"
  "orageUsageCost\0227\n\026data_upload_usage_cost"
  "\030\004 \001(\001B\002\030\001R\023dataUploadUsageCost\0225\n\025data_"
  "egres_usage_cost\030\005 \001(\001B\002\030\001R\022dataEgresUsa"
  "geCost\022=\n\031remote_control_usage_cost\030\006 \001("
  "\001B\002\030\001R\026remoteControlUsageCost\022A\n\033standar"
  "d_compute_usage_cost\030\007 \001(\001B\002\030\001R\030standard"
  "ComputeUsageCost\022+\n\017discount_amount\030\010 \001("
  "\001B\002\030\001R\016discountAmount\022=\n\031total_usage_wit"
  "h_discount\030\t \001(\001B\002\030\001R\026totalUsageWithDisc"
  "ount\022C\n\034total_usage_without_discount\030\n \001"
  "(\001B\002\030\001R\031totalUsageWithoutDiscount\0227\n\026per"
  "_machine_usage_cost\030\013 \001(\001B\002\030\001R\023perMachin"
  "eUsageCost\022Q\n$binary_data_cloud_storage_"
  "usage_cost\030\014 \001(\001B\002\030\001R\037binaryDataCloudSto"
  "rageUsageCost\022F\n\036other_cloud_storage_usa"
  "ge_cost\030\r \001(\001B\002\030\001R\032otherCloudStorageUsag"
  "eCost\"8\n\037GetOrgBillingInformationRequest"
  "\022\025\n\006org_id\030\001 \001(\tR\005orgId\"\374\001\n GetOrgBillin"
  "gInformationResponse\0222\n\004type\030\001 \001(\0162\036.via"
  "m.app.v1.PaymentMethodTypeR\004type\022#\n\rbill"
  "ing_email\030\002 \001(\tR\014billingEmail\022;\n\006method\030"
  "\003 \001(\0132\036.viam.app.v1.PaymentMethodCardH\000R"
  "\006method\210\001\001\022&\n\014billing_tier\030\004 \001(\tH\001R\013bill"
  "ingTier\210\001\001B\t\n\007_methodB\017\n\r_billing_tier\"2"
  "\n\031GetInvoicesSummaryRequest\022\025\n\006org_id\030\001 "
  "\001(\tR\005orgId\"\206\001\n\032GetInvoicesSummaryRespons"
  "e\022/\n\023outstanding_balance\030\001 \001(\001R\022outstand"
  "ingBalance\0227\n\010invoices\030\002 \003(\0132\033.viam.app."
  "v1.InvoiceSummaryR\010invoices\"=\n\024GetInvoic"
  "ePdfRequest\022\016\n\002id\030\001 \001(\tR\002id\022\025\n\006org_id\030\002 "
  "\001(\tR\005orgId\"-\n\025GetInvoicePdfResponse\022\024\n\005c"
  "hunk\030\001 \001(\014R\005chunk\"z\n\037SendPaymentRequired"
  "EmailRequest\022&\n\017customer_org_id\030\001 \001(\tR\rc"
  "ustomerOrgId\022/\n\024billing_owner_org_id\030\002 \001"
  "(\tR\021billingOwnerOrgId\"\"\n SendPaymentRequ"
  "iredEmailResponse*V\n\021PaymentMethodType\022#"
  "\n\037PAYMENT_METHOD_TYPE_UNSPECIFIED\020\000\022\034\n\030P"
  "AYMENT_METHOD_TYPE_CARD\020\001*\207\007\n\rUsageCostT"
  "ype\022\037\n\033USAGE_COST_TYPE_UNSPECIFIED\020\000\022#\n\033"
  "USAGE_COST_TYPE_DATA_UPLOAD\020\001\032\002\010\001\022#\n\033USA"
  "GE_COST_TYPE_DATA_EGRESS\020\002\032\002\010\001\022\"\n\036USAGE_"
  "COST_TYPE_REMOTE_CONTROL\020\003\022$\n USAGE_COST"
  "_TYPE_STANDARD_COMPUTE\020\004\022%\n\035USAGE_COST_T"
  "YPE_CLOUD_STORAGE\020\005\032\002\010\001\022-\n)USAGE_COST_TY"
  "PE_BINARY_DATA_CLOUD_STORAGE\020\006\022+\n#USAGE_"
  "COST_TYPE_OTHER_CLOUD_STORAGE\020\007\032\002\010\001\022\037\n\033U"
  "SAGE_COST_TYPE_PER_MACHINE\020\010\022(\n$USAGE_CO"
  "ST_TYPE_TRIGGER_NOTIFICATION\020\t\022.\n*USAGE_"
  "COST_TYPE_TABULAR_DATA_CLOUD_STORAGE\020\n\0220"
  "\n,USAGE_COST_TYPE_CONFIG_HISTORY_CLOUD_S"
  "TORAGE\020\013\022&\n\"USAGE_COST_TYPE_LOGS_CLOUD_S"
  "TORAGE\020\014\022/\n+USAGE_COST_TYPE_TRAINING_LOG"
  "S_CLOUD_STORAGE\020\r\022*\n&USAGE_COST_TYPE_PAC"
  "KAGES_CLOUD_STORAGE\020\016\022&\n\"USAGE_COST_TYPE"
  "_BINARY_DATA_UPLOAD\020\017\022\'\n#USAGE_COST_TYPE"
  "_TABULAR_DATA_UPLOAD\020\020\022\037\n\033USAGE_COST_TYP"
  "E_LOGS_UPLOAD\020\021\022&\n\"USAGE_COST_TYPE_BINAR"
  "Y_DATA_EGRESS\020\022\022\'\n#USAGE_COST_TYPE_TABUL"
  "AR_DATA_EGRESS\020\023\022\037\n\033USAGE_COST_TYPE_LOGS"
  "_EGRESS\020\024\022(\n$USAGE_COST_TYPE_TRAINING_LO"
  "GS_EGRESS\020\025*X\n\nSourceType\022\033\n\027SOURCE_TYPE"
  "_UNSPECIFIED\020\000\022\023\n\017SOURCE_TYPE_ORG\020\001\022\030\n\024S"
  "OURCE_TYPE_FRAGMENT\020\0022\260\004\n\016BillingService"
  "\022k\n\024GetCurrentMonthUsage\022(.viam.app.v1.G"
  "etCurrentMonthUsageRequest\032).viam.app.v1"
  ".GetCurrentMonthUsageResponse\022w\n\030GetOrgB"
  "illingInformation\022,.viam.app.v1.GetOrgBi"
  "llingInformationRequest\032-.viam.app.v1.Ge"
  "tOrgBillingInformationResponse\022e\n\022GetInv"
  "oicesSummary\022&.viam.app.v1.GetInvoicesSu"
  "mmaryRequest\032\'.viam.app.v1.GetInvoicesSu"
  "mmaryResponse\022X\n\rGetInvoicePdf\022!.viam.ap"
  "p.v1.GetInvoicePdfRequest\032\".viam.app.v1."
  "GetInvoicePdfResponse0\001\022w\n\030SendPaymentRe"
  "quiredEmail\022,.viam.app.v1.SendPaymentReq"
  "uiredEmailRequest\032-.viam.app.v1.SendPaym"
  "entRequiredEmailResponseB\030Z\026go.viam.com/"
  "api/app/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_app_2fv1_2fbilling_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_app_2fv1_2fbilling_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fv1_2fbilling_2eproto = {
    false, false, 4418, descriptor_table_protodef_app_2fv1_2fbilling_2eproto,
    "app/v1/billing.proto",
    &descriptor_table_app_2fv1_2fbilling_2eproto_once, descriptor_table_app_2fv1_2fbilling_2eproto_deps, 1, 15,
    schemas, file_default_instances, TableStruct_app_2fv1_2fbilling_2eproto::offsets,
    file_level_metadata_app_2fv1_2fbilling_2eproto, file_level_enum_descriptors_app_2fv1_2fbilling_2eproto,
    file_level_service_descriptors_app_2fv1_2fbilling_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fv1_2fbilling_2eproto_getter() {
  return &descriptor_table_app_2fv1_2fbilling_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fv1_2fbilling_2eproto(&descriptor_table_app_2fv1_2fbilling_2eproto);
namespace viam {
namespace app {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentMethodType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_app_2fv1_2fbilling_2eproto);
  return file_level_enum_descriptors_app_2fv1_2fbilling_2eproto[0];
}
bool PaymentMethodType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UsageCostType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_app_2fv1_2fbilling_2eproto);
  return file_level_enum_descriptors_app_2fv1_2fbilling_2eproto[1];
}
bool UsageCostType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SourceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_app_2fv1_2fbilling_2eproto);
  return file_level_enum_descriptors_app_2fv1_2fbilling_2eproto[2];
}
bool SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class InvoiceSummary::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& invoice_date(const InvoiceSummary* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& due_date(const InvoiceSummary* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& paid_date(const InvoiceSummary* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InvoiceSummary::_Internal::invoice_date(const InvoiceSummary* msg) {
  return *msg->invoice_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InvoiceSummary::_Internal::due_date(const InvoiceSummary* msg) {
  return *msg->due_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InvoiceSummary::_Internal::paid_date(const InvoiceSummary* msg) {
  return *msg->paid_date_;
}
void InvoiceSummary::clear_invoice_date() {
  if (GetArenaForAllocation() == nullptr && invoice_date_ != nullptr) {
    delete invoice_date_;
  }
  invoice_date_ = nullptr;
}
void InvoiceSummary::clear_due_date() {
  if (GetArenaForAllocation() == nullptr && due_date_ != nullptr) {
    delete due_date_;
  }
  due_date_ = nullptr;
}
void InvoiceSummary::clear_paid_date() {
  if (GetArenaForAllocation() == nullptr && paid_date_ != nullptr) {
    delete paid_date_;
  }
  paid_date_ = nullptr;
}
InvoiceSummary::InvoiceSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.InvoiceSummary)
}
InvoiceSummary::InvoiceSummary(const InvoiceSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_invoice_date()) {
    invoice_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.invoice_date_);
  } else {
    invoice_date_ = nullptr;
  }
  if (from._internal_has_due_date()) {
    due_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.due_date_);
  } else {
    due_date_ = nullptr;
  }
  if (from._internal_has_paid_date()) {
    paid_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.paid_date_);
  } else {
    paid_date_ = nullptr;
  }
  invoice_amount_ = from.invoice_amount_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.InvoiceSummary)
}

inline void InvoiceSummary::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&invoice_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&invoice_amount_) -
    reinterpret_cast<char*>(&invoice_date_)) + sizeof(invoice_amount_));
}

InvoiceSummary::~InvoiceSummary() {
  // @@protoc_insertion_point(destructor:viam.app.v1.InvoiceSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvoiceSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  status_.Destroy();
  if (this != internal_default_instance()) delete invoice_date_;
  if (this != internal_default_instance()) delete due_date_;
  if (this != internal_default_instance()) delete paid_date_;
}

void InvoiceSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvoiceSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.InvoiceSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && invoice_date_ != nullptr) {
    delete invoice_date_;
  }
  invoice_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && due_date_ != nullptr) {
    delete due_date_;
  }
  due_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && paid_date_ != nullptr) {
    delete paid_date_;
  }
  paid_date_ = nullptr;
  invoice_amount_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvoiceSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.InvoiceSummary.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp invoice_date = 2 [json_name = "invoiceDate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoice_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double invoice_amount = 3 [json_name = "invoiceAmount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          invoice_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string status = 4 [json_name = "status"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.InvoiceSummary.status"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp due_date = 5 [json_name = "dueDate"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_due_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp paid_date = 6 [json_name = "paidDate"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_paid_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvoiceSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.InvoiceSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.InvoiceSummary.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp invoice_date = 2 [json_name = "invoiceDate"];
  if (this->_internal_has_invoice_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::invoice_date(this),
        _Internal::invoice_date(this).GetCachedSize(), target, stream);
  }

  // double invoice_amount = 3 [json_name = "invoiceAmount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_invoice_amount = this->_internal_invoice_amount();
  uint64_t raw_invoice_amount;
  memcpy(&raw_invoice_amount, &tmp_invoice_amount, sizeof(tmp_invoice_amount));
  if (raw_invoice_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_invoice_amount(), target);
  }

  // string status = 4 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.InvoiceSummary.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp due_date = 5 [json_name = "dueDate"];
  if (this->_internal_has_due_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::due_date(this),
        _Internal::due_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp paid_date = 6 [json_name = "paidDate"];
  if (this->_internal_has_paid_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::paid_date(this),
        _Internal::paid_date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.InvoiceSummary)
  return target;
}

size_t InvoiceSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.InvoiceSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string status = 4 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .google.protobuf.Timestamp invoice_date = 2 [json_name = "invoiceDate"];
  if (this->_internal_has_invoice_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invoice_date_);
  }

  // .google.protobuf.Timestamp due_date = 5 [json_name = "dueDate"];
  if (this->_internal_has_due_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *due_date_);
  }

  // .google.protobuf.Timestamp paid_date = 6 [json_name = "paidDate"];
  if (this->_internal_has_paid_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paid_date_);
  }

  // double invoice_amount = 3 [json_name = "invoiceAmount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_invoice_amount = this->_internal_invoice_amount();
  uint64_t raw_invoice_amount;
  memcpy(&raw_invoice_amount, &tmp_invoice_amount, sizeof(tmp_invoice_amount));
  if (raw_invoice_amount != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvoiceSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvoiceSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvoiceSummary::GetClassData() const { return &_class_data_; }

void InvoiceSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvoiceSummary *>(to)->MergeFrom(
      static_cast<const InvoiceSummary &>(from));
}


void InvoiceSummary::MergeFrom(const InvoiceSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.InvoiceSummary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_invoice_date()) {
    _internal_mutable_invoice_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_invoice_date());
  }
  if (from._internal_has_due_date()) {
    _internal_mutable_due_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_due_date());
  }
  if (from._internal_has_paid_date()) {
    _internal_mutable_paid_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_paid_date());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_invoice_amount = from._internal_invoice_amount();
  uint64_t raw_invoice_amount;
  memcpy(&raw_invoice_amount, &tmp_invoice_amount, sizeof(tmp_invoice_amount));
  if (raw_invoice_amount != 0) {
    _internal_set_invoice_amount(from._internal_invoice_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvoiceSummary::CopyFrom(const InvoiceSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.InvoiceSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceSummary::IsInitialized() const {
  return true;
}

void InvoiceSummary::InternalSwap(InvoiceSummary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvoiceSummary, invoice_amount_)
      + sizeof(InvoiceSummary::invoice_amount_)
      - PROTOBUF_FIELD_OFFSET(InvoiceSummary, invoice_date_)>(
          reinterpret_cast<char*>(&invoice_date_),
          reinterpret_cast<char*>(&other->invoice_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvoiceSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[0]);
}

// ===================================================================

class PaymentMethodCard::_Internal {
 public:
};

PaymentMethodCard::PaymentMethodCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.PaymentMethodCard)
}
PaymentMethodCard::PaymentMethodCard(const PaymentMethodCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  brand_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    brand_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_brand().empty()) {
    brand_.Set(from._internal_brand(), 
      GetArenaForAllocation());
  }
  last_four_digits_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_four_digits_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_four_digits().empty()) {
    last_four_digits_.Set(from._internal_last_four_digits(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.PaymentMethodCard)
}

inline void PaymentMethodCard::SharedCtor() {
brand_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  brand_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_four_digits_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_four_digits_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PaymentMethodCard::~PaymentMethodCard() {
  // @@protoc_insertion_point(destructor:viam.app.v1.PaymentMethodCard)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaymentMethodCard::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  brand_.Destroy();
  last_four_digits_.Destroy();
}

void PaymentMethodCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaymentMethodCard::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.PaymentMethodCard)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  brand_.ClearToEmpty();
  last_four_digits_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentMethodCard::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string brand = 1 [json_name = "brand"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_brand();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.PaymentMethodCard.brand"));
        } else
          goto handle_unusual;
        continue;
      // string last_four_digits = 2 [json_name = "lastFourDigits"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_last_four_digits();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.PaymentMethodCard.last_four_digits"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaymentMethodCard::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.PaymentMethodCard)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string brand = 1 [json_name = "brand"];
  if (!this->_internal_brand().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_brand().data(), static_cast<int>(this->_internal_brand().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.PaymentMethodCard.brand");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_brand(), target);
  }

  // string last_four_digits = 2 [json_name = "lastFourDigits"];
  if (!this->_internal_last_four_digits().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_four_digits().data(), static_cast<int>(this->_internal_last_four_digits().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.PaymentMethodCard.last_four_digits");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_last_four_digits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.PaymentMethodCard)
  return target;
}

size_t PaymentMethodCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.PaymentMethodCard)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string brand = 1 [json_name = "brand"];
  if (!this->_internal_brand().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_brand());
  }

  // string last_four_digits = 2 [json_name = "lastFourDigits"];
  if (!this->_internal_last_four_digits().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_four_digits());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaymentMethodCard::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaymentMethodCard::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaymentMethodCard::GetClassData() const { return &_class_data_; }

void PaymentMethodCard::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PaymentMethodCard *>(to)->MergeFrom(
      static_cast<const PaymentMethodCard &>(from));
}


void PaymentMethodCard::MergeFrom(const PaymentMethodCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.PaymentMethodCard)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_brand().empty()) {
    _internal_set_brand(from._internal_brand());
  }
  if (!from._internal_last_four_digits().empty()) {
    _internal_set_last_four_digits(from._internal_last_four_digits());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaymentMethodCard::CopyFrom(const PaymentMethodCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.PaymentMethodCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentMethodCard::IsInitialized() const {
  return true;
}

void PaymentMethodCard::InternalSwap(PaymentMethodCard* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &brand_, lhs_arena,
      &other->brand_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_four_digits_, lhs_arena,
      &other->last_four_digits_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentMethodCard::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[1]);
}

// ===================================================================

class GetCurrentMonthUsageRequest::_Internal {
 public:
};

GetCurrentMonthUsageRequest::GetCurrentMonthUsageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetCurrentMonthUsageRequest)
}
GetCurrentMonthUsageRequest::GetCurrentMonthUsageRequest(const GetCurrentMonthUsageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetCurrentMonthUsageRequest)
}

inline void GetCurrentMonthUsageRequest::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetCurrentMonthUsageRequest::~GetCurrentMonthUsageRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetCurrentMonthUsageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCurrentMonthUsageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  org_id_.Destroy();
}

void GetCurrentMonthUsageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCurrentMonthUsageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetCurrentMonthUsageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCurrentMonthUsageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetCurrentMonthUsageRequest.org_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCurrentMonthUsageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetCurrentMonthUsageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetCurrentMonthUsageRequest.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetCurrentMonthUsageRequest)
  return target;
}

size_t GetCurrentMonthUsageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetCurrentMonthUsageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCurrentMonthUsageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCurrentMonthUsageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCurrentMonthUsageRequest::GetClassData() const { return &_class_data_; }

void GetCurrentMonthUsageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCurrentMonthUsageRequest *>(to)->MergeFrom(
      static_cast<const GetCurrentMonthUsageRequest &>(from));
}


void GetCurrentMonthUsageRequest::MergeFrom(const GetCurrentMonthUsageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetCurrentMonthUsageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCurrentMonthUsageRequest::CopyFrom(const GetCurrentMonthUsageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetCurrentMonthUsageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrentMonthUsageRequest::IsInitialized() const {
  return true;
}

void GetCurrentMonthUsageRequest::InternalSwap(GetCurrentMonthUsageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCurrentMonthUsageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[2]);
}

// ===================================================================

class UsageCost::_Internal {
 public:
};

UsageCost::UsageCost(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.UsageCost)
}
UsageCost::UsageCost(const UsageCost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cost_, &from.cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&resource_type_) -
    reinterpret_cast<char*>(&cost_)) + sizeof(resource_type_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.UsageCost)
}

inline void UsageCost::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cost_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resource_type_) -
    reinterpret_cast<char*>(&cost_)) + sizeof(resource_type_));
}

UsageCost::~UsageCost() {
  // @@protoc_insertion_point(destructor:viam.app.v1.UsageCost)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UsageCost::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UsageCost::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UsageCost::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.UsageCost)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resource_type_) -
      reinterpret_cast<char*>(&cost_)) + sizeof(resource_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsageCost::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.v1.UsageCostType resource_type = 1 [json_name = "resourceType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resource_type(static_cast<::viam::app::v1::UsageCostType>(val));
        } else
          goto handle_unusual;
        continue;
      // double cost = 2 [json_name = "cost"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UsageCost::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.UsageCost)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.v1.UsageCostType resource_type = 1 [json_name = "resourceType"];
  if (this->_internal_resource_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_resource_type(), target);
  }

  // double cost = 2 [json_name = "cost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cost = this->_internal_cost();
  uint64_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_cost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.UsageCost)
  return target;
}

size_t UsageCost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.UsageCost)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double cost = 2 [json_name = "cost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cost = this->_internal_cost();
  uint64_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    total_size += 1 + 8;
  }

  // .viam.app.v1.UsageCostType resource_type = 1 [json_name = "resourceType"];
  if (this->_internal_resource_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resource_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsageCost::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UsageCost::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsageCost::GetClassData() const { return &_class_data_; }

void UsageCost::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UsageCost *>(to)->MergeFrom(
      static_cast<const UsageCost &>(from));
}


void UsageCost::MergeFrom(const UsageCost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.UsageCost)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cost = from._internal_cost();
  uint64_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    _internal_set_cost(from._internal_cost());
  }
  if (from._internal_resource_type() != 0) {
    _internal_set_resource_type(from._internal_resource_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsageCost::CopyFrom(const UsageCost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.UsageCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsageCost::IsInitialized() const {
  return true;
}

void UsageCost::InternalSwap(UsageCost* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UsageCost, resource_type_)
      + sizeof(UsageCost::resource_type_)
      - PROTOBUF_FIELD_OFFSET(UsageCost, cost_)>(
          reinterpret_cast<char*>(&cost_),
          reinterpret_cast<char*>(&other->cost_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UsageCost::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[3]);
}

// ===================================================================

class ResourceUsageCostsBySource::_Internal {
 public:
  static const ::viam::app::v1::ResourceUsageCosts& resource_usage_costs(const ResourceUsageCostsBySource* msg);
};

const ::viam::app::v1::ResourceUsageCosts&
ResourceUsageCostsBySource::_Internal::resource_usage_costs(const ResourceUsageCostsBySource* msg) {
  return *msg->resource_usage_costs_;
}
ResourceUsageCostsBySource::ResourceUsageCostsBySource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.ResourceUsageCostsBySource)
}
ResourceUsageCostsBySource::ResourceUsageCostsBySource(const ResourceUsageCostsBySource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tier_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tier_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tier_name().empty()) {
    tier_name_.Set(from._internal_tier_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_resource_usage_costs()) {
    resource_usage_costs_ = new ::viam::app::v1::ResourceUsageCosts(*from.resource_usage_costs_);
  } else {
    resource_usage_costs_ = nullptr;
  }
  source_type_ = from.source_type_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.ResourceUsageCostsBySource)
}

inline void ResourceUsageCostsBySource::SharedCtor() {
tier_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tier_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resource_usage_costs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_type_) -
    reinterpret_cast<char*>(&resource_usage_costs_)) + sizeof(source_type_));
}

ResourceUsageCostsBySource::~ResourceUsageCostsBySource() {
  // @@protoc_insertion_point(destructor:viam.app.v1.ResourceUsageCostsBySource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceUsageCostsBySource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tier_name_.Destroy();
  if (this != internal_default_instance()) delete resource_usage_costs_;
}

void ResourceUsageCostsBySource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceUsageCostsBySource::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.ResourceUsageCostsBySource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tier_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && resource_usage_costs_ != nullptr) {
    delete resource_usage_costs_;
  }
  resource_usage_costs_ = nullptr;
  source_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceUsageCostsBySource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.v1.SourceType source_type = 1 [json_name = "sourceType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source_type(static_cast<::viam::app::v1::SourceType>(val));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.v1.ResourceUsageCosts resource_usage_costs = 2 [json_name = "resourceUsageCosts"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource_usage_costs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string tier_name = 3 [json_name = "tierName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tier_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ResourceUsageCostsBySource.tier_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceUsageCostsBySource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.ResourceUsageCostsBySource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.v1.SourceType source_type = 1 [json_name = "sourceType"];
  if (this->_internal_source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_source_type(), target);
  }

  // .viam.app.v1.ResourceUsageCosts resource_usage_costs = 2 [json_name = "resourceUsageCosts"];
  if (this->_internal_has_resource_usage_costs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::resource_usage_costs(this),
        _Internal::resource_usage_costs(this).GetCachedSize(), target, stream);
  }

  // string tier_name = 3 [json_name = "tierName"];
  if (!this->_internal_tier_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tier_name().data(), static_cast<int>(this->_internal_tier_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ResourceUsageCostsBySource.tier_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tier_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.ResourceUsageCostsBySource)
  return target;
}

size_t ResourceUsageCostsBySource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.ResourceUsageCostsBySource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tier_name = 3 [json_name = "tierName"];
  if (!this->_internal_tier_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tier_name());
  }

  // .viam.app.v1.ResourceUsageCosts resource_usage_costs = 2 [json_name = "resourceUsageCosts"];
  if (this->_internal_has_resource_usage_costs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_usage_costs_);
  }

  // .viam.app.v1.SourceType source_type = 1 [json_name = "sourceType"];
  if (this->_internal_source_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceUsageCostsBySource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceUsageCostsBySource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceUsageCostsBySource::GetClassData() const { return &_class_data_; }

void ResourceUsageCostsBySource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResourceUsageCostsBySource *>(to)->MergeFrom(
      static_cast<const ResourceUsageCostsBySource &>(from));
}


void ResourceUsageCostsBySource::MergeFrom(const ResourceUsageCostsBySource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.ResourceUsageCostsBySource)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tier_name().empty()) {
    _internal_set_tier_name(from._internal_tier_name());
  }
  if (from._internal_has_resource_usage_costs()) {
    _internal_mutable_resource_usage_costs()->::viam::app::v1::ResourceUsageCosts::MergeFrom(from._internal_resource_usage_costs());
  }
  if (from._internal_source_type() != 0) {
    _internal_set_source_type(from._internal_source_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceUsageCostsBySource::CopyFrom(const ResourceUsageCostsBySource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.ResourceUsageCostsBySource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceUsageCostsBySource::IsInitialized() const {
  return true;
}

void ResourceUsageCostsBySource::InternalSwap(ResourceUsageCostsBySource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tier_name_, lhs_arena,
      &other->tier_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceUsageCostsBySource, source_type_)
      + sizeof(ResourceUsageCostsBySource::source_type_)
      - PROTOBUF_FIELD_OFFSET(ResourceUsageCostsBySource, resource_usage_costs_)>(
          reinterpret_cast<char*>(&resource_usage_costs_),
          reinterpret_cast<char*>(&other->resource_usage_costs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceUsageCostsBySource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[4]);
}

// ===================================================================

class ResourceUsageCosts::_Internal {
 public:
};

ResourceUsageCosts::ResourceUsageCosts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  usage_costs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.ResourceUsageCosts)
}
ResourceUsageCosts::ResourceUsageCosts(const ResourceUsageCosts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      usage_costs_(from.usage_costs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&discount_, &from.discount_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_without_discount_) -
    reinterpret_cast<char*>(&discount_)) + sizeof(total_without_discount_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.ResourceUsageCosts)
}

inline void ResourceUsageCosts::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&discount_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_without_discount_) -
    reinterpret_cast<char*>(&discount_)) + sizeof(total_without_discount_));
}

ResourceUsageCosts::~ResourceUsageCosts() {
  // @@protoc_insertion_point(destructor:viam.app.v1.ResourceUsageCosts)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceUsageCosts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourceUsageCosts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceUsageCosts::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.ResourceUsageCosts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usage_costs_.Clear();
  ::memset(&discount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_without_discount_) -
      reinterpret_cast<char*>(&discount_)) + sizeof(total_without_discount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceUsageCosts::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.app.v1.UsageCost usage_costs = 1 [json_name = "usageCosts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_usage_costs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double discount = 2 [json_name = "discount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_with_discount = 3 [json_name = "totalWithDiscount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          total_with_discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_without_discount = 4 [json_name = "totalWithoutDiscount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          total_without_discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceUsageCosts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.ResourceUsageCosts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.app.v1.UsageCost usage_costs = 1 [json_name = "usageCosts"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_usage_costs_size()); i < n; i++) {
    const auto& repfield = this->_internal_usage_costs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double discount = 2 [json_name = "discount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_discount = this->_internal_discount();
  uint64_t raw_discount;
  memcpy(&raw_discount, &tmp_discount, sizeof(tmp_discount));
  if (raw_discount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_discount(), target);
  }

  // double total_with_discount = 3 [json_name = "totalWithDiscount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_with_discount = this->_internal_total_with_discount();
  uint64_t raw_total_with_discount;
  memcpy(&raw_total_with_discount, &tmp_total_with_discount, sizeof(tmp_total_with_discount));
  if (raw_total_with_discount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_total_with_discount(), target);
  }

  // double total_without_discount = 4 [json_name = "totalWithoutDiscount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_without_discount = this->_internal_total_without_discount();
  uint64_t raw_total_without_discount;
  memcpy(&raw_total_without_discount, &tmp_total_without_discount, sizeof(tmp_total_without_discount));
  if (raw_total_without_discount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_total_without_discount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.ResourceUsageCosts)
  return target;
}

size_t ResourceUsageCosts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.ResourceUsageCosts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.v1.UsageCost usage_costs = 1 [json_name = "usageCosts"];
  total_size += 1UL * this->_internal_usage_costs_size();
  for (const auto& msg : this->usage_costs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double discount = 2 [json_name = "discount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_discount = this->_internal_discount();
  uint64_t raw_discount;
  memcpy(&raw_discount, &tmp_discount, sizeof(tmp_discount));
  if (raw_discount != 0) {
    total_size += 1 + 8;
  }

  // double total_with_discount = 3 [json_name = "totalWithDiscount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_with_discount = this->_internal_total_with_discount();
  uint64_t raw_total_with_discount;
  memcpy(&raw_total_with_discount, &tmp_total_with_discount, sizeof(tmp_total_with_discount));
  if (raw_total_with_discount != 0) {
    total_size += 1 + 8;
  }

  // double total_without_discount = 4 [json_name = "totalWithoutDiscount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_without_discount = this->_internal_total_without_discount();
  uint64_t raw_total_without_discount;
  memcpy(&raw_total_without_discount, &tmp_total_without_discount, sizeof(tmp_total_without_discount));
  if (raw_total_without_discount != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceUsageCosts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceUsageCosts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceUsageCosts::GetClassData() const { return &_class_data_; }

void ResourceUsageCosts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResourceUsageCosts *>(to)->MergeFrom(
      static_cast<const ResourceUsageCosts &>(from));
}


void ResourceUsageCosts::MergeFrom(const ResourceUsageCosts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.ResourceUsageCosts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  usage_costs_.MergeFrom(from.usage_costs_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_discount = from._internal_discount();
  uint64_t raw_discount;
  memcpy(&raw_discount, &tmp_discount, sizeof(tmp_discount));
  if (raw_discount != 0) {
    _internal_set_discount(from._internal_discount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_with_discount = from._internal_total_with_discount();
  uint64_t raw_total_with_discount;
  memcpy(&raw_total_with_discount, &tmp_total_with_discount, sizeof(tmp_total_with_discount));
  if (raw_total_with_discount != 0) {
    _internal_set_total_with_discount(from._internal_total_with_discount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_without_discount = from._internal_total_without_discount();
  uint64_t raw_total_without_discount;
  memcpy(&raw_total_without_discount, &tmp_total_without_discount, sizeof(tmp_total_without_discount));
  if (raw_total_without_discount != 0) {
    _internal_set_total_without_discount(from._internal_total_without_discount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceUsageCosts::CopyFrom(const ResourceUsageCosts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.ResourceUsageCosts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceUsageCosts::IsInitialized() const {
  return true;
}

void ResourceUsageCosts::InternalSwap(ResourceUsageCosts* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  usage_costs_.InternalSwap(&other->usage_costs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceUsageCosts, total_without_discount_)
      + sizeof(ResourceUsageCosts::total_without_discount_)
      - PROTOBUF_FIELD_OFFSET(ResourceUsageCosts, discount_)>(
          reinterpret_cast<char*>(&discount_),
          reinterpret_cast<char*>(&other->discount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceUsageCosts::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[5]);
}

// ===================================================================

class GetCurrentMonthUsageResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start_date(const GetCurrentMonthUsageResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end_date(const GetCurrentMonthUsageResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetCurrentMonthUsageResponse::_Internal::start_date(const GetCurrentMonthUsageResponse* msg) {
  return *msg->start_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetCurrentMonthUsageResponse::_Internal::end_date(const GetCurrentMonthUsageResponse* msg) {
  return *msg->end_date_;
}
void GetCurrentMonthUsageResponse::clear_start_date() {
  if (GetArenaForAllocation() == nullptr && start_date_ != nullptr) {
    delete start_date_;
  }
  start_date_ = nullptr;
}
void GetCurrentMonthUsageResponse::clear_end_date() {
  if (GetArenaForAllocation() == nullptr && end_date_ != nullptr) {
    delete end_date_;
  }
  end_date_ = nullptr;
}
GetCurrentMonthUsageResponse::GetCurrentMonthUsageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resource_usage_costs_by_source_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetCurrentMonthUsageResponse)
}
GetCurrentMonthUsageResponse::GetCurrentMonthUsageResponse(const GetCurrentMonthUsageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resource_usage_costs_by_source_(from.resource_usage_costs_by_source_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_date()) {
    start_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_date_);
  } else {
    start_date_ = nullptr;
  }
  if (from._internal_has_end_date()) {
    end_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_date_);
  } else {
    end_date_ = nullptr;
  }
  ::memcpy(&cloud_storage_usage_cost_, &from.cloud_storage_usage_cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&subtotal_) -
    reinterpret_cast<char*>(&cloud_storage_usage_cost_)) + sizeof(subtotal_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetCurrentMonthUsageResponse)
}

inline void GetCurrentMonthUsageResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subtotal_) -
    reinterpret_cast<char*>(&start_date_)) + sizeof(subtotal_));
}

GetCurrentMonthUsageResponse::~GetCurrentMonthUsageResponse() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetCurrentMonthUsageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCurrentMonthUsageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_date_;
  if (this != internal_default_instance()) delete end_date_;
}

void GetCurrentMonthUsageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCurrentMonthUsageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetCurrentMonthUsageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resource_usage_costs_by_source_.Clear();
  if (GetArenaForAllocation() == nullptr && start_date_ != nullptr) {
    delete start_date_;
  }
  start_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_date_ != nullptr) {
    delete end_date_;
  }
  end_date_ = nullptr;
  ::memset(&cloud_storage_usage_cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtotal_) -
      reinterpret_cast<char*>(&cloud_storage_usage_cost_)) + sizeof(subtotal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCurrentMonthUsageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start_date = 1 [json_name = "startDate"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_date = 2 [json_name = "endDate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double cloud_storage_usage_cost = 3 [json_name = "cloudStorageUsageCost", deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          cloud_storage_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_upload_usage_cost = 4 [json_name = "dataUploadUsageCost", deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          data_upload_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_egres_usage_cost = 5 [json_name = "dataEgresUsageCost", deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          data_egres_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double remote_control_usage_cost = 6 [json_name = "remoteControlUsageCost", deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          remote_control_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double standard_compute_usage_cost = 7 [json_name = "standardComputeUsageCost", deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          standard_compute_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double discount_amount = 8 [json_name = "discountAmount", deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          discount_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_usage_with_discount = 9 [json_name = "totalUsageWithDiscount", deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          total_usage_with_discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_usage_without_discount = 10 [json_name = "totalUsageWithoutDiscount", deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          total_usage_without_discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double per_machine_usage_cost = 11 [json_name = "perMachineUsageCost", deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          per_machine_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double binary_data_cloud_storage_usage_cost = 12 [json_name = "binaryDataCloudStorageUsageCost", deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          binary_data_cloud_storage_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double other_cloud_storage_usage_cost = 13 [json_name = "otherCloudStorageUsageCost", deprecated = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          other_cloud_storage_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.ResourceUsageCostsBySource resource_usage_costs_by_source = 14 [json_name = "resourceUsageCostsBySource"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_usage_costs_by_source(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double subtotal = 15 [json_name = "subtotal"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          subtotal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCurrentMonthUsageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetCurrentMonthUsageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start_date = 1 [json_name = "startDate"];
  if (this->_internal_has_start_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start_date(this),
        _Internal::start_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end_date = 2 [json_name = "endDate"];
  if (this->_internal_has_end_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end_date(this),
        _Internal::end_date(this).GetCachedSize(), target, stream);
  }

  // double cloud_storage_usage_cost = 3 [json_name = "cloudStorageUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage_cost = this->_internal_cloud_storage_usage_cost();
  uint64_t raw_cloud_storage_usage_cost;
  memcpy(&raw_cloud_storage_usage_cost, &tmp_cloud_storage_usage_cost, sizeof(tmp_cloud_storage_usage_cost));
  if (raw_cloud_storage_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_cloud_storage_usage_cost(), target);
  }

  // double data_upload_usage_cost = 4 [json_name = "dataUploadUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_cost = this->_internal_data_upload_usage_cost();
  uint64_t raw_data_upload_usage_cost;
  memcpy(&raw_data_upload_usage_cost, &tmp_data_upload_usage_cost, sizeof(tmp_data_upload_usage_cost));
  if (raw_data_upload_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_data_upload_usage_cost(), target);
  }

  // double data_egres_usage_cost = 5 [json_name = "dataEgresUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_cost = this->_internal_data_egres_usage_cost();
  uint64_t raw_data_egres_usage_cost;
  memcpy(&raw_data_egres_usage_cost, &tmp_data_egres_usage_cost, sizeof(tmp_data_egres_usage_cost));
  if (raw_data_egres_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_data_egres_usage_cost(), target);
  }

  // double remote_control_usage_cost = 6 [json_name = "remoteControlUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_remote_control_usage_cost = this->_internal_remote_control_usage_cost();
  uint64_t raw_remote_control_usage_cost;
  memcpy(&raw_remote_control_usage_cost, &tmp_remote_control_usage_cost, sizeof(tmp_remote_control_usage_cost));
  if (raw_remote_control_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_remote_control_usage_cost(), target);
  }

  // double standard_compute_usage_cost = 7 [json_name = "standardComputeUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_cost = this->_internal_standard_compute_usage_cost();
  uint64_t raw_standard_compute_usage_cost;
  memcpy(&raw_standard_compute_usage_cost, &tmp_standard_compute_usage_cost, sizeof(tmp_standard_compute_usage_cost));
  if (raw_standard_compute_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_standard_compute_usage_cost(), target);
  }

  // double discount_amount = 8 [json_name = "discountAmount", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_discount_amount = this->_internal_discount_amount();
  uint64_t raw_discount_amount;
  memcpy(&raw_discount_amount, &tmp_discount_amount, sizeof(tmp_discount_amount));
  if (raw_discount_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_discount_amount(), target);
  }

  // double total_usage_with_discount = 9 [json_name = "totalUsageWithDiscount", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_with_discount = this->_internal_total_usage_with_discount();
  uint64_t raw_total_usage_with_discount;
  memcpy(&raw_total_usage_with_discount, &tmp_total_usage_with_discount, sizeof(tmp_total_usage_with_discount));
  if (raw_total_usage_with_discount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_total_usage_with_discount(), target);
  }

  // double total_usage_without_discount = 10 [json_name = "totalUsageWithoutDiscount", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_without_discount = this->_internal_total_usage_without_discount();
  uint64_t raw_total_usage_without_discount;
  memcpy(&raw_total_usage_without_discount, &tmp_total_usage_without_discount, sizeof(tmp_total_usage_without_discount));
  if (raw_total_usage_without_discount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_total_usage_without_discount(), target);
  }

  // double per_machine_usage_cost = 11 [json_name = "perMachineUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_per_machine_usage_cost = this->_internal_per_machine_usage_cost();
  uint64_t raw_per_machine_usage_cost;
  memcpy(&raw_per_machine_usage_cost, &tmp_per_machine_usage_cost, sizeof(tmp_per_machine_usage_cost));
  if (raw_per_machine_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_per_machine_usage_cost(), target);
  }

  // double binary_data_cloud_storage_usage_cost = 12 [json_name = "binaryDataCloudStorageUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_binary_data_cloud_storage_usage_cost = this->_internal_binary_data_cloud_storage_usage_cost();
  uint64_t raw_binary_data_cloud_storage_usage_cost;
  memcpy(&raw_binary_data_cloud_storage_usage_cost, &tmp_binary_data_cloud_storage_usage_cost, sizeof(tmp_binary_data_cloud_storage_usage_cost));
  if (raw_binary_data_cloud_storage_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_binary_data_cloud_storage_usage_cost(), target);
  }

  // double other_cloud_storage_usage_cost = 13 [json_name = "otherCloudStorageUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_other_cloud_storage_usage_cost = this->_internal_other_cloud_storage_usage_cost();
  uint64_t raw_other_cloud_storage_usage_cost;
  memcpy(&raw_other_cloud_storage_usage_cost, &tmp_other_cloud_storage_usage_cost, sizeof(tmp_other_cloud_storage_usage_cost));
  if (raw_other_cloud_storage_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_other_cloud_storage_usage_cost(), target);
  }

  // repeated .viam.app.v1.ResourceUsageCostsBySource resource_usage_costs_by_source = 14 [json_name = "resourceUsageCostsBySource"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_resource_usage_costs_by_source_size()); i < n; i++) {
    const auto& repfield = this->_internal_resource_usage_costs_by_source(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double subtotal = 15 [json_name = "subtotal"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_subtotal = this->_internal_subtotal();
  uint64_t raw_subtotal;
  memcpy(&raw_subtotal, &tmp_subtotal, sizeof(tmp_subtotal));
  if (raw_subtotal != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_subtotal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetCurrentMonthUsageResponse)
  return target;
}

size_t GetCurrentMonthUsageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetCurrentMonthUsageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.v1.ResourceUsageCostsBySource resource_usage_costs_by_source = 14 [json_name = "resourceUsageCostsBySource"];
  total_size += 1UL * this->_internal_resource_usage_costs_by_source_size();
  for (const auto& msg : this->resource_usage_costs_by_source_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp start_date = 1 [json_name = "startDate"];
  if (this->_internal_has_start_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_date_);
  }

  // .google.protobuf.Timestamp end_date = 2 [json_name = "endDate"];
  if (this->_internal_has_end_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_date_);
  }

  // double cloud_storage_usage_cost = 3 [json_name = "cloudStorageUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage_cost = this->_internal_cloud_storage_usage_cost();
  uint64_t raw_cloud_storage_usage_cost;
  memcpy(&raw_cloud_storage_usage_cost, &tmp_cloud_storage_usage_cost, sizeof(tmp_cloud_storage_usage_cost));
  if (raw_cloud_storage_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double data_upload_usage_cost = 4 [json_name = "dataUploadUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_cost = this->_internal_data_upload_usage_cost();
  uint64_t raw_data_upload_usage_cost;
  memcpy(&raw_data_upload_usage_cost, &tmp_data_upload_usage_cost, sizeof(tmp_data_upload_usage_cost));
  if (raw_data_upload_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double data_egres_usage_cost = 5 [json_name = "dataEgresUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_cost = this->_internal_data_egres_usage_cost();
  uint64_t raw_data_egres_usage_cost;
  memcpy(&raw_data_egres_usage_cost, &tmp_data_egres_usage_cost, sizeof(tmp_data_egres_usage_cost));
  if (raw_data_egres_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double remote_control_usage_cost = 6 [json_name = "remoteControlUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_remote_control_usage_cost = this->_internal_remote_control_usage_cost();
  uint64_t raw_remote_control_usage_cost;
  memcpy(&raw_remote_control_usage_cost, &tmp_remote_control_usage_cost, sizeof(tmp_remote_control_usage_cost));
  if (raw_remote_control_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double standard_compute_usage_cost = 7 [json_name = "standardComputeUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_cost = this->_internal_standard_compute_usage_cost();
  uint64_t raw_standard_compute_usage_cost;
  memcpy(&raw_standard_compute_usage_cost, &tmp_standard_compute_usage_cost, sizeof(tmp_standard_compute_usage_cost));
  if (raw_standard_compute_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double discount_amount = 8 [json_name = "discountAmount", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_discount_amount = this->_internal_discount_amount();
  uint64_t raw_discount_amount;
  memcpy(&raw_discount_amount, &tmp_discount_amount, sizeof(tmp_discount_amount));
  if (raw_discount_amount != 0) {
    total_size += 1 + 8;
  }

  // double total_usage_with_discount = 9 [json_name = "totalUsageWithDiscount", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_with_discount = this->_internal_total_usage_with_discount();
  uint64_t raw_total_usage_with_discount;
  memcpy(&raw_total_usage_with_discount, &tmp_total_usage_with_discount, sizeof(tmp_total_usage_with_discount));
  if (raw_total_usage_with_discount != 0) {
    total_size += 1 + 8;
  }

  // double total_usage_without_discount = 10 [json_name = "totalUsageWithoutDiscount", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_without_discount = this->_internal_total_usage_without_discount();
  uint64_t raw_total_usage_without_discount;
  memcpy(&raw_total_usage_without_discount, &tmp_total_usage_without_discount, sizeof(tmp_total_usage_without_discount));
  if (raw_total_usage_without_discount != 0) {
    total_size += 1 + 8;
  }

  // double per_machine_usage_cost = 11 [json_name = "perMachineUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_per_machine_usage_cost = this->_internal_per_machine_usage_cost();
  uint64_t raw_per_machine_usage_cost;
  memcpy(&raw_per_machine_usage_cost, &tmp_per_machine_usage_cost, sizeof(tmp_per_machine_usage_cost));
  if (raw_per_machine_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double binary_data_cloud_storage_usage_cost = 12 [json_name = "binaryDataCloudStorageUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_binary_data_cloud_storage_usage_cost = this->_internal_binary_data_cloud_storage_usage_cost();
  uint64_t raw_binary_data_cloud_storage_usage_cost;
  memcpy(&raw_binary_data_cloud_storage_usage_cost, &tmp_binary_data_cloud_storage_usage_cost, sizeof(tmp_binary_data_cloud_storage_usage_cost));
  if (raw_binary_data_cloud_storage_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double other_cloud_storage_usage_cost = 13 [json_name = "otherCloudStorageUsageCost", deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_other_cloud_storage_usage_cost = this->_internal_other_cloud_storage_usage_cost();
  uint64_t raw_other_cloud_storage_usage_cost;
  memcpy(&raw_other_cloud_storage_usage_cost, &tmp_other_cloud_storage_usage_cost, sizeof(tmp_other_cloud_storage_usage_cost));
  if (raw_other_cloud_storage_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double subtotal = 15 [json_name = "subtotal"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_subtotal = this->_internal_subtotal();
  uint64_t raw_subtotal;
  memcpy(&raw_subtotal, &tmp_subtotal, sizeof(tmp_subtotal));
  if (raw_subtotal != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCurrentMonthUsageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCurrentMonthUsageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCurrentMonthUsageResponse::GetClassData() const { return &_class_data_; }

void GetCurrentMonthUsageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCurrentMonthUsageResponse *>(to)->MergeFrom(
      static_cast<const GetCurrentMonthUsageResponse &>(from));
}


void GetCurrentMonthUsageResponse::MergeFrom(const GetCurrentMonthUsageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetCurrentMonthUsageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  resource_usage_costs_by_source_.MergeFrom(from.resource_usage_costs_by_source_);
  if (from._internal_has_start_date()) {
    _internal_mutable_start_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_date());
  }
  if (from._internal_has_end_date()) {
    _internal_mutable_end_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_date());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage_cost = from._internal_cloud_storage_usage_cost();
  uint64_t raw_cloud_storage_usage_cost;
  memcpy(&raw_cloud_storage_usage_cost, &tmp_cloud_storage_usage_cost, sizeof(tmp_cloud_storage_usage_cost));
  if (raw_cloud_storage_usage_cost != 0) {
    _internal_set_cloud_storage_usage_cost(from._internal_cloud_storage_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_cost = from._internal_data_upload_usage_cost();
  uint64_t raw_data_upload_usage_cost;
  memcpy(&raw_data_upload_usage_cost, &tmp_data_upload_usage_cost, sizeof(tmp_data_upload_usage_cost));
  if (raw_data_upload_usage_cost != 0) {
    _internal_set_data_upload_usage_cost(from._internal_data_upload_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_cost = from._internal_data_egres_usage_cost();
  uint64_t raw_data_egres_usage_cost;
  memcpy(&raw_data_egres_usage_cost, &tmp_data_egres_usage_cost, sizeof(tmp_data_egres_usage_cost));
  if (raw_data_egres_usage_cost != 0) {
    _internal_set_data_egres_usage_cost(from._internal_data_egres_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_remote_control_usage_cost = from._internal_remote_control_usage_cost();
  uint64_t raw_remote_control_usage_cost;
  memcpy(&raw_remote_control_usage_cost, &tmp_remote_control_usage_cost, sizeof(tmp_remote_control_usage_cost));
  if (raw_remote_control_usage_cost != 0) {
    _internal_set_remote_control_usage_cost(from._internal_remote_control_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_cost = from._internal_standard_compute_usage_cost();
  uint64_t raw_standard_compute_usage_cost;
  memcpy(&raw_standard_compute_usage_cost, &tmp_standard_compute_usage_cost, sizeof(tmp_standard_compute_usage_cost));
  if (raw_standard_compute_usage_cost != 0) {
    _internal_set_standard_compute_usage_cost(from._internal_standard_compute_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_discount_amount = from._internal_discount_amount();
  uint64_t raw_discount_amount;
  memcpy(&raw_discount_amount, &tmp_discount_amount, sizeof(tmp_discount_amount));
  if (raw_discount_amount != 0) {
    _internal_set_discount_amount(from._internal_discount_amount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_with_discount = from._internal_total_usage_with_discount();
  uint64_t raw_total_usage_with_discount;
  memcpy(&raw_total_usage_with_discount, &tmp_total_usage_with_discount, sizeof(tmp_total_usage_with_discount));
  if (raw_total_usage_with_discount != 0) {
    _internal_set_total_usage_with_discount(from._internal_total_usage_with_discount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_without_discount = from._internal_total_usage_without_discount();
  uint64_t raw_total_usage_without_discount;
  memcpy(&raw_total_usage_without_discount, &tmp_total_usage_without_discount, sizeof(tmp_total_usage_without_discount));
  if (raw_total_usage_without_discount != 0) {
    _internal_set_total_usage_without_discount(from._internal_total_usage_without_discount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_per_machine_usage_cost = from._internal_per_machine_usage_cost();
  uint64_t raw_per_machine_usage_cost;
  memcpy(&raw_per_machine_usage_cost, &tmp_per_machine_usage_cost, sizeof(tmp_per_machine_usage_cost));
  if (raw_per_machine_usage_cost != 0) {
    _internal_set_per_machine_usage_cost(from._internal_per_machine_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_binary_data_cloud_storage_usage_cost = from._internal_binary_data_cloud_storage_usage_cost();
  uint64_t raw_binary_data_cloud_storage_usage_cost;
  memcpy(&raw_binary_data_cloud_storage_usage_cost, &tmp_binary_data_cloud_storage_usage_cost, sizeof(tmp_binary_data_cloud_storage_usage_cost));
  if (raw_binary_data_cloud_storage_usage_cost != 0) {
    _internal_set_binary_data_cloud_storage_usage_cost(from._internal_binary_data_cloud_storage_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_other_cloud_storage_usage_cost = from._internal_other_cloud_storage_usage_cost();
  uint64_t raw_other_cloud_storage_usage_cost;
  memcpy(&raw_other_cloud_storage_usage_cost, &tmp_other_cloud_storage_usage_cost, sizeof(tmp_other_cloud_storage_usage_cost));
  if (raw_other_cloud_storage_usage_cost != 0) {
    _internal_set_other_cloud_storage_usage_cost(from._internal_other_cloud_storage_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_subtotal = from._internal_subtotal();
  uint64_t raw_subtotal;
  memcpy(&raw_subtotal, &tmp_subtotal, sizeof(tmp_subtotal));
  if (raw_subtotal != 0) {
    _internal_set_subtotal(from._internal_subtotal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCurrentMonthUsageResponse::CopyFrom(const GetCurrentMonthUsageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetCurrentMonthUsageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrentMonthUsageResponse::IsInitialized() const {
  return true;
}

void GetCurrentMonthUsageResponse::InternalSwap(GetCurrentMonthUsageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resource_usage_costs_by_source_.InternalSwap(&other->resource_usage_costs_by_source_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCurrentMonthUsageResponse, subtotal_)
      + sizeof(GetCurrentMonthUsageResponse::subtotal_)
      - PROTOBUF_FIELD_OFFSET(GetCurrentMonthUsageResponse, start_date_)>(
          reinterpret_cast<char*>(&start_date_),
          reinterpret_cast<char*>(&other->start_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCurrentMonthUsageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[6]);
}

// ===================================================================

class GetOrgBillingInformationRequest::_Internal {
 public:
};

GetOrgBillingInformationRequest::GetOrgBillingInformationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetOrgBillingInformationRequest)
}
GetOrgBillingInformationRequest::GetOrgBillingInformationRequest(const GetOrgBillingInformationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetOrgBillingInformationRequest)
}

inline void GetOrgBillingInformationRequest::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetOrgBillingInformationRequest::~GetOrgBillingInformationRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetOrgBillingInformationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOrgBillingInformationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  org_id_.Destroy();
}

void GetOrgBillingInformationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOrgBillingInformationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetOrgBillingInformationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrgBillingInformationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetOrgBillingInformationRequest.org_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOrgBillingInformationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetOrgBillingInformationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetOrgBillingInformationRequest.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetOrgBillingInformationRequest)
  return target;
}

size_t GetOrgBillingInformationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetOrgBillingInformationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrgBillingInformationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOrgBillingInformationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrgBillingInformationRequest::GetClassData() const { return &_class_data_; }

void GetOrgBillingInformationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetOrgBillingInformationRequest *>(to)->MergeFrom(
      static_cast<const GetOrgBillingInformationRequest &>(from));
}


void GetOrgBillingInformationRequest::MergeFrom(const GetOrgBillingInformationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetOrgBillingInformationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrgBillingInformationRequest::CopyFrom(const GetOrgBillingInformationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetOrgBillingInformationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrgBillingInformationRequest::IsInitialized() const {
  return true;
}

void GetOrgBillingInformationRequest::InternalSwap(GetOrgBillingInformationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrgBillingInformationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[7]);
}

// ===================================================================

class GetOrgBillingInformationResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetOrgBillingInformationResponse>()._has_bits_);
  static const ::viam::app::v1::PaymentMethodCard& method(const GetOrgBillingInformationResponse* msg);
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_billing_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::viam::app::v1::PaymentMethodCard&
GetOrgBillingInformationResponse::_Internal::method(const GetOrgBillingInformationResponse* msg) {
  return *msg->method_;
}
GetOrgBillingInformationResponse::GetOrgBillingInformationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetOrgBillingInformationResponse)
}
GetOrgBillingInformationResponse::GetOrgBillingInformationResponse(const GetOrgBillingInformationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  billing_email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    billing_email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_billing_email().empty()) {
    billing_email_.Set(from._internal_billing_email(), 
      GetArenaForAllocation());
  }
  billing_tier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    billing_tier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_billing_tier()) {
    billing_tier_.Set(from._internal_billing_tier(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_method()) {
    method_ = new ::viam::app::v1::PaymentMethodCard(*from.method_);
  } else {
    method_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetOrgBillingInformationResponse)
}

inline void GetOrgBillingInformationResponse::SharedCtor() {
billing_email_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  billing_email_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
billing_tier_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  billing_tier_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&method_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&method_)) + sizeof(type_));
}

GetOrgBillingInformationResponse::~GetOrgBillingInformationResponse() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetOrgBillingInformationResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetOrgBillingInformationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  billing_email_.Destroy();
  billing_tier_.Destroy();
  if (this != internal_default_instance()) delete method_;
}

void GetOrgBillingInformationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetOrgBillingInformationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetOrgBillingInformationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  billing_email_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      billing_tier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(method_ != nullptr);
      method_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetOrgBillingInformationResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.v1.PaymentMethodType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::viam::app::v1::PaymentMethodType>(val));
        } else
          goto handle_unusual;
        continue;
      // string billing_email = 2 [json_name = "billingEmail"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_billing_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetOrgBillingInformationResponse.billing_email"));
        } else
          goto handle_unusual;
        continue;
      // optional .viam.app.v1.PaymentMethodCard method = 3 [json_name = "method"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_method(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string billing_tier = 4 [json_name = "billingTier"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_billing_tier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetOrgBillingInformationResponse.billing_tier"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetOrgBillingInformationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetOrgBillingInformationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.v1.PaymentMethodType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string billing_email = 2 [json_name = "billingEmail"];
  if (!this->_internal_billing_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_billing_email().data(), static_cast<int>(this->_internal_billing_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetOrgBillingInformationResponse.billing_email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_billing_email(), target);
  }

  // optional .viam.app.v1.PaymentMethodCard method = 3 [json_name = "method"];
  if (_internal_has_method()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::method(this),
        _Internal::method(this).GetCachedSize(), target, stream);
  }

  // optional string billing_tier = 4 [json_name = "billingTier"];
  if (_internal_has_billing_tier()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_billing_tier().data(), static_cast<int>(this->_internal_billing_tier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetOrgBillingInformationResponse.billing_tier");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_billing_tier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetOrgBillingInformationResponse)
  return target;
}

size_t GetOrgBillingInformationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetOrgBillingInformationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string billing_email = 2 [json_name = "billingEmail"];
  if (!this->_internal_billing_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_billing_email());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string billing_tier = 4 [json_name = "billingTier"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_billing_tier());
    }

    // optional .viam.app.v1.PaymentMethodCard method = 3 [json_name = "method"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *method_);
    }

  }
  // .viam.app.v1.PaymentMethodType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetOrgBillingInformationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetOrgBillingInformationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetOrgBillingInformationResponse::GetClassData() const { return &_class_data_; }

void GetOrgBillingInformationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetOrgBillingInformationResponse *>(to)->MergeFrom(
      static_cast<const GetOrgBillingInformationResponse &>(from));
}


void GetOrgBillingInformationResponse::MergeFrom(const GetOrgBillingInformationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetOrgBillingInformationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_billing_email().empty()) {
    _internal_set_billing_email(from._internal_billing_email());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_billing_tier(from._internal_billing_tier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_method()->::viam::app::v1::PaymentMethodCard::MergeFrom(from._internal_method());
    }
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetOrgBillingInformationResponse::CopyFrom(const GetOrgBillingInformationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetOrgBillingInformationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOrgBillingInformationResponse::IsInitialized() const {
  return true;
}

void GetOrgBillingInformationResponse::InternalSwap(GetOrgBillingInformationResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &billing_email_, lhs_arena,
      &other->billing_email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &billing_tier_, lhs_arena,
      &other->billing_tier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetOrgBillingInformationResponse, type_)
      + sizeof(GetOrgBillingInformationResponse::type_)
      - PROTOBUF_FIELD_OFFSET(GetOrgBillingInformationResponse, method_)>(
          reinterpret_cast<char*>(&method_),
          reinterpret_cast<char*>(&other->method_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOrgBillingInformationResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[8]);
}

// ===================================================================

class GetInvoicesSummaryRequest::_Internal {
 public:
};

GetInvoicesSummaryRequest::GetInvoicesSummaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetInvoicesSummaryRequest)
}
GetInvoicesSummaryRequest::GetInvoicesSummaryRequest(const GetInvoicesSummaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetInvoicesSummaryRequest)
}

inline void GetInvoicesSummaryRequest::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInvoicesSummaryRequest::~GetInvoicesSummaryRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetInvoicesSummaryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInvoicesSummaryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  org_id_.Destroy();
}

void GetInvoicesSummaryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetInvoicesSummaryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetInvoicesSummaryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInvoicesSummaryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetInvoicesSummaryRequest.org_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInvoicesSummaryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetInvoicesSummaryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetInvoicesSummaryRequest.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetInvoicesSummaryRequest)
  return target;
}

size_t GetInvoicesSummaryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetInvoicesSummaryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInvoicesSummaryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetInvoicesSummaryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInvoicesSummaryRequest::GetClassData() const { return &_class_data_; }

void GetInvoicesSummaryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetInvoicesSummaryRequest *>(to)->MergeFrom(
      static_cast<const GetInvoicesSummaryRequest &>(from));
}


void GetInvoicesSummaryRequest::MergeFrom(const GetInvoicesSummaryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetInvoicesSummaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInvoicesSummaryRequest::CopyFrom(const GetInvoicesSummaryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetInvoicesSummaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvoicesSummaryRequest::IsInitialized() const {
  return true;
}

void GetInvoicesSummaryRequest::InternalSwap(GetInvoicesSummaryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvoicesSummaryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[9]);
}

// ===================================================================

class GetInvoicesSummaryResponse::_Internal {
 public:
};

GetInvoicesSummaryResponse::GetInvoicesSummaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  invoices_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetInvoicesSummaryResponse)
}
GetInvoicesSummaryResponse::GetInvoicesSummaryResponse(const GetInvoicesSummaryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      invoices_(from.invoices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  outstanding_balance_ = from.outstanding_balance_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetInvoicesSummaryResponse)
}

inline void GetInvoicesSummaryResponse::SharedCtor() {
outstanding_balance_ = 0;
}

GetInvoicesSummaryResponse::~GetInvoicesSummaryResponse() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetInvoicesSummaryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInvoicesSummaryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetInvoicesSummaryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetInvoicesSummaryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetInvoicesSummaryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invoices_.Clear();
  outstanding_balance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInvoicesSummaryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double outstanding_balance = 1 [json_name = "outstandingBalance"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          outstanding_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.InvoiceSummary invoices = 2 [json_name = "invoices"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invoices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInvoicesSummaryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetInvoicesSummaryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double outstanding_balance = 1 [json_name = "outstandingBalance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_outstanding_balance = this->_internal_outstanding_balance();
  uint64_t raw_outstanding_balance;
  memcpy(&raw_outstanding_balance, &tmp_outstanding_balance, sizeof(tmp_outstanding_balance));
  if (raw_outstanding_balance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_outstanding_balance(), target);
  }

  // repeated .viam.app.v1.InvoiceSummary invoices = 2 [json_name = "invoices"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_invoices_size()); i < n; i++) {
    const auto& repfield = this->_internal_invoices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetInvoicesSummaryResponse)
  return target;
}

size_t GetInvoicesSummaryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetInvoicesSummaryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.v1.InvoiceSummary invoices = 2 [json_name = "invoices"];
  total_size += 1UL * this->_internal_invoices_size();
  for (const auto& msg : this->invoices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double outstanding_balance = 1 [json_name = "outstandingBalance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_outstanding_balance = this->_internal_outstanding_balance();
  uint64_t raw_outstanding_balance;
  memcpy(&raw_outstanding_balance, &tmp_outstanding_balance, sizeof(tmp_outstanding_balance));
  if (raw_outstanding_balance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInvoicesSummaryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetInvoicesSummaryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInvoicesSummaryResponse::GetClassData() const { return &_class_data_; }

void GetInvoicesSummaryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetInvoicesSummaryResponse *>(to)->MergeFrom(
      static_cast<const GetInvoicesSummaryResponse &>(from));
}


void GetInvoicesSummaryResponse::MergeFrom(const GetInvoicesSummaryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetInvoicesSummaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  invoices_.MergeFrom(from.invoices_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_outstanding_balance = from._internal_outstanding_balance();
  uint64_t raw_outstanding_balance;
  memcpy(&raw_outstanding_balance, &tmp_outstanding_balance, sizeof(tmp_outstanding_balance));
  if (raw_outstanding_balance != 0) {
    _internal_set_outstanding_balance(from._internal_outstanding_balance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInvoicesSummaryResponse::CopyFrom(const GetInvoicesSummaryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetInvoicesSummaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvoicesSummaryResponse::IsInitialized() const {
  return true;
}

void GetInvoicesSummaryResponse::InternalSwap(GetInvoicesSummaryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  invoices_.InternalSwap(&other->invoices_);
  swap(outstanding_balance_, other->outstanding_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvoicesSummaryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[10]);
}

// ===================================================================

class GetInvoicePdfRequest::_Internal {
 public:
};

GetInvoicePdfRequest::GetInvoicePdfRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetInvoicePdfRequest)
}
GetInvoicePdfRequest::GetInvoicePdfRequest(const GetInvoicePdfRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetInvoicePdfRequest)
}

inline void GetInvoicePdfRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInvoicePdfRequest::~GetInvoicePdfRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetInvoicePdfRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInvoicePdfRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  org_id_.Destroy();
}

void GetInvoicePdfRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetInvoicePdfRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetInvoicePdfRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  org_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInvoicePdfRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetInvoicePdfRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // string org_id = 2 [json_name = "orgId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetInvoicePdfRequest.org_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInvoicePdfRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetInvoicePdfRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetInvoicePdfRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string org_id = 2 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetInvoicePdfRequest.org_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_org_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetInvoicePdfRequest)
  return target;
}

size_t GetInvoicePdfRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetInvoicePdfRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string org_id = 2 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInvoicePdfRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetInvoicePdfRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInvoicePdfRequest::GetClassData() const { return &_class_data_; }

void GetInvoicePdfRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetInvoicePdfRequest *>(to)->MergeFrom(
      static_cast<const GetInvoicePdfRequest &>(from));
}


void GetInvoicePdfRequest::MergeFrom(const GetInvoicePdfRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetInvoicePdfRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInvoicePdfRequest::CopyFrom(const GetInvoicePdfRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetInvoicePdfRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvoicePdfRequest::IsInitialized() const {
  return true;
}

void GetInvoicePdfRequest::InternalSwap(GetInvoicePdfRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvoicePdfRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[11]);
}

// ===================================================================

class GetInvoicePdfResponse::_Internal {
 public:
};

GetInvoicePdfResponse::GetInvoicePdfResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetInvoicePdfResponse)
}
GetInvoicePdfResponse::GetInvoicePdfResponse(const GetInvoicePdfResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chunk_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chunk().empty()) {
    chunk_.Set(from._internal_chunk(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetInvoicePdfResponse)
}

inline void GetInvoicePdfResponse::SharedCtor() {
chunk_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chunk_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInvoicePdfResponse::~GetInvoicePdfResponse() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetInvoicePdfResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInvoicePdfResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chunk_.Destroy();
}

void GetInvoicePdfResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetInvoicePdfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetInvoicePdfResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInvoicePdfResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes chunk = 1 [json_name = "chunk"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInvoicePdfResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetInvoicePdfResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes chunk = 1 [json_name = "chunk"];
  if (!this->_internal_chunk().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_chunk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetInvoicePdfResponse)
  return target;
}

size_t GetInvoicePdfResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetInvoicePdfResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 1 [json_name = "chunk"];
  if (!this->_internal_chunk().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInvoicePdfResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetInvoicePdfResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInvoicePdfResponse::GetClassData() const { return &_class_data_; }

void GetInvoicePdfResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetInvoicePdfResponse *>(to)->MergeFrom(
      static_cast<const GetInvoicePdfResponse &>(from));
}


void GetInvoicePdfResponse::MergeFrom(const GetInvoicePdfResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetInvoicePdfResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chunk().empty()) {
    _internal_set_chunk(from._internal_chunk());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInvoicePdfResponse::CopyFrom(const GetInvoicePdfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetInvoicePdfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvoicePdfResponse::IsInitialized() const {
  return true;
}

void GetInvoicePdfResponse::InternalSwap(GetInvoicePdfResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &chunk_, lhs_arena,
      &other->chunk_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvoicePdfResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[12]);
}

// ===================================================================

class SendPaymentRequiredEmailRequest::_Internal {
 public:
};

SendPaymentRequiredEmailRequest::SendPaymentRequiredEmailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.SendPaymentRequiredEmailRequest)
}
SendPaymentRequiredEmailRequest::SendPaymentRequiredEmailRequest(const SendPaymentRequiredEmailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customer_org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    customer_org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_customer_org_id().empty()) {
    customer_org_id_.Set(from._internal_customer_org_id(), 
      GetArenaForAllocation());
  }
  billing_owner_org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    billing_owner_org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_billing_owner_org_id().empty()) {
    billing_owner_org_id_.Set(from._internal_billing_owner_org_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.SendPaymentRequiredEmailRequest)
}

inline void SendPaymentRequiredEmailRequest::SharedCtor() {
customer_org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  customer_org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
billing_owner_org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  billing_owner_org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendPaymentRequiredEmailRequest::~SendPaymentRequiredEmailRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.SendPaymentRequiredEmailRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendPaymentRequiredEmailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  customer_org_id_.Destroy();
  billing_owner_org_id_.Destroy();
}

void SendPaymentRequiredEmailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendPaymentRequiredEmailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.SendPaymentRequiredEmailRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customer_org_id_.ClearToEmpty();
  billing_owner_org_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendPaymentRequiredEmailRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string customer_org_id = 1 [json_name = "customerOrgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_customer_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.SendPaymentRequiredEmailRequest.customer_org_id"));
        } else
          goto handle_unusual;
        continue;
      // string billing_owner_org_id = 2 [json_name = "billingOwnerOrgId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_billing_owner_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.SendPaymentRequiredEmailRequest.billing_owner_org_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendPaymentRequiredEmailRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.SendPaymentRequiredEmailRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_org_id = 1 [json_name = "customerOrgId"];
  if (!this->_internal_customer_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_org_id().data(), static_cast<int>(this->_internal_customer_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.SendPaymentRequiredEmailRequest.customer_org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_org_id(), target);
  }

  // string billing_owner_org_id = 2 [json_name = "billingOwnerOrgId"];
  if (!this->_internal_billing_owner_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_billing_owner_org_id().data(), static_cast<int>(this->_internal_billing_owner_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.SendPaymentRequiredEmailRequest.billing_owner_org_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_billing_owner_org_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.SendPaymentRequiredEmailRequest)
  return target;
}

size_t SendPaymentRequiredEmailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.SendPaymentRequiredEmailRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customer_org_id = 1 [json_name = "customerOrgId"];
  if (!this->_internal_customer_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_org_id());
  }

  // string billing_owner_org_id = 2 [json_name = "billingOwnerOrgId"];
  if (!this->_internal_billing_owner_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_billing_owner_org_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendPaymentRequiredEmailRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendPaymentRequiredEmailRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendPaymentRequiredEmailRequest::GetClassData() const { return &_class_data_; }

void SendPaymentRequiredEmailRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendPaymentRequiredEmailRequest *>(to)->MergeFrom(
      static_cast<const SendPaymentRequiredEmailRequest &>(from));
}


void SendPaymentRequiredEmailRequest::MergeFrom(const SendPaymentRequiredEmailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.SendPaymentRequiredEmailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_customer_org_id().empty()) {
    _internal_set_customer_org_id(from._internal_customer_org_id());
  }
  if (!from._internal_billing_owner_org_id().empty()) {
    _internal_set_billing_owner_org_id(from._internal_billing_owner_org_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendPaymentRequiredEmailRequest::CopyFrom(const SendPaymentRequiredEmailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.SendPaymentRequiredEmailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPaymentRequiredEmailRequest::IsInitialized() const {
  return true;
}

void SendPaymentRequiredEmailRequest::InternalSwap(SendPaymentRequiredEmailRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &customer_org_id_, lhs_arena,
      &other->customer_org_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &billing_owner_org_id_, lhs_arena,
      &other->billing_owner_org_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPaymentRequiredEmailRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[13]);
}

// ===================================================================

class SendPaymentRequiredEmailResponse::_Internal {
 public:
};

SendPaymentRequiredEmailResponse::SendPaymentRequiredEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.SendPaymentRequiredEmailResponse)
}
SendPaymentRequiredEmailResponse::SendPaymentRequiredEmailResponse(const SendPaymentRequiredEmailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.SendPaymentRequiredEmailResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendPaymentRequiredEmailResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendPaymentRequiredEmailResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SendPaymentRequiredEmailResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::app::v1::InvoiceSummary*
Arena::CreateMaybeMessage< ::viam::app::v1::InvoiceSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::InvoiceSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::PaymentMethodCard*
Arena::CreateMaybeMessage< ::viam::app::v1::PaymentMethodCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::PaymentMethodCard >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetCurrentMonthUsageRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::GetCurrentMonthUsageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetCurrentMonthUsageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::UsageCost*
Arena::CreateMaybeMessage< ::viam::app::v1::UsageCost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::UsageCost >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::ResourceUsageCostsBySource*
Arena::CreateMaybeMessage< ::viam::app::v1::ResourceUsageCostsBySource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::ResourceUsageCostsBySource >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::ResourceUsageCosts*
Arena::CreateMaybeMessage< ::viam::app::v1::ResourceUsageCosts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::ResourceUsageCosts >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetCurrentMonthUsageResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::GetCurrentMonthUsageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetCurrentMonthUsageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetOrgBillingInformationRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::GetOrgBillingInformationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetOrgBillingInformationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetOrgBillingInformationResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::GetOrgBillingInformationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetOrgBillingInformationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetInvoicesSummaryRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::GetInvoicesSummaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetInvoicesSummaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetInvoicesSummaryResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::GetInvoicesSummaryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetInvoicesSummaryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetInvoicePdfRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::GetInvoicePdfRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetInvoicePdfRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetInvoicePdfResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::GetInvoicePdfResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetInvoicePdfResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::SendPaymentRequiredEmailRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::SendPaymentRequiredEmailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::SendPaymentRequiredEmailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::SendPaymentRequiredEmailResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::SendPaymentRequiredEmailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::SendPaymentRequiredEmailResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
