// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/v1/end_user.proto
#ifndef GRPC_app_2fv1_2fend_5fuser_2eproto__INCLUDED
#define GRPC_app_2fv1_2fend_5fuser_2eproto__INCLUDED

#include "app/v1/end_user.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace viam {
namespace app {
namespace v1 {

class EndUserService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.app.v1.EndUserService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Returns whether the specified user has accepted end user license agreements.
    // If false, the user should not be able to use the application.
    virtual ::grpc::Status IsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::viam::app::v1::IsLegalAcceptedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::IsLegalAcceptedResponse>> AsyncIsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::IsLegalAcceptedResponse>>(AsyncIsLegalAcceptedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::IsLegalAcceptedResponse>> PrepareAsyncIsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::IsLegalAcceptedResponse>>(PrepareAsyncIsLegalAcceptedRaw(context, request, cq));
    }
    // Marks that the specified user has accepted end user license agreements.
    virtual ::grpc::Status AcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::viam::app::v1::AcceptLegalResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::AcceptLegalResponse>> AsyncAcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::AcceptLegalResponse>>(AsyncAcceptLegalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::AcceptLegalResponse>> PrepareAsyncAcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::AcceptLegalResponse>>(PrepareAsyncAcceptLegalRaw(context, request, cq));
    }
    // Allows users to register third party auth applications using Viam linked to the indicated organization
    virtual ::grpc::Status RegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::viam::app::v1::RegisterAuthApplicationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::RegisterAuthApplicationResponse>> AsyncRegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::RegisterAuthApplicationResponse>>(AsyncRegisterAuthApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::RegisterAuthApplicationResponse>> PrepareAsyncRegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::RegisterAuthApplicationResponse>>(PrepareAsyncRegisterAuthApplicationRaw(context, request, cq));
    }
    // Allows users to update their third party auth applications
    virtual ::grpc::Status UpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::viam::app::v1::UpdateAuthApplicationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateAuthApplicationResponse>> AsyncUpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateAuthApplicationResponse>>(AsyncUpdateAuthApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateAuthApplicationResponse>> PrepareAsyncUpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateAuthApplicationResponse>>(PrepareAsyncUpdateAuthApplicationRaw(context, request, cq));
    }
    // Allows users to get the config for their third party auth applications
    virtual ::grpc::Status GetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::viam::app::v1::GetAuthApplicationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetAuthApplicationResponse>> AsyncGetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetAuthApplicationResponse>>(AsyncGetAuthApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetAuthApplicationResponse>> PrepareAsyncGetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetAuthApplicationResponse>>(PrepareAsyncGetAuthApplicationRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Returns whether the specified user has accepted end user license agreements.
      // If false, the user should not be able to use the application.
      virtual void IsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest* request, ::viam::app::v1::IsLegalAcceptedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsLegalAccepted(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::IsLegalAcceptedResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest* request, ::viam::app::v1::IsLegalAcceptedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest* request, ::viam::app::v1::IsLegalAcceptedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IsLegalAccepted(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::IsLegalAcceptedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IsLegalAccepted(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::IsLegalAcceptedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Marks that the specified user has accepted end user license agreements.
      virtual void AcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest* request, ::viam::app::v1::AcceptLegalResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AcceptLegal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::AcceptLegalResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest* request, ::viam::app::v1::AcceptLegalResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest* request, ::viam::app::v1::AcceptLegalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AcceptLegal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::AcceptLegalResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AcceptLegal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::AcceptLegalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Allows users to register third party auth applications using Viam linked to the indicated organization
      virtual void RegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RegisterAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RegisterAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Allows users to update their third party auth applications
      virtual void UpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Allows users to get the config for their third party auth applications
      virtual void GetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest* request, ::viam::app::v1::GetAuthApplicationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAuthApplicationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest* request, ::viam::app::v1::GetAuthApplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest* request, ::viam::app::v1::GetAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAuthApplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::IsLegalAcceptedResponse>* AsyncIsLegalAcceptedRaw(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::IsLegalAcceptedResponse>* PrepareAsyncIsLegalAcceptedRaw(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::AcceptLegalResponse>* AsyncAcceptLegalRaw(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::AcceptLegalResponse>* PrepareAsyncAcceptLegalRaw(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::RegisterAuthApplicationResponse>* AsyncRegisterAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::RegisterAuthApplicationResponse>* PrepareAsyncRegisterAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateAuthApplicationResponse>* AsyncUpdateAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateAuthApplicationResponse>* PrepareAsyncUpdateAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetAuthApplicationResponse>* AsyncGetAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetAuthApplicationResponse>* PrepareAsyncGetAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status IsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::viam::app::v1::IsLegalAcceptedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::IsLegalAcceptedResponse>> AsyncIsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::IsLegalAcceptedResponse>>(AsyncIsLegalAcceptedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::IsLegalAcceptedResponse>> PrepareAsyncIsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::IsLegalAcceptedResponse>>(PrepareAsyncIsLegalAcceptedRaw(context, request, cq));
    }
    ::grpc::Status AcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::viam::app::v1::AcceptLegalResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::AcceptLegalResponse>> AsyncAcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::AcceptLegalResponse>>(AsyncAcceptLegalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::AcceptLegalResponse>> PrepareAsyncAcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::AcceptLegalResponse>>(PrepareAsyncAcceptLegalRaw(context, request, cq));
    }
    ::grpc::Status RegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::viam::app::v1::RegisterAuthApplicationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::RegisterAuthApplicationResponse>> AsyncRegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::RegisterAuthApplicationResponse>>(AsyncRegisterAuthApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::RegisterAuthApplicationResponse>> PrepareAsyncRegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::RegisterAuthApplicationResponse>>(PrepareAsyncRegisterAuthApplicationRaw(context, request, cq));
    }
    ::grpc::Status UpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::viam::app::v1::UpdateAuthApplicationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateAuthApplicationResponse>> AsyncUpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateAuthApplicationResponse>>(AsyncUpdateAuthApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateAuthApplicationResponse>> PrepareAsyncUpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateAuthApplicationResponse>>(PrepareAsyncUpdateAuthApplicationRaw(context, request, cq));
    }
    ::grpc::Status GetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::viam::app::v1::GetAuthApplicationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAuthApplicationResponse>> AsyncGetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAuthApplicationResponse>>(AsyncGetAuthApplicationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAuthApplicationResponse>> PrepareAsyncGetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAuthApplicationResponse>>(PrepareAsyncGetAuthApplicationRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void IsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest* request, ::viam::app::v1::IsLegalAcceptedResponse* response, std::function<void(::grpc::Status)>) override;
      void IsLegalAccepted(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::IsLegalAcceptedResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest* request, ::viam::app::v1::IsLegalAcceptedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest* request, ::viam::app::v1::IsLegalAcceptedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IsLegalAccepted(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::IsLegalAcceptedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IsLegalAccepted(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::IsLegalAcceptedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest* request, ::viam::app::v1::AcceptLegalResponse* response, std::function<void(::grpc::Status)>) override;
      void AcceptLegal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::AcceptLegalResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest* request, ::viam::app::v1::AcceptLegalResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest* request, ::viam::app::v1::AcceptLegalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AcceptLegal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::AcceptLegalResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AcceptLegal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::AcceptLegalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RegisterAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RegisterAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest* request, ::viam::app::v1::GetAuthApplicationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAuthApplicationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest* request, ::viam::app::v1::GetAuthApplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest* request, ::viam::app::v1::GetAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAuthApplicationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::IsLegalAcceptedResponse>* AsyncIsLegalAcceptedRaw(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::IsLegalAcceptedResponse>* PrepareAsyncIsLegalAcceptedRaw(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::AcceptLegalResponse>* AsyncAcceptLegalRaw(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::AcceptLegalResponse>* PrepareAsyncAcceptLegalRaw(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::RegisterAuthApplicationResponse>* AsyncRegisterAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::RegisterAuthApplicationResponse>* PrepareAsyncRegisterAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateAuthApplicationResponse>* AsyncUpdateAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateAuthApplicationResponse>* PrepareAsyncUpdateAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAuthApplicationResponse>* AsyncGetAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAuthApplicationResponse>* PrepareAsyncGetAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_IsLegalAccepted_;
    const ::grpc::internal::RpcMethod rpcmethod_AcceptLegal_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterAuthApplication_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateAuthApplication_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAuthApplication_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Returns whether the specified user has accepted end user license agreements.
    // If false, the user should not be able to use the application.
    virtual ::grpc::Status IsLegalAccepted(::grpc::ServerContext* context, const ::viam::app::v1::IsLegalAcceptedRequest* request, ::viam::app::v1::IsLegalAcceptedResponse* response);
    // Marks that the specified user has accepted end user license agreements.
    virtual ::grpc::Status AcceptLegal(::grpc::ServerContext* context, const ::viam::app::v1::AcceptLegalRequest* request, ::viam::app::v1::AcceptLegalResponse* response);
    // Allows users to register third party auth applications using Viam linked to the indicated organization
    virtual ::grpc::Status RegisterAuthApplication(::grpc::ServerContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest* request, ::viam::app::v1::RegisterAuthApplicationResponse* response);
    // Allows users to update their third party auth applications
    virtual ::grpc::Status UpdateAuthApplication(::grpc::ServerContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest* request, ::viam::app::v1::UpdateAuthApplicationResponse* response);
    // Allows users to get the config for their third party auth applications
    virtual ::grpc::Status GetAuthApplication(::grpc::ServerContext* context, const ::viam::app::v1::GetAuthApplicationRequest* request, ::viam::app::v1::GetAuthApplicationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_IsLegalAccepted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsLegalAccepted() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_IsLegalAccepted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsLegalAccepted(::grpc::ServerContext* /*context*/, const ::viam::app::v1::IsLegalAcceptedRequest* /*request*/, ::viam::app::v1::IsLegalAcceptedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsLegalAccepted(::grpc::ServerContext* context, ::viam::app::v1::IsLegalAcceptedRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::IsLegalAcceptedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AcceptLegal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AcceptLegal() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AcceptLegal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptLegal(::grpc::ServerContext* /*context*/, const ::viam::app::v1::AcceptLegalRequest* /*request*/, ::viam::app::v1::AcceptLegalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptLegal(::grpc::ServerContext* context, ::viam::app::v1::AcceptLegalRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::AcceptLegalResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterAuthApplication() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RegisterAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::RegisterAuthApplicationRequest* /*request*/, ::viam::app::v1::RegisterAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterAuthApplication(::grpc::ServerContext* context, ::viam::app::v1::RegisterAuthApplicationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::RegisterAuthApplicationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateAuthApplication() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateAuthApplicationRequest* /*request*/, ::viam::app::v1::UpdateAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAuthApplication(::grpc::ServerContext* context, ::viam::app::v1::UpdateAuthApplicationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::UpdateAuthApplicationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAuthApplication() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetAuthApplicationRequest* /*request*/, ::viam::app::v1::GetAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAuthApplication(::grpc::ServerContext* context, ::viam::app::v1::GetAuthApplicationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetAuthApplicationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_IsLegalAccepted<WithAsyncMethod_AcceptLegal<WithAsyncMethod_RegisterAuthApplication<WithAsyncMethod_UpdateAuthApplication<WithAsyncMethod_GetAuthApplication<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IsLegalAccepted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IsLegalAccepted() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::IsLegalAcceptedRequest, ::viam::app::v1::IsLegalAcceptedResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::viam::app::v1::IsLegalAcceptedRequest* request, ::viam::app::v1::IsLegalAcceptedResponse* response) { return this->IsLegalAccepted(context, request, response); }));}
    void SetMessageAllocatorFor_IsLegalAccepted(
        ::grpc::experimental::MessageAllocator< ::viam::app::v1::IsLegalAcceptedRequest, ::viam::app::v1::IsLegalAcceptedResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::IsLegalAcceptedRequest, ::viam::app::v1::IsLegalAcceptedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IsLegalAccepted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsLegalAccepted(::grpc::ServerContext* /*context*/, const ::viam::app::v1::IsLegalAcceptedRequest* /*request*/, ::viam::app::v1::IsLegalAcceptedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsLegalAccepted(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::IsLegalAcceptedRequest* /*request*/, ::viam::app::v1::IsLegalAcceptedResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsLegalAccepted(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::viam::app::v1::IsLegalAcceptedRequest* /*request*/, ::viam::app::v1::IsLegalAcceptedResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AcceptLegal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AcceptLegal() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::AcceptLegalRequest, ::viam::app::v1::AcceptLegalResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::viam::app::v1::AcceptLegalRequest* request, ::viam::app::v1::AcceptLegalResponse* response) { return this->AcceptLegal(context, request, response); }));}
    void SetMessageAllocatorFor_AcceptLegal(
        ::grpc::experimental::MessageAllocator< ::viam::app::v1::AcceptLegalRequest, ::viam::app::v1::AcceptLegalResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::AcceptLegalRequest, ::viam::app::v1::AcceptLegalResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AcceptLegal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptLegal(::grpc::ServerContext* /*context*/, const ::viam::app::v1::AcceptLegalRequest* /*request*/, ::viam::app::v1::AcceptLegalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AcceptLegal(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::AcceptLegalRequest* /*request*/, ::viam::app::v1::AcceptLegalResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AcceptLegal(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::viam::app::v1::AcceptLegalRequest* /*request*/, ::viam::app::v1::AcceptLegalResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RegisterAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RegisterAuthApplication() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::RegisterAuthApplicationRequest, ::viam::app::v1::RegisterAuthApplicationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::viam::app::v1::RegisterAuthApplicationRequest* request, ::viam::app::v1::RegisterAuthApplicationResponse* response) { return this->RegisterAuthApplication(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterAuthApplication(
        ::grpc::experimental::MessageAllocator< ::viam::app::v1::RegisterAuthApplicationRequest, ::viam::app::v1::RegisterAuthApplicationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::RegisterAuthApplicationRequest, ::viam::app::v1::RegisterAuthApplicationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RegisterAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::RegisterAuthApplicationRequest* /*request*/, ::viam::app::v1::RegisterAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterAuthApplication(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::RegisterAuthApplicationRequest* /*request*/, ::viam::app::v1::RegisterAuthApplicationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterAuthApplication(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::viam::app::v1::RegisterAuthApplicationRequest* /*request*/, ::viam::app::v1::RegisterAuthApplicationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateAuthApplication() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateAuthApplicationRequest, ::viam::app::v1::UpdateAuthApplicationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::viam::app::v1::UpdateAuthApplicationRequest* request, ::viam::app::v1::UpdateAuthApplicationResponse* response) { return this->UpdateAuthApplication(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateAuthApplication(
        ::grpc::experimental::MessageAllocator< ::viam::app::v1::UpdateAuthApplicationRequest, ::viam::app::v1::UpdateAuthApplicationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateAuthApplicationRequest, ::viam::app::v1::UpdateAuthApplicationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateAuthApplicationRequest* /*request*/, ::viam::app::v1::UpdateAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateAuthApplication(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::UpdateAuthApplicationRequest* /*request*/, ::viam::app::v1::UpdateAuthApplicationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateAuthApplication(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::viam::app::v1::UpdateAuthApplicationRequest* /*request*/, ::viam::app::v1::UpdateAuthApplicationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAuthApplication() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::GetAuthApplicationRequest, ::viam::app::v1::GetAuthApplicationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::viam::app::v1::GetAuthApplicationRequest* request, ::viam::app::v1::GetAuthApplicationResponse* response) { return this->GetAuthApplication(context, request, response); }));}
    void SetMessageAllocatorFor_GetAuthApplication(
        ::grpc::experimental::MessageAllocator< ::viam::app::v1::GetAuthApplicationRequest, ::viam::app::v1::GetAuthApplicationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::GetAuthApplicationRequest, ::viam::app::v1::GetAuthApplicationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetAuthApplicationRequest* /*request*/, ::viam::app::v1::GetAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAuthApplication(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetAuthApplicationRequest* /*request*/, ::viam::app::v1::GetAuthApplicationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAuthApplication(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::viam::app::v1::GetAuthApplicationRequest* /*request*/, ::viam::app::v1::GetAuthApplicationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_IsLegalAccepted<ExperimentalWithCallbackMethod_AcceptLegal<ExperimentalWithCallbackMethod_RegisterAuthApplication<ExperimentalWithCallbackMethod_UpdateAuthApplication<ExperimentalWithCallbackMethod_GetAuthApplication<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_IsLegalAccepted<ExperimentalWithCallbackMethod_AcceptLegal<ExperimentalWithCallbackMethod_RegisterAuthApplication<ExperimentalWithCallbackMethod_UpdateAuthApplication<ExperimentalWithCallbackMethod_GetAuthApplication<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_IsLegalAccepted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsLegalAccepted() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_IsLegalAccepted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsLegalAccepted(::grpc::ServerContext* /*context*/, const ::viam::app::v1::IsLegalAcceptedRequest* /*request*/, ::viam::app::v1::IsLegalAcceptedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AcceptLegal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AcceptLegal() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AcceptLegal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptLegal(::grpc::ServerContext* /*context*/, const ::viam::app::v1::AcceptLegalRequest* /*request*/, ::viam::app::v1::AcceptLegalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterAuthApplication() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RegisterAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::RegisterAuthApplicationRequest* /*request*/, ::viam::app::v1::RegisterAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateAuthApplication() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateAuthApplicationRequest* /*request*/, ::viam::app::v1::UpdateAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAuthApplication() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetAuthApplicationRequest* /*request*/, ::viam::app::v1::GetAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsLegalAccepted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsLegalAccepted() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_IsLegalAccepted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsLegalAccepted(::grpc::ServerContext* /*context*/, const ::viam::app::v1::IsLegalAcceptedRequest* /*request*/, ::viam::app::v1::IsLegalAcceptedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsLegalAccepted(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AcceptLegal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AcceptLegal() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AcceptLegal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptLegal(::grpc::ServerContext* /*context*/, const ::viam::app::v1::AcceptLegalRequest* /*request*/, ::viam::app::v1::AcceptLegalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptLegal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterAuthApplication() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RegisterAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::RegisterAuthApplicationRequest* /*request*/, ::viam::app::v1::RegisterAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterAuthApplication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateAuthApplication() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateAuthApplicationRequest* /*request*/, ::viam::app::v1::UpdateAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateAuthApplication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAuthApplication() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetAuthApplicationRequest* /*request*/, ::viam::app::v1::GetAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAuthApplication(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IsLegalAccepted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IsLegalAccepted() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsLegalAccepted(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_IsLegalAccepted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsLegalAccepted(::grpc::ServerContext* /*context*/, const ::viam::app::v1::IsLegalAcceptedRequest* /*request*/, ::viam::app::v1::IsLegalAcceptedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsLegalAccepted(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsLegalAccepted(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AcceptLegal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AcceptLegal() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AcceptLegal(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AcceptLegal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptLegal(::grpc::ServerContext* /*context*/, const ::viam::app::v1::AcceptLegalRequest* /*request*/, ::viam::app::v1::AcceptLegalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AcceptLegal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AcceptLegal(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RegisterAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RegisterAuthApplication() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterAuthApplication(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RegisterAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::RegisterAuthApplicationRequest* /*request*/, ::viam::app::v1::RegisterAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RegisterAuthApplication(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RegisterAuthApplication(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateAuthApplication() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateAuthApplication(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateAuthApplicationRequest* /*request*/, ::viam::app::v1::UpdateAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateAuthApplication(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateAuthApplication(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAuthApplication() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAuthApplication(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetAuthApplicationRequest* /*request*/, ::viam::app::v1::GetAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAuthApplication(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAuthApplication(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsLegalAccepted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsLegalAccepted() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::IsLegalAcceptedRequest, ::viam::app::v1::IsLegalAcceptedResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::viam::app::v1::IsLegalAcceptedRequest, ::viam::app::v1::IsLegalAcceptedResponse>* streamer) {
                       return this->StreamedIsLegalAccepted(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsLegalAccepted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsLegalAccepted(::grpc::ServerContext* /*context*/, const ::viam::app::v1::IsLegalAcceptedRequest* /*request*/, ::viam::app::v1::IsLegalAcceptedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsLegalAccepted(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::IsLegalAcceptedRequest,::viam::app::v1::IsLegalAcceptedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AcceptLegal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AcceptLegal() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::AcceptLegalRequest, ::viam::app::v1::AcceptLegalResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::viam::app::v1::AcceptLegalRequest, ::viam::app::v1::AcceptLegalResponse>* streamer) {
                       return this->StreamedAcceptLegal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AcceptLegal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AcceptLegal(::grpc::ServerContext* /*context*/, const ::viam::app::v1::AcceptLegalRequest* /*request*/, ::viam::app::v1::AcceptLegalResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAcceptLegal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::AcceptLegalRequest,::viam::app::v1::AcceptLegalResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterAuthApplication() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::RegisterAuthApplicationRequest, ::viam::app::v1::RegisterAuthApplicationResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::viam::app::v1::RegisterAuthApplicationRequest, ::viam::app::v1::RegisterAuthApplicationResponse>* streamer) {
                       return this->StreamedRegisterAuthApplication(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::RegisterAuthApplicationRequest* /*request*/, ::viam::app::v1::RegisterAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterAuthApplication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::RegisterAuthApplicationRequest,::viam::app::v1::RegisterAuthApplicationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateAuthApplication() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::UpdateAuthApplicationRequest, ::viam::app::v1::UpdateAuthApplicationResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::viam::app::v1::UpdateAuthApplicationRequest, ::viam::app::v1::UpdateAuthApplicationResponse>* streamer) {
                       return this->StreamedUpdateAuthApplication(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateAuthApplicationRequest* /*request*/, ::viam::app::v1::UpdateAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateAuthApplication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::UpdateAuthApplicationRequest,::viam::app::v1::UpdateAuthApplicationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAuthApplication : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAuthApplication() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetAuthApplicationRequest, ::viam::app::v1::GetAuthApplicationResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::viam::app::v1::GetAuthApplicationRequest, ::viam::app::v1::GetAuthApplicationResponse>* streamer) {
                       return this->StreamedGetAuthApplication(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAuthApplication() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAuthApplication(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetAuthApplicationRequest* /*request*/, ::viam::app::v1::GetAuthApplicationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAuthApplication(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetAuthApplicationRequest,::viam::app::v1::GetAuthApplicationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_IsLegalAccepted<WithStreamedUnaryMethod_AcceptLegal<WithStreamedUnaryMethod_RegisterAuthApplication<WithStreamedUnaryMethod_UpdateAuthApplication<WithStreamedUnaryMethod_GetAuthApplication<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_IsLegalAccepted<WithStreamedUnaryMethod_AcceptLegal<WithStreamedUnaryMethod_RegisterAuthApplication<WithStreamedUnaryMethod_UpdateAuthApplication<WithStreamedUnaryMethod_GetAuthApplication<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace app
}  // namespace viam


#endif  // GRPC_app_2fv1_2fend_5fuser_2eproto__INCLUDED
