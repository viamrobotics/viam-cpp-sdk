// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/v1/end_user.proto

#include "app/v1/end_user.pb.h"
#include "app/v1/end_user.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace viam {
namespace app {
namespace v1 {

static const char* EndUserService_method_names[] = {
  "/viam.app.v1.EndUserService/IsLegalAccepted",
  "/viam.app.v1.EndUserService/AcceptLegal",
  "/viam.app.v1.EndUserService/RegisterAuthApplication",
  "/viam.app.v1.EndUserService/UpdateAuthApplication",
  "/viam.app.v1.EndUserService/GetAuthApplication",
};

std::unique_ptr< EndUserService::Stub> EndUserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EndUserService::Stub> stub(new EndUserService::Stub(channel));
  return stub;
}

EndUserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_IsLegalAccepted_(EndUserService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AcceptLegal_(EndUserService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterAuthApplication_(EndUserService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateAuthApplication_(EndUserService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAuthApplication_(EndUserService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EndUserService::Stub::IsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::viam::app::v1::IsLegalAcceptedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsLegalAccepted_, context, request, response);
}

void EndUserService::Stub::experimental_async::IsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest* request, ::viam::app::v1::IsLegalAcceptedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsLegalAccepted_, context, request, response, std::move(f));
}

void EndUserService::Stub::experimental_async::IsLegalAccepted(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::IsLegalAcceptedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsLegalAccepted_, context, request, response, std::move(f));
}

void EndUserService::Stub::experimental_async::IsLegalAccepted(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest* request, ::viam::app::v1::IsLegalAcceptedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsLegalAccepted_, context, request, response, reactor);
}

void EndUserService::Stub::experimental_async::IsLegalAccepted(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::IsLegalAcceptedResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsLegalAccepted_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::app::v1::IsLegalAcceptedResponse>* EndUserService::Stub::AsyncIsLegalAcceptedRaw(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::app::v1::IsLegalAcceptedResponse>::Create(channel_.get(), cq, rpcmethod_IsLegalAccepted_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::app::v1::IsLegalAcceptedResponse>* EndUserService::Stub::PrepareAsyncIsLegalAcceptedRaw(::grpc::ClientContext* context, const ::viam::app::v1::IsLegalAcceptedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::app::v1::IsLegalAcceptedResponse>::Create(channel_.get(), cq, rpcmethod_IsLegalAccepted_, context, request, false);
}

::grpc::Status EndUserService::Stub::AcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::viam::app::v1::AcceptLegalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AcceptLegal_, context, request, response);
}

void EndUserService::Stub::experimental_async::AcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest* request, ::viam::app::v1::AcceptLegalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AcceptLegal_, context, request, response, std::move(f));
}

void EndUserService::Stub::experimental_async::AcceptLegal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::AcceptLegalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AcceptLegal_, context, request, response, std::move(f));
}

void EndUserService::Stub::experimental_async::AcceptLegal(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest* request, ::viam::app::v1::AcceptLegalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AcceptLegal_, context, request, response, reactor);
}

void EndUserService::Stub::experimental_async::AcceptLegal(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::AcceptLegalResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AcceptLegal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::app::v1::AcceptLegalResponse>* EndUserService::Stub::AsyncAcceptLegalRaw(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::app::v1::AcceptLegalResponse>::Create(channel_.get(), cq, rpcmethod_AcceptLegal_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::app::v1::AcceptLegalResponse>* EndUserService::Stub::PrepareAsyncAcceptLegalRaw(::grpc::ClientContext* context, const ::viam::app::v1::AcceptLegalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::app::v1::AcceptLegalResponse>::Create(channel_.get(), cq, rpcmethod_AcceptLegal_, context, request, false);
}

::grpc::Status EndUserService::Stub::RegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::viam::app::v1::RegisterAuthApplicationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterAuthApplication_, context, request, response);
}

void EndUserService::Stub::experimental_async::RegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterAuthApplication_, context, request, response, std::move(f));
}

void EndUserService::Stub::experimental_async::RegisterAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RegisterAuthApplication_, context, request, response, std::move(f));
}

void EndUserService::Stub::experimental_async::RegisterAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterAuthApplication_, context, request, response, reactor);
}

void EndUserService::Stub::experimental_async::RegisterAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::RegisterAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RegisterAuthApplication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::app::v1::RegisterAuthApplicationResponse>* EndUserService::Stub::AsyncRegisterAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::app::v1::RegisterAuthApplicationResponse>::Create(channel_.get(), cq, rpcmethod_RegisterAuthApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::app::v1::RegisterAuthApplicationResponse>* EndUserService::Stub::PrepareAsyncRegisterAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::app::v1::RegisterAuthApplicationResponse>::Create(channel_.get(), cq, rpcmethod_RegisterAuthApplication_, context, request, false);
}

::grpc::Status EndUserService::Stub::UpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::viam::app::v1::UpdateAuthApplicationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateAuthApplication_, context, request, response);
}

void EndUserService::Stub::experimental_async::UpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateAuthApplication_, context, request, response, std::move(f));
}

void EndUserService::Stub::experimental_async::UpdateAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateAuthApplication_, context, request, response, std::move(f));
}

void EndUserService::Stub::experimental_async::UpdateAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateAuthApplication_, context, request, response, reactor);
}

void EndUserService::Stub::experimental_async::UpdateAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateAuthApplication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateAuthApplicationResponse>* EndUserService::Stub::AsyncUpdateAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::app::v1::UpdateAuthApplicationResponse>::Create(channel_.get(), cq, rpcmethod_UpdateAuthApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateAuthApplicationResponse>* EndUserService::Stub::PrepareAsyncUpdateAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::app::v1::UpdateAuthApplicationResponse>::Create(channel_.get(), cq, rpcmethod_UpdateAuthApplication_, context, request, false);
}

::grpc::Status EndUserService::Stub::GetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::viam::app::v1::GetAuthApplicationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAuthApplication_, context, request, response);
}

void EndUserService::Stub::experimental_async::GetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest* request, ::viam::app::v1::GetAuthApplicationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAuthApplication_, context, request, response, std::move(f));
}

void EndUserService::Stub::experimental_async::GetAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAuthApplicationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAuthApplication_, context, request, response, std::move(f));
}

void EndUserService::Stub::experimental_async::GetAuthApplication(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest* request, ::viam::app::v1::GetAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAuthApplication_, context, request, response, reactor);
}

void EndUserService::Stub::experimental_async::GetAuthApplication(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAuthApplicationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAuthApplication_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAuthApplicationResponse>* EndUserService::Stub::AsyncGetAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::app::v1::GetAuthApplicationResponse>::Create(channel_.get(), cq, rpcmethod_GetAuthApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAuthApplicationResponse>* EndUserService::Stub::PrepareAsyncGetAuthApplicationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetAuthApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::viam::app::v1::GetAuthApplicationResponse>::Create(channel_.get(), cq, rpcmethod_GetAuthApplication_, context, request, false);
}

EndUserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EndUserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EndUserService::Service, ::viam::app::v1::IsLegalAcceptedRequest, ::viam::app::v1::IsLegalAcceptedResponse>(
          [](EndUserService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::app::v1::IsLegalAcceptedRequest* req,
             ::viam::app::v1::IsLegalAcceptedResponse* resp) {
               return service->IsLegalAccepted(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EndUserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EndUserService::Service, ::viam::app::v1::AcceptLegalRequest, ::viam::app::v1::AcceptLegalResponse>(
          [](EndUserService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::app::v1::AcceptLegalRequest* req,
             ::viam::app::v1::AcceptLegalResponse* resp) {
               return service->AcceptLegal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EndUserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EndUserService::Service, ::viam::app::v1::RegisterAuthApplicationRequest, ::viam::app::v1::RegisterAuthApplicationResponse>(
          [](EndUserService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::app::v1::RegisterAuthApplicationRequest* req,
             ::viam::app::v1::RegisterAuthApplicationResponse* resp) {
               return service->RegisterAuthApplication(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EndUserService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EndUserService::Service, ::viam::app::v1::UpdateAuthApplicationRequest, ::viam::app::v1::UpdateAuthApplicationResponse>(
          [](EndUserService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::app::v1::UpdateAuthApplicationRequest* req,
             ::viam::app::v1::UpdateAuthApplicationResponse* resp) {
               return service->UpdateAuthApplication(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EndUserService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EndUserService::Service, ::viam::app::v1::GetAuthApplicationRequest, ::viam::app::v1::GetAuthApplicationResponse>(
          [](EndUserService::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::viam::app::v1::GetAuthApplicationRequest* req,
             ::viam::app::v1::GetAuthApplicationResponse* resp) {
               return service->GetAuthApplication(ctx, req, resp);
             }, this)));
}

EndUserService::Service::~Service() {
}

::grpc::Status EndUserService::Service::IsLegalAccepted(::grpc::ServerContext* context, const ::viam::app::v1::IsLegalAcceptedRequest* request, ::viam::app::v1::IsLegalAcceptedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EndUserService::Service::AcceptLegal(::grpc::ServerContext* context, const ::viam::app::v1::AcceptLegalRequest* request, ::viam::app::v1::AcceptLegalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EndUserService::Service::RegisterAuthApplication(::grpc::ServerContext* context, const ::viam::app::v1::RegisterAuthApplicationRequest* request, ::viam::app::v1::RegisterAuthApplicationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EndUserService::Service::UpdateAuthApplication(::grpc::ServerContext* context, const ::viam::app::v1::UpdateAuthApplicationRequest* request, ::viam::app::v1::UpdateAuthApplicationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EndUserService::Service::GetAuthApplication(::grpc::ServerContext* context, const ::viam::app::v1::GetAuthApplicationRequest* request, ::viam::app::v1::GetAuthApplicationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viam
}  // namespace app
}  // namespace v1

