// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/v1/end_user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fv1_2fend_5fuser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_2fv1_2fend_5fuser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_2fv1_2fend_5fuser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fv1_2fend_5fuser_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_app_2fv1_2fend_5fuser_2eproto;
namespace viam {
namespace app {
namespace v1 {
class AcceptLegalRequest;
struct AcceptLegalRequestDefaultTypeInternal;
extern AcceptLegalRequestDefaultTypeInternal _AcceptLegalRequest_default_instance_;
class AcceptLegalResponse;
struct AcceptLegalResponseDefaultTypeInternal;
extern AcceptLegalResponseDefaultTypeInternal _AcceptLegalResponse_default_instance_;
class IsLegalAcceptedRequest;
struct IsLegalAcceptedRequestDefaultTypeInternal;
extern IsLegalAcceptedRequestDefaultTypeInternal _IsLegalAcceptedRequest_default_instance_;
class IsLegalAcceptedResponse;
struct IsLegalAcceptedResponseDefaultTypeInternal;
extern IsLegalAcceptedResponseDefaultTypeInternal _IsLegalAcceptedResponse_default_instance_;
}  // namespace v1
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::app::v1::AcceptLegalRequest* Arena::CreateMaybeMessage<::viam::app::v1::AcceptLegalRequest>(Arena*);
template<> ::viam::app::v1::AcceptLegalResponse* Arena::CreateMaybeMessage<::viam::app::v1::AcceptLegalResponse>(Arena*);
template<> ::viam::app::v1::IsLegalAcceptedRequest* Arena::CreateMaybeMessage<::viam::app::v1::IsLegalAcceptedRequest>(Arena*);
template<> ::viam::app::v1::IsLegalAcceptedResponse* Arena::CreateMaybeMessage<::viam::app::v1::IsLegalAcceptedResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace app {
namespace v1 {

// ===================================================================

class IsLegalAcceptedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.v1.IsLegalAcceptedRequest) */ {
 public:
  inline IsLegalAcceptedRequest() : IsLegalAcceptedRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR IsLegalAcceptedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsLegalAcceptedRequest(const IsLegalAcceptedRequest& from);
  IsLegalAcceptedRequest(IsLegalAcceptedRequest&& from) noexcept
    : IsLegalAcceptedRequest() {
    *this = ::std::move(from);
  }

  inline IsLegalAcceptedRequest& operator=(const IsLegalAcceptedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsLegalAcceptedRequest& operator=(IsLegalAcceptedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsLegalAcceptedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsLegalAcceptedRequest* internal_default_instance() {
    return reinterpret_cast<const IsLegalAcceptedRequest*>(
               &_IsLegalAcceptedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IsLegalAcceptedRequest& a, IsLegalAcceptedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsLegalAcceptedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsLegalAcceptedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsLegalAcceptedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsLegalAcceptedRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IsLegalAcceptedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IsLegalAcceptedRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.IsLegalAcceptedRequest";
  }
  protected:
  explicit IsLegalAcceptedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.v1.IsLegalAcceptedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};
// -------------------------------------------------------------------

class IsLegalAcceptedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.IsLegalAcceptedResponse) */ {
 public:
  inline IsLegalAcceptedResponse() : IsLegalAcceptedResponse(nullptr) {}
  ~IsLegalAcceptedResponse() override;
  explicit PROTOBUF_CONSTEXPR IsLegalAcceptedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsLegalAcceptedResponse(const IsLegalAcceptedResponse& from);
  IsLegalAcceptedResponse(IsLegalAcceptedResponse&& from) noexcept
    : IsLegalAcceptedResponse() {
    *this = ::std::move(from);
  }

  inline IsLegalAcceptedResponse& operator=(const IsLegalAcceptedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsLegalAcceptedResponse& operator=(IsLegalAcceptedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsLegalAcceptedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsLegalAcceptedResponse* internal_default_instance() {
    return reinterpret_cast<const IsLegalAcceptedResponse*>(
               &_IsLegalAcceptedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IsLegalAcceptedResponse& a, IsLegalAcceptedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsLegalAcceptedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsLegalAcceptedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsLegalAcceptedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsLegalAcceptedResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IsLegalAcceptedResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IsLegalAcceptedResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsLegalAcceptedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.IsLegalAcceptedResponse";
  }
  protected:
  explicit IsLegalAcceptedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptedLegalFieldNumber = 1,
  };
  // bool accepted_legal = 1 [json_name = "acceptedLegal"];
  void clear_accepted_legal();
  bool accepted_legal() const;
  void set_accepted_legal(bool value);
  private:
  bool _internal_accepted_legal() const;
  void _internal_set_accepted_legal(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.v1.IsLegalAcceptedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool accepted_legal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};
// -------------------------------------------------------------------

class AcceptLegalRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.v1.AcceptLegalRequest) */ {
 public:
  inline AcceptLegalRequest() : AcceptLegalRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AcceptLegalRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcceptLegalRequest(const AcceptLegalRequest& from);
  AcceptLegalRequest(AcceptLegalRequest&& from) noexcept
    : AcceptLegalRequest() {
    *this = ::std::move(from);
  }

  inline AcceptLegalRequest& operator=(const AcceptLegalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptLegalRequest& operator=(AcceptLegalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcceptLegalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcceptLegalRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptLegalRequest*>(
               &_AcceptLegalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AcceptLegalRequest& a, AcceptLegalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptLegalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptLegalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcceptLegalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AcceptLegalRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AcceptLegalRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AcceptLegalRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.AcceptLegalRequest";
  }
  protected:
  explicit AcceptLegalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.v1.AcceptLegalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};
// -------------------------------------------------------------------

class AcceptLegalResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.v1.AcceptLegalResponse) */ {
 public:
  inline AcceptLegalResponse() : AcceptLegalResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AcceptLegalResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcceptLegalResponse(const AcceptLegalResponse& from);
  AcceptLegalResponse(AcceptLegalResponse&& from) noexcept
    : AcceptLegalResponse() {
    *this = ::std::move(from);
  }

  inline AcceptLegalResponse& operator=(const AcceptLegalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptLegalResponse& operator=(AcceptLegalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcceptLegalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcceptLegalResponse* internal_default_instance() {
    return reinterpret_cast<const AcceptLegalResponse*>(
               &_AcceptLegalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AcceptLegalResponse& a, AcceptLegalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptLegalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptLegalResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcceptLegalResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AcceptLegalResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AcceptLegalResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AcceptLegalResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.v1.AcceptLegalResponse";
  }
  protected:
  explicit AcceptLegalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.v1.AcceptLegalResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IsLegalAcceptedRequest

// -------------------------------------------------------------------

// IsLegalAcceptedResponse

// bool accepted_legal = 1 [json_name = "acceptedLegal"];
inline void IsLegalAcceptedResponse::clear_accepted_legal() {
  accepted_legal_ = false;
}
inline bool IsLegalAcceptedResponse::_internal_accepted_legal() const {
  return accepted_legal_;
}
inline bool IsLegalAcceptedResponse::accepted_legal() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.IsLegalAcceptedResponse.accepted_legal)
  return _internal_accepted_legal();
}
inline void IsLegalAcceptedResponse::_internal_set_accepted_legal(bool value) {
  
  accepted_legal_ = value;
}
inline void IsLegalAcceptedResponse::set_accepted_legal(bool value) {
  _internal_set_accepted_legal(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.IsLegalAcceptedResponse.accepted_legal)
}

// -------------------------------------------------------------------

// AcceptLegalRequest

// -------------------------------------------------------------------

// AcceptLegalResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace app
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_2fv1_2fend_5fuser_2eproto
