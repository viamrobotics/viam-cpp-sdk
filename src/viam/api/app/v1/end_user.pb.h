// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/v1/end_user.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fv1_2fend_5fuser_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_app_2fv1_2fend_5fuser_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_app_2fv1_2fend_5fuser_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fv1_2fend_5fuser_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_app_2fv1_2fend_5fuser_2eproto;
namespace viam {
namespace app {
namespace v1 {
class AcceptLegalRequest;
struct AcceptLegalRequestDefaultTypeInternal;
extern AcceptLegalRequestDefaultTypeInternal _AcceptLegalRequest_default_instance_;
class AcceptLegalResponse;
struct AcceptLegalResponseDefaultTypeInternal;
extern AcceptLegalResponseDefaultTypeInternal _AcceptLegalResponse_default_instance_;
class GetAuthApplicationRequest;
struct GetAuthApplicationRequestDefaultTypeInternal;
extern GetAuthApplicationRequestDefaultTypeInternal _GetAuthApplicationRequest_default_instance_;
class GetAuthApplicationResponse;
struct GetAuthApplicationResponseDefaultTypeInternal;
extern GetAuthApplicationResponseDefaultTypeInternal _GetAuthApplicationResponse_default_instance_;
class IsLegalAcceptedRequest;
struct IsLegalAcceptedRequestDefaultTypeInternal;
extern IsLegalAcceptedRequestDefaultTypeInternal _IsLegalAcceptedRequest_default_instance_;
class IsLegalAcceptedResponse;
struct IsLegalAcceptedResponseDefaultTypeInternal;
extern IsLegalAcceptedResponseDefaultTypeInternal _IsLegalAcceptedResponse_default_instance_;
class RegisterAuthApplicationRequest;
struct RegisterAuthApplicationRequestDefaultTypeInternal;
extern RegisterAuthApplicationRequestDefaultTypeInternal _RegisterAuthApplicationRequest_default_instance_;
class RegisterAuthApplicationResponse;
struct RegisterAuthApplicationResponseDefaultTypeInternal;
extern RegisterAuthApplicationResponseDefaultTypeInternal _RegisterAuthApplicationResponse_default_instance_;
class UpdateAuthApplicationRequest;
struct UpdateAuthApplicationRequestDefaultTypeInternal;
extern UpdateAuthApplicationRequestDefaultTypeInternal _UpdateAuthApplicationRequest_default_instance_;
class UpdateAuthApplicationResponse;
struct UpdateAuthApplicationResponseDefaultTypeInternal;
extern UpdateAuthApplicationResponseDefaultTypeInternal _UpdateAuthApplicationResponse_default_instance_;
}  // namespace v1
}  // namespace app
}  // namespace viam
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace viam {
namespace app {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class UpdateAuthApplicationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.UpdateAuthApplicationResponse) */ {
 public:
  inline UpdateAuthApplicationResponse() : UpdateAuthApplicationResponse(nullptr) {}
  ~UpdateAuthApplicationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateAuthApplicationResponse(::google::protobuf::internal::ConstantInitialized);

  inline UpdateAuthApplicationResponse(const UpdateAuthApplicationResponse& from)
      : UpdateAuthApplicationResponse(nullptr, from) {}
  UpdateAuthApplicationResponse(UpdateAuthApplicationResponse&& from) noexcept
    : UpdateAuthApplicationResponse() {
    *this = ::std::move(from);
  }

  inline UpdateAuthApplicationResponse& operator=(const UpdateAuthApplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAuthApplicationResponse& operator=(UpdateAuthApplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAuthApplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAuthApplicationResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateAuthApplicationResponse*>(
               &_UpdateAuthApplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateAuthApplicationResponse& a, UpdateAuthApplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAuthApplicationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAuthApplicationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAuthApplicationResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAuthApplicationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateAuthApplicationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateAuthApplicationResponse& from) {
    UpdateAuthApplicationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateAuthApplicationResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.v1.UpdateAuthApplicationResponse";
  }
  protected:
  explicit UpdateAuthApplicationResponse(::google::protobuf::Arena* arena);
  UpdateAuthApplicationResponse(::google::protobuf::Arena* arena, const UpdateAuthApplicationResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
    kApplicationNameFieldNumber = 2,
  };
  // string application_id = 1 [json_name = "applicationId"];
  void clear_application_id() ;
  const std::string& application_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_id(Arg_&& arg, Args_... args);
  std::string* mutable_application_id();
  PROTOBUF_NODISCARD std::string* release_application_id();
  void set_allocated_application_id(std::string* value);

  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(
      const std::string& value);
  std::string* _internal_mutable_application_id();

  public:
  // string application_name = 2 [json_name = "applicationName"];
  void clear_application_name() ;
  const std::string& application_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_name(Arg_&& arg, Args_... args);
  std::string* mutable_application_name();
  PROTOBUF_NODISCARD std::string* release_application_name();
  void set_allocated_application_name(std::string* value);

  private:
  const std::string& _internal_application_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_name(
      const std::string& value);
  std::string* _internal_mutable_application_name();

  public:
  // @@protoc_insertion_point(class_scope:viam.app.v1.UpdateAuthApplicationResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      80, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr application_id_;
    ::google::protobuf::internal::ArenaStringPtr application_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};// -------------------------------------------------------------------

class UpdateAuthApplicationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.UpdateAuthApplicationRequest) */ {
 public:
  inline UpdateAuthApplicationRequest() : UpdateAuthApplicationRequest(nullptr) {}
  ~UpdateAuthApplicationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateAuthApplicationRequest(::google::protobuf::internal::ConstantInitialized);

  inline UpdateAuthApplicationRequest(const UpdateAuthApplicationRequest& from)
      : UpdateAuthApplicationRequest(nullptr, from) {}
  UpdateAuthApplicationRequest(UpdateAuthApplicationRequest&& from) noexcept
    : UpdateAuthApplicationRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAuthApplicationRequest& operator=(const UpdateAuthApplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAuthApplicationRequest& operator=(UpdateAuthApplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateAuthApplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateAuthApplicationRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAuthApplicationRequest*>(
               &_UpdateAuthApplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateAuthApplicationRequest& a, UpdateAuthApplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAuthApplicationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAuthApplicationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateAuthApplicationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateAuthApplicationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateAuthApplicationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UpdateAuthApplicationRequest& from) {
    UpdateAuthApplicationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UpdateAuthApplicationRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.v1.UpdateAuthApplicationRequest";
  }
  protected:
  explicit UpdateAuthApplicationRequest(::google::protobuf::Arena* arena);
  UpdateAuthApplicationRequest(::google::protobuf::Arena* arena, const UpdateAuthApplicationRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginUrisFieldNumber = 4,
    kRedirectUrisFieldNumber = 5,
    kOrgIdFieldNumber = 1,
    kApplicationIdFieldNumber = 2,
    kApplicationNameFieldNumber = 3,
    kLogoutUriFieldNumber = 6,
  };
  // repeated string origin_uris = 4 [json_name = "originUris"];
  int origin_uris_size() const;
  private:
  int _internal_origin_uris_size() const;

  public:
  void clear_origin_uris() ;
  const std::string& origin_uris(int index) const;
  std::string* mutable_origin_uris(int index);
  void set_origin_uris(int index, const std::string& value);
  void set_origin_uris(int index, std::string&& value);
  void set_origin_uris(int index, const char* value);
  void set_origin_uris(int index, const char* value, std::size_t size);
  void set_origin_uris(int index, absl::string_view value);
  std::string* add_origin_uris();
  void add_origin_uris(const std::string& value);
  void add_origin_uris(std::string&& value);
  void add_origin_uris(const char* value);
  void add_origin_uris(const char* value, std::size_t size);
  void add_origin_uris(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& origin_uris() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_origin_uris();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_origin_uris() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_origin_uris();

  public:
  // repeated string redirect_uris = 5 [json_name = "redirectUris"];
  int redirect_uris_size() const;
  private:
  int _internal_redirect_uris_size() const;

  public:
  void clear_redirect_uris() ;
  const std::string& redirect_uris(int index) const;
  std::string* mutable_redirect_uris(int index);
  void set_redirect_uris(int index, const std::string& value);
  void set_redirect_uris(int index, std::string&& value);
  void set_redirect_uris(int index, const char* value);
  void set_redirect_uris(int index, const char* value, std::size_t size);
  void set_redirect_uris(int index, absl::string_view value);
  std::string* add_redirect_uris();
  void add_redirect_uris(const std::string& value);
  void add_redirect_uris(std::string&& value);
  void add_redirect_uris(const char* value);
  void add_redirect_uris(const char* value, std::size_t size);
  void add_redirect_uris(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& redirect_uris() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_redirect_uris();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_redirect_uris() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_redirect_uris();

  public:
  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id() ;
  const std::string& org_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_org_id(Arg_&& arg, Args_... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* value);

  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(
      const std::string& value);
  std::string* _internal_mutable_org_id();

  public:
  // string application_id = 2 [json_name = "applicationId"];
  void clear_application_id() ;
  const std::string& application_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_id(Arg_&& arg, Args_... args);
  std::string* mutable_application_id();
  PROTOBUF_NODISCARD std::string* release_application_id();
  void set_allocated_application_id(std::string* value);

  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(
      const std::string& value);
  std::string* _internal_mutable_application_id();

  public:
  // string application_name = 3 [json_name = "applicationName"];
  void clear_application_name() ;
  const std::string& application_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_name(Arg_&& arg, Args_... args);
  std::string* mutable_application_name();
  PROTOBUF_NODISCARD std::string* release_application_name();
  void set_allocated_application_name(std::string* value);

  private:
  const std::string& _internal_application_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_name(
      const std::string& value);
  std::string* _internal_mutable_application_name();

  public:
  // string logout_uri = 6 [json_name = "logoutUri"];
  void clear_logout_uri() ;
  const std::string& logout_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logout_uri(Arg_&& arg, Args_... args);
  std::string* mutable_logout_uri();
  PROTOBUF_NODISCARD std::string* release_logout_uri();
  void set_allocated_logout_uri(std::string* value);

  private:
  const std::string& _internal_logout_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logout_uri(
      const std::string& value);
  std::string* _internal_mutable_logout_uri();

  public:
  // @@protoc_insertion_point(class_scope:viam.app.v1.UpdateAuthApplicationRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      119, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> origin_uris_;
    ::google::protobuf::RepeatedPtrField<std::string> redirect_uris_;
    ::google::protobuf::internal::ArenaStringPtr org_id_;
    ::google::protobuf::internal::ArenaStringPtr application_id_;
    ::google::protobuf::internal::ArenaStringPtr application_name_;
    ::google::protobuf::internal::ArenaStringPtr logout_uri_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};// -------------------------------------------------------------------

class RegisterAuthApplicationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.RegisterAuthApplicationResponse) */ {
 public:
  inline RegisterAuthApplicationResponse() : RegisterAuthApplicationResponse(nullptr) {}
  ~RegisterAuthApplicationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterAuthApplicationResponse(::google::protobuf::internal::ConstantInitialized);

  inline RegisterAuthApplicationResponse(const RegisterAuthApplicationResponse& from)
      : RegisterAuthApplicationResponse(nullptr, from) {}
  RegisterAuthApplicationResponse(RegisterAuthApplicationResponse&& from) noexcept
    : RegisterAuthApplicationResponse() {
    *this = ::std::move(from);
  }

  inline RegisterAuthApplicationResponse& operator=(const RegisterAuthApplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAuthApplicationResponse& operator=(RegisterAuthApplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterAuthApplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterAuthApplicationResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterAuthApplicationResponse*>(
               &_RegisterAuthApplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterAuthApplicationResponse& a, RegisterAuthApplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAuthApplicationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterAuthApplicationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterAuthApplicationResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterAuthApplicationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterAuthApplicationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegisterAuthApplicationResponse& from) {
    RegisterAuthApplicationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegisterAuthApplicationResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.v1.RegisterAuthApplicationResponse";
  }
  protected:
  explicit RegisterAuthApplicationResponse(::google::protobuf::Arena* arena);
  RegisterAuthApplicationResponse(::google::protobuf::Arena* arena, const RegisterAuthApplicationResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
    kApplicationNameFieldNumber = 2,
    kClientSecretFieldNumber = 3,
  };
  // string application_id = 1 [json_name = "applicationId"];
  void clear_application_id() ;
  const std::string& application_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_id(Arg_&& arg, Args_... args);
  std::string* mutable_application_id();
  PROTOBUF_NODISCARD std::string* release_application_id();
  void set_allocated_application_id(std::string* value);

  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(
      const std::string& value);
  std::string* _internal_mutable_application_id();

  public:
  // string application_name = 2 [json_name = "applicationName"];
  void clear_application_name() ;
  const std::string& application_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_name(Arg_&& arg, Args_... args);
  std::string* mutable_application_name();
  PROTOBUF_NODISCARD std::string* release_application_name();
  void set_allocated_application_name(std::string* value);

  private:
  const std::string& _internal_application_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_name(
      const std::string& value);
  std::string* _internal_mutable_application_name();

  public:
  // string client_secret = 3 [json_name = "clientSecret"];
  void clear_client_secret() ;
  const std::string& client_secret() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_secret(Arg_&& arg, Args_... args);
  std::string* mutable_client_secret();
  PROTOBUF_NODISCARD std::string* release_client_secret();
  void set_allocated_client_secret(std::string* value);

  private:
  const std::string& _internal_client_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_secret(
      const std::string& value);
  std::string* _internal_mutable_client_secret();

  public:
  // @@protoc_insertion_point(class_scope:viam.app.v1.RegisterAuthApplicationResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      95, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr application_id_;
    ::google::protobuf::internal::ArenaStringPtr application_name_;
    ::google::protobuf::internal::ArenaStringPtr client_secret_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};// -------------------------------------------------------------------

class RegisterAuthApplicationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.RegisterAuthApplicationRequest) */ {
 public:
  inline RegisterAuthApplicationRequest() : RegisterAuthApplicationRequest(nullptr) {}
  ~RegisterAuthApplicationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisterAuthApplicationRequest(::google::protobuf::internal::ConstantInitialized);

  inline RegisterAuthApplicationRequest(const RegisterAuthApplicationRequest& from)
      : RegisterAuthApplicationRequest(nullptr, from) {}
  RegisterAuthApplicationRequest(RegisterAuthApplicationRequest&& from) noexcept
    : RegisterAuthApplicationRequest() {
    *this = ::std::move(from);
  }

  inline RegisterAuthApplicationRequest& operator=(const RegisterAuthApplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterAuthApplicationRequest& operator=(RegisterAuthApplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterAuthApplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterAuthApplicationRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterAuthApplicationRequest*>(
               &_RegisterAuthApplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisterAuthApplicationRequest& a, RegisterAuthApplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterAuthApplicationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterAuthApplicationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterAuthApplicationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterAuthApplicationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RegisterAuthApplicationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RegisterAuthApplicationRequest& from) {
    RegisterAuthApplicationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RegisterAuthApplicationRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.v1.RegisterAuthApplicationRequest";
  }
  protected:
  explicit RegisterAuthApplicationRequest(::google::protobuf::Arena* arena);
  RegisterAuthApplicationRequest(::google::protobuf::Arena* arena, const RegisterAuthApplicationRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginUrisFieldNumber = 3,
    kRedirectUrisFieldNumber = 4,
    kApplicationNameFieldNumber = 1,
    kOrgIdFieldNumber = 2,
    kLogoutUriFieldNumber = 5,
  };
  // repeated string origin_uris = 3 [json_name = "originUris"];
  int origin_uris_size() const;
  private:
  int _internal_origin_uris_size() const;

  public:
  void clear_origin_uris() ;
  const std::string& origin_uris(int index) const;
  std::string* mutable_origin_uris(int index);
  void set_origin_uris(int index, const std::string& value);
  void set_origin_uris(int index, std::string&& value);
  void set_origin_uris(int index, const char* value);
  void set_origin_uris(int index, const char* value, std::size_t size);
  void set_origin_uris(int index, absl::string_view value);
  std::string* add_origin_uris();
  void add_origin_uris(const std::string& value);
  void add_origin_uris(std::string&& value);
  void add_origin_uris(const char* value);
  void add_origin_uris(const char* value, std::size_t size);
  void add_origin_uris(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& origin_uris() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_origin_uris();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_origin_uris() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_origin_uris();

  public:
  // repeated string redirect_uris = 4 [json_name = "redirectUris"];
  int redirect_uris_size() const;
  private:
  int _internal_redirect_uris_size() const;

  public:
  void clear_redirect_uris() ;
  const std::string& redirect_uris(int index) const;
  std::string* mutable_redirect_uris(int index);
  void set_redirect_uris(int index, const std::string& value);
  void set_redirect_uris(int index, std::string&& value);
  void set_redirect_uris(int index, const char* value);
  void set_redirect_uris(int index, const char* value, std::size_t size);
  void set_redirect_uris(int index, absl::string_view value);
  std::string* add_redirect_uris();
  void add_redirect_uris(const std::string& value);
  void add_redirect_uris(std::string&& value);
  void add_redirect_uris(const char* value);
  void add_redirect_uris(const char* value, std::size_t size);
  void add_redirect_uris(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& redirect_uris() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_redirect_uris();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_redirect_uris() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_redirect_uris();

  public:
  // string application_name = 1 [json_name = "applicationName"];
  void clear_application_name() ;
  const std::string& application_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_name(Arg_&& arg, Args_... args);
  std::string* mutable_application_name();
  PROTOBUF_NODISCARD std::string* release_application_name();
  void set_allocated_application_name(std::string* value);

  private:
  const std::string& _internal_application_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_name(
      const std::string& value);
  std::string* _internal_mutable_application_name();

  public:
  // string org_id = 2 [json_name = "orgId"];
  void clear_org_id() ;
  const std::string& org_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_org_id(Arg_&& arg, Args_... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* value);

  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(
      const std::string& value);
  std::string* _internal_mutable_org_id();

  public:
  // string logout_uri = 5 [json_name = "logoutUri"];
  void clear_logout_uri() ;
  const std::string& logout_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logout_uri(Arg_&& arg, Args_... args);
  std::string* mutable_logout_uri();
  PROTOBUF_NODISCARD std::string* release_logout_uri();
  void set_allocated_logout_uri(std::string* value);

  private:
  const std::string& _internal_logout_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logout_uri(
      const std::string& value);
  std::string* _internal_mutable_logout_uri();

  public:
  // @@protoc_insertion_point(class_scope:viam.app.v1.RegisterAuthApplicationRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      107, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> origin_uris_;
    ::google::protobuf::RepeatedPtrField<std::string> redirect_uris_;
    ::google::protobuf::internal::ArenaStringPtr application_name_;
    ::google::protobuf::internal::ArenaStringPtr org_id_;
    ::google::protobuf::internal::ArenaStringPtr logout_uri_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};// -------------------------------------------------------------------

class IsLegalAcceptedResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.IsLegalAcceptedResponse) */ {
 public:
  inline IsLegalAcceptedResponse() : IsLegalAcceptedResponse(nullptr) {}
  ~IsLegalAcceptedResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IsLegalAcceptedResponse(::google::protobuf::internal::ConstantInitialized);

  inline IsLegalAcceptedResponse(const IsLegalAcceptedResponse& from)
      : IsLegalAcceptedResponse(nullptr, from) {}
  IsLegalAcceptedResponse(IsLegalAcceptedResponse&& from) noexcept
    : IsLegalAcceptedResponse() {
    *this = ::std::move(from);
  }

  inline IsLegalAcceptedResponse& operator=(const IsLegalAcceptedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsLegalAcceptedResponse& operator=(IsLegalAcceptedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsLegalAcceptedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsLegalAcceptedResponse* internal_default_instance() {
    return reinterpret_cast<const IsLegalAcceptedResponse*>(
               &_IsLegalAcceptedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IsLegalAcceptedResponse& a, IsLegalAcceptedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsLegalAcceptedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsLegalAcceptedResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsLegalAcceptedResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsLegalAcceptedResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IsLegalAcceptedResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IsLegalAcceptedResponse& from) {
    IsLegalAcceptedResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IsLegalAcceptedResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.v1.IsLegalAcceptedResponse";
  }
  protected:
  explicit IsLegalAcceptedResponse(::google::protobuf::Arena* arena);
  IsLegalAcceptedResponse(::google::protobuf::Arena* arena, const IsLegalAcceptedResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptedLegalFieldNumber = 1,
  };
  // bool accepted_legal = 1 [json_name = "acceptedLegal"];
  void clear_accepted_legal() ;
  bool accepted_legal() const;
  void set_accepted_legal(bool value);

  private:
  bool _internal_accepted_legal() const;
  void _internal_set_accepted_legal(bool value);

  public:
  // @@protoc_insertion_point(class_scope:viam.app.v1.IsLegalAcceptedResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool accepted_legal_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};// -------------------------------------------------------------------

class IsLegalAcceptedRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.v1.IsLegalAcceptedRequest) */ {
 public:
  inline IsLegalAcceptedRequest() : IsLegalAcceptedRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IsLegalAcceptedRequest(::google::protobuf::internal::ConstantInitialized);

  inline IsLegalAcceptedRequest(const IsLegalAcceptedRequest& from)
      : IsLegalAcceptedRequest(nullptr, from) {}
  IsLegalAcceptedRequest(IsLegalAcceptedRequest&& from) noexcept
    : IsLegalAcceptedRequest() {
    *this = ::std::move(from);
  }

  inline IsLegalAcceptedRequest& operator=(const IsLegalAcceptedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsLegalAcceptedRequest& operator=(IsLegalAcceptedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsLegalAcceptedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsLegalAcceptedRequest* internal_default_instance() {
    return reinterpret_cast<const IsLegalAcceptedRequest*>(
               &_IsLegalAcceptedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IsLegalAcceptedRequest& a, IsLegalAcceptedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsLegalAcceptedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsLegalAcceptedRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsLegalAcceptedRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsLegalAcceptedRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const IsLegalAcceptedRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const IsLegalAcceptedRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.v1.IsLegalAcceptedRequest";
  }
  protected:
  explicit IsLegalAcceptedRequest(::google::protobuf::Arena* arena);
  IsLegalAcceptedRequest(::google::protobuf::Arena* arena, const IsLegalAcceptedRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.v1.IsLegalAcceptedRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};// -------------------------------------------------------------------

class GetAuthApplicationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.GetAuthApplicationResponse) */ {
 public:
  inline GetAuthApplicationResponse() : GetAuthApplicationResponse(nullptr) {}
  ~GetAuthApplicationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAuthApplicationResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetAuthApplicationResponse(const GetAuthApplicationResponse& from)
      : GetAuthApplicationResponse(nullptr, from) {}
  GetAuthApplicationResponse(GetAuthApplicationResponse&& from) noexcept
    : GetAuthApplicationResponse() {
    *this = ::std::move(from);
  }

  inline GetAuthApplicationResponse& operator=(const GetAuthApplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthApplicationResponse& operator=(GetAuthApplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAuthApplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAuthApplicationResponse* internal_default_instance() {
    return reinterpret_cast<const GetAuthApplicationResponse*>(
               &_GetAuthApplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetAuthApplicationResponse& a, GetAuthApplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthApplicationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAuthApplicationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAuthApplicationResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAuthApplicationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAuthApplicationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetAuthApplicationResponse& from) {
    GetAuthApplicationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAuthApplicationResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.v1.GetAuthApplicationResponse";
  }
  protected:
  explicit GetAuthApplicationResponse(::google::protobuf::Arena* arena);
  GetAuthApplicationResponse(::google::protobuf::Arena* arena, const GetAuthApplicationResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginUrisFieldNumber = 4,
    kRedirectUrisFieldNumber = 5,
    kApplicationIdFieldNumber = 1,
    kApplicationNameFieldNumber = 2,
    kClientSecretFieldNumber = 3,
    kLogoutUriFieldNumber = 6,
  };
  // repeated string origin_uris = 4 [json_name = "originUris"];
  int origin_uris_size() const;
  private:
  int _internal_origin_uris_size() const;

  public:
  void clear_origin_uris() ;
  const std::string& origin_uris(int index) const;
  std::string* mutable_origin_uris(int index);
  void set_origin_uris(int index, const std::string& value);
  void set_origin_uris(int index, std::string&& value);
  void set_origin_uris(int index, const char* value);
  void set_origin_uris(int index, const char* value, std::size_t size);
  void set_origin_uris(int index, absl::string_view value);
  std::string* add_origin_uris();
  void add_origin_uris(const std::string& value);
  void add_origin_uris(std::string&& value);
  void add_origin_uris(const char* value);
  void add_origin_uris(const char* value, std::size_t size);
  void add_origin_uris(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& origin_uris() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_origin_uris();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_origin_uris() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_origin_uris();

  public:
  // repeated string redirect_uris = 5 [json_name = "redirectUris"];
  int redirect_uris_size() const;
  private:
  int _internal_redirect_uris_size() const;

  public:
  void clear_redirect_uris() ;
  const std::string& redirect_uris(int index) const;
  std::string* mutable_redirect_uris(int index);
  void set_redirect_uris(int index, const std::string& value);
  void set_redirect_uris(int index, std::string&& value);
  void set_redirect_uris(int index, const char* value);
  void set_redirect_uris(int index, const char* value, std::size_t size);
  void set_redirect_uris(int index, absl::string_view value);
  std::string* add_redirect_uris();
  void add_redirect_uris(const std::string& value);
  void add_redirect_uris(std::string&& value);
  void add_redirect_uris(const char* value);
  void add_redirect_uris(const char* value, std::size_t size);
  void add_redirect_uris(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& redirect_uris() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_redirect_uris();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_redirect_uris() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_redirect_uris();

  public:
  // string application_id = 1 [json_name = "applicationId"];
  void clear_application_id() ;
  const std::string& application_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_id(Arg_&& arg, Args_... args);
  std::string* mutable_application_id();
  PROTOBUF_NODISCARD std::string* release_application_id();
  void set_allocated_application_id(std::string* value);

  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(
      const std::string& value);
  std::string* _internal_mutable_application_id();

  public:
  // string application_name = 2 [json_name = "applicationName"];
  void clear_application_name() ;
  const std::string& application_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_name(Arg_&& arg, Args_... args);
  std::string* mutable_application_name();
  PROTOBUF_NODISCARD std::string* release_application_name();
  void set_allocated_application_name(std::string* value);

  private:
  const std::string& _internal_application_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_name(
      const std::string& value);
  std::string* _internal_mutable_application_name();

  public:
  // string client_secret = 3 [json_name = "clientSecret"];
  void clear_client_secret() ;
  const std::string& client_secret() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_secret(Arg_&& arg, Args_... args);
  std::string* mutable_client_secret();
  PROTOBUF_NODISCARD std::string* release_client_secret();
  void set_allocated_client_secret(std::string* value);

  private:
  const std::string& _internal_client_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_secret(
      const std::string& value);
  std::string* _internal_mutable_client_secret();

  public:
  // string logout_uri = 6 [json_name = "logoutUri"];
  void clear_logout_uri() ;
  const std::string& logout_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logout_uri(Arg_&& arg, Args_... args);
  std::string* mutable_logout_uri();
  PROTOBUF_NODISCARD std::string* release_logout_uri();
  void set_allocated_logout_uri(std::string* value);

  private:
  const std::string& _internal_logout_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logout_uri(
      const std::string& value);
  std::string* _internal_mutable_logout_uri();

  public:
  // @@protoc_insertion_point(class_scope:viam.app.v1.GetAuthApplicationResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      124, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> origin_uris_;
    ::google::protobuf::RepeatedPtrField<std::string> redirect_uris_;
    ::google::protobuf::internal::ArenaStringPtr application_id_;
    ::google::protobuf::internal::ArenaStringPtr application_name_;
    ::google::protobuf::internal::ArenaStringPtr client_secret_;
    ::google::protobuf::internal::ArenaStringPtr logout_uri_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};// -------------------------------------------------------------------

class GetAuthApplicationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.v1.GetAuthApplicationRequest) */ {
 public:
  inline GetAuthApplicationRequest() : GetAuthApplicationRequest(nullptr) {}
  ~GetAuthApplicationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetAuthApplicationRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetAuthApplicationRequest(const GetAuthApplicationRequest& from)
      : GetAuthApplicationRequest(nullptr, from) {}
  GetAuthApplicationRequest(GetAuthApplicationRequest&& from) noexcept
    : GetAuthApplicationRequest() {
    *this = ::std::move(from);
  }

  inline GetAuthApplicationRequest& operator=(const GetAuthApplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAuthApplicationRequest& operator=(GetAuthApplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAuthApplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAuthApplicationRequest* internal_default_instance() {
    return reinterpret_cast<const GetAuthApplicationRequest*>(
               &_GetAuthApplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetAuthApplicationRequest& a, GetAuthApplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAuthApplicationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAuthApplicationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAuthApplicationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAuthApplicationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAuthApplicationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetAuthApplicationRequest& from) {
    GetAuthApplicationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetAuthApplicationRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.v1.GetAuthApplicationRequest";
  }
  protected:
  explicit GetAuthApplicationRequest(::google::protobuf::Arena* arena);
  GetAuthApplicationRequest(::google::protobuf::Arena* arena, const GetAuthApplicationRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kApplicationIdFieldNumber = 2,
  };
  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id() ;
  const std::string& org_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_org_id(Arg_&& arg, Args_... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* value);

  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(
      const std::string& value);
  std::string* _internal_mutable_org_id();

  public:
  // string application_id = 2 [json_name = "applicationId"];
  void clear_application_id() ;
  const std::string& application_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_application_id(Arg_&& arg, Args_... args);
  std::string* mutable_application_id();
  PROTOBUF_NODISCARD std::string* release_application_id();
  void set_allocated_application_id(std::string* value);

  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(
      const std::string& value);
  std::string* _internal_mutable_application_id();

  public:
  // @@protoc_insertion_point(class_scope:viam.app.v1.GetAuthApplicationRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      66, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr org_id_;
    ::google::protobuf::internal::ArenaStringPtr application_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};// -------------------------------------------------------------------

class AcceptLegalResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.v1.AcceptLegalResponse) */ {
 public:
  inline AcceptLegalResponse() : AcceptLegalResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AcceptLegalResponse(::google::protobuf::internal::ConstantInitialized);

  inline AcceptLegalResponse(const AcceptLegalResponse& from)
      : AcceptLegalResponse(nullptr, from) {}
  AcceptLegalResponse(AcceptLegalResponse&& from) noexcept
    : AcceptLegalResponse() {
    *this = ::std::move(from);
  }

  inline AcceptLegalResponse& operator=(const AcceptLegalResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptLegalResponse& operator=(AcceptLegalResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcceptLegalResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcceptLegalResponse* internal_default_instance() {
    return reinterpret_cast<const AcceptLegalResponse*>(
               &_AcceptLegalResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AcceptLegalResponse& a, AcceptLegalResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptLegalResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptLegalResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcceptLegalResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AcceptLegalResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AcceptLegalResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AcceptLegalResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.v1.AcceptLegalResponse";
  }
  protected:
  explicit AcceptLegalResponse(::google::protobuf::Arena* arena);
  AcceptLegalResponse(::google::protobuf::Arena* arena, const AcceptLegalResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.v1.AcceptLegalResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};// -------------------------------------------------------------------

class AcceptLegalRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.v1.AcceptLegalRequest) */ {
 public:
  inline AcceptLegalRequest() : AcceptLegalRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AcceptLegalRequest(::google::protobuf::internal::ConstantInitialized);

  inline AcceptLegalRequest(const AcceptLegalRequest& from)
      : AcceptLegalRequest(nullptr, from) {}
  AcceptLegalRequest(AcceptLegalRequest&& from) noexcept
    : AcceptLegalRequest() {
    *this = ::std::move(from);
  }

  inline AcceptLegalRequest& operator=(const AcceptLegalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptLegalRequest& operator=(AcceptLegalRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcceptLegalRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcceptLegalRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptLegalRequest*>(
               &_AcceptLegalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AcceptLegalRequest& a, AcceptLegalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptLegalRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptLegalRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcceptLegalRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AcceptLegalRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AcceptLegalRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AcceptLegalRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.v1.AcceptLegalRequest";
  }
  protected:
  explicit AcceptLegalRequest(::google::protobuf::Arena* arena);
  AcceptLegalRequest(::google::protobuf::Arena* arena, const AcceptLegalRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.v1.AcceptLegalRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_app_2fv1_2fend_5fuser_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IsLegalAcceptedRequest

// -------------------------------------------------------------------

// IsLegalAcceptedResponse

// bool accepted_legal = 1 [json_name = "acceptedLegal"];
inline void IsLegalAcceptedResponse::clear_accepted_legal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.accepted_legal_ = false;
}
inline bool IsLegalAcceptedResponse::accepted_legal() const {
  // @@protoc_insertion_point(field_get:viam.app.v1.IsLegalAcceptedResponse.accepted_legal)
  return _internal_accepted_legal();
}
inline void IsLegalAcceptedResponse::set_accepted_legal(bool value) {
  _internal_set_accepted_legal(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.IsLegalAcceptedResponse.accepted_legal)
}
inline bool IsLegalAcceptedResponse::_internal_accepted_legal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.accepted_legal_;
}
inline void IsLegalAcceptedResponse::_internal_set_accepted_legal(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.accepted_legal_ = value;
}

// -------------------------------------------------------------------

// AcceptLegalRequest

// -------------------------------------------------------------------

// AcceptLegalResponse

// -------------------------------------------------------------------

// RegisterAuthApplicationRequest

// string application_name = 1 [json_name = "applicationName"];
inline void RegisterAuthApplicationRequest::clear_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_name_.ClearToEmpty();
}
inline const std::string& RegisterAuthApplicationRequest::application_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.RegisterAuthApplicationRequest.application_name)
  return _internal_application_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterAuthApplicationRequest::set_application_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.RegisterAuthApplicationRequest.application_name)
}
inline std::string* RegisterAuthApplicationRequest::mutable_application_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_name();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.RegisterAuthApplicationRequest.application_name)
  return _s;
}
inline const std::string& RegisterAuthApplicationRequest::_internal_application_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_name_.Get();
}
inline void RegisterAuthApplicationRequest::_internal_set_application_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_name_.Set(value, GetArena());
}
inline std::string* RegisterAuthApplicationRequest::_internal_mutable_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_name_.Mutable( GetArena());
}
inline std::string* RegisterAuthApplicationRequest::release_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.RegisterAuthApplicationRequest.application_name)
  return _impl_.application_name_.Release();
}
inline void RegisterAuthApplicationRequest::set_allocated_application_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_name_.IsDefault()) {
          _impl_.application_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.RegisterAuthApplicationRequest.application_name)
}

// string org_id = 2 [json_name = "orgId"];
inline void RegisterAuthApplicationRequest::clear_org_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.org_id_.ClearToEmpty();
}
inline const std::string& RegisterAuthApplicationRequest::org_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.RegisterAuthApplicationRequest.org_id)
  return _internal_org_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterAuthApplicationRequest::set_org_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.org_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.RegisterAuthApplicationRequest.org_id)
}
inline std::string* RegisterAuthApplicationRequest::mutable_org_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.RegisterAuthApplicationRequest.org_id)
  return _s;
}
inline const std::string& RegisterAuthApplicationRequest::_internal_org_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.org_id_.Get();
}
inline void RegisterAuthApplicationRequest::_internal_set_org_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.org_id_.Set(value, GetArena());
}
inline std::string* RegisterAuthApplicationRequest::_internal_mutable_org_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.org_id_.Mutable( GetArena());
}
inline std::string* RegisterAuthApplicationRequest::release_org_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.RegisterAuthApplicationRequest.org_id)
  return _impl_.org_id_.Release();
}
inline void RegisterAuthApplicationRequest::set_allocated_org_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.org_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.org_id_.IsDefault()) {
          _impl_.org_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.RegisterAuthApplicationRequest.org_id)
}

// repeated string origin_uris = 3 [json_name = "originUris"];
inline int RegisterAuthApplicationRequest::_internal_origin_uris_size() const {
  return _internal_origin_uris().size();
}
inline int RegisterAuthApplicationRequest::origin_uris_size() const {
  return _internal_origin_uris_size();
}
inline void RegisterAuthApplicationRequest::clear_origin_uris() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.origin_uris_.Clear();
}
inline std::string* RegisterAuthApplicationRequest::add_origin_uris()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_origin_uris()->Add();
  // @@protoc_insertion_point(field_add_mutable:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
  return _s;
}
inline const std::string& RegisterAuthApplicationRequest::origin_uris(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
  return _internal_origin_uris().Get(index);
}
inline std::string* RegisterAuthApplicationRequest::mutable_origin_uris(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
  return _internal_mutable_origin_uris()->Mutable(index);
}
inline void RegisterAuthApplicationRequest::set_origin_uris(int index, const std::string& value) {
  _internal_mutable_origin_uris()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
}
inline void RegisterAuthApplicationRequest::set_origin_uris(int index, std::string&& value) {
  _internal_mutable_origin_uris()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
}
inline void RegisterAuthApplicationRequest::set_origin_uris(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_origin_uris()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
}
inline void RegisterAuthApplicationRequest::set_origin_uris(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_origin_uris()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
}
inline void RegisterAuthApplicationRequest::set_origin_uris(int index, absl::string_view value) {
  _internal_mutable_origin_uris()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
}
inline void RegisterAuthApplicationRequest::add_origin_uris(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
}
inline void RegisterAuthApplicationRequest::add_origin_uris(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
}
inline void RegisterAuthApplicationRequest::add_origin_uris(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
}
inline void RegisterAuthApplicationRequest::add_origin_uris(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
}
inline void RegisterAuthApplicationRequest::add_origin_uris(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RegisterAuthApplicationRequest::origin_uris() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
  return _internal_origin_uris();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RegisterAuthApplicationRequest::mutable_origin_uris() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.app.v1.RegisterAuthApplicationRequest.origin_uris)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_origin_uris();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RegisterAuthApplicationRequest::_internal_origin_uris() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.origin_uris_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RegisterAuthApplicationRequest::_internal_mutable_origin_uris() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.origin_uris_;
}

// repeated string redirect_uris = 4 [json_name = "redirectUris"];
inline int RegisterAuthApplicationRequest::_internal_redirect_uris_size() const {
  return _internal_redirect_uris().size();
}
inline int RegisterAuthApplicationRequest::redirect_uris_size() const {
  return _internal_redirect_uris_size();
}
inline void RegisterAuthApplicationRequest::clear_redirect_uris() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.redirect_uris_.Clear();
}
inline std::string* RegisterAuthApplicationRequest::add_redirect_uris()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_redirect_uris()->Add();
  // @@protoc_insertion_point(field_add_mutable:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
  return _s;
}
inline const std::string& RegisterAuthApplicationRequest::redirect_uris(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
  return _internal_redirect_uris().Get(index);
}
inline std::string* RegisterAuthApplicationRequest::mutable_redirect_uris(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
  return _internal_mutable_redirect_uris()->Mutable(index);
}
inline void RegisterAuthApplicationRequest::set_redirect_uris(int index, const std::string& value) {
  _internal_mutable_redirect_uris()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
}
inline void RegisterAuthApplicationRequest::set_redirect_uris(int index, std::string&& value) {
  _internal_mutable_redirect_uris()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
}
inline void RegisterAuthApplicationRequest::set_redirect_uris(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_redirect_uris()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
}
inline void RegisterAuthApplicationRequest::set_redirect_uris(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_redirect_uris()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
}
inline void RegisterAuthApplicationRequest::set_redirect_uris(int index, absl::string_view value) {
  _internal_mutable_redirect_uris()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
}
inline void RegisterAuthApplicationRequest::add_redirect_uris(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
}
inline void RegisterAuthApplicationRequest::add_redirect_uris(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
}
inline void RegisterAuthApplicationRequest::add_redirect_uris(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
}
inline void RegisterAuthApplicationRequest::add_redirect_uris(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
}
inline void RegisterAuthApplicationRequest::add_redirect_uris(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RegisterAuthApplicationRequest::redirect_uris() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
  return _internal_redirect_uris();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RegisterAuthApplicationRequest::mutable_redirect_uris() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.app.v1.RegisterAuthApplicationRequest.redirect_uris)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_redirect_uris();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
RegisterAuthApplicationRequest::_internal_redirect_uris() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.redirect_uris_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
RegisterAuthApplicationRequest::_internal_mutable_redirect_uris() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.redirect_uris_;
}

// string logout_uri = 5 [json_name = "logoutUri"];
inline void RegisterAuthApplicationRequest::clear_logout_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.logout_uri_.ClearToEmpty();
}
inline const std::string& RegisterAuthApplicationRequest::logout_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.RegisterAuthApplicationRequest.logout_uri)
  return _internal_logout_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterAuthApplicationRequest::set_logout_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.logout_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.RegisterAuthApplicationRequest.logout_uri)
}
inline std::string* RegisterAuthApplicationRequest::mutable_logout_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_logout_uri();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.RegisterAuthApplicationRequest.logout_uri)
  return _s;
}
inline const std::string& RegisterAuthApplicationRequest::_internal_logout_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.logout_uri_.Get();
}
inline void RegisterAuthApplicationRequest::_internal_set_logout_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.logout_uri_.Set(value, GetArena());
}
inline std::string* RegisterAuthApplicationRequest::_internal_mutable_logout_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.logout_uri_.Mutable( GetArena());
}
inline std::string* RegisterAuthApplicationRequest::release_logout_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.RegisterAuthApplicationRequest.logout_uri)
  return _impl_.logout_uri_.Release();
}
inline void RegisterAuthApplicationRequest::set_allocated_logout_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.logout_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.logout_uri_.IsDefault()) {
          _impl_.logout_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.RegisterAuthApplicationRequest.logout_uri)
}

// -------------------------------------------------------------------

// RegisterAuthApplicationResponse

// string application_id = 1 [json_name = "applicationId"];
inline void RegisterAuthApplicationResponse::clear_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_id_.ClearToEmpty();
}
inline const std::string& RegisterAuthApplicationResponse::application_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.RegisterAuthApplicationResponse.application_id)
  return _internal_application_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterAuthApplicationResponse::set_application_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.RegisterAuthApplicationResponse.application_id)
}
inline std::string* RegisterAuthApplicationResponse::mutable_application_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.RegisterAuthApplicationResponse.application_id)
  return _s;
}
inline const std::string& RegisterAuthApplicationResponse::_internal_application_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_id_.Get();
}
inline void RegisterAuthApplicationResponse::_internal_set_application_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_id_.Set(value, GetArena());
}
inline std::string* RegisterAuthApplicationResponse::_internal_mutable_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_id_.Mutable( GetArena());
}
inline std::string* RegisterAuthApplicationResponse::release_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.RegisterAuthApplicationResponse.application_id)
  return _impl_.application_id_.Release();
}
inline void RegisterAuthApplicationResponse::set_allocated_application_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_id_.IsDefault()) {
          _impl_.application_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.RegisterAuthApplicationResponse.application_id)
}

// string application_name = 2 [json_name = "applicationName"];
inline void RegisterAuthApplicationResponse::clear_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_name_.ClearToEmpty();
}
inline const std::string& RegisterAuthApplicationResponse::application_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.RegisterAuthApplicationResponse.application_name)
  return _internal_application_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterAuthApplicationResponse::set_application_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.RegisterAuthApplicationResponse.application_name)
}
inline std::string* RegisterAuthApplicationResponse::mutable_application_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_name();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.RegisterAuthApplicationResponse.application_name)
  return _s;
}
inline const std::string& RegisterAuthApplicationResponse::_internal_application_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_name_.Get();
}
inline void RegisterAuthApplicationResponse::_internal_set_application_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_name_.Set(value, GetArena());
}
inline std::string* RegisterAuthApplicationResponse::_internal_mutable_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_name_.Mutable( GetArena());
}
inline std::string* RegisterAuthApplicationResponse::release_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.RegisterAuthApplicationResponse.application_name)
  return _impl_.application_name_.Release();
}
inline void RegisterAuthApplicationResponse::set_allocated_application_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_name_.IsDefault()) {
          _impl_.application_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.RegisterAuthApplicationResponse.application_name)
}

// string client_secret = 3 [json_name = "clientSecret"];
inline void RegisterAuthApplicationResponse::clear_client_secret() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.client_secret_.ClearToEmpty();
}
inline const std::string& RegisterAuthApplicationResponse::client_secret() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.RegisterAuthApplicationResponse.client_secret)
  return _internal_client_secret();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisterAuthApplicationResponse::set_client_secret(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.client_secret_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.RegisterAuthApplicationResponse.client_secret)
}
inline std::string* RegisterAuthApplicationResponse::mutable_client_secret() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_secret();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.RegisterAuthApplicationResponse.client_secret)
  return _s;
}
inline const std::string& RegisterAuthApplicationResponse::_internal_client_secret() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.client_secret_.Get();
}
inline void RegisterAuthApplicationResponse::_internal_set_client_secret(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.client_secret_.Set(value, GetArena());
}
inline std::string* RegisterAuthApplicationResponse::_internal_mutable_client_secret() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.client_secret_.Mutable( GetArena());
}
inline std::string* RegisterAuthApplicationResponse::release_client_secret() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.RegisterAuthApplicationResponse.client_secret)
  return _impl_.client_secret_.Release();
}
inline void RegisterAuthApplicationResponse::set_allocated_client_secret(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.client_secret_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_secret_.IsDefault()) {
          _impl_.client_secret_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.RegisterAuthApplicationResponse.client_secret)
}

// -------------------------------------------------------------------

// UpdateAuthApplicationRequest

// string org_id = 1 [json_name = "orgId"];
inline void UpdateAuthApplicationRequest::clear_org_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.org_id_.ClearToEmpty();
}
inline const std::string& UpdateAuthApplicationRequest::org_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.UpdateAuthApplicationRequest.org_id)
  return _internal_org_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateAuthApplicationRequest::set_org_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.org_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.UpdateAuthApplicationRequest.org_id)
}
inline std::string* UpdateAuthApplicationRequest::mutable_org_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.UpdateAuthApplicationRequest.org_id)
  return _s;
}
inline const std::string& UpdateAuthApplicationRequest::_internal_org_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.org_id_.Get();
}
inline void UpdateAuthApplicationRequest::_internal_set_org_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.org_id_.Set(value, GetArena());
}
inline std::string* UpdateAuthApplicationRequest::_internal_mutable_org_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.org_id_.Mutable( GetArena());
}
inline std::string* UpdateAuthApplicationRequest::release_org_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.UpdateAuthApplicationRequest.org_id)
  return _impl_.org_id_.Release();
}
inline void UpdateAuthApplicationRequest::set_allocated_org_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.org_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.org_id_.IsDefault()) {
          _impl_.org_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.UpdateAuthApplicationRequest.org_id)
}

// string application_id = 2 [json_name = "applicationId"];
inline void UpdateAuthApplicationRequest::clear_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_id_.ClearToEmpty();
}
inline const std::string& UpdateAuthApplicationRequest::application_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.UpdateAuthApplicationRequest.application_id)
  return _internal_application_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateAuthApplicationRequest::set_application_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.UpdateAuthApplicationRequest.application_id)
}
inline std::string* UpdateAuthApplicationRequest::mutable_application_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.UpdateAuthApplicationRequest.application_id)
  return _s;
}
inline const std::string& UpdateAuthApplicationRequest::_internal_application_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_id_.Get();
}
inline void UpdateAuthApplicationRequest::_internal_set_application_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_id_.Set(value, GetArena());
}
inline std::string* UpdateAuthApplicationRequest::_internal_mutable_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_id_.Mutable( GetArena());
}
inline std::string* UpdateAuthApplicationRequest::release_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.UpdateAuthApplicationRequest.application_id)
  return _impl_.application_id_.Release();
}
inline void UpdateAuthApplicationRequest::set_allocated_application_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_id_.IsDefault()) {
          _impl_.application_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.UpdateAuthApplicationRequest.application_id)
}

// string application_name = 3 [json_name = "applicationName"];
inline void UpdateAuthApplicationRequest::clear_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_name_.ClearToEmpty();
}
inline const std::string& UpdateAuthApplicationRequest::application_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.UpdateAuthApplicationRequest.application_name)
  return _internal_application_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateAuthApplicationRequest::set_application_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.UpdateAuthApplicationRequest.application_name)
}
inline std::string* UpdateAuthApplicationRequest::mutable_application_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_name();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.UpdateAuthApplicationRequest.application_name)
  return _s;
}
inline const std::string& UpdateAuthApplicationRequest::_internal_application_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_name_.Get();
}
inline void UpdateAuthApplicationRequest::_internal_set_application_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_name_.Set(value, GetArena());
}
inline std::string* UpdateAuthApplicationRequest::_internal_mutable_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_name_.Mutable( GetArena());
}
inline std::string* UpdateAuthApplicationRequest::release_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.UpdateAuthApplicationRequest.application_name)
  return _impl_.application_name_.Release();
}
inline void UpdateAuthApplicationRequest::set_allocated_application_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_name_.IsDefault()) {
          _impl_.application_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.UpdateAuthApplicationRequest.application_name)
}

// repeated string origin_uris = 4 [json_name = "originUris"];
inline int UpdateAuthApplicationRequest::_internal_origin_uris_size() const {
  return _internal_origin_uris().size();
}
inline int UpdateAuthApplicationRequest::origin_uris_size() const {
  return _internal_origin_uris_size();
}
inline void UpdateAuthApplicationRequest::clear_origin_uris() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.origin_uris_.Clear();
}
inline std::string* UpdateAuthApplicationRequest::add_origin_uris()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_origin_uris()->Add();
  // @@protoc_insertion_point(field_add_mutable:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
  return _s;
}
inline const std::string& UpdateAuthApplicationRequest::origin_uris(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
  return _internal_origin_uris().Get(index);
}
inline std::string* UpdateAuthApplicationRequest::mutable_origin_uris(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
  return _internal_mutable_origin_uris()->Mutable(index);
}
inline void UpdateAuthApplicationRequest::set_origin_uris(int index, const std::string& value) {
  _internal_mutable_origin_uris()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
}
inline void UpdateAuthApplicationRequest::set_origin_uris(int index, std::string&& value) {
  _internal_mutable_origin_uris()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
}
inline void UpdateAuthApplicationRequest::set_origin_uris(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_origin_uris()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
}
inline void UpdateAuthApplicationRequest::set_origin_uris(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_origin_uris()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
}
inline void UpdateAuthApplicationRequest::set_origin_uris(int index, absl::string_view value) {
  _internal_mutable_origin_uris()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
}
inline void UpdateAuthApplicationRequest::add_origin_uris(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
}
inline void UpdateAuthApplicationRequest::add_origin_uris(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
}
inline void UpdateAuthApplicationRequest::add_origin_uris(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
}
inline void UpdateAuthApplicationRequest::add_origin_uris(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
}
inline void UpdateAuthApplicationRequest::add_origin_uris(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UpdateAuthApplicationRequest::origin_uris() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
  return _internal_origin_uris();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UpdateAuthApplicationRequest::mutable_origin_uris() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.app.v1.UpdateAuthApplicationRequest.origin_uris)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_origin_uris();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UpdateAuthApplicationRequest::_internal_origin_uris() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.origin_uris_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UpdateAuthApplicationRequest::_internal_mutable_origin_uris() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.origin_uris_;
}

// repeated string redirect_uris = 5 [json_name = "redirectUris"];
inline int UpdateAuthApplicationRequest::_internal_redirect_uris_size() const {
  return _internal_redirect_uris().size();
}
inline int UpdateAuthApplicationRequest::redirect_uris_size() const {
  return _internal_redirect_uris_size();
}
inline void UpdateAuthApplicationRequest::clear_redirect_uris() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.redirect_uris_.Clear();
}
inline std::string* UpdateAuthApplicationRequest::add_redirect_uris()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_redirect_uris()->Add();
  // @@protoc_insertion_point(field_add_mutable:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
  return _s;
}
inline const std::string& UpdateAuthApplicationRequest::redirect_uris(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
  return _internal_redirect_uris().Get(index);
}
inline std::string* UpdateAuthApplicationRequest::mutable_redirect_uris(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
  return _internal_mutable_redirect_uris()->Mutable(index);
}
inline void UpdateAuthApplicationRequest::set_redirect_uris(int index, const std::string& value) {
  _internal_mutable_redirect_uris()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
}
inline void UpdateAuthApplicationRequest::set_redirect_uris(int index, std::string&& value) {
  _internal_mutable_redirect_uris()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
}
inline void UpdateAuthApplicationRequest::set_redirect_uris(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_redirect_uris()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
}
inline void UpdateAuthApplicationRequest::set_redirect_uris(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_redirect_uris()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
}
inline void UpdateAuthApplicationRequest::set_redirect_uris(int index, absl::string_view value) {
  _internal_mutable_redirect_uris()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
}
inline void UpdateAuthApplicationRequest::add_redirect_uris(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
}
inline void UpdateAuthApplicationRequest::add_redirect_uris(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
}
inline void UpdateAuthApplicationRequest::add_redirect_uris(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
}
inline void UpdateAuthApplicationRequest::add_redirect_uris(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
}
inline void UpdateAuthApplicationRequest::add_redirect_uris(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UpdateAuthApplicationRequest::redirect_uris() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
  return _internal_redirect_uris();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UpdateAuthApplicationRequest::mutable_redirect_uris() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.app.v1.UpdateAuthApplicationRequest.redirect_uris)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_redirect_uris();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
UpdateAuthApplicationRequest::_internal_redirect_uris() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.redirect_uris_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
UpdateAuthApplicationRequest::_internal_mutable_redirect_uris() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.redirect_uris_;
}

// string logout_uri = 6 [json_name = "logoutUri"];
inline void UpdateAuthApplicationRequest::clear_logout_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.logout_uri_.ClearToEmpty();
}
inline const std::string& UpdateAuthApplicationRequest::logout_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.UpdateAuthApplicationRequest.logout_uri)
  return _internal_logout_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateAuthApplicationRequest::set_logout_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.logout_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.UpdateAuthApplicationRequest.logout_uri)
}
inline std::string* UpdateAuthApplicationRequest::mutable_logout_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_logout_uri();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.UpdateAuthApplicationRequest.logout_uri)
  return _s;
}
inline const std::string& UpdateAuthApplicationRequest::_internal_logout_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.logout_uri_.Get();
}
inline void UpdateAuthApplicationRequest::_internal_set_logout_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.logout_uri_.Set(value, GetArena());
}
inline std::string* UpdateAuthApplicationRequest::_internal_mutable_logout_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.logout_uri_.Mutable( GetArena());
}
inline std::string* UpdateAuthApplicationRequest::release_logout_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.UpdateAuthApplicationRequest.logout_uri)
  return _impl_.logout_uri_.Release();
}
inline void UpdateAuthApplicationRequest::set_allocated_logout_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.logout_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.logout_uri_.IsDefault()) {
          _impl_.logout_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.UpdateAuthApplicationRequest.logout_uri)
}

// -------------------------------------------------------------------

// UpdateAuthApplicationResponse

// string application_id = 1 [json_name = "applicationId"];
inline void UpdateAuthApplicationResponse::clear_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_id_.ClearToEmpty();
}
inline const std::string& UpdateAuthApplicationResponse::application_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.UpdateAuthApplicationResponse.application_id)
  return _internal_application_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateAuthApplicationResponse::set_application_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.UpdateAuthApplicationResponse.application_id)
}
inline std::string* UpdateAuthApplicationResponse::mutable_application_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.UpdateAuthApplicationResponse.application_id)
  return _s;
}
inline const std::string& UpdateAuthApplicationResponse::_internal_application_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_id_.Get();
}
inline void UpdateAuthApplicationResponse::_internal_set_application_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_id_.Set(value, GetArena());
}
inline std::string* UpdateAuthApplicationResponse::_internal_mutable_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_id_.Mutable( GetArena());
}
inline std::string* UpdateAuthApplicationResponse::release_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.UpdateAuthApplicationResponse.application_id)
  return _impl_.application_id_.Release();
}
inline void UpdateAuthApplicationResponse::set_allocated_application_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_id_.IsDefault()) {
          _impl_.application_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.UpdateAuthApplicationResponse.application_id)
}

// string application_name = 2 [json_name = "applicationName"];
inline void UpdateAuthApplicationResponse::clear_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_name_.ClearToEmpty();
}
inline const std::string& UpdateAuthApplicationResponse::application_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.UpdateAuthApplicationResponse.application_name)
  return _internal_application_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateAuthApplicationResponse::set_application_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.UpdateAuthApplicationResponse.application_name)
}
inline std::string* UpdateAuthApplicationResponse::mutable_application_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_name();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.UpdateAuthApplicationResponse.application_name)
  return _s;
}
inline const std::string& UpdateAuthApplicationResponse::_internal_application_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_name_.Get();
}
inline void UpdateAuthApplicationResponse::_internal_set_application_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_name_.Set(value, GetArena());
}
inline std::string* UpdateAuthApplicationResponse::_internal_mutable_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_name_.Mutable( GetArena());
}
inline std::string* UpdateAuthApplicationResponse::release_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.UpdateAuthApplicationResponse.application_name)
  return _impl_.application_name_.Release();
}
inline void UpdateAuthApplicationResponse::set_allocated_application_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_name_.IsDefault()) {
          _impl_.application_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.UpdateAuthApplicationResponse.application_name)
}

// -------------------------------------------------------------------

// GetAuthApplicationRequest

// string org_id = 1 [json_name = "orgId"];
inline void GetAuthApplicationRequest::clear_org_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.org_id_.ClearToEmpty();
}
inline const std::string& GetAuthApplicationRequest::org_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetAuthApplicationRequest.org_id)
  return _internal_org_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAuthApplicationRequest::set_org_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.org_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetAuthApplicationRequest.org_id)
}
inline std::string* GetAuthApplicationRequest::mutable_org_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetAuthApplicationRequest.org_id)
  return _s;
}
inline const std::string& GetAuthApplicationRequest::_internal_org_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.org_id_.Get();
}
inline void GetAuthApplicationRequest::_internal_set_org_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.org_id_.Set(value, GetArena());
}
inline std::string* GetAuthApplicationRequest::_internal_mutable_org_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.org_id_.Mutable( GetArena());
}
inline std::string* GetAuthApplicationRequest::release_org_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.GetAuthApplicationRequest.org_id)
  return _impl_.org_id_.Release();
}
inline void GetAuthApplicationRequest::set_allocated_org_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.org_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.org_id_.IsDefault()) {
          _impl_.org_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetAuthApplicationRequest.org_id)
}

// string application_id = 2 [json_name = "applicationId"];
inline void GetAuthApplicationRequest::clear_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_id_.ClearToEmpty();
}
inline const std::string& GetAuthApplicationRequest::application_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetAuthApplicationRequest.application_id)
  return _internal_application_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAuthApplicationRequest::set_application_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetAuthApplicationRequest.application_id)
}
inline std::string* GetAuthApplicationRequest::mutable_application_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetAuthApplicationRequest.application_id)
  return _s;
}
inline const std::string& GetAuthApplicationRequest::_internal_application_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_id_.Get();
}
inline void GetAuthApplicationRequest::_internal_set_application_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_id_.Set(value, GetArena());
}
inline std::string* GetAuthApplicationRequest::_internal_mutable_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_id_.Mutable( GetArena());
}
inline std::string* GetAuthApplicationRequest::release_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.GetAuthApplicationRequest.application_id)
  return _impl_.application_id_.Release();
}
inline void GetAuthApplicationRequest::set_allocated_application_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_id_.IsDefault()) {
          _impl_.application_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetAuthApplicationRequest.application_id)
}

// -------------------------------------------------------------------

// GetAuthApplicationResponse

// string application_id = 1 [json_name = "applicationId"];
inline void GetAuthApplicationResponse::clear_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_id_.ClearToEmpty();
}
inline const std::string& GetAuthApplicationResponse::application_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetAuthApplicationResponse.application_id)
  return _internal_application_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAuthApplicationResponse::set_application_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetAuthApplicationResponse.application_id)
}
inline std::string* GetAuthApplicationResponse::mutable_application_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetAuthApplicationResponse.application_id)
  return _s;
}
inline const std::string& GetAuthApplicationResponse::_internal_application_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_id_.Get();
}
inline void GetAuthApplicationResponse::_internal_set_application_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_id_.Set(value, GetArena());
}
inline std::string* GetAuthApplicationResponse::_internal_mutable_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_id_.Mutable( GetArena());
}
inline std::string* GetAuthApplicationResponse::release_application_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.GetAuthApplicationResponse.application_id)
  return _impl_.application_id_.Release();
}
inline void GetAuthApplicationResponse::set_allocated_application_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_id_.IsDefault()) {
          _impl_.application_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetAuthApplicationResponse.application_id)
}

// string application_name = 2 [json_name = "applicationName"];
inline void GetAuthApplicationResponse::clear_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_name_.ClearToEmpty();
}
inline const std::string& GetAuthApplicationResponse::application_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetAuthApplicationResponse.application_name)
  return _internal_application_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAuthApplicationResponse::set_application_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetAuthApplicationResponse.application_name)
}
inline std::string* GetAuthApplicationResponse::mutable_application_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_application_name();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetAuthApplicationResponse.application_name)
  return _s;
}
inline const std::string& GetAuthApplicationResponse::_internal_application_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.application_name_.Get();
}
inline void GetAuthApplicationResponse::_internal_set_application_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.application_name_.Set(value, GetArena());
}
inline std::string* GetAuthApplicationResponse::_internal_mutable_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.application_name_.Mutable( GetArena());
}
inline std::string* GetAuthApplicationResponse::release_application_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.GetAuthApplicationResponse.application_name)
  return _impl_.application_name_.Release();
}
inline void GetAuthApplicationResponse::set_allocated_application_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.application_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.application_name_.IsDefault()) {
          _impl_.application_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetAuthApplicationResponse.application_name)
}

// string client_secret = 3 [json_name = "clientSecret"];
inline void GetAuthApplicationResponse::clear_client_secret() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.client_secret_.ClearToEmpty();
}
inline const std::string& GetAuthApplicationResponse::client_secret() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetAuthApplicationResponse.client_secret)
  return _internal_client_secret();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAuthApplicationResponse::set_client_secret(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.client_secret_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetAuthApplicationResponse.client_secret)
}
inline std::string* GetAuthApplicationResponse::mutable_client_secret() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_secret();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetAuthApplicationResponse.client_secret)
  return _s;
}
inline const std::string& GetAuthApplicationResponse::_internal_client_secret() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.client_secret_.Get();
}
inline void GetAuthApplicationResponse::_internal_set_client_secret(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.client_secret_.Set(value, GetArena());
}
inline std::string* GetAuthApplicationResponse::_internal_mutable_client_secret() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.client_secret_.Mutable( GetArena());
}
inline std::string* GetAuthApplicationResponse::release_client_secret() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.GetAuthApplicationResponse.client_secret)
  return _impl_.client_secret_.Release();
}
inline void GetAuthApplicationResponse::set_allocated_client_secret(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.client_secret_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_secret_.IsDefault()) {
          _impl_.client_secret_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetAuthApplicationResponse.client_secret)
}

// repeated string origin_uris = 4 [json_name = "originUris"];
inline int GetAuthApplicationResponse::_internal_origin_uris_size() const {
  return _internal_origin_uris().size();
}
inline int GetAuthApplicationResponse::origin_uris_size() const {
  return _internal_origin_uris_size();
}
inline void GetAuthApplicationResponse::clear_origin_uris() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.origin_uris_.Clear();
}
inline std::string* GetAuthApplicationResponse::add_origin_uris()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_origin_uris()->Add();
  // @@protoc_insertion_point(field_add_mutable:viam.app.v1.GetAuthApplicationResponse.origin_uris)
  return _s;
}
inline const std::string& GetAuthApplicationResponse::origin_uris(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetAuthApplicationResponse.origin_uris)
  return _internal_origin_uris().Get(index);
}
inline std::string* GetAuthApplicationResponse::mutable_origin_uris(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetAuthApplicationResponse.origin_uris)
  return _internal_mutable_origin_uris()->Mutable(index);
}
inline void GetAuthApplicationResponse::set_origin_uris(int index, const std::string& value) {
  _internal_mutable_origin_uris()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetAuthApplicationResponse.origin_uris)
}
inline void GetAuthApplicationResponse::set_origin_uris(int index, std::string&& value) {
  _internal_mutable_origin_uris()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.v1.GetAuthApplicationResponse.origin_uris)
}
inline void GetAuthApplicationResponse::set_origin_uris(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_origin_uris()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.v1.GetAuthApplicationResponse.origin_uris)
}
inline void GetAuthApplicationResponse::set_origin_uris(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_origin_uris()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.v1.GetAuthApplicationResponse.origin_uris)
}
inline void GetAuthApplicationResponse::set_origin_uris(int index, absl::string_view value) {
  _internal_mutable_origin_uris()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:viam.app.v1.GetAuthApplicationResponse.origin_uris)
}
inline void GetAuthApplicationResponse::add_origin_uris(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.v1.GetAuthApplicationResponse.origin_uris)
}
inline void GetAuthApplicationResponse::add_origin_uris(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.v1.GetAuthApplicationResponse.origin_uris)
}
inline void GetAuthApplicationResponse::add_origin_uris(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.v1.GetAuthApplicationResponse.origin_uris)
}
inline void GetAuthApplicationResponse::add_origin_uris(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.v1.GetAuthApplicationResponse.origin_uris)
}
inline void GetAuthApplicationResponse::add_origin_uris(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_origin_uris()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:viam.app.v1.GetAuthApplicationResponse.origin_uris)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetAuthApplicationResponse::origin_uris() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.app.v1.GetAuthApplicationResponse.origin_uris)
  return _internal_origin_uris();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetAuthApplicationResponse::mutable_origin_uris() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.app.v1.GetAuthApplicationResponse.origin_uris)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_origin_uris();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetAuthApplicationResponse::_internal_origin_uris() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.origin_uris_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetAuthApplicationResponse::_internal_mutable_origin_uris() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.origin_uris_;
}

// repeated string redirect_uris = 5 [json_name = "redirectUris"];
inline int GetAuthApplicationResponse::_internal_redirect_uris_size() const {
  return _internal_redirect_uris().size();
}
inline int GetAuthApplicationResponse::redirect_uris_size() const {
  return _internal_redirect_uris_size();
}
inline void GetAuthApplicationResponse::clear_redirect_uris() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.redirect_uris_.Clear();
}
inline std::string* GetAuthApplicationResponse::add_redirect_uris()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_redirect_uris()->Add();
  // @@protoc_insertion_point(field_add_mutable:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
  return _s;
}
inline const std::string& GetAuthApplicationResponse::redirect_uris(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
  return _internal_redirect_uris().Get(index);
}
inline std::string* GetAuthApplicationResponse::mutable_redirect_uris(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
  return _internal_mutable_redirect_uris()->Mutable(index);
}
inline void GetAuthApplicationResponse::set_redirect_uris(int index, const std::string& value) {
  _internal_mutable_redirect_uris()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
}
inline void GetAuthApplicationResponse::set_redirect_uris(int index, std::string&& value) {
  _internal_mutable_redirect_uris()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
}
inline void GetAuthApplicationResponse::set_redirect_uris(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_redirect_uris()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
}
inline void GetAuthApplicationResponse::set_redirect_uris(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_redirect_uris()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
}
inline void GetAuthApplicationResponse::set_redirect_uris(int index, absl::string_view value) {
  _internal_mutable_redirect_uris()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
}
inline void GetAuthApplicationResponse::add_redirect_uris(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
}
inline void GetAuthApplicationResponse::add_redirect_uris(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
}
inline void GetAuthApplicationResponse::add_redirect_uris(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
}
inline void GetAuthApplicationResponse::add_redirect_uris(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
}
inline void GetAuthApplicationResponse::add_redirect_uris(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_redirect_uris()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetAuthApplicationResponse::redirect_uris() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
  return _internal_redirect_uris();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetAuthApplicationResponse::mutable_redirect_uris() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.app.v1.GetAuthApplicationResponse.redirect_uris)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_redirect_uris();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetAuthApplicationResponse::_internal_redirect_uris() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.redirect_uris_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetAuthApplicationResponse::_internal_mutable_redirect_uris() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.redirect_uris_;
}

// string logout_uri = 6 [json_name = "logoutUri"];
inline void GetAuthApplicationResponse::clear_logout_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.logout_uri_.ClearToEmpty();
}
inline const std::string& GetAuthApplicationResponse::logout_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.v1.GetAuthApplicationResponse.logout_uri)
  return _internal_logout_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetAuthApplicationResponse::set_logout_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.logout_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.v1.GetAuthApplicationResponse.logout_uri)
}
inline std::string* GetAuthApplicationResponse::mutable_logout_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_logout_uri();
  // @@protoc_insertion_point(field_mutable:viam.app.v1.GetAuthApplicationResponse.logout_uri)
  return _s;
}
inline const std::string& GetAuthApplicationResponse::_internal_logout_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.logout_uri_.Get();
}
inline void GetAuthApplicationResponse::_internal_set_logout_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.logout_uri_.Set(value, GetArena());
}
inline std::string* GetAuthApplicationResponse::_internal_mutable_logout_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.logout_uri_.Mutable( GetArena());
}
inline std::string* GetAuthApplicationResponse::release_logout_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.v1.GetAuthApplicationResponse.logout_uri)
  return _impl_.logout_uri_.Release();
}
inline void GetAuthApplicationResponse::set_allocated_logout_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.logout_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.logout_uri_.IsDefault()) {
          _impl_.logout_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.GetAuthApplicationResponse.logout_uri)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace app
}  // namespace viam


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_app_2fv1_2fend_5fuser_2eproto_2epb_2eh
