// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/v1/billing.proto
#ifndef GRPC_app_2fv1_2fbilling_2eproto__INCLUDED
#define GRPC_app_2fv1_2fbilling_2eproto__INCLUDED

#include "app/v1/billing.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace viam {
namespace app {
namespace v1 {

class BillingService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.app.v1.BillingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Detailed breakdown of current month's costs
    virtual ::grpc::Status GetCurrentMonthUsage(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest& request, ::viam::app::v1::GetCurrentMonthUsageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetCurrentMonthUsageResponse>> AsyncGetCurrentMonthUsage(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetCurrentMonthUsageResponse>>(AsyncGetCurrentMonthUsageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetCurrentMonthUsageResponse>> PrepareAsyncGetCurrentMonthUsage(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetCurrentMonthUsageResponse>>(PrepareAsyncGetCurrentMonthUsageRaw(context, request, cq));
    }
    // Org-level information (like billing email and payment details)
    virtual ::grpc::Status GetOrgBillingInformation(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest& request, ::viam::app::v1::GetOrgBillingInformationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetOrgBillingInformationResponse>> AsyncGetOrgBillingInformation(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetOrgBillingInformationResponse>>(AsyncGetOrgBillingInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetOrgBillingInformationResponse>> PrepareAsyncGetOrgBillingInformation(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetOrgBillingInformationResponse>>(PrepareAsyncGetOrgBillingInformationRaw(context, request, cq));
    }
    // Total outstanding balance and previous invoices
    virtual ::grpc::Status GetInvoicesSummary(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest& request, ::viam::app::v1::GetInvoicesSummaryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetInvoicesSummaryResponse>> AsyncGetInvoicesSummary(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetInvoicesSummaryResponse>>(AsyncGetInvoicesSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetInvoicesSummaryResponse>> PrepareAsyncGetInvoicesSummary(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetInvoicesSummaryResponse>>(PrepareAsyncGetInvoicesSummaryRaw(context, request, cq));
    }
    // Download a PDF invoice
    std::unique_ptr< ::grpc::ClientReaderInterface< ::viam::app::v1::GetInvoicePdfResponse>> GetInvoicePdf(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicePdfRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::viam::app::v1::GetInvoicePdfResponse>>(GetInvoicePdfRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::app::v1::GetInvoicePdfResponse>> AsyncGetInvoicePdf(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicePdfRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::app::v1::GetInvoicePdfResponse>>(AsyncGetInvoicePdfRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::app::v1::GetInvoicePdfResponse>> PrepareAsyncGetInvoicePdf(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicePdfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::app::v1::GetInvoicePdfResponse>>(PrepareAsyncGetInvoicePdfRaw(context, request, cq));
    }
    // Send an email with a prompt to the user's org's billing page.
    virtual ::grpc::Status SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest& request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::SendPaymentRequiredEmailResponse>> AsyncSendPaymentRequiredEmail(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::SendPaymentRequiredEmailResponse>>(AsyncSendPaymentRequiredEmailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::SendPaymentRequiredEmailResponse>> PrepareAsyncSendPaymentRequiredEmail(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::SendPaymentRequiredEmailResponse>>(PrepareAsyncSendPaymentRequiredEmailRaw(context, request, cq));
    }
    // Get available billing tiers that can be assigned to organizations
    virtual ::grpc::Status GetAvailableBillingTiers(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest& request, ::viam::app::v1::GetAvailableBillingTiersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetAvailableBillingTiersResponse>> AsyncGetAvailableBillingTiers(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetAvailableBillingTiersResponse>>(AsyncGetAvailableBillingTiersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetAvailableBillingTiersResponse>> PrepareAsyncGetAvailableBillingTiers(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetAvailableBillingTiersResponse>>(PrepareAsyncGetAvailableBillingTiersRaw(context, request, cq));
    }
    // Update an organization's billing tier
    virtual ::grpc::Status UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest& request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateOrganizationBillingTierResponse>> AsyncUpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateOrganizationBillingTierResponse>>(AsyncUpdateOrganizationBillingTierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateOrganizationBillingTierResponse>> PrepareAsyncUpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateOrganizationBillingTierResponse>>(PrepareAsyncUpdateOrganizationBillingTierRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Detailed breakdown of current month's costs
      virtual void GetCurrentMonthUsage(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCurrentMonthUsage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCurrentMonthUsage(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCurrentMonthUsage(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetCurrentMonthUsage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetCurrentMonthUsage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Org-level information (like billing email and payment details)
      virtual void GetOrgBillingInformation(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest* request, ::viam::app::v1::GetOrgBillingInformationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrgBillingInformation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetOrgBillingInformationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOrgBillingInformation(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest* request, ::viam::app::v1::GetOrgBillingInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOrgBillingInformation(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest* request, ::viam::app::v1::GetOrgBillingInformationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetOrgBillingInformation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetOrgBillingInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetOrgBillingInformation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetOrgBillingInformationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Total outstanding balance and previous invoices
      virtual void GetInvoicesSummary(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest* request, ::viam::app::v1::GetInvoicesSummaryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInvoicesSummary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetInvoicesSummaryResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetInvoicesSummary(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest* request, ::viam::app::v1::GetInvoicesSummaryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetInvoicesSummary(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest* request, ::viam::app::v1::GetInvoicesSummaryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetInvoicesSummary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetInvoicesSummaryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetInvoicesSummary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetInvoicesSummaryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Download a PDF invoice
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetInvoicePdf(::grpc::ClientContext* context, ::viam::app::v1::GetInvoicePdfRequest* request, ::grpc::ClientReadReactor< ::viam::app::v1::GetInvoicePdfResponse>* reactor) = 0;
      #else
      virtual void GetInvoicePdf(::grpc::ClientContext* context, ::viam::app::v1::GetInvoicePdfRequest* request, ::grpc::experimental::ClientReadReactor< ::viam::app::v1::GetInvoicePdfResponse>* reactor) = 0;
      #endif
      // Send an email with a prompt to the user's org's billing page.
      virtual void SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Get available billing tiers that can be assigned to organizations
      virtual void GetAvailableBillingTiers(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAvailableBillingTiers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAvailableBillingTiers(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAvailableBillingTiers(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetAvailableBillingTiers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetAvailableBillingTiers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Update an organization's billing tier
      virtual void UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetCurrentMonthUsageResponse>* AsyncGetCurrentMonthUsageRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetCurrentMonthUsageResponse>* PrepareAsyncGetCurrentMonthUsageRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetOrgBillingInformationResponse>* AsyncGetOrgBillingInformationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetOrgBillingInformationResponse>* PrepareAsyncGetOrgBillingInformationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetInvoicesSummaryResponse>* AsyncGetInvoicesSummaryRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetInvoicesSummaryResponse>* PrepareAsyncGetInvoicesSummaryRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::viam::app::v1::GetInvoicePdfResponse>* GetInvoicePdfRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicePdfRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::viam::app::v1::GetInvoicePdfResponse>* AsyncGetInvoicePdfRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicePdfRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::viam::app::v1::GetInvoicePdfResponse>* PrepareAsyncGetInvoicePdfRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicePdfRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::SendPaymentRequiredEmailResponse>* AsyncSendPaymentRequiredEmailRaw(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::SendPaymentRequiredEmailResponse>* PrepareAsyncSendPaymentRequiredEmailRaw(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetAvailableBillingTiersResponse>* AsyncGetAvailableBillingTiersRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetAvailableBillingTiersResponse>* PrepareAsyncGetAvailableBillingTiersRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateOrganizationBillingTierResponse>* AsyncUpdateOrganizationBillingTierRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateOrganizationBillingTierResponse>* PrepareAsyncUpdateOrganizationBillingTierRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetCurrentMonthUsage(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest& request, ::viam::app::v1::GetCurrentMonthUsageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetCurrentMonthUsageResponse>> AsyncGetCurrentMonthUsage(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetCurrentMonthUsageResponse>>(AsyncGetCurrentMonthUsageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetCurrentMonthUsageResponse>> PrepareAsyncGetCurrentMonthUsage(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetCurrentMonthUsageResponse>>(PrepareAsyncGetCurrentMonthUsageRaw(context, request, cq));
    }
    ::grpc::Status GetOrgBillingInformation(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest& request, ::viam::app::v1::GetOrgBillingInformationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetOrgBillingInformationResponse>> AsyncGetOrgBillingInformation(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetOrgBillingInformationResponse>>(AsyncGetOrgBillingInformationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetOrgBillingInformationResponse>> PrepareAsyncGetOrgBillingInformation(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetOrgBillingInformationResponse>>(PrepareAsyncGetOrgBillingInformationRaw(context, request, cq));
    }
    ::grpc::Status GetInvoicesSummary(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest& request, ::viam::app::v1::GetInvoicesSummaryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetInvoicesSummaryResponse>> AsyncGetInvoicesSummary(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetInvoicesSummaryResponse>>(AsyncGetInvoicesSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetInvoicesSummaryResponse>> PrepareAsyncGetInvoicesSummary(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetInvoicesSummaryResponse>>(PrepareAsyncGetInvoicesSummaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::viam::app::v1::GetInvoicePdfResponse>> GetInvoicePdf(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicePdfRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::viam::app::v1::GetInvoicePdfResponse>>(GetInvoicePdfRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::app::v1::GetInvoicePdfResponse>> AsyncGetInvoicePdf(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicePdfRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::app::v1::GetInvoicePdfResponse>>(AsyncGetInvoicePdfRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::app::v1::GetInvoicePdfResponse>> PrepareAsyncGetInvoicePdf(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicePdfRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::app::v1::GetInvoicePdfResponse>>(PrepareAsyncGetInvoicePdfRaw(context, request, cq));
    }
    ::grpc::Status SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest& request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::SendPaymentRequiredEmailResponse>> AsyncSendPaymentRequiredEmail(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::SendPaymentRequiredEmailResponse>>(AsyncSendPaymentRequiredEmailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::SendPaymentRequiredEmailResponse>> PrepareAsyncSendPaymentRequiredEmail(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::SendPaymentRequiredEmailResponse>>(PrepareAsyncSendPaymentRequiredEmailRaw(context, request, cq));
    }
    ::grpc::Status GetAvailableBillingTiers(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest& request, ::viam::app::v1::GetAvailableBillingTiersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAvailableBillingTiersResponse>> AsyncGetAvailableBillingTiers(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAvailableBillingTiersResponse>>(AsyncGetAvailableBillingTiersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAvailableBillingTiersResponse>> PrepareAsyncGetAvailableBillingTiers(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAvailableBillingTiersResponse>>(PrepareAsyncGetAvailableBillingTiersRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest& request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateOrganizationBillingTierResponse>> AsyncUpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateOrganizationBillingTierResponse>>(AsyncUpdateOrganizationBillingTierRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateOrganizationBillingTierResponse>> PrepareAsyncUpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateOrganizationBillingTierResponse>>(PrepareAsyncUpdateOrganizationBillingTierRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetCurrentMonthUsage(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCurrentMonthUsage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCurrentMonthUsage(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCurrentMonthUsage(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetCurrentMonthUsage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetCurrentMonthUsage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetOrgBillingInformation(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest* request, ::viam::app::v1::GetOrgBillingInformationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOrgBillingInformation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetOrgBillingInformationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOrgBillingInformation(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest* request, ::viam::app::v1::GetOrgBillingInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOrgBillingInformation(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest* request, ::viam::app::v1::GetOrgBillingInformationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetOrgBillingInformation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetOrgBillingInformationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetOrgBillingInformation(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetOrgBillingInformationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetInvoicesSummary(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest* request, ::viam::app::v1::GetInvoicesSummaryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetInvoicesSummary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetInvoicesSummaryResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetInvoicesSummary(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest* request, ::viam::app::v1::GetInvoicesSummaryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetInvoicesSummary(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest* request, ::viam::app::v1::GetInvoicesSummaryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetInvoicesSummary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetInvoicesSummaryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetInvoicesSummary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetInvoicesSummaryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetInvoicePdf(::grpc::ClientContext* context, ::viam::app::v1::GetInvoicePdfRequest* request, ::grpc::ClientReadReactor< ::viam::app::v1::GetInvoicePdfResponse>* reactor) override;
      #else
      void GetInvoicePdf(::grpc::ClientContext* context, ::viam::app::v1::GetInvoicePdfRequest* request, ::grpc::experimental::ClientReadReactor< ::viam::app::v1::GetInvoicePdfResponse>* reactor) override;
      #endif
      void SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response, std::function<void(::grpc::Status)>) override;
      void SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendPaymentRequiredEmail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetAvailableBillingTiers(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAvailableBillingTiers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAvailableBillingTiers(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAvailableBillingTiers(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetAvailableBillingTiers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetAvailableBillingTiers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateOrganizationBillingTier(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetCurrentMonthUsageResponse>* AsyncGetCurrentMonthUsageRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetCurrentMonthUsageResponse>* PrepareAsyncGetCurrentMonthUsageRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetOrgBillingInformationResponse>* AsyncGetOrgBillingInformationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetOrgBillingInformationResponse>* PrepareAsyncGetOrgBillingInformationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetInvoicesSummaryResponse>* AsyncGetInvoicesSummaryRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetInvoicesSummaryResponse>* PrepareAsyncGetInvoicesSummaryRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::viam::app::v1::GetInvoicePdfResponse>* GetInvoicePdfRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicePdfRequest& request) override;
    ::grpc::ClientAsyncReader< ::viam::app::v1::GetInvoicePdfResponse>* AsyncGetInvoicePdfRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicePdfRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::viam::app::v1::GetInvoicePdfResponse>* PrepareAsyncGetInvoicePdfRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetInvoicePdfRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::SendPaymentRequiredEmailResponse>* AsyncSendPaymentRequiredEmailRaw(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::SendPaymentRequiredEmailResponse>* PrepareAsyncSendPaymentRequiredEmailRaw(::grpc::ClientContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAvailableBillingTiersResponse>* AsyncGetAvailableBillingTiersRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetAvailableBillingTiersResponse>* PrepareAsyncGetAvailableBillingTiersRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateOrganizationBillingTierResponse>* AsyncUpdateOrganizationBillingTierRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateOrganizationBillingTierResponse>* PrepareAsyncUpdateOrganizationBillingTierRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetCurrentMonthUsage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrgBillingInformation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInvoicesSummary_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInvoicePdf_;
    const ::grpc::internal::RpcMethod rpcmethod_SendPaymentRequiredEmail_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAvailableBillingTiers_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrganizationBillingTier_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Detailed breakdown of current month's costs
    virtual ::grpc::Status GetCurrentMonthUsage(::grpc::ServerContext* context, const ::viam::app::v1::GetCurrentMonthUsageRequest* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response);
    // Org-level information (like billing email and payment details)
    virtual ::grpc::Status GetOrgBillingInformation(::grpc::ServerContext* context, const ::viam::app::v1::GetOrgBillingInformationRequest* request, ::viam::app::v1::GetOrgBillingInformationResponse* response);
    // Total outstanding balance and previous invoices
    virtual ::grpc::Status GetInvoicesSummary(::grpc::ServerContext* context, const ::viam::app::v1::GetInvoicesSummaryRequest* request, ::viam::app::v1::GetInvoicesSummaryResponse* response);
    // Download a PDF invoice
    virtual ::grpc::Status GetInvoicePdf(::grpc::ServerContext* context, const ::viam::app::v1::GetInvoicePdfRequest* request, ::grpc::ServerWriter< ::viam::app::v1::GetInvoicePdfResponse>* writer);
    // Send an email with a prompt to the user's org's billing page.
    virtual ::grpc::Status SendPaymentRequiredEmail(::grpc::ServerContext* context, const ::viam::app::v1::SendPaymentRequiredEmailRequest* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response);
    // Get available billing tiers that can be assigned to organizations
    virtual ::grpc::Status GetAvailableBillingTiers(::grpc::ServerContext* context, const ::viam::app::v1::GetAvailableBillingTiersRequest* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response);
    // Update an organization's billing tier
    virtual ::grpc::Status UpdateOrganizationBillingTier(::grpc::ServerContext* context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCurrentMonthUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCurrentMonthUsage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetCurrentMonthUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentMonthUsage(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetCurrentMonthUsageRequest* /*request*/, ::viam::app::v1::GetCurrentMonthUsageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentMonthUsage(::grpc::ServerContext* context, ::viam::app::v1::GetCurrentMonthUsageRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetCurrentMonthUsageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrgBillingInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOrgBillingInformation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOrgBillingInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrgBillingInformation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetOrgBillingInformationRequest* /*request*/, ::viam::app::v1::GetOrgBillingInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrgBillingInformation(::grpc::ServerContext* context, ::viam::app::v1::GetOrgBillingInformationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetOrgBillingInformationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInvoicesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInvoicesSummary() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetInvoicesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInvoicesSummary(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetInvoicesSummaryRequest* /*request*/, ::viam::app::v1::GetInvoicesSummaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInvoicesSummary(::grpc::ServerContext* context, ::viam::app::v1::GetInvoicesSummaryRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetInvoicesSummaryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInvoicePdf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInvoicePdf() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetInvoicePdf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInvoicePdf(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetInvoicePdfRequest* /*request*/, ::grpc::ServerWriter< ::viam::app::v1::GetInvoicePdfResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInvoicePdf(::grpc::ServerContext* context, ::viam::app::v1::GetInvoicePdfRequest* request, ::grpc::ServerAsyncWriter< ::viam::app::v1::GetInvoicePdfResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendPaymentRequiredEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendPaymentRequiredEmail() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SendPaymentRequiredEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPaymentRequiredEmail(::grpc::ServerContext* /*context*/, const ::viam::app::v1::SendPaymentRequiredEmailRequest* /*request*/, ::viam::app::v1::SendPaymentRequiredEmailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPaymentRequiredEmail(::grpc::ServerContext* context, ::viam::app::v1::SendPaymentRequiredEmailRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::SendPaymentRequiredEmailResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAvailableBillingTiers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAvailableBillingTiers() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetAvailableBillingTiers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableBillingTiers(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetAvailableBillingTiersRequest* /*request*/, ::viam::app::v1::GetAvailableBillingTiersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableBillingTiers(::grpc::ServerContext* context, ::viam::app::v1::GetAvailableBillingTiersRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetAvailableBillingTiersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrganizationBillingTier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateOrganizationBillingTier() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UpdateOrganizationBillingTier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganizationBillingTier(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* /*request*/, ::viam::app::v1::UpdateOrganizationBillingTierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrganizationBillingTier(::grpc::ServerContext* context, ::viam::app::v1::UpdateOrganizationBillingTierRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::UpdateOrganizationBillingTierResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetCurrentMonthUsage<WithAsyncMethod_GetOrgBillingInformation<WithAsyncMethod_GetInvoicesSummary<WithAsyncMethod_GetInvoicePdf<WithAsyncMethod_SendPaymentRequiredEmail<WithAsyncMethod_GetAvailableBillingTiers<WithAsyncMethod_UpdateOrganizationBillingTier<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetCurrentMonthUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetCurrentMonthUsage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::GetCurrentMonthUsageRequest, ::viam::app::v1::GetCurrentMonthUsageResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::viam::app::v1::GetCurrentMonthUsageRequest* request, ::viam::app::v1::GetCurrentMonthUsageResponse* response) { return this->GetCurrentMonthUsage(context, request, response); }));}
    void SetMessageAllocatorFor_GetCurrentMonthUsage(
        ::grpc::experimental::MessageAllocator< ::viam::app::v1::GetCurrentMonthUsageRequest, ::viam::app::v1::GetCurrentMonthUsageResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::GetCurrentMonthUsageRequest, ::viam::app::v1::GetCurrentMonthUsageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetCurrentMonthUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentMonthUsage(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetCurrentMonthUsageRequest* /*request*/, ::viam::app::v1::GetCurrentMonthUsageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCurrentMonthUsage(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetCurrentMonthUsageRequest* /*request*/, ::viam::app::v1::GetCurrentMonthUsageResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCurrentMonthUsage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::viam::app::v1::GetCurrentMonthUsageRequest* /*request*/, ::viam::app::v1::GetCurrentMonthUsageResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetOrgBillingInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetOrgBillingInformation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::GetOrgBillingInformationRequest, ::viam::app::v1::GetOrgBillingInformationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::viam::app::v1::GetOrgBillingInformationRequest* request, ::viam::app::v1::GetOrgBillingInformationResponse* response) { return this->GetOrgBillingInformation(context, request, response); }));}
    void SetMessageAllocatorFor_GetOrgBillingInformation(
        ::grpc::experimental::MessageAllocator< ::viam::app::v1::GetOrgBillingInformationRequest, ::viam::app::v1::GetOrgBillingInformationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::GetOrgBillingInformationRequest, ::viam::app::v1::GetOrgBillingInformationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetOrgBillingInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrgBillingInformation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetOrgBillingInformationRequest* /*request*/, ::viam::app::v1::GetOrgBillingInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOrgBillingInformation(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetOrgBillingInformationRequest* /*request*/, ::viam::app::v1::GetOrgBillingInformationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOrgBillingInformation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::viam::app::v1::GetOrgBillingInformationRequest* /*request*/, ::viam::app::v1::GetOrgBillingInformationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetInvoicesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetInvoicesSummary() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::GetInvoicesSummaryRequest, ::viam::app::v1::GetInvoicesSummaryResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::viam::app::v1::GetInvoicesSummaryRequest* request, ::viam::app::v1::GetInvoicesSummaryResponse* response) { return this->GetInvoicesSummary(context, request, response); }));}
    void SetMessageAllocatorFor_GetInvoicesSummary(
        ::grpc::experimental::MessageAllocator< ::viam::app::v1::GetInvoicesSummaryRequest, ::viam::app::v1::GetInvoicesSummaryResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::GetInvoicesSummaryRequest, ::viam::app::v1::GetInvoicesSummaryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetInvoicesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInvoicesSummary(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetInvoicesSummaryRequest* /*request*/, ::viam::app::v1::GetInvoicesSummaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetInvoicesSummary(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetInvoicesSummaryRequest* /*request*/, ::viam::app::v1::GetInvoicesSummaryResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetInvoicesSummary(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::viam::app::v1::GetInvoicesSummaryRequest* /*request*/, ::viam::app::v1::GetInvoicesSummaryResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetInvoicePdf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetInvoicePdf() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::viam::app::v1::GetInvoicePdfRequest, ::viam::app::v1::GetInvoicePdfResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::viam::app::v1::GetInvoicePdfRequest* request) { return this->GetInvoicePdf(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_GetInvoicePdf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInvoicePdf(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetInvoicePdfRequest* /*request*/, ::grpc::ServerWriter< ::viam::app::v1::GetInvoicePdfResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::viam::app::v1::GetInvoicePdfResponse>* GetInvoicePdf(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetInvoicePdfRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::viam::app::v1::GetInvoicePdfResponse>* GetInvoicePdf(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::viam::app::v1::GetInvoicePdfRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendPaymentRequiredEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendPaymentRequiredEmail() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::SendPaymentRequiredEmailRequest, ::viam::app::v1::SendPaymentRequiredEmailResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::viam::app::v1::SendPaymentRequiredEmailRequest* request, ::viam::app::v1::SendPaymentRequiredEmailResponse* response) { return this->SendPaymentRequiredEmail(context, request, response); }));}
    void SetMessageAllocatorFor_SendPaymentRequiredEmail(
        ::grpc::experimental::MessageAllocator< ::viam::app::v1::SendPaymentRequiredEmailRequest, ::viam::app::v1::SendPaymentRequiredEmailResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::SendPaymentRequiredEmailRequest, ::viam::app::v1::SendPaymentRequiredEmailResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendPaymentRequiredEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPaymentRequiredEmail(::grpc::ServerContext* /*context*/, const ::viam::app::v1::SendPaymentRequiredEmailRequest* /*request*/, ::viam::app::v1::SendPaymentRequiredEmailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendPaymentRequiredEmail(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::SendPaymentRequiredEmailRequest* /*request*/, ::viam::app::v1::SendPaymentRequiredEmailResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendPaymentRequiredEmail(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::viam::app::v1::SendPaymentRequiredEmailRequest* /*request*/, ::viam::app::v1::SendPaymentRequiredEmailResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAvailableBillingTiers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetAvailableBillingTiers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::GetAvailableBillingTiersRequest, ::viam::app::v1::GetAvailableBillingTiersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::viam::app::v1::GetAvailableBillingTiersRequest* request, ::viam::app::v1::GetAvailableBillingTiersResponse* response) { return this->GetAvailableBillingTiers(context, request, response); }));}
    void SetMessageAllocatorFor_GetAvailableBillingTiers(
        ::grpc::experimental::MessageAllocator< ::viam::app::v1::GetAvailableBillingTiersRequest, ::viam::app::v1::GetAvailableBillingTiersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::GetAvailableBillingTiersRequest, ::viam::app::v1::GetAvailableBillingTiersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAvailableBillingTiers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableBillingTiers(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetAvailableBillingTiersRequest* /*request*/, ::viam::app::v1::GetAvailableBillingTiersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAvailableBillingTiers(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetAvailableBillingTiersRequest* /*request*/, ::viam::app::v1::GetAvailableBillingTiersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAvailableBillingTiers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::viam::app::v1::GetAvailableBillingTiersRequest* /*request*/, ::viam::app::v1::GetAvailableBillingTiersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateOrganizationBillingTier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateOrganizationBillingTier() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateOrganizationBillingTierRequest, ::viam::app::v1::UpdateOrganizationBillingTierResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* request, ::viam::app::v1::UpdateOrganizationBillingTierResponse* response) { return this->UpdateOrganizationBillingTier(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateOrganizationBillingTier(
        ::grpc::experimental::MessageAllocator< ::viam::app::v1::UpdateOrganizationBillingTierRequest, ::viam::app::v1::UpdateOrganizationBillingTierResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateOrganizationBillingTierRequest, ::viam::app::v1::UpdateOrganizationBillingTierResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateOrganizationBillingTier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganizationBillingTier(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* /*request*/, ::viam::app::v1::UpdateOrganizationBillingTierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateOrganizationBillingTier(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* /*request*/, ::viam::app::v1::UpdateOrganizationBillingTierResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateOrganizationBillingTier(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* /*request*/, ::viam::app::v1::UpdateOrganizationBillingTierResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_GetCurrentMonthUsage<ExperimentalWithCallbackMethod_GetOrgBillingInformation<ExperimentalWithCallbackMethod_GetInvoicesSummary<ExperimentalWithCallbackMethod_GetInvoicePdf<ExperimentalWithCallbackMethod_SendPaymentRequiredEmail<ExperimentalWithCallbackMethod_GetAvailableBillingTiers<ExperimentalWithCallbackMethod_UpdateOrganizationBillingTier<Service > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_GetCurrentMonthUsage<ExperimentalWithCallbackMethod_GetOrgBillingInformation<ExperimentalWithCallbackMethod_GetInvoicesSummary<ExperimentalWithCallbackMethod_GetInvoicePdf<ExperimentalWithCallbackMethod_SendPaymentRequiredEmail<ExperimentalWithCallbackMethod_GetAvailableBillingTiers<ExperimentalWithCallbackMethod_UpdateOrganizationBillingTier<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetCurrentMonthUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCurrentMonthUsage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetCurrentMonthUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentMonthUsage(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetCurrentMonthUsageRequest* /*request*/, ::viam::app::v1::GetCurrentMonthUsageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOrgBillingInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOrgBillingInformation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOrgBillingInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrgBillingInformation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetOrgBillingInformationRequest* /*request*/, ::viam::app::v1::GetOrgBillingInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInvoicesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInvoicesSummary() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetInvoicesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInvoicesSummary(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetInvoicesSummaryRequest* /*request*/, ::viam::app::v1::GetInvoicesSummaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInvoicePdf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInvoicePdf() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetInvoicePdf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInvoicePdf(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetInvoicePdfRequest* /*request*/, ::grpc::ServerWriter< ::viam::app::v1::GetInvoicePdfResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendPaymentRequiredEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendPaymentRequiredEmail() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SendPaymentRequiredEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPaymentRequiredEmail(::grpc::ServerContext* /*context*/, const ::viam::app::v1::SendPaymentRequiredEmailRequest* /*request*/, ::viam::app::v1::SendPaymentRequiredEmailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAvailableBillingTiers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAvailableBillingTiers() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetAvailableBillingTiers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableBillingTiers(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetAvailableBillingTiersRequest* /*request*/, ::viam::app::v1::GetAvailableBillingTiersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrganizationBillingTier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateOrganizationBillingTier() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UpdateOrganizationBillingTier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganizationBillingTier(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* /*request*/, ::viam::app::v1::UpdateOrganizationBillingTierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCurrentMonthUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCurrentMonthUsage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetCurrentMonthUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentMonthUsage(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetCurrentMonthUsageRequest* /*request*/, ::viam::app::v1::GetCurrentMonthUsageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentMonthUsage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrgBillingInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOrgBillingInformation() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOrgBillingInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrgBillingInformation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetOrgBillingInformationRequest* /*request*/, ::viam::app::v1::GetOrgBillingInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrgBillingInformation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInvoicesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInvoicesSummary() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetInvoicesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInvoicesSummary(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetInvoicesSummaryRequest* /*request*/, ::viam::app::v1::GetInvoicesSummaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInvoicesSummary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInvoicePdf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInvoicePdf() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetInvoicePdf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInvoicePdf(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetInvoicePdfRequest* /*request*/, ::grpc::ServerWriter< ::viam::app::v1::GetInvoicePdfResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInvoicePdf(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendPaymentRequiredEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendPaymentRequiredEmail() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SendPaymentRequiredEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPaymentRequiredEmail(::grpc::ServerContext* /*context*/, const ::viam::app::v1::SendPaymentRequiredEmailRequest* /*request*/, ::viam::app::v1::SendPaymentRequiredEmailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPaymentRequiredEmail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAvailableBillingTiers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAvailableBillingTiers() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetAvailableBillingTiers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableBillingTiers(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetAvailableBillingTiersRequest* /*request*/, ::viam::app::v1::GetAvailableBillingTiersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAvailableBillingTiers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrganizationBillingTier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateOrganizationBillingTier() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_UpdateOrganizationBillingTier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganizationBillingTier(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* /*request*/, ::viam::app::v1::UpdateOrganizationBillingTierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrganizationBillingTier(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetCurrentMonthUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetCurrentMonthUsage() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCurrentMonthUsage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetCurrentMonthUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentMonthUsage(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetCurrentMonthUsageRequest* /*request*/, ::viam::app::v1::GetCurrentMonthUsageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetCurrentMonthUsage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetCurrentMonthUsage(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetOrgBillingInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetOrgBillingInformation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOrgBillingInformation(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetOrgBillingInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrgBillingInformation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetOrgBillingInformationRequest* /*request*/, ::viam::app::v1::GetOrgBillingInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetOrgBillingInformation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetOrgBillingInformation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetInvoicesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetInvoicesSummary() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInvoicesSummary(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetInvoicesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInvoicesSummary(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetInvoicesSummaryRequest* /*request*/, ::viam::app::v1::GetInvoicesSummaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetInvoicesSummary(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetInvoicesSummary(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetInvoicePdf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetInvoicePdf() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->GetInvoicePdf(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetInvoicePdf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInvoicePdf(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetInvoicePdfRequest* /*request*/, ::grpc::ServerWriter< ::viam::app::v1::GetInvoicePdfResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* GetInvoicePdf(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* GetInvoicePdf(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendPaymentRequiredEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendPaymentRequiredEmail() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendPaymentRequiredEmail(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendPaymentRequiredEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPaymentRequiredEmail(::grpc::ServerContext* /*context*/, const ::viam::app::v1::SendPaymentRequiredEmailRequest* /*request*/, ::viam::app::v1::SendPaymentRequiredEmailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendPaymentRequiredEmail(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendPaymentRequiredEmail(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAvailableBillingTiers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAvailableBillingTiers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAvailableBillingTiers(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAvailableBillingTiers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAvailableBillingTiers(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetAvailableBillingTiersRequest* /*request*/, ::viam::app::v1::GetAvailableBillingTiersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetAvailableBillingTiers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetAvailableBillingTiers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateOrganizationBillingTier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateOrganizationBillingTier() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateOrganizationBillingTier(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateOrganizationBillingTier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganizationBillingTier(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* /*request*/, ::viam::app::v1::UpdateOrganizationBillingTierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateOrganizationBillingTier(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateOrganizationBillingTier(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCurrentMonthUsage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCurrentMonthUsage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetCurrentMonthUsageRequest, ::viam::app::v1::GetCurrentMonthUsageResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::viam::app::v1::GetCurrentMonthUsageRequest, ::viam::app::v1::GetCurrentMonthUsageResponse>* streamer) {
                       return this->StreamedGetCurrentMonthUsage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCurrentMonthUsage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCurrentMonthUsage(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetCurrentMonthUsageRequest* /*request*/, ::viam::app::v1::GetCurrentMonthUsageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCurrentMonthUsage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetCurrentMonthUsageRequest,::viam::app::v1::GetCurrentMonthUsageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrgBillingInformation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOrgBillingInformation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetOrgBillingInformationRequest, ::viam::app::v1::GetOrgBillingInformationResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::viam::app::v1::GetOrgBillingInformationRequest, ::viam::app::v1::GetOrgBillingInformationResponse>* streamer) {
                       return this->StreamedGetOrgBillingInformation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOrgBillingInformation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrgBillingInformation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetOrgBillingInformationRequest* /*request*/, ::viam::app::v1::GetOrgBillingInformationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrgBillingInformation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetOrgBillingInformationRequest,::viam::app::v1::GetOrgBillingInformationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInvoicesSummary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInvoicesSummary() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetInvoicesSummaryRequest, ::viam::app::v1::GetInvoicesSummaryResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::viam::app::v1::GetInvoicesSummaryRequest, ::viam::app::v1::GetInvoicesSummaryResponse>* streamer) {
                       return this->StreamedGetInvoicesSummary(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInvoicesSummary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInvoicesSummary(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetInvoicesSummaryRequest* /*request*/, ::viam::app::v1::GetInvoicesSummaryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInvoicesSummary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetInvoicesSummaryRequest,::viam::app::v1::GetInvoicesSummaryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendPaymentRequiredEmail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendPaymentRequiredEmail() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::SendPaymentRequiredEmailRequest, ::viam::app::v1::SendPaymentRequiredEmailResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::viam::app::v1::SendPaymentRequiredEmailRequest, ::viam::app::v1::SendPaymentRequiredEmailResponse>* streamer) {
                       return this->StreamedSendPaymentRequiredEmail(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendPaymentRequiredEmail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendPaymentRequiredEmail(::grpc::ServerContext* /*context*/, const ::viam::app::v1::SendPaymentRequiredEmailRequest* /*request*/, ::viam::app::v1::SendPaymentRequiredEmailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendPaymentRequiredEmail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::SendPaymentRequiredEmailRequest,::viam::app::v1::SendPaymentRequiredEmailResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAvailableBillingTiers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAvailableBillingTiers() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetAvailableBillingTiersRequest, ::viam::app::v1::GetAvailableBillingTiersResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::viam::app::v1::GetAvailableBillingTiersRequest, ::viam::app::v1::GetAvailableBillingTiersResponse>* streamer) {
                       return this->StreamedGetAvailableBillingTiers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAvailableBillingTiers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAvailableBillingTiers(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetAvailableBillingTiersRequest* /*request*/, ::viam::app::v1::GetAvailableBillingTiersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAvailableBillingTiers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetAvailableBillingTiersRequest,::viam::app::v1::GetAvailableBillingTiersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrganizationBillingTier : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateOrganizationBillingTier() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::UpdateOrganizationBillingTierRequest, ::viam::app::v1::UpdateOrganizationBillingTierResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::viam::app::v1::UpdateOrganizationBillingTierRequest, ::viam::app::v1::UpdateOrganizationBillingTierResponse>* streamer) {
                       return this->StreamedUpdateOrganizationBillingTier(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateOrganizationBillingTier() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrganizationBillingTier(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationBillingTierRequest* /*request*/, ::viam::app::v1::UpdateOrganizationBillingTierResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrganizationBillingTier(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::UpdateOrganizationBillingTierRequest,::viam::app::v1::UpdateOrganizationBillingTierResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetCurrentMonthUsage<WithStreamedUnaryMethod_GetOrgBillingInformation<WithStreamedUnaryMethod_GetInvoicesSummary<WithStreamedUnaryMethod_SendPaymentRequiredEmail<WithStreamedUnaryMethod_GetAvailableBillingTiers<WithStreamedUnaryMethod_UpdateOrganizationBillingTier<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetInvoicePdf : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_GetInvoicePdf() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::viam::app::v1::GetInvoicePdfRequest, ::viam::app::v1::GetInvoicePdfResponse>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerSplitStreamer<
                     ::viam::app::v1::GetInvoicePdfRequest, ::viam::app::v1::GetInvoicePdfResponse>* streamer) {
                       return this->StreamedGetInvoicePdf(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_GetInvoicePdf() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInvoicePdf(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetInvoicePdfRequest* /*request*/, ::grpc::ServerWriter< ::viam::app::v1::GetInvoicePdfResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetInvoicePdf(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::viam::app::v1::GetInvoicePdfRequest,::viam::app::v1::GetInvoicePdfResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetInvoicePdf<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetCurrentMonthUsage<WithStreamedUnaryMethod_GetOrgBillingInformation<WithStreamedUnaryMethod_GetInvoicesSummary<WithSplitStreamingMethod_GetInvoicePdf<WithStreamedUnaryMethod_SendPaymentRequiredEmail<WithStreamedUnaryMethod_GetAvailableBillingTiers<WithStreamedUnaryMethod_UpdateOrganizationBillingTier<Service > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace app
}  // namespace viam


#endif  // GRPC_app_2fv1_2fbilling_2eproto__INCLUDED
