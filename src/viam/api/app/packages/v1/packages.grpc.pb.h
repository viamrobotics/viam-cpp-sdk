// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/packages/v1/packages.proto
#ifndef GRPC_app_2fpackages_2fv1_2fpackages_2eproto__INCLUDED
#define GRPC_app_2fpackages_2fv1_2fpackages_2eproto__INCLUDED

#include "app/packages/v1/packages.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace viam {
namespace app {
namespace packages {
namespace v1 {

class PackageService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.app.packages.v1.PackageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // CreatePackage uploads a package to the cloud
    std::unique_ptr< ::grpc::ClientWriterInterface< ::viam::app::packages::v1::CreatePackageRequest>> CreatePackage(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::viam::app::packages::v1::CreatePackageRequest>>(CreatePackageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::viam::app::packages::v1::CreatePackageRequest>> AsyncCreatePackage(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::viam::app::packages::v1::CreatePackageRequest>>(AsyncCreatePackageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::viam::app::packages::v1::CreatePackageRequest>> PrepareAsyncCreatePackage(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::viam::app::packages::v1::CreatePackageRequest>>(PrepareAsyncCreatePackageRaw(context, response, cq));
    }
    // DeletePackage removes the given package versions
    virtual ::grpc::Status DeletePackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest& request, ::viam::app::packages::v1::DeletePackageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::DeletePackageResponse>> AsyncDeletePackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::DeletePackageResponse>>(AsyncDeletePackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::DeletePackageResponse>> PrepareAsyncDeletePackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::DeletePackageResponse>>(PrepareAsyncDeletePackageRaw(context, request, cq));
    }
    // GetPackage returns the metadata for a requested package version. It also returns a URL
    // for downloading the package if one is requested.
    virtual ::grpc::Status GetPackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest& request, ::viam::app::packages::v1::GetPackageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::GetPackageResponse>> AsyncGetPackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::GetPackageResponse>>(AsyncGetPackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::GetPackageResponse>> PrepareAsyncGetPackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::GetPackageResponse>>(PrepareAsyncGetPackageRaw(context, request, cq));
    }
    // ListPackages gets the metadata for the requested packages. Includes package name, version, and/or
    // type to filter beyond the required organization_id. ListPackages also returns URLs for
    // downloading each package if they are requested.
    virtual ::grpc::Status ListPackages(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest& request, ::viam::app::packages::v1::ListPackagesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::ListPackagesResponse>> AsyncListPackages(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::ListPackagesResponse>>(AsyncListPackagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::ListPackagesResponse>> PrepareAsyncListPackages(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::ListPackagesResponse>>(PrepareAsyncListPackagesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // CreatePackage uploads a package to the cloud
      virtual void CreatePackage(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response, ::grpc::ClientWriteReactor< ::viam::app::packages::v1::CreatePackageRequest>* reactor) = 0;
      // DeletePackage removes the given package versions
      virtual void DeletePackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest* request, ::viam::app::packages::v1::DeletePackageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeletePackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest* request, ::viam::app::packages::v1::DeletePackageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetPackage returns the metadata for a requested package version. It also returns a URL
      // for downloading the package if one is requested.
      virtual void GetPackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest* request, ::viam::app::packages::v1::GetPackageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest* request, ::viam::app::packages::v1::GetPackageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ListPackages gets the metadata for the requested packages. Includes package name, version, and/or
      // type to filter beyond the required organization_id. ListPackages also returns URLs for
      // downloading each package if they are requested.
      virtual void ListPackages(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest* request, ::viam::app::packages::v1::ListPackagesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListPackages(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest* request, ::viam::app::packages::v1::ListPackagesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::viam::app::packages::v1::CreatePackageRequest>* CreatePackageRaw(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::viam::app::packages::v1::CreatePackageRequest>* AsyncCreatePackageRaw(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::viam::app::packages::v1::CreatePackageRequest>* PrepareAsyncCreatePackageRaw(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::DeletePackageResponse>* AsyncDeletePackageRaw(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::DeletePackageResponse>* PrepareAsyncDeletePackageRaw(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::GetPackageResponse>* AsyncGetPackageRaw(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::GetPackageResponse>* PrepareAsyncGetPackageRaw(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::ListPackagesResponse>* AsyncListPackagesRaw(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::packages::v1::ListPackagesResponse>* PrepareAsyncListPackagesRaw(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::viam::app::packages::v1::CreatePackageRequest>> CreatePackage(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::viam::app::packages::v1::CreatePackageRequest>>(CreatePackageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::viam::app::packages::v1::CreatePackageRequest>> AsyncCreatePackage(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::viam::app::packages::v1::CreatePackageRequest>>(AsyncCreatePackageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::viam::app::packages::v1::CreatePackageRequest>> PrepareAsyncCreatePackage(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::viam::app::packages::v1::CreatePackageRequest>>(PrepareAsyncCreatePackageRaw(context, response, cq));
    }
    ::grpc::Status DeletePackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest& request, ::viam::app::packages::v1::DeletePackageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::DeletePackageResponse>> AsyncDeletePackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::DeletePackageResponse>>(AsyncDeletePackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::DeletePackageResponse>> PrepareAsyncDeletePackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::DeletePackageResponse>>(PrepareAsyncDeletePackageRaw(context, request, cq));
    }
    ::grpc::Status GetPackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest& request, ::viam::app::packages::v1::GetPackageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::GetPackageResponse>> AsyncGetPackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::GetPackageResponse>>(AsyncGetPackageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::GetPackageResponse>> PrepareAsyncGetPackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::GetPackageResponse>>(PrepareAsyncGetPackageRaw(context, request, cq));
    }
    ::grpc::Status ListPackages(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest& request, ::viam::app::packages::v1::ListPackagesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::ListPackagesResponse>> AsyncListPackages(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::ListPackagesResponse>>(AsyncListPackagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::ListPackagesResponse>> PrepareAsyncListPackages(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::ListPackagesResponse>>(PrepareAsyncListPackagesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreatePackage(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response, ::grpc::ClientWriteReactor< ::viam::app::packages::v1::CreatePackageRequest>* reactor) override;
      void DeletePackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest* request, ::viam::app::packages::v1::DeletePackageResponse* response, std::function<void(::grpc::Status)>) override;
      void DeletePackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest* request, ::viam::app::packages::v1::DeletePackageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest* request, ::viam::app::packages::v1::GetPackageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPackage(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest* request, ::viam::app::packages::v1::GetPackageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListPackages(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest* request, ::viam::app::packages::v1::ListPackagesResponse* response, std::function<void(::grpc::Status)>) override;
      void ListPackages(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest* request, ::viam::app::packages::v1::ListPackagesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::viam::app::packages::v1::CreatePackageRequest>* CreatePackageRaw(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response) override;
    ::grpc::ClientAsyncWriter< ::viam::app::packages::v1::CreatePackageRequest>* AsyncCreatePackageRaw(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::viam::app::packages::v1::CreatePackageRequest>* PrepareAsyncCreatePackageRaw(::grpc::ClientContext* context, ::viam::app::packages::v1::CreatePackageResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::DeletePackageResponse>* AsyncDeletePackageRaw(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::DeletePackageResponse>* PrepareAsyncDeletePackageRaw(::grpc::ClientContext* context, const ::viam::app::packages::v1::DeletePackageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::GetPackageResponse>* AsyncGetPackageRaw(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::GetPackageResponse>* PrepareAsyncGetPackageRaw(::grpc::ClientContext* context, const ::viam::app::packages::v1::GetPackageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::ListPackagesResponse>* AsyncListPackagesRaw(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::packages::v1::ListPackagesResponse>* PrepareAsyncListPackagesRaw(::grpc::ClientContext* context, const ::viam::app::packages::v1::ListPackagesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePackage_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePackage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPackage_;
    const ::grpc::internal::RpcMethod rpcmethod_ListPackages_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // CreatePackage uploads a package to the cloud
    virtual ::grpc::Status CreatePackage(::grpc::ServerContext* context, ::grpc::ServerReader< ::viam::app::packages::v1::CreatePackageRequest>* reader, ::viam::app::packages::v1::CreatePackageResponse* response);
    // DeletePackage removes the given package versions
    virtual ::grpc::Status DeletePackage(::grpc::ServerContext* context, const ::viam::app::packages::v1::DeletePackageRequest* request, ::viam::app::packages::v1::DeletePackageResponse* response);
    // GetPackage returns the metadata for a requested package version. It also returns a URL
    // for downloading the package if one is requested.
    virtual ::grpc::Status GetPackage(::grpc::ServerContext* context, const ::viam::app::packages::v1::GetPackageRequest* request, ::viam::app::packages::v1::GetPackageResponse* response);
    // ListPackages gets the metadata for the requested packages. Includes package name, version, and/or
    // type to filter beyond the required organization_id. ListPackages also returns URLs for
    // downloading each package if they are requested.
    virtual ::grpc::Status ListPackages(::grpc::ServerContext* context, const ::viam::app::packages::v1::ListPackagesRequest* request, ::viam::app::packages::v1::ListPackagesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreatePackage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreatePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePackage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::viam::app::packages::v1::CreatePackageRequest>* /*reader*/, ::viam::app::packages::v1::CreatePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePackage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::viam::app::packages::v1::CreatePackageResponse, ::viam::app::packages::v1::CreatePackageRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeletePackage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeletePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePackage(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::DeletePackageRequest* /*request*/, ::viam::app::packages::v1::DeletePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePackage(::grpc::ServerContext* context, ::viam::app::packages::v1::DeletePackageRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::packages::v1::DeletePackageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPackage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPackage(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::GetPackageRequest* /*request*/, ::viam::app::packages::v1::GetPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPackage(::grpc::ServerContext* context, ::viam::app::packages::v1::GetPackageRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::packages::v1::GetPackageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListPackages() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListPackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPackages(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::ListPackagesRequest* /*request*/, ::viam::app::packages::v1::ListPackagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPackages(::grpc::ServerContext* context, ::viam::app::packages::v1::ListPackagesRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::packages::v1::ListPackagesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreatePackage<WithAsyncMethod_DeletePackage<WithAsyncMethod_GetPackage<WithAsyncMethod_ListPackages<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreatePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreatePackage() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::viam::app::packages::v1::CreatePackageRequest, ::viam::app::packages::v1::CreatePackageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::viam::app::packages::v1::CreatePackageResponse* response) { return this->CreatePackage(context, response); }));
    }
    ~WithCallbackMethod_CreatePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePackage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::viam::app::packages::v1::CreatePackageRequest>* /*reader*/, ::viam::app::packages::v1::CreatePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::viam::app::packages::v1::CreatePackageRequest>* CreatePackage(
      ::grpc::CallbackServerContext* /*context*/, ::viam::app::packages::v1::CreatePackageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeletePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeletePackage() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::packages::v1::DeletePackageRequest, ::viam::app::packages::v1::DeletePackageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::packages::v1::DeletePackageRequest* request, ::viam::app::packages::v1::DeletePackageResponse* response) { return this->DeletePackage(context, request, response); }));}
    void SetMessageAllocatorFor_DeletePackage(
        ::grpc::MessageAllocator< ::viam::app::packages::v1::DeletePackageRequest, ::viam::app::packages::v1::DeletePackageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::packages::v1::DeletePackageRequest, ::viam::app::packages::v1::DeletePackageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeletePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePackage(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::DeletePackageRequest* /*request*/, ::viam::app::packages::v1::DeletePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePackage(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::packages::v1::DeletePackageRequest* /*request*/, ::viam::app::packages::v1::DeletePackageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPackage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::packages::v1::GetPackageRequest, ::viam::app::packages::v1::GetPackageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::packages::v1::GetPackageRequest* request, ::viam::app::packages::v1::GetPackageResponse* response) { return this->GetPackage(context, request, response); }));}
    void SetMessageAllocatorFor_GetPackage(
        ::grpc::MessageAllocator< ::viam::app::packages::v1::GetPackageRequest, ::viam::app::packages::v1::GetPackageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::packages::v1::GetPackageRequest, ::viam::app::packages::v1::GetPackageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPackage(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::GetPackageRequest* /*request*/, ::viam::app::packages::v1::GetPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPackage(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::packages::v1::GetPackageRequest* /*request*/, ::viam::app::packages::v1::GetPackageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListPackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListPackages() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::packages::v1::ListPackagesRequest, ::viam::app::packages::v1::ListPackagesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::packages::v1::ListPackagesRequest* request, ::viam::app::packages::v1::ListPackagesResponse* response) { return this->ListPackages(context, request, response); }));}
    void SetMessageAllocatorFor_ListPackages(
        ::grpc::MessageAllocator< ::viam::app::packages::v1::ListPackagesRequest, ::viam::app::packages::v1::ListPackagesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::packages::v1::ListPackagesRequest, ::viam::app::packages::v1::ListPackagesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListPackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPackages(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::ListPackagesRequest* /*request*/, ::viam::app::packages::v1::ListPackagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListPackages(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::packages::v1::ListPackagesRequest* /*request*/, ::viam::app::packages::v1::ListPackagesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreatePackage<WithCallbackMethod_DeletePackage<WithCallbackMethod_GetPackage<WithCallbackMethod_ListPackages<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreatePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreatePackage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreatePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePackage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::viam::app::packages::v1::CreatePackageRequest>* /*reader*/, ::viam::app::packages::v1::CreatePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeletePackage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeletePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePackage(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::DeletePackageRequest* /*request*/, ::viam::app::packages::v1::DeletePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPackage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPackage(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::GetPackageRequest* /*request*/, ::viam::app::packages::v1::GetPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListPackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListPackages() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListPackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPackages(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::ListPackagesRequest* /*request*/, ::viam::app::packages::v1::ListPackagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreatePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreatePackage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreatePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePackage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::viam::app::packages::v1::CreatePackageRequest>* /*reader*/, ::viam::app::packages::v1::CreatePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePackage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeletePackage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeletePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePackage(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::DeletePackageRequest* /*request*/, ::viam::app::packages::v1::DeletePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePackage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPackage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPackage(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::GetPackageRequest* /*request*/, ::viam::app::packages::v1::GetPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPackage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListPackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListPackages() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListPackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPackages(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::ListPackagesRequest* /*request*/, ::viam::app::packages::v1::ListPackagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPackages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreatePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreatePackage() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->CreatePackage(context, response); }));
    }
    ~WithRawCallbackMethod_CreatePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePackage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::viam::app::packages::v1::CreatePackageRequest>* /*reader*/, ::viam::app::packages::v1::CreatePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* CreatePackage(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeletePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeletePackage() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeletePackage(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeletePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePackage(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::DeletePackageRequest* /*request*/, ::viam::app::packages::v1::DeletePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeletePackage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPackage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPackage(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPackage(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::GetPackageRequest* /*request*/, ::viam::app::packages::v1::GetPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPackage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListPackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListPackages() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListPackages(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListPackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPackages(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::ListPackagesRequest* /*request*/, ::viam::app::packages::v1::ListPackagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListPackages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeletePackage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::packages::v1::DeletePackageRequest, ::viam::app::packages::v1::DeletePackageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::packages::v1::DeletePackageRequest, ::viam::app::packages::v1::DeletePackageResponse>* streamer) {
                       return this->StreamedDeletePackage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeletePackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePackage(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::DeletePackageRequest* /*request*/, ::viam::app::packages::v1::DeletePackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePackage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::packages::v1::DeletePackageRequest,::viam::app::packages::v1::DeletePackageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPackage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPackage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::packages::v1::GetPackageRequest, ::viam::app::packages::v1::GetPackageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::packages::v1::GetPackageRequest, ::viam::app::packages::v1::GetPackageResponse>* streamer) {
                       return this->StreamedGetPackage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPackage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPackage(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::GetPackageRequest* /*request*/, ::viam::app::packages::v1::GetPackageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPackage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::packages::v1::GetPackageRequest,::viam::app::packages::v1::GetPackageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPackages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListPackages() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::packages::v1::ListPackagesRequest, ::viam::app::packages::v1::ListPackagesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::packages::v1::ListPackagesRequest, ::viam::app::packages::v1::ListPackagesResponse>* streamer) {
                       return this->StreamedListPackages(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListPackages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPackages(::grpc::ServerContext* /*context*/, const ::viam::app::packages::v1::ListPackagesRequest* /*request*/, ::viam::app::packages::v1::ListPackagesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPackages(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::packages::v1::ListPackagesRequest,::viam::app::packages::v1::ListPackagesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DeletePackage<WithStreamedUnaryMethod_GetPackage<WithStreamedUnaryMethod_ListPackages<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DeletePackage<WithStreamedUnaryMethod_GetPackage<WithStreamedUnaryMethod_ListPackages<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace packages
}  // namespace app
}  // namespace viam


#endif  // GRPC_app_2fpackages_2fv1_2fpackages_2eproto__INCLUDED
