// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/packages/v1/packages.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fpackages_2fv1_2fpackages_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_app_2fpackages_2fv1_2fpackages_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/protobuf/struct.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_app_2fpackages_2fv1_2fpackages_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fpackages_2fv1_2fpackages_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_app_2fpackages_2fv1_2fpackages_2eproto;
namespace viam {
namespace app {
namespace packages {
namespace v1 {
class CreatePackageRequest;
struct CreatePackageRequestDefaultTypeInternal;
extern CreatePackageRequestDefaultTypeInternal _CreatePackageRequest_default_instance_;
class CreatePackageResponse;
struct CreatePackageResponseDefaultTypeInternal;
extern CreatePackageResponseDefaultTypeInternal _CreatePackageResponse_default_instance_;
class DeletePackageRequest;
struct DeletePackageRequestDefaultTypeInternal;
extern DeletePackageRequestDefaultTypeInternal _DeletePackageRequest_default_instance_;
class DeletePackageResponse;
struct DeletePackageResponseDefaultTypeInternal;
extern DeletePackageResponseDefaultTypeInternal _DeletePackageResponse_default_instance_;
class FileInfo;
struct FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class GetPackageRequest;
struct GetPackageRequestDefaultTypeInternal;
extern GetPackageRequestDefaultTypeInternal _GetPackageRequest_default_instance_;
class GetPackageResponse;
struct GetPackageResponseDefaultTypeInternal;
extern GetPackageResponseDefaultTypeInternal _GetPackageResponse_default_instance_;
class ListPackagesRequest;
struct ListPackagesRequestDefaultTypeInternal;
extern ListPackagesRequestDefaultTypeInternal _ListPackagesRequest_default_instance_;
class ListPackagesResponse;
struct ListPackagesResponseDefaultTypeInternal;
extern ListPackagesResponseDefaultTypeInternal _ListPackagesResponse_default_instance_;
class Package;
struct PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class PackageInfo;
struct PackageInfoDefaultTypeInternal;
extern PackageInfoDefaultTypeInternal _PackageInfo_default_instance_;
}  // namespace v1
}  // namespace packages
}  // namespace app
}  // namespace viam
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace viam {
namespace app {
namespace packages {
namespace v1 {
enum PackageType : int {
  PACKAGE_TYPE_UNSPECIFIED = 0,
  PACKAGE_TYPE_ARCHIVE = 1,
  PACKAGE_TYPE_ML_MODEL = 2,
  PACKAGE_TYPE_MODULE = 3,
  PACKAGE_TYPE_SLAM_MAP = 4,
  PACKAGE_TYPE_ML_TRAINING = 5,
  PackageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PackageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PackageType_IsValid(int value);
extern const uint32_t PackageType_internal_data_[];
constexpr PackageType PackageType_MIN = static_cast<PackageType>(0);
constexpr PackageType PackageType_MAX = static_cast<PackageType>(5);
constexpr int PackageType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
PackageType_descriptor();
template <typename T>
const std::string& PackageType_Name(T value) {
  static_assert(std::is_same<T, PackageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PackageType_Name().");
  return PackageType_Name(static_cast<PackageType>(value));
}
template <>
inline const std::string& PackageType_Name(PackageType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PackageType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool PackageType_Parse(absl::string_view name, PackageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PackageType>(
      PackageType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ListPackagesRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.packages.v1.ListPackagesRequest) */ {
 public:
  inline ListPackagesRequest() : ListPackagesRequest(nullptr) {}
  ~ListPackagesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListPackagesRequest(::google::protobuf::internal::ConstantInitialized);

  inline ListPackagesRequest(const ListPackagesRequest& from)
      : ListPackagesRequest(nullptr, from) {}
  ListPackagesRequest(ListPackagesRequest&& from) noexcept
    : ListPackagesRequest() {
    *this = ::std::move(from);
  }

  inline ListPackagesRequest& operator=(const ListPackagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPackagesRequest& operator=(ListPackagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPackagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPackagesRequest* internal_default_instance() {
    return reinterpret_cast<const ListPackagesRequest*>(
               &_ListPackagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListPackagesRequest& a, ListPackagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPackagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPackagesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPackagesRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPackagesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListPackagesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListPackagesRequest& from) {
    ListPackagesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListPackagesRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.packages.v1.ListPackagesRequest";
  }
  protected:
  explicit ListPackagesRequest(::google::protobuf::Arena* arena);
  ListPackagesRequest(::google::protobuf::Arena* arena, const ListPackagesRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kTypeFieldNumber = 4,
    kIncludeUrlFieldNumber = 5,
  };
  // string organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id() ;
  const std::string& organization_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_organization_id(Arg_&& arg, Args_... args);
  std::string* mutable_organization_id();
  PROTOBUF_NODISCARD std::string* release_organization_id();
  void set_allocated_organization_id(std::string* value);

  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(
      const std::string& value);
  std::string* _internal_mutable_organization_id();

  public:
  // optional string name = 2 [json_name = "name"];
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional string version = 3 [json_name = "version"];
  bool has_version() const;
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // optional .viam.app.packages.v1.PackageType type = 4 [json_name = "type"];
  bool has_type() const;
  void clear_type() ;
  ::viam::app::packages::v1::PackageType type() const;
  void set_type(::viam::app::packages::v1::PackageType value);

  private:
  ::viam::app::packages::v1::PackageType _internal_type() const;
  void _internal_set_type(::viam::app::packages::v1::PackageType value);

  public:
  // optional bool include_url = 5 [json_name = "includeUrl"];
  bool has_include_url() const;
  void clear_include_url() ;
  bool include_url() const;
  void set_include_url(bool value);

  private:
  bool _internal_include_url() const;
  void _internal_set_include_url(bool value);

  public:
  // @@protoc_insertion_point(class_scope:viam.app.packages.v1.ListPackagesRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      75, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr organization_id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    int type_;
    bool include_url_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpackages_2fv1_2fpackages_2eproto;
};// -------------------------------------------------------------------

class GetPackageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.packages.v1.GetPackageRequest) */ {
 public:
  inline GetPackageRequest() : GetPackageRequest(nullptr) {}
  ~GetPackageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPackageRequest(::google::protobuf::internal::ConstantInitialized);

  inline GetPackageRequest(const GetPackageRequest& from)
      : GetPackageRequest(nullptr, from) {}
  GetPackageRequest(GetPackageRequest&& from) noexcept
    : GetPackageRequest() {
    *this = ::std::move(from);
  }

  inline GetPackageRequest& operator=(const GetPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPackageRequest& operator=(GetPackageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPackageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPackageRequest* internal_default_instance() {
    return reinterpret_cast<const GetPackageRequest*>(
               &_GetPackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetPackageRequest& a, GetPackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPackageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPackageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPackageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPackageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPackageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPackageRequest& from) {
    GetPackageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPackageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.packages.v1.GetPackageRequest";
  }
  protected:
  explicit GetPackageRequest(::google::protobuf::Arena* arena);
  GetPackageRequest(::google::protobuf::Arena* arena, const GetPackageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kPlatformFieldNumber = 5,
    kIncludeUrlFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string version = 2 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // optional string platform = 5 [json_name = "platform"];
  bool has_platform() const;
  void clear_platform() ;
  const std::string& platform() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_platform(Arg_&& arg, Args_... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* value);

  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(
      const std::string& value);
  std::string* _internal_mutable_platform();

  public:
  // optional bool include_url = 3 [json_name = "includeUrl"];
  bool has_include_url() const;
  void clear_include_url() ;
  bool include_url() const;
  void set_include_url(bool value);

  private:
  bool _internal_include_url() const;
  void _internal_set_include_url(bool value);

  public:
  // optional .viam.app.packages.v1.PackageType type = 4 [json_name = "type"];
  bool has_type() const;
  void clear_type() ;
  ::viam::app::packages::v1::PackageType type() const;
  void set_type(::viam::app::packages::v1::PackageType value);

  private:
  ::viam::app::packages::v1::PackageType _internal_type() const;
  void _internal_set_type(::viam::app::packages::v1::PackageType value);

  public:
  // @@protoc_insertion_point(class_scope:viam.app.packages.v1.GetPackageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      64, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr platform_;
    bool include_url_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpackages_2fv1_2fpackages_2eproto;
};// -------------------------------------------------------------------

class FileInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.packages.v1.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  ~FileInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FileInfo(::google::protobuf::internal::ConstantInitialized);

  inline FileInfo(const FileInfo& from)
      : FileInfo(nullptr, from) {}
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FileInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FileInfo& from) {
    FileInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FileInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.packages.v1.FileInfo";
  }
  protected:
  explicit FileInfo(::google::protobuf::Arena* arena);
  FileInfo(::google::protobuf::Arena* arena, const FileInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
    kIsDirectoryFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // uint64 size = 2 [json_name = "size"];
  void clear_size() ;
  ::uint64_t size() const;
  void set_size(::uint64_t value);

  private:
  ::uint64_t _internal_size() const;
  void _internal_set_size(::uint64_t value);

  public:
  // optional bool is_directory = 3 [json_name = "isDirectory"];
  bool has_is_directory() const;
  void clear_is_directory() ;
  bool is_directory() const;
  void set_is_directory(bool value);

  private:
  bool _internal_is_directory() const;
  void _internal_set_is_directory(bool value);

  public:
  // @@protoc_insertion_point(class_scope:viam.app.packages.v1.FileInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::uint64_t size_;
    bool is_directory_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpackages_2fv1_2fpackages_2eproto;
};// -------------------------------------------------------------------

class DeletePackageResponse final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.packages.v1.DeletePackageResponse) */ {
 public:
  inline DeletePackageResponse() : DeletePackageResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeletePackageResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeletePackageResponse(const DeletePackageResponse& from)
      : DeletePackageResponse(nullptr, from) {}
  DeletePackageResponse(DeletePackageResponse&& from) noexcept
    : DeletePackageResponse() {
    *this = ::std::move(from);
  }

  inline DeletePackageResponse& operator=(const DeletePackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePackageResponse& operator=(DeletePackageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeletePackageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeletePackageResponse* internal_default_instance() {
    return reinterpret_cast<const DeletePackageResponse*>(
               &_DeletePackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeletePackageResponse& a, DeletePackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePackageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePackageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeletePackageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeletePackageResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeletePackageResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeletePackageResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.packages.v1.DeletePackageResponse";
  }
  protected:
  explicit DeletePackageResponse(::google::protobuf::Arena* arena);
  DeletePackageResponse(::google::protobuf::Arena* arena, const DeletePackageResponse& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.packages.v1.DeletePackageResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_app_2fpackages_2fv1_2fpackages_2eproto;
};// -------------------------------------------------------------------

class DeletePackageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.packages.v1.DeletePackageRequest) */ {
 public:
  inline DeletePackageRequest() : DeletePackageRequest(nullptr) {}
  ~DeletePackageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeletePackageRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeletePackageRequest(const DeletePackageRequest& from)
      : DeletePackageRequest(nullptr, from) {}
  DeletePackageRequest(DeletePackageRequest&& from) noexcept
    : DeletePackageRequest() {
    *this = ::std::move(from);
  }

  inline DeletePackageRequest& operator=(const DeletePackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePackageRequest& operator=(DeletePackageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeletePackageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeletePackageRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePackageRequest*>(
               &_DeletePackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeletePackageRequest& a, DeletePackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePackageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePackageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeletePackageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeletePackageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeletePackageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeletePackageRequest& from) {
    DeletePackageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeletePackageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.packages.v1.DeletePackageRequest";
  }
  protected:
  explicit DeletePackageRequest(::google::protobuf::Arena* arena);
  DeletePackageRequest(::google::protobuf::Arena* arena, const DeletePackageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string version = 2 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // .viam.app.packages.v1.PackageType type = 3 [json_name = "type"];
  void clear_type() ;
  ::viam::app::packages::v1::PackageType type() const;
  void set_type(::viam::app::packages::v1::PackageType value);

  private:
  ::viam::app::packages::v1::PackageType _internal_type() const;
  void _internal_set_type(::viam::app::packages::v1::PackageType value);

  public:
  // @@protoc_insertion_point(class_scope:viam.app.packages.v1.DeletePackageRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      59, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    int type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpackages_2fv1_2fpackages_2eproto;
};// -------------------------------------------------------------------

class CreatePackageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.packages.v1.CreatePackageResponse) */ {
 public:
  inline CreatePackageResponse() : CreatePackageResponse(nullptr) {}
  ~CreatePackageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreatePackageResponse(::google::protobuf::internal::ConstantInitialized);

  inline CreatePackageResponse(const CreatePackageResponse& from)
      : CreatePackageResponse(nullptr, from) {}
  CreatePackageResponse(CreatePackageResponse&& from) noexcept
    : CreatePackageResponse() {
    *this = ::std::move(from);
  }

  inline CreatePackageResponse& operator=(const CreatePackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePackageResponse& operator=(CreatePackageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePackageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePackageResponse* internal_default_instance() {
    return reinterpret_cast<const CreatePackageResponse*>(
               &_CreatePackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreatePackageResponse& a, CreatePackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePackageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePackageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePackageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePackageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreatePackageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CreatePackageResponse& from) {
    CreatePackageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreatePackageResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.packages.v1.CreatePackageResponse";
  }
  protected:
  explicit CreatePackageResponse(::google::protobuf::Arena* arena);
  CreatePackageResponse(::google::protobuf::Arena* arena, const CreatePackageResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string version = 2 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // @@protoc_insertion_point(class_scope:viam.app.packages.v1.CreatePackageResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpackages_2fv1_2fpackages_2eproto;
};// -------------------------------------------------------------------

class PackageInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.packages.v1.PackageInfo) */ {
 public:
  inline PackageInfo() : PackageInfo(nullptr) {}
  ~PackageInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PackageInfo(::google::protobuf::internal::ConstantInitialized);

  inline PackageInfo(const PackageInfo& from)
      : PackageInfo(nullptr, from) {}
  PackageInfo(PackageInfo&& from) noexcept
    : PackageInfo() {
    *this = ::std::move(from);
  }

  inline PackageInfo& operator=(const PackageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageInfo& operator=(PackageInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PackageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackageInfo* internal_default_instance() {
    return reinterpret_cast<const PackageInfo*>(
               &_PackageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PackageInfo& a, PackageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackageInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PackageInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PackageInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PackageInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PackageInfo& from) {
    PackageInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PackageInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.packages.v1.PackageInfo";
  }
  protected:
  explicit PackageInfo(::google::protobuf::Arena* arena);
  PackageInfo(::google::protobuf::Arena* arena, const PackageInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 5,
    kOrganizationIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kPlatformFieldNumber = 7,
    kMetadataFieldNumber = 6,
    kTypeFieldNumber = 4,
  };
  // repeated .viam.app.packages.v1.FileInfo files = 5 [json_name = "files"];
  int files_size() const;
  private:
  int _internal_files_size() const;

  public:
  void clear_files() ;
  ::viam::app::packages::v1::FileInfo* mutable_files(int index);
  ::google::protobuf::RepeatedPtrField< ::viam::app::packages::v1::FileInfo >*
      mutable_files();
  private:
  const ::google::protobuf::RepeatedPtrField<::viam::app::packages::v1::FileInfo>& _internal_files() const;
  ::google::protobuf::RepeatedPtrField<::viam::app::packages::v1::FileInfo>* _internal_mutable_files();
  public:
  const ::viam::app::packages::v1::FileInfo& files(int index) const;
  ::viam::app::packages::v1::FileInfo* add_files();
  const ::google::protobuf::RepeatedPtrField< ::viam::app::packages::v1::FileInfo >&
      files() const;
  // string organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id() ;
  const std::string& organization_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_organization_id(Arg_&& arg, Args_... args);
  std::string* mutable_organization_id();
  PROTOBUF_NODISCARD std::string* release_organization_id();
  void set_allocated_organization_id(std::string* value);

  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(
      const std::string& value);
  std::string* _internal_mutable_organization_id();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string version = 3 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* value);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // optional string platform = 7 [json_name = "platform"];
  bool has_platform() const;
  void clear_platform() ;
  const std::string& platform() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_platform(Arg_&& arg, Args_... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* value);

  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(
      const std::string& value);
  std::string* _internal_mutable_platform();

  public:
  // .google.protobuf.Struct metadata = 6 [json_name = "metadata"];
  bool has_metadata() const;
  void clear_metadata() ;
  const ::google::protobuf::Struct& metadata() const;
  PROTOBUF_NODISCARD ::google::protobuf::Struct* release_metadata();
  ::google::protobuf::Struct* mutable_metadata();
  void set_allocated_metadata(::google::protobuf::Struct* value);
  void unsafe_arena_set_allocated_metadata(::google::protobuf::Struct* value);
  ::google::protobuf::Struct* unsafe_arena_release_metadata();

  private:
  const ::google::protobuf::Struct& _internal_metadata() const;
  ::google::protobuf::Struct* _internal_mutable_metadata();

  public:
  // .viam.app.packages.v1.PackageType type = 4 [json_name = "type"];
  void clear_type() ;
  ::viam::app::packages::v1::PackageType type() const;
  void set_type(::viam::app::packages::v1::PackageType value);

  private:
  ::viam::app::packages::v1::PackageType _internal_type() const;
  void _internal_set_type(::viam::app::packages::v1::PackageType value);

  public:
  // @@protoc_insertion_point(class_scope:viam.app.packages.v1.PackageInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      75, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::viam::app::packages::v1::FileInfo > files_;
    ::google::protobuf::internal::ArenaStringPtr organization_id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr version_;
    ::google::protobuf::internal::ArenaStringPtr platform_;
    ::google::protobuf::Struct* metadata_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpackages_2fv1_2fpackages_2eproto;
};// -------------------------------------------------------------------

class Package final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.packages.v1.Package) */ {
 public:
  inline Package() : Package(nullptr) {}
  ~Package() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Package(::google::protobuf::internal::ConstantInitialized);

  inline Package(const Package& from)
      : Package(nullptr, from) {}
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline Package& operator=(Package&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Package& default_instance() {
    return *internal_default_instance();
  }
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }
  inline void Swap(Package* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Package* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Package* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Package& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Package& from) {
    Package::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Package* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.packages.v1.Package";
  }
  protected:
  explicit Package(::google::protobuf::Arena* arena);
  Package(::google::protobuf::Arena* arena, const Package& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kChecksumFieldNumber = 4,
    kIdFieldNumber = 5,
    kInfoFieldNumber = 1,
    kCreatedOnFieldNumber = 3,
  };
  // string url = 2 [json_name = "url"];
  void clear_url() ;
  const std::string& url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_url(Arg_&& arg, Args_... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* value);

  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(
      const std::string& value);
  std::string* _internal_mutable_url();

  public:
  // string checksum = 4 [json_name = "checksum"];
  void clear_checksum() ;
  const std::string& checksum() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_checksum(Arg_&& arg, Args_... args);
  std::string* mutable_checksum();
  PROTOBUF_NODISCARD std::string* release_checksum();
  void set_allocated_checksum(std::string* value);

  private:
  const std::string& _internal_checksum() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checksum(
      const std::string& value);
  std::string* _internal_mutable_checksum();

  public:
  // string id = 5 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .viam.app.packages.v1.PackageInfo info = 1 [json_name = "info"];
  bool has_info() const;
  void clear_info() ;
  const ::viam::app::packages::v1::PackageInfo& info() const;
  PROTOBUF_NODISCARD ::viam::app::packages::v1::PackageInfo* release_info();
  ::viam::app::packages::v1::PackageInfo* mutable_info();
  void set_allocated_info(::viam::app::packages::v1::PackageInfo* value);
  void unsafe_arena_set_allocated_info(::viam::app::packages::v1::PackageInfo* value);
  ::viam::app::packages::v1::PackageInfo* unsafe_arena_release_info();

  private:
  const ::viam::app::packages::v1::PackageInfo& _internal_info() const;
  ::viam::app::packages::v1::PackageInfo* _internal_mutable_info();

  public:
  // .google.protobuf.Timestamp created_on = 3 [json_name = "createdOn"];
  bool has_created_on() const;
  void clear_created_on() ;
  const ::google::protobuf::Timestamp& created_on() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_on();
  ::google::protobuf::Timestamp* mutable_created_on();
  void set_allocated_created_on(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_on(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_on();

  private:
  const ::google::protobuf::Timestamp& _internal_created_on() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_on();

  public:
  // @@protoc_insertion_point(class_scope:viam.app.packages.v1.Package)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr url_;
    ::google::protobuf::internal::ArenaStringPtr checksum_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::viam::app::packages::v1::PackageInfo* info_;
    ::google::protobuf::Timestamp* created_on_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpackages_2fv1_2fpackages_2eproto;
};// -------------------------------------------------------------------

class CreatePackageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.packages.v1.CreatePackageRequest) */ {
 public:
  inline CreatePackageRequest() : CreatePackageRequest(nullptr) {}
  ~CreatePackageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreatePackageRequest(::google::protobuf::internal::ConstantInitialized);

  inline CreatePackageRequest(const CreatePackageRequest& from)
      : CreatePackageRequest(nullptr, from) {}
  CreatePackageRequest(CreatePackageRequest&& from) noexcept
    : CreatePackageRequest() {
    *this = ::std::move(from);
  }

  inline CreatePackageRequest& operator=(const CreatePackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePackageRequest& operator=(CreatePackageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePackageRequest& default_instance() {
    return *internal_default_instance();
  }
  enum PackageCase {
    kInfo = 1,
    kContents = 2,
    PACKAGE_NOT_SET = 0,
  };

  static inline const CreatePackageRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePackageRequest*>(
               &_CreatePackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreatePackageRequest& a, CreatePackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePackageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePackageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePackageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePackageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreatePackageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CreatePackageRequest& from) {
    CreatePackageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CreatePackageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.packages.v1.CreatePackageRequest";
  }
  protected:
  explicit CreatePackageRequest(::google::protobuf::Arena* arena);
  CreatePackageRequest(::google::protobuf::Arena* arena, const CreatePackageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kContentsFieldNumber = 2,
  };
  // .viam.app.packages.v1.PackageInfo info = 1 [json_name = "info"];
  bool has_info() const;
  private:
  bool _internal_has_info() const;

  public:
  void clear_info() ;
  const ::viam::app::packages::v1::PackageInfo& info() const;
  PROTOBUF_NODISCARD ::viam::app::packages::v1::PackageInfo* release_info();
  ::viam::app::packages::v1::PackageInfo* mutable_info();
  void set_allocated_info(::viam::app::packages::v1::PackageInfo* value);
  void unsafe_arena_set_allocated_info(::viam::app::packages::v1::PackageInfo* value);
  ::viam::app::packages::v1::PackageInfo* unsafe_arena_release_info();

  private:
  const ::viam::app::packages::v1::PackageInfo& _internal_info() const;
  ::viam::app::packages::v1::PackageInfo* _internal_mutable_info();

  public:
  // bytes contents = 2 [json_name = "contents"];
  bool has_contents() const;
  void clear_contents() ;
  const std::string& contents() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contents(Arg_&& arg, Args_... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* value);

  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(
      const std::string& value);
  std::string* _internal_mutable_contents();

  public:
  void clear_package();
  PackageCase package_case() const;
  // @@protoc_insertion_point(class_scope:viam.app.packages.v1.CreatePackageRequest)
 private:
  class _Internal;
  void set_has_info();
  void set_has_contents();

  inline bool has_package() const;
  inline void clear_has_package();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union PackageUnion {
      constexpr PackageUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::viam::app::packages::v1::PackageInfo* info_;
      ::google::protobuf::internal::ArenaStringPtr contents_;
    } package_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpackages_2fv1_2fpackages_2eproto;
};// -------------------------------------------------------------------

class ListPackagesResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.packages.v1.ListPackagesResponse) */ {
 public:
  inline ListPackagesResponse() : ListPackagesResponse(nullptr) {}
  ~ListPackagesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListPackagesResponse(::google::protobuf::internal::ConstantInitialized);

  inline ListPackagesResponse(const ListPackagesResponse& from)
      : ListPackagesResponse(nullptr, from) {}
  ListPackagesResponse(ListPackagesResponse&& from) noexcept
    : ListPackagesResponse() {
    *this = ::std::move(from);
  }

  inline ListPackagesResponse& operator=(const ListPackagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPackagesResponse& operator=(ListPackagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPackagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPackagesResponse* internal_default_instance() {
    return reinterpret_cast<const ListPackagesResponse*>(
               &_ListPackagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListPackagesResponse& a, ListPackagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPackagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPackagesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPackagesResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPackagesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListPackagesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListPackagesResponse& from) {
    ListPackagesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListPackagesResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.packages.v1.ListPackagesResponse";
  }
  protected:
  explicit ListPackagesResponse(::google::protobuf::Arena* arena);
  ListPackagesResponse(::google::protobuf::Arena* arena, const ListPackagesResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 1,
  };
  // repeated .viam.app.packages.v1.Package packages = 1 [json_name = "packages"];
  int packages_size() const;
  private:
  int _internal_packages_size() const;

  public:
  void clear_packages() ;
  ::viam::app::packages::v1::Package* mutable_packages(int index);
  ::google::protobuf::RepeatedPtrField< ::viam::app::packages::v1::Package >*
      mutable_packages();
  private:
  const ::google::protobuf::RepeatedPtrField<::viam::app::packages::v1::Package>& _internal_packages() const;
  ::google::protobuf::RepeatedPtrField<::viam::app::packages::v1::Package>* _internal_mutable_packages();
  public:
  const ::viam::app::packages::v1::Package& packages(int index) const;
  ::viam::app::packages::v1::Package* add_packages();
  const ::google::protobuf::RepeatedPtrField< ::viam::app::packages::v1::Package >&
      packages() const;
  // @@protoc_insertion_point(class_scope:viam.app.packages.v1.ListPackagesResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::viam::app::packages::v1::Package > packages_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpackages_2fv1_2fpackages_2eproto;
};// -------------------------------------------------------------------

class GetPackageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:viam.app.packages.v1.GetPackageResponse) */ {
 public:
  inline GetPackageResponse() : GetPackageResponse(nullptr) {}
  ~GetPackageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetPackageResponse(::google::protobuf::internal::ConstantInitialized);

  inline GetPackageResponse(const GetPackageResponse& from)
      : GetPackageResponse(nullptr, from) {}
  GetPackageResponse(GetPackageResponse&& from) noexcept
    : GetPackageResponse() {
    *this = ::std::move(from);
  }

  inline GetPackageResponse& operator=(const GetPackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPackageResponse& operator=(GetPackageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPackageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPackageResponse* internal_default_instance() {
    return reinterpret_cast<const GetPackageResponse*>(
               &_GetPackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetPackageResponse& a, GetPackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPackageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPackageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPackageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPackageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetPackageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetPackageResponse& from) {
    GetPackageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetPackageResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "viam.app.packages.v1.GetPackageResponse";
  }
  protected:
  explicit GetPackageResponse(::google::protobuf::Arena* arena);
  GetPackageResponse(::google::protobuf::Arena* arena, const GetPackageResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
  };
  // .viam.app.packages.v1.Package package = 1 [json_name = "package"];
  bool has_package() const;
  void clear_package() ;
  const ::viam::app::packages::v1::Package& package() const;
  PROTOBUF_NODISCARD ::viam::app::packages::v1::Package* release_package();
  ::viam::app::packages::v1::Package* mutable_package();
  void set_allocated_package(::viam::app::packages::v1::Package* value);
  void unsafe_arena_set_allocated_package(::viam::app::packages::v1::Package* value);
  ::viam::app::packages::v1::Package* unsafe_arena_release_package();

  private:
  const ::viam::app::packages::v1::Package& _internal_package() const;
  ::viam::app::packages::v1::Package* _internal_mutable_package();

  public:
  // @@protoc_insertion_point(class_scope:viam.app.packages.v1.GetPackageResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::viam::app::packages::v1::Package* package_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_app_2fpackages_2fv1_2fpackages_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FileInfo

// string name = 1 [json_name = "name"];
inline void FileInfo::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& FileInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.FileInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FileInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.FileInfo.name)
}
inline std::string* FileInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.FileInfo.name)
  return _s;
}
inline const std::string& FileInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void FileInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* FileInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* FileInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.FileInfo.name)
  return _impl_.name_.Release();
}
inline void FileInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.FileInfo.name)
}

// uint64 size = 2 [json_name = "size"];
inline void FileInfo::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.size_ = ::uint64_t{0u};
}
inline ::uint64_t FileInfo::size() const {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.FileInfo.size)
  return _internal_size();
}
inline void FileInfo::set_size(::uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.FileInfo.size)
}
inline ::uint64_t FileInfo::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.size_;
}
inline void FileInfo::_internal_set_size(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.size_ = value;
}

// optional bool is_directory = 3 [json_name = "isDirectory"];
inline bool FileInfo::has_is_directory() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FileInfo::clear_is_directory() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_directory_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool FileInfo::is_directory() const {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.FileInfo.is_directory)
  return _internal_is_directory();
}
inline void FileInfo::set_is_directory(bool value) {
  _internal_set_is_directory(value);
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.FileInfo.is_directory)
}
inline bool FileInfo::_internal_is_directory() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_directory_;
}
inline void FileInfo::_internal_set_is_directory(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.is_directory_ = value;
}

// -------------------------------------------------------------------

// PackageInfo

// string organization_id = 1 [json_name = "organizationId"];
inline void PackageInfo::clear_organization_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.organization_id_.ClearToEmpty();
}
inline const std::string& PackageInfo::organization_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.PackageInfo.organization_id)
  return _internal_organization_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PackageInfo::set_organization_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.organization_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.PackageInfo.organization_id)
}
inline std::string* PackageInfo::mutable_organization_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.PackageInfo.organization_id)
  return _s;
}
inline const std::string& PackageInfo::_internal_organization_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.organization_id_.Get();
}
inline void PackageInfo::_internal_set_organization_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.organization_id_.Set(value, GetArena());
}
inline std::string* PackageInfo::_internal_mutable_organization_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.organization_id_.Mutable( GetArena());
}
inline std::string* PackageInfo::release_organization_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.PackageInfo.organization_id)
  return _impl_.organization_id_.Release();
}
inline void PackageInfo::set_allocated_organization_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.organization_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.organization_id_.IsDefault()) {
          _impl_.organization_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.PackageInfo.organization_id)
}

// string name = 2 [json_name = "name"];
inline void PackageInfo::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& PackageInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.PackageInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PackageInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.PackageInfo.name)
}
inline std::string* PackageInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.PackageInfo.name)
  return _s;
}
inline const std::string& PackageInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void PackageInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* PackageInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* PackageInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.PackageInfo.name)
  return _impl_.name_.Release();
}
inline void PackageInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.PackageInfo.name)
}

// string version = 3 [json_name = "version"];
inline void PackageInfo::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& PackageInfo::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.PackageInfo.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PackageInfo::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.PackageInfo.version)
}
inline std::string* PackageInfo::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.PackageInfo.version)
  return _s;
}
inline const std::string& PackageInfo::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void PackageInfo::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* PackageInfo::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* PackageInfo::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.PackageInfo.version)
  return _impl_.version_.Release();
}
inline void PackageInfo::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.PackageInfo.version)
}

// .viam.app.packages.v1.PackageType type = 4 [json_name = "type"];
inline void PackageInfo::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::viam::app::packages::v1::PackageType PackageInfo::type() const {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.PackageInfo.type)
  return _internal_type();
}
inline void PackageInfo::set_type(::viam::app::packages::v1::PackageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.PackageInfo.type)
}
inline ::viam::app::packages::v1::PackageType PackageInfo::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::viam::app::packages::v1::PackageType>(_impl_.type_);
}
inline void PackageInfo::_internal_set_type(::viam::app::packages::v1::PackageType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// optional string platform = 7 [json_name = "platform"];
inline bool PackageInfo::has_platform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PackageInfo::clear_platform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.platform_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PackageInfo::platform() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.PackageInfo.platform)
  return _internal_platform();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PackageInfo::set_platform(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.platform_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.PackageInfo.platform)
}
inline std::string* PackageInfo::mutable_platform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.PackageInfo.platform)
  return _s;
}
inline const std::string& PackageInfo::_internal_platform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.platform_.Get();
}
inline void PackageInfo::_internal_set_platform(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.platform_.Set(value, GetArena());
}
inline std::string* PackageInfo::_internal_mutable_platform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.platform_.Mutable( GetArena());
}
inline std::string* PackageInfo::release_platform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.PackageInfo.platform)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.platform_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.platform_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PackageInfo::set_allocated_platform(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.platform_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.platform_.IsDefault()) {
          _impl_.platform_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.PackageInfo.platform)
}

// repeated .viam.app.packages.v1.FileInfo files = 5 [json_name = "files"];
inline int PackageInfo::_internal_files_size() const {
  return _internal_files().size();
}
inline int PackageInfo::files_size() const {
  return _internal_files_size();
}
inline void PackageInfo::clear_files() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.files_.Clear();
}
inline ::viam::app::packages::v1::FileInfo* PackageInfo::mutable_files(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.PackageInfo.files)
  return _internal_mutable_files()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::viam::app::packages::v1::FileInfo>* PackageInfo::mutable_files()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.app.packages.v1.PackageInfo.files)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_files();
}
inline const ::viam::app::packages::v1::FileInfo& PackageInfo::files(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.PackageInfo.files)
  return _internal_files().Get(index);
}
inline ::viam::app::packages::v1::FileInfo* PackageInfo::add_files() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::viam::app::packages::v1::FileInfo* _add = _internal_mutable_files()->Add();
  // @@protoc_insertion_point(field_add:viam.app.packages.v1.PackageInfo.files)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::viam::app::packages::v1::FileInfo>& PackageInfo::files() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.app.packages.v1.PackageInfo.files)
  return _internal_files();
}
inline const ::google::protobuf::RepeatedPtrField<::viam::app::packages::v1::FileInfo>&
PackageInfo::_internal_files() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.files_;
}
inline ::google::protobuf::RepeatedPtrField<::viam::app::packages::v1::FileInfo>*
PackageInfo::_internal_mutable_files() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.files_;
}

// .google.protobuf.Struct metadata = 6 [json_name = "metadata"];
inline bool PackageInfo::has_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.metadata_ != nullptr);
  return value;
}
inline const ::google::protobuf::Struct& PackageInfo::_internal_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Struct* p = _impl_.metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Struct&>(::google::protobuf::_Struct_default_instance_);
}
inline const ::google::protobuf::Struct& PackageInfo::metadata() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.PackageInfo.metadata)
  return _internal_metadata();
}
inline void PackageInfo::unsafe_arena_set_allocated_metadata(::google::protobuf::Struct* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }
  _impl_.metadata_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.packages.v1.PackageInfo.metadata)
}
inline ::google::protobuf::Struct* PackageInfo::release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Struct* released = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Struct* PackageInfo::unsafe_arena_release_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.PackageInfo.metadata)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Struct* temp = _impl_.metadata_;
  _impl_.metadata_ = nullptr;
  return temp;
}
inline ::google::protobuf::Struct* PackageInfo::_internal_mutable_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Struct>(GetArena());
    _impl_.metadata_ = reinterpret_cast<::google::protobuf::Struct*>(p);
  }
  return _impl_.metadata_;
}
inline ::google::protobuf::Struct* PackageInfo::mutable_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Struct* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.PackageInfo.metadata)
  return _msg;
}
inline void PackageInfo::set_allocated_metadata(::google::protobuf::Struct* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.metadata_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.metadata_ = reinterpret_cast<::google::protobuf::Struct*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.PackageInfo.metadata)
}

// -------------------------------------------------------------------

// CreatePackageRequest

// .viam.app.packages.v1.PackageInfo info = 1 [json_name = "info"];
inline bool CreatePackageRequest::has_info() const {
  return package_case() == kInfo;
}
inline bool CreatePackageRequest::_internal_has_info() const {
  return package_case() == kInfo;
}
inline void CreatePackageRequest::set_has_info() {
  _impl_._oneof_case_[0] = kInfo;
}
inline void CreatePackageRequest::clear_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (package_case() == kInfo) {
    if (GetArena() == nullptr) {
      delete _impl_.package_.info_;
    }
    clear_has_package();
  }
}
inline ::viam::app::packages::v1::PackageInfo* CreatePackageRequest::release_info() {
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.CreatePackageRequest.info)
  if (package_case() == kInfo) {
    clear_has_package();
    auto* temp = _impl_.package_.info_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.package_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::app::packages::v1::PackageInfo& CreatePackageRequest::_internal_info() const {
  return package_case() == kInfo ? *_impl_.package_.info_ : reinterpret_cast<::viam::app::packages::v1::PackageInfo&>(::viam::app::packages::v1::_PackageInfo_default_instance_);
}
inline const ::viam::app::packages::v1::PackageInfo& CreatePackageRequest::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.CreatePackageRequest.info)
  return _internal_info();
}
inline ::viam::app::packages::v1::PackageInfo* CreatePackageRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.app.packages.v1.CreatePackageRequest.info)
  if (package_case() == kInfo) {
    clear_has_package();
    auto* temp = _impl_.package_.info_;
    _impl_.package_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreatePackageRequest::unsafe_arena_set_allocated_info(::viam::app::packages::v1::PackageInfo* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_package();
  if (value) {
    set_has_info();
    _impl_.package_.info_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.packages.v1.CreatePackageRequest.info)
}
inline ::viam::app::packages::v1::PackageInfo* CreatePackageRequest::_internal_mutable_info() {
  if (package_case() != kInfo) {
    clear_package();
    set_has_info();
    _impl_.package_.info_ = CreateMaybeMessage<::viam::app::packages::v1::PackageInfo>(GetArena());
  }
  return _impl_.package_.info_;
}
inline ::viam::app::packages::v1::PackageInfo* CreatePackageRequest::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::viam::app::packages::v1::PackageInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.CreatePackageRequest.info)
  return _msg;
}

// bytes contents = 2 [json_name = "contents"];
inline bool CreatePackageRequest::has_contents() const {
  return package_case() == kContents;
}
inline void CreatePackageRequest::set_has_contents() {
  _impl_._oneof_case_[0] = kContents;
}
inline void CreatePackageRequest::clear_contents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (package_case() == kContents) {
    _impl_.package_.contents_.Destroy();
    clear_has_package();
  }
}
inline const std::string& CreatePackageRequest::contents() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.CreatePackageRequest.contents)
  return _internal_contents();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreatePackageRequest::set_contents(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (package_case() != kContents) {
    clear_package();

    set_has_contents();
    _impl_.package_.contents_.InitDefault();
  }
  _impl_.package_.contents_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.CreatePackageRequest.contents)
}
inline std::string* CreatePackageRequest::mutable_contents() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.CreatePackageRequest.contents)
  return _s;
}
inline const std::string& CreatePackageRequest::_internal_contents() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (package_case() != kContents) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.package_.contents_.Get();
}
inline void CreatePackageRequest::_internal_set_contents(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (package_case() != kContents) {
    clear_package();

    set_has_contents();
    _impl_.package_.contents_.InitDefault();
  }
  _impl_.package_.contents_.Set(value, GetArena());
}
inline std::string* CreatePackageRequest::_internal_mutable_contents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (package_case() != kContents) {
    clear_package();

    set_has_contents();
    _impl_.package_.contents_.InitDefault();
  }
  return _impl_.package_.contents_.Mutable( GetArena());
}
inline std::string* CreatePackageRequest::release_contents() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.CreatePackageRequest.contents)
  if (package_case() != kContents) {
    return nullptr;
  }
  clear_has_package();
  return _impl_.package_.contents_.Release();
}
inline void CreatePackageRequest::set_allocated_contents(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_package()) {
    clear_package();
  }
  if (value != nullptr) {
    set_has_contents();
    _impl_.package_.contents_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.CreatePackageRequest.contents)
}

inline bool CreatePackageRequest::has_package() const {
  return package_case() != PACKAGE_NOT_SET;
}
inline void CreatePackageRequest::clear_has_package() {
  _impl_._oneof_case_[0] = PACKAGE_NOT_SET;
}
inline CreatePackageRequest::PackageCase CreatePackageRequest::package_case() const {
  return CreatePackageRequest::PackageCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreatePackageResponse

// string id = 1 [json_name = "id"];
inline void CreatePackageResponse::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& CreatePackageResponse::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.CreatePackageResponse.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreatePackageResponse::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.CreatePackageResponse.id)
}
inline std::string* CreatePackageResponse::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.CreatePackageResponse.id)
  return _s;
}
inline const std::string& CreatePackageResponse::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void CreatePackageResponse::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* CreatePackageResponse::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* CreatePackageResponse::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.CreatePackageResponse.id)
  return _impl_.id_.Release();
}
inline void CreatePackageResponse::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.CreatePackageResponse.id)
}

// string version = 2 [json_name = "version"];
inline void CreatePackageResponse::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& CreatePackageResponse::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.CreatePackageResponse.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreatePackageResponse::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.CreatePackageResponse.version)
}
inline std::string* CreatePackageResponse::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.CreatePackageResponse.version)
  return _s;
}
inline const std::string& CreatePackageResponse::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void CreatePackageResponse::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* CreatePackageResponse::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* CreatePackageResponse::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.CreatePackageResponse.version)
  return _impl_.version_.Release();
}
inline void CreatePackageResponse::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.CreatePackageResponse.version)
}

// -------------------------------------------------------------------

// DeletePackageRequest

// string id = 1 [json_name = "id"];
inline void DeletePackageRequest::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& DeletePackageRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.DeletePackageRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeletePackageRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.DeletePackageRequest.id)
}
inline std::string* DeletePackageRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.DeletePackageRequest.id)
  return _s;
}
inline const std::string& DeletePackageRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void DeletePackageRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* DeletePackageRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* DeletePackageRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.DeletePackageRequest.id)
  return _impl_.id_.Release();
}
inline void DeletePackageRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.DeletePackageRequest.id)
}

// string version = 2 [json_name = "version"];
inline void DeletePackageRequest::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& DeletePackageRequest::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.DeletePackageRequest.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeletePackageRequest::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.DeletePackageRequest.version)
}
inline std::string* DeletePackageRequest::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.DeletePackageRequest.version)
  return _s;
}
inline const std::string& DeletePackageRequest::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void DeletePackageRequest::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* DeletePackageRequest::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* DeletePackageRequest::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.DeletePackageRequest.version)
  return _impl_.version_.Release();
}
inline void DeletePackageRequest::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.DeletePackageRequest.version)
}

// .viam.app.packages.v1.PackageType type = 3 [json_name = "type"];
inline void DeletePackageRequest::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::viam::app::packages::v1::PackageType DeletePackageRequest::type() const {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.DeletePackageRequest.type)
  return _internal_type();
}
inline void DeletePackageRequest::set_type(::viam::app::packages::v1::PackageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.DeletePackageRequest.type)
}
inline ::viam::app::packages::v1::PackageType DeletePackageRequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::viam::app::packages::v1::PackageType>(_impl_.type_);
}
inline void DeletePackageRequest::_internal_set_type(::viam::app::packages::v1::PackageType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// DeletePackageResponse

// -------------------------------------------------------------------

// Package

// .viam.app.packages.v1.PackageInfo info = 1 [json_name = "info"];
inline bool Package::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void Package::clear_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::viam::app::packages::v1::PackageInfo& Package::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::viam::app::packages::v1::PackageInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::packages::v1::PackageInfo&>(::viam::app::packages::v1::_PackageInfo_default_instance_);
}
inline const ::viam::app::packages::v1::PackageInfo& Package::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.Package.info)
  return _internal_info();
}
inline void Package::unsafe_arena_set_allocated_info(::viam::app::packages::v1::PackageInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::viam::app::packages::v1::PackageInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.packages.v1.Package.info)
}
inline ::viam::app::packages::v1::PackageInfo* Package::release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::app::packages::v1::PackageInfo* released = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::viam::app::packages::v1::PackageInfo* Package::unsafe_arena_release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.Package.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::app::packages::v1::PackageInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::viam::app::packages::v1::PackageInfo* Package::_internal_mutable_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::packages::v1::PackageInfo>(GetArena());
    _impl_.info_ = reinterpret_cast<::viam::app::packages::v1::PackageInfo*>(p);
  }
  return _impl_.info_;
}
inline ::viam::app::packages::v1::PackageInfo* Package::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::viam::app::packages::v1::PackageInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.Package.info)
  return _msg;
}
inline void Package::set_allocated_info(::viam::app::packages::v1::PackageInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::viam::app::packages::v1::PackageInfo*>(_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::viam::app::packages::v1::PackageInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::viam::app::packages::v1::PackageInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.Package.info)
}

// string url = 2 [json_name = "url"];
inline void Package::clear_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.ClearToEmpty();
}
inline const std::string& Package::url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.Package.url)
  return _internal_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Package::set_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.Package.url)
}
inline std::string* Package::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.Package.url)
  return _s;
}
inline const std::string& Package::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.url_.Get();
}
inline void Package::_internal_set_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.url_.Set(value, GetArena());
}
inline std::string* Package::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.url_.Mutable( GetArena());
}
inline std::string* Package::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.Package.url)
  return _impl_.url_.Release();
}
inline void Package::set_allocated_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.url_.IsDefault()) {
          _impl_.url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.Package.url)
}

// .google.protobuf.Timestamp created_on = 3 [json_name = "createdOn"];
inline bool Package::has_created_on() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_on_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Package::_internal_created_on() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.created_on_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Package::created_on() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.Package.created_on)
  return _internal_created_on();
}
inline void Package::unsafe_arena_set_allocated_created_on(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_on_);
  }
  _impl_.created_on_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.packages.v1.Package.created_on)
}
inline ::google::protobuf::Timestamp* Package::release_created_on() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.created_on_;
  _impl_.created_on_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* Package::unsafe_arena_release_created_on() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.Package.created_on)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.created_on_;
  _impl_.created_on_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Package::_internal_mutable_created_on() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.created_on_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.created_on_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_on_;
}
inline ::google::protobuf::Timestamp* Package::mutable_created_on() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_on();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.Package.created_on)
  return _msg;
}
inline void Package::set_allocated_created_on(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_on_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.created_on_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.Package.created_on)
}

// string checksum = 4 [json_name = "checksum"];
inline void Package::clear_checksum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.checksum_.ClearToEmpty();
}
inline const std::string& Package::checksum() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.Package.checksum)
  return _internal_checksum();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Package::set_checksum(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.checksum_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.Package.checksum)
}
inline std::string* Package::mutable_checksum() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_checksum();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.Package.checksum)
  return _s;
}
inline const std::string& Package::_internal_checksum() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.checksum_.Get();
}
inline void Package::_internal_set_checksum(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.checksum_.Set(value, GetArena());
}
inline std::string* Package::_internal_mutable_checksum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.checksum_.Mutable( GetArena());
}
inline std::string* Package::release_checksum() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.Package.checksum)
  return _impl_.checksum_.Release();
}
inline void Package::set_allocated_checksum(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.checksum_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.checksum_.IsDefault()) {
          _impl_.checksum_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.Package.checksum)
}

// string id = 5 [json_name = "id"];
inline void Package::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Package::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.Package.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Package::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.Package.id)
}
inline std::string* Package::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.Package.id)
  return _s;
}
inline const std::string& Package::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void Package::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Package::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Package::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.Package.id)
  return _impl_.id_.Release();
}
inline void Package::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.Package.id)
}

// -------------------------------------------------------------------

// GetPackageRequest

// string id = 1 [json_name = "id"];
inline void GetPackageRequest::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& GetPackageRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.GetPackageRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPackageRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.GetPackageRequest.id)
}
inline std::string* GetPackageRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.GetPackageRequest.id)
  return _s;
}
inline const std::string& GetPackageRequest::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void GetPackageRequest::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* GetPackageRequest::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* GetPackageRequest::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.GetPackageRequest.id)
  return _impl_.id_.Release();
}
inline void GetPackageRequest::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.GetPackageRequest.id)
}

// string version = 2 [json_name = "version"];
inline void GetPackageRequest::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
}
inline const std::string& GetPackageRequest::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.GetPackageRequest.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPackageRequest::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.GetPackageRequest.version)
}
inline std::string* GetPackageRequest::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.GetPackageRequest.version)
  return _s;
}
inline const std::string& GetPackageRequest::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void GetPackageRequest::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* GetPackageRequest::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* GetPackageRequest::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.GetPackageRequest.version)
  return _impl_.version_.Release();
}
inline void GetPackageRequest::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.GetPackageRequest.version)
}

// optional bool include_url = 3 [json_name = "includeUrl"];
inline bool GetPackageRequest::has_include_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GetPackageRequest::clear_include_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.include_url_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool GetPackageRequest::include_url() const {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.GetPackageRequest.include_url)
  return _internal_include_url();
}
inline void GetPackageRequest::set_include_url(bool value) {
  _internal_set_include_url(value);
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.GetPackageRequest.include_url)
}
inline bool GetPackageRequest::_internal_include_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.include_url_;
}
inline void GetPackageRequest::_internal_set_include_url(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.include_url_ = value;
}

// optional .viam.app.packages.v1.PackageType type = 4 [json_name = "type"];
inline bool GetPackageRequest::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GetPackageRequest::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::viam::app::packages::v1::PackageType GetPackageRequest::type() const {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.GetPackageRequest.type)
  return _internal_type();
}
inline void GetPackageRequest::set_type(::viam::app::packages::v1::PackageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.GetPackageRequest.type)
}
inline ::viam::app::packages::v1::PackageType GetPackageRequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::viam::app::packages::v1::PackageType>(_impl_.type_);
}
inline void GetPackageRequest::_internal_set_type(::viam::app::packages::v1::PackageType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}

// optional string platform = 5 [json_name = "platform"];
inline bool GetPackageRequest::has_platform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetPackageRequest::clear_platform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.platform_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetPackageRequest::platform() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.GetPackageRequest.platform)
  return _internal_platform();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetPackageRequest::set_platform(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.platform_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.GetPackageRequest.platform)
}
inline std::string* GetPackageRequest::mutable_platform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.GetPackageRequest.platform)
  return _s;
}
inline const std::string& GetPackageRequest::_internal_platform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.platform_.Get();
}
inline void GetPackageRequest::_internal_set_platform(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.platform_.Set(value, GetArena());
}
inline std::string* GetPackageRequest::_internal_mutable_platform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.platform_.Mutable( GetArena());
}
inline std::string* GetPackageRequest::release_platform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.GetPackageRequest.platform)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.platform_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.platform_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GetPackageRequest::set_allocated_platform(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.platform_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.platform_.IsDefault()) {
          _impl_.platform_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.GetPackageRequest.platform)
}

// -------------------------------------------------------------------

// GetPackageResponse

// .viam.app.packages.v1.Package package = 1 [json_name = "package"];
inline bool GetPackageResponse::has_package() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.package_ != nullptr);
  return value;
}
inline void GetPackageResponse::clear_package() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.package_ != nullptr) _impl_.package_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::viam::app::packages::v1::Package& GetPackageResponse::_internal_package() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::viam::app::packages::v1::Package* p = _impl_.package_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::packages::v1::Package&>(::viam::app::packages::v1::_Package_default_instance_);
}
inline const ::viam::app::packages::v1::Package& GetPackageResponse::package() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.GetPackageResponse.package)
  return _internal_package();
}
inline void GetPackageResponse::unsafe_arena_set_allocated_package(::viam::app::packages::v1::Package* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.package_);
  }
  _impl_.package_ = reinterpret_cast<::viam::app::packages::v1::Package*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.packages.v1.GetPackageResponse.package)
}
inline ::viam::app::packages::v1::Package* GetPackageResponse::release_package() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::app::packages::v1::Package* released = _impl_.package_;
  _impl_.package_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::viam::app::packages::v1::Package* GetPackageResponse::unsafe_arena_release_package() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.GetPackageResponse.package)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::app::packages::v1::Package* temp = _impl_.package_;
  _impl_.package_ = nullptr;
  return temp;
}
inline ::viam::app::packages::v1::Package* GetPackageResponse::_internal_mutable_package() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.package_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::packages::v1::Package>(GetArena());
    _impl_.package_ = reinterpret_cast<::viam::app::packages::v1::Package*>(p);
  }
  return _impl_.package_;
}
inline ::viam::app::packages::v1::Package* GetPackageResponse::mutable_package() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::viam::app::packages::v1::Package* _msg = _internal_mutable_package();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.GetPackageResponse.package)
  return _msg;
}
inline void GetPackageResponse::set_allocated_package(::viam::app::packages::v1::Package* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::viam::app::packages::v1::Package*>(_impl_.package_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::viam::app::packages::v1::Package*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.package_ = reinterpret_cast<::viam::app::packages::v1::Package*>(value);
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.GetPackageResponse.package)
}

// -------------------------------------------------------------------

// ListPackagesRequest

// string organization_id = 1 [json_name = "organizationId"];
inline void ListPackagesRequest::clear_organization_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.organization_id_.ClearToEmpty();
}
inline const std::string& ListPackagesRequest::organization_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.ListPackagesRequest.organization_id)
  return _internal_organization_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListPackagesRequest::set_organization_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.organization_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.ListPackagesRequest.organization_id)
}
inline std::string* ListPackagesRequest::mutable_organization_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.ListPackagesRequest.organization_id)
  return _s;
}
inline const std::string& ListPackagesRequest::_internal_organization_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.organization_id_.Get();
}
inline void ListPackagesRequest::_internal_set_organization_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.organization_id_.Set(value, GetArena());
}
inline std::string* ListPackagesRequest::_internal_mutable_organization_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.organization_id_.Mutable( GetArena());
}
inline std::string* ListPackagesRequest::release_organization_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.ListPackagesRequest.organization_id)
  return _impl_.organization_id_.Release();
}
inline void ListPackagesRequest::set_allocated_organization_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.organization_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.organization_id_.IsDefault()) {
          _impl_.organization_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.ListPackagesRequest.organization_id)
}

// optional string name = 2 [json_name = "name"];
inline bool ListPackagesRequest::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ListPackagesRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListPackagesRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.ListPackagesRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListPackagesRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.ListPackagesRequest.name)
}
inline std::string* ListPackagesRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.ListPackagesRequest.name)
  return _s;
}
inline const std::string& ListPackagesRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ListPackagesRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ListPackagesRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ListPackagesRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.ListPackagesRequest.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ListPackagesRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.ListPackagesRequest.name)
}

// optional string version = 3 [json_name = "version"];
inline bool ListPackagesRequest::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ListPackagesRequest::clear_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ListPackagesRequest::version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.ListPackagesRequest.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListPackagesRequest::set_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.ListPackagesRequest.version)
}
inline std::string* ListPackagesRequest::mutable_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.ListPackagesRequest.version)
  return _s;
}
inline const std::string& ListPackagesRequest::_internal_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.version_.Get();
}
inline void ListPackagesRequest::_internal_set_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_.Set(value, GetArena());
}
inline std::string* ListPackagesRequest::_internal_mutable_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.version_.Mutable( GetArena());
}
inline std::string* ListPackagesRequest::release_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:viam.app.packages.v1.ListPackagesRequest.version)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.version_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ListPackagesRequest::set_allocated_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.packages.v1.ListPackagesRequest.version)
}

// optional .viam.app.packages.v1.PackageType type = 4 [json_name = "type"];
inline bool ListPackagesRequest::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ListPackagesRequest::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::viam::app::packages::v1::PackageType ListPackagesRequest::type() const {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.ListPackagesRequest.type)
  return _internal_type();
}
inline void ListPackagesRequest::set_type(::viam::app::packages::v1::PackageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.ListPackagesRequest.type)
}
inline ::viam::app::packages::v1::PackageType ListPackagesRequest::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::viam::app::packages::v1::PackageType>(_impl_.type_);
}
inline void ListPackagesRequest::_internal_set_type(::viam::app::packages::v1::PackageType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}

// optional bool include_url = 5 [json_name = "includeUrl"];
inline bool ListPackagesRequest::has_include_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ListPackagesRequest::clear_include_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.include_url_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ListPackagesRequest::include_url() const {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.ListPackagesRequest.include_url)
  return _internal_include_url();
}
inline void ListPackagesRequest::set_include_url(bool value) {
  _internal_set_include_url(value);
  // @@protoc_insertion_point(field_set:viam.app.packages.v1.ListPackagesRequest.include_url)
}
inline bool ListPackagesRequest::_internal_include_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.include_url_;
}
inline void ListPackagesRequest::_internal_set_include_url(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.include_url_ = value;
}

// -------------------------------------------------------------------

// ListPackagesResponse

// repeated .viam.app.packages.v1.Package packages = 1 [json_name = "packages"];
inline int ListPackagesResponse::_internal_packages_size() const {
  return _internal_packages().size();
}
inline int ListPackagesResponse::packages_size() const {
  return _internal_packages_size();
}
inline void ListPackagesResponse::clear_packages() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.packages_.Clear();
}
inline ::viam::app::packages::v1::Package* ListPackagesResponse::mutable_packages(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:viam.app.packages.v1.ListPackagesResponse.packages)
  return _internal_mutable_packages()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::viam::app::packages::v1::Package>* ListPackagesResponse::mutable_packages()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:viam.app.packages.v1.ListPackagesResponse.packages)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_packages();
}
inline const ::viam::app::packages::v1::Package& ListPackagesResponse::packages(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:viam.app.packages.v1.ListPackagesResponse.packages)
  return _internal_packages().Get(index);
}
inline ::viam::app::packages::v1::Package* ListPackagesResponse::add_packages() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::viam::app::packages::v1::Package* _add = _internal_mutable_packages()->Add();
  // @@protoc_insertion_point(field_add:viam.app.packages.v1.ListPackagesResponse.packages)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::viam::app::packages::v1::Package>& ListPackagesResponse::packages() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:viam.app.packages.v1.ListPackagesResponse.packages)
  return _internal_packages();
}
inline const ::google::protobuf::RepeatedPtrField<::viam::app::packages::v1::Package>&
ListPackagesResponse::_internal_packages() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.packages_;
}
inline ::google::protobuf::RepeatedPtrField<::viam::app::packages::v1::Package>*
ListPackagesResponse::_internal_mutable_packages() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.packages_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace packages
}  // namespace app
}  // namespace viam


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::viam::app::packages::v1::PackageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::viam::app::packages::v1::PackageType>() {
  return ::viam::app::packages::v1::PackageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_app_2fpackages_2fv1_2fpackages_2eproto_2epb_2eh
