// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/rpc/webrtc/v1/grpc.proto

#include "proto/rpc/webrtc/v1/grpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
namespace rpc {
namespace webrtc {
namespace v1 {
PROTOBUF_CONSTEXPR PacketMessage::PacketMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eom_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketMessageDefaultTypeInternal() {}
  union {
    PacketMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketMessageDefaultTypeInternal _PacketMessage_default_instance_;
PROTOBUF_CONSTEXPR Stream::Stream(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDefaultTypeInternal() {}
  union {
    Stream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDefaultTypeInternal _Stream_default_instance_;
PROTOBUF_CONSTEXPR Request::Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestDefaultTypeInternal _Request_default_instance_;
PROTOBUF_CONSTEXPR RequestHeaders::RequestHeaders(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.timeout_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestHeadersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestHeadersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestHeadersDefaultTypeInternal() {}
  union {
    RequestHeaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestHeadersDefaultTypeInternal _RequestHeaders_default_instance_;
PROTOBUF_CONSTEXPR RequestMessage::RequestMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packet_message_)*/nullptr
  , /*decltype(_impl_.has_message_)*/false
  , /*decltype(_impl_.eos_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestMessageDefaultTypeInternal() {}
  union {
    RequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestMessageDefaultTypeInternal _RequestMessage_default_instance_;
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stream_)*/nullptr
  , /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_CONSTEXPR ResponseHeaders::ResponseHeaders(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseHeadersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseHeadersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseHeadersDefaultTypeInternal() {}
  union {
    ResponseHeaders _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseHeadersDefaultTypeInternal _ResponseHeaders_default_instance_;
PROTOBUF_CONSTEXPR ResponseMessage::ResponseMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packet_message_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseMessageDefaultTypeInternal() {}
  union {
    ResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseMessageDefaultTypeInternal _ResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR ResponseTrailers::ResponseTrailers(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseTrailersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseTrailersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseTrailersDefaultTypeInternal() {}
  union {
    ResponseTrailers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseTrailersDefaultTypeInternal _ResponseTrailers_default_instance_;
PROTOBUF_CONSTEXPR Strings::Strings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringsDefaultTypeInternal() {}
  union {
    Strings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringsDefaultTypeInternal _Strings_default_instance_;
PROTOBUF_CONSTEXPR Metadata_MdEntry_DoNotUse::Metadata_MdEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Metadata_MdEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Metadata_MdEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Metadata_MdEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Metadata_MdEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Metadata_MdEntry_DoNotUseDefaultTypeInternal _Metadata_MdEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Metadata::Metadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.md_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataDefaultTypeInternal _Metadata_default_instance_;
}  // namespace v1
}  // namespace webrtc
}  // namespace rpc
}  // namespace proto
static ::_pb::Metadata file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto = nullptr;

const uint32_t TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::PacketMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::PacketMessage, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::PacketMessage, _impl_.eom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Stream, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Request, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Request, _impl_.stream_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Request, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::RequestHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::RequestHeaders, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::RequestHeaders, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::RequestHeaders, _impl_.timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::RequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::RequestMessage, _impl_.has_message_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::RequestMessage, _impl_.packet_message_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::RequestMessage, _impl_.eos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Response, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Response, _impl_.stream_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Response, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ResponseHeaders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ResponseHeaders, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ResponseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ResponseMessage, _impl_.packet_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ResponseTrailers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ResponseTrailers, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ResponseTrailers, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Strings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Strings, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Metadata_MdEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Metadata_MdEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Metadata_MdEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Metadata_MdEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Metadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::Metadata, _impl_.md_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::rpc::webrtc::v1::PacketMessage)},
  { 8, -1, -1, sizeof(::proto::rpc::webrtc::v1::Stream)},
  { 15, -1, -1, sizeof(::proto::rpc::webrtc::v1::Request)},
  { 26, -1, -1, sizeof(::proto::rpc::webrtc::v1::RequestHeaders)},
  { 35, -1, -1, sizeof(::proto::rpc::webrtc::v1::RequestMessage)},
  { 44, -1, -1, sizeof(::proto::rpc::webrtc::v1::Response)},
  { 55, -1, -1, sizeof(::proto::rpc::webrtc::v1::ResponseHeaders)},
  { 62, -1, -1, sizeof(::proto::rpc::webrtc::v1::ResponseMessage)},
  { 69, -1, -1, sizeof(::proto::rpc::webrtc::v1::ResponseTrailers)},
  { 77, -1, -1, sizeof(::proto::rpc::webrtc::v1::Strings)},
  { 84, 92, -1, sizeof(::proto::rpc::webrtc::v1::Metadata_MdEntry_DoNotUse)},
  { 94, -1, -1, sizeof(::proto::rpc::webrtc::v1::Metadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::rpc::webrtc::v1::_PacketMessage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_Stream_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_Request_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_RequestHeaders_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_RequestMessage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_Response_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_ResponseHeaders_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_ResponseMessage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_ResponseTrailers_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_Strings_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_Metadata_MdEntry_DoNotUse_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_Metadata_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036proto/rpc/webrtc/v1/grpc.proto\022\023proto."
  "rpc.webrtc.v1\032\036google/protobuf/duration."
  "proto\032\027google/rpc/status.proto\"5\n\rPacket"
  "Message\022\022\n\004data\030\001 \001(\014R\004data\022\020\n\003eom\030\002 \001(\010"
  "R\003eom\"\030\n\006Stream\022\016\n\002id\030\001 \001(\004R\002id\"\351\001\n\007Requ"
  "est\0223\n\006stream\030\001 \001(\0132\033.proto.rpc.webrtc.v"
  "1.StreamR\006stream\022\?\n\007headers\030\002 \001(\0132#.prot"
  "o.rpc.webrtc.v1.RequestHeadersH\000R\007header"
  "s\022\?\n\007message\030\003 \001(\0132#.proto.rpc.webrtc.v1"
  ".RequestMessageH\000R\007message\022\037\n\nrst_stream"
  "\030\004 \001(\010H\000R\trstStreamB\006\n\004type\"\230\001\n\016RequestH"
  "eaders\022\026\n\006method\030\001 \001(\tR\006method\0229\n\010metada"
  "ta\030\002 \001(\0132\035.proto.rpc.webrtc.v1.MetadataR"
  "\010metadata\0223\n\007timeout\030\003 \001(\0132\031.google.prot"
  "obuf.DurationR\007timeout\"\216\001\n\016RequestMessag"
  "e\022\037\n\013has_message\030\001 \001(\010R\nhasMessage\022I\n\016pa"
  "cket_message\030\002 \001(\0132\".proto.rpc.webrtc.v1"
  ".PacketMessageR\rpacketMessage\022\020\n\003eos\030\003 \001"
  "(\010R\003eos\"\220\002\n\010Response\0223\n\006stream\030\001 \001(\0132\033.p"
  "roto.rpc.webrtc.v1.StreamR\006stream\022@\n\007hea"
  "ders\030\002 \001(\0132$.proto.rpc.webrtc.v1.Respons"
  "eHeadersH\000R\007headers\022@\n\007message\030\003 \001(\0132$.p"
  "roto.rpc.webrtc.v1.ResponseMessageH\000R\007me"
  "ssage\022C\n\010trailers\030\004 \001(\0132%.proto.rpc.webr"
  "tc.v1.ResponseTrailersH\000R\010trailersB\006\n\004ty"
  "pe\"L\n\017ResponseHeaders\0229\n\010metadata\030\001 \001(\0132"
  "\035.proto.rpc.webrtc.v1.MetadataR\010metadata"
  "\"\\\n\017ResponseMessage\022I\n\016packet_message\030\001 "
  "\001(\0132\".proto.rpc.webrtc.v1.PacketMessageR"
  "\rpacketMessage\"y\n\020ResponseTrailers\022*\n\006st"
  "atus\030\001 \001(\0132\022.google.rpc.StatusR\006status\0229"
  "\n\010metadata\030\002 \001(\0132\035.proto.rpc.webrtc.v1.M"
  "etadataR\010metadata\"!\n\007Strings\022\026\n\006values\030\001"
  " \003(\tR\006values\"\226\001\n\010Metadata\0225\n\002md\030\001 \003(\0132%."
  "proto.rpc.webrtc.v1.Metadata.MdEntryR\002md"
  "\032S\n\007MdEntry\022\020\n\003key\030\001 \001(\tR\003key\0222\n\005value\030\002"
  " \001(\0132\034.proto.rpc.webrtc.v1.StringsR\005valu"
  "e:\0028\001B\'Z%go.viam.com/utils/proto/rpc/web"
  "rtc/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::_pbi::once_flag descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto = {
    false, false, 1534, descriptor_table_protodef_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto,
    "proto/rpc/webrtc/v1/grpc.proto",
    &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once, descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_deps, 2, 12,
    schemas, file_default_instances, TableStruct_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto::offsets,
    file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto, file_level_enum_descriptors_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto,
    file_level_service_descriptors_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter() {
  return &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto(&descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto);
namespace proto {
namespace rpc {
namespace webrtc {
namespace v1 {

// ===================================================================

class PacketMessage::_Internal {
 public:
};

PacketMessage::PacketMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.PacketMessage)
}
PacketMessage::PacketMessage(const PacketMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.eom_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.eom_ = from._impl_.eom_;
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.PacketMessage)
}

inline void PacketMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.eom_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketMessage::~PacketMessage() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.PacketMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void PacketMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.PacketMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.eom_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool eom = 2 [json_name = "eom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.eom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PacketMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.PacketMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // bool eom = 2 [json_name = "eom"];
  if (this->_internal_eom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_eom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.PacketMessage)
  return target;
}

size_t PacketMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.PacketMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bool eom = 2 [json_name = "eom"];
  if (this->_internal_eom() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketMessage::GetClassData() const { return &_class_data_; }


void PacketMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketMessage*>(&to_msg);
  auto& from = static_cast<const PacketMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.PacketMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_eom() != 0) {
    _this->_internal_set_eom(from._internal_eom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketMessage::CopyFrom(const PacketMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.PacketMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketMessage::IsInitialized() const {
  return true;
}

void PacketMessage::InternalSwap(PacketMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.eom_, other->_impl_.eom_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[0]);
}

// ===================================================================

class Stream::_Internal {
 public:
};

Stream::Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.Stream)
}
Stream::Stream(const Stream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Stream* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.Stream)
}

inline void Stream::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.Stream)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stream::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Stream::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.Stream)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stream::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stream::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.Stream)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.Stream)
  return target;
}

size_t Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.Stream)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Stream::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stream::GetClassData() const { return &_class_data_; }


void Stream::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Stream*>(&to_msg);
  auto& from = static_cast<const Stream&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.Stream)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  return true;
}

void Stream::InternalSwap(Stream* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[1]);
}

// ===================================================================

class Request::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::Stream& stream(const Request* msg);
  static const ::proto::rpc::webrtc::v1::RequestHeaders& headers(const Request* msg);
  static const ::proto::rpc::webrtc::v1::RequestMessage& message(const Request* msg);
};

const ::proto::rpc::webrtc::v1::Stream&
Request::_Internal::stream(const Request* msg) {
  return *msg->_impl_.stream_;
}
const ::proto::rpc::webrtc::v1::RequestHeaders&
Request::_Internal::headers(const Request* msg) {
  return *msg->_impl_.type_.headers_;
}
const ::proto::rpc::webrtc::v1::RequestMessage&
Request::_Internal::message(const Request* msg) {
  return *msg->_impl_.type_.message_;
}
void Request::set_allocated_headers(::proto::rpc::webrtc::v1::RequestHeaders* headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(headers);
    if (message_arena != submessage_arena) {
      headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headers, submessage_arena);
    }
    set_has_headers();
    _impl_.type_.headers_ = headers;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.Request.headers)
}
void Request::set_allocated_message(::proto::rpc::webrtc::v1::RequestMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    set_has_message();
    _impl_.type_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.Request.message)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::proto::rpc::webrtc::v1::Stream(*from._impl_.stream_);
  }
  clear_has_type();
  switch (from.type_case()) {
    case kHeaders: {
      _this->_internal_mutable_headers()->::proto::rpc::webrtc::v1::RequestHeaders::MergeFrom(
          from._internal_headers());
      break;
    }
    case kMessage: {
      _this->_internal_mutable_message()->::proto::rpc::webrtc::v1::RequestMessage::MergeFrom(
          from._internal_message());
      break;
    }
    case kRstStream: {
      _this->_internal_set_rst_stream(from._internal_rst_stream());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.Request)
}

inline void Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stream_;
  if (has_type()) {
    clear_type();
  }
}

void Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Request::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:proto.rpc.webrtc.v1.Request)
  switch (type_case()) {
    case kHeaders: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.headers_;
      }
      break;
    }
    case kMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.message_;
      }
      break;
    }
    case kRstStream: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stream_ != nullptr) {
    delete _impl_.stream_;
  }
  _impl_.stream_ = nullptr;
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.rpc.webrtc.v1.Stream stream = 1 [json_name = "stream"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.RequestHeaders headers = 2 [json_name = "headers"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.RequestMessage message = 3 [json_name = "message"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool rst_stream = 4 [json_name = "rstStream"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_rst_stream(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.Stream stream = 1 [json_name = "stream"];
  if (this->_internal_has_stream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.RequestHeaders headers = 2 [json_name = "headers"];
  if (_internal_has_headers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::headers(this),
        _Internal::headers(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.RequestMessage message = 3 [json_name = "message"];
  if (_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // bool rst_stream = 4 [json_name = "rstStream"];
  if (_internal_has_rst_stream()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_rst_stream(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.Stream stream = 1 [json_name = "stream"];
  if (this->_internal_has_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  switch (type_case()) {
    // .proto.rpc.webrtc.v1.RequestHeaders headers = 2 [json_name = "headers"];
    case kHeaders: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.headers_);
      break;
    }
    // .proto.rpc.webrtc.v1.RequestMessage message = 3 [json_name = "message"];
    case kMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.message_);
      break;
    }
    // bool rst_stream = 4 [json_name = "rstStream"];
    case kRstStream: {
      total_size += 1 + 1;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }


void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Request*>(&to_msg);
  auto& from = static_cast<const Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stream()) {
    _this->_internal_mutable_stream()->::proto::rpc::webrtc::v1::Stream::MergeFrom(
        from._internal_stream());
  }
  switch (from.type_case()) {
    case kHeaders: {
      _this->_internal_mutable_headers()->::proto::rpc::webrtc::v1::RequestHeaders::MergeFrom(
          from._internal_headers());
      break;
    }
    case kMessage: {
      _this->_internal_mutable_message()->::proto::rpc::webrtc::v1::RequestMessage::MergeFrom(
          from._internal_message());
      break;
    }
    case kRstStream: {
      _this->_internal_set_rst_stream(from._internal_rst_stream());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stream_, other->_impl_.stream_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[2]);
}

// ===================================================================

class RequestHeaders::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::Metadata& metadata(const RequestHeaders* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& timeout(const RequestHeaders* msg);
};

const ::proto::rpc::webrtc::v1::Metadata&
RequestHeaders::_Internal::metadata(const RequestHeaders* msg) {
  return *msg->_impl_.metadata_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
RequestHeaders::_Internal::timeout(const RequestHeaders* msg) {
  return *msg->_impl_.timeout_;
}
void RequestHeaders::clear_timeout() {
  if (GetArenaForAllocation() == nullptr && _impl_.timeout_ != nullptr) {
    delete _impl_.timeout_;
  }
  _impl_.timeout_ = nullptr;
}
RequestHeaders::RequestHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.RequestHeaders)
}
RequestHeaders::RequestHeaders(const RequestHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestHeaders* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.method_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.timeout_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::proto::rpc::webrtc::v1::Metadata(*from._impl_.metadata_);
  }
  if (from._internal_has_timeout()) {
    _this->_impl_.timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.timeout_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.RequestHeaders)
}

inline void RequestHeaders::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.method_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.timeout_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestHeaders::~RequestHeaders() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.RequestHeaders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (this != internal_default_instance()) delete _impl_.timeout_;
}

void RequestHeaders::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.RequestHeaders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.method_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timeout_ != nullptr) {
    delete _impl_.timeout_;
  }
  _impl_.timeout_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHeaders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string method = 1 [json_name = "method"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.RequestHeaders.method"));
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.Metadata metadata = 2 [json_name = "metadata"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration timeout = 3 [json_name = "timeout"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestHeaders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.RequestHeaders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string method = 1 [json_name = "method"];
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.RequestHeaders.method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // .proto.rpc.webrtc.v1.Metadata metadata = 2 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration timeout = 3 [json_name = "timeout"];
  if (this->_internal_has_timeout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timeout(this),
        _Internal::timeout(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.RequestHeaders)
  return target;
}

size_t RequestHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.RequestHeaders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string method = 1 [json_name = "method"];
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // .proto.rpc.webrtc.v1.Metadata metadata = 2 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .google.protobuf.Duration timeout = 3 [json_name = "timeout"];
  if (this->_internal_has_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timeout_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestHeaders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestHeaders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestHeaders::GetClassData() const { return &_class_data_; }


void RequestHeaders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestHeaders*>(&to_msg);
  auto& from = static_cast<const RequestHeaders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.RequestHeaders)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::proto::rpc::webrtc::v1::Metadata::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_has_timeout()) {
    _this->_internal_mutable_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestHeaders::CopyFrom(const RequestHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.RequestHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeaders::IsInitialized() const {
  return true;
}

void RequestHeaders::InternalSwap(RequestHeaders* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestHeaders, _impl_.timeout_)
      + sizeof(RequestHeaders::_impl_.timeout_)
      - PROTOBUF_FIELD_OFFSET(RequestHeaders, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeaders::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[3]);
}

// ===================================================================

class RequestMessage::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::PacketMessage& packet_message(const RequestMessage* msg);
};

const ::proto::rpc::webrtc::v1::PacketMessage&
RequestMessage::_Internal::packet_message(const RequestMessage* msg) {
  return *msg->_impl_.packet_message_;
}
RequestMessage::RequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.RequestMessage)
}
RequestMessage::RequestMessage(const RequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_message_){nullptr}
    , decltype(_impl_.has_message_){}
    , decltype(_impl_.eos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_packet_message()) {
    _this->_impl_.packet_message_ = new ::proto::rpc::webrtc::v1::PacketMessage(*from._impl_.packet_message_);
  }
  ::memcpy(&_impl_.has_message_, &from._impl_.has_message_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.eos_) -
    reinterpret_cast<char*>(&_impl_.has_message_)) + sizeof(_impl_.eos_));
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.RequestMessage)
}

inline void RequestMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_message_){nullptr}
    , decltype(_impl_.has_message_){false}
    , decltype(_impl_.eos_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestMessage::~RequestMessage() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.RequestMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.packet_message_;
}

void RequestMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.RequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.packet_message_ != nullptr) {
    delete _impl_.packet_message_;
  }
  _impl_.packet_message_ = nullptr;
  ::memset(&_impl_.has_message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.eos_) -
      reinterpret_cast<char*>(&_impl_.has_message_)) + sizeof(_impl_.eos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool has_message = 1 [json_name = "hasMessage"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.has_message_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.PacketMessage packet_message = 2 [json_name = "packetMessage"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool eos = 3 [json_name = "eos"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.eos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.RequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool has_message = 1 [json_name = "hasMessage"];
  if (this->_internal_has_message() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_has_message(), target);
  }

  // .proto.rpc.webrtc.v1.PacketMessage packet_message = 2 [json_name = "packetMessage"];
  if (this->_internal_has_packet_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::packet_message(this),
        _Internal::packet_message(this).GetCachedSize(), target, stream);
  }

  // bool eos = 3 [json_name = "eos"];
  if (this->_internal_eos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_eos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.RequestMessage)
  return target;
}

size_t RequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.RequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.PacketMessage packet_message = 2 [json_name = "packetMessage"];
  if (this->_internal_has_packet_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_message_);
  }

  // bool has_message = 1 [json_name = "hasMessage"];
  if (this->_internal_has_message() != 0) {
    total_size += 1 + 1;
  }

  // bool eos = 3 [json_name = "eos"];
  if (this->_internal_eos() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestMessage::GetClassData() const { return &_class_data_; }


void RequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestMessage*>(&to_msg);
  auto& from = static_cast<const RequestMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.RequestMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_packet_message()) {
    _this->_internal_mutable_packet_message()->::proto::rpc::webrtc::v1::PacketMessage::MergeFrom(
        from._internal_packet_message());
  }
  if (from._internal_has_message() != 0) {
    _this->_internal_set_has_message(from._internal_has_message());
  }
  if (from._internal_eos() != 0) {
    _this->_internal_set_eos(from._internal_eos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestMessage::CopyFrom(const RequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.RequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestMessage::IsInitialized() const {
  return true;
}

void RequestMessage::InternalSwap(RequestMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestMessage, _impl_.eos_)
      + sizeof(RequestMessage::_impl_.eos_)
      - PROTOBUF_FIELD_OFFSET(RequestMessage, _impl_.packet_message_)>(
          reinterpret_cast<char*>(&_impl_.packet_message_),
          reinterpret_cast<char*>(&other->_impl_.packet_message_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[4]);
}

// ===================================================================

class Response::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::Stream& stream(const Response* msg);
  static const ::proto::rpc::webrtc::v1::ResponseHeaders& headers(const Response* msg);
  static const ::proto::rpc::webrtc::v1::ResponseMessage& message(const Response* msg);
  static const ::proto::rpc::webrtc::v1::ResponseTrailers& trailers(const Response* msg);
};

const ::proto::rpc::webrtc::v1::Stream&
Response::_Internal::stream(const Response* msg) {
  return *msg->_impl_.stream_;
}
const ::proto::rpc::webrtc::v1::ResponseHeaders&
Response::_Internal::headers(const Response* msg) {
  return *msg->_impl_.type_.headers_;
}
const ::proto::rpc::webrtc::v1::ResponseMessage&
Response::_Internal::message(const Response* msg) {
  return *msg->_impl_.type_.message_;
}
const ::proto::rpc::webrtc::v1::ResponseTrailers&
Response::_Internal::trailers(const Response* msg) {
  return *msg->_impl_.type_.trailers_;
}
void Response::set_allocated_headers(::proto::rpc::webrtc::v1::ResponseHeaders* headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(headers);
    if (message_arena != submessage_arena) {
      headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headers, submessage_arena);
    }
    set_has_headers();
    _impl_.type_.headers_ = headers;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.Response.headers)
}
void Response::set_allocated_message(::proto::rpc::webrtc::v1::ResponseMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    set_has_message();
    _impl_.type_.message_ = message;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.Response.message)
}
void Response::set_allocated_trailers(::proto::rpc::webrtc::v1::ResponseTrailers* trailers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (trailers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trailers);
    if (message_arena != submessage_arena) {
      trailers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trailers, submessage_arena);
    }
    set_has_trailers();
    _impl_.type_.trailers_ = trailers;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.Response.trailers)
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stream()) {
    _this->_impl_.stream_ = new ::proto::rpc::webrtc::v1::Stream(*from._impl_.stream_);
  }
  clear_has_type();
  switch (from.type_case()) {
    case kHeaders: {
      _this->_internal_mutable_headers()->::proto::rpc::webrtc::v1::ResponseHeaders::MergeFrom(
          from._internal_headers());
      break;
    }
    case kMessage: {
      _this->_internal_mutable_message()->::proto::rpc::webrtc::v1::ResponseMessage::MergeFrom(
          from._internal_message());
      break;
    }
    case kTrailers: {
      _this->_internal_mutable_trailers()->::proto::rpc::webrtc::v1::ResponseTrailers::MergeFrom(
          from._internal_trailers());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stream_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stream_;
  if (has_type()) {
    clear_type();
  }
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:proto.rpc.webrtc.v1.Response)
  switch (type_case()) {
    case kHeaders: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.headers_;
      }
      break;
    }
    case kMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.message_;
      }
      break;
    }
    case kTrailers: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.trailers_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.stream_ != nullptr) {
    delete _impl_.stream_;
  }
  _impl_.stream_ = nullptr;
  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.rpc.webrtc.v1.Stream stream = 1 [json_name = "stream"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.ResponseHeaders headers = 2 [json_name = "headers"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.ResponseMessage message = 3 [json_name = "message"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.ResponseTrailers trailers = 4 [json_name = "trailers"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trailers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.Stream stream = 1 [json_name = "stream"];
  if (this->_internal_has_stream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stream(this),
        _Internal::stream(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.ResponseHeaders headers = 2 [json_name = "headers"];
  if (_internal_has_headers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::headers(this),
        _Internal::headers(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.ResponseMessage message = 3 [json_name = "message"];
  if (_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.ResponseTrailers trailers = 4 [json_name = "trailers"];
  if (_internal_has_trailers()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::trailers(this),
        _Internal::trailers(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.Stream stream = 1 [json_name = "stream"];
  if (this->_internal_has_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stream_);
  }

  switch (type_case()) {
    // .proto.rpc.webrtc.v1.ResponseHeaders headers = 2 [json_name = "headers"];
    case kHeaders: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.headers_);
      break;
    }
    // .proto.rpc.webrtc.v1.ResponseMessage message = 3 [json_name = "message"];
    case kMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.message_);
      break;
    }
    // .proto.rpc.webrtc.v1.ResponseTrailers trailers = 4 [json_name = "trailers"];
    case kTrailers: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.trailers_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_stream()) {
    _this->_internal_mutable_stream()->::proto::rpc::webrtc::v1::Stream::MergeFrom(
        from._internal_stream());
  }
  switch (from.type_case()) {
    case kHeaders: {
      _this->_internal_mutable_headers()->::proto::rpc::webrtc::v1::ResponseHeaders::MergeFrom(
          from._internal_headers());
      break;
    }
    case kMessage: {
      _this->_internal_mutable_message()->::proto::rpc::webrtc::v1::ResponseMessage::MergeFrom(
          from._internal_message());
      break;
    }
    case kTrailers: {
      _this->_internal_mutable_trailers()->::proto::rpc::webrtc::v1::ResponseTrailers::MergeFrom(
          from._internal_trailers());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.stream_, other->_impl_.stream_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[5]);
}

// ===================================================================

class ResponseHeaders::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::Metadata& metadata(const ResponseHeaders* msg);
};

const ::proto::rpc::webrtc::v1::Metadata&
ResponseHeaders::_Internal::metadata(const ResponseHeaders* msg) {
  return *msg->_impl_.metadata_;
}
ResponseHeaders::ResponseHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.ResponseHeaders)
}
ResponseHeaders::ResponseHeaders(const ResponseHeaders& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseHeaders* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::proto::rpc::webrtc::v1::Metadata(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.ResponseHeaders)
}

inline void ResponseHeaders::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseHeaders::~ResponseHeaders() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.ResponseHeaders)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseHeaders::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void ResponseHeaders::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseHeaders::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.ResponseHeaders)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseHeaders::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.rpc.webrtc.v1.Metadata metadata = 1 [json_name = "metadata"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseHeaders::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.ResponseHeaders)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.Metadata metadata = 1 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.ResponseHeaders)
  return target;
}

size_t ResponseHeaders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.ResponseHeaders)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.Metadata metadata = 1 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseHeaders::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseHeaders::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseHeaders::GetClassData() const { return &_class_data_; }


void ResponseHeaders::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseHeaders*>(&to_msg);
  auto& from = static_cast<const ResponseHeaders&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.ResponseHeaders)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::proto::rpc::webrtc::v1::Metadata::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseHeaders::CopyFrom(const ResponseHeaders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.ResponseHeaders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeaders::IsInitialized() const {
  return true;
}

void ResponseHeaders::InternalSwap(ResponseHeaders* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseHeaders::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[6]);
}

// ===================================================================

class ResponseMessage::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::PacketMessage& packet_message(const ResponseMessage* msg);
};

const ::proto::rpc::webrtc::v1::PacketMessage&
ResponseMessage::_Internal::packet_message(const ResponseMessage* msg) {
  return *msg->_impl_.packet_message_;
}
ResponseMessage::ResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.ResponseMessage)
}
ResponseMessage::ResponseMessage(const ResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_packet_message()) {
    _this->_impl_.packet_message_ = new ::proto::rpc::webrtc::v1::PacketMessage(*from._impl_.packet_message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.ResponseMessage)
}

inline void ResponseMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_message_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseMessage::~ResponseMessage() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.ResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.packet_message_;
}

void ResponseMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.ResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.packet_message_ != nullptr) {
    delete _impl_.packet_message_;
  }
  _impl_.packet_message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.rpc.webrtc.v1.PacketMessage packet_message = 1 [json_name = "packetMessage"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.ResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.PacketMessage packet_message = 1 [json_name = "packetMessage"];
  if (this->_internal_has_packet_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packet_message(this),
        _Internal::packet_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.ResponseMessage)
  return target;
}

size_t ResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.ResponseMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.PacketMessage packet_message = 1 [json_name = "packetMessage"];
  if (this->_internal_has_packet_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseMessage::GetClassData() const { return &_class_data_; }


void ResponseMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseMessage*>(&to_msg);
  auto& from = static_cast<const ResponseMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.ResponseMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_packet_message()) {
    _this->_internal_mutable_packet_message()->::proto::rpc::webrtc::v1::PacketMessage::MergeFrom(
        from._internal_packet_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseMessage::CopyFrom(const ResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.ResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseMessage::IsInitialized() const {
  return true;
}

void ResponseMessage::InternalSwap(ResponseMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.packet_message_, other->_impl_.packet_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[7]);
}

// ===================================================================

class ResponseTrailers::_Internal {
 public:
  static const ::google::rpc::Status& status(const ResponseTrailers* msg);
  static const ::proto::rpc::webrtc::v1::Metadata& metadata(const ResponseTrailers* msg);
};

const ::google::rpc::Status&
ResponseTrailers::_Internal::status(const ResponseTrailers* msg) {
  return *msg->_impl_.status_;
}
const ::proto::rpc::webrtc::v1::Metadata&
ResponseTrailers::_Internal::metadata(const ResponseTrailers* msg) {
  return *msg->_impl_.metadata_;
}
void ResponseTrailers::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
ResponseTrailers::ResponseTrailers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.ResponseTrailers)
}
ResponseTrailers::ResponseTrailers(const ResponseTrailers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResponseTrailers* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::google::rpc::Status(*from._impl_.status_);
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::proto::rpc::webrtc::v1::Metadata(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.ResponseTrailers)
}

inline void ResponseTrailers::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResponseTrailers::~ResponseTrailers() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.ResponseTrailers)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseTrailers::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void ResponseTrailers::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponseTrailers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.ResponseTrailers)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseTrailers::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.rpc.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.Metadata metadata = 2 [json_name = "metadata"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseTrailers::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.ResponseTrailers)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.Metadata metadata = 2 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.ResponseTrailers)
  return target;
}

size_t ResponseTrailers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.ResponseTrailers)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.rpc.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  // .proto.rpc.webrtc.v1.Metadata metadata = 2 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseTrailers::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResponseTrailers::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseTrailers::GetClassData() const { return &_class_data_; }


void ResponseTrailers::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResponseTrailers*>(&to_msg);
  auto& from = static_cast<const ResponseTrailers&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.ResponseTrailers)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::google::rpc::Status::MergeFrom(
        from._internal_status());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::proto::rpc::webrtc::v1::Metadata::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseTrailers::CopyFrom(const ResponseTrailers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.ResponseTrailers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseTrailers::IsInitialized() const {
  return true;
}

void ResponseTrailers::InternalSwap(ResponseTrailers* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseTrailers, _impl_.metadata_)
      + sizeof(ResponseTrailers::_impl_.metadata_)
      - PROTOBUF_FIELD_OFFSET(ResponseTrailers, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseTrailers::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[8]);
}

// ===================================================================

class Strings::_Internal {
 public:
};

Strings::Strings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.Strings)
}
Strings::Strings(const Strings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Strings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.Strings)
}

inline void Strings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Strings::~Strings() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.Strings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Strings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void Strings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Strings::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.Strings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Strings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string values = 1 [json_name = "values"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.Strings.values"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Strings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.Strings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1 [json_name = "values"];
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.Strings.values");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.Strings)
  return target;
}

size_t Strings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.Strings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 1 [json_name = "values"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.values_.size());
  for (int i = 0, n = _impl_.values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.values_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Strings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Strings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Strings::GetClassData() const { return &_class_data_; }


void Strings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Strings*>(&to_msg);
  auto& from = static_cast<const Strings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.Strings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Strings::CopyFrom(const Strings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.Strings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Strings::IsInitialized() const {
  return true;
}

void Strings::InternalSwap(Strings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Strings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[9]);
}

// ===================================================================

Metadata_MdEntry_DoNotUse::Metadata_MdEntry_DoNotUse() {}
Metadata_MdEntry_DoNotUse::Metadata_MdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Metadata_MdEntry_DoNotUse::MergeFrom(const Metadata_MdEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Metadata_MdEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[10]);
}

// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Metadata::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.md_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.md_.MergeFrom(from._impl_.md_);
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.Metadata)
}

inline void Metadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.md_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Metadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.md_.Destruct();
  _impl_.md_.~MapField();
}

void Metadata::ArenaDtor(void* object) {
  Metadata* _this = reinterpret_cast< Metadata* >(object);
  _this->_impl_.md_.Destruct();
}
void Metadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.Metadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.md_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .proto.rpc.webrtc.v1.Strings> md = 1 [json_name = "md"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.md_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Metadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.Metadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .proto.rpc.webrtc.v1.Strings> md = 1 [json_name = "md"];
  if (!this->_internal_md().empty()) {
    using MapType = ::_pb::Map<std::string, ::proto::rpc::webrtc::v1::Strings>;
    using WireHelper = Metadata_MdEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_md();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "proto.rpc.webrtc.v1.Metadata.MdEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.Metadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .proto.rpc.webrtc.v1.Strings> md = 1 [json_name = "md"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_md_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::proto::rpc::webrtc::v1::Strings >::const_iterator
      it = this->_internal_md().begin();
      it != this->_internal_md().end(); ++it) {
    total_size += Metadata_MdEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }


void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metadata*>(&to_msg);
  auto& from = static_cast<const Metadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.Metadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.md_.MergeFrom(from._impl_.md_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.md_.InternalSwap(&other->_impl_.md_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fgrpc_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace webrtc
}  // namespace rpc
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::PacketMessage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::PacketMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::PacketMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::Stream*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::Stream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::Request*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::RequestHeaders*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::RequestHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::RequestHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::RequestMessage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::RequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::RequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::Response*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::ResponseHeaders*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::ResponseHeaders >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::ResponseHeaders >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::ResponseMessage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::ResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::ResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::ResponseTrailers*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::ResponseTrailers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::ResponseTrailers >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::Strings*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::Strings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::Strings >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::Metadata_MdEntry_DoNotUse*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::Metadata_MdEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::Metadata_MdEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::Metadata*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::Metadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
