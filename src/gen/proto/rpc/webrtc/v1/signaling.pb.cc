// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/rpc/webrtc/v1/signaling.proto

#include "proto/rpc/webrtc/v1/signaling.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
namespace rpc {
namespace webrtc {
namespace v1 {
PROTOBUF_CONSTEXPR ICECandidate::ICECandidate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.candidate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdp_mid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.username_fragment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sdpm_line_index_)*/0u} {}
struct ICECandidateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ICECandidateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ICECandidateDefaultTypeInternal() {}
  union {
    ICECandidate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ICECandidateDefaultTypeInternal _ICECandidate_default_instance_;
PROTOBUF_CONSTEXPR CallRequest::CallRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sdp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.disable_trickle_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallRequestDefaultTypeInternal() {}
  union {
    CallRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallRequestDefaultTypeInternal _CallRequest_default_instance_;
PROTOBUF_CONSTEXPR CallResponseInitStage::CallResponseInitStage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sdp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallResponseInitStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallResponseInitStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallResponseInitStageDefaultTypeInternal() {}
  union {
    CallResponseInitStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallResponseInitStageDefaultTypeInternal _CallResponseInitStage_default_instance_;
PROTOBUF_CONSTEXPR CallResponseUpdateStage::CallResponseUpdateStage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.candidate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallResponseUpdateStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallResponseUpdateStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallResponseUpdateStageDefaultTypeInternal() {}
  union {
    CallResponseUpdateStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallResponseUpdateStageDefaultTypeInternal _CallResponseUpdateStage_default_instance_;
PROTOBUF_CONSTEXPR CallResponse::CallResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stage_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CallResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallResponseDefaultTypeInternal() {}
  union {
    CallResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallResponseDefaultTypeInternal _CallResponse_default_instance_;
PROTOBUF_CONSTEXPR CallUpdateRequest::CallUpdateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.update_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CallUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallUpdateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallUpdateRequestDefaultTypeInternal() {}
  union {
    CallUpdateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallUpdateRequestDefaultTypeInternal _CallUpdateRequest_default_instance_;
PROTOBUF_CONSTEXPR CallUpdateResponse::CallUpdateResponse(
    ::_pbi::ConstantInitialized) {}
struct CallUpdateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallUpdateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallUpdateResponseDefaultTypeInternal() {}
  union {
    CallUpdateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallUpdateResponseDefaultTypeInternal _CallUpdateResponse_default_instance_;
PROTOBUF_CONSTEXPR ICEServer::ICEServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.urls_)*/{}
  , /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.credential_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ICEServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ICEServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ICEServerDefaultTypeInternal() {}
  union {
    ICEServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ICEServerDefaultTypeInternal _ICEServer_default_instance_;
PROTOBUF_CONSTEXPR WebRTCConfig::WebRTCConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additional_ice_servers_)*/{}
  , /*decltype(_impl_.disable_trickle_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WebRTCConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebRTCConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebRTCConfigDefaultTypeInternal() {}
  union {
    WebRTCConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebRTCConfigDefaultTypeInternal _WebRTCConfig_default_instance_;
PROTOBUF_CONSTEXPR AnswerRequestInitStage::AnswerRequestInitStage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sdp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optional_config_)*/nullptr
  , /*decltype(_impl_.deadline_)*/nullptr} {}
struct AnswerRequestInitStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerRequestInitStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerRequestInitStageDefaultTypeInternal() {}
  union {
    AnswerRequestInitStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerRequestInitStageDefaultTypeInternal _AnswerRequestInitStage_default_instance_;
PROTOBUF_CONSTEXPR AnswerRequestUpdateStage::AnswerRequestUpdateStage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.candidate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnswerRequestUpdateStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerRequestUpdateStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerRequestUpdateStageDefaultTypeInternal() {}
  union {
    AnswerRequestUpdateStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerRequestUpdateStageDefaultTypeInternal _AnswerRequestUpdateStage_default_instance_;
PROTOBUF_CONSTEXPR AnswerRequestDoneStage::AnswerRequestDoneStage(
    ::_pbi::ConstantInitialized) {}
struct AnswerRequestDoneStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerRequestDoneStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerRequestDoneStageDefaultTypeInternal() {}
  union {
    AnswerRequestDoneStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerRequestDoneStageDefaultTypeInternal _AnswerRequestDoneStage_default_instance_;
PROTOBUF_CONSTEXPR AnswerRequestErrorStage::AnswerRequestErrorStage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnswerRequestErrorStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerRequestErrorStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerRequestErrorStageDefaultTypeInternal() {}
  union {
    AnswerRequestErrorStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerRequestErrorStageDefaultTypeInternal _AnswerRequestErrorStage_default_instance_;
PROTOBUF_CONSTEXPR AnswerRequest::AnswerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stage_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnswerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerRequestDefaultTypeInternal() {}
  union {
    AnswerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerRequestDefaultTypeInternal _AnswerRequest_default_instance_;
PROTOBUF_CONSTEXPR AnswerResponseInitStage::AnswerResponseInitStage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sdp_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnswerResponseInitStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerResponseInitStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerResponseInitStageDefaultTypeInternal() {}
  union {
    AnswerResponseInitStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerResponseInitStageDefaultTypeInternal _AnswerResponseInitStage_default_instance_;
PROTOBUF_CONSTEXPR AnswerResponseUpdateStage::AnswerResponseUpdateStage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.candidate_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnswerResponseUpdateStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerResponseUpdateStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerResponseUpdateStageDefaultTypeInternal() {}
  union {
    AnswerResponseUpdateStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerResponseUpdateStageDefaultTypeInternal _AnswerResponseUpdateStage_default_instance_;
PROTOBUF_CONSTEXPR AnswerResponseDoneStage::AnswerResponseDoneStage(
    ::_pbi::ConstantInitialized) {}
struct AnswerResponseDoneStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerResponseDoneStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerResponseDoneStageDefaultTypeInternal() {}
  union {
    AnswerResponseDoneStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerResponseDoneStageDefaultTypeInternal _AnswerResponseDoneStage_default_instance_;
PROTOBUF_CONSTEXPR AnswerResponseErrorStage::AnswerResponseErrorStage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AnswerResponseErrorStageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerResponseErrorStageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerResponseErrorStageDefaultTypeInternal() {}
  union {
    AnswerResponseErrorStage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerResponseErrorStageDefaultTypeInternal _AnswerResponseErrorStage_default_instance_;
PROTOBUF_CONSTEXPR AnswerResponse::AnswerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stage_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AnswerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnswerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnswerResponseDefaultTypeInternal() {}
  union {
    AnswerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnswerResponseDefaultTypeInternal _AnswerResponse_default_instance_;
PROTOBUF_CONSTEXPR OptionalWebRTCConfigRequest::OptionalWebRTCConfigRequest(
    ::_pbi::ConstantInitialized) {}
struct OptionalWebRTCConfigRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionalWebRTCConfigRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionalWebRTCConfigRequestDefaultTypeInternal() {}
  union {
    OptionalWebRTCConfigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionalWebRTCConfigRequestDefaultTypeInternal _OptionalWebRTCConfigRequest_default_instance_;
PROTOBUF_CONSTEXPR OptionalWebRTCConfigResponse::OptionalWebRTCConfigResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OptionalWebRTCConfigResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionalWebRTCConfigResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionalWebRTCConfigResponseDefaultTypeInternal() {}
  union {
    OptionalWebRTCConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionalWebRTCConfigResponseDefaultTypeInternal _OptionalWebRTCConfigResponse_default_instance_;
}  // namespace v1
}  // namespace webrtc
}  // namespace rpc
}  // namespace proto
static ::_pb::Metadata file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[21];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto = nullptr;

const uint32_t TableStruct_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ICECandidate, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ICECandidate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ICECandidate, _impl_.candidate_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ICECandidate, _impl_.sdp_mid_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ICECandidate, _impl_.sdpm_line_index_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ICECandidate, _impl_.username_fragment_),
  ~0u,
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallRequest, _impl_.sdp_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallRequest, _impl_.disable_trickle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallResponseInitStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallResponseInitStage, _impl_.sdp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallResponseUpdateStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallResponseUpdateStage, _impl_.candidate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallResponse, _impl_.uuid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallResponse, _impl_.stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallUpdateRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallUpdateRequest, _impl_.uuid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallUpdateRequest, _impl_.update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::CallUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ICEServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ICEServer, _impl_.urls_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ICEServer, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::ICEServer, _impl_.credential_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::WebRTCConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::WebRTCConfig, _impl_.additional_ice_servers_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::WebRTCConfig, _impl_.disable_trickle_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequestInitStage, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequestInitStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequestInitStage, _impl_.sdp_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequestInitStage, _impl_.optional_config_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequestInitStage, _impl_.deadline_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequestUpdateStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequestUpdateStage, _impl_.candidate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequestDoneStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequestErrorStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequestErrorStage, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequest, _impl_.uuid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerRequest, _impl_.stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerResponseInitStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerResponseInitStage, _impl_.sdp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerResponseUpdateStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerResponseUpdateStage, _impl_.candidate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerResponseDoneStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerResponseErrorStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerResponseErrorStage, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerResponse, _impl_.uuid_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::AnswerResponse, _impl_.stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse, _impl_.config_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::proto::rpc::webrtc::v1::ICECandidate)},
  { 14, -1, -1, sizeof(::proto::rpc::webrtc::v1::CallRequest)},
  { 22, -1, -1, sizeof(::proto::rpc::webrtc::v1::CallResponseInitStage)},
  { 29, -1, -1, sizeof(::proto::rpc::webrtc::v1::CallResponseUpdateStage)},
  { 36, -1, -1, sizeof(::proto::rpc::webrtc::v1::CallResponse)},
  { 46, -1, -1, sizeof(::proto::rpc::webrtc::v1::CallUpdateRequest)},
  { 57, -1, -1, sizeof(::proto::rpc::webrtc::v1::CallUpdateResponse)},
  { 63, -1, -1, sizeof(::proto::rpc::webrtc::v1::ICEServer)},
  { 72, -1, -1, sizeof(::proto::rpc::webrtc::v1::WebRTCConfig)},
  { 80, 89, -1, sizeof(::proto::rpc::webrtc::v1::AnswerRequestInitStage)},
  { 92, -1, -1, sizeof(::proto::rpc::webrtc::v1::AnswerRequestUpdateStage)},
  { 99, -1, -1, sizeof(::proto::rpc::webrtc::v1::AnswerRequestDoneStage)},
  { 105, -1, -1, sizeof(::proto::rpc::webrtc::v1::AnswerRequestErrorStage)},
  { 112, -1, -1, sizeof(::proto::rpc::webrtc::v1::AnswerRequest)},
  { 124, -1, -1, sizeof(::proto::rpc::webrtc::v1::AnswerResponseInitStage)},
  { 131, -1, -1, sizeof(::proto::rpc::webrtc::v1::AnswerResponseUpdateStage)},
  { 138, -1, -1, sizeof(::proto::rpc::webrtc::v1::AnswerResponseDoneStage)},
  { 144, -1, -1, sizeof(::proto::rpc::webrtc::v1::AnswerResponseErrorStage)},
  { 151, -1, -1, sizeof(::proto::rpc::webrtc::v1::AnswerResponse)},
  { 163, -1, -1, sizeof(::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest)},
  { 169, -1, -1, sizeof(::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::rpc::webrtc::v1::_ICECandidate_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_CallRequest_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_CallResponseInitStage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_CallResponseUpdateStage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_CallResponse_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_CallUpdateRequest_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_CallUpdateResponse_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_ICEServer_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_WebRTCConfig_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_AnswerRequestInitStage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_AnswerRequestUpdateStage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_AnswerRequestDoneStage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_AnswerRequestErrorStage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_AnswerRequest_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_AnswerResponseInitStage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_AnswerResponseUpdateStage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_AnswerResponseDoneStage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_AnswerResponseErrorStage_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_AnswerResponse_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_OptionalWebRTCConfigRequest_default_instance_._instance,
  &::proto::rpc::webrtc::v1::_OptionalWebRTCConfigResponse_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#proto/rpc/webrtc/v1/signaling.proto\022\023p"
  "roto.rpc.webrtc.v1\032\034google/api/annotatio"
  "ns.proto\032\037google/protobuf/timestamp.prot"
  "o\032\027google/rpc/status.proto\"\337\001\n\014ICECandid"
  "ate\022\034\n\tcandidate\030\001 \001(\tR\tcandidate\022\034\n\007sdp"
  "_mid\030\002 \001(\tH\000R\006sdpMid\210\001\001\022+\n\017sdpm_line_ind"
  "ex\030\003 \001(\rH\001R\rsdpmLineIndex\210\001\001\0220\n\021username"
  "_fragment\030\004 \001(\tH\002R\020usernameFragment\210\001\001B\n"
  "\n\010_sdp_midB\022\n\020_sdpm_line_indexB\024\n\022_usern"
  "ame_fragment\"H\n\013CallRequest\022\020\n\003sdp\030\001 \001(\t"
  "R\003sdp\022\'\n\017disable_trickle\030\002 \001(\010R\016disableT"
  "rickle\")\n\025CallResponseInitStage\022\020\n\003sdp\030\001"
  " \001(\tR\003sdp\"Z\n\027CallResponseUpdateStage\022\?\n\t"
  "candidate\030\001 \001(\0132!.proto.rpc.webrtc.v1.IC"
  "ECandidateR\tcandidate\"\265\001\n\014CallResponse\022\022"
  "\n\004uuid\030\001 \001(\tR\004uuid\022@\n\004init\030\002 \001(\0132*.proto"
  ".rpc.webrtc.v1.CallResponseInitStageH\000R\004"
  "init\022F\n\006update\030\003 \001(\0132,.proto.rpc.webrtc."
  "v1.CallResponseUpdateStageH\000R\006updateB\007\n\005"
  "stage\"\266\001\n\021CallUpdateRequest\022\022\n\004uuid\030\001 \001("
  "\tR\004uuid\022A\n\tcandidate\030\002 \001(\0132!.proto.rpc.w"
  "ebrtc.v1.ICECandidateH\000R\tcandidate\022\024\n\004do"
  "ne\030\003 \001(\010H\000R\004done\022*\n\005error\030\004 \001(\0132\022.google"
  ".rpc.StatusH\000R\005errorB\010\n\006update\"\024\n\022CallUp"
  "dateResponse\"[\n\tICEServer\022\022\n\004urls\030\001 \003(\tR"
  "\004urls\022\032\n\010username\030\002 \001(\tR\010username\022\036\n\ncre"
  "dential\030\003 \001(\tR\ncredential\"\215\001\n\014WebRTCConf"
  "ig\022T\n\026additional_ice_servers\030\001 \003(\0132\036.pro"
  "to.rpc.webrtc.v1.ICEServerR\024additionalIc"
  "eServers\022\'\n\017disable_trickle\030\002 \001(\010R\016disab"
  "leTrickle\"\300\001\n\026AnswerRequestInitStage\022\020\n\003"
  "sdp\030\001 \001(\tR\003sdp\022J\n\017optional_config\030\002 \001(\0132"
  "!.proto.rpc.webrtc.v1.WebRTCConfigR\016opti"
  "onalConfig\022;\n\010deadline\030\003 \001(\0132\032.google.pr"
  "otobuf.TimestampH\000R\010deadline\210\001\001B\013\n\t_dead"
  "line\"[\n\030AnswerRequestUpdateStage\022\?\n\tcand"
  "idate\030\001 \001(\0132!.proto.rpc.webrtc.v1.ICECan"
  "didateR\tcandidate\"\030\n\026AnswerRequestDoneSt"
  "age\"E\n\027AnswerRequestErrorStage\022*\n\006status"
  "\030\001 \001(\0132\022.google.rpc.StatusR\006status\"\301\002\n\rA"
  "nswerRequest\022\022\n\004uuid\030\001 \001(\tR\004uuid\022A\n\004init"
  "\030\002 \001(\0132+.proto.rpc.webrtc.v1.AnswerReque"
  "stInitStageH\000R\004init\022G\n\006update\030\003 \001(\0132-.pr"
  "oto.rpc.webrtc.v1.AnswerRequestUpdateSta"
  "geH\000R\006update\022A\n\004done\030\004 \001(\0132+.proto.rpc.w"
  "ebrtc.v1.AnswerRequestDoneStageH\000R\004done\022"
  "D\n\005error\030\005 \001(\0132,.proto.rpc.webrtc.v1.Ans"
  "werRequestErrorStageH\000R\005errorB\007\n\005stage\"+"
  "\n\027AnswerResponseInitStage\022\020\n\003sdp\030\001 \001(\tR\003"
  "sdp\"\\\n\031AnswerResponseUpdateStage\022\?\n\tcand"
  "idate\030\001 \001(\0132!.proto.rpc.webrtc.v1.ICECan"
  "didateR\tcandidate\"\031\n\027AnswerResponseDoneS"
  "tage\"F\n\030AnswerResponseErrorStage\022*\n\006stat"
  "us\030\001 \001(\0132\022.google.rpc.StatusR\006status\"\306\002\n"
  "\016AnswerResponse\022\022\n\004uuid\030\001 \001(\tR\004uuid\022B\n\004i"
  "nit\030\002 \001(\0132,.proto.rpc.webrtc.v1.AnswerRe"
  "sponseInitStageH\000R\004init\022H\n\006update\030\003 \001(\0132"
  "..proto.rpc.webrtc.v1.AnswerResponseUpda"
  "teStageH\000R\006update\022B\n\004done\030\004 \001(\0132,.proto."
  "rpc.webrtc.v1.AnswerResponseDoneStageH\000R"
  "\004done\022E\n\005error\030\005 \001(\0132-.proto.rpc.webrtc."
  "v1.AnswerResponseErrorStageH\000R\005errorB\007\n\005"
  "stage\"\035\n\033OptionalWebRTCConfigRequest\"Y\n\034"
  "OptionalWebRTCConfigResponse\0229\n\006config\030\001"
  " \001(\0132!.proto.rpc.webrtc.v1.WebRTCConfigR"
  "\006config2\206\004\n\020SignalingService\022j\n\004Call\022 .p"
  "roto.rpc.webrtc.v1.CallRequest\032!.proto.r"
  "pc.webrtc.v1.CallResponse\"\033\202\323\344\223\002\025\"\023/rpc/"
  "webrtc/v1/call0\001\022\201\001\n\nCallUpdate\022&.proto."
  "rpc.webrtc.v1.CallUpdateRequest\032\'.proto."
  "rpc.webrtc.v1.CallUpdateResponse\"\"\202\323\344\223\002\034"
  "\032\032/rpc/webrtc/v1/call_update\022U\n\006Answer\022#"
  ".proto.rpc.webrtc.v1.AnswerResponse\032\".pr"
  "oto.rpc.webrtc.v1.AnswerRequest(\0010\001\022\252\001\n\024"
  "OptionalWebRTCConfig\0220.proto.rpc.webrtc."
  "v1.OptionalWebRTCConfigRequest\0321.proto.r"
  "pc.webrtc.v1.OptionalWebRTCConfigRespons"
  "e\"-\202\323\344\223\002\'\022%/rpc/webrtc/v1/optional_webrt"
  "c_configB\'Z%go.viam.com/utils/proto/rpc/"
  "webrtc/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::_pbi::once_flag descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto = {
    false, false, 3177, descriptor_table_protodef_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto,
    "proto/rpc/webrtc/v1/signaling.proto",
    &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once, descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_deps, 3, 21,
    schemas, file_default_instances, TableStruct_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto::offsets,
    file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto, file_level_enum_descriptors_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto,
    file_level_service_descriptors_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter() {
  return &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto(&descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto);
namespace proto {
namespace rpc {
namespace webrtc {
namespace v1 {

// ===================================================================

class ICECandidate::_Internal {
 public:
  using HasBits = decltype(std::declval<ICECandidate>()._impl_._has_bits_);
  static void set_has_sdp_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sdpm_line_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_username_fragment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ICECandidate::ICECandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.ICECandidate)
}
ICECandidate::ICECandidate(const ICECandidate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ICECandidate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.candidate_){}
    , decltype(_impl_.sdp_mid_){}
    , decltype(_impl_.username_fragment_){}
    , decltype(_impl_.sdpm_line_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.candidate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.candidate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_candidate().empty()) {
    _this->_impl_.candidate_.Set(from._internal_candidate(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sdp_mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_sdp_mid()) {
    _this->_impl_.sdp_mid_.Set(from._internal_sdp_mid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.username_fragment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_fragment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_username_fragment()) {
    _this->_impl_.username_fragment_.Set(from._internal_username_fragment(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.sdpm_line_index_ = from._impl_.sdpm_line_index_;
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.ICECandidate)
}

inline void ICECandidate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.candidate_){}
    , decltype(_impl_.sdp_mid_){}
    , decltype(_impl_.username_fragment_){}
    , decltype(_impl_.sdpm_line_index_){0u}
  };
  _impl_.candidate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.candidate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sdp_mid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_mid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_fragment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_fragment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ICECandidate::~ICECandidate() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.ICECandidate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ICECandidate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.candidate_.Destroy();
  _impl_.sdp_mid_.Destroy();
  _impl_.username_fragment_.Destroy();
}

void ICECandidate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ICECandidate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.ICECandidate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.candidate_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sdp_mid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.username_fragment_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.sdpm_line_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ICECandidate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string candidate = 1 [json_name = "candidate"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_candidate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.ICECandidate.candidate"));
        } else
          goto handle_unusual;
        continue;
      // optional string sdp_mid = 2 [json_name = "sdpMid"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sdp_mid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.ICECandidate.sdp_mid"));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sdpm_line_index = 3 [json_name = "sdpmLineIndex"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_sdpm_line_index(&has_bits);
          _impl_.sdpm_line_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string username_fragment = 4 [json_name = "usernameFragment"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_username_fragment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.ICECandidate.username_fragment"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ICECandidate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.ICECandidate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string candidate = 1 [json_name = "candidate"];
  if (!this->_internal_candidate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_candidate().data(), static_cast<int>(this->_internal_candidate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.ICECandidate.candidate");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_candidate(), target);
  }

  // optional string sdp_mid = 2 [json_name = "sdpMid"];
  if (_internal_has_sdp_mid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdp_mid().data(), static_cast<int>(this->_internal_sdp_mid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.ICECandidate.sdp_mid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sdp_mid(), target);
  }

  // optional uint32 sdpm_line_index = 3 [json_name = "sdpmLineIndex"];
  if (_internal_has_sdpm_line_index()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sdpm_line_index(), target);
  }

  // optional string username_fragment = 4 [json_name = "usernameFragment"];
  if (_internal_has_username_fragment()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username_fragment().data(), static_cast<int>(this->_internal_username_fragment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.ICECandidate.username_fragment");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_username_fragment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.ICECandidate)
  return target;
}

size_t ICECandidate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.ICECandidate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string candidate = 1 [json_name = "candidate"];
  if (!this->_internal_candidate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_candidate());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string sdp_mid = 2 [json_name = "sdpMid"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sdp_mid());
    }

    // optional string username_fragment = 4 [json_name = "usernameFragment"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_username_fragment());
    }

    // optional uint32 sdpm_line_index = 3 [json_name = "sdpmLineIndex"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sdpm_line_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ICECandidate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ICECandidate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ICECandidate::GetClassData() const { return &_class_data_; }


void ICECandidate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ICECandidate*>(&to_msg);
  auto& from = static_cast<const ICECandidate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.ICECandidate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_candidate().empty()) {
    _this->_internal_set_candidate(from._internal_candidate());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sdp_mid(from._internal_sdp_mid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_username_fragment(from._internal_username_fragment());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.sdpm_line_index_ = from._impl_.sdpm_line_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ICECandidate::CopyFrom(const ICECandidate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.ICECandidate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICECandidate::IsInitialized() const {
  return true;
}

void ICECandidate::InternalSwap(ICECandidate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.candidate_, lhs_arena,
      &other->_impl_.candidate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdp_mid_, lhs_arena,
      &other->_impl_.sdp_mid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_fragment_, lhs_arena,
      &other->_impl_.username_fragment_, rhs_arena
  );
  swap(_impl_.sdpm_line_index_, other->_impl_.sdpm_line_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ICECandidate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[0]);
}

// ===================================================================

class CallRequest::_Internal {
 public:
};

CallRequest::CallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.CallRequest)
}
CallRequest::CallRequest(const CallRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sdp_){}
    , decltype(_impl_.disable_trickle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdp().empty()) {
    _this->_impl_.sdp_.Set(from._internal_sdp(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.disable_trickle_ = from._impl_.disable_trickle_;
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.CallRequest)
}

inline void CallRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sdp_){}
    , decltype(_impl_.disable_trickle_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallRequest::~CallRequest() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.CallRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sdp_.Destroy();
}

void CallRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.CallRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sdp_.ClearToEmpty();
  _impl_.disable_trickle_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sdp = 1 [json_name = "sdp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sdp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.CallRequest.sdp"));
        } else
          goto handle_unusual;
        continue;
      // bool disable_trickle = 2 [json_name = "disableTrickle"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.disable_trickle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.CallRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sdp = 1 [json_name = "sdp"];
  if (!this->_internal_sdp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdp().data(), static_cast<int>(this->_internal_sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.CallRequest.sdp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sdp(), target);
  }

  // bool disable_trickle = 2 [json_name = "disableTrickle"];
  if (this->_internal_disable_trickle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_disable_trickle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.CallRequest)
  return target;
}

size_t CallRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.CallRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sdp = 1 [json_name = "sdp"];
  if (!this->_internal_sdp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdp());
  }

  // bool disable_trickle = 2 [json_name = "disableTrickle"];
  if (this->_internal_disable_trickle() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallRequest::GetClassData() const { return &_class_data_; }


void CallRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallRequest*>(&to_msg);
  auto& from = static_cast<const CallRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.CallRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sdp().empty()) {
    _this->_internal_set_sdp(from._internal_sdp());
  }
  if (from._internal_disable_trickle() != 0) {
    _this->_internal_set_disable_trickle(from._internal_disable_trickle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallRequest::CopyFrom(const CallRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.CallRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallRequest::IsInitialized() const {
  return true;
}

void CallRequest::InternalSwap(CallRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdp_, lhs_arena,
      &other->_impl_.sdp_, rhs_arena
  );
  swap(_impl_.disable_trickle_, other->_impl_.disable_trickle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[1]);
}

// ===================================================================

class CallResponseInitStage::_Internal {
 public:
};

CallResponseInitStage::CallResponseInitStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.CallResponseInitStage)
}
CallResponseInitStage::CallResponseInitStage(const CallResponseInitStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallResponseInitStage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sdp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdp().empty()) {
    _this->_impl_.sdp_.Set(from._internal_sdp(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.CallResponseInitStage)
}

inline void CallResponseInitStage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sdp_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallResponseInitStage::~CallResponseInitStage() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.CallResponseInitStage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallResponseInitStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sdp_.Destroy();
}

void CallResponseInitStage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallResponseInitStage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.CallResponseInitStage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sdp_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallResponseInitStage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sdp = 1 [json_name = "sdp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sdp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.CallResponseInitStage.sdp"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallResponseInitStage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.CallResponseInitStage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sdp = 1 [json_name = "sdp"];
  if (!this->_internal_sdp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdp().data(), static_cast<int>(this->_internal_sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.CallResponseInitStage.sdp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sdp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.CallResponseInitStage)
  return target;
}

size_t CallResponseInitStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.CallResponseInitStage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sdp = 1 [json_name = "sdp"];
  if (!this->_internal_sdp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallResponseInitStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallResponseInitStage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallResponseInitStage::GetClassData() const { return &_class_data_; }


void CallResponseInitStage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallResponseInitStage*>(&to_msg);
  auto& from = static_cast<const CallResponseInitStage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.CallResponseInitStage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sdp().empty()) {
    _this->_internal_set_sdp(from._internal_sdp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallResponseInitStage::CopyFrom(const CallResponseInitStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.CallResponseInitStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallResponseInitStage::IsInitialized() const {
  return true;
}

void CallResponseInitStage::InternalSwap(CallResponseInitStage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdp_, lhs_arena,
      &other->_impl_.sdp_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CallResponseInitStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[2]);
}

// ===================================================================

class CallResponseUpdateStage::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::ICECandidate& candidate(const CallResponseUpdateStage* msg);
};

const ::proto::rpc::webrtc::v1::ICECandidate&
CallResponseUpdateStage::_Internal::candidate(const CallResponseUpdateStage* msg) {
  return *msg->_impl_.candidate_;
}
CallResponseUpdateStage::CallResponseUpdateStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.CallResponseUpdateStage)
}
CallResponseUpdateStage::CallResponseUpdateStage(const CallResponseUpdateStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallResponseUpdateStage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.candidate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_candidate()) {
    _this->_impl_.candidate_ = new ::proto::rpc::webrtc::v1::ICECandidate(*from._impl_.candidate_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.CallResponseUpdateStage)
}

inline void CallResponseUpdateStage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.candidate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CallResponseUpdateStage::~CallResponseUpdateStage() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.CallResponseUpdateStage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallResponseUpdateStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.candidate_;
}

void CallResponseUpdateStage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallResponseUpdateStage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.CallResponseUpdateStage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.candidate_ != nullptr) {
    delete _impl_.candidate_;
  }
  _impl_.candidate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallResponseUpdateStage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.rpc.webrtc.v1.ICECandidate candidate = 1 [json_name = "candidate"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallResponseUpdateStage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.CallResponseUpdateStage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.ICECandidate candidate = 1 [json_name = "candidate"];
  if (this->_internal_has_candidate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::candidate(this),
        _Internal::candidate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.CallResponseUpdateStage)
  return target;
}

size_t CallResponseUpdateStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.CallResponseUpdateStage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.ICECandidate candidate = 1 [json_name = "candidate"];
  if (this->_internal_has_candidate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.candidate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallResponseUpdateStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallResponseUpdateStage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallResponseUpdateStage::GetClassData() const { return &_class_data_; }


void CallResponseUpdateStage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallResponseUpdateStage*>(&to_msg);
  auto& from = static_cast<const CallResponseUpdateStage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.CallResponseUpdateStage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_candidate()) {
    _this->_internal_mutable_candidate()->::proto::rpc::webrtc::v1::ICECandidate::MergeFrom(
        from._internal_candidate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallResponseUpdateStage::CopyFrom(const CallResponseUpdateStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.CallResponseUpdateStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallResponseUpdateStage::IsInitialized() const {
  return true;
}

void CallResponseUpdateStage::InternalSwap(CallResponseUpdateStage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.candidate_, other->_impl_.candidate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallResponseUpdateStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[3]);
}

// ===================================================================

class CallResponse::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::CallResponseInitStage& init(const CallResponse* msg);
  static const ::proto::rpc::webrtc::v1::CallResponseUpdateStage& update(const CallResponse* msg);
};

const ::proto::rpc::webrtc::v1::CallResponseInitStage&
CallResponse::_Internal::init(const CallResponse* msg) {
  return *msg->_impl_.stage_.init_;
}
const ::proto::rpc::webrtc::v1::CallResponseUpdateStage&
CallResponse::_Internal::update(const CallResponse* msg) {
  return *msg->_impl_.stage_.update_;
}
void CallResponse::set_allocated_init(::proto::rpc::webrtc::v1::CallResponseInitStage* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(init);
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
    _impl_.stage_.init_ = init;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.CallResponse.init)
}
void CallResponse::set_allocated_update(::proto::rpc::webrtc::v1::CallResponseUpdateStage* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    _impl_.stage_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.CallResponse.update)
}
CallResponse::CallResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.CallResponse)
}
CallResponse::CallResponse(const CallResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.stage_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  clear_has_stage();
  switch (from.stage_case()) {
    case kInit: {
      _this->_internal_mutable_init()->::proto::rpc::webrtc::v1::CallResponseInitStage::MergeFrom(
          from._internal_init());
      break;
    }
    case kUpdate: {
      _this->_internal_mutable_update()->::proto::rpc::webrtc::v1::CallResponseUpdateStage::MergeFrom(
          from._internal_update());
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.CallResponse)
}

inline void CallResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.stage_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_stage();
}

CallResponse::~CallResponse() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.CallResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  if (has_stage()) {
    clear_stage();
  }
}

void CallResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallResponse::clear_stage() {
// @@protoc_insertion_point(one_of_clear_start:proto.rpc.webrtc.v1.CallResponse)
  switch (stage_case()) {
    case kInit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stage_.init_;
      }
      break;
    }
    case kUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stage_.update_;
      }
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STAGE_NOT_SET;
}


void CallResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.CallResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  clear_stage();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1 [json_name = "uuid"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.CallResponse.uuid"));
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.CallResponseInitStage init = 2 [json_name = "init"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.CallResponseUpdateStage update = 3 [json_name = "update"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.CallResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.CallResponse.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // .proto.rpc.webrtc.v1.CallResponseInitStage init = 2 [json_name = "init"];
  if (_internal_has_init()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::init(this),
        _Internal::init(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.CallResponseUpdateStage update = 3 [json_name = "update"];
  if (_internal_has_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::update(this),
        _Internal::update(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.CallResponse)
  return target;
}

size_t CallResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.CallResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  switch (stage_case()) {
    // .proto.rpc.webrtc.v1.CallResponseInitStage init = 2 [json_name = "init"];
    case kInit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stage_.init_);
      break;
    }
    // .proto.rpc.webrtc.v1.CallResponseUpdateStage update = 3 [json_name = "update"];
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stage_.update_);
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallResponse::GetClassData() const { return &_class_data_; }


void CallResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallResponse*>(&to_msg);
  auto& from = static_cast<const CallResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.CallResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  switch (from.stage_case()) {
    case kInit: {
      _this->_internal_mutable_init()->::proto::rpc::webrtc::v1::CallResponseInitStage::MergeFrom(
          from._internal_init());
      break;
    }
    case kUpdate: {
      _this->_internal_mutable_update()->::proto::rpc::webrtc::v1::CallResponseUpdateStage::MergeFrom(
          from._internal_update());
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallResponse::CopyFrom(const CallResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.CallResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallResponse::IsInitialized() const {
  return true;
}

void CallResponse::InternalSwap(CallResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  swap(_impl_.stage_, other->_impl_.stage_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[4]);
}

// ===================================================================

class CallUpdateRequest::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::ICECandidate& candidate(const CallUpdateRequest* msg);
  static const ::google::rpc::Status& error(const CallUpdateRequest* msg);
};

const ::proto::rpc::webrtc::v1::ICECandidate&
CallUpdateRequest::_Internal::candidate(const CallUpdateRequest* msg) {
  return *msg->_impl_.update_.candidate_;
}
const ::google::rpc::Status&
CallUpdateRequest::_Internal::error(const CallUpdateRequest* msg) {
  return *msg->_impl_.update_.error_;
}
void CallUpdateRequest::set_allocated_candidate(::proto::rpc::webrtc::v1::ICECandidate* candidate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (candidate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(candidate);
    if (message_arena != submessage_arena) {
      candidate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, candidate, submessage_arena);
    }
    set_has_candidate();
    _impl_.update_.candidate_ = candidate;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.CallUpdateRequest.candidate)
}
void CallUpdateRequest::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.update_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.CallUpdateRequest.error)
}
void CallUpdateRequest::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_.error_;
    }
    clear_has_update();
  }
}
CallUpdateRequest::CallUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.CallUpdateRequest)
}
CallUpdateRequest::CallUpdateRequest(const CallUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallUpdateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.update_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  clear_has_update();
  switch (from.update_case()) {
    case kCandidate: {
      _this->_internal_mutable_candidate()->::proto::rpc::webrtc::v1::ICECandidate::MergeFrom(
          from._internal_candidate());
      break;
    }
    case kDone: {
      _this->_internal_set_done(from._internal_done());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::google::rpc::Status::MergeFrom(
          from._internal_error());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.CallUpdateRequest)
}

inline void CallUpdateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.update_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_update();
}

CallUpdateRequest::~CallUpdateRequest() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.CallUpdateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallUpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  if (has_update()) {
    clear_update();
  }
}

void CallUpdateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallUpdateRequest::clear_update() {
// @@protoc_insertion_point(one_of_clear_start:proto.rpc.webrtc.v1.CallUpdateRequest)
  switch (update_case()) {
    case kCandidate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_.candidate_;
      }
      break;
    }
    case kDone: {
      // No need to clear
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_.error_;
      }
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = UPDATE_NOT_SET;
}


void CallUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.CallUpdateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  clear_update();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallUpdateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1 [json_name = "uuid"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.CallUpdateRequest.uuid"));
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.ICECandidate candidate = 2 [json_name = "candidate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool done = 3 [json_name = "done"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_done(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.Status error = 4 [json_name = "error"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallUpdateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.CallUpdateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.CallUpdateRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // .proto.rpc.webrtc.v1.ICECandidate candidate = 2 [json_name = "candidate"];
  if (_internal_has_candidate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::candidate(this),
        _Internal::candidate(this).GetCachedSize(), target, stream);
  }

  // bool done = 3 [json_name = "done"];
  if (_internal_has_done()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_done(), target);
  }

  // .google.rpc.Status error = 4 [json_name = "error"];
  if (_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.CallUpdateRequest)
  return target;
}

size_t CallUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.CallUpdateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  switch (update_case()) {
    // .proto.rpc.webrtc.v1.ICECandidate candidate = 2 [json_name = "candidate"];
    case kCandidate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_.candidate_);
      break;
    }
    // bool done = 3 [json_name = "done"];
    case kDone: {
      total_size += 1 + 1;
      break;
    }
    // .google.rpc.Status error = 4 [json_name = "error"];
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_.error_);
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallUpdateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallUpdateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallUpdateRequest::GetClassData() const { return &_class_data_; }


void CallUpdateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallUpdateRequest*>(&to_msg);
  auto& from = static_cast<const CallUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.CallUpdateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  switch (from.update_case()) {
    case kCandidate: {
      _this->_internal_mutable_candidate()->::proto::rpc::webrtc::v1::ICECandidate::MergeFrom(
          from._internal_candidate());
      break;
    }
    case kDone: {
      _this->_internal_set_done(from._internal_done());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::google::rpc::Status::MergeFrom(
          from._internal_error());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallUpdateRequest::CopyFrom(const CallUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.CallUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallUpdateRequest::IsInitialized() const {
  return true;
}

void CallUpdateRequest::InternalSwap(CallUpdateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  swap(_impl_.update_, other->_impl_.update_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CallUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[5]);
}

// ===================================================================

class CallUpdateResponse::_Internal {
 public:
};

CallUpdateResponse::CallUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.CallUpdateResponse)
}
CallUpdateResponse::CallUpdateResponse(const CallUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CallUpdateResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.CallUpdateResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallUpdateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallUpdateResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CallUpdateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[6]);
}

// ===================================================================

class ICEServer::_Internal {
 public:
};

ICEServer::ICEServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.ICEServer)
}
ICEServer::ICEServer(const ICEServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ICEServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.urls_){from._impl_.urls_}
    , decltype(_impl_.username_){}
    , decltype(_impl_.credential_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.credential_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.credential_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_credential().empty()) {
    _this->_impl_.credential_.Set(from._internal_credential(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.ICEServer)
}

inline void ICEServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.urls_){arena}
    , decltype(_impl_.username_){}
    , decltype(_impl_.credential_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.credential_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.credential_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ICEServer::~ICEServer() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.ICEServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ICEServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.urls_.~RepeatedPtrField();
  _impl_.username_.Destroy();
  _impl_.credential_.Destroy();
}

void ICEServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ICEServer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.ICEServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.urls_.Clear();
  _impl_.username_.ClearToEmpty();
  _impl_.credential_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ICEServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string urls = 1 [json_name = "urls"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_urls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.ICEServer.urls"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string username = 2 [json_name = "username"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.ICEServer.username"));
        } else
          goto handle_unusual;
        continue;
      // string credential = 3 [json_name = "credential"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_credential();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.ICEServer.credential"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ICEServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.ICEServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string urls = 1 [json_name = "urls"];
  for (int i = 0, n = this->_internal_urls_size(); i < n; i++) {
    const auto& s = this->_internal_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.ICEServer.urls");
    target = stream->WriteString(1, s, target);
  }

  // string username = 2 [json_name = "username"];
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.ICEServer.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string credential = 3 [json_name = "credential"];
  if (!this->_internal_credential().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_credential().data(), static_cast<int>(this->_internal_credential().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.ICEServer.credential");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_credential(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.ICEServer)
  return target;
}

size_t ICEServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.ICEServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string urls = 1 [json_name = "urls"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.urls_.size());
  for (int i = 0, n = _impl_.urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.urls_.Get(i));
  }

  // string username = 2 [json_name = "username"];
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string credential = 3 [json_name = "credential"];
  if (!this->_internal_credential().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_credential());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ICEServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ICEServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ICEServer::GetClassData() const { return &_class_data_; }


void ICEServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ICEServer*>(&to_msg);
  auto& from = static_cast<const ICEServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.ICEServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.urls_.MergeFrom(from._impl_.urls_);
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_credential().empty()) {
    _this->_internal_set_credential(from._internal_credential());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ICEServer::CopyFrom(const ICEServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.ICEServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ICEServer::IsInitialized() const {
  return true;
}

void ICEServer::InternalSwap(ICEServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.urls_.InternalSwap(&other->_impl_.urls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.credential_, lhs_arena,
      &other->_impl_.credential_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ICEServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[7]);
}

// ===================================================================

class WebRTCConfig::_Internal {
 public:
};

WebRTCConfig::WebRTCConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.WebRTCConfig)
}
WebRTCConfig::WebRTCConfig(const WebRTCConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WebRTCConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_ice_servers_){from._impl_.additional_ice_servers_}
    , decltype(_impl_.disable_trickle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.disable_trickle_ = from._impl_.disable_trickle_;
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.WebRTCConfig)
}

inline void WebRTCConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.additional_ice_servers_){arena}
    , decltype(_impl_.disable_trickle_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WebRTCConfig::~WebRTCConfig() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.WebRTCConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebRTCConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.additional_ice_servers_.~RepeatedPtrField();
}

void WebRTCConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WebRTCConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.WebRTCConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.additional_ice_servers_.Clear();
  _impl_.disable_trickle_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WebRTCConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.rpc.webrtc.v1.ICEServer additional_ice_servers = 1 [json_name = "additionalIceServers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_additional_ice_servers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool disable_trickle = 2 [json_name = "disableTrickle"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.disable_trickle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebRTCConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.WebRTCConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.rpc.webrtc.v1.ICEServer additional_ice_servers = 1 [json_name = "additionalIceServers"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_additional_ice_servers_size()); i < n; i++) {
    const auto& repfield = this->_internal_additional_ice_servers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool disable_trickle = 2 [json_name = "disableTrickle"];
  if (this->_internal_disable_trickle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_disable_trickle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.WebRTCConfig)
  return target;
}

size_t WebRTCConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.WebRTCConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.rpc.webrtc.v1.ICEServer additional_ice_servers = 1 [json_name = "additionalIceServers"];
  total_size += 1UL * this->_internal_additional_ice_servers_size();
  for (const auto& msg : this->_impl_.additional_ice_servers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool disable_trickle = 2 [json_name = "disableTrickle"];
  if (this->_internal_disable_trickle() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WebRTCConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WebRTCConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WebRTCConfig::GetClassData() const { return &_class_data_; }


void WebRTCConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WebRTCConfig*>(&to_msg);
  auto& from = static_cast<const WebRTCConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.WebRTCConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.additional_ice_servers_.MergeFrom(from._impl_.additional_ice_servers_);
  if (from._internal_disable_trickle() != 0) {
    _this->_internal_set_disable_trickle(from._internal_disable_trickle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WebRTCConfig::CopyFrom(const WebRTCConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.WebRTCConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebRTCConfig::IsInitialized() const {
  return true;
}

void WebRTCConfig::InternalSwap(WebRTCConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.additional_ice_servers_.InternalSwap(&other->_impl_.additional_ice_servers_);
  swap(_impl_.disable_trickle_, other->_impl_.disable_trickle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WebRTCConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[8]);
}

// ===================================================================

class AnswerRequestInitStage::_Internal {
 public:
  using HasBits = decltype(std::declval<AnswerRequestInitStage>()._impl_._has_bits_);
  static const ::proto::rpc::webrtc::v1::WebRTCConfig& optional_config(const AnswerRequestInitStage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& deadline(const AnswerRequestInitStage* msg);
  static void set_has_deadline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::proto::rpc::webrtc::v1::WebRTCConfig&
AnswerRequestInitStage::_Internal::optional_config(const AnswerRequestInitStage* msg) {
  return *msg->_impl_.optional_config_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AnswerRequestInitStage::_Internal::deadline(const AnswerRequestInitStage* msg) {
  return *msg->_impl_.deadline_;
}
void AnswerRequestInitStage::clear_deadline() {
  if (_impl_.deadline_ != nullptr) _impl_.deadline_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AnswerRequestInitStage::AnswerRequestInitStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.AnswerRequestInitStage)
}
AnswerRequestInitStage::AnswerRequestInitStage(const AnswerRequestInitStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnswerRequestInitStage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sdp_){}
    , decltype(_impl_.optional_config_){nullptr}
    , decltype(_impl_.deadline_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdp().empty()) {
    _this->_impl_.sdp_.Set(from._internal_sdp(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_optional_config()) {
    _this->_impl_.optional_config_ = new ::proto::rpc::webrtc::v1::WebRTCConfig(*from._impl_.optional_config_);
  }
  if (from._internal_has_deadline()) {
    _this->_impl_.deadline_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.deadline_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.AnswerRequestInitStage)
}

inline void AnswerRequestInitStage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sdp_){}
    , decltype(_impl_.optional_config_){nullptr}
    , decltype(_impl_.deadline_){nullptr}
  };
  _impl_.sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AnswerRequestInitStage::~AnswerRequestInitStage() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.AnswerRequestInitStage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnswerRequestInitStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sdp_.Destroy();
  if (this != internal_default_instance()) delete _impl_.optional_config_;
  if (this != internal_default_instance()) delete _impl_.deadline_;
}

void AnswerRequestInitStage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnswerRequestInitStage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.AnswerRequestInitStage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sdp_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.optional_config_ != nullptr) {
    delete _impl_.optional_config_;
  }
  _impl_.optional_config_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.deadline_ != nullptr);
    _impl_.deadline_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerRequestInitStage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sdp = 1 [json_name = "sdp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sdp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.AnswerRequestInitStage.sdp"));
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.WebRTCConfig optional_config = 2 [json_name = "optionalConfig"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .google.protobuf.Timestamp deadline = 3 [json_name = "deadline"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deadline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnswerRequestInitStage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.AnswerRequestInitStage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sdp = 1 [json_name = "sdp"];
  if (!this->_internal_sdp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdp().data(), static_cast<int>(this->_internal_sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.AnswerRequestInitStage.sdp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sdp(), target);
  }

  // .proto.rpc.webrtc.v1.WebRTCConfig optional_config = 2 [json_name = "optionalConfig"];
  if (this->_internal_has_optional_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::optional_config(this),
        _Internal::optional_config(this).GetCachedSize(), target, stream);
  }

  // optional .google.protobuf.Timestamp deadline = 3 [json_name = "deadline"];
  if (_internal_has_deadline()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::deadline(this),
        _Internal::deadline(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.AnswerRequestInitStage)
  return target;
}

size_t AnswerRequestInitStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.AnswerRequestInitStage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sdp = 1 [json_name = "sdp"];
  if (!this->_internal_sdp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdp());
  }

  // .proto.rpc.webrtc.v1.WebRTCConfig optional_config = 2 [json_name = "optionalConfig"];
  if (this->_internal_has_optional_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.optional_config_);
  }

  // optional .google.protobuf.Timestamp deadline = 3 [json_name = "deadline"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deadline_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerRequestInitStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnswerRequestInitStage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerRequestInitStage::GetClassData() const { return &_class_data_; }


void AnswerRequestInitStage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnswerRequestInitStage*>(&to_msg);
  auto& from = static_cast<const AnswerRequestInitStage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.AnswerRequestInitStage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sdp().empty()) {
    _this->_internal_set_sdp(from._internal_sdp());
  }
  if (from._internal_has_optional_config()) {
    _this->_internal_mutable_optional_config()->::proto::rpc::webrtc::v1::WebRTCConfig::MergeFrom(
        from._internal_optional_config());
  }
  if (from._internal_has_deadline()) {
    _this->_internal_mutable_deadline()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_deadline());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnswerRequestInitStage::CopyFrom(const AnswerRequestInitStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.AnswerRequestInitStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerRequestInitStage::IsInitialized() const {
  return true;
}

void AnswerRequestInitStage::InternalSwap(AnswerRequestInitStage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdp_, lhs_arena,
      &other->_impl_.sdp_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnswerRequestInitStage, _impl_.deadline_)
      + sizeof(AnswerRequestInitStage::_impl_.deadline_)
      - PROTOBUF_FIELD_OFFSET(AnswerRequestInitStage, _impl_.optional_config_)>(
          reinterpret_cast<char*>(&_impl_.optional_config_),
          reinterpret_cast<char*>(&other->_impl_.optional_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerRequestInitStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[9]);
}

// ===================================================================

class AnswerRequestUpdateStage::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::ICECandidate& candidate(const AnswerRequestUpdateStage* msg);
};

const ::proto::rpc::webrtc::v1::ICECandidate&
AnswerRequestUpdateStage::_Internal::candidate(const AnswerRequestUpdateStage* msg) {
  return *msg->_impl_.candidate_;
}
AnswerRequestUpdateStage::AnswerRequestUpdateStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.AnswerRequestUpdateStage)
}
AnswerRequestUpdateStage::AnswerRequestUpdateStage(const AnswerRequestUpdateStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnswerRequestUpdateStage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.candidate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_candidate()) {
    _this->_impl_.candidate_ = new ::proto::rpc::webrtc::v1::ICECandidate(*from._impl_.candidate_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.AnswerRequestUpdateStage)
}

inline void AnswerRequestUpdateStage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.candidate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnswerRequestUpdateStage::~AnswerRequestUpdateStage() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.AnswerRequestUpdateStage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnswerRequestUpdateStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.candidate_;
}

void AnswerRequestUpdateStage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnswerRequestUpdateStage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.AnswerRequestUpdateStage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.candidate_ != nullptr) {
    delete _impl_.candidate_;
  }
  _impl_.candidate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerRequestUpdateStage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.rpc.webrtc.v1.ICECandidate candidate = 1 [json_name = "candidate"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnswerRequestUpdateStage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.AnswerRequestUpdateStage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.ICECandidate candidate = 1 [json_name = "candidate"];
  if (this->_internal_has_candidate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::candidate(this),
        _Internal::candidate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.AnswerRequestUpdateStage)
  return target;
}

size_t AnswerRequestUpdateStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.AnswerRequestUpdateStage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.ICECandidate candidate = 1 [json_name = "candidate"];
  if (this->_internal_has_candidate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.candidate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerRequestUpdateStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnswerRequestUpdateStage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerRequestUpdateStage::GetClassData() const { return &_class_data_; }


void AnswerRequestUpdateStage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnswerRequestUpdateStage*>(&to_msg);
  auto& from = static_cast<const AnswerRequestUpdateStage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.AnswerRequestUpdateStage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_candidate()) {
    _this->_internal_mutable_candidate()->::proto::rpc::webrtc::v1::ICECandidate::MergeFrom(
        from._internal_candidate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnswerRequestUpdateStage::CopyFrom(const AnswerRequestUpdateStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.AnswerRequestUpdateStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerRequestUpdateStage::IsInitialized() const {
  return true;
}

void AnswerRequestUpdateStage::InternalSwap(AnswerRequestUpdateStage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.candidate_, other->_impl_.candidate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerRequestUpdateStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[10]);
}

// ===================================================================

class AnswerRequestDoneStage::_Internal {
 public:
};

AnswerRequestDoneStage::AnswerRequestDoneStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.AnswerRequestDoneStage)
}
AnswerRequestDoneStage::AnswerRequestDoneStage(const AnswerRequestDoneStage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AnswerRequestDoneStage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.AnswerRequestDoneStage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerRequestDoneStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerRequestDoneStage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AnswerRequestDoneStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[11]);
}

// ===================================================================

class AnswerRequestErrorStage::_Internal {
 public:
  static const ::google::rpc::Status& status(const AnswerRequestErrorStage* msg);
};

const ::google::rpc::Status&
AnswerRequestErrorStage::_Internal::status(const AnswerRequestErrorStage* msg) {
  return *msg->_impl_.status_;
}
void AnswerRequestErrorStage::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
AnswerRequestErrorStage::AnswerRequestErrorStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.AnswerRequestErrorStage)
}
AnswerRequestErrorStage::AnswerRequestErrorStage(const AnswerRequestErrorStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnswerRequestErrorStage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::google::rpc::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.AnswerRequestErrorStage)
}

inline void AnswerRequestErrorStage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnswerRequestErrorStage::~AnswerRequestErrorStage() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.AnswerRequestErrorStage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnswerRequestErrorStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void AnswerRequestErrorStage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnswerRequestErrorStage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.AnswerRequestErrorStage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerRequestErrorStage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.rpc.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnswerRequestErrorStage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.AnswerRequestErrorStage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.AnswerRequestErrorStage)
  return target;
}

size_t AnswerRequestErrorStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.AnswerRequestErrorStage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.rpc.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerRequestErrorStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnswerRequestErrorStage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerRequestErrorStage::GetClassData() const { return &_class_data_; }


void AnswerRequestErrorStage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnswerRequestErrorStage*>(&to_msg);
  auto& from = static_cast<const AnswerRequestErrorStage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.AnswerRequestErrorStage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::google::rpc::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnswerRequestErrorStage::CopyFrom(const AnswerRequestErrorStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.AnswerRequestErrorStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerRequestErrorStage::IsInitialized() const {
  return true;
}

void AnswerRequestErrorStage::InternalSwap(AnswerRequestErrorStage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerRequestErrorStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[12]);
}

// ===================================================================

class AnswerRequest::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::AnswerRequestInitStage& init(const AnswerRequest* msg);
  static const ::proto::rpc::webrtc::v1::AnswerRequestUpdateStage& update(const AnswerRequest* msg);
  static const ::proto::rpc::webrtc::v1::AnswerRequestDoneStage& done(const AnswerRequest* msg);
  static const ::proto::rpc::webrtc::v1::AnswerRequestErrorStage& error(const AnswerRequest* msg);
};

const ::proto::rpc::webrtc::v1::AnswerRequestInitStage&
AnswerRequest::_Internal::init(const AnswerRequest* msg) {
  return *msg->_impl_.stage_.init_;
}
const ::proto::rpc::webrtc::v1::AnswerRequestUpdateStage&
AnswerRequest::_Internal::update(const AnswerRequest* msg) {
  return *msg->_impl_.stage_.update_;
}
const ::proto::rpc::webrtc::v1::AnswerRequestDoneStage&
AnswerRequest::_Internal::done(const AnswerRequest* msg) {
  return *msg->_impl_.stage_.done_;
}
const ::proto::rpc::webrtc::v1::AnswerRequestErrorStage&
AnswerRequest::_Internal::error(const AnswerRequest* msg) {
  return *msg->_impl_.stage_.error_;
}
void AnswerRequest::set_allocated_init(::proto::rpc::webrtc::v1::AnswerRequestInitStage* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(init);
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
    _impl_.stage_.init_ = init;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.AnswerRequest.init)
}
void AnswerRequest::set_allocated_update(::proto::rpc::webrtc::v1::AnswerRequestUpdateStage* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    _impl_.stage_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.AnswerRequest.update)
}
void AnswerRequest::set_allocated_done(::proto::rpc::webrtc::v1::AnswerRequestDoneStage* done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(done);
    if (message_arena != submessage_arena) {
      done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, done, submessage_arena);
    }
    set_has_done();
    _impl_.stage_.done_ = done;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.AnswerRequest.done)
}
void AnswerRequest::set_allocated_error(::proto::rpc::webrtc::v1::AnswerRequestErrorStage* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.stage_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.AnswerRequest.error)
}
AnswerRequest::AnswerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.AnswerRequest)
}
AnswerRequest::AnswerRequest(const AnswerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnswerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.stage_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  clear_has_stage();
  switch (from.stage_case()) {
    case kInit: {
      _this->_internal_mutable_init()->::proto::rpc::webrtc::v1::AnswerRequestInitStage::MergeFrom(
          from._internal_init());
      break;
    }
    case kUpdate: {
      _this->_internal_mutable_update()->::proto::rpc::webrtc::v1::AnswerRequestUpdateStage::MergeFrom(
          from._internal_update());
      break;
    }
    case kDone: {
      _this->_internal_mutable_done()->::proto::rpc::webrtc::v1::AnswerRequestDoneStage::MergeFrom(
          from._internal_done());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::proto::rpc::webrtc::v1::AnswerRequestErrorStage::MergeFrom(
          from._internal_error());
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.AnswerRequest)
}

inline void AnswerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.stage_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_stage();
}

AnswerRequest::~AnswerRequest() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.AnswerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnswerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  if (has_stage()) {
    clear_stage();
  }
}

void AnswerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnswerRequest::clear_stage() {
// @@protoc_insertion_point(one_of_clear_start:proto.rpc.webrtc.v1.AnswerRequest)
  switch (stage_case()) {
    case kInit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stage_.init_;
      }
      break;
    }
    case kUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stage_.update_;
      }
      break;
    }
    case kDone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stage_.done_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stage_.error_;
      }
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STAGE_NOT_SET;
}


void AnswerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.AnswerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  clear_stage();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1 [json_name = "uuid"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.AnswerRequest.uuid"));
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.AnswerRequestInitStage init = 2 [json_name = "init"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.AnswerRequestUpdateStage update = 3 [json_name = "update"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.AnswerRequestDoneStage done = 4 [json_name = "done"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_done(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.AnswerRequestErrorStage error = 5 [json_name = "error"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnswerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.AnswerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.AnswerRequest.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // .proto.rpc.webrtc.v1.AnswerRequestInitStage init = 2 [json_name = "init"];
  if (_internal_has_init()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::init(this),
        _Internal::init(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.AnswerRequestUpdateStage update = 3 [json_name = "update"];
  if (_internal_has_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::update(this),
        _Internal::update(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.AnswerRequestDoneStage done = 4 [json_name = "done"];
  if (_internal_has_done()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::done(this),
        _Internal::done(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.AnswerRequestErrorStage error = 5 [json_name = "error"];
  if (_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.AnswerRequest)
  return target;
}

size_t AnswerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.AnswerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  switch (stage_case()) {
    // .proto.rpc.webrtc.v1.AnswerRequestInitStage init = 2 [json_name = "init"];
    case kInit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stage_.init_);
      break;
    }
    // .proto.rpc.webrtc.v1.AnswerRequestUpdateStage update = 3 [json_name = "update"];
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stage_.update_);
      break;
    }
    // .proto.rpc.webrtc.v1.AnswerRequestDoneStage done = 4 [json_name = "done"];
    case kDone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stage_.done_);
      break;
    }
    // .proto.rpc.webrtc.v1.AnswerRequestErrorStage error = 5 [json_name = "error"];
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stage_.error_);
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnswerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerRequest::GetClassData() const { return &_class_data_; }


void AnswerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnswerRequest*>(&to_msg);
  auto& from = static_cast<const AnswerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.AnswerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  switch (from.stage_case()) {
    case kInit: {
      _this->_internal_mutable_init()->::proto::rpc::webrtc::v1::AnswerRequestInitStage::MergeFrom(
          from._internal_init());
      break;
    }
    case kUpdate: {
      _this->_internal_mutable_update()->::proto::rpc::webrtc::v1::AnswerRequestUpdateStage::MergeFrom(
          from._internal_update());
      break;
    }
    case kDone: {
      _this->_internal_mutable_done()->::proto::rpc::webrtc::v1::AnswerRequestDoneStage::MergeFrom(
          from._internal_done());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::proto::rpc::webrtc::v1::AnswerRequestErrorStage::MergeFrom(
          from._internal_error());
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnswerRequest::CopyFrom(const AnswerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.AnswerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerRequest::IsInitialized() const {
  return true;
}

void AnswerRequest::InternalSwap(AnswerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  swap(_impl_.stage_, other->_impl_.stage_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[13]);
}

// ===================================================================

class AnswerResponseInitStage::_Internal {
 public:
};

AnswerResponseInitStage::AnswerResponseInitStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.AnswerResponseInitStage)
}
AnswerResponseInitStage::AnswerResponseInitStage(const AnswerResponseInitStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnswerResponseInitStage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sdp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sdp().empty()) {
    _this->_impl_.sdp_.Set(from._internal_sdp(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.AnswerResponseInitStage)
}

inline void AnswerResponseInitStage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sdp_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sdp_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sdp_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AnswerResponseInitStage::~AnswerResponseInitStage() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.AnswerResponseInitStage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnswerResponseInitStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sdp_.Destroy();
}

void AnswerResponseInitStage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnswerResponseInitStage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.AnswerResponseInitStage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sdp_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerResponseInitStage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sdp = 1 [json_name = "sdp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sdp();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.AnswerResponseInitStage.sdp"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnswerResponseInitStage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.AnswerResponseInitStage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sdp = 1 [json_name = "sdp"];
  if (!this->_internal_sdp().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sdp().data(), static_cast<int>(this->_internal_sdp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.AnswerResponseInitStage.sdp");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sdp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.AnswerResponseInitStage)
  return target;
}

size_t AnswerResponseInitStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.AnswerResponseInitStage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sdp = 1 [json_name = "sdp"];
  if (!this->_internal_sdp().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sdp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerResponseInitStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnswerResponseInitStage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerResponseInitStage::GetClassData() const { return &_class_data_; }


void AnswerResponseInitStage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnswerResponseInitStage*>(&to_msg);
  auto& from = static_cast<const AnswerResponseInitStage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.AnswerResponseInitStage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sdp().empty()) {
    _this->_internal_set_sdp(from._internal_sdp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnswerResponseInitStage::CopyFrom(const AnswerResponseInitStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.AnswerResponseInitStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerResponseInitStage::IsInitialized() const {
  return true;
}

void AnswerResponseInitStage::InternalSwap(AnswerResponseInitStage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sdp_, lhs_arena,
      &other->_impl_.sdp_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerResponseInitStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[14]);
}

// ===================================================================

class AnswerResponseUpdateStage::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::ICECandidate& candidate(const AnswerResponseUpdateStage* msg);
};

const ::proto::rpc::webrtc::v1::ICECandidate&
AnswerResponseUpdateStage::_Internal::candidate(const AnswerResponseUpdateStage* msg) {
  return *msg->_impl_.candidate_;
}
AnswerResponseUpdateStage::AnswerResponseUpdateStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.AnswerResponseUpdateStage)
}
AnswerResponseUpdateStage::AnswerResponseUpdateStage(const AnswerResponseUpdateStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnswerResponseUpdateStage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.candidate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_candidate()) {
    _this->_impl_.candidate_ = new ::proto::rpc::webrtc::v1::ICECandidate(*from._impl_.candidate_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.AnswerResponseUpdateStage)
}

inline void AnswerResponseUpdateStage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.candidate_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnswerResponseUpdateStage::~AnswerResponseUpdateStage() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.AnswerResponseUpdateStage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnswerResponseUpdateStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.candidate_;
}

void AnswerResponseUpdateStage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnswerResponseUpdateStage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.AnswerResponseUpdateStage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.candidate_ != nullptr) {
    delete _impl_.candidate_;
  }
  _impl_.candidate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerResponseUpdateStage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.rpc.webrtc.v1.ICECandidate candidate = 1 [json_name = "candidate"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_candidate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnswerResponseUpdateStage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.AnswerResponseUpdateStage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.ICECandidate candidate = 1 [json_name = "candidate"];
  if (this->_internal_has_candidate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::candidate(this),
        _Internal::candidate(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.AnswerResponseUpdateStage)
  return target;
}

size_t AnswerResponseUpdateStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.AnswerResponseUpdateStage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.ICECandidate candidate = 1 [json_name = "candidate"];
  if (this->_internal_has_candidate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.candidate_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerResponseUpdateStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnswerResponseUpdateStage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerResponseUpdateStage::GetClassData() const { return &_class_data_; }


void AnswerResponseUpdateStage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnswerResponseUpdateStage*>(&to_msg);
  auto& from = static_cast<const AnswerResponseUpdateStage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.AnswerResponseUpdateStage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_candidate()) {
    _this->_internal_mutable_candidate()->::proto::rpc::webrtc::v1::ICECandidate::MergeFrom(
        from._internal_candidate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnswerResponseUpdateStage::CopyFrom(const AnswerResponseUpdateStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.AnswerResponseUpdateStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerResponseUpdateStage::IsInitialized() const {
  return true;
}

void AnswerResponseUpdateStage::InternalSwap(AnswerResponseUpdateStage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.candidate_, other->_impl_.candidate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerResponseUpdateStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[15]);
}

// ===================================================================

class AnswerResponseDoneStage::_Internal {
 public:
};

AnswerResponseDoneStage::AnswerResponseDoneStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.AnswerResponseDoneStage)
}
AnswerResponseDoneStage::AnswerResponseDoneStage(const AnswerResponseDoneStage& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  AnswerResponseDoneStage* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.AnswerResponseDoneStage)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerResponseDoneStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerResponseDoneStage::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AnswerResponseDoneStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[16]);
}

// ===================================================================

class AnswerResponseErrorStage::_Internal {
 public:
  static const ::google::rpc::Status& status(const AnswerResponseErrorStage* msg);
};

const ::google::rpc::Status&
AnswerResponseErrorStage::_Internal::status(const AnswerResponseErrorStage* msg) {
  return *msg->_impl_.status_;
}
void AnswerResponseErrorStage::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
AnswerResponseErrorStage::AnswerResponseErrorStage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.AnswerResponseErrorStage)
}
AnswerResponseErrorStage::AnswerResponseErrorStage(const AnswerResponseErrorStage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnswerResponseErrorStage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::google::rpc::Status(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.AnswerResponseErrorStage)
}

inline void AnswerResponseErrorStage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AnswerResponseErrorStage::~AnswerResponseErrorStage() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.AnswerResponseErrorStage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnswerResponseErrorStage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.status_;
}

void AnswerResponseErrorStage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnswerResponseErrorStage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.AnswerResponseErrorStage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerResponseErrorStage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.rpc.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnswerResponseErrorStage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.AnswerResponseErrorStage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.AnswerResponseErrorStage)
  return target;
}

size_t AnswerResponseErrorStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.AnswerResponseErrorStage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.rpc.Status status = 1 [json_name = "status"];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerResponseErrorStage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnswerResponseErrorStage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerResponseErrorStage::GetClassData() const { return &_class_data_; }


void AnswerResponseErrorStage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnswerResponseErrorStage*>(&to_msg);
  auto& from = static_cast<const AnswerResponseErrorStage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.AnswerResponseErrorStage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::google::rpc::Status::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnswerResponseErrorStage::CopyFrom(const AnswerResponseErrorStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.AnswerResponseErrorStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerResponseErrorStage::IsInitialized() const {
  return true;
}

void AnswerResponseErrorStage::InternalSwap(AnswerResponseErrorStage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerResponseErrorStage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[17]);
}

// ===================================================================

class AnswerResponse::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::AnswerResponseInitStage& init(const AnswerResponse* msg);
  static const ::proto::rpc::webrtc::v1::AnswerResponseUpdateStage& update(const AnswerResponse* msg);
  static const ::proto::rpc::webrtc::v1::AnswerResponseDoneStage& done(const AnswerResponse* msg);
  static const ::proto::rpc::webrtc::v1::AnswerResponseErrorStage& error(const AnswerResponse* msg);
};

const ::proto::rpc::webrtc::v1::AnswerResponseInitStage&
AnswerResponse::_Internal::init(const AnswerResponse* msg) {
  return *msg->_impl_.stage_.init_;
}
const ::proto::rpc::webrtc::v1::AnswerResponseUpdateStage&
AnswerResponse::_Internal::update(const AnswerResponse* msg) {
  return *msg->_impl_.stage_.update_;
}
const ::proto::rpc::webrtc::v1::AnswerResponseDoneStage&
AnswerResponse::_Internal::done(const AnswerResponse* msg) {
  return *msg->_impl_.stage_.done_;
}
const ::proto::rpc::webrtc::v1::AnswerResponseErrorStage&
AnswerResponse::_Internal::error(const AnswerResponse* msg) {
  return *msg->_impl_.stage_.error_;
}
void AnswerResponse::set_allocated_init(::proto::rpc::webrtc::v1::AnswerResponseInitStage* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(init);
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
    _impl_.stage_.init_ = init;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.AnswerResponse.init)
}
void AnswerResponse::set_allocated_update(::proto::rpc::webrtc::v1::AnswerResponseUpdateStage* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    set_has_update();
    _impl_.stage_.update_ = update;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.AnswerResponse.update)
}
void AnswerResponse::set_allocated_done(::proto::rpc::webrtc::v1::AnswerResponseDoneStage* done) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (done) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(done);
    if (message_arena != submessage_arena) {
      done = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, done, submessage_arena);
    }
    set_has_done();
    _impl_.stage_.done_ = done;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.AnswerResponse.done)
}
void AnswerResponse::set_allocated_error(::proto::rpc::webrtc::v1::AnswerResponseErrorStage* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_stage();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.stage_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.webrtc.v1.AnswerResponse.error)
}
AnswerResponse::AnswerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.AnswerResponse)
}
AnswerResponse::AnswerResponse(const AnswerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AnswerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.stage_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  clear_has_stage();
  switch (from.stage_case()) {
    case kInit: {
      _this->_internal_mutable_init()->::proto::rpc::webrtc::v1::AnswerResponseInitStage::MergeFrom(
          from._internal_init());
      break;
    }
    case kUpdate: {
      _this->_internal_mutable_update()->::proto::rpc::webrtc::v1::AnswerResponseUpdateStage::MergeFrom(
          from._internal_update());
      break;
    }
    case kDone: {
      _this->_internal_mutable_done()->::proto::rpc::webrtc::v1::AnswerResponseDoneStage::MergeFrom(
          from._internal_done());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::proto::rpc::webrtc::v1::AnswerResponseErrorStage::MergeFrom(
          from._internal_error());
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.AnswerResponse)
}

inline void AnswerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.stage_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_stage();
}

AnswerResponse::~AnswerResponse() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.AnswerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnswerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  if (has_stage()) {
    clear_stage();
  }
}

void AnswerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AnswerResponse::clear_stage() {
// @@protoc_insertion_point(one_of_clear_start:proto.rpc.webrtc.v1.AnswerResponse)
  switch (stage_case()) {
    case kInit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stage_.init_;
      }
      break;
    }
    case kUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stage_.update_;
      }
      break;
    }
    case kDone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stage_.done_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.stage_.error_;
      }
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = STAGE_NOT_SET;
}


void AnswerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.AnswerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  clear_stage();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnswerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uuid = 1 [json_name = "uuid"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.webrtc.v1.AnswerResponse.uuid"));
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.AnswerResponseInitStage init = 2 [json_name = "init"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.AnswerResponseUpdateStage update = 3 [json_name = "update"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.AnswerResponseDoneStage done = 4 [json_name = "done"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_done(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.rpc.webrtc.v1.AnswerResponseErrorStage error = 5 [json_name = "error"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnswerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.AnswerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.webrtc.v1.AnswerResponse.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // .proto.rpc.webrtc.v1.AnswerResponseInitStage init = 2 [json_name = "init"];
  if (_internal_has_init()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::init(this),
        _Internal::init(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.AnswerResponseUpdateStage update = 3 [json_name = "update"];
  if (_internal_has_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::update(this),
        _Internal::update(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.AnswerResponseDoneStage done = 4 [json_name = "done"];
  if (_internal_has_done()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::done(this),
        _Internal::done(this).GetCachedSize(), target, stream);
  }

  // .proto.rpc.webrtc.v1.AnswerResponseErrorStage error = 5 [json_name = "error"];
  if (_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.AnswerResponse)
  return target;
}

size_t AnswerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.AnswerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  switch (stage_case()) {
    // .proto.rpc.webrtc.v1.AnswerResponseInitStage init = 2 [json_name = "init"];
    case kInit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stage_.init_);
      break;
    }
    // .proto.rpc.webrtc.v1.AnswerResponseUpdateStage update = 3 [json_name = "update"];
    case kUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stage_.update_);
      break;
    }
    // .proto.rpc.webrtc.v1.AnswerResponseDoneStage done = 4 [json_name = "done"];
    case kDone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stage_.done_);
      break;
    }
    // .proto.rpc.webrtc.v1.AnswerResponseErrorStage error = 5 [json_name = "error"];
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stage_.error_);
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnswerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AnswerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnswerResponse::GetClassData() const { return &_class_data_; }


void AnswerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AnswerResponse*>(&to_msg);
  auto& from = static_cast<const AnswerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.AnswerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  switch (from.stage_case()) {
    case kInit: {
      _this->_internal_mutable_init()->::proto::rpc::webrtc::v1::AnswerResponseInitStage::MergeFrom(
          from._internal_init());
      break;
    }
    case kUpdate: {
      _this->_internal_mutable_update()->::proto::rpc::webrtc::v1::AnswerResponseUpdateStage::MergeFrom(
          from._internal_update());
      break;
    }
    case kDone: {
      _this->_internal_mutable_done()->::proto::rpc::webrtc::v1::AnswerResponseDoneStage::MergeFrom(
          from._internal_done());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::proto::rpc::webrtc::v1::AnswerResponseErrorStage::MergeFrom(
          from._internal_error());
      break;
    }
    case STAGE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnswerResponse::CopyFrom(const AnswerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.AnswerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerResponse::IsInitialized() const {
  return true;
}

void AnswerResponse::InternalSwap(AnswerResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  swap(_impl_.stage_, other->_impl_.stage_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnswerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[18]);
}

// ===================================================================

class OptionalWebRTCConfigRequest::_Internal {
 public:
};

OptionalWebRTCConfigRequest::OptionalWebRTCConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest)
}
OptionalWebRTCConfigRequest::OptionalWebRTCConfigRequest(const OptionalWebRTCConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  OptionalWebRTCConfigRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.OptionalWebRTCConfigRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionalWebRTCConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionalWebRTCConfigRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata OptionalWebRTCConfigRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[19]);
}

// ===================================================================

class OptionalWebRTCConfigResponse::_Internal {
 public:
  static const ::proto::rpc::webrtc::v1::WebRTCConfig& config(const OptionalWebRTCConfigResponse* msg);
};

const ::proto::rpc::webrtc::v1::WebRTCConfig&
OptionalWebRTCConfigResponse::_Internal::config(const OptionalWebRTCConfigResponse* msg) {
  return *msg->_impl_.config_;
}
OptionalWebRTCConfigResponse::OptionalWebRTCConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse)
}
OptionalWebRTCConfigResponse::OptionalWebRTCConfigResponse(const OptionalWebRTCConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OptionalWebRTCConfigResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::proto::rpc::webrtc::v1::WebRTCConfig(*from._impl_.config_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse)
}

inline void OptionalWebRTCConfigResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OptionalWebRTCConfigResponse::~OptionalWebRTCConfigResponse() {
  // @@protoc_insertion_point(destructor:proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OptionalWebRTCConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.config_;
}

void OptionalWebRTCConfigResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OptionalWebRTCConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OptionalWebRTCConfigResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .proto.rpc.webrtc.v1.WebRTCConfig config = 1 [json_name = "config"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OptionalWebRTCConfigResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.WebRTCConfig config = 1 [json_name = "config"];
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse)
  return target;
}

size_t OptionalWebRTCConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .proto.rpc.webrtc.v1.WebRTCConfig config = 1 [json_name = "config"];
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OptionalWebRTCConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OptionalWebRTCConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OptionalWebRTCConfigResponse::GetClassData() const { return &_class_data_; }


void OptionalWebRTCConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OptionalWebRTCConfigResponse*>(&to_msg);
  auto& from = static_cast<const OptionalWebRTCConfigResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::proto::rpc::webrtc::v1::WebRTCConfig::MergeFrom(
        from._internal_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OptionalWebRTCConfigResponse::CopyFrom(const OptionalWebRTCConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.webrtc.v1.OptionalWebRTCConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptionalWebRTCConfigResponse::IsInitialized() const {
  return true;
}

void OptionalWebRTCConfigResponse::InternalSwap(OptionalWebRTCConfigResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.config_, other->_impl_.config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OptionalWebRTCConfigResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_getter, &descriptor_table_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto_once,
      file_level_metadata_proto_2frpc_2fwebrtc_2fv1_2fsignaling_2eproto[20]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace webrtc
}  // namespace rpc
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::ICECandidate*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::ICECandidate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::ICECandidate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::CallRequest*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::CallRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::CallRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::CallResponseInitStage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::CallResponseInitStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::CallResponseInitStage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::CallResponseUpdateStage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::CallResponseUpdateStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::CallResponseUpdateStage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::CallResponse*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::CallResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::CallResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::CallUpdateRequest*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::CallUpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::CallUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::CallUpdateResponse*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::CallUpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::CallUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::ICEServer*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::ICEServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::ICEServer >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::WebRTCConfig*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::WebRTCConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::WebRTCConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::AnswerRequestInitStage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::AnswerRequestInitStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::AnswerRequestInitStage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::AnswerRequestUpdateStage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::AnswerRequestUpdateStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::AnswerRequestUpdateStage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::AnswerRequestDoneStage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::AnswerRequestDoneStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::AnswerRequestDoneStage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::AnswerRequestErrorStage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::AnswerRequestErrorStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::AnswerRequestErrorStage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::AnswerRequest*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::AnswerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::AnswerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::AnswerResponseInitStage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::AnswerResponseInitStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::AnswerResponseInitStage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::AnswerResponseUpdateStage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::AnswerResponseUpdateStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::AnswerResponseUpdateStage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::AnswerResponseDoneStage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::AnswerResponseDoneStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::AnswerResponseDoneStage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::AnswerResponseErrorStage*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::AnswerResponseErrorStage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::AnswerResponseErrorStage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::AnswerResponse*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::AnswerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::AnswerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse*
Arena::CreateMaybeMessage< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::webrtc::v1::OptionalWebRTCConfigResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
