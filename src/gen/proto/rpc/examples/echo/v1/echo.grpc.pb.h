// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/rpc/examples/echo/v1/echo.proto
#ifndef GRPC_proto_2frpc_2fexamples_2fecho_2fv1_2fecho_2eproto__INCLUDED
#define GRPC_proto_2frpc_2fexamples_2fecho_2fv1_2fecho_2eproto__INCLUDED

#include "proto/rpc/examples/echo/v1/echo.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace proto {
namespace rpc {
namespace examples {
namespace echo {
namespace v1 {

class EchoService final {
 public:
  static constexpr char const* service_full_name() {
    return "proto.rpc.examples.echo.v1.EchoService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Echo(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest& request, ::proto::rpc::examples::echo::v1::EchoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::examples::echo::v1::EchoResponse>> AsyncEcho(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::examples::echo::v1::EchoResponse>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::examples::echo::v1::EchoResponse>> PrepareAsyncEcho(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::examples::echo::v1::EchoResponse>>(PrepareAsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>> EchoMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>>(EchoMultipleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>> AsyncEchoMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>>(AsyncEchoMultipleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>> PrepareAsyncEchoMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>>(PrepareAsyncEchoMultipleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>> EchoBiDi(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>>(EchoBiDiRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>> AsyncEchoBiDi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>>(AsyncEchoBiDiRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>> PrepareAsyncEchoBiDi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>>(PrepareAsyncEchoBiDiRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Echo(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest* request, ::proto::rpc::examples::echo::v1::EchoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Echo(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest* request, ::proto::rpc::examples::echo::v1::EchoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EchoMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest* request, ::grpc::ClientReadReactor< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* reactor) = 0;
      virtual void EchoBiDi(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::rpc::examples::echo::v1::EchoBiDiRequest,::proto::rpc::examples::echo::v1::EchoBiDiResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::examples::echo::v1::EchoResponse>* AsyncEchoRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::proto::rpc::examples::echo::v1::EchoResponse>* PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* EchoMultipleRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* AsyncEchoMultipleRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* PrepareAsyncEchoMultipleRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>* EchoBiDiRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>* AsyncEchoBiDiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>* PrepareAsyncEchoBiDiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Echo(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest& request, ::proto::rpc::examples::echo::v1::EchoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::examples::echo::v1::EchoResponse>> AsyncEcho(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::examples::echo::v1::EchoResponse>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::examples::echo::v1::EchoResponse>> PrepareAsyncEcho(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::proto::rpc::examples::echo::v1::EchoResponse>>(PrepareAsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>> EchoMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>>(EchoMultipleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>> AsyncEchoMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>>(AsyncEchoMultipleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>> PrepareAsyncEchoMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>>(PrepareAsyncEchoMultipleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>> EchoBiDi(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>>(EchoBiDiRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>> AsyncEchoBiDi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>>(AsyncEchoBiDiRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>> PrepareAsyncEchoBiDi(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>>(PrepareAsyncEchoBiDiRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Echo(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest* request, ::proto::rpc::examples::echo::v1::EchoResponse* response, std::function<void(::grpc::Status)>) override;
      void Echo(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest* request, ::proto::rpc::examples::echo::v1::EchoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EchoMultiple(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest* request, ::grpc::ClientReadReactor< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* reactor) override;
      void EchoBiDi(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::proto::rpc::examples::echo::v1::EchoBiDiRequest,::proto::rpc::examples::echo::v1::EchoBiDiResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::proto::rpc::examples::echo::v1::EchoResponse>* AsyncEchoRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::proto::rpc::examples::echo::v1::EchoResponse>* PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* EchoMultipleRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest& request) override;
    ::grpc::ClientAsyncReader< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* AsyncEchoMultipleRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* PrepareAsyncEchoMultipleRaw(::grpc::ClientContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>* EchoBiDiRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>* AsyncEchoBiDiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>* PrepareAsyncEchoBiDiRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Echo_;
    const ::grpc::internal::RpcMethod rpcmethod_EchoMultiple_;
    const ::grpc::internal::RpcMethod rpcmethod_EchoBiDi_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Echo(::grpc::ServerContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest* request, ::proto::rpc::examples::echo::v1::EchoResponse* response);
    virtual ::grpc::Status EchoMultiple(::grpc::ServerContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest* request, ::grpc::ServerWriter< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* writer);
    virtual ::grpc::Status EchoBiDi(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiResponse, ::proto::rpc::examples::echo::v1::EchoBiDiRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Echo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoRequest* /*request*/, ::proto::rpc::examples::echo::v1::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::proto::rpc::examples::echo::v1::EchoRequest* request, ::grpc::ServerAsyncResponseWriter< ::proto::rpc::examples::echo::v1::EchoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EchoMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EchoMultiple() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_EchoMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoMultiple(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoMultiple(::grpc::ServerContext* context, ::proto::rpc::examples::echo::v1::EchoMultipleRequest* request, ::grpc::ServerAsyncWriter< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EchoBiDi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EchoBiDi() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_EchoBiDi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoBiDi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiResponse, ::proto::rpc::examples::echo::v1::EchoBiDiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoBiDi(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiResponse, ::proto::rpc::examples::echo::v1::EchoBiDiRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Echo<WithAsyncMethod_EchoMultiple<WithAsyncMethod_EchoBiDi<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Echo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::proto::rpc::examples::echo::v1::EchoRequest, ::proto::rpc::examples::echo::v1::EchoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::rpc::examples::echo::v1::EchoRequest* request, ::proto::rpc::examples::echo::v1::EchoResponse* response) { return this->Echo(context, request, response); }));}
    void SetMessageAllocatorFor_Echo(
        ::grpc::MessageAllocator< ::proto::rpc::examples::echo::v1::EchoRequest, ::proto::rpc::examples::echo::v1::EchoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::proto::rpc::examples::echo::v1::EchoRequest, ::proto::rpc::examples::echo::v1::EchoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoRequest* /*request*/, ::proto::rpc::examples::echo::v1::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Echo(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoRequest* /*request*/, ::proto::rpc::examples::echo::v1::EchoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EchoMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EchoMultiple() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::proto::rpc::examples::echo::v1::EchoMultipleRequest, ::proto::rpc::examples::echo::v1::EchoMultipleResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest* request) { return this->EchoMultiple(context, request); }));
    }
    ~WithCallbackMethod_EchoMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoMultiple(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* EchoMultiple(
      ::grpc::CallbackServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EchoBiDi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EchoBiDi() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->EchoBiDi(context); }));
    }
    ~WithCallbackMethod_EchoBiDi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoBiDi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiResponse, ::proto::rpc::examples::echo::v1::EchoBiDiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::proto::rpc::examples::echo::v1::EchoBiDiRequest, ::proto::rpc::examples::echo::v1::EchoBiDiResponse>* EchoBiDi(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_Echo<WithCallbackMethod_EchoMultiple<WithCallbackMethod_EchoBiDi<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Echo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoRequest* /*request*/, ::proto::rpc::examples::echo::v1::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EchoMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EchoMultiple() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_EchoMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoMultiple(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EchoBiDi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EchoBiDi() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_EchoBiDi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoBiDi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiResponse, ::proto::rpc::examples::echo::v1::EchoBiDiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Echo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoRequest* /*request*/, ::proto::rpc::examples::echo::v1::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EchoMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EchoMultiple() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_EchoMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoMultiple(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoMultiple(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EchoBiDi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EchoBiDi() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_EchoBiDi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoBiDi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiResponse, ::proto::rpc::examples::echo::v1::EchoBiDiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEchoBiDi(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Echo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Echo(context, request, response); }));
    }
    ~WithRawCallbackMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoRequest* /*request*/, ::proto::rpc::examples::echo::v1::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Echo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EchoMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EchoMultiple() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->EchoMultiple(context, request); }));
    }
    ~WithRawCallbackMethod_EchoMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoMultiple(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* EchoMultiple(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EchoBiDi : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EchoBiDi() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->EchoBiDi(context); }));
    }
    ~WithRawCallbackMethod_EchoBiDi() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EchoBiDi(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::proto::rpc::examples::echo::v1::EchoBiDiResponse, ::proto::rpc::examples::echo::v1::EchoBiDiRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* EchoBiDi(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Echo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::proto::rpc::examples::echo::v1::EchoRequest, ::proto::rpc::examples::echo::v1::EchoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::proto::rpc::examples::echo::v1::EchoRequest, ::proto::rpc::examples::echo::v1::EchoResponse>* streamer) {
                       return this->StreamedEcho(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoRequest* /*request*/, ::proto::rpc::examples::echo::v1::EchoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEcho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::proto::rpc::examples::echo::v1::EchoRequest,::proto::rpc::examples::echo::v1::EchoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Echo<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_EchoMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_EchoMultiple() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::proto::rpc::examples::echo::v1::EchoMultipleRequest, ::proto::rpc::examples::echo::v1::EchoMultipleResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::proto::rpc::examples::echo::v1::EchoMultipleRequest, ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* streamer) {
                       return this->StreamedEchoMultiple(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_EchoMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EchoMultiple(::grpc::ServerContext* /*context*/, const ::proto::rpc::examples::echo::v1::EchoMultipleRequest* /*request*/, ::grpc::ServerWriter< ::proto::rpc::examples::echo::v1::EchoMultipleResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedEchoMultiple(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::proto::rpc::examples::echo::v1::EchoMultipleRequest,::proto::rpc::examples::echo::v1::EchoMultipleResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_EchoMultiple<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Echo<WithSplitStreamingMethod_EchoMultiple<Service > > StreamedService;
};

}  // namespace v1
}  // namespace echo
}  // namespace examples
}  // namespace rpc
}  // namespace proto


#endif  // GRPC_proto_2frpc_2fexamples_2fecho_2fv1_2fecho_2eproto__INCLUDED
