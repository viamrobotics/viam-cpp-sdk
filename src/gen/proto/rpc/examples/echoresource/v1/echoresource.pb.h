// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/rpc/examples/echoresource/v1/echoresource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto;
namespace proto {
namespace rpc {
namespace examples {
namespace echoresource {
namespace v1 {
class EchoResourceBiDiRequest;
struct EchoResourceBiDiRequestDefaultTypeInternal;
extern EchoResourceBiDiRequestDefaultTypeInternal _EchoResourceBiDiRequest_default_instance_;
class EchoResourceBiDiResponse;
struct EchoResourceBiDiResponseDefaultTypeInternal;
extern EchoResourceBiDiResponseDefaultTypeInternal _EchoResourceBiDiResponse_default_instance_;
class EchoResourceMultipleRequest;
struct EchoResourceMultipleRequestDefaultTypeInternal;
extern EchoResourceMultipleRequestDefaultTypeInternal _EchoResourceMultipleRequest_default_instance_;
class EchoResourceMultipleResponse;
struct EchoResourceMultipleResponseDefaultTypeInternal;
extern EchoResourceMultipleResponseDefaultTypeInternal _EchoResourceMultipleResponse_default_instance_;
class EchoResourceRequest;
struct EchoResourceRequestDefaultTypeInternal;
extern EchoResourceRequestDefaultTypeInternal _EchoResourceRequest_default_instance_;
class EchoResourceResponse;
struct EchoResourceResponseDefaultTypeInternal;
extern EchoResourceResponseDefaultTypeInternal _EchoResourceResponse_default_instance_;
}  // namespace v1
}  // namespace echoresource
}  // namespace examples
}  // namespace rpc
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest* Arena::CreateMaybeMessage<::proto::rpc::examples::echoresource::v1::EchoResourceBiDiRequest>(Arena*);
template<> ::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse* Arena::CreateMaybeMessage<::proto::rpc::examples::echoresource::v1::EchoResourceBiDiResponse>(Arena*);
template<> ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest* Arena::CreateMaybeMessage<::proto::rpc::examples::echoresource::v1::EchoResourceMultipleRequest>(Arena*);
template<> ::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse* Arena::CreateMaybeMessage<::proto::rpc::examples::echoresource::v1::EchoResourceMultipleResponse>(Arena*);
template<> ::proto::rpc::examples::echoresource::v1::EchoResourceRequest* Arena::CreateMaybeMessage<::proto::rpc::examples::echoresource::v1::EchoResourceRequest>(Arena*);
template<> ::proto::rpc::examples::echoresource::v1::EchoResourceResponse* Arena::CreateMaybeMessage<::proto::rpc::examples::echoresource::v1::EchoResourceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {
namespace rpc {
namespace examples {
namespace echoresource {
namespace v1 {

// ===================================================================

class EchoResourceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.examples.echoresource.v1.EchoResourceRequest) */ {
 public:
  inline EchoResourceRequest() : EchoResourceRequest(nullptr) {}
  ~EchoResourceRequest() override;
  explicit PROTOBUF_CONSTEXPR EchoResourceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EchoResourceRequest(const EchoResourceRequest& from);
  EchoResourceRequest(EchoResourceRequest&& from) noexcept
    : EchoResourceRequest() {
    *this = ::std::move(from);
  }

  inline EchoResourceRequest& operator=(const EchoResourceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResourceRequest& operator=(EchoResourceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoResourceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoResourceRequest* internal_default_instance() {
    return reinterpret_cast<const EchoResourceRequest*>(
               &_EchoResourceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EchoResourceRequest& a, EchoResourceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResourceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResourceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EchoResourceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EchoResourceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EchoResourceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EchoResourceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResourceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.examples.echoresource.v1.EchoResourceRequest";
  }
  protected:
  explicit EchoResourceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:proto.rpc.examples.echoresource.v1.EchoResourceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto;
};
// -------------------------------------------------------------------

class EchoResourceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.examples.echoresource.v1.EchoResourceResponse) */ {
 public:
  inline EchoResourceResponse() : EchoResourceResponse(nullptr) {}
  ~EchoResourceResponse() override;
  explicit PROTOBUF_CONSTEXPR EchoResourceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EchoResourceResponse(const EchoResourceResponse& from);
  EchoResourceResponse(EchoResourceResponse&& from) noexcept
    : EchoResourceResponse() {
    *this = ::std::move(from);
  }

  inline EchoResourceResponse& operator=(const EchoResourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResourceResponse& operator=(EchoResourceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoResourceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoResourceResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResourceResponse*>(
               &_EchoResourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EchoResourceResponse& a, EchoResourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResourceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EchoResourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EchoResourceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EchoResourceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EchoResourceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResourceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.examples.echoresource.v1.EchoResourceResponse";
  }
  protected:
  explicit EchoResourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:proto.rpc.examples.echoresource.v1.EchoResourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto;
};
// -------------------------------------------------------------------

class EchoResourceMultipleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest) */ {
 public:
  inline EchoResourceMultipleRequest() : EchoResourceMultipleRequest(nullptr) {}
  ~EchoResourceMultipleRequest() override;
  explicit PROTOBUF_CONSTEXPR EchoResourceMultipleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EchoResourceMultipleRequest(const EchoResourceMultipleRequest& from);
  EchoResourceMultipleRequest(EchoResourceMultipleRequest&& from) noexcept
    : EchoResourceMultipleRequest() {
    *this = ::std::move(from);
  }

  inline EchoResourceMultipleRequest& operator=(const EchoResourceMultipleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResourceMultipleRequest& operator=(EchoResourceMultipleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoResourceMultipleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoResourceMultipleRequest* internal_default_instance() {
    return reinterpret_cast<const EchoResourceMultipleRequest*>(
               &_EchoResourceMultipleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EchoResourceMultipleRequest& a, EchoResourceMultipleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResourceMultipleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResourceMultipleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EchoResourceMultipleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EchoResourceMultipleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EchoResourceMultipleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EchoResourceMultipleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResourceMultipleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest";
  }
  protected:
  explicit EchoResourceMultipleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto;
};
// -------------------------------------------------------------------

class EchoResourceMultipleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.examples.echoresource.v1.EchoResourceMultipleResponse) */ {
 public:
  inline EchoResourceMultipleResponse() : EchoResourceMultipleResponse(nullptr) {}
  ~EchoResourceMultipleResponse() override;
  explicit PROTOBUF_CONSTEXPR EchoResourceMultipleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EchoResourceMultipleResponse(const EchoResourceMultipleResponse& from);
  EchoResourceMultipleResponse(EchoResourceMultipleResponse&& from) noexcept
    : EchoResourceMultipleResponse() {
    *this = ::std::move(from);
  }

  inline EchoResourceMultipleResponse& operator=(const EchoResourceMultipleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResourceMultipleResponse& operator=(EchoResourceMultipleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoResourceMultipleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoResourceMultipleResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResourceMultipleResponse*>(
               &_EchoResourceMultipleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EchoResourceMultipleResponse& a, EchoResourceMultipleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResourceMultipleResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResourceMultipleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EchoResourceMultipleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EchoResourceMultipleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EchoResourceMultipleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EchoResourceMultipleResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResourceMultipleResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.examples.echoresource.v1.EchoResourceMultipleResponse";
  }
  protected:
  explicit EchoResourceMultipleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:proto.rpc.examples.echoresource.v1.EchoResourceMultipleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto;
};
// -------------------------------------------------------------------

class EchoResourceBiDiRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest) */ {
 public:
  inline EchoResourceBiDiRequest() : EchoResourceBiDiRequest(nullptr) {}
  ~EchoResourceBiDiRequest() override;
  explicit PROTOBUF_CONSTEXPR EchoResourceBiDiRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EchoResourceBiDiRequest(const EchoResourceBiDiRequest& from);
  EchoResourceBiDiRequest(EchoResourceBiDiRequest&& from) noexcept
    : EchoResourceBiDiRequest() {
    *this = ::std::move(from);
  }

  inline EchoResourceBiDiRequest& operator=(const EchoResourceBiDiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResourceBiDiRequest& operator=(EchoResourceBiDiRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoResourceBiDiRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoResourceBiDiRequest* internal_default_instance() {
    return reinterpret_cast<const EchoResourceBiDiRequest*>(
               &_EchoResourceBiDiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EchoResourceBiDiRequest& a, EchoResourceBiDiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResourceBiDiRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResourceBiDiRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EchoResourceBiDiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EchoResourceBiDiRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EchoResourceBiDiRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EchoResourceBiDiRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResourceBiDiRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest";
  }
  protected:
  explicit EchoResourceBiDiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto;
};
// -------------------------------------------------------------------

class EchoResourceBiDiResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.rpc.examples.echoresource.v1.EchoResourceBiDiResponse) */ {
 public:
  inline EchoResourceBiDiResponse() : EchoResourceBiDiResponse(nullptr) {}
  ~EchoResourceBiDiResponse() override;
  explicit PROTOBUF_CONSTEXPR EchoResourceBiDiResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EchoResourceBiDiResponse(const EchoResourceBiDiResponse& from);
  EchoResourceBiDiResponse(EchoResourceBiDiResponse&& from) noexcept
    : EchoResourceBiDiResponse() {
    *this = ::std::move(from);
  }

  inline EchoResourceBiDiResponse& operator=(const EchoResourceBiDiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoResourceBiDiResponse& operator=(EchoResourceBiDiResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoResourceBiDiResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoResourceBiDiResponse* internal_default_instance() {
    return reinterpret_cast<const EchoResourceBiDiResponse*>(
               &_EchoResourceBiDiResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EchoResourceBiDiResponse& a, EchoResourceBiDiResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoResourceBiDiResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoResourceBiDiResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EchoResourceBiDiResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EchoResourceBiDiResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EchoResourceBiDiResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EchoResourceBiDiResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoResourceBiDiResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.rpc.examples.echoresource.v1.EchoResourceBiDiResponse";
  }
  protected:
  explicit EchoResourceBiDiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:proto.rpc.examples.echoresource.v1.EchoResourceBiDiResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EchoResourceRequest

// string name = 1 [json_name = "name"];
inline void EchoResourceRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& EchoResourceRequest::name() const {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.echoresource.v1.EchoResourceRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoResourceRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.rpc.examples.echoresource.v1.EchoResourceRequest.name)
}
inline std::string* EchoResourceRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.rpc.examples.echoresource.v1.EchoResourceRequest.name)
  return _s;
}
inline const std::string& EchoResourceRequest::_internal_name() const {
  return name_.Get();
}
inline void EchoResourceRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* EchoResourceRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* EchoResourceRequest::release_name() {
  // @@protoc_insertion_point(field_release:proto.rpc.examples.echoresource.v1.EchoResourceRequest.name)
  return name_.Release();
}
inline void EchoResourceRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.examples.echoresource.v1.EchoResourceRequest.name)
}

// string message = 2 [json_name = "message"];
inline void EchoResourceRequest::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& EchoResourceRequest::message() const {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.echoresource.v1.EchoResourceRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoResourceRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.rpc.examples.echoresource.v1.EchoResourceRequest.message)
}
inline std::string* EchoResourceRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:proto.rpc.examples.echoresource.v1.EchoResourceRequest.message)
  return _s;
}
inline const std::string& EchoResourceRequest::_internal_message() const {
  return message_.Get();
}
inline void EchoResourceRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* EchoResourceRequest::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* EchoResourceRequest::release_message() {
  // @@protoc_insertion_point(field_release:proto.rpc.examples.echoresource.v1.EchoResourceRequest.message)
  return message_.Release();
}
inline void EchoResourceRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.examples.echoresource.v1.EchoResourceRequest.message)
}

// -------------------------------------------------------------------

// EchoResourceResponse

// string message = 1 [json_name = "message"];
inline void EchoResourceResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& EchoResourceResponse::message() const {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.echoresource.v1.EchoResourceResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoResourceResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.rpc.examples.echoresource.v1.EchoResourceResponse.message)
}
inline std::string* EchoResourceResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:proto.rpc.examples.echoresource.v1.EchoResourceResponse.message)
  return _s;
}
inline const std::string& EchoResourceResponse::_internal_message() const {
  return message_.Get();
}
inline void EchoResourceResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* EchoResourceResponse::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* EchoResourceResponse::release_message() {
  // @@protoc_insertion_point(field_release:proto.rpc.examples.echoresource.v1.EchoResourceResponse.message)
  return message_.Release();
}
inline void EchoResourceResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.examples.echoresource.v1.EchoResourceResponse.message)
}

// -------------------------------------------------------------------

// EchoResourceMultipleRequest

// string name = 1 [json_name = "name"];
inline void EchoResourceMultipleRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& EchoResourceMultipleRequest::name() const {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoResourceMultipleRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest.name)
}
inline std::string* EchoResourceMultipleRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest.name)
  return _s;
}
inline const std::string& EchoResourceMultipleRequest::_internal_name() const {
  return name_.Get();
}
inline void EchoResourceMultipleRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* EchoResourceMultipleRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* EchoResourceMultipleRequest::release_name() {
  // @@protoc_insertion_point(field_release:proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest.name)
  return name_.Release();
}
inline void EchoResourceMultipleRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest.name)
}

// string message = 2 [json_name = "message"];
inline void EchoResourceMultipleRequest::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& EchoResourceMultipleRequest::message() const {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoResourceMultipleRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest.message)
}
inline std::string* EchoResourceMultipleRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest.message)
  return _s;
}
inline const std::string& EchoResourceMultipleRequest::_internal_message() const {
  return message_.Get();
}
inline void EchoResourceMultipleRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* EchoResourceMultipleRequest::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* EchoResourceMultipleRequest::release_message() {
  // @@protoc_insertion_point(field_release:proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest.message)
  return message_.Release();
}
inline void EchoResourceMultipleRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.examples.echoresource.v1.EchoResourceMultipleRequest.message)
}

// -------------------------------------------------------------------

// EchoResourceMultipleResponse

// string message = 1 [json_name = "message"];
inline void EchoResourceMultipleResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& EchoResourceMultipleResponse::message() const {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.echoresource.v1.EchoResourceMultipleResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoResourceMultipleResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.rpc.examples.echoresource.v1.EchoResourceMultipleResponse.message)
}
inline std::string* EchoResourceMultipleResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:proto.rpc.examples.echoresource.v1.EchoResourceMultipleResponse.message)
  return _s;
}
inline const std::string& EchoResourceMultipleResponse::_internal_message() const {
  return message_.Get();
}
inline void EchoResourceMultipleResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* EchoResourceMultipleResponse::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* EchoResourceMultipleResponse::release_message() {
  // @@protoc_insertion_point(field_release:proto.rpc.examples.echoresource.v1.EchoResourceMultipleResponse.message)
  return message_.Release();
}
inline void EchoResourceMultipleResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.examples.echoresource.v1.EchoResourceMultipleResponse.message)
}

// -------------------------------------------------------------------

// EchoResourceBiDiRequest

// string name = 1 [json_name = "name"];
inline void EchoResourceBiDiRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& EchoResourceBiDiRequest::name() const {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoResourceBiDiRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest.name)
}
inline std::string* EchoResourceBiDiRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest.name)
  return _s;
}
inline const std::string& EchoResourceBiDiRequest::_internal_name() const {
  return name_.Get();
}
inline void EchoResourceBiDiRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* EchoResourceBiDiRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* EchoResourceBiDiRequest::release_name() {
  // @@protoc_insertion_point(field_release:proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest.name)
  return name_.Release();
}
inline void EchoResourceBiDiRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest.name)
}

// string message = 2 [json_name = "message"];
inline void EchoResourceBiDiRequest::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& EchoResourceBiDiRequest::message() const {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoResourceBiDiRequest::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest.message)
}
inline std::string* EchoResourceBiDiRequest::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest.message)
  return _s;
}
inline const std::string& EchoResourceBiDiRequest::_internal_message() const {
  return message_.Get();
}
inline void EchoResourceBiDiRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* EchoResourceBiDiRequest::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* EchoResourceBiDiRequest::release_message() {
  // @@protoc_insertion_point(field_release:proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest.message)
  return message_.Release();
}
inline void EchoResourceBiDiRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.examples.echoresource.v1.EchoResourceBiDiRequest.message)
}

// -------------------------------------------------------------------

// EchoResourceBiDiResponse

// string message = 1 [json_name = "message"];
inline void EchoResourceBiDiResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& EchoResourceBiDiResponse::message() const {
  // @@protoc_insertion_point(field_get:proto.rpc.examples.echoresource.v1.EchoResourceBiDiResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoResourceBiDiResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.rpc.examples.echoresource.v1.EchoResourceBiDiResponse.message)
}
inline std::string* EchoResourceBiDiResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:proto.rpc.examples.echoresource.v1.EchoResourceBiDiResponse.message)
  return _s;
}
inline const std::string& EchoResourceBiDiResponse::_internal_message() const {
  return message_.Get();
}
inline void EchoResourceBiDiResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* EchoResourceBiDiResponse::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* EchoResourceBiDiResponse::release_message() {
  // @@protoc_insertion_point(field_release:proto.rpc.examples.echoresource.v1.EchoResourceBiDiResponse.message)
  return message_.Release();
}
inline void EchoResourceBiDiResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.rpc.examples.echoresource.v1.EchoResourceBiDiResponse.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace echoresource
}  // namespace examples
}  // namespace rpc
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2frpc_2fexamples_2fechoresource_2fv1_2fechoresource_2eproto
