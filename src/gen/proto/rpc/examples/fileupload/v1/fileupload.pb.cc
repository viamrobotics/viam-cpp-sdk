// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/rpc/examples/fileupload/v1/fileupload.proto

#include "proto/rpc/examples/fileupload/v1/fileupload.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
namespace rpc {
namespace examples {
namespace fileupload {
namespace v1 {
PROTOBUF_CONSTEXPR UploadFileRequest::UploadFileRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UploadFileRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadFileRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadFileRequestDefaultTypeInternal() {}
  union {
    UploadFileRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadFileRequestDefaultTypeInternal _UploadFileRequest_default_instance_;
PROTOBUF_CONSTEXPR UploadFileResponse::UploadFileResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadFileResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadFileResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadFileResponseDefaultTypeInternal() {}
  union {
    UploadFileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadFileResponseDefaultTypeInternal _UploadFileResponse_default_instance_;
}  // namespace v1
}  // namespace fileupload
}  // namespace examples
}  // namespace rpc
}  // namespace proto
static ::_pb::Metadata file_level_metadata_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto = nullptr;

const uint32_t TableStruct_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::examples::fileupload::v1::UploadFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::examples::fileupload::v1::UploadFileRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto::rpc::examples::fileupload::v1::UploadFileRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::examples::fileupload::v1::UploadFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::rpc::examples::fileupload::v1::UploadFileResponse, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto::rpc::examples::fileupload::v1::UploadFileResponse, _impl_.size_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::rpc::examples::fileupload::v1::UploadFileRequest)},
  { 9, -1, -1, sizeof(::proto::rpc::examples::fileupload::v1::UploadFileResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::rpc::examples::fileupload::v1::_UploadFileRequest_default_instance_._instance,
  &::proto::rpc::examples::fileupload::v1::_UploadFileResponse_default_instance_._instance,
};

const char descriptor_table_protodef_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1proto/rpc/examples/fileupload/v1/fileu"
  "pload.proto\022 proto.rpc.examples.fileuplo"
  "ad.v1\"R\n\021UploadFileRequest\022\024\n\004name\030\001 \001(\t"
  "H\000R\004name\022\037\n\nchunk_data\030\002 \001(\014H\000R\tchunkDat"
  "aB\006\n\004data\"<\n\022UploadFileResponse\022\022\n\004name\030"
  "\001 \001(\tR\004name\022\022\n\004size\030\002 \001(\003R\004size2\222\001\n\021File"
  "UploadService\022}\n\nUploadFile\0223.proto.rpc."
  "examples.fileupload.v1.UploadFileRequest"
  "\0324.proto.rpc.examples.fileupload.v1.Uplo"
  "adFileResponse\"\000(\0010\001B4Z2go.viam.com/util"
  "s/proto/rpc/examples/fileupload/v1b\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto = {
    false, false, 442, descriptor_table_protodef_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto,
    "proto/rpc/examples/fileupload/v1/fileupload.proto",
    &descriptor_table_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto::offsets,
    file_level_metadata_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto, file_level_enum_descriptors_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto,
    file_level_service_descriptors_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto_getter() {
  return &descriptor_table_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto(&descriptor_table_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto);
namespace proto {
namespace rpc {
namespace examples {
namespace fileupload {
namespace v1 {

// ===================================================================

class UploadFileRequest::_Internal {
 public:
};

UploadFileRequest::UploadFileRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.examples.fileupload.v1.UploadFileRequest)
}
UploadFileRequest::UploadFileRequest(const UploadFileRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadFileRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case kChunkData: {
      _this->_internal_set_chunk_data(from._internal_chunk_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.rpc.examples.fileupload.v1.UploadFileRequest)
}

inline void UploadFileRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

UploadFileRequest::~UploadFileRequest() {
  // @@protoc_insertion_point(destructor:proto.rpc.examples.fileupload.v1.UploadFileRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadFileRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void UploadFileRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadFileRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:proto.rpc.examples.fileupload.v1.UploadFileRequest)
  switch (data_case()) {
    case kName: {
      _impl_.data_.name_.Destroy();
      break;
    }
    case kChunkData: {
      _impl_.data_.chunk_data_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void UploadFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.examples.fileupload.v1.UploadFileRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadFileRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.examples.fileupload.v1.UploadFileRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes chunk_data = 2 [json_name = "chunkData"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chunk_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadFileRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.examples.fileupload.v1.UploadFileRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.examples.fileupload.v1.UploadFileRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes chunk_data = 2 [json_name = "chunkData"];
  if (_internal_has_chunk_data()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chunk_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.examples.fileupload.v1.UploadFileRequest)
  return target;
}

size_t UploadFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.examples.fileupload.v1.UploadFileRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // string name = 1 [json_name = "name"];
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
      break;
    }
    // bytes chunk_data = 2 [json_name = "chunkData"];
    case kChunkData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_chunk_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadFileRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadFileRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadFileRequest::GetClassData() const { return &_class_data_; }


void UploadFileRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadFileRequest*>(&to_msg);
  auto& from = static_cast<const UploadFileRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.examples.fileupload.v1.UploadFileRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kName: {
      _this->_internal_set_name(from._internal_name());
      break;
    }
    case kChunkData: {
      _this->_internal_set_chunk_data(from._internal_chunk_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadFileRequest::CopyFrom(const UploadFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.examples.fileupload.v1.UploadFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileRequest::IsInitialized() const {
  return true;
}

void UploadFileRequest::InternalSwap(UploadFileRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadFileRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto_getter, &descriptor_table_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto_once,
      file_level_metadata_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto[0]);
}

// ===================================================================

class UploadFileResponse::_Internal {
 public:
};

UploadFileResponse::UploadFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.rpc.examples.fileupload.v1.UploadFileResponse)
}
UploadFileResponse::UploadFileResponse(const UploadFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadFileResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.size_ = from._impl_.size_;
  // @@protoc_insertion_point(copy_constructor:proto.rpc.examples.fileupload.v1.UploadFileResponse)
}

inline void UploadFileResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadFileResponse::~UploadFileResponse() {
  // @@protoc_insertion_point(destructor:proto.rpc.examples.fileupload.v1.UploadFileResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void UploadFileResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.rpc.examples.fileupload.v1.UploadFileResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadFileResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto.rpc.examples.fileupload.v1.UploadFileResponse.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2 [json_name = "size"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadFileResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.rpc.examples.fileupload.v1.UploadFileResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto.rpc.examples.fileupload.v1.UploadFileResponse.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 size = 2 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.rpc.examples.fileupload.v1.UploadFileResponse)
  return target;
}

size_t UploadFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.rpc.examples.fileupload.v1.UploadFileResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 size = 2 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadFileResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadFileResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadFileResponse::GetClassData() const { return &_class_data_; }


void UploadFileResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadFileResponse*>(&to_msg);
  auto& from = static_cast<const UploadFileResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.rpc.examples.fileupload.v1.UploadFileResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadFileResponse::CopyFrom(const UploadFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.rpc.examples.fileupload.v1.UploadFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadFileResponse::IsInitialized() const {
  return true;
}

void UploadFileResponse::InternalSwap(UploadFileResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.size_, other->_impl_.size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadFileResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto_getter, &descriptor_table_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto_once,
      file_level_metadata_proto_2frpc_2fexamples_2ffileupload_2fv1_2ffileupload_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fileupload
}  // namespace examples
}  // namespace rpc
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::rpc::examples::fileupload::v1::UploadFileRequest*
Arena::CreateMaybeMessage< ::proto::rpc::examples::fileupload::v1::UploadFileRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::examples::fileupload::v1::UploadFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::rpc::examples::fileupload::v1::UploadFileResponse*
Arena::CreateMaybeMessage< ::proto::rpc::examples::fileupload::v1::UploadFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::rpc::examples::fileupload::v1::UploadFileResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
