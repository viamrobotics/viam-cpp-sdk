// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/expr/v1alpha1/checked.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/expr/v1alpha1/syntax.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
namespace google {
namespace api {
namespace expr {
namespace v1alpha1 {
class CheckedExpr;
struct CheckedExprDefaultTypeInternal;
extern CheckedExprDefaultTypeInternal _CheckedExpr_default_instance_;
class CheckedExpr_ReferenceMapEntry_DoNotUse;
struct CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal;
extern CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal _CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_;
class CheckedExpr_TypeMapEntry_DoNotUse;
struct CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal;
extern CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal _CheckedExpr_TypeMapEntry_DoNotUse_default_instance_;
class Decl;
struct DeclDefaultTypeInternal;
extern DeclDefaultTypeInternal _Decl_default_instance_;
class Decl_FunctionDecl;
struct Decl_FunctionDeclDefaultTypeInternal;
extern Decl_FunctionDeclDefaultTypeInternal _Decl_FunctionDecl_default_instance_;
class Decl_FunctionDecl_Overload;
struct Decl_FunctionDecl_OverloadDefaultTypeInternal;
extern Decl_FunctionDecl_OverloadDefaultTypeInternal _Decl_FunctionDecl_Overload_default_instance_;
class Decl_IdentDecl;
struct Decl_IdentDeclDefaultTypeInternal;
extern Decl_IdentDeclDefaultTypeInternal _Decl_IdentDecl_default_instance_;
class Reference;
struct ReferenceDefaultTypeInternal;
extern ReferenceDefaultTypeInternal _Reference_default_instance_;
class Type;
struct TypeDefaultTypeInternal;
extern TypeDefaultTypeInternal _Type_default_instance_;
class Type_AbstractType;
struct Type_AbstractTypeDefaultTypeInternal;
extern Type_AbstractTypeDefaultTypeInternal _Type_AbstractType_default_instance_;
class Type_FunctionType;
struct Type_FunctionTypeDefaultTypeInternal;
extern Type_FunctionTypeDefaultTypeInternal _Type_FunctionType_default_instance_;
class Type_ListType;
struct Type_ListTypeDefaultTypeInternal;
extern Type_ListTypeDefaultTypeInternal _Type_ListType_default_instance_;
class Type_MapType;
struct Type_MapTypeDefaultTypeInternal;
extern Type_MapTypeDefaultTypeInternal _Type_MapType_default_instance_;
}  // namespace v1alpha1
}  // namespace expr
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::expr::v1alpha1::CheckedExpr* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::CheckedExpr>(Arena*);
template<> ::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse>(Arena*);
template<> ::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse>(Arena*);
template<> ::google::api::expr::v1alpha1::Decl* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Decl>(Arena*);
template<> ::google::api::expr::v1alpha1::Decl_FunctionDecl* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Decl_FunctionDecl>(Arena*);
template<> ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload>(Arena*);
template<> ::google::api::expr::v1alpha1::Decl_IdentDecl* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Decl_IdentDecl>(Arena*);
template<> ::google::api::expr::v1alpha1::Reference* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Reference>(Arena*);
template<> ::google::api::expr::v1alpha1::Type* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(Arena*);
template<> ::google::api::expr::v1alpha1::Type_AbstractType* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Type_AbstractType>(Arena*);
template<> ::google::api::expr::v1alpha1::Type_FunctionType* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Type_FunctionType>(Arena*);
template<> ::google::api::expr::v1alpha1::Type_ListType* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Type_ListType>(Arena*);
template<> ::google::api::expr::v1alpha1::Type_MapType* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Type_MapType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace expr {
namespace v1alpha1 {

enum Type_PrimitiveType : int {
  Type_PrimitiveType_PRIMITIVE_TYPE_UNSPECIFIED = 0,
  Type_PrimitiveType_BOOL = 1,
  Type_PrimitiveType_INT64 = 2,
  Type_PrimitiveType_UINT64 = 3,
  Type_PrimitiveType_DOUBLE = 4,
  Type_PrimitiveType_STRING = 5,
  Type_PrimitiveType_BYTES = 6,
  Type_PrimitiveType_Type_PrimitiveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Type_PrimitiveType_Type_PrimitiveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Type_PrimitiveType_IsValid(int value);
constexpr Type_PrimitiveType Type_PrimitiveType_PrimitiveType_MIN = Type_PrimitiveType_PRIMITIVE_TYPE_UNSPECIFIED;
constexpr Type_PrimitiveType Type_PrimitiveType_PrimitiveType_MAX = Type_PrimitiveType_BYTES;
constexpr int Type_PrimitiveType_PrimitiveType_ARRAYSIZE = Type_PrimitiveType_PrimitiveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_PrimitiveType_descriptor();
template<typename T>
inline const std::string& Type_PrimitiveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type_PrimitiveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_PrimitiveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_PrimitiveType_descriptor(), enum_t_value);
}
inline bool Type_PrimitiveType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type_PrimitiveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type_PrimitiveType>(
    Type_PrimitiveType_descriptor(), name, value);
}
enum Type_WellKnownType : int {
  Type_WellKnownType_WELL_KNOWN_TYPE_UNSPECIFIED = 0,
  Type_WellKnownType_ANY = 1,
  Type_WellKnownType_TIMESTAMP = 2,
  Type_WellKnownType_DURATION = 3,
  Type_WellKnownType_Type_WellKnownType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Type_WellKnownType_Type_WellKnownType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Type_WellKnownType_IsValid(int value);
constexpr Type_WellKnownType Type_WellKnownType_WellKnownType_MIN = Type_WellKnownType_WELL_KNOWN_TYPE_UNSPECIFIED;
constexpr Type_WellKnownType Type_WellKnownType_WellKnownType_MAX = Type_WellKnownType_DURATION;
constexpr int Type_WellKnownType_WellKnownType_ARRAYSIZE = Type_WellKnownType_WellKnownType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_WellKnownType_descriptor();
template<typename T>
inline const std::string& Type_WellKnownType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type_WellKnownType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_WellKnownType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_WellKnownType_descriptor(), enum_t_value);
}
inline bool Type_WellKnownType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type_WellKnownType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type_WellKnownType>(
    Type_WellKnownType_descriptor(), name, value);
}
// ===================================================================

class CheckedExpr_ReferenceMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CheckedExpr_ReferenceMapEntry_DoNotUse, 
    int64_t, ::google::api::expr::v1alpha1::Reference,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CheckedExpr_ReferenceMapEntry_DoNotUse, 
    int64_t, ::google::api::expr::v1alpha1::Reference,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CheckedExpr_ReferenceMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CheckedExpr_ReferenceMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CheckedExpr_ReferenceMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CheckedExpr_ReferenceMapEntry_DoNotUse& other);
  static const CheckedExpr_ReferenceMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CheckedExpr_ReferenceMapEntry_DoNotUse*>(&_CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};

// -------------------------------------------------------------------

class CheckedExpr_TypeMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CheckedExpr_TypeMapEntry_DoNotUse, 
    int64_t, ::google::api::expr::v1alpha1::Type,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CheckedExpr_TypeMapEntry_DoNotUse, 
    int64_t, ::google::api::expr::v1alpha1::Type,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CheckedExpr_TypeMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CheckedExpr_TypeMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CheckedExpr_TypeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CheckedExpr_TypeMapEntry_DoNotUse& other);
  static const CheckedExpr_TypeMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CheckedExpr_TypeMapEntry_DoNotUse*>(&_CheckedExpr_TypeMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};

// -------------------------------------------------------------------

class CheckedExpr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.CheckedExpr) */ {
 public:
  inline CheckedExpr() : CheckedExpr(nullptr) {}
  ~CheckedExpr() override;
  explicit PROTOBUF_CONSTEXPR CheckedExpr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckedExpr(const CheckedExpr& from);
  CheckedExpr(CheckedExpr&& from) noexcept
    : CheckedExpr() {
    *this = ::std::move(from);
  }

  inline CheckedExpr& operator=(const CheckedExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckedExpr& operator=(CheckedExpr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckedExpr& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckedExpr* internal_default_instance() {
    return reinterpret_cast<const CheckedExpr*>(
               &_CheckedExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CheckedExpr& a, CheckedExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckedExpr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckedExpr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckedExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CheckedExpr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CheckedExpr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CheckedExpr& from) {
    CheckedExpr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckedExpr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.CheckedExpr";
  }
  protected:
  explicit CheckedExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kReferenceMapFieldNumber = 2,
    kTypeMapFieldNumber = 3,
    kExprVersionFieldNumber = 6,
    kExprFieldNumber = 4,
    kSourceInfoFieldNumber = 5,
  };
  // map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2 [json_name = "referenceMap"];
  int reference_map_size() const;
  private:
  int _internal_reference_map_size() const;
  public:
  void clear_reference_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Reference >&
      _internal_reference_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Reference >*
      _internal_mutable_reference_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Reference >&
      reference_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Reference >*
      mutable_reference_map();

  // map<int64, .google.api.expr.v1alpha1.Type> type_map = 3 [json_name = "typeMap"];
  int type_map_size() const;
  private:
  int _internal_type_map_size() const;
  public:
  void clear_type_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Type >&
      _internal_type_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Type >*
      _internal_mutable_type_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Type >&
      type_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Type >*
      mutable_type_map();

  // string expr_version = 6 [json_name = "exprVersion"];
  void clear_expr_version();
  const std::string& expr_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_expr_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_expr_version();
  PROTOBUF_NODISCARD std::string* release_expr_version();
  void set_allocated_expr_version(std::string* expr_version);
  private:
  const std::string& _internal_expr_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_expr_version(const std::string& value);
  std::string* _internal_mutable_expr_version();
  public:

  // .google.api.expr.v1alpha1.Expr expr = 4 [json_name = "expr"];
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const ::google::api::expr::v1alpha1::Expr& expr() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_expr();
  ::google::api::expr::v1alpha1::Expr* mutable_expr();
  void set_allocated_expr(::google::api::expr::v1alpha1::Expr* expr);
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_expr() const;
  ::google::api::expr::v1alpha1::Expr* _internal_mutable_expr();
  public:
  void unsafe_arena_set_allocated_expr(
      ::google::api::expr::v1alpha1::Expr* expr);
  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_expr();

  // .google.api.expr.v1alpha1.SourceInfo source_info = 5 [json_name = "sourceInfo"];
  bool has_source_info() const;
  private:
  bool _internal_has_source_info() const;
  public:
  void clear_source_info();
  const ::google::api::expr::v1alpha1::SourceInfo& source_info() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::SourceInfo* release_source_info();
  ::google::api::expr::v1alpha1::SourceInfo* mutable_source_info();
  void set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* source_info);
  private:
  const ::google::api::expr::v1alpha1::SourceInfo& _internal_source_info() const;
  ::google::api::expr::v1alpha1::SourceInfo* _internal_mutable_source_info();
  public:
  void unsafe_arena_set_allocated_source_info(
      ::google::api::expr::v1alpha1::SourceInfo* source_info);
  ::google::api::expr::v1alpha1::SourceInfo* unsafe_arena_release_source_info();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.CheckedExpr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CheckedExpr_ReferenceMapEntry_DoNotUse,
        int64_t, ::google::api::expr::v1alpha1::Reference,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> reference_map_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CheckedExpr_TypeMapEntry_DoNotUse,
        int64_t, ::google::api::expr::v1alpha1::Type,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> type_map_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expr_version_;
    ::google::api::expr::v1alpha1::Expr* expr_;
    ::google::api::expr::v1alpha1::SourceInfo* source_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};
// -------------------------------------------------------------------

class Type_ListType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type.ListType) */ {
 public:
  inline Type_ListType() : Type_ListType(nullptr) {}
  ~Type_ListType() override;
  explicit PROTOBUF_CONSTEXPR Type_ListType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Type_ListType(const Type_ListType& from);
  Type_ListType(Type_ListType&& from) noexcept
    : Type_ListType() {
    *this = ::std::move(from);
  }

  inline Type_ListType& operator=(const Type_ListType& from) {
    CopyFrom(from);
    return *this;
  }
  inline Type_ListType& operator=(Type_ListType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Type_ListType& default_instance() {
    return *internal_default_instance();
  }
  static inline const Type_ListType* internal_default_instance() {
    return reinterpret_cast<const Type_ListType*>(
               &_Type_ListType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Type_ListType& a, Type_ListType& b) {
    a.Swap(&b);
  }
  inline void Swap(Type_ListType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Type_ListType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Type_ListType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Type_ListType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Type_ListType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Type_ListType& from) {
    Type_ListType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type_ListType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Type.ListType";
  }
  protected:
  explicit Type_ListType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemTypeFieldNumber = 1,
  };
  // .google.api.expr.v1alpha1.Type elem_type = 1 [json_name = "elemType"];
  bool has_elem_type() const;
  private:
  bool _internal_has_elem_type() const;
  public:
  void clear_elem_type();
  const ::google::api::expr::v1alpha1::Type& elem_type() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_elem_type();
  ::google::api::expr::v1alpha1::Type* mutable_elem_type();
  void set_allocated_elem_type(::google::api::expr::v1alpha1::Type* elem_type);
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_elem_type() const;
  ::google::api::expr::v1alpha1::Type* _internal_mutable_elem_type();
  public:
  void unsafe_arena_set_allocated_elem_type(
      ::google::api::expr::v1alpha1::Type* elem_type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_elem_type();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type.ListType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::api::expr::v1alpha1::Type* elem_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};
// -------------------------------------------------------------------

class Type_MapType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type.MapType) */ {
 public:
  inline Type_MapType() : Type_MapType(nullptr) {}
  ~Type_MapType() override;
  explicit PROTOBUF_CONSTEXPR Type_MapType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Type_MapType(const Type_MapType& from);
  Type_MapType(Type_MapType&& from) noexcept
    : Type_MapType() {
    *this = ::std::move(from);
  }

  inline Type_MapType& operator=(const Type_MapType& from) {
    CopyFrom(from);
    return *this;
  }
  inline Type_MapType& operator=(Type_MapType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Type_MapType& default_instance() {
    return *internal_default_instance();
  }
  static inline const Type_MapType* internal_default_instance() {
    return reinterpret_cast<const Type_MapType*>(
               &_Type_MapType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Type_MapType& a, Type_MapType& b) {
    a.Swap(&b);
  }
  inline void Swap(Type_MapType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Type_MapType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Type_MapType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Type_MapType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Type_MapType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Type_MapType& from) {
    Type_MapType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type_MapType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Type.MapType";
  }
  protected:
  explicit Type_MapType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyTypeFieldNumber = 1,
    kValueTypeFieldNumber = 2,
  };
  // .google.api.expr.v1alpha1.Type key_type = 1 [json_name = "keyType"];
  bool has_key_type() const;
  private:
  bool _internal_has_key_type() const;
  public:
  void clear_key_type();
  const ::google::api::expr::v1alpha1::Type& key_type() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_key_type();
  ::google::api::expr::v1alpha1::Type* mutable_key_type();
  void set_allocated_key_type(::google::api::expr::v1alpha1::Type* key_type);
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_key_type() const;
  ::google::api::expr::v1alpha1::Type* _internal_mutable_key_type();
  public:
  void unsafe_arena_set_allocated_key_type(
      ::google::api::expr::v1alpha1::Type* key_type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_key_type();

  // .google.api.expr.v1alpha1.Type value_type = 2 [json_name = "valueType"];
  bool has_value_type() const;
  private:
  bool _internal_has_value_type() const;
  public:
  void clear_value_type();
  const ::google::api::expr::v1alpha1::Type& value_type() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_value_type();
  ::google::api::expr::v1alpha1::Type* mutable_value_type();
  void set_allocated_value_type(::google::api::expr::v1alpha1::Type* value_type);
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_value_type() const;
  ::google::api::expr::v1alpha1::Type* _internal_mutable_value_type();
  public:
  void unsafe_arena_set_allocated_value_type(
      ::google::api::expr::v1alpha1::Type* value_type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_value_type();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type.MapType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::api::expr::v1alpha1::Type* key_type_;
    ::google::api::expr::v1alpha1::Type* value_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};
// -------------------------------------------------------------------

class Type_FunctionType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type.FunctionType) */ {
 public:
  inline Type_FunctionType() : Type_FunctionType(nullptr) {}
  ~Type_FunctionType() override;
  explicit PROTOBUF_CONSTEXPR Type_FunctionType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Type_FunctionType(const Type_FunctionType& from);
  Type_FunctionType(Type_FunctionType&& from) noexcept
    : Type_FunctionType() {
    *this = ::std::move(from);
  }

  inline Type_FunctionType& operator=(const Type_FunctionType& from) {
    CopyFrom(from);
    return *this;
  }
  inline Type_FunctionType& operator=(Type_FunctionType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Type_FunctionType& default_instance() {
    return *internal_default_instance();
  }
  static inline const Type_FunctionType* internal_default_instance() {
    return reinterpret_cast<const Type_FunctionType*>(
               &_Type_FunctionType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Type_FunctionType& a, Type_FunctionType& b) {
    a.Swap(&b);
  }
  inline void Swap(Type_FunctionType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Type_FunctionType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Type_FunctionType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Type_FunctionType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Type_FunctionType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Type_FunctionType& from) {
    Type_FunctionType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type_FunctionType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Type.FunctionType";
  }
  protected:
  explicit Type_FunctionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgTypesFieldNumber = 2,
    kResultTypeFieldNumber = 1,
  };
  // repeated .google.api.expr.v1alpha1.Type arg_types = 2 [json_name = "argTypes"];
  int arg_types_size() const;
  private:
  int _internal_arg_types_size() const;
  public:
  void clear_arg_types();
  ::google::api::expr::v1alpha1::Type* mutable_arg_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
      mutable_arg_types();
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_arg_types(int index) const;
  ::google::api::expr::v1alpha1::Type* _internal_add_arg_types();
  public:
  const ::google::api::expr::v1alpha1::Type& arg_types(int index) const;
  ::google::api::expr::v1alpha1::Type* add_arg_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
      arg_types() const;

  // .google.api.expr.v1alpha1.Type result_type = 1 [json_name = "resultType"];
  bool has_result_type() const;
  private:
  bool _internal_has_result_type() const;
  public:
  void clear_result_type();
  const ::google::api::expr::v1alpha1::Type& result_type() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_result_type();
  ::google::api::expr::v1alpha1::Type* mutable_result_type();
  void set_allocated_result_type(::google::api::expr::v1alpha1::Type* result_type);
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_result_type() const;
  ::google::api::expr::v1alpha1::Type* _internal_mutable_result_type();
  public:
  void unsafe_arena_set_allocated_result_type(
      ::google::api::expr::v1alpha1::Type* result_type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_result_type();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type.FunctionType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type > arg_types_;
    ::google::api::expr::v1alpha1::Type* result_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};
// -------------------------------------------------------------------

class Type_AbstractType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type.AbstractType) */ {
 public:
  inline Type_AbstractType() : Type_AbstractType(nullptr) {}
  ~Type_AbstractType() override;
  explicit PROTOBUF_CONSTEXPR Type_AbstractType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Type_AbstractType(const Type_AbstractType& from);
  Type_AbstractType(Type_AbstractType&& from) noexcept
    : Type_AbstractType() {
    *this = ::std::move(from);
  }

  inline Type_AbstractType& operator=(const Type_AbstractType& from) {
    CopyFrom(from);
    return *this;
  }
  inline Type_AbstractType& operator=(Type_AbstractType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Type_AbstractType& default_instance() {
    return *internal_default_instance();
  }
  static inline const Type_AbstractType* internal_default_instance() {
    return reinterpret_cast<const Type_AbstractType*>(
               &_Type_AbstractType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Type_AbstractType& a, Type_AbstractType& b) {
    a.Swap(&b);
  }
  inline void Swap(Type_AbstractType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Type_AbstractType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Type_AbstractType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Type_AbstractType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Type_AbstractType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Type_AbstractType& from) {
    Type_AbstractType::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type_AbstractType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Type.AbstractType";
  }
  protected:
  explicit Type_AbstractType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterTypesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .google.api.expr.v1alpha1.Type parameter_types = 2 [json_name = "parameterTypes"];
  int parameter_types_size() const;
  private:
  int _internal_parameter_types_size() const;
  public:
  void clear_parameter_types();
  ::google::api::expr::v1alpha1::Type* mutable_parameter_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
      mutable_parameter_types();
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_parameter_types(int index) const;
  ::google::api::expr::v1alpha1::Type* _internal_add_parameter_types();
  public:
  const ::google::api::expr::v1alpha1::Type& parameter_types(int index) const;
  ::google::api::expr::v1alpha1::Type* add_parameter_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
      parameter_types() const;

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type.AbstractType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type > parameter_types_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};
// -------------------------------------------------------------------

class Type final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Type) */ {
 public:
  inline Type() : Type(nullptr) {}
  ~Type() override;
  explicit PROTOBUF_CONSTEXPR Type(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Type(const Type& from);
  Type(Type&& from) noexcept
    : Type() {
    *this = ::std::move(from);
  }

  inline Type& operator=(const Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline Type& operator=(Type&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Type& default_instance() {
    return *internal_default_instance();
  }
  enum TypeKindCase {
    kDyn = 1,
    kNull = 2,
    kPrimitive = 3,
    kWrapper = 4,
    kWellKnown = 5,
    kListType = 6,
    kMapType = 7,
    kFunction = 8,
    kMessageType = 9,
    kTypeParam = 10,
    kType = 11,
    kError = 12,
    kAbstractType = 14,
    TYPE_KIND_NOT_SET = 0,
  };

  static inline const Type* internal_default_instance() {
    return reinterpret_cast<const Type*>(
               &_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Type& a, Type& b) {
    a.Swap(&b);
  }
  inline void Swap(Type* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Type* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Type>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Type& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Type& from) {
    Type::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Type* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Type";
  }
  protected:
  explicit Type(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Type_ListType ListType;
  typedef Type_MapType MapType;
  typedef Type_FunctionType FunctionType;
  typedef Type_AbstractType AbstractType;

  typedef Type_PrimitiveType PrimitiveType;
  static constexpr PrimitiveType PRIMITIVE_TYPE_UNSPECIFIED =
    Type_PrimitiveType_PRIMITIVE_TYPE_UNSPECIFIED;
  static constexpr PrimitiveType BOOL =
    Type_PrimitiveType_BOOL;
  static constexpr PrimitiveType INT64 =
    Type_PrimitiveType_INT64;
  static constexpr PrimitiveType UINT64 =
    Type_PrimitiveType_UINT64;
  static constexpr PrimitiveType DOUBLE =
    Type_PrimitiveType_DOUBLE;
  static constexpr PrimitiveType STRING =
    Type_PrimitiveType_STRING;
  static constexpr PrimitiveType BYTES =
    Type_PrimitiveType_BYTES;
  static inline bool PrimitiveType_IsValid(int value) {
    return Type_PrimitiveType_IsValid(value);
  }
  static constexpr PrimitiveType PrimitiveType_MIN =
    Type_PrimitiveType_PrimitiveType_MIN;
  static constexpr PrimitiveType PrimitiveType_MAX =
    Type_PrimitiveType_PrimitiveType_MAX;
  static constexpr int PrimitiveType_ARRAYSIZE =
    Type_PrimitiveType_PrimitiveType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PrimitiveType_descriptor() {
    return Type_PrimitiveType_descriptor();
  }
  template<typename T>
  static inline const std::string& PrimitiveType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PrimitiveType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PrimitiveType_Name.");
    return Type_PrimitiveType_Name(enum_t_value);
  }
  static inline bool PrimitiveType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PrimitiveType* value) {
    return Type_PrimitiveType_Parse(name, value);
  }

  typedef Type_WellKnownType WellKnownType;
  static constexpr WellKnownType WELL_KNOWN_TYPE_UNSPECIFIED =
    Type_WellKnownType_WELL_KNOWN_TYPE_UNSPECIFIED;
  static constexpr WellKnownType ANY =
    Type_WellKnownType_ANY;
  static constexpr WellKnownType TIMESTAMP =
    Type_WellKnownType_TIMESTAMP;
  static constexpr WellKnownType DURATION =
    Type_WellKnownType_DURATION;
  static inline bool WellKnownType_IsValid(int value) {
    return Type_WellKnownType_IsValid(value);
  }
  static constexpr WellKnownType WellKnownType_MIN =
    Type_WellKnownType_WellKnownType_MIN;
  static constexpr WellKnownType WellKnownType_MAX =
    Type_WellKnownType_WellKnownType_MAX;
  static constexpr int WellKnownType_ARRAYSIZE =
    Type_WellKnownType_WellKnownType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  WellKnownType_descriptor() {
    return Type_WellKnownType_descriptor();
  }
  template<typename T>
  static inline const std::string& WellKnownType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WellKnownType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function WellKnownType_Name.");
    return Type_WellKnownType_Name(enum_t_value);
  }
  static inline bool WellKnownType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      WellKnownType* value) {
    return Type_WellKnownType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDynFieldNumber = 1,
    kNullFieldNumber = 2,
    kPrimitiveFieldNumber = 3,
    kWrapperFieldNumber = 4,
    kWellKnownFieldNumber = 5,
    kListTypeFieldNumber = 6,
    kMapTypeFieldNumber = 7,
    kFunctionFieldNumber = 8,
    kMessageTypeFieldNumber = 9,
    kTypeParamFieldNumber = 10,
    kTypeFieldNumber = 11,
    kErrorFieldNumber = 12,
    kAbstractTypeFieldNumber = 14,
  };
  // .google.protobuf.Empty dyn = 1 [json_name = "dyn"];
  bool has_dyn() const;
  private:
  bool _internal_has_dyn() const;
  public:
  void clear_dyn();
  const ::PROTOBUF_NAMESPACE_ID::Empty& dyn() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Empty* release_dyn();
  ::PROTOBUF_NAMESPACE_ID::Empty* mutable_dyn();
  void set_allocated_dyn(::PROTOBUF_NAMESPACE_ID::Empty* dyn);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Empty& _internal_dyn() const;
  ::PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_dyn();
  public:
  void unsafe_arena_set_allocated_dyn(
      ::PROTOBUF_NAMESPACE_ID::Empty* dyn);
  ::PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_dyn();

  // .google.protobuf.NullValue null = 2 [json_name = "null"];
  bool has_null() const;
  private:
  bool _internal_has_null() const;
  public:
  void clear_null();
  ::PROTOBUF_NAMESPACE_ID::NullValue null() const;
  void set_null(::PROTOBUF_NAMESPACE_ID::NullValue value);
  private:
  ::PROTOBUF_NAMESPACE_ID::NullValue _internal_null() const;
  void _internal_set_null(::PROTOBUF_NAMESPACE_ID::NullValue value);
  public:

  // .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3 [json_name = "primitive"];
  bool has_primitive() const;
  private:
  bool _internal_has_primitive() const;
  public:
  void clear_primitive();
  ::google::api::expr::v1alpha1::Type_PrimitiveType primitive() const;
  void set_primitive(::google::api::expr::v1alpha1::Type_PrimitiveType value);
  private:
  ::google::api::expr::v1alpha1::Type_PrimitiveType _internal_primitive() const;
  void _internal_set_primitive(::google::api::expr::v1alpha1::Type_PrimitiveType value);
  public:

  // .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4 [json_name = "wrapper"];
  bool has_wrapper() const;
  private:
  bool _internal_has_wrapper() const;
  public:
  void clear_wrapper();
  ::google::api::expr::v1alpha1::Type_PrimitiveType wrapper() const;
  void set_wrapper(::google::api::expr::v1alpha1::Type_PrimitiveType value);
  private:
  ::google::api::expr::v1alpha1::Type_PrimitiveType _internal_wrapper() const;
  void _internal_set_wrapper(::google::api::expr::v1alpha1::Type_PrimitiveType value);
  public:

  // .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5 [json_name = "wellKnown"];
  bool has_well_known() const;
  private:
  bool _internal_has_well_known() const;
  public:
  void clear_well_known();
  ::google::api::expr::v1alpha1::Type_WellKnownType well_known() const;
  void set_well_known(::google::api::expr::v1alpha1::Type_WellKnownType value);
  private:
  ::google::api::expr::v1alpha1::Type_WellKnownType _internal_well_known() const;
  void _internal_set_well_known(::google::api::expr::v1alpha1::Type_WellKnownType value);
  public:

  // .google.api.expr.v1alpha1.Type.ListType list_type = 6 [json_name = "listType"];
  bool has_list_type() const;
  private:
  bool _internal_has_list_type() const;
  public:
  void clear_list_type();
  const ::google::api::expr::v1alpha1::Type_ListType& list_type() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type_ListType* release_list_type();
  ::google::api::expr::v1alpha1::Type_ListType* mutable_list_type();
  void set_allocated_list_type(::google::api::expr::v1alpha1::Type_ListType* list_type);
  private:
  const ::google::api::expr::v1alpha1::Type_ListType& _internal_list_type() const;
  ::google::api::expr::v1alpha1::Type_ListType* _internal_mutable_list_type();
  public:
  void unsafe_arena_set_allocated_list_type(
      ::google::api::expr::v1alpha1::Type_ListType* list_type);
  ::google::api::expr::v1alpha1::Type_ListType* unsafe_arena_release_list_type();

  // .google.api.expr.v1alpha1.Type.MapType map_type = 7 [json_name = "mapType"];
  bool has_map_type() const;
  private:
  bool _internal_has_map_type() const;
  public:
  void clear_map_type();
  const ::google::api::expr::v1alpha1::Type_MapType& map_type() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type_MapType* release_map_type();
  ::google::api::expr::v1alpha1::Type_MapType* mutable_map_type();
  void set_allocated_map_type(::google::api::expr::v1alpha1::Type_MapType* map_type);
  private:
  const ::google::api::expr::v1alpha1::Type_MapType& _internal_map_type() const;
  ::google::api::expr::v1alpha1::Type_MapType* _internal_mutable_map_type();
  public:
  void unsafe_arena_set_allocated_map_type(
      ::google::api::expr::v1alpha1::Type_MapType* map_type);
  ::google::api::expr::v1alpha1::Type_MapType* unsafe_arena_release_map_type();

  // .google.api.expr.v1alpha1.Type.FunctionType function = 8 [json_name = "function"];
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const ::google::api::expr::v1alpha1::Type_FunctionType& function() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type_FunctionType* release_function();
  ::google::api::expr::v1alpha1::Type_FunctionType* mutable_function();
  void set_allocated_function(::google::api::expr::v1alpha1::Type_FunctionType* function);
  private:
  const ::google::api::expr::v1alpha1::Type_FunctionType& _internal_function() const;
  ::google::api::expr::v1alpha1::Type_FunctionType* _internal_mutable_function();
  public:
  void unsafe_arena_set_allocated_function(
      ::google::api::expr::v1alpha1::Type_FunctionType* function);
  ::google::api::expr::v1alpha1::Type_FunctionType* unsafe_arena_release_function();

  // string message_type = 9 [json_name = "messageType"];
  bool has_message_type() const;
  private:
  bool _internal_has_message_type() const;
  public:
  void clear_message_type();
  const std::string& message_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_type();
  PROTOBUF_NODISCARD std::string* release_message_type();
  void set_allocated_message_type(std::string* message_type);
  private:
  const std::string& _internal_message_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_type(const std::string& value);
  std::string* _internal_mutable_message_type();
  public:

  // string type_param = 10 [json_name = "typeParam"];
  bool has_type_param() const;
  private:
  bool _internal_has_type_param() const;
  public:
  void clear_type_param();
  const std::string& type_param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_param();
  PROTOBUF_NODISCARD std::string* release_type_param();
  void set_allocated_type_param(std::string* type_param);
  private:
  const std::string& _internal_type_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_param(const std::string& value);
  std::string* _internal_mutable_type_param();
  public:

  // .google.api.expr.v1alpha1.Type type = 11 [json_name = "type"];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::google::api::expr::v1alpha1::Type& type() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_type();
  ::google::api::expr::v1alpha1::Type* mutable_type();
  void set_allocated_type(::google::api::expr::v1alpha1::Type* type);
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_type() const;
  ::google::api::expr::v1alpha1::Type* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::google::api::expr::v1alpha1::Type* type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_type();

  // .google.protobuf.Empty error = 12 [json_name = "error"];
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::PROTOBUF_NAMESPACE_ID::Empty& error() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Empty* release_error();
  ::PROTOBUF_NAMESPACE_ID::Empty* mutable_error();
  void set_allocated_error(::PROTOBUF_NAMESPACE_ID::Empty* error);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Empty& _internal_error() const;
  ::PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::PROTOBUF_NAMESPACE_ID::Empty* error);
  ::PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_error();

  // .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14 [json_name = "abstractType"];
  bool has_abstract_type() const;
  private:
  bool _internal_has_abstract_type() const;
  public:
  void clear_abstract_type();
  const ::google::api::expr::v1alpha1::Type_AbstractType& abstract_type() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type_AbstractType* release_abstract_type();
  ::google::api::expr::v1alpha1::Type_AbstractType* mutable_abstract_type();
  void set_allocated_abstract_type(::google::api::expr::v1alpha1::Type_AbstractType* abstract_type);
  private:
  const ::google::api::expr::v1alpha1::Type_AbstractType& _internal_abstract_type() const;
  ::google::api::expr::v1alpha1::Type_AbstractType* _internal_mutable_abstract_type();
  public:
  void unsafe_arena_set_allocated_abstract_type(
      ::google::api::expr::v1alpha1::Type_AbstractType* abstract_type);
  ::google::api::expr::v1alpha1::Type_AbstractType* unsafe_arena_release_abstract_type();

  void clear_type_kind();
  TypeKindCase type_kind_case() const;
  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Type)
 private:
  class _Internal;
  void set_has_dyn();
  void set_has_null();
  void set_has_primitive();
  void set_has_wrapper();
  void set_has_well_known();
  void set_has_list_type();
  void set_has_map_type();
  void set_has_function();
  void set_has_message_type();
  void set_has_type_param();
  void set_has_type();
  void set_has_error();
  void set_has_abstract_type();

  inline bool has_type_kind() const;
  inline void clear_has_type_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union TypeKindUnion {
      constexpr TypeKindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::Empty* dyn_;
      int null_;
      int primitive_;
      int wrapper_;
      int well_known_;
      ::google::api::expr::v1alpha1::Type_ListType* list_type_;
      ::google::api::expr::v1alpha1::Type_MapType* map_type_;
      ::google::api::expr::v1alpha1::Type_FunctionType* function_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_param_;
      ::google::api::expr::v1alpha1::Type* type_;
      ::PROTOBUF_NAMESPACE_ID::Empty* error_;
      ::google::api::expr::v1alpha1::Type_AbstractType* abstract_type_;
    } type_kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};
// -------------------------------------------------------------------

class Decl_IdentDecl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Decl.IdentDecl) */ {
 public:
  inline Decl_IdentDecl() : Decl_IdentDecl(nullptr) {}
  ~Decl_IdentDecl() override;
  explicit PROTOBUF_CONSTEXPR Decl_IdentDecl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Decl_IdentDecl(const Decl_IdentDecl& from);
  Decl_IdentDecl(Decl_IdentDecl&& from) noexcept
    : Decl_IdentDecl() {
    *this = ::std::move(from);
  }

  inline Decl_IdentDecl& operator=(const Decl_IdentDecl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decl_IdentDecl& operator=(Decl_IdentDecl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Decl_IdentDecl& default_instance() {
    return *internal_default_instance();
  }
  static inline const Decl_IdentDecl* internal_default_instance() {
    return reinterpret_cast<const Decl_IdentDecl*>(
               &_Decl_IdentDecl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Decl_IdentDecl& a, Decl_IdentDecl& b) {
    a.Swap(&b);
  }
  inline void Swap(Decl_IdentDecl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decl_IdentDecl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Decl_IdentDecl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Decl_IdentDecl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Decl_IdentDecl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Decl_IdentDecl& from) {
    Decl_IdentDecl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decl_IdentDecl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Decl.IdentDecl";
  }
  protected:
  explicit Decl_IdentDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocFieldNumber = 3,
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string doc = 3 [json_name = "doc"];
  void clear_doc();
  const std::string& doc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_doc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_doc();
  PROTOBUF_NODISCARD std::string* release_doc();
  void set_allocated_doc(std::string* doc);
  private:
  const std::string& _internal_doc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc(const std::string& value);
  std::string* _internal_mutable_doc();
  public:

  // .google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::google::api::expr::v1alpha1::Type& type() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_type();
  ::google::api::expr::v1alpha1::Type* mutable_type();
  void set_allocated_type(::google::api::expr::v1alpha1::Type* type);
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_type() const;
  ::google::api::expr::v1alpha1::Type* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::google::api::expr::v1alpha1::Type* type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_type();

  // .google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::google::api::expr::v1alpha1::Constant& value() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Constant* release_value();
  ::google::api::expr::v1alpha1::Constant* mutable_value();
  void set_allocated_value(::google::api::expr::v1alpha1::Constant* value);
  private:
  const ::google::api::expr::v1alpha1::Constant& _internal_value() const;
  ::google::api::expr::v1alpha1::Constant* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::google::api::expr::v1alpha1::Constant* value);
  ::google::api::expr::v1alpha1::Constant* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl.IdentDecl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_;
    ::google::api::expr::v1alpha1::Type* type_;
    ::google::api::expr::v1alpha1::Constant* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};
// -------------------------------------------------------------------

class Decl_FunctionDecl_Overload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload) */ {
 public:
  inline Decl_FunctionDecl_Overload() : Decl_FunctionDecl_Overload(nullptr) {}
  ~Decl_FunctionDecl_Overload() override;
  explicit PROTOBUF_CONSTEXPR Decl_FunctionDecl_Overload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Decl_FunctionDecl_Overload(const Decl_FunctionDecl_Overload& from);
  Decl_FunctionDecl_Overload(Decl_FunctionDecl_Overload&& from) noexcept
    : Decl_FunctionDecl_Overload() {
    *this = ::std::move(from);
  }

  inline Decl_FunctionDecl_Overload& operator=(const Decl_FunctionDecl_Overload& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decl_FunctionDecl_Overload& operator=(Decl_FunctionDecl_Overload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Decl_FunctionDecl_Overload& default_instance() {
    return *internal_default_instance();
  }
  static inline const Decl_FunctionDecl_Overload* internal_default_instance() {
    return reinterpret_cast<const Decl_FunctionDecl_Overload*>(
               &_Decl_FunctionDecl_Overload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Decl_FunctionDecl_Overload& a, Decl_FunctionDecl_Overload& b) {
    a.Swap(&b);
  }
  inline void Swap(Decl_FunctionDecl_Overload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decl_FunctionDecl_Overload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Decl_FunctionDecl_Overload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Decl_FunctionDecl_Overload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Decl_FunctionDecl_Overload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Decl_FunctionDecl_Overload& from) {
    Decl_FunctionDecl_Overload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decl_FunctionDecl_Overload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload";
  }
  protected:
  explicit Decl_FunctionDecl_Overload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kTypeParamsFieldNumber = 3,
    kOverloadIdFieldNumber = 1,
    kDocFieldNumber = 6,
    kResultTypeFieldNumber = 4,
    kIsInstanceFunctionFieldNumber = 5,
  };
  // repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::google::api::expr::v1alpha1::Type* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
      mutable_params();
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_params(int index) const;
  ::google::api::expr::v1alpha1::Type* _internal_add_params();
  public:
  const ::google::api::expr::v1alpha1::Type& params(int index) const;
  ::google::api::expr::v1alpha1::Type* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
      params() const;

  // repeated string type_params = 3 [json_name = "typeParams"];
  int type_params_size() const;
  private:
  int _internal_type_params_size() const;
  public:
  void clear_type_params();
  const std::string& type_params(int index) const;
  std::string* mutable_type_params(int index);
  void set_type_params(int index, const std::string& value);
  void set_type_params(int index, std::string&& value);
  void set_type_params(int index, const char* value);
  void set_type_params(int index, const char* value, size_t size);
  std::string* add_type_params();
  void add_type_params(const std::string& value);
  void add_type_params(std::string&& value);
  void add_type_params(const char* value);
  void add_type_params(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& type_params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_type_params();
  private:
  const std::string& _internal_type_params(int index) const;
  std::string* _internal_add_type_params();
  public:

  // string overload_id = 1 [json_name = "overloadId"];
  void clear_overload_id();
  const std::string& overload_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_overload_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_overload_id();
  PROTOBUF_NODISCARD std::string* release_overload_id();
  void set_allocated_overload_id(std::string* overload_id);
  private:
  const std::string& _internal_overload_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_overload_id(const std::string& value);
  std::string* _internal_mutable_overload_id();
  public:

  // string doc = 6 [json_name = "doc"];
  void clear_doc();
  const std::string& doc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_doc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_doc();
  PROTOBUF_NODISCARD std::string* release_doc();
  void set_allocated_doc(std::string* doc);
  private:
  const std::string& _internal_doc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_doc(const std::string& value);
  std::string* _internal_mutable_doc();
  public:

  // .google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];
  bool has_result_type() const;
  private:
  bool _internal_has_result_type() const;
  public:
  void clear_result_type();
  const ::google::api::expr::v1alpha1::Type& result_type() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Type* release_result_type();
  ::google::api::expr::v1alpha1::Type* mutable_result_type();
  void set_allocated_result_type(::google::api::expr::v1alpha1::Type* result_type);
  private:
  const ::google::api::expr::v1alpha1::Type& _internal_result_type() const;
  ::google::api::expr::v1alpha1::Type* _internal_mutable_result_type();
  public:
  void unsafe_arena_set_allocated_result_type(
      ::google::api::expr::v1alpha1::Type* result_type);
  ::google::api::expr::v1alpha1::Type* unsafe_arena_release_result_type();

  // bool is_instance_function = 5 [json_name = "isInstanceFunction"];
  void clear_is_instance_function();
  bool is_instance_function() const;
  void set_is_instance_function(bool value);
  private:
  bool _internal_is_instance_function() const;
  void _internal_set_is_instance_function(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type > params_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> type_params_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr overload_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_;
    ::google::api::expr::v1alpha1::Type* result_type_;
    bool is_instance_function_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};
// -------------------------------------------------------------------

class Decl_FunctionDecl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Decl.FunctionDecl) */ {
 public:
  inline Decl_FunctionDecl() : Decl_FunctionDecl(nullptr) {}
  ~Decl_FunctionDecl() override;
  explicit PROTOBUF_CONSTEXPR Decl_FunctionDecl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Decl_FunctionDecl(const Decl_FunctionDecl& from);
  Decl_FunctionDecl(Decl_FunctionDecl&& from) noexcept
    : Decl_FunctionDecl() {
    *this = ::std::move(from);
  }

  inline Decl_FunctionDecl& operator=(const Decl_FunctionDecl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decl_FunctionDecl& operator=(Decl_FunctionDecl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Decl_FunctionDecl& default_instance() {
    return *internal_default_instance();
  }
  static inline const Decl_FunctionDecl* internal_default_instance() {
    return reinterpret_cast<const Decl_FunctionDecl*>(
               &_Decl_FunctionDecl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Decl_FunctionDecl& a, Decl_FunctionDecl& b) {
    a.Swap(&b);
  }
  inline void Swap(Decl_FunctionDecl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decl_FunctionDecl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Decl_FunctionDecl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Decl_FunctionDecl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Decl_FunctionDecl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Decl_FunctionDecl& from) {
    Decl_FunctionDecl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decl_FunctionDecl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Decl.FunctionDecl";
  }
  protected:
  explicit Decl_FunctionDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Decl_FunctionDecl_Overload Overload;

  // accessors -------------------------------------------------------

  enum : int {
    kOverloadsFieldNumber = 1,
  };
  // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];
  int overloads_size() const;
  private:
  int _internal_overloads_size() const;
  public:
  void clear_overloads();
  ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* mutable_overloads(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >*
      mutable_overloads();
  private:
  const ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload& _internal_overloads(int index) const;
  ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* _internal_add_overloads();
  public:
  const ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload& overloads(int index) const;
  ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* add_overloads();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >&
      overloads() const;

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl.FunctionDecl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload > overloads_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};
// -------------------------------------------------------------------

class Decl final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Decl) */ {
 public:
  inline Decl() : Decl(nullptr) {}
  ~Decl() override;
  explicit PROTOBUF_CONSTEXPR Decl(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Decl(const Decl& from);
  Decl(Decl&& from) noexcept
    : Decl() {
    *this = ::std::move(from);
  }

  inline Decl& operator=(const Decl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decl& operator=(Decl&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Decl& default_instance() {
    return *internal_default_instance();
  }
  enum DeclKindCase {
    kIdent = 2,
    kFunction = 3,
    DECL_KIND_NOT_SET = 0,
  };

  static inline const Decl* internal_default_instance() {
    return reinterpret_cast<const Decl*>(
               &_Decl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Decl& a, Decl& b) {
    a.Swap(&b);
  }
  inline void Swap(Decl* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Decl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Decl>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Decl& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Decl& from) {
    Decl::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decl* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Decl";
  }
  protected:
  explicit Decl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Decl_IdentDecl IdentDecl;
  typedef Decl_FunctionDecl FunctionDecl;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdentFieldNumber = 2,
    kFunctionFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];
  bool has_ident() const;
  private:
  bool _internal_has_ident() const;
  public:
  void clear_ident();
  const ::google::api::expr::v1alpha1::Decl_IdentDecl& ident() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Decl_IdentDecl* release_ident();
  ::google::api::expr::v1alpha1::Decl_IdentDecl* mutable_ident();
  void set_allocated_ident(::google::api::expr::v1alpha1::Decl_IdentDecl* ident);
  private:
  const ::google::api::expr::v1alpha1::Decl_IdentDecl& _internal_ident() const;
  ::google::api::expr::v1alpha1::Decl_IdentDecl* _internal_mutable_ident();
  public:
  void unsafe_arena_set_allocated_ident(
      ::google::api::expr::v1alpha1::Decl_IdentDecl* ident);
  ::google::api::expr::v1alpha1::Decl_IdentDecl* unsafe_arena_release_ident();

  // .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const ::google::api::expr::v1alpha1::Decl_FunctionDecl& function() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Decl_FunctionDecl* release_function();
  ::google::api::expr::v1alpha1::Decl_FunctionDecl* mutable_function();
  void set_allocated_function(::google::api::expr::v1alpha1::Decl_FunctionDecl* function);
  private:
  const ::google::api::expr::v1alpha1::Decl_FunctionDecl& _internal_function() const;
  ::google::api::expr::v1alpha1::Decl_FunctionDecl* _internal_mutable_function();
  public:
  void unsafe_arena_set_allocated_function(
      ::google::api::expr::v1alpha1::Decl_FunctionDecl* function);
  ::google::api::expr::v1alpha1::Decl_FunctionDecl* unsafe_arena_release_function();

  void clear_decl_kind();
  DeclKindCase decl_kind_case() const;
  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Decl)
 private:
  class _Internal;
  void set_has_ident();
  void set_has_function();

  inline bool has_decl_kind() const;
  inline void clear_has_decl_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    union DeclKindUnion {
      constexpr DeclKindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::google::api::expr::v1alpha1::Decl_IdentDecl* ident_;
      ::google::api::expr::v1alpha1::Decl_FunctionDecl* function_;
    } decl_kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};
// -------------------------------------------------------------------

class Reference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Reference) */ {
 public:
  inline Reference() : Reference(nullptr) {}
  ~Reference() override;
  explicit PROTOBUF_CONSTEXPR Reference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Reference(const Reference& from);
  Reference(Reference&& from) noexcept
    : Reference() {
    *this = ::std::move(from);
  }

  inline Reference& operator=(const Reference& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reference& operator=(Reference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Reference& default_instance() {
    return *internal_default_instance();
  }
  static inline const Reference* internal_default_instance() {
    return reinterpret_cast<const Reference*>(
               &_Reference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Reference& a, Reference& b) {
    a.Swap(&b);
  }
  inline void Swap(Reference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Reference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Reference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Reference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Reference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Reference& from) {
    Reference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Reference";
  }
  protected:
  explicit Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverloadIdFieldNumber = 3,
    kNameFieldNumber = 1,
    kValueFieldNumber = 4,
  };
  // repeated string overload_id = 3 [json_name = "overloadId"];
  int overload_id_size() const;
  private:
  int _internal_overload_id_size() const;
  public:
  void clear_overload_id();
  const std::string& overload_id(int index) const;
  std::string* mutable_overload_id(int index);
  void set_overload_id(int index, const std::string& value);
  void set_overload_id(int index, std::string&& value);
  void set_overload_id(int index, const char* value);
  void set_overload_id(int index, const char* value, size_t size);
  std::string* add_overload_id();
  void add_overload_id(const std::string& value);
  void add_overload_id(std::string&& value);
  void add_overload_id(const char* value);
  void add_overload_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& overload_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_overload_id();
  private:
  const std::string& _internal_overload_id(int index) const;
  std::string* _internal_add_overload_id();
  public:

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.api.expr.v1alpha1.Constant value = 4 [json_name = "value"];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::google::api::expr::v1alpha1::Constant& value() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Constant* release_value();
  ::google::api::expr::v1alpha1::Constant* mutable_value();
  void set_allocated_value(::google::api::expr::v1alpha1::Constant* value);
  private:
  const ::google::api::expr::v1alpha1::Constant& _internal_value() const;
  ::google::api::expr::v1alpha1::Constant* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::google::api::expr::v1alpha1::Constant* value);
  ::google::api::expr::v1alpha1::Constant* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Reference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> overload_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::google::api::expr::v1alpha1::Constant* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CheckedExpr

// map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2 [json_name = "referenceMap"];
inline int CheckedExpr::_internal_reference_map_size() const {
  return _impl_.reference_map_.size();
}
inline int CheckedExpr::reference_map_size() const {
  return _internal_reference_map_size();
}
inline void CheckedExpr::clear_reference_map() {
  _impl_.reference_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Reference >&
CheckedExpr::_internal_reference_map() const {
  return _impl_.reference_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Reference >&
CheckedExpr::reference_map() const {
  // @@protoc_insertion_point(field_map:google.api.expr.v1alpha1.CheckedExpr.reference_map)
  return _internal_reference_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Reference >*
CheckedExpr::_internal_mutable_reference_map() {
  return _impl_.reference_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Reference >*
CheckedExpr::mutable_reference_map() {
  // @@protoc_insertion_point(field_mutable_map:google.api.expr.v1alpha1.CheckedExpr.reference_map)
  return _internal_mutable_reference_map();
}

// map<int64, .google.api.expr.v1alpha1.Type> type_map = 3 [json_name = "typeMap"];
inline int CheckedExpr::_internal_type_map_size() const {
  return _impl_.type_map_.size();
}
inline int CheckedExpr::type_map_size() const {
  return _internal_type_map_size();
}
inline void CheckedExpr::clear_type_map() {
  _impl_.type_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Type >&
CheckedExpr::_internal_type_map() const {
  return _impl_.type_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Type >&
CheckedExpr::type_map() const {
  // @@protoc_insertion_point(field_map:google.api.expr.v1alpha1.CheckedExpr.type_map)
  return _internal_type_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Type >*
CheckedExpr::_internal_mutable_type_map() {
  return _impl_.type_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Type >*
CheckedExpr::mutable_type_map() {
  // @@protoc_insertion_point(field_mutable_map:google.api.expr.v1alpha1.CheckedExpr.type_map)
  return _internal_mutable_type_map();
}

// .google.api.expr.v1alpha1.SourceInfo source_info = 5 [json_name = "sourceInfo"];
inline bool CheckedExpr::_internal_has_source_info() const {
  return this != internal_default_instance() && _impl_.source_info_ != nullptr;
}
inline bool CheckedExpr::has_source_info() const {
  return _internal_has_source_info();
}
inline const ::google::api::expr::v1alpha1::SourceInfo& CheckedExpr::_internal_source_info() const {
  const ::google::api::expr::v1alpha1::SourceInfo* p = _impl_.source_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::SourceInfo&>(
      ::google::api::expr::v1alpha1::_SourceInfo_default_instance_);
}
inline const ::google::api::expr::v1alpha1::SourceInfo& CheckedExpr::source_info() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.CheckedExpr.source_info)
  return _internal_source_info();
}
inline void CheckedExpr::unsafe_arena_set_allocated_source_info(
    ::google::api::expr::v1alpha1::SourceInfo* source_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_info_);
  }
  _impl_.source_info_ = source_info;
  if (source_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.CheckedExpr.source_info)
}
inline ::google::api::expr::v1alpha1::SourceInfo* CheckedExpr::release_source_info() {
  
  ::google::api::expr::v1alpha1::SourceInfo* temp = _impl_.source_info_;
  _impl_.source_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::SourceInfo* CheckedExpr::unsafe_arena_release_source_info() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.CheckedExpr.source_info)
  
  ::google::api::expr::v1alpha1::SourceInfo* temp = _impl_.source_info_;
  _impl_.source_info_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::SourceInfo* CheckedExpr::_internal_mutable_source_info() {
  
  if (_impl_.source_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::SourceInfo>(GetArenaForAllocation());
    _impl_.source_info_ = p;
  }
  return _impl_.source_info_;
}
inline ::google::api::expr::v1alpha1::SourceInfo* CheckedExpr::mutable_source_info() {
  ::google::api::expr::v1alpha1::SourceInfo* _msg = _internal_mutable_source_info();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.CheckedExpr.source_info)
  return _msg;
}
inline void CheckedExpr::set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* source_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_info_);
  }
  if (source_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_info));
    if (message_arena != submessage_arena) {
      source_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.source_info_ = source_info;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.CheckedExpr.source_info)
}

// string expr_version = 6 [json_name = "exprVersion"];
inline void CheckedExpr::clear_expr_version() {
  _impl_.expr_version_.ClearToEmpty();
}
inline const std::string& CheckedExpr::expr_version() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.CheckedExpr.expr_version)
  return _internal_expr_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CheckedExpr::set_expr_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.expr_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.CheckedExpr.expr_version)
}
inline std::string* CheckedExpr::mutable_expr_version() {
  std::string* _s = _internal_mutable_expr_version();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.CheckedExpr.expr_version)
  return _s;
}
inline const std::string& CheckedExpr::_internal_expr_version() const {
  return _impl_.expr_version_.Get();
}
inline void CheckedExpr::_internal_set_expr_version(const std::string& value) {
  
  _impl_.expr_version_.Set(value, GetArenaForAllocation());
}
inline std::string* CheckedExpr::_internal_mutable_expr_version() {
  
  return _impl_.expr_version_.Mutable(GetArenaForAllocation());
}
inline std::string* CheckedExpr::release_expr_version() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.CheckedExpr.expr_version)
  return _impl_.expr_version_.Release();
}
inline void CheckedExpr::set_allocated_expr_version(std::string* expr_version) {
  if (expr_version != nullptr) {
    
  } else {
    
  }
  _impl_.expr_version_.SetAllocated(expr_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.expr_version_.IsDefault()) {
    _impl_.expr_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.CheckedExpr.expr_version)
}

// .google.api.expr.v1alpha1.Expr expr = 4 [json_name = "expr"];
inline bool CheckedExpr::_internal_has_expr() const {
  return this != internal_default_instance() && _impl_.expr_ != nullptr;
}
inline bool CheckedExpr::has_expr() const {
  return _internal_has_expr();
}
inline const ::google::api::expr::v1alpha1::Expr& CheckedExpr::_internal_expr() const {
  const ::google::api::expr::v1alpha1::Expr* p = _impl_.expr_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(
      ::google::api::expr::v1alpha1::_Expr_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr& CheckedExpr::expr() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.CheckedExpr.expr)
  return _internal_expr();
}
inline void CheckedExpr::unsafe_arena_set_allocated_expr(
    ::google::api::expr::v1alpha1::Expr* expr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expr_);
  }
  _impl_.expr_ = expr;
  if (expr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.CheckedExpr.expr)
}
inline ::google::api::expr::v1alpha1::Expr* CheckedExpr::release_expr() {
  
  ::google::api::expr::v1alpha1::Expr* temp = _impl_.expr_;
  _impl_.expr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* CheckedExpr::unsafe_arena_release_expr() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.CheckedExpr.expr)
  
  ::google::api::expr::v1alpha1::Expr* temp = _impl_.expr_;
  _impl_.expr_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* CheckedExpr::_internal_mutable_expr() {
  
  if (_impl_.expr_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
    _impl_.expr_ = p;
  }
  return _impl_.expr_;
}
inline ::google::api::expr::v1alpha1::Expr* CheckedExpr::mutable_expr() {
  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.CheckedExpr.expr)
  return _msg;
}
inline void CheckedExpr::set_allocated_expr(::google::api::expr::v1alpha1::Expr* expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expr_);
  }
  if (expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expr));
    if (message_arena != submessage_arena) {
      expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.CheckedExpr.expr)
}

// -------------------------------------------------------------------

// Type_ListType

// .google.api.expr.v1alpha1.Type elem_type = 1 [json_name = "elemType"];
inline bool Type_ListType::_internal_has_elem_type() const {
  return this != internal_default_instance() && _impl_.elem_type_ != nullptr;
}
inline bool Type_ListType::has_elem_type() const {
  return _internal_has_elem_type();
}
inline void Type_ListType::clear_elem_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.elem_type_ != nullptr) {
    delete _impl_.elem_type_;
  }
  _impl_.elem_type_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Type& Type_ListType::_internal_elem_type() const {
  const ::google::api::expr::v1alpha1::Type* p = _impl_.elem_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Type&>(
      ::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Type& Type_ListType::elem_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.ListType.elem_type)
  return _internal_elem_type();
}
inline void Type_ListType::unsafe_arena_set_allocated_elem_type(
    ::google::api::expr::v1alpha1::Type* elem_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elem_type_);
  }
  _impl_.elem_type_ = elem_type;
  if (elem_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.ListType.elem_type)
}
inline ::google::api::expr::v1alpha1::Type* Type_ListType::release_elem_type() {
  
  ::google::api::expr::v1alpha1::Type* temp = _impl_.elem_type_;
  _impl_.elem_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_ListType::unsafe_arena_release_elem_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.ListType.elem_type)
  
  ::google::api::expr::v1alpha1::Type* temp = _impl_.elem_type_;
  _impl_.elem_type_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_ListType::_internal_mutable_elem_type() {
  
  if (_impl_.elem_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaForAllocation());
    _impl_.elem_type_ = p;
  }
  return _impl_.elem_type_;
}
inline ::google::api::expr::v1alpha1::Type* Type_ListType::mutable_elem_type() {
  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_elem_type();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.ListType.elem_type)
  return _msg;
}
inline void Type_ListType::set_allocated_elem_type(::google::api::expr::v1alpha1::Type* elem_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.elem_type_;
  }
  if (elem_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(elem_type);
    if (message_arena != submessage_arena) {
      elem_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elem_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.elem_type_ = elem_type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.ListType.elem_type)
}

// -------------------------------------------------------------------

// Type_MapType

// .google.api.expr.v1alpha1.Type key_type = 1 [json_name = "keyType"];
inline bool Type_MapType::_internal_has_key_type() const {
  return this != internal_default_instance() && _impl_.key_type_ != nullptr;
}
inline bool Type_MapType::has_key_type() const {
  return _internal_has_key_type();
}
inline void Type_MapType::clear_key_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.key_type_ != nullptr) {
    delete _impl_.key_type_;
  }
  _impl_.key_type_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Type& Type_MapType::_internal_key_type() const {
  const ::google::api::expr::v1alpha1::Type* p = _impl_.key_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Type&>(
      ::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Type& Type_MapType::key_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.MapType.key_type)
  return _internal_key_type();
}
inline void Type_MapType::unsafe_arena_set_allocated_key_type(
    ::google::api::expr::v1alpha1::Type* key_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_type_);
  }
  _impl_.key_type_ = key_type;
  if (key_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.MapType.key_type)
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::release_key_type() {
  
  ::google::api::expr::v1alpha1::Type* temp = _impl_.key_type_;
  _impl_.key_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::unsafe_arena_release_key_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.MapType.key_type)
  
  ::google::api::expr::v1alpha1::Type* temp = _impl_.key_type_;
  _impl_.key_type_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::_internal_mutable_key_type() {
  
  if (_impl_.key_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaForAllocation());
    _impl_.key_type_ = p;
  }
  return _impl_.key_type_;
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::mutable_key_type() {
  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_key_type();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.MapType.key_type)
  return _msg;
}
inline void Type_MapType::set_allocated_key_type(::google::api::expr::v1alpha1::Type* key_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.key_type_;
  }
  if (key_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(key_type);
    if (message_arena != submessage_arena) {
      key_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.key_type_ = key_type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.MapType.key_type)
}

// .google.api.expr.v1alpha1.Type value_type = 2 [json_name = "valueType"];
inline bool Type_MapType::_internal_has_value_type() const {
  return this != internal_default_instance() && _impl_.value_type_ != nullptr;
}
inline bool Type_MapType::has_value_type() const {
  return _internal_has_value_type();
}
inline void Type_MapType::clear_value_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_type_ != nullptr) {
    delete _impl_.value_type_;
  }
  _impl_.value_type_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Type& Type_MapType::_internal_value_type() const {
  const ::google::api::expr::v1alpha1::Type* p = _impl_.value_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Type&>(
      ::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Type& Type_MapType::value_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.MapType.value_type)
  return _internal_value_type();
}
inline void Type_MapType::unsafe_arena_set_allocated_value_type(
    ::google::api::expr::v1alpha1::Type* value_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_type_);
  }
  _impl_.value_type_ = value_type;
  if (value_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.MapType.value_type)
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::release_value_type() {
  
  ::google::api::expr::v1alpha1::Type* temp = _impl_.value_type_;
  _impl_.value_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::unsafe_arena_release_value_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.MapType.value_type)
  
  ::google::api::expr::v1alpha1::Type* temp = _impl_.value_type_;
  _impl_.value_type_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::_internal_mutable_value_type() {
  
  if (_impl_.value_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaForAllocation());
    _impl_.value_type_ = p;
  }
  return _impl_.value_type_;
}
inline ::google::api::expr::v1alpha1::Type* Type_MapType::mutable_value_type() {
  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_value_type();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.MapType.value_type)
  return _msg;
}
inline void Type_MapType::set_allocated_value_type(::google::api::expr::v1alpha1::Type* value_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_type_;
  }
  if (value_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_type);
    if (message_arena != submessage_arena) {
      value_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_type_ = value_type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.MapType.value_type)
}

// -------------------------------------------------------------------

// Type_FunctionType

// .google.api.expr.v1alpha1.Type result_type = 1 [json_name = "resultType"];
inline bool Type_FunctionType::_internal_has_result_type() const {
  return this != internal_default_instance() && _impl_.result_type_ != nullptr;
}
inline bool Type_FunctionType::has_result_type() const {
  return _internal_has_result_type();
}
inline void Type_FunctionType::clear_result_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_type_ != nullptr) {
    delete _impl_.result_type_;
  }
  _impl_.result_type_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Type& Type_FunctionType::_internal_result_type() const {
  const ::google::api::expr::v1alpha1::Type* p = _impl_.result_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Type&>(
      ::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Type& Type_FunctionType::result_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.FunctionType.result_type)
  return _internal_result_type();
}
inline void Type_FunctionType::unsafe_arena_set_allocated_result_type(
    ::google::api::expr::v1alpha1::Type* result_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_type_);
  }
  _impl_.result_type_ = result_type;
  if (result_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.FunctionType.result_type)
}
inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::release_result_type() {
  
  ::google::api::expr::v1alpha1::Type* temp = _impl_.result_type_;
  _impl_.result_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::unsafe_arena_release_result_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.FunctionType.result_type)
  
  ::google::api::expr::v1alpha1::Type* temp = _impl_.result_type_;
  _impl_.result_type_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::_internal_mutable_result_type() {
  
  if (_impl_.result_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaForAllocation());
    _impl_.result_type_ = p;
  }
  return _impl_.result_type_;
}
inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::mutable_result_type() {
  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_result_type();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.FunctionType.result_type)
  return _msg;
}
inline void Type_FunctionType::set_allocated_result_type(::google::api::expr::v1alpha1::Type* result_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_type_;
  }
  if (result_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result_type);
    if (message_arena != submessage_arena) {
      result_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_type_ = result_type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.FunctionType.result_type)
}

// repeated .google.api.expr.v1alpha1.Type arg_types = 2 [json_name = "argTypes"];
inline int Type_FunctionType::_internal_arg_types_size() const {
  return _impl_.arg_types_.size();
}
inline int Type_FunctionType::arg_types_size() const {
  return _internal_arg_types_size();
}
inline void Type_FunctionType::clear_arg_types() {
  _impl_.arg_types_.Clear();
}
inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::mutable_arg_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
  return _impl_.arg_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
Type_FunctionType::mutable_arg_types() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
  return &_impl_.arg_types_;
}
inline const ::google::api::expr::v1alpha1::Type& Type_FunctionType::_internal_arg_types(int index) const {
  return _impl_.arg_types_.Get(index);
}
inline const ::google::api::expr::v1alpha1::Type& Type_FunctionType::arg_types(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
  return _internal_arg_types(index);
}
inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::_internal_add_arg_types() {
  return _impl_.arg_types_.Add();
}
inline ::google::api::expr::v1alpha1::Type* Type_FunctionType::add_arg_types() {
  ::google::api::expr::v1alpha1::Type* _add = _internal_add_arg_types();
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
Type_FunctionType::arg_types() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Type.FunctionType.arg_types)
  return _impl_.arg_types_;
}

// -------------------------------------------------------------------

// Type_AbstractType

// string name = 1 [json_name = "name"];
inline void Type_AbstractType::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Type_AbstractType::name() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.AbstractType.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Type_AbstractType::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.AbstractType.name)
}
inline std::string* Type_AbstractType::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.AbstractType.name)
  return _s;
}
inline const std::string& Type_AbstractType::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Type_AbstractType::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Type_AbstractType::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Type_AbstractType::release_name() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.AbstractType.name)
  return _impl_.name_.Release();
}
inline void Type_AbstractType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.AbstractType.name)
}

// repeated .google.api.expr.v1alpha1.Type parameter_types = 2 [json_name = "parameterTypes"];
inline int Type_AbstractType::_internal_parameter_types_size() const {
  return _impl_.parameter_types_.size();
}
inline int Type_AbstractType::parameter_types_size() const {
  return _internal_parameter_types_size();
}
inline void Type_AbstractType::clear_parameter_types() {
  _impl_.parameter_types_.Clear();
}
inline ::google::api::expr::v1alpha1::Type* Type_AbstractType::mutable_parameter_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
  return _impl_.parameter_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
Type_AbstractType::mutable_parameter_types() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
  return &_impl_.parameter_types_;
}
inline const ::google::api::expr::v1alpha1::Type& Type_AbstractType::_internal_parameter_types(int index) const {
  return _impl_.parameter_types_.Get(index);
}
inline const ::google::api::expr::v1alpha1::Type& Type_AbstractType::parameter_types(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
  return _internal_parameter_types(index);
}
inline ::google::api::expr::v1alpha1::Type* Type_AbstractType::_internal_add_parameter_types() {
  return _impl_.parameter_types_.Add();
}
inline ::google::api::expr::v1alpha1::Type* Type_AbstractType::add_parameter_types() {
  ::google::api::expr::v1alpha1::Type* _add = _internal_add_parameter_types();
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
Type_AbstractType::parameter_types() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Type.AbstractType.parameter_types)
  return _impl_.parameter_types_;
}

// -------------------------------------------------------------------

// Type

// .google.protobuf.Empty dyn = 1 [json_name = "dyn"];
inline bool Type::_internal_has_dyn() const {
  return type_kind_case() == kDyn;
}
inline bool Type::has_dyn() const {
  return _internal_has_dyn();
}
inline void Type::set_has_dyn() {
  _impl_._oneof_case_[0] = kDyn;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Type::release_dyn() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.dyn)
  if (_internal_has_dyn()) {
    clear_has_type_kind();
    ::PROTOBUF_NAMESPACE_ID::Empty* temp = _impl_.type_kind_.dyn_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_kind_.dyn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& Type::_internal_dyn() const {
  return _internal_has_dyn()
      ? *_impl_.type_kind_.dyn_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Empty&>(::PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& Type::dyn() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.dyn)
  return _internal_dyn();
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Type::unsafe_arena_release_dyn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.dyn)
  if (_internal_has_dyn()) {
    clear_has_type_kind();
    ::PROTOBUF_NAMESPACE_ID::Empty* temp = _impl_.type_kind_.dyn_;
    _impl_.type_kind_.dyn_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Type::unsafe_arena_set_allocated_dyn(::PROTOBUF_NAMESPACE_ID::Empty* dyn) {
  clear_type_kind();
  if (dyn) {
    set_has_dyn();
    _impl_.type_kind_.dyn_ = dyn;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.dyn)
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Type::_internal_mutable_dyn() {
  if (!_internal_has_dyn()) {
    clear_type_kind();
    set_has_dyn();
    _impl_.type_kind_.dyn_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Empty >(GetArenaForAllocation());
  }
  return _impl_.type_kind_.dyn_;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Type::mutable_dyn() {
  ::PROTOBUF_NAMESPACE_ID::Empty* _msg = _internal_mutable_dyn();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.dyn)
  return _msg;
}

// .google.protobuf.NullValue null = 2 [json_name = "null"];
inline bool Type::_internal_has_null() const {
  return type_kind_case() == kNull;
}
inline bool Type::has_null() const {
  return _internal_has_null();
}
inline void Type::set_has_null() {
  _impl_._oneof_case_[0] = kNull;
}
inline void Type::clear_null() {
  if (_internal_has_null()) {
    _impl_.type_kind_.null_ = 0;
    clear_has_type_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue Type::_internal_null() const {
  if (_internal_has_null()) {
    return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(_impl_.type_kind_.null_);
  }
  return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(0);
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue Type::null() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.null)
  return _internal_null();
}
inline void Type::_internal_set_null(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  if (!_internal_has_null()) {
    clear_type_kind();
    set_has_null();
  }
  _impl_.type_kind_.null_ = value;
}
inline void Type::set_null(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  _internal_set_null(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.null)
}

// .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3 [json_name = "primitive"];
inline bool Type::_internal_has_primitive() const {
  return type_kind_case() == kPrimitive;
}
inline bool Type::has_primitive() const {
  return _internal_has_primitive();
}
inline void Type::set_has_primitive() {
  _impl_._oneof_case_[0] = kPrimitive;
}
inline void Type::clear_primitive() {
  if (_internal_has_primitive()) {
    _impl_.type_kind_.primitive_ = 0;
    clear_has_type_kind();
  }
}
inline ::google::api::expr::v1alpha1::Type_PrimitiveType Type::_internal_primitive() const {
  if (_internal_has_primitive()) {
    return static_cast< ::google::api::expr::v1alpha1::Type_PrimitiveType >(_impl_.type_kind_.primitive_);
  }
  return static_cast< ::google::api::expr::v1alpha1::Type_PrimitiveType >(0);
}
inline ::google::api::expr::v1alpha1::Type_PrimitiveType Type::primitive() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.primitive)
  return _internal_primitive();
}
inline void Type::_internal_set_primitive(::google::api::expr::v1alpha1::Type_PrimitiveType value) {
  if (!_internal_has_primitive()) {
    clear_type_kind();
    set_has_primitive();
  }
  _impl_.type_kind_.primitive_ = value;
}
inline void Type::set_primitive(::google::api::expr::v1alpha1::Type_PrimitiveType value) {
  _internal_set_primitive(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.primitive)
}

// .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4 [json_name = "wrapper"];
inline bool Type::_internal_has_wrapper() const {
  return type_kind_case() == kWrapper;
}
inline bool Type::has_wrapper() const {
  return _internal_has_wrapper();
}
inline void Type::set_has_wrapper() {
  _impl_._oneof_case_[0] = kWrapper;
}
inline void Type::clear_wrapper() {
  if (_internal_has_wrapper()) {
    _impl_.type_kind_.wrapper_ = 0;
    clear_has_type_kind();
  }
}
inline ::google::api::expr::v1alpha1::Type_PrimitiveType Type::_internal_wrapper() const {
  if (_internal_has_wrapper()) {
    return static_cast< ::google::api::expr::v1alpha1::Type_PrimitiveType >(_impl_.type_kind_.wrapper_);
  }
  return static_cast< ::google::api::expr::v1alpha1::Type_PrimitiveType >(0);
}
inline ::google::api::expr::v1alpha1::Type_PrimitiveType Type::wrapper() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.wrapper)
  return _internal_wrapper();
}
inline void Type::_internal_set_wrapper(::google::api::expr::v1alpha1::Type_PrimitiveType value) {
  if (!_internal_has_wrapper()) {
    clear_type_kind();
    set_has_wrapper();
  }
  _impl_.type_kind_.wrapper_ = value;
}
inline void Type::set_wrapper(::google::api::expr::v1alpha1::Type_PrimitiveType value) {
  _internal_set_wrapper(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.wrapper)
}

// .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5 [json_name = "wellKnown"];
inline bool Type::_internal_has_well_known() const {
  return type_kind_case() == kWellKnown;
}
inline bool Type::has_well_known() const {
  return _internal_has_well_known();
}
inline void Type::set_has_well_known() {
  _impl_._oneof_case_[0] = kWellKnown;
}
inline void Type::clear_well_known() {
  if (_internal_has_well_known()) {
    _impl_.type_kind_.well_known_ = 0;
    clear_has_type_kind();
  }
}
inline ::google::api::expr::v1alpha1::Type_WellKnownType Type::_internal_well_known() const {
  if (_internal_has_well_known()) {
    return static_cast< ::google::api::expr::v1alpha1::Type_WellKnownType >(_impl_.type_kind_.well_known_);
  }
  return static_cast< ::google::api::expr::v1alpha1::Type_WellKnownType >(0);
}
inline ::google::api::expr::v1alpha1::Type_WellKnownType Type::well_known() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.well_known)
  return _internal_well_known();
}
inline void Type::_internal_set_well_known(::google::api::expr::v1alpha1::Type_WellKnownType value) {
  if (!_internal_has_well_known()) {
    clear_type_kind();
    set_has_well_known();
  }
  _impl_.type_kind_.well_known_ = value;
}
inline void Type::set_well_known(::google::api::expr::v1alpha1::Type_WellKnownType value) {
  _internal_set_well_known(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.well_known)
}

// .google.api.expr.v1alpha1.Type.ListType list_type = 6 [json_name = "listType"];
inline bool Type::_internal_has_list_type() const {
  return type_kind_case() == kListType;
}
inline bool Type::has_list_type() const {
  return _internal_has_list_type();
}
inline void Type::set_has_list_type() {
  _impl_._oneof_case_[0] = kListType;
}
inline void Type::clear_list_type() {
  if (_internal_has_list_type()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_kind_.list_type_;
    }
    clear_has_type_kind();
  }
}
inline ::google::api::expr::v1alpha1::Type_ListType* Type::release_list_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.list_type)
  if (_internal_has_list_type()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type_ListType* temp = _impl_.type_kind_.list_type_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_kind_.list_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Type_ListType& Type::_internal_list_type() const {
  return _internal_has_list_type()
      ? *_impl_.type_kind_.list_type_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Type_ListType&>(::google::api::expr::v1alpha1::_Type_ListType_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Type_ListType& Type::list_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.list_type)
  return _internal_list_type();
}
inline ::google::api::expr::v1alpha1::Type_ListType* Type::unsafe_arena_release_list_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.list_type)
  if (_internal_has_list_type()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type_ListType* temp = _impl_.type_kind_.list_type_;
    _impl_.type_kind_.list_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Type::unsafe_arena_set_allocated_list_type(::google::api::expr::v1alpha1::Type_ListType* list_type) {
  clear_type_kind();
  if (list_type) {
    set_has_list_type();
    _impl_.type_kind_.list_type_ = list_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.list_type)
}
inline ::google::api::expr::v1alpha1::Type_ListType* Type::_internal_mutable_list_type() {
  if (!_internal_has_list_type()) {
    clear_type_kind();
    set_has_list_type();
    _impl_.type_kind_.list_type_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_ListType >(GetArenaForAllocation());
  }
  return _impl_.type_kind_.list_type_;
}
inline ::google::api::expr::v1alpha1::Type_ListType* Type::mutable_list_type() {
  ::google::api::expr::v1alpha1::Type_ListType* _msg = _internal_mutable_list_type();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.list_type)
  return _msg;
}

// .google.api.expr.v1alpha1.Type.MapType map_type = 7 [json_name = "mapType"];
inline bool Type::_internal_has_map_type() const {
  return type_kind_case() == kMapType;
}
inline bool Type::has_map_type() const {
  return _internal_has_map_type();
}
inline void Type::set_has_map_type() {
  _impl_._oneof_case_[0] = kMapType;
}
inline void Type::clear_map_type() {
  if (_internal_has_map_type()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_kind_.map_type_;
    }
    clear_has_type_kind();
  }
}
inline ::google::api::expr::v1alpha1::Type_MapType* Type::release_map_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.map_type)
  if (_internal_has_map_type()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type_MapType* temp = _impl_.type_kind_.map_type_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_kind_.map_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Type_MapType& Type::_internal_map_type() const {
  return _internal_has_map_type()
      ? *_impl_.type_kind_.map_type_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Type_MapType&>(::google::api::expr::v1alpha1::_Type_MapType_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Type_MapType& Type::map_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.map_type)
  return _internal_map_type();
}
inline ::google::api::expr::v1alpha1::Type_MapType* Type::unsafe_arena_release_map_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.map_type)
  if (_internal_has_map_type()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type_MapType* temp = _impl_.type_kind_.map_type_;
    _impl_.type_kind_.map_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Type::unsafe_arena_set_allocated_map_type(::google::api::expr::v1alpha1::Type_MapType* map_type) {
  clear_type_kind();
  if (map_type) {
    set_has_map_type();
    _impl_.type_kind_.map_type_ = map_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.map_type)
}
inline ::google::api::expr::v1alpha1::Type_MapType* Type::_internal_mutable_map_type() {
  if (!_internal_has_map_type()) {
    clear_type_kind();
    set_has_map_type();
    _impl_.type_kind_.map_type_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_MapType >(GetArenaForAllocation());
  }
  return _impl_.type_kind_.map_type_;
}
inline ::google::api::expr::v1alpha1::Type_MapType* Type::mutable_map_type() {
  ::google::api::expr::v1alpha1::Type_MapType* _msg = _internal_mutable_map_type();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.map_type)
  return _msg;
}

// .google.api.expr.v1alpha1.Type.FunctionType function = 8 [json_name = "function"];
inline bool Type::_internal_has_function() const {
  return type_kind_case() == kFunction;
}
inline bool Type::has_function() const {
  return _internal_has_function();
}
inline void Type::set_has_function() {
  _impl_._oneof_case_[0] = kFunction;
}
inline void Type::clear_function() {
  if (_internal_has_function()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_kind_.function_;
    }
    clear_has_type_kind();
  }
}
inline ::google::api::expr::v1alpha1::Type_FunctionType* Type::release_function() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.function)
  if (_internal_has_function()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type_FunctionType* temp = _impl_.type_kind_.function_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_kind_.function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Type_FunctionType& Type::_internal_function() const {
  return _internal_has_function()
      ? *_impl_.type_kind_.function_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Type_FunctionType&>(::google::api::expr::v1alpha1::_Type_FunctionType_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Type_FunctionType& Type::function() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.function)
  return _internal_function();
}
inline ::google::api::expr::v1alpha1::Type_FunctionType* Type::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.function)
  if (_internal_has_function()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type_FunctionType* temp = _impl_.type_kind_.function_;
    _impl_.type_kind_.function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Type::unsafe_arena_set_allocated_function(::google::api::expr::v1alpha1::Type_FunctionType* function) {
  clear_type_kind();
  if (function) {
    set_has_function();
    _impl_.type_kind_.function_ = function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.function)
}
inline ::google::api::expr::v1alpha1::Type_FunctionType* Type::_internal_mutable_function() {
  if (!_internal_has_function()) {
    clear_type_kind();
    set_has_function();
    _impl_.type_kind_.function_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_FunctionType >(GetArenaForAllocation());
  }
  return _impl_.type_kind_.function_;
}
inline ::google::api::expr::v1alpha1::Type_FunctionType* Type::mutable_function() {
  ::google::api::expr::v1alpha1::Type_FunctionType* _msg = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.function)
  return _msg;
}

// string message_type = 9 [json_name = "messageType"];
inline bool Type::_internal_has_message_type() const {
  return type_kind_case() == kMessageType;
}
inline bool Type::has_message_type() const {
  return _internal_has_message_type();
}
inline void Type::set_has_message_type() {
  _impl_._oneof_case_[0] = kMessageType;
}
inline void Type::clear_message_type() {
  if (_internal_has_message_type()) {
    _impl_.type_kind_.message_type_.Destroy();
    clear_has_type_kind();
  }
}
inline const std::string& Type::message_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.message_type)
  return _internal_message_type();
}
template <typename ArgT0, typename... ArgT>
inline void Type::set_message_type(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_message_type()) {
    clear_type_kind();
    set_has_message_type();
    _impl_.type_kind_.message_type_.InitDefault();
  }
  _impl_.type_kind_.message_type_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.message_type)
}
inline std::string* Type::mutable_message_type() {
  std::string* _s = _internal_mutable_message_type();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.message_type)
  return _s;
}
inline const std::string& Type::_internal_message_type() const {
  if (_internal_has_message_type()) {
    return _impl_.type_kind_.message_type_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Type::_internal_set_message_type(const std::string& value) {
  if (!_internal_has_message_type()) {
    clear_type_kind();
    set_has_message_type();
    _impl_.type_kind_.message_type_.InitDefault();
  }
  _impl_.type_kind_.message_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Type::_internal_mutable_message_type() {
  if (!_internal_has_message_type()) {
    clear_type_kind();
    set_has_message_type();
    _impl_.type_kind_.message_type_.InitDefault();
  }
  return _impl_.type_kind_.message_type_.Mutable(      GetArenaForAllocation());
}
inline std::string* Type::release_message_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.message_type)
  if (_internal_has_message_type()) {
    clear_has_type_kind();
    return _impl_.type_kind_.message_type_.Release();
  } else {
    return nullptr;
  }
}
inline void Type::set_allocated_message_type(std::string* message_type) {
  if (has_type_kind()) {
    clear_type_kind();
  }
  if (message_type != nullptr) {
    set_has_message_type();
    _impl_.type_kind_.message_type_.InitAllocated(message_type, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.message_type)
}

// string type_param = 10 [json_name = "typeParam"];
inline bool Type::_internal_has_type_param() const {
  return type_kind_case() == kTypeParam;
}
inline bool Type::has_type_param() const {
  return _internal_has_type_param();
}
inline void Type::set_has_type_param() {
  _impl_._oneof_case_[0] = kTypeParam;
}
inline void Type::clear_type_param() {
  if (_internal_has_type_param()) {
    _impl_.type_kind_.type_param_.Destroy();
    clear_has_type_kind();
  }
}
inline const std::string& Type::type_param() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.type_param)
  return _internal_type_param();
}
template <typename ArgT0, typename... ArgT>
inline void Type::set_type_param(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_type_param()) {
    clear_type_kind();
    set_has_type_param();
    _impl_.type_kind_.type_param_.InitDefault();
  }
  _impl_.type_kind_.type_param_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Type.type_param)
}
inline std::string* Type::mutable_type_param() {
  std::string* _s = _internal_mutable_type_param();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.type_param)
  return _s;
}
inline const std::string& Type::_internal_type_param() const {
  if (_internal_has_type_param()) {
    return _impl_.type_kind_.type_param_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Type::_internal_set_type_param(const std::string& value) {
  if (!_internal_has_type_param()) {
    clear_type_kind();
    set_has_type_param();
    _impl_.type_kind_.type_param_.InitDefault();
  }
  _impl_.type_kind_.type_param_.Set(value, GetArenaForAllocation());
}
inline std::string* Type::_internal_mutable_type_param() {
  if (!_internal_has_type_param()) {
    clear_type_kind();
    set_has_type_param();
    _impl_.type_kind_.type_param_.InitDefault();
  }
  return _impl_.type_kind_.type_param_.Mutable(      GetArenaForAllocation());
}
inline std::string* Type::release_type_param() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.type_param)
  if (_internal_has_type_param()) {
    clear_has_type_kind();
    return _impl_.type_kind_.type_param_.Release();
  } else {
    return nullptr;
  }
}
inline void Type::set_allocated_type_param(std::string* type_param) {
  if (has_type_kind()) {
    clear_type_kind();
  }
  if (type_param != nullptr) {
    set_has_type_param();
    _impl_.type_kind_.type_param_.InitAllocated(type_param, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.type_param)
}

// .google.api.expr.v1alpha1.Type type = 11 [json_name = "type"];
inline bool Type::_internal_has_type() const {
  return type_kind_case() == kType;
}
inline bool Type::has_type() const {
  return _internal_has_type();
}
inline void Type::set_has_type() {
  _impl_._oneof_case_[0] = kType;
}
inline void Type::clear_type() {
  if (_internal_has_type()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_kind_.type_;
    }
    clear_has_type_kind();
  }
}
inline ::google::api::expr::v1alpha1::Type* Type::release_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.type)
  if (_internal_has_type()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type* temp = _impl_.type_kind_.type_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_kind_.type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Type& Type::_internal_type() const {
  return _internal_has_type()
      ? *_impl_.type_kind_.type_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Type&>(::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Type& Type::type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.type)
  return _internal_type();
}
inline ::google::api::expr::v1alpha1::Type* Type::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.type)
  if (_internal_has_type()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type* temp = _impl_.type_kind_.type_;
    _impl_.type_kind_.type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Type::unsafe_arena_set_allocated_type(::google::api::expr::v1alpha1::Type* type) {
  clear_type_kind();
  if (type) {
    set_has_type();
    _impl_.type_kind_.type_ = type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.type)
}
inline ::google::api::expr::v1alpha1::Type* Type::_internal_mutable_type() {
  if (!_internal_has_type()) {
    clear_type_kind();
    set_has_type();
    _impl_.type_kind_.type_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type >(GetArenaForAllocation());
  }
  return _impl_.type_kind_.type_;
}
inline ::google::api::expr::v1alpha1::Type* Type::mutable_type() {
  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.type)
  return _msg;
}

// .google.protobuf.Empty error = 12 [json_name = "error"];
inline bool Type::_internal_has_error() const {
  return type_kind_case() == kError;
}
inline bool Type::has_error() const {
  return _internal_has_error();
}
inline void Type::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Type::release_error() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.error)
  if (_internal_has_error()) {
    clear_has_type_kind();
    ::PROTOBUF_NAMESPACE_ID::Empty* temp = _impl_.type_kind_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_kind_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& Type::_internal_error() const {
  return _internal_has_error()
      ? *_impl_.type_kind_.error_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Empty&>(::PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Empty& Type::error() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.error)
  return _internal_error();
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Type::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.error)
  if (_internal_has_error()) {
    clear_has_type_kind();
    ::PROTOBUF_NAMESPACE_ID::Empty* temp = _impl_.type_kind_.error_;
    _impl_.type_kind_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Type::unsafe_arena_set_allocated_error(::PROTOBUF_NAMESPACE_ID::Empty* error) {
  clear_type_kind();
  if (error) {
    set_has_error();
    _impl_.type_kind_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.error)
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Type::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_type_kind();
    set_has_error();
    _impl_.type_kind_.error_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Empty >(GetArenaForAllocation());
  }
  return _impl_.type_kind_.error_;
}
inline ::PROTOBUF_NAMESPACE_ID::Empty* Type::mutable_error() {
  ::PROTOBUF_NAMESPACE_ID::Empty* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.error)
  return _msg;
}

// .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14 [json_name = "abstractType"];
inline bool Type::_internal_has_abstract_type() const {
  return type_kind_case() == kAbstractType;
}
inline bool Type::has_abstract_type() const {
  return _internal_has_abstract_type();
}
inline void Type::set_has_abstract_type() {
  _impl_._oneof_case_[0] = kAbstractType;
}
inline void Type::clear_abstract_type() {
  if (_internal_has_abstract_type()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_kind_.abstract_type_;
    }
    clear_has_type_kind();
  }
}
inline ::google::api::expr::v1alpha1::Type_AbstractType* Type::release_abstract_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Type.abstract_type)
  if (_internal_has_abstract_type()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type_AbstractType* temp = _impl_.type_kind_.abstract_type_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.type_kind_.abstract_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Type_AbstractType& Type::_internal_abstract_type() const {
  return _internal_has_abstract_type()
      ? *_impl_.type_kind_.abstract_type_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Type_AbstractType&>(::google::api::expr::v1alpha1::_Type_AbstractType_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Type_AbstractType& Type::abstract_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Type.abstract_type)
  return _internal_abstract_type();
}
inline ::google::api::expr::v1alpha1::Type_AbstractType* Type::unsafe_arena_release_abstract_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Type.abstract_type)
  if (_internal_has_abstract_type()) {
    clear_has_type_kind();
    ::google::api::expr::v1alpha1::Type_AbstractType* temp = _impl_.type_kind_.abstract_type_;
    _impl_.type_kind_.abstract_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Type::unsafe_arena_set_allocated_abstract_type(::google::api::expr::v1alpha1::Type_AbstractType* abstract_type) {
  clear_type_kind();
  if (abstract_type) {
    set_has_abstract_type();
    _impl_.type_kind_.abstract_type_ = abstract_type;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.abstract_type)
}
inline ::google::api::expr::v1alpha1::Type_AbstractType* Type::_internal_mutable_abstract_type() {
  if (!_internal_has_abstract_type()) {
    clear_type_kind();
    set_has_abstract_type();
    _impl_.type_kind_.abstract_type_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_AbstractType >(GetArenaForAllocation());
  }
  return _impl_.type_kind_.abstract_type_;
}
inline ::google::api::expr::v1alpha1::Type_AbstractType* Type::mutable_abstract_type() {
  ::google::api::expr::v1alpha1::Type_AbstractType* _msg = _internal_mutable_abstract_type();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Type.abstract_type)
  return _msg;
}

inline bool Type::has_type_kind() const {
  return type_kind_case() != TYPE_KIND_NOT_SET;
}
inline void Type::clear_has_type_kind() {
  _impl_._oneof_case_[0] = TYPE_KIND_NOT_SET;
}
inline Type::TypeKindCase Type::type_kind_case() const {
  return Type::TypeKindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Decl_IdentDecl

// .google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];
inline bool Decl_IdentDecl::_internal_has_type() const {
  return this != internal_default_instance() && _impl_.type_ != nullptr;
}
inline bool Decl_IdentDecl::has_type() const {
  return _internal_has_type();
}
inline void Decl_IdentDecl::clear_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.type_ != nullptr) {
    delete _impl_.type_;
  }
  _impl_.type_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Type& Decl_IdentDecl::_internal_type() const {
  const ::google::api::expr::v1alpha1::Type* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Type&>(
      ::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Type& Decl_IdentDecl::type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.IdentDecl.type)
  return _internal_type();
}
inline void Decl_IdentDecl::unsafe_arena_set_allocated_type(
    ::google::api::expr::v1alpha1::Type* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.type)
}
inline ::google::api::expr::v1alpha1::Type* Decl_IdentDecl::release_type() {
  
  ::google::api::expr::v1alpha1::Type* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Decl_IdentDecl::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.IdentDecl.type)
  
  ::google::api::expr::v1alpha1::Type* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Decl_IdentDecl::_internal_mutable_type() {
  
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::google::api::expr::v1alpha1::Type* Decl_IdentDecl::mutable_type() {
  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.IdentDecl.type)
  return _msg;
}
inline void Decl_IdentDecl::set_allocated_type(::google::api::expr::v1alpha1::Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.type)
}

// .google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];
inline bool Decl_IdentDecl::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool Decl_IdentDecl::has_value() const {
  return _internal_has_value();
}
inline const ::google::api::expr::v1alpha1::Constant& Decl_IdentDecl::_internal_value() const {
  const ::google::api::expr::v1alpha1::Constant* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Constant&>(
      ::google::api::expr::v1alpha1::_Constant_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Constant& Decl_IdentDecl::value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.IdentDecl.value)
  return _internal_value();
}
inline void Decl_IdentDecl::unsafe_arena_set_allocated_value(
    ::google::api::expr::v1alpha1::Constant* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.value)
}
inline ::google::api::expr::v1alpha1::Constant* Decl_IdentDecl::release_value() {
  
  ::google::api::expr::v1alpha1::Constant* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Constant* Decl_IdentDecl::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.IdentDecl.value)
  
  ::google::api::expr::v1alpha1::Constant* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Constant* Decl_IdentDecl::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Constant>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::google::api::expr::v1alpha1::Constant* Decl_IdentDecl::mutable_value() {
  ::google::api::expr::v1alpha1::Constant* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.IdentDecl.value)
  return _msg;
}
inline void Decl_IdentDecl::set_allocated_value(::google::api::expr::v1alpha1::Constant* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.value)
}

// string doc = 3 [json_name = "doc"];
inline void Decl_IdentDecl::clear_doc() {
  _impl_.doc_.ClearToEmpty();
}
inline const std::string& Decl_IdentDecl::doc() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
  return _internal_doc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Decl_IdentDecl::set_doc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.doc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
}
inline std::string* Decl_IdentDecl::mutable_doc() {
  std::string* _s = _internal_mutable_doc();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
  return _s;
}
inline const std::string& Decl_IdentDecl::_internal_doc() const {
  return _impl_.doc_.Get();
}
inline void Decl_IdentDecl::_internal_set_doc(const std::string& value) {
  
  _impl_.doc_.Set(value, GetArenaForAllocation());
}
inline std::string* Decl_IdentDecl::_internal_mutable_doc() {
  
  return _impl_.doc_.Mutable(GetArenaForAllocation());
}
inline std::string* Decl_IdentDecl::release_doc() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
  return _impl_.doc_.Release();
}
inline void Decl_IdentDecl::set_allocated_doc(std::string* doc) {
  if (doc != nullptr) {
    
  } else {
    
  }
  _impl_.doc_.SetAllocated(doc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.doc_.IsDefault()) {
    _impl_.doc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.doc)
}

// -------------------------------------------------------------------

// Decl_FunctionDecl_Overload

// string overload_id = 1 [json_name = "overloadId"];
inline void Decl_FunctionDecl_Overload::clear_overload_id() {
  _impl_.overload_id_.ClearToEmpty();
}
inline const std::string& Decl_FunctionDecl_Overload::overload_id() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
  return _internal_overload_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Decl_FunctionDecl_Overload::set_overload_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.overload_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
}
inline std::string* Decl_FunctionDecl_Overload::mutable_overload_id() {
  std::string* _s = _internal_mutable_overload_id();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
  return _s;
}
inline const std::string& Decl_FunctionDecl_Overload::_internal_overload_id() const {
  return _impl_.overload_id_.Get();
}
inline void Decl_FunctionDecl_Overload::_internal_set_overload_id(const std::string& value) {
  
  _impl_.overload_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Decl_FunctionDecl_Overload::_internal_mutable_overload_id() {
  
  return _impl_.overload_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Decl_FunctionDecl_Overload::release_overload_id() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
  return _impl_.overload_id_.Release();
}
inline void Decl_FunctionDecl_Overload::set_allocated_overload_id(std::string* overload_id) {
  if (overload_id != nullptr) {
    
  } else {
    
  }
  _impl_.overload_id_.SetAllocated(overload_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.overload_id_.IsDefault()) {
    _impl_.overload_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id)
}

// repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];
inline int Decl_FunctionDecl_Overload::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int Decl_FunctionDecl_Overload::params_size() const {
  return _internal_params_size();
}
inline void Decl_FunctionDecl_Overload::clear_params() {
  _impl_.params_.Clear();
}
inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
  return _impl_.params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >*
Decl_FunctionDecl_Overload::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
  return &_impl_.params_;
}
inline const ::google::api::expr::v1alpha1::Type& Decl_FunctionDecl_Overload::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline const ::google::api::expr::v1alpha1::Type& Decl_FunctionDecl_Overload::params(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
  return _internal_params(index);
}
inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::_internal_add_params() {
  return _impl_.params_.Add();
}
inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::add_params() {
  ::google::api::expr::v1alpha1::Type* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Type >&
Decl_FunctionDecl_Overload::params() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.params)
  return _impl_.params_;
}

// repeated string type_params = 3 [json_name = "typeParams"];
inline int Decl_FunctionDecl_Overload::_internal_type_params_size() const {
  return _impl_.type_params_.size();
}
inline int Decl_FunctionDecl_Overload::type_params_size() const {
  return _internal_type_params_size();
}
inline void Decl_FunctionDecl_Overload::clear_type_params() {
  _impl_.type_params_.Clear();
}
inline std::string* Decl_FunctionDecl_Overload::add_type_params() {
  std::string* _s = _internal_add_type_params();
  // @@protoc_insertion_point(field_add_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
  return _s;
}
inline const std::string& Decl_FunctionDecl_Overload::_internal_type_params(int index) const {
  return _impl_.type_params_.Get(index);
}
inline const std::string& Decl_FunctionDecl_Overload::type_params(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
  return _internal_type_params(index);
}
inline std::string* Decl_FunctionDecl_Overload::mutable_type_params(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
  return _impl_.type_params_.Mutable(index);
}
inline void Decl_FunctionDecl_Overload::set_type_params(int index, const std::string& value) {
  _impl_.type_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
inline void Decl_FunctionDecl_Overload::set_type_params(int index, std::string&& value) {
  _impl_.type_params_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
inline void Decl_FunctionDecl_Overload::set_type_params(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.type_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
inline void Decl_FunctionDecl_Overload::set_type_params(int index, const char* value, size_t size) {
  _impl_.type_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
inline std::string* Decl_FunctionDecl_Overload::_internal_add_type_params() {
  return _impl_.type_params_.Add();
}
inline void Decl_FunctionDecl_Overload::add_type_params(const std::string& value) {
  _impl_.type_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
inline void Decl_FunctionDecl_Overload::add_type_params(std::string&& value) {
  _impl_.type_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
inline void Decl_FunctionDecl_Overload::add_type_params(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.type_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
inline void Decl_FunctionDecl_Overload::add_type_params(const char* value, size_t size) {
  _impl_.type_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Decl_FunctionDecl_Overload::type_params() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
  return _impl_.type_params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Decl_FunctionDecl_Overload::mutable_type_params() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params)
  return &_impl_.type_params_;
}

// .google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];
inline bool Decl_FunctionDecl_Overload::_internal_has_result_type() const {
  return this != internal_default_instance() && _impl_.result_type_ != nullptr;
}
inline bool Decl_FunctionDecl_Overload::has_result_type() const {
  return _internal_has_result_type();
}
inline void Decl_FunctionDecl_Overload::clear_result_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.result_type_ != nullptr) {
    delete _impl_.result_type_;
  }
  _impl_.result_type_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Type& Decl_FunctionDecl_Overload::_internal_result_type() const {
  const ::google::api::expr::v1alpha1::Type* p = _impl_.result_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Type&>(
      ::google::api::expr::v1alpha1::_Type_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Type& Decl_FunctionDecl_Overload::result_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
  return _internal_result_type();
}
inline void Decl_FunctionDecl_Overload::unsafe_arena_set_allocated_result_type(
    ::google::api::expr::v1alpha1::Type* result_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_type_);
  }
  _impl_.result_type_ = result_type;
  if (result_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
}
inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::release_result_type() {
  
  ::google::api::expr::v1alpha1::Type* temp = _impl_.result_type_;
  _impl_.result_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::unsafe_arena_release_result_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
  
  ::google::api::expr::v1alpha1::Type* temp = _impl_.result_type_;
  _impl_.result_type_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::_internal_mutable_result_type() {
  
  if (_impl_.result_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Type>(GetArenaForAllocation());
    _impl_.result_type_ = p;
  }
  return _impl_.result_type_;
}
inline ::google::api::expr::v1alpha1::Type* Decl_FunctionDecl_Overload::mutable_result_type() {
  ::google::api::expr::v1alpha1::Type* _msg = _internal_mutable_result_type();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
  return _msg;
}
inline void Decl_FunctionDecl_Overload::set_allocated_result_type(::google::api::expr::v1alpha1::Type* result_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_type_;
  }
  if (result_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result_type);
    if (message_arena != submessage_arena) {
      result_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.result_type_ = result_type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
}

// bool is_instance_function = 5 [json_name = "isInstanceFunction"];
inline void Decl_FunctionDecl_Overload::clear_is_instance_function() {
  _impl_.is_instance_function_ = false;
}
inline bool Decl_FunctionDecl_Overload::_internal_is_instance_function() const {
  return _impl_.is_instance_function_;
}
inline bool Decl_FunctionDecl_Overload::is_instance_function() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.is_instance_function)
  return _internal_is_instance_function();
}
inline void Decl_FunctionDecl_Overload::_internal_set_is_instance_function(bool value) {
  
  _impl_.is_instance_function_ = value;
}
inline void Decl_FunctionDecl_Overload::set_is_instance_function(bool value) {
  _internal_set_is_instance_function(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.is_instance_function)
}

// string doc = 6 [json_name = "doc"];
inline void Decl_FunctionDecl_Overload::clear_doc() {
  _impl_.doc_.ClearToEmpty();
}
inline const std::string& Decl_FunctionDecl_Overload::doc() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
  return _internal_doc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Decl_FunctionDecl_Overload::set_doc(ArgT0&& arg0, ArgT... args) {
 
 _impl_.doc_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
}
inline std::string* Decl_FunctionDecl_Overload::mutable_doc() {
  std::string* _s = _internal_mutable_doc();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
  return _s;
}
inline const std::string& Decl_FunctionDecl_Overload::_internal_doc() const {
  return _impl_.doc_.Get();
}
inline void Decl_FunctionDecl_Overload::_internal_set_doc(const std::string& value) {
  
  _impl_.doc_.Set(value, GetArenaForAllocation());
}
inline std::string* Decl_FunctionDecl_Overload::_internal_mutable_doc() {
  
  return _impl_.doc_.Mutable(GetArenaForAllocation());
}
inline std::string* Decl_FunctionDecl_Overload::release_doc() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
  return _impl_.doc_.Release();
}
inline void Decl_FunctionDecl_Overload::set_allocated_doc(std::string* doc) {
  if (doc != nullptr) {
    
  } else {
    
  }
  _impl_.doc_.SetAllocated(doc, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.doc_.IsDefault()) {
    _impl_.doc_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc)
}

// -------------------------------------------------------------------

// Decl_FunctionDecl

// repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];
inline int Decl_FunctionDecl::_internal_overloads_size() const {
  return _impl_.overloads_.size();
}
inline int Decl_FunctionDecl::overloads_size() const {
  return _internal_overloads_size();
}
inline void Decl_FunctionDecl::clear_overloads() {
  _impl_.overloads_.Clear();
}
inline ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* Decl_FunctionDecl::mutable_overloads(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
  return _impl_.overloads_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >*
Decl_FunctionDecl::mutable_overloads() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
  return &_impl_.overloads_;
}
inline const ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload& Decl_FunctionDecl::_internal_overloads(int index) const {
  return _impl_.overloads_.Get(index);
}
inline const ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload& Decl_FunctionDecl::overloads(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
  return _internal_overloads(index);
}
inline ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* Decl_FunctionDecl::_internal_add_overloads() {
  return _impl_.overloads_.Add();
}
inline ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* Decl_FunctionDecl::add_overloads() {
  ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* _add = _internal_add_overloads();
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >&
Decl_FunctionDecl::overloads() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Decl.FunctionDecl.overloads)
  return _impl_.overloads_;
}

// -------------------------------------------------------------------

// Decl

// string name = 1 [json_name = "name"];
inline void Decl::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Decl::name() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Decl::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Decl.name)
}
inline std::string* Decl::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.name)
  return _s;
}
inline const std::string& Decl::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Decl::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Decl::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Decl::release_name() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.name)
  return _impl_.name_.Release();
}
inline void Decl::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.name)
}

// .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];
inline bool Decl::_internal_has_ident() const {
  return decl_kind_case() == kIdent;
}
inline bool Decl::has_ident() const {
  return _internal_has_ident();
}
inline void Decl::set_has_ident() {
  _impl_._oneof_case_[0] = kIdent;
}
inline void Decl::clear_ident() {
  if (_internal_has_ident()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.decl_kind_.ident_;
    }
    clear_has_decl_kind();
  }
}
inline ::google::api::expr::v1alpha1::Decl_IdentDecl* Decl::release_ident() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.ident)
  if (_internal_has_ident()) {
    clear_has_decl_kind();
    ::google::api::expr::v1alpha1::Decl_IdentDecl* temp = _impl_.decl_kind_.ident_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.decl_kind_.ident_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Decl_IdentDecl& Decl::_internal_ident() const {
  return _internal_has_ident()
      ? *_impl_.decl_kind_.ident_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Decl_IdentDecl&>(::google::api::expr::v1alpha1::_Decl_IdentDecl_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Decl_IdentDecl& Decl::ident() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.ident)
  return _internal_ident();
}
inline ::google::api::expr::v1alpha1::Decl_IdentDecl* Decl::unsafe_arena_release_ident() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.ident)
  if (_internal_has_ident()) {
    clear_has_decl_kind();
    ::google::api::expr::v1alpha1::Decl_IdentDecl* temp = _impl_.decl_kind_.ident_;
    _impl_.decl_kind_.ident_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Decl::unsafe_arena_set_allocated_ident(::google::api::expr::v1alpha1::Decl_IdentDecl* ident) {
  clear_decl_kind();
  if (ident) {
    set_has_ident();
    _impl_.decl_kind_.ident_ = ident;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.ident)
}
inline ::google::api::expr::v1alpha1::Decl_IdentDecl* Decl::_internal_mutable_ident() {
  if (!_internal_has_ident()) {
    clear_decl_kind();
    set_has_ident();
    _impl_.decl_kind_.ident_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl_IdentDecl >(GetArenaForAllocation());
  }
  return _impl_.decl_kind_.ident_;
}
inline ::google::api::expr::v1alpha1::Decl_IdentDecl* Decl::mutable_ident() {
  ::google::api::expr::v1alpha1::Decl_IdentDecl* _msg = _internal_mutable_ident();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.ident)
  return _msg;
}

// .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];
inline bool Decl::_internal_has_function() const {
  return decl_kind_case() == kFunction;
}
inline bool Decl::has_function() const {
  return _internal_has_function();
}
inline void Decl::set_has_function() {
  _impl_._oneof_case_[0] = kFunction;
}
inline void Decl::clear_function() {
  if (_internal_has_function()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.decl_kind_.function_;
    }
    clear_has_decl_kind();
  }
}
inline ::google::api::expr::v1alpha1::Decl_FunctionDecl* Decl::release_function() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Decl.function)
  if (_internal_has_function()) {
    clear_has_decl_kind();
    ::google::api::expr::v1alpha1::Decl_FunctionDecl* temp = _impl_.decl_kind_.function_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.decl_kind_.function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Decl_FunctionDecl& Decl::_internal_function() const {
  return _internal_has_function()
      ? *_impl_.decl_kind_.function_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Decl_FunctionDecl&>(::google::api::expr::v1alpha1::_Decl_FunctionDecl_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Decl_FunctionDecl& Decl::function() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Decl.function)
  return _internal_function();
}
inline ::google::api::expr::v1alpha1::Decl_FunctionDecl* Decl::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Decl.function)
  if (_internal_has_function()) {
    clear_has_decl_kind();
    ::google::api::expr::v1alpha1::Decl_FunctionDecl* temp = _impl_.decl_kind_.function_;
    _impl_.decl_kind_.function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Decl::unsafe_arena_set_allocated_function(::google::api::expr::v1alpha1::Decl_FunctionDecl* function) {
  clear_decl_kind();
  if (function) {
    set_has_function();
    _impl_.decl_kind_.function_ = function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.function)
}
inline ::google::api::expr::v1alpha1::Decl_FunctionDecl* Decl::_internal_mutable_function() {
  if (!_internal_has_function()) {
    clear_decl_kind();
    set_has_function();
    _impl_.decl_kind_.function_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl_FunctionDecl >(GetArenaForAllocation());
  }
  return _impl_.decl_kind_.function_;
}
inline ::google::api::expr::v1alpha1::Decl_FunctionDecl* Decl::mutable_function() {
  ::google::api::expr::v1alpha1::Decl_FunctionDecl* _msg = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Decl.function)
  return _msg;
}

inline bool Decl::has_decl_kind() const {
  return decl_kind_case() != DECL_KIND_NOT_SET;
}
inline void Decl::clear_has_decl_kind() {
  _impl_._oneof_case_[0] = DECL_KIND_NOT_SET;
}
inline Decl::DeclKindCase Decl::decl_kind_case() const {
  return Decl::DeclKindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Reference

// string name = 1 [json_name = "name"];
inline void Reference::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Reference::name() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Reference.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Reference::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Reference.name)
}
inline std::string* Reference::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Reference.name)
  return _s;
}
inline const std::string& Reference::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Reference::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Reference::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Reference::release_name() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Reference.name)
  return _impl_.name_.Release();
}
inline void Reference::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Reference.name)
}

// repeated string overload_id = 3 [json_name = "overloadId"];
inline int Reference::_internal_overload_id_size() const {
  return _impl_.overload_id_.size();
}
inline int Reference::overload_id_size() const {
  return _internal_overload_id_size();
}
inline void Reference::clear_overload_id() {
  _impl_.overload_id_.Clear();
}
inline std::string* Reference::add_overload_id() {
  std::string* _s = _internal_add_overload_id();
  // @@protoc_insertion_point(field_add_mutable:google.api.expr.v1alpha1.Reference.overload_id)
  return _s;
}
inline const std::string& Reference::_internal_overload_id(int index) const {
  return _impl_.overload_id_.Get(index);
}
inline const std::string& Reference::overload_id(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Reference.overload_id)
  return _internal_overload_id(index);
}
inline std::string* Reference::mutable_overload_id(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Reference.overload_id)
  return _impl_.overload_id_.Mutable(index);
}
inline void Reference::set_overload_id(int index, const std::string& value) {
  _impl_.overload_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Reference.overload_id)
}
inline void Reference::set_overload_id(int index, std::string&& value) {
  _impl_.overload_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Reference.overload_id)
}
inline void Reference::set_overload_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.overload_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1alpha1.Reference.overload_id)
}
inline void Reference::set_overload_id(int index, const char* value, size_t size) {
  _impl_.overload_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1alpha1.Reference.overload_id)
}
inline std::string* Reference::_internal_add_overload_id() {
  return _impl_.overload_id_.Add();
}
inline void Reference::add_overload_id(const std::string& value) {
  _impl_.overload_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Reference.overload_id)
}
inline void Reference::add_overload_id(std::string&& value) {
  _impl_.overload_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Reference.overload_id)
}
inline void Reference::add_overload_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.overload_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.api.expr.v1alpha1.Reference.overload_id)
}
inline void Reference::add_overload_id(const char* value, size_t size) {
  _impl_.overload_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.api.expr.v1alpha1.Reference.overload_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Reference::overload_id() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Reference.overload_id)
  return _impl_.overload_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Reference::mutable_overload_id() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Reference.overload_id)
  return &_impl_.overload_id_;
}

// .google.api.expr.v1alpha1.Constant value = 4 [json_name = "value"];
inline bool Reference::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool Reference::has_value() const {
  return _internal_has_value();
}
inline const ::google::api::expr::v1alpha1::Constant& Reference::_internal_value() const {
  const ::google::api::expr::v1alpha1::Constant* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Constant&>(
      ::google::api::expr::v1alpha1::_Constant_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Constant& Reference::value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Reference.value)
  return _internal_value();
}
inline void Reference::unsafe_arena_set_allocated_value(
    ::google::api::expr::v1alpha1::Constant* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Reference.value)
}
inline ::google::api::expr::v1alpha1::Constant* Reference::release_value() {
  
  ::google::api::expr::v1alpha1::Constant* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Constant* Reference::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Reference.value)
  
  ::google::api::expr::v1alpha1::Constant* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Constant* Reference::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Constant>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::google::api::expr::v1alpha1::Constant* Reference::mutable_value() {
  ::google::api::expr::v1alpha1::Constant* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Reference.value)
  return _msg;
}
inline void Reference::set_allocated_value(::google::api::expr::v1alpha1::Constant* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Reference.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace expr
}  // namespace api
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::api::expr::v1alpha1::Type_PrimitiveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::expr::v1alpha1::Type_PrimitiveType>() {
  return ::google::api::expr::v1alpha1::Type_PrimitiveType_descriptor();
}
template <> struct is_proto_enum< ::google::api::expr::v1alpha1::Type_WellKnownType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::expr::v1alpha1::Type_WellKnownType>() {
  return ::google::api::expr::v1alpha1::Type_WellKnownType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto
