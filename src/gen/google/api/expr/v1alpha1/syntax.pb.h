// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/expr/v1alpha1/syntax.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
namespace google {
namespace api {
namespace expr {
namespace v1alpha1 {
class Constant;
struct ConstantDefaultTypeInternal;
extern ConstantDefaultTypeInternal _Constant_default_instance_;
class Expr;
struct ExprDefaultTypeInternal;
extern ExprDefaultTypeInternal _Expr_default_instance_;
class Expr_Call;
struct Expr_CallDefaultTypeInternal;
extern Expr_CallDefaultTypeInternal _Expr_Call_default_instance_;
class Expr_Comprehension;
struct Expr_ComprehensionDefaultTypeInternal;
extern Expr_ComprehensionDefaultTypeInternal _Expr_Comprehension_default_instance_;
class Expr_CreateList;
struct Expr_CreateListDefaultTypeInternal;
extern Expr_CreateListDefaultTypeInternal _Expr_CreateList_default_instance_;
class Expr_CreateStruct;
struct Expr_CreateStructDefaultTypeInternal;
extern Expr_CreateStructDefaultTypeInternal _Expr_CreateStruct_default_instance_;
class Expr_CreateStruct_Entry;
struct Expr_CreateStruct_EntryDefaultTypeInternal;
extern Expr_CreateStruct_EntryDefaultTypeInternal _Expr_CreateStruct_Entry_default_instance_;
class Expr_Ident;
struct Expr_IdentDefaultTypeInternal;
extern Expr_IdentDefaultTypeInternal _Expr_Ident_default_instance_;
class Expr_Select;
struct Expr_SelectDefaultTypeInternal;
extern Expr_SelectDefaultTypeInternal _Expr_Select_default_instance_;
class ParsedExpr;
struct ParsedExprDefaultTypeInternal;
extern ParsedExprDefaultTypeInternal _ParsedExpr_default_instance_;
class SourceInfo;
struct SourceInfoDefaultTypeInternal;
extern SourceInfoDefaultTypeInternal _SourceInfo_default_instance_;
class SourceInfo_MacroCallsEntry_DoNotUse;
struct SourceInfo_MacroCallsEntry_DoNotUseDefaultTypeInternal;
extern SourceInfo_MacroCallsEntry_DoNotUseDefaultTypeInternal _SourceInfo_MacroCallsEntry_DoNotUse_default_instance_;
class SourceInfo_PositionsEntry_DoNotUse;
struct SourceInfo_PositionsEntry_DoNotUseDefaultTypeInternal;
extern SourceInfo_PositionsEntry_DoNotUseDefaultTypeInternal _SourceInfo_PositionsEntry_DoNotUse_default_instance_;
class SourcePosition;
struct SourcePositionDefaultTypeInternal;
extern SourcePositionDefaultTypeInternal _SourcePosition_default_instance_;
}  // namespace v1alpha1
}  // namespace expr
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::expr::v1alpha1::Constant* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Constant>(Arena*);
template<> ::google::api::expr::v1alpha1::Expr* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(Arena*);
template<> ::google::api::expr::v1alpha1::Expr_Call* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Expr_Call>(Arena*);
template<> ::google::api::expr::v1alpha1::Expr_Comprehension* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Expr_Comprehension>(Arena*);
template<> ::google::api::expr::v1alpha1::Expr_CreateList* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Expr_CreateList>(Arena*);
template<> ::google::api::expr::v1alpha1::Expr_CreateStruct* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Expr_CreateStruct>(Arena*);
template<> ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Expr_CreateStruct_Entry>(Arena*);
template<> ::google::api::expr::v1alpha1::Expr_Ident* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Expr_Ident>(Arena*);
template<> ::google::api::expr::v1alpha1::Expr_Select* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Expr_Select>(Arena*);
template<> ::google::api::expr::v1alpha1::ParsedExpr* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::ParsedExpr>(Arena*);
template<> ::google::api::expr::v1alpha1::SourceInfo* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::SourceInfo>(Arena*);
template<> ::google::api::expr::v1alpha1::SourceInfo_MacroCallsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::SourceInfo_MacroCallsEntry_DoNotUse>(Arena*);
template<> ::google::api::expr::v1alpha1::SourceInfo_PositionsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::SourceInfo_PositionsEntry_DoNotUse>(Arena*);
template<> ::google::api::expr::v1alpha1::SourcePosition* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::SourcePosition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace expr {
namespace v1alpha1 {

// ===================================================================

class ParsedExpr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.ParsedExpr) */ {
 public:
  inline ParsedExpr() : ParsedExpr(nullptr) {}
  ~ParsedExpr() override;
  explicit PROTOBUF_CONSTEXPR ParsedExpr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ParsedExpr(const ParsedExpr& from);
  ParsedExpr(ParsedExpr&& from) noexcept
    : ParsedExpr() {
    *this = ::std::move(from);
  }

  inline ParsedExpr& operator=(const ParsedExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline ParsedExpr& operator=(ParsedExpr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ParsedExpr& default_instance() {
    return *internal_default_instance();
  }
  static inline const ParsedExpr* internal_default_instance() {
    return reinterpret_cast<const ParsedExpr*>(
               &_ParsedExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ParsedExpr& a, ParsedExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(ParsedExpr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ParsedExpr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ParsedExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ParsedExpr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ParsedExpr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ParsedExpr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ParsedExpr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.ParsedExpr";
  }
  protected:
  explicit ParsedExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExprFieldNumber = 2,
    kSourceInfoFieldNumber = 3,
  };
  // .google.api.expr.v1alpha1.Expr expr = 2 [json_name = "expr"];
  bool has_expr() const;
  private:
  bool _internal_has_expr() const;
  public:
  void clear_expr();
  const ::google::api::expr::v1alpha1::Expr& expr() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_expr();
  ::google::api::expr::v1alpha1::Expr* mutable_expr();
  void set_allocated_expr(::google::api::expr::v1alpha1::Expr* expr);
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_expr() const;
  ::google::api::expr::v1alpha1::Expr* _internal_mutable_expr();
  public:
  void unsafe_arena_set_allocated_expr(
      ::google::api::expr::v1alpha1::Expr* expr);
  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_expr();

  // .google.api.expr.v1alpha1.SourceInfo source_info = 3 [json_name = "sourceInfo"];
  bool has_source_info() const;
  private:
  bool _internal_has_source_info() const;
  public:
  void clear_source_info();
  const ::google::api::expr::v1alpha1::SourceInfo& source_info() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::SourceInfo* release_source_info();
  ::google::api::expr::v1alpha1::SourceInfo* mutable_source_info();
  void set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* source_info);
  private:
  const ::google::api::expr::v1alpha1::SourceInfo& _internal_source_info() const;
  ::google::api::expr::v1alpha1::SourceInfo* _internal_mutable_source_info();
  public:
  void unsafe_arena_set_allocated_source_info(
      ::google::api::expr::v1alpha1::SourceInfo* source_info);
  ::google::api::expr::v1alpha1::SourceInfo* unsafe_arena_release_source_info();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.ParsedExpr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::api::expr::v1alpha1::Expr* expr_;
  ::google::api::expr::v1alpha1::SourceInfo* source_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};
// -------------------------------------------------------------------

class Expr_Ident final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.Ident) */ {
 public:
  inline Expr_Ident() : Expr_Ident(nullptr) {}
  ~Expr_Ident() override;
  explicit PROTOBUF_CONSTEXPR Expr_Ident(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expr_Ident(const Expr_Ident& from);
  Expr_Ident(Expr_Ident&& from) noexcept
    : Expr_Ident() {
    *this = ::std::move(from);
  }

  inline Expr_Ident& operator=(const Expr_Ident& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr_Ident& operator=(Expr_Ident&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expr_Ident& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expr_Ident* internal_default_instance() {
    return reinterpret_cast<const Expr_Ident*>(
               &_Expr_Ident_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Expr_Ident& a, Expr_Ident& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr_Ident* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr_Ident* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expr_Ident* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expr_Ident>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expr_Ident& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Expr_Ident& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr_Ident* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Expr.Ident";
  }
  protected:
  explicit Expr_Ident(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.Ident)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};
// -------------------------------------------------------------------

class Expr_Select final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.Select) */ {
 public:
  inline Expr_Select() : Expr_Select(nullptr) {}
  ~Expr_Select() override;
  explicit PROTOBUF_CONSTEXPR Expr_Select(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expr_Select(const Expr_Select& from);
  Expr_Select(Expr_Select&& from) noexcept
    : Expr_Select() {
    *this = ::std::move(from);
  }

  inline Expr_Select& operator=(const Expr_Select& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr_Select& operator=(Expr_Select&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expr_Select& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expr_Select* internal_default_instance() {
    return reinterpret_cast<const Expr_Select*>(
               &_Expr_Select_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Expr_Select& a, Expr_Select& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr_Select* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr_Select* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expr_Select* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expr_Select>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expr_Select& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Expr_Select& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr_Select* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Expr.Select";
  }
  protected:
  explicit Expr_Select(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 2,
    kOperandFieldNumber = 1,
    kTestOnlyFieldNumber = 3,
  };
  // string field = 2 [json_name = "field"];
  void clear_field();
  const std::string& field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field();
  PROTOBUF_NODISCARD std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // .google.api.expr.v1alpha1.Expr operand = 1 [json_name = "operand"];
  bool has_operand() const;
  private:
  bool _internal_has_operand() const;
  public:
  void clear_operand();
  const ::google::api::expr::v1alpha1::Expr& operand() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_operand();
  ::google::api::expr::v1alpha1::Expr* mutable_operand();
  void set_allocated_operand(::google::api::expr::v1alpha1::Expr* operand);
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_operand() const;
  ::google::api::expr::v1alpha1::Expr* _internal_mutable_operand();
  public:
  void unsafe_arena_set_allocated_operand(
      ::google::api::expr::v1alpha1::Expr* operand);
  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_operand();

  // bool test_only = 3 [json_name = "testOnly"];
  void clear_test_only();
  bool test_only() const;
  void set_test_only(bool value);
  private:
  bool _internal_test_only() const;
  void _internal_set_test_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.Select)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
  ::google::api::expr::v1alpha1::Expr* operand_;
  bool test_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};
// -------------------------------------------------------------------

class Expr_Call final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.Call) */ {
 public:
  inline Expr_Call() : Expr_Call(nullptr) {}
  ~Expr_Call() override;
  explicit PROTOBUF_CONSTEXPR Expr_Call(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expr_Call(const Expr_Call& from);
  Expr_Call(Expr_Call&& from) noexcept
    : Expr_Call() {
    *this = ::std::move(from);
  }

  inline Expr_Call& operator=(const Expr_Call& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr_Call& operator=(Expr_Call&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expr_Call& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expr_Call* internal_default_instance() {
    return reinterpret_cast<const Expr_Call*>(
               &_Expr_Call_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Expr_Call& a, Expr_Call& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr_Call* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr_Call* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expr_Call* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expr_Call>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expr_Call& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Expr_Call& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr_Call* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Expr.Call";
  }
  protected:
  explicit Expr_Call(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 3,
    kFunctionFieldNumber = 2,
    kTargetFieldNumber = 1,
  };
  // repeated .google.api.expr.v1alpha1.Expr args = 3 [json_name = "args"];
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::google::api::expr::v1alpha1::Expr* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >*
      mutable_args();
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_args(int index) const;
  ::google::api::expr::v1alpha1::Expr* _internal_add_args();
  public:
  const ::google::api::expr::v1alpha1::Expr& args(int index) const;
  ::google::api::expr::v1alpha1::Expr* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >&
      args() const;

  // string function = 2 [json_name = "function"];
  void clear_function();
  const std::string& function() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function();
  PROTOBUF_NODISCARD std::string* release_function();
  void set_allocated_function(std::string* function);
  private:
  const std::string& _internal_function() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function(const std::string& value);
  std::string* _internal_mutable_function();
  public:

  // .google.api.expr.v1alpha1.Expr target = 1 [json_name = "target"];
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::google::api::expr::v1alpha1::Expr& target() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_target();
  ::google::api::expr::v1alpha1::Expr* mutable_target();
  void set_allocated_target(::google::api::expr::v1alpha1::Expr* target);
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_target() const;
  ::google::api::expr::v1alpha1::Expr* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::google::api::expr::v1alpha1::Expr* target);
  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_target();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.Call)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr > args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_;
  ::google::api::expr::v1alpha1::Expr* target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};
// -------------------------------------------------------------------

class Expr_CreateList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.CreateList) */ {
 public:
  inline Expr_CreateList() : Expr_CreateList(nullptr) {}
  ~Expr_CreateList() override;
  explicit PROTOBUF_CONSTEXPR Expr_CreateList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expr_CreateList(const Expr_CreateList& from);
  Expr_CreateList(Expr_CreateList&& from) noexcept
    : Expr_CreateList() {
    *this = ::std::move(from);
  }

  inline Expr_CreateList& operator=(const Expr_CreateList& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr_CreateList& operator=(Expr_CreateList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expr_CreateList& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expr_CreateList* internal_default_instance() {
    return reinterpret_cast<const Expr_CreateList*>(
               &_Expr_CreateList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Expr_CreateList& a, Expr_CreateList& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr_CreateList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr_CreateList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expr_CreateList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expr_CreateList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expr_CreateList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Expr_CreateList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr_CreateList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Expr.CreateList";
  }
  protected:
  explicit Expr_CreateList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .google.api.expr.v1alpha1.Expr elements = 1 [json_name = "elements"];
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::google::api::expr::v1alpha1::Expr* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >*
      mutable_elements();
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_elements(int index) const;
  ::google::api::expr::v1alpha1::Expr* _internal_add_elements();
  public:
  const ::google::api::expr::v1alpha1::Expr& elements(int index) const;
  ::google::api::expr::v1alpha1::Expr* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >&
      elements() const;

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.CreateList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};
// -------------------------------------------------------------------

class Expr_CreateStruct_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.CreateStruct.Entry) */ {
 public:
  inline Expr_CreateStruct_Entry() : Expr_CreateStruct_Entry(nullptr) {}
  ~Expr_CreateStruct_Entry() override;
  explicit PROTOBUF_CONSTEXPR Expr_CreateStruct_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expr_CreateStruct_Entry(const Expr_CreateStruct_Entry& from);
  Expr_CreateStruct_Entry(Expr_CreateStruct_Entry&& from) noexcept
    : Expr_CreateStruct_Entry() {
    *this = ::std::move(from);
  }

  inline Expr_CreateStruct_Entry& operator=(const Expr_CreateStruct_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr_CreateStruct_Entry& operator=(Expr_CreateStruct_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expr_CreateStruct_Entry& default_instance() {
    return *internal_default_instance();
  }
  enum KeyKindCase {
    kFieldKey = 2,
    kMapKey = 3,
    KEY_KIND_NOT_SET = 0,
  };

  static inline const Expr_CreateStruct_Entry* internal_default_instance() {
    return reinterpret_cast<const Expr_CreateStruct_Entry*>(
               &_Expr_CreateStruct_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Expr_CreateStruct_Entry& a, Expr_CreateStruct_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr_CreateStruct_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr_CreateStruct_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expr_CreateStruct_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expr_CreateStruct_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expr_CreateStruct_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Expr_CreateStruct_Entry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr_CreateStruct_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Expr.CreateStruct.Entry";
  }
  protected:
  explicit Expr_CreateStruct_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 4,
    kIdFieldNumber = 1,
    kOptionalEntryFieldNumber = 5,
    kFieldKeyFieldNumber = 2,
    kMapKeyFieldNumber = 3,
  };
  // .google.api.expr.v1alpha1.Expr value = 4 [json_name = "value"];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::google::api::expr::v1alpha1::Expr& value() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_value();
  ::google::api::expr::v1alpha1::Expr* mutable_value();
  void set_allocated_value(::google::api::expr::v1alpha1::Expr* value);
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_value() const;
  ::google::api::expr::v1alpha1::Expr* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::google::api::expr::v1alpha1::Expr* value);
  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_value();

  // int64 id = 1 [json_name = "id"];
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // bool optional_entry = 5 [json_name = "optionalEntry"];
  void clear_optional_entry();
  bool optional_entry() const;
  void set_optional_entry(bool value);
  private:
  bool _internal_optional_entry() const;
  void _internal_set_optional_entry(bool value);
  public:

  // string field_key = 2 [json_name = "fieldKey"];
  bool has_field_key() const;
  private:
  bool _internal_has_field_key() const;
  public:
  void clear_field_key();
  const std::string& field_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_key();
  PROTOBUF_NODISCARD std::string* release_field_key();
  void set_allocated_field_key(std::string* field_key);
  private:
  const std::string& _internal_field_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_key(const std::string& value);
  std::string* _internal_mutable_field_key();
  public:

  // .google.api.expr.v1alpha1.Expr map_key = 3 [json_name = "mapKey"];
  bool has_map_key() const;
  private:
  bool _internal_has_map_key() const;
  public:
  void clear_map_key();
  const ::google::api::expr::v1alpha1::Expr& map_key() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_map_key();
  ::google::api::expr::v1alpha1::Expr* mutable_map_key();
  void set_allocated_map_key(::google::api::expr::v1alpha1::Expr* map_key);
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_map_key() const;
  ::google::api::expr::v1alpha1::Expr* _internal_mutable_map_key();
  public:
  void unsafe_arena_set_allocated_map_key(
      ::google::api::expr::v1alpha1::Expr* map_key);
  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_map_key();

  void clear_key_kind();
  KeyKindCase key_kind_case() const;
  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.CreateStruct.Entry)
 private:
  class _Internal;
  void set_has_field_key();
  void set_has_map_key();

  inline bool has_key_kind() const;
  inline void clear_has_key_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::api::expr::v1alpha1::Expr* value_;
  int64_t id_;
  bool optional_entry_;
  union KeyKindUnion {
    constexpr KeyKindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_key_;
    ::google::api::expr::v1alpha1::Expr* map_key_;
  } key_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};
// -------------------------------------------------------------------

class Expr_CreateStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.CreateStruct) */ {
 public:
  inline Expr_CreateStruct() : Expr_CreateStruct(nullptr) {}
  ~Expr_CreateStruct() override;
  explicit PROTOBUF_CONSTEXPR Expr_CreateStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expr_CreateStruct(const Expr_CreateStruct& from);
  Expr_CreateStruct(Expr_CreateStruct&& from) noexcept
    : Expr_CreateStruct() {
    *this = ::std::move(from);
  }

  inline Expr_CreateStruct& operator=(const Expr_CreateStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr_CreateStruct& operator=(Expr_CreateStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expr_CreateStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expr_CreateStruct* internal_default_instance() {
    return reinterpret_cast<const Expr_CreateStruct*>(
               &_Expr_CreateStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Expr_CreateStruct& a, Expr_CreateStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr_CreateStruct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr_CreateStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expr_CreateStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expr_CreateStruct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expr_CreateStruct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Expr_CreateStruct& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr_CreateStruct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Expr.CreateStruct";
  }
  protected:
  explicit Expr_CreateStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expr_CreateStruct_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 2,
    kMessageNameFieldNumber = 1,
  };
  // repeated .google.api.expr.v1alpha1.Expr.CreateStruct.Entry entries = 2 [json_name = "entries"];
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry >*
      mutable_entries();
  private:
  const ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry& _internal_entries(int index) const;
  ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* _internal_add_entries();
  public:
  const ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry& entries(int index) const;
  ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry >&
      entries() const;

  // string message_name = 1 [json_name = "messageName"];
  void clear_message_name();
  const std::string& message_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message_name();
  PROTOBUF_NODISCARD std::string* release_message_name();
  void set_allocated_message_name(std::string* message_name);
  private:
  const std::string& _internal_message_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message_name(const std::string& value);
  std::string* _internal_mutable_message_name();
  public:

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.CreateStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};
// -------------------------------------------------------------------

class Expr_Comprehension final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr.Comprehension) */ {
 public:
  inline Expr_Comprehension() : Expr_Comprehension(nullptr) {}
  ~Expr_Comprehension() override;
  explicit PROTOBUF_CONSTEXPR Expr_Comprehension(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expr_Comprehension(const Expr_Comprehension& from);
  Expr_Comprehension(Expr_Comprehension&& from) noexcept
    : Expr_Comprehension() {
    *this = ::std::move(from);
  }

  inline Expr_Comprehension& operator=(const Expr_Comprehension& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr_Comprehension& operator=(Expr_Comprehension&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expr_Comprehension& default_instance() {
    return *internal_default_instance();
  }
  static inline const Expr_Comprehension* internal_default_instance() {
    return reinterpret_cast<const Expr_Comprehension*>(
               &_Expr_Comprehension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Expr_Comprehension& a, Expr_Comprehension& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr_Comprehension* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr_Comprehension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expr_Comprehension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expr_Comprehension>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expr_Comprehension& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Expr_Comprehension& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr_Comprehension* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Expr.Comprehension";
  }
  protected:
  explicit Expr_Comprehension(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIterVarFieldNumber = 1,
    kAccuVarFieldNumber = 3,
    kIterRangeFieldNumber = 2,
    kAccuInitFieldNumber = 4,
    kLoopConditionFieldNumber = 5,
    kLoopStepFieldNumber = 6,
    kResultFieldNumber = 7,
  };
  // string iter_var = 1 [json_name = "iterVar"];
  void clear_iter_var();
  const std::string& iter_var() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_iter_var(ArgT0&& arg0, ArgT... args);
  std::string* mutable_iter_var();
  PROTOBUF_NODISCARD std::string* release_iter_var();
  void set_allocated_iter_var(std::string* iter_var);
  private:
  const std::string& _internal_iter_var() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iter_var(const std::string& value);
  std::string* _internal_mutable_iter_var();
  public:

  // string accu_var = 3 [json_name = "accuVar"];
  void clear_accu_var();
  const std::string& accu_var() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accu_var(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accu_var();
  PROTOBUF_NODISCARD std::string* release_accu_var();
  void set_allocated_accu_var(std::string* accu_var);
  private:
  const std::string& _internal_accu_var() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accu_var(const std::string& value);
  std::string* _internal_mutable_accu_var();
  public:

  // .google.api.expr.v1alpha1.Expr iter_range = 2 [json_name = "iterRange"];
  bool has_iter_range() const;
  private:
  bool _internal_has_iter_range() const;
  public:
  void clear_iter_range();
  const ::google::api::expr::v1alpha1::Expr& iter_range() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_iter_range();
  ::google::api::expr::v1alpha1::Expr* mutable_iter_range();
  void set_allocated_iter_range(::google::api::expr::v1alpha1::Expr* iter_range);
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_iter_range() const;
  ::google::api::expr::v1alpha1::Expr* _internal_mutable_iter_range();
  public:
  void unsafe_arena_set_allocated_iter_range(
      ::google::api::expr::v1alpha1::Expr* iter_range);
  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_iter_range();

  // .google.api.expr.v1alpha1.Expr accu_init = 4 [json_name = "accuInit"];
  bool has_accu_init() const;
  private:
  bool _internal_has_accu_init() const;
  public:
  void clear_accu_init();
  const ::google::api::expr::v1alpha1::Expr& accu_init() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_accu_init();
  ::google::api::expr::v1alpha1::Expr* mutable_accu_init();
  void set_allocated_accu_init(::google::api::expr::v1alpha1::Expr* accu_init);
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_accu_init() const;
  ::google::api::expr::v1alpha1::Expr* _internal_mutable_accu_init();
  public:
  void unsafe_arena_set_allocated_accu_init(
      ::google::api::expr::v1alpha1::Expr* accu_init);
  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_accu_init();

  // .google.api.expr.v1alpha1.Expr loop_condition = 5 [json_name = "loopCondition"];
  bool has_loop_condition() const;
  private:
  bool _internal_has_loop_condition() const;
  public:
  void clear_loop_condition();
  const ::google::api::expr::v1alpha1::Expr& loop_condition() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_loop_condition();
  ::google::api::expr::v1alpha1::Expr* mutable_loop_condition();
  void set_allocated_loop_condition(::google::api::expr::v1alpha1::Expr* loop_condition);
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_loop_condition() const;
  ::google::api::expr::v1alpha1::Expr* _internal_mutable_loop_condition();
  public:
  void unsafe_arena_set_allocated_loop_condition(
      ::google::api::expr::v1alpha1::Expr* loop_condition);
  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_loop_condition();

  // .google.api.expr.v1alpha1.Expr loop_step = 6 [json_name = "loopStep"];
  bool has_loop_step() const;
  private:
  bool _internal_has_loop_step() const;
  public:
  void clear_loop_step();
  const ::google::api::expr::v1alpha1::Expr& loop_step() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_loop_step();
  ::google::api::expr::v1alpha1::Expr* mutable_loop_step();
  void set_allocated_loop_step(::google::api::expr::v1alpha1::Expr* loop_step);
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_loop_step() const;
  ::google::api::expr::v1alpha1::Expr* _internal_mutable_loop_step();
  public:
  void unsafe_arena_set_allocated_loop_step(
      ::google::api::expr::v1alpha1::Expr* loop_step);
  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_loop_step();

  // .google.api.expr.v1alpha1.Expr result = 7 [json_name = "result"];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::google::api::expr::v1alpha1::Expr& result() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr* release_result();
  ::google::api::expr::v1alpha1::Expr* mutable_result();
  void set_allocated_result(::google::api::expr::v1alpha1::Expr* result);
  private:
  const ::google::api::expr::v1alpha1::Expr& _internal_result() const;
  ::google::api::expr::v1alpha1::Expr* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::google::api::expr::v1alpha1::Expr* result);
  ::google::api::expr::v1alpha1::Expr* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr.Comprehension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iter_var_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accu_var_;
  ::google::api::expr::v1alpha1::Expr* iter_range_;
  ::google::api::expr::v1alpha1::Expr* accu_init_;
  ::google::api::expr::v1alpha1::Expr* loop_condition_;
  ::google::api::expr::v1alpha1::Expr* loop_step_;
  ::google::api::expr::v1alpha1::Expr* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};
// -------------------------------------------------------------------

class Expr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Expr) */ {
 public:
  inline Expr() : Expr(nullptr) {}
  ~Expr() override;
  explicit PROTOBUF_CONSTEXPR Expr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Expr(const Expr& from);
  Expr(Expr&& from) noexcept
    : Expr() {
    *this = ::std::move(from);
  }

  inline Expr& operator=(const Expr& from) {
    CopyFrom(from);
    return *this;
  }
  inline Expr& operator=(Expr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Expr& default_instance() {
    return *internal_default_instance();
  }
  enum ExprKindCase {
    kConstExpr = 3,
    kIdentExpr = 4,
    kSelectExpr = 5,
    kCallExpr = 6,
    kListExpr = 7,
    kStructExpr = 8,
    kComprehensionExpr = 9,
    EXPR_KIND_NOT_SET = 0,
  };

  static inline const Expr* internal_default_instance() {
    return reinterpret_cast<const Expr*>(
               &_Expr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Expr& a, Expr& b) {
    a.Swap(&b);
  }
  inline void Swap(Expr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Expr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Expr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Expr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Expr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Expr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Expr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Expr";
  }
  protected:
  explicit Expr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Expr_Ident Ident;
  typedef Expr_Select Select;
  typedef Expr_Call Call;
  typedef Expr_CreateList CreateList;
  typedef Expr_CreateStruct CreateStruct;
  typedef Expr_Comprehension Comprehension;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kConstExprFieldNumber = 3,
    kIdentExprFieldNumber = 4,
    kSelectExprFieldNumber = 5,
    kCallExprFieldNumber = 6,
    kListExprFieldNumber = 7,
    kStructExprFieldNumber = 8,
    kComprehensionExprFieldNumber = 9,
  };
  // int64 id = 2 [json_name = "id"];
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // .google.api.expr.v1alpha1.Constant const_expr = 3 [json_name = "constExpr"];
  bool has_const_expr() const;
  private:
  bool _internal_has_const_expr() const;
  public:
  void clear_const_expr();
  const ::google::api::expr::v1alpha1::Constant& const_expr() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Constant* release_const_expr();
  ::google::api::expr::v1alpha1::Constant* mutable_const_expr();
  void set_allocated_const_expr(::google::api::expr::v1alpha1::Constant* const_expr);
  private:
  const ::google::api::expr::v1alpha1::Constant& _internal_const_expr() const;
  ::google::api::expr::v1alpha1::Constant* _internal_mutable_const_expr();
  public:
  void unsafe_arena_set_allocated_const_expr(
      ::google::api::expr::v1alpha1::Constant* const_expr);
  ::google::api::expr::v1alpha1::Constant* unsafe_arena_release_const_expr();

  // .google.api.expr.v1alpha1.Expr.Ident ident_expr = 4 [json_name = "identExpr"];
  bool has_ident_expr() const;
  private:
  bool _internal_has_ident_expr() const;
  public:
  void clear_ident_expr();
  const ::google::api::expr::v1alpha1::Expr_Ident& ident_expr() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr_Ident* release_ident_expr();
  ::google::api::expr::v1alpha1::Expr_Ident* mutable_ident_expr();
  void set_allocated_ident_expr(::google::api::expr::v1alpha1::Expr_Ident* ident_expr);
  private:
  const ::google::api::expr::v1alpha1::Expr_Ident& _internal_ident_expr() const;
  ::google::api::expr::v1alpha1::Expr_Ident* _internal_mutable_ident_expr();
  public:
  void unsafe_arena_set_allocated_ident_expr(
      ::google::api::expr::v1alpha1::Expr_Ident* ident_expr);
  ::google::api::expr::v1alpha1::Expr_Ident* unsafe_arena_release_ident_expr();

  // .google.api.expr.v1alpha1.Expr.Select select_expr = 5 [json_name = "selectExpr"];
  bool has_select_expr() const;
  private:
  bool _internal_has_select_expr() const;
  public:
  void clear_select_expr();
  const ::google::api::expr::v1alpha1::Expr_Select& select_expr() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr_Select* release_select_expr();
  ::google::api::expr::v1alpha1::Expr_Select* mutable_select_expr();
  void set_allocated_select_expr(::google::api::expr::v1alpha1::Expr_Select* select_expr);
  private:
  const ::google::api::expr::v1alpha1::Expr_Select& _internal_select_expr() const;
  ::google::api::expr::v1alpha1::Expr_Select* _internal_mutable_select_expr();
  public:
  void unsafe_arena_set_allocated_select_expr(
      ::google::api::expr::v1alpha1::Expr_Select* select_expr);
  ::google::api::expr::v1alpha1::Expr_Select* unsafe_arena_release_select_expr();

  // .google.api.expr.v1alpha1.Expr.Call call_expr = 6 [json_name = "callExpr"];
  bool has_call_expr() const;
  private:
  bool _internal_has_call_expr() const;
  public:
  void clear_call_expr();
  const ::google::api::expr::v1alpha1::Expr_Call& call_expr() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr_Call* release_call_expr();
  ::google::api::expr::v1alpha1::Expr_Call* mutable_call_expr();
  void set_allocated_call_expr(::google::api::expr::v1alpha1::Expr_Call* call_expr);
  private:
  const ::google::api::expr::v1alpha1::Expr_Call& _internal_call_expr() const;
  ::google::api::expr::v1alpha1::Expr_Call* _internal_mutable_call_expr();
  public:
  void unsafe_arena_set_allocated_call_expr(
      ::google::api::expr::v1alpha1::Expr_Call* call_expr);
  ::google::api::expr::v1alpha1::Expr_Call* unsafe_arena_release_call_expr();

  // .google.api.expr.v1alpha1.Expr.CreateList list_expr = 7 [json_name = "listExpr"];
  bool has_list_expr() const;
  private:
  bool _internal_has_list_expr() const;
  public:
  void clear_list_expr();
  const ::google::api::expr::v1alpha1::Expr_CreateList& list_expr() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr_CreateList* release_list_expr();
  ::google::api::expr::v1alpha1::Expr_CreateList* mutable_list_expr();
  void set_allocated_list_expr(::google::api::expr::v1alpha1::Expr_CreateList* list_expr);
  private:
  const ::google::api::expr::v1alpha1::Expr_CreateList& _internal_list_expr() const;
  ::google::api::expr::v1alpha1::Expr_CreateList* _internal_mutable_list_expr();
  public:
  void unsafe_arena_set_allocated_list_expr(
      ::google::api::expr::v1alpha1::Expr_CreateList* list_expr);
  ::google::api::expr::v1alpha1::Expr_CreateList* unsafe_arena_release_list_expr();

  // .google.api.expr.v1alpha1.Expr.CreateStruct struct_expr = 8 [json_name = "structExpr"];
  bool has_struct_expr() const;
  private:
  bool _internal_has_struct_expr() const;
  public:
  void clear_struct_expr();
  const ::google::api::expr::v1alpha1::Expr_CreateStruct& struct_expr() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr_CreateStruct* release_struct_expr();
  ::google::api::expr::v1alpha1::Expr_CreateStruct* mutable_struct_expr();
  void set_allocated_struct_expr(::google::api::expr::v1alpha1::Expr_CreateStruct* struct_expr);
  private:
  const ::google::api::expr::v1alpha1::Expr_CreateStruct& _internal_struct_expr() const;
  ::google::api::expr::v1alpha1::Expr_CreateStruct* _internal_mutable_struct_expr();
  public:
  void unsafe_arena_set_allocated_struct_expr(
      ::google::api::expr::v1alpha1::Expr_CreateStruct* struct_expr);
  ::google::api::expr::v1alpha1::Expr_CreateStruct* unsafe_arena_release_struct_expr();

  // .google.api.expr.v1alpha1.Expr.Comprehension comprehension_expr = 9 [json_name = "comprehensionExpr"];
  bool has_comprehension_expr() const;
  private:
  bool _internal_has_comprehension_expr() const;
  public:
  void clear_comprehension_expr();
  const ::google::api::expr::v1alpha1::Expr_Comprehension& comprehension_expr() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Expr_Comprehension* release_comprehension_expr();
  ::google::api::expr::v1alpha1::Expr_Comprehension* mutable_comprehension_expr();
  void set_allocated_comprehension_expr(::google::api::expr::v1alpha1::Expr_Comprehension* comprehension_expr);
  private:
  const ::google::api::expr::v1alpha1::Expr_Comprehension& _internal_comprehension_expr() const;
  ::google::api::expr::v1alpha1::Expr_Comprehension* _internal_mutable_comprehension_expr();
  public:
  void unsafe_arena_set_allocated_comprehension_expr(
      ::google::api::expr::v1alpha1::Expr_Comprehension* comprehension_expr);
  ::google::api::expr::v1alpha1::Expr_Comprehension* unsafe_arena_release_comprehension_expr();

  void clear_expr_kind();
  ExprKindCase expr_kind_case() const;
  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Expr)
 private:
  class _Internal;
  void set_has_const_expr();
  void set_has_ident_expr();
  void set_has_select_expr();
  void set_has_call_expr();
  void set_has_list_expr();
  void set_has_struct_expr();
  void set_has_comprehension_expr();

  inline bool has_expr_kind() const;
  inline void clear_has_expr_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t id_;
  union ExprKindUnion {
    constexpr ExprKindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::google::api::expr::v1alpha1::Constant* const_expr_;
    ::google::api::expr::v1alpha1::Expr_Ident* ident_expr_;
    ::google::api::expr::v1alpha1::Expr_Select* select_expr_;
    ::google::api::expr::v1alpha1::Expr_Call* call_expr_;
    ::google::api::expr::v1alpha1::Expr_CreateList* list_expr_;
    ::google::api::expr::v1alpha1::Expr_CreateStruct* struct_expr_;
    ::google::api::expr::v1alpha1::Expr_Comprehension* comprehension_expr_;
  } expr_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};
// -------------------------------------------------------------------

class Constant final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Constant) */ {
 public:
  inline Constant() : Constant(nullptr) {}
  ~Constant() override;
  explicit PROTOBUF_CONSTEXPR Constant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Constant(const Constant& from);
  Constant(Constant&& from) noexcept
    : Constant() {
    *this = ::std::move(from);
  }

  inline Constant& operator=(const Constant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Constant& operator=(Constant&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Constant& default_instance() {
    return *internal_default_instance();
  }
  enum ConstantKindCase {
    kNullValue = 1,
    kBoolValue = 2,
    kInt64Value = 3,
    kUint64Value = 4,
    kDoubleValue = 5,
    kStringValue = 6,
    kBytesValue = 7,
    kDurationValue = 8,
    kTimestampValue = 9,
    CONSTANT_KIND_NOT_SET = 0,
  };

  static inline const Constant* internal_default_instance() {
    return reinterpret_cast<const Constant*>(
               &_Constant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Constant& a, Constant& b) {
    a.Swap(&b);
  }
  inline void Swap(Constant* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Constant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Constant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Constant>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Constant& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Constant& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Constant* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Constant";
  }
  protected:
  explicit Constant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullValueFieldNumber = 1,
    kBoolValueFieldNumber = 2,
    kInt64ValueFieldNumber = 3,
    kUint64ValueFieldNumber = 4,
    kDoubleValueFieldNumber = 5,
    kStringValueFieldNumber = 6,
    kBytesValueFieldNumber = 7,
    kDurationValueFieldNumber = 8,
    kTimestampValueFieldNumber = 9,
  };
  // .google.protobuf.NullValue null_value = 1 [json_name = "nullValue"];
  bool has_null_value() const;
  private:
  bool _internal_has_null_value() const;
  public:
  void clear_null_value();
  ::PROTOBUF_NAMESPACE_ID::NullValue null_value() const;
  void set_null_value(::PROTOBUF_NAMESPACE_ID::NullValue value);
  private:
  ::PROTOBUF_NAMESPACE_ID::NullValue _internal_null_value() const;
  void _internal_set_null_value(::PROTOBUF_NAMESPACE_ID::NullValue value);
  public:

  // bool bool_value = 2 [json_name = "boolValue"];
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // int64 int64_value = 3 [json_name = "int64Value"];
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  int64_t int64_value() const;
  void set_int64_value(int64_t value);
  private:
  int64_t _internal_int64_value() const;
  void _internal_set_int64_value(int64_t value);
  public:

  // uint64 uint64_value = 4 [json_name = "uint64Value"];
  bool has_uint64_value() const;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  uint64_t uint64_value() const;
  void set_uint64_value(uint64_t value);
  private:
  uint64_t _internal_uint64_value() const;
  void _internal_set_uint64_value(uint64_t value);
  public:

  // double double_value = 5 [json_name = "doubleValue"];
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string string_value = 6 [json_name = "stringValue"];
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bytes bytes_value = 7 [json_name = "bytesValue"];
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_value();
  PROTOBUF_NODISCARD std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  // .google.protobuf.Duration duration_value = 8 [json_name = "durationValue", deprecated = true];
  PROTOBUF_DEPRECATED bool has_duration_value() const;
  private:
  bool _internal_has_duration_value() const;
  public:
  PROTOBUF_DEPRECATED void clear_duration_value();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::Duration& duration_value() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::Duration* release_duration_value();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration_value();
  PROTOBUF_DEPRECATED void set_allocated_duration_value(::PROTOBUF_NAMESPACE_ID::Duration* duration_value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration_value() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration_value();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_duration_value(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration_value);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration_value();

  // .google.protobuf.Timestamp timestamp_value = 9 [json_name = "timestampValue", deprecated = true];
  PROTOBUF_DEPRECATED bool has_timestamp_value() const;
  private:
  bool _internal_has_timestamp_value() const;
  public:
  PROTOBUF_DEPRECATED void clear_timestamp_value();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp_value() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp_value();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp_value();
  PROTOBUF_DEPRECATED void set_allocated_timestamp_value(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp_value() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp_value();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_timestamp_value(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_value);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp_value();

  void clear_constant_kind();
  ConstantKindCase constant_kind_case() const;
  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Constant)
 private:
  class _Internal;
  void set_has_null_value();
  void set_has_bool_value();
  void set_has_int64_value();
  void set_has_uint64_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_bytes_value();
  void set_has_duration_value();
  void set_has_timestamp_value();

  inline bool has_constant_kind() const;
  inline void clear_has_constant_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ConstantKindUnion {
    constexpr ConstantKindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int null_value_;
    bool bool_value_;
    int64_t int64_value_;
    uint64_t uint64_value_;
    double double_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
    ::PROTOBUF_NAMESPACE_ID::Duration* duration_value_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_value_;
  } constant_kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};
// -------------------------------------------------------------------

class SourceInfo_PositionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SourceInfo_PositionsEntry_DoNotUse, 
    int64_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SourceInfo_PositionsEntry_DoNotUse, 
    int64_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  SourceInfo_PositionsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SourceInfo_PositionsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SourceInfo_PositionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SourceInfo_PositionsEntry_DoNotUse& other);
  static const SourceInfo_PositionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SourceInfo_PositionsEntry_DoNotUse*>(&_SourceInfo_PositionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};

// -------------------------------------------------------------------

class SourceInfo_MacroCallsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SourceInfo_MacroCallsEntry_DoNotUse, 
    int64_t, ::google::api::expr::v1alpha1::Expr,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SourceInfo_MacroCallsEntry_DoNotUse, 
    int64_t, ::google::api::expr::v1alpha1::Expr,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  SourceInfo_MacroCallsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SourceInfo_MacroCallsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SourceInfo_MacroCallsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SourceInfo_MacroCallsEntry_DoNotUse& other);
  static const SourceInfo_MacroCallsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SourceInfo_MacroCallsEntry_DoNotUse*>(&_SourceInfo_MacroCallsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};

// -------------------------------------------------------------------

class SourceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.SourceInfo) */ {
 public:
  inline SourceInfo() : SourceInfo(nullptr) {}
  ~SourceInfo() override;
  explicit PROTOBUF_CONSTEXPR SourceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SourceInfo(const SourceInfo& from);
  SourceInfo(SourceInfo&& from) noexcept
    : SourceInfo() {
    *this = ::std::move(from);
  }

  inline SourceInfo& operator=(const SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceInfo& operator=(SourceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SourceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SourceInfo* internal_default_instance() {
    return reinterpret_cast<const SourceInfo*>(
               &_SourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SourceInfo& a, SourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SourceInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SourceInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SourceInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.SourceInfo";
  }
  protected:
  explicit SourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLineOffsetsFieldNumber = 3,
    kPositionsFieldNumber = 4,
    kMacroCallsFieldNumber = 5,
    kSyntaxVersionFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // repeated int32 line_offsets = 3 [json_name = "lineOffsets"];
  int line_offsets_size() const;
  private:
  int _internal_line_offsets_size() const;
  public:
  void clear_line_offsets();
  private:
  int32_t _internal_line_offsets(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_line_offsets() const;
  void _internal_add_line_offsets(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_line_offsets();
  public:
  int32_t line_offsets(int index) const;
  void set_line_offsets(int index, int32_t value);
  void add_line_offsets(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      line_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_line_offsets();

  // map<int64, int32> positions = 4 [json_name = "positions"];
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int32_t >&
      _internal_positions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int32_t >*
      _internal_mutable_positions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int32_t >&
      positions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int32_t >*
      mutable_positions();

  // map<int64, .google.api.expr.v1alpha1.Expr> macro_calls = 5 [json_name = "macroCalls"];
  int macro_calls_size() const;
  private:
  int _internal_macro_calls_size() const;
  public:
  void clear_macro_calls();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Expr >&
      _internal_macro_calls() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Expr >*
      _internal_mutable_macro_calls();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Expr >&
      macro_calls() const;
  ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Expr >*
      mutable_macro_calls();

  // string syntax_version = 1 [json_name = "syntaxVersion"];
  void clear_syntax_version();
  const std::string& syntax_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_syntax_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_syntax_version();
  PROTOBUF_NODISCARD std::string* release_syntax_version();
  void set_allocated_syntax_version(std::string* syntax_version);
  private:
  const std::string& _internal_syntax_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_syntax_version(const std::string& value);
  std::string* _internal_mutable_syntax_version();
  public:

  // string location = 2 [json_name = "location"];
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.SourceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > line_offsets_;
  mutable std::atomic<int> _line_offsets_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SourceInfo_PositionsEntry_DoNotUse,
      int64_t, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> positions_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SourceInfo_MacroCallsEntry_DoNotUse,
      int64_t, ::google::api::expr::v1alpha1::Expr,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> macro_calls_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr syntax_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};
// -------------------------------------------------------------------

class SourcePosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.SourcePosition) */ {
 public:
  inline SourcePosition() : SourcePosition(nullptr) {}
  ~SourcePosition() override;
  explicit PROTOBUF_CONSTEXPR SourcePosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SourcePosition(const SourcePosition& from);
  SourcePosition(SourcePosition&& from) noexcept
    : SourcePosition() {
    *this = ::std::move(from);
  }

  inline SourcePosition& operator=(const SourcePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourcePosition& operator=(SourcePosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SourcePosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const SourcePosition* internal_default_instance() {
    return reinterpret_cast<const SourcePosition*>(
               &_SourcePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SourcePosition& a, SourcePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(SourcePosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourcePosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SourcePosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SourcePosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SourcePosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SourcePosition& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourcePosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.SourcePosition";
  }
  protected:
  explicit SourcePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLineFieldNumber = 3,
    kColumnFieldNumber = 4,
  };
  // string location = 1 [json_name = "location"];
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // int32 offset = 2 [json_name = "offset"];
  void clear_offset();
  int32_t offset() const;
  void set_offset(int32_t value);
  private:
  int32_t _internal_offset() const;
  void _internal_set_offset(int32_t value);
  public:

  // int32 line = 3 [json_name = "line"];
  void clear_line();
  int32_t line() const;
  void set_line(int32_t value);
  private:
  int32_t _internal_line() const;
  void _internal_set_line(int32_t value);
  public:

  // int32 column = 4 [json_name = "column"];
  void clear_column();
  int32_t column() const;
  void set_column(int32_t value);
  private:
  int32_t _internal_column() const;
  void _internal_set_column(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.SourcePosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  int32_t offset_;
  int32_t line_;
  int32_t column_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParsedExpr

// .google.api.expr.v1alpha1.Expr expr = 2 [json_name = "expr"];
inline bool ParsedExpr::_internal_has_expr() const {
  return this != internal_default_instance() && expr_ != nullptr;
}
inline bool ParsedExpr::has_expr() const {
  return _internal_has_expr();
}
inline void ParsedExpr::clear_expr() {
  if (GetArenaForAllocation() == nullptr && expr_ != nullptr) {
    delete expr_;
  }
  expr_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Expr& ParsedExpr::_internal_expr() const {
  const ::google::api::expr::v1alpha1::Expr* p = expr_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(
      ::google::api::expr::v1alpha1::_Expr_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr& ParsedExpr::expr() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.ParsedExpr.expr)
  return _internal_expr();
}
inline void ParsedExpr::unsafe_arena_set_allocated_expr(
    ::google::api::expr::v1alpha1::Expr* expr) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expr_);
  }
  expr_ = expr;
  if (expr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.ParsedExpr.expr)
}
inline ::google::api::expr::v1alpha1::Expr* ParsedExpr::release_expr() {
  
  ::google::api::expr::v1alpha1::Expr* temp = expr_;
  expr_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* ParsedExpr::unsafe_arena_release_expr() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.ParsedExpr.expr)
  
  ::google::api::expr::v1alpha1::Expr* temp = expr_;
  expr_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* ParsedExpr::_internal_mutable_expr() {
  
  if (expr_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
    expr_ = p;
  }
  return expr_;
}
inline ::google::api::expr::v1alpha1::Expr* ParsedExpr::mutable_expr() {
  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_expr();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.ParsedExpr.expr)
  return _msg;
}
inline void ParsedExpr::set_allocated_expr(::google::api::expr::v1alpha1::Expr* expr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete expr_;
  }
  if (expr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(expr);
    if (message_arena != submessage_arena) {
      expr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expr, submessage_arena);
    }
    
  } else {
    
  }
  expr_ = expr;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.ParsedExpr.expr)
}

// .google.api.expr.v1alpha1.SourceInfo source_info = 3 [json_name = "sourceInfo"];
inline bool ParsedExpr::_internal_has_source_info() const {
  return this != internal_default_instance() && source_info_ != nullptr;
}
inline bool ParsedExpr::has_source_info() const {
  return _internal_has_source_info();
}
inline void ParsedExpr::clear_source_info() {
  if (GetArenaForAllocation() == nullptr && source_info_ != nullptr) {
    delete source_info_;
  }
  source_info_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::SourceInfo& ParsedExpr::_internal_source_info() const {
  const ::google::api::expr::v1alpha1::SourceInfo* p = source_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::SourceInfo&>(
      ::google::api::expr::v1alpha1::_SourceInfo_default_instance_);
}
inline const ::google::api::expr::v1alpha1::SourceInfo& ParsedExpr::source_info() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.ParsedExpr.source_info)
  return _internal_source_info();
}
inline void ParsedExpr::unsafe_arena_set_allocated_source_info(
    ::google::api::expr::v1alpha1::SourceInfo* source_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_info_);
  }
  source_info_ = source_info;
  if (source_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.ParsedExpr.source_info)
}
inline ::google::api::expr::v1alpha1::SourceInfo* ParsedExpr::release_source_info() {
  
  ::google::api::expr::v1alpha1::SourceInfo* temp = source_info_;
  source_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::SourceInfo* ParsedExpr::unsafe_arena_release_source_info() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.ParsedExpr.source_info)
  
  ::google::api::expr::v1alpha1::SourceInfo* temp = source_info_;
  source_info_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::SourceInfo* ParsedExpr::_internal_mutable_source_info() {
  
  if (source_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::SourceInfo>(GetArenaForAllocation());
    source_info_ = p;
  }
  return source_info_;
}
inline ::google::api::expr::v1alpha1::SourceInfo* ParsedExpr::mutable_source_info() {
  ::google::api::expr::v1alpha1::SourceInfo* _msg = _internal_mutable_source_info();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.ParsedExpr.source_info)
  return _msg;
}
inline void ParsedExpr::set_allocated_source_info(::google::api::expr::v1alpha1::SourceInfo* source_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete source_info_;
  }
  if (source_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source_info);
    if (message_arena != submessage_arena) {
      source_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_info, submessage_arena);
    }
    
  } else {
    
  }
  source_info_ = source_info;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.ParsedExpr.source_info)
}

// -------------------------------------------------------------------

// Expr_Ident

// string name = 1 [json_name = "name"];
inline void Expr_Ident::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Expr_Ident::name() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Ident.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Expr_Ident::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.Ident.name)
}
inline std::string* Expr_Ident::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Ident.name)
  return _s;
}
inline const std::string& Expr_Ident::_internal_name() const {
  return name_.Get();
}
inline void Expr_Ident::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Expr_Ident::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Expr_Ident::release_name() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Ident.name)
  return name_.Release();
}
inline void Expr_Ident::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Ident.name)
}

// -------------------------------------------------------------------

// Expr_Select

// .google.api.expr.v1alpha1.Expr operand = 1 [json_name = "operand"];
inline bool Expr_Select::_internal_has_operand() const {
  return this != internal_default_instance() && operand_ != nullptr;
}
inline bool Expr_Select::has_operand() const {
  return _internal_has_operand();
}
inline void Expr_Select::clear_operand() {
  if (GetArenaForAllocation() == nullptr && operand_ != nullptr) {
    delete operand_;
  }
  operand_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Select::_internal_operand() const {
  const ::google::api::expr::v1alpha1::Expr* p = operand_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(
      ::google::api::expr::v1alpha1::_Expr_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Select::operand() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Select.operand)
  return _internal_operand();
}
inline void Expr_Select::unsafe_arena_set_allocated_operand(
    ::google::api::expr::v1alpha1::Expr* operand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operand_);
  }
  operand_ = operand;
  if (operand) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Select.operand)
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Select::release_operand() {
  
  ::google::api::expr::v1alpha1::Expr* temp = operand_;
  operand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Select::unsafe_arena_release_operand() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Select.operand)
  
  ::google::api::expr::v1alpha1::Expr* temp = operand_;
  operand_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Select::_internal_mutable_operand() {
  
  if (operand_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
    operand_ = p;
  }
  return operand_;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Select::mutable_operand() {
  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_operand();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Select.operand)
  return _msg;
}
inline void Expr_Select::set_allocated_operand(::google::api::expr::v1alpha1::Expr* operand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete operand_;
  }
  if (operand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(operand);
    if (message_arena != submessage_arena) {
      operand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operand, submessage_arena);
    }
    
  } else {
    
  }
  operand_ = operand;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Select.operand)
}

// string field = 2 [json_name = "field"];
inline void Expr_Select::clear_field() {
  field_.ClearToEmpty();
}
inline const std::string& Expr_Select::field() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Select.field)
  return _internal_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Expr_Select::set_field(ArgT0&& arg0, ArgT... args) {
 
 field_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.Select.field)
}
inline std::string* Expr_Select::mutable_field() {
  std::string* _s = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Select.field)
  return _s;
}
inline const std::string& Expr_Select::_internal_field() const {
  return field_.Get();
}
inline void Expr_Select::_internal_set_field(const std::string& value) {
  
  field_.Set(value, GetArenaForAllocation());
}
inline std::string* Expr_Select::_internal_mutable_field() {
  
  return field_.Mutable(GetArenaForAllocation());
}
inline std::string* Expr_Select::release_field() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Select.field)
  return field_.Release();
}
inline void Expr_Select::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    
  } else {
    
  }
  field_.SetAllocated(field, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (field_.IsDefault()) {
    field_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Select.field)
}

// bool test_only = 3 [json_name = "testOnly"];
inline void Expr_Select::clear_test_only() {
  test_only_ = false;
}
inline bool Expr_Select::_internal_test_only() const {
  return test_only_;
}
inline bool Expr_Select::test_only() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Select.test_only)
  return _internal_test_only();
}
inline void Expr_Select::_internal_set_test_only(bool value) {
  
  test_only_ = value;
}
inline void Expr_Select::set_test_only(bool value) {
  _internal_set_test_only(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.Select.test_only)
}

// -------------------------------------------------------------------

// Expr_Call

// .google.api.expr.v1alpha1.Expr target = 1 [json_name = "target"];
inline bool Expr_Call::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool Expr_Call::has_target() const {
  return _internal_has_target();
}
inline void Expr_Call::clear_target() {
  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Call::_internal_target() const {
  const ::google::api::expr::v1alpha1::Expr* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(
      ::google::api::expr::v1alpha1::_Expr_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Call::target() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Call.target)
  return _internal_target();
}
inline void Expr_Call::unsafe_arena_set_allocated_target(
    ::google::api::expr::v1alpha1::Expr* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Call.target)
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Call::release_target() {
  
  ::google::api::expr::v1alpha1::Expr* temp = target_;
  target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Call::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Call.target)
  
  ::google::api::expr::v1alpha1::Expr* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Call::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
    target_ = p;
  }
  return target_;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Call::mutable_target() {
  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Call.target)
  return _msg;
}
inline void Expr_Call::set_allocated_target(::google::api::expr::v1alpha1::Expr* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Call.target)
}

// string function = 2 [json_name = "function"];
inline void Expr_Call::clear_function() {
  function_.ClearToEmpty();
}
inline const std::string& Expr_Call::function() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Call.function)
  return _internal_function();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Expr_Call::set_function(ArgT0&& arg0, ArgT... args) {
 
 function_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.Call.function)
}
inline std::string* Expr_Call::mutable_function() {
  std::string* _s = _internal_mutable_function();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Call.function)
  return _s;
}
inline const std::string& Expr_Call::_internal_function() const {
  return function_.Get();
}
inline void Expr_Call::_internal_set_function(const std::string& value) {
  
  function_.Set(value, GetArenaForAllocation());
}
inline std::string* Expr_Call::_internal_mutable_function() {
  
  return function_.Mutable(GetArenaForAllocation());
}
inline std::string* Expr_Call::release_function() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Call.function)
  return function_.Release();
}
inline void Expr_Call::set_allocated_function(std::string* function) {
  if (function != nullptr) {
    
  } else {
    
  }
  function_.SetAllocated(function, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_.IsDefault()) {
    function_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Call.function)
}

// repeated .google.api.expr.v1alpha1.Expr args = 3 [json_name = "args"];
inline int Expr_Call::_internal_args_size() const {
  return args_.size();
}
inline int Expr_Call::args_size() const {
  return _internal_args_size();
}
inline void Expr_Call::clear_args() {
  args_.Clear();
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Call::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Call.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >*
Expr_Call::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Expr.Call.args)
  return &args_;
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Call::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Call::args(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Call.args)
  return _internal_args(index);
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Call::_internal_add_args() {
  return args_.Add();
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Call::add_args() {
  ::google::api::expr::v1alpha1::Expr* _add = _internal_add_args();
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Expr.Call.args)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >&
Expr_Call::args() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Expr.Call.args)
  return args_;
}

// -------------------------------------------------------------------

// Expr_CreateList

// repeated .google.api.expr.v1alpha1.Expr elements = 1 [json_name = "elements"];
inline int Expr_CreateList::_internal_elements_size() const {
  return elements_.size();
}
inline int Expr_CreateList::elements_size() const {
  return _internal_elements_size();
}
inline void Expr_CreateList::clear_elements() {
  elements_.Clear();
}
inline ::google::api::expr::v1alpha1::Expr* Expr_CreateList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.CreateList.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >*
Expr_CreateList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Expr.CreateList.elements)
  return &elements_;
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_CreateList::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_CreateList::elements(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateList.elements)
  return _internal_elements(index);
}
inline ::google::api::expr::v1alpha1::Expr* Expr_CreateList::_internal_add_elements() {
  return elements_.Add();
}
inline ::google::api::expr::v1alpha1::Expr* Expr_CreateList::add_elements() {
  ::google::api::expr::v1alpha1::Expr* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Expr.CreateList.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr >&
Expr_CreateList::elements() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Expr.CreateList.elements)
  return elements_;
}

// -------------------------------------------------------------------

// Expr_CreateStruct_Entry

// int64 id = 1 [json_name = "id"];
inline void Expr_CreateStruct_Entry::clear_id() {
  id_ = int64_t{0};
}
inline int64_t Expr_CreateStruct_Entry::_internal_id() const {
  return id_;
}
inline int64_t Expr_CreateStruct_Entry::id() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.id)
  return _internal_id();
}
inline void Expr_CreateStruct_Entry::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void Expr_CreateStruct_Entry::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.id)
}

// string field_key = 2 [json_name = "fieldKey"];
inline bool Expr_CreateStruct_Entry::_internal_has_field_key() const {
  return key_kind_case() == kFieldKey;
}
inline bool Expr_CreateStruct_Entry::has_field_key() const {
  return _internal_has_field_key();
}
inline void Expr_CreateStruct_Entry::set_has_field_key() {
  _oneof_case_[0] = kFieldKey;
}
inline void Expr_CreateStruct_Entry::clear_field_key() {
  if (_internal_has_field_key()) {
    key_kind_.field_key_.Destroy();
    clear_has_key_kind();
  }
}
inline const std::string& Expr_CreateStruct_Entry::field_key() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.field_key)
  return _internal_field_key();
}
template <typename ArgT0, typename... ArgT>
inline void Expr_CreateStruct_Entry::set_field_key(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_field_key()) {
    clear_key_kind();
    set_has_field_key();
    key_kind_.field_key_.InitDefault();
  }
  key_kind_.field_key_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.field_key)
}
inline std::string* Expr_CreateStruct_Entry::mutable_field_key() {
  std::string* _s = _internal_mutable_field_key();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.field_key)
  return _s;
}
inline const std::string& Expr_CreateStruct_Entry::_internal_field_key() const {
  if (_internal_has_field_key()) {
    return key_kind_.field_key_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Expr_CreateStruct_Entry::_internal_set_field_key(const std::string& value) {
  if (!_internal_has_field_key()) {
    clear_key_kind();
    set_has_field_key();
    key_kind_.field_key_.InitDefault();
  }
  key_kind_.field_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Expr_CreateStruct_Entry::_internal_mutable_field_key() {
  if (!_internal_has_field_key()) {
    clear_key_kind();
    set_has_field_key();
    key_kind_.field_key_.InitDefault();
  }
  return key_kind_.field_key_.Mutable(      GetArenaForAllocation());
}
inline std::string* Expr_CreateStruct_Entry::release_field_key() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.field_key)
  if (_internal_has_field_key()) {
    clear_has_key_kind();
    return key_kind_.field_key_.Release();
  } else {
    return nullptr;
  }
}
inline void Expr_CreateStruct_Entry::set_allocated_field_key(std::string* field_key) {
  if (has_key_kind()) {
    clear_key_kind();
  }
  if (field_key != nullptr) {
    set_has_field_key();
    key_kind_.field_key_.InitAllocated(field_key, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.field_key)
}

// .google.api.expr.v1alpha1.Expr map_key = 3 [json_name = "mapKey"];
inline bool Expr_CreateStruct_Entry::_internal_has_map_key() const {
  return key_kind_case() == kMapKey;
}
inline bool Expr_CreateStruct_Entry::has_map_key() const {
  return _internal_has_map_key();
}
inline void Expr_CreateStruct_Entry::set_has_map_key() {
  _oneof_case_[0] = kMapKey;
}
inline void Expr_CreateStruct_Entry::clear_map_key() {
  if (_internal_has_map_key()) {
    if (GetArenaForAllocation() == nullptr) {
      delete key_kind_.map_key_;
    }
    clear_has_key_kind();
  }
}
inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::release_map_key() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.map_key)
  if (_internal_has_map_key()) {
    clear_has_key_kind();
    ::google::api::expr::v1alpha1::Expr* temp = key_kind_.map_key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    key_kind_.map_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_CreateStruct_Entry::_internal_map_key() const {
  return _internal_has_map_key()
      ? *key_kind_.map_key_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Expr&>(::google::api::expr::v1alpha1::_Expr_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_CreateStruct_Entry::map_key() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.map_key)
  return _internal_map_key();
}
inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::unsafe_arena_release_map_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.map_key)
  if (_internal_has_map_key()) {
    clear_has_key_kind();
    ::google::api::expr::v1alpha1::Expr* temp = key_kind_.map_key_;
    key_kind_.map_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr_CreateStruct_Entry::unsafe_arena_set_allocated_map_key(::google::api::expr::v1alpha1::Expr* map_key) {
  clear_key_kind();
  if (map_key) {
    set_has_map_key();
    key_kind_.map_key_ = map_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.map_key)
}
inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::_internal_mutable_map_key() {
  if (!_internal_has_map_key()) {
    clear_key_kind();
    set_has_map_key();
    key_kind_.map_key_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr >(GetArenaForAllocation());
  }
  return key_kind_.map_key_;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::mutable_map_key() {
  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_map_key();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.map_key)
  return _msg;
}

// .google.api.expr.v1alpha1.Expr value = 4 [json_name = "value"];
inline bool Expr_CreateStruct_Entry::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool Expr_CreateStruct_Entry::has_value() const {
  return _internal_has_value();
}
inline void Expr_CreateStruct_Entry::clear_value() {
  if (GetArenaForAllocation() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_CreateStruct_Entry::_internal_value() const {
  const ::google::api::expr::v1alpha1::Expr* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(
      ::google::api::expr::v1alpha1::_Expr_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_CreateStruct_Entry::value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.value)
  return _internal_value();
}
inline void Expr_CreateStruct_Entry::unsafe_arena_set_allocated_value(
    ::google::api::expr::v1alpha1::Expr* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.value)
}
inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::release_value() {
  
  ::google::api::expr::v1alpha1::Expr* temp = value_;
  value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.value)
  
  ::google::api::expr::v1alpha1::Expr* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
    value_ = p;
  }
  return value_;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_CreateStruct_Entry::mutable_value() {
  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.value)
  return _msg;
}
inline void Expr_CreateStruct_Entry::set_allocated_value(::google::api::expr::v1alpha1::Expr* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.value)
}

// bool optional_entry = 5 [json_name = "optionalEntry"];
inline void Expr_CreateStruct_Entry::clear_optional_entry() {
  optional_entry_ = false;
}
inline bool Expr_CreateStruct_Entry::_internal_optional_entry() const {
  return optional_entry_;
}
inline bool Expr_CreateStruct_Entry::optional_entry() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.optional_entry)
  return _internal_optional_entry();
}
inline void Expr_CreateStruct_Entry::_internal_set_optional_entry(bool value) {
  
  optional_entry_ = value;
}
inline void Expr_CreateStruct_Entry::set_optional_entry(bool value) {
  _internal_set_optional_entry(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.CreateStruct.Entry.optional_entry)
}

inline bool Expr_CreateStruct_Entry::has_key_kind() const {
  return key_kind_case() != KEY_KIND_NOT_SET;
}
inline void Expr_CreateStruct_Entry::clear_has_key_kind() {
  _oneof_case_[0] = KEY_KIND_NOT_SET;
}
inline Expr_CreateStruct_Entry::KeyKindCase Expr_CreateStruct_Entry::key_kind_case() const {
  return Expr_CreateStruct_Entry::KeyKindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Expr_CreateStruct

// string message_name = 1 [json_name = "messageName"];
inline void Expr_CreateStruct::clear_message_name() {
  message_name_.ClearToEmpty();
}
inline const std::string& Expr_CreateStruct::message_name() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.message_name)
  return _internal_message_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Expr_CreateStruct::set_message_name(ArgT0&& arg0, ArgT... args) {
 
 message_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.CreateStruct.message_name)
}
inline std::string* Expr_CreateStruct::mutable_message_name() {
  std::string* _s = _internal_mutable_message_name();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.CreateStruct.message_name)
  return _s;
}
inline const std::string& Expr_CreateStruct::_internal_message_name() const {
  return message_name_.Get();
}
inline void Expr_CreateStruct::_internal_set_message_name(const std::string& value) {
  
  message_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Expr_CreateStruct::_internal_mutable_message_name() {
  
  return message_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Expr_CreateStruct::release_message_name() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.CreateStruct.message_name)
  return message_name_.Release();
}
inline void Expr_CreateStruct::set_allocated_message_name(std::string* message_name) {
  if (message_name != nullptr) {
    
  } else {
    
  }
  message_name_.SetAllocated(message_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_name_.IsDefault()) {
    message_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.CreateStruct.message_name)
}

// repeated .google.api.expr.v1alpha1.Expr.CreateStruct.Entry entries = 2 [json_name = "entries"];
inline int Expr_CreateStruct::_internal_entries_size() const {
  return entries_.size();
}
inline int Expr_CreateStruct::entries_size() const {
  return _internal_entries_size();
}
inline void Expr_CreateStruct::clear_entries() {
  entries_.Clear();
}
inline ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* Expr_CreateStruct::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.CreateStruct.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry >*
Expr_CreateStruct::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.Expr.CreateStruct.entries)
  return &entries_;
}
inline const ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry& Expr_CreateStruct::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry& Expr_CreateStruct::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.CreateStruct.entries)
  return _internal_entries(index);
}
inline ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* Expr_CreateStruct::_internal_add_entries() {
  return entries_.Add();
}
inline ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* Expr_CreateStruct::add_entries() {
  ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.Expr.CreateStruct.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Expr_CreateStruct_Entry >&
Expr_CreateStruct::entries() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.Expr.CreateStruct.entries)
  return entries_;
}

// -------------------------------------------------------------------

// Expr_Comprehension

// string iter_var = 1 [json_name = "iterVar"];
inline void Expr_Comprehension::clear_iter_var() {
  iter_var_.ClearToEmpty();
}
inline const std::string& Expr_Comprehension::iter_var() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.iter_var)
  return _internal_iter_var();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Expr_Comprehension::set_iter_var(ArgT0&& arg0, ArgT... args) {
 
 iter_var_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.Comprehension.iter_var)
}
inline std::string* Expr_Comprehension::mutable_iter_var() {
  std::string* _s = _internal_mutable_iter_var();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.iter_var)
  return _s;
}
inline const std::string& Expr_Comprehension::_internal_iter_var() const {
  return iter_var_.Get();
}
inline void Expr_Comprehension::_internal_set_iter_var(const std::string& value) {
  
  iter_var_.Set(value, GetArenaForAllocation());
}
inline std::string* Expr_Comprehension::_internal_mutable_iter_var() {
  
  return iter_var_.Mutable(GetArenaForAllocation());
}
inline std::string* Expr_Comprehension::release_iter_var() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.iter_var)
  return iter_var_.Release();
}
inline void Expr_Comprehension::set_allocated_iter_var(std::string* iter_var) {
  if (iter_var != nullptr) {
    
  } else {
    
  }
  iter_var_.SetAllocated(iter_var, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (iter_var_.IsDefault()) {
    iter_var_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.iter_var)
}

// .google.api.expr.v1alpha1.Expr iter_range = 2 [json_name = "iterRange"];
inline bool Expr_Comprehension::_internal_has_iter_range() const {
  return this != internal_default_instance() && iter_range_ != nullptr;
}
inline bool Expr_Comprehension::has_iter_range() const {
  return _internal_has_iter_range();
}
inline void Expr_Comprehension::clear_iter_range() {
  if (GetArenaForAllocation() == nullptr && iter_range_ != nullptr) {
    delete iter_range_;
  }
  iter_range_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_internal_iter_range() const {
  const ::google::api::expr::v1alpha1::Expr* p = iter_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(
      ::google::api::expr::v1alpha1::_Expr_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::iter_range() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.iter_range)
  return _internal_iter_range();
}
inline void Expr_Comprehension::unsafe_arena_set_allocated_iter_range(
    ::google::api::expr::v1alpha1::Expr* iter_range) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(iter_range_);
  }
  iter_range_ = iter_range;
  if (iter_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.iter_range)
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::release_iter_range() {
  
  ::google::api::expr::v1alpha1::Expr* temp = iter_range_;
  iter_range_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::unsafe_arena_release_iter_range() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.iter_range)
  
  ::google::api::expr::v1alpha1::Expr* temp = iter_range_;
  iter_range_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::_internal_mutable_iter_range() {
  
  if (iter_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
    iter_range_ = p;
  }
  return iter_range_;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::mutable_iter_range() {
  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_iter_range();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.iter_range)
  return _msg;
}
inline void Expr_Comprehension::set_allocated_iter_range(::google::api::expr::v1alpha1::Expr* iter_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete iter_range_;
  }
  if (iter_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(iter_range);
    if (message_arena != submessage_arena) {
      iter_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, iter_range, submessage_arena);
    }
    
  } else {
    
  }
  iter_range_ = iter_range;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.iter_range)
}

// string accu_var = 3 [json_name = "accuVar"];
inline void Expr_Comprehension::clear_accu_var() {
  accu_var_.ClearToEmpty();
}
inline const std::string& Expr_Comprehension::accu_var() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.accu_var)
  return _internal_accu_var();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Expr_Comprehension::set_accu_var(ArgT0&& arg0, ArgT... args) {
 
 accu_var_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.Comprehension.accu_var)
}
inline std::string* Expr_Comprehension::mutable_accu_var() {
  std::string* _s = _internal_mutable_accu_var();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.accu_var)
  return _s;
}
inline const std::string& Expr_Comprehension::_internal_accu_var() const {
  return accu_var_.Get();
}
inline void Expr_Comprehension::_internal_set_accu_var(const std::string& value) {
  
  accu_var_.Set(value, GetArenaForAllocation());
}
inline std::string* Expr_Comprehension::_internal_mutable_accu_var() {
  
  return accu_var_.Mutable(GetArenaForAllocation());
}
inline std::string* Expr_Comprehension::release_accu_var() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.accu_var)
  return accu_var_.Release();
}
inline void Expr_Comprehension::set_allocated_accu_var(std::string* accu_var) {
  if (accu_var != nullptr) {
    
  } else {
    
  }
  accu_var_.SetAllocated(accu_var, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (accu_var_.IsDefault()) {
    accu_var_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.accu_var)
}

// .google.api.expr.v1alpha1.Expr accu_init = 4 [json_name = "accuInit"];
inline bool Expr_Comprehension::_internal_has_accu_init() const {
  return this != internal_default_instance() && accu_init_ != nullptr;
}
inline bool Expr_Comprehension::has_accu_init() const {
  return _internal_has_accu_init();
}
inline void Expr_Comprehension::clear_accu_init() {
  if (GetArenaForAllocation() == nullptr && accu_init_ != nullptr) {
    delete accu_init_;
  }
  accu_init_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_internal_accu_init() const {
  const ::google::api::expr::v1alpha1::Expr* p = accu_init_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(
      ::google::api::expr::v1alpha1::_Expr_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::accu_init() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.accu_init)
  return _internal_accu_init();
}
inline void Expr_Comprehension::unsafe_arena_set_allocated_accu_init(
    ::google::api::expr::v1alpha1::Expr* accu_init) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accu_init_);
  }
  accu_init_ = accu_init;
  if (accu_init) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.accu_init)
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::release_accu_init() {
  
  ::google::api::expr::v1alpha1::Expr* temp = accu_init_;
  accu_init_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::unsafe_arena_release_accu_init() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.accu_init)
  
  ::google::api::expr::v1alpha1::Expr* temp = accu_init_;
  accu_init_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::_internal_mutable_accu_init() {
  
  if (accu_init_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
    accu_init_ = p;
  }
  return accu_init_;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::mutable_accu_init() {
  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_accu_init();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.accu_init)
  return _msg;
}
inline void Expr_Comprehension::set_allocated_accu_init(::google::api::expr::v1alpha1::Expr* accu_init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete accu_init_;
  }
  if (accu_init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(accu_init);
    if (message_arena != submessage_arena) {
      accu_init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accu_init, submessage_arena);
    }
    
  } else {
    
  }
  accu_init_ = accu_init;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.accu_init)
}

// .google.api.expr.v1alpha1.Expr loop_condition = 5 [json_name = "loopCondition"];
inline bool Expr_Comprehension::_internal_has_loop_condition() const {
  return this != internal_default_instance() && loop_condition_ != nullptr;
}
inline bool Expr_Comprehension::has_loop_condition() const {
  return _internal_has_loop_condition();
}
inline void Expr_Comprehension::clear_loop_condition() {
  if (GetArenaForAllocation() == nullptr && loop_condition_ != nullptr) {
    delete loop_condition_;
  }
  loop_condition_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_internal_loop_condition() const {
  const ::google::api::expr::v1alpha1::Expr* p = loop_condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(
      ::google::api::expr::v1alpha1::_Expr_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::loop_condition() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.loop_condition)
  return _internal_loop_condition();
}
inline void Expr_Comprehension::unsafe_arena_set_allocated_loop_condition(
    ::google::api::expr::v1alpha1::Expr* loop_condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loop_condition_);
  }
  loop_condition_ = loop_condition;
  if (loop_condition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.loop_condition)
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::release_loop_condition() {
  
  ::google::api::expr::v1alpha1::Expr* temp = loop_condition_;
  loop_condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::unsafe_arena_release_loop_condition() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.loop_condition)
  
  ::google::api::expr::v1alpha1::Expr* temp = loop_condition_;
  loop_condition_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::_internal_mutable_loop_condition() {
  
  if (loop_condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
    loop_condition_ = p;
  }
  return loop_condition_;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::mutable_loop_condition() {
  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_loop_condition();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.loop_condition)
  return _msg;
}
inline void Expr_Comprehension::set_allocated_loop_condition(::google::api::expr::v1alpha1::Expr* loop_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete loop_condition_;
  }
  if (loop_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(loop_condition);
    if (message_arena != submessage_arena) {
      loop_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loop_condition, submessage_arena);
    }
    
  } else {
    
  }
  loop_condition_ = loop_condition;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.loop_condition)
}

// .google.api.expr.v1alpha1.Expr loop_step = 6 [json_name = "loopStep"];
inline bool Expr_Comprehension::_internal_has_loop_step() const {
  return this != internal_default_instance() && loop_step_ != nullptr;
}
inline bool Expr_Comprehension::has_loop_step() const {
  return _internal_has_loop_step();
}
inline void Expr_Comprehension::clear_loop_step() {
  if (GetArenaForAllocation() == nullptr && loop_step_ != nullptr) {
    delete loop_step_;
  }
  loop_step_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_internal_loop_step() const {
  const ::google::api::expr::v1alpha1::Expr* p = loop_step_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(
      ::google::api::expr::v1alpha1::_Expr_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::loop_step() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.loop_step)
  return _internal_loop_step();
}
inline void Expr_Comprehension::unsafe_arena_set_allocated_loop_step(
    ::google::api::expr::v1alpha1::Expr* loop_step) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(loop_step_);
  }
  loop_step_ = loop_step;
  if (loop_step) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.loop_step)
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::release_loop_step() {
  
  ::google::api::expr::v1alpha1::Expr* temp = loop_step_;
  loop_step_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::unsafe_arena_release_loop_step() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.loop_step)
  
  ::google::api::expr::v1alpha1::Expr* temp = loop_step_;
  loop_step_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::_internal_mutable_loop_step() {
  
  if (loop_step_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
    loop_step_ = p;
  }
  return loop_step_;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::mutable_loop_step() {
  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_loop_step();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.loop_step)
  return _msg;
}
inline void Expr_Comprehension::set_allocated_loop_step(::google::api::expr::v1alpha1::Expr* loop_step) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete loop_step_;
  }
  if (loop_step) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(loop_step);
    if (message_arena != submessage_arena) {
      loop_step = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loop_step, submessage_arena);
    }
    
  } else {
    
  }
  loop_step_ = loop_step;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.loop_step)
}

// .google.api.expr.v1alpha1.Expr result = 7 [json_name = "result"];
inline bool Expr_Comprehension::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool Expr_Comprehension::has_result() const {
  return _internal_has_result();
}
inline void Expr_Comprehension::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::_internal_result() const {
  const ::google::api::expr::v1alpha1::Expr* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Expr&>(
      ::google::api::expr::v1alpha1::_Expr_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr& Expr_Comprehension::result() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.Comprehension.result)
  return _internal_result();
}
inline void Expr_Comprehension::unsafe_arena_set_allocated_result(
    ::google::api::expr::v1alpha1::Expr* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.result)
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::release_result() {
  
  ::google::api::expr::v1alpha1::Expr* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.Comprehension.result)
  
  ::google::api::expr::v1alpha1::Expr* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Expr>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::google::api::expr::v1alpha1::Expr* Expr_Comprehension::mutable_result() {
  ::google::api::expr::v1alpha1::Expr* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.Comprehension.result)
  return _msg;
}
inline void Expr_Comprehension::set_allocated_result(::google::api::expr::v1alpha1::Expr* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Expr.Comprehension.result)
}

// -------------------------------------------------------------------

// Expr

// int64 id = 2 [json_name = "id"];
inline void Expr::clear_id() {
  id_ = int64_t{0};
}
inline int64_t Expr::_internal_id() const {
  return id_;
}
inline int64_t Expr::id() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.id)
  return _internal_id();
}
inline void Expr::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void Expr::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Expr.id)
}

// .google.api.expr.v1alpha1.Constant const_expr = 3 [json_name = "constExpr"];
inline bool Expr::_internal_has_const_expr() const {
  return expr_kind_case() == kConstExpr;
}
inline bool Expr::has_const_expr() const {
  return _internal_has_const_expr();
}
inline void Expr::set_has_const_expr() {
  _oneof_case_[0] = kConstExpr;
}
inline void Expr::clear_const_expr() {
  if (_internal_has_const_expr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete expr_kind_.const_expr_;
    }
    clear_has_expr_kind();
  }
}
inline ::google::api::expr::v1alpha1::Constant* Expr::release_const_expr() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.const_expr)
  if (_internal_has_const_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Constant* temp = expr_kind_.const_expr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_kind_.const_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Constant& Expr::_internal_const_expr() const {
  return _internal_has_const_expr()
      ? *expr_kind_.const_expr_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Constant&>(::google::api::expr::v1alpha1::_Constant_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Constant& Expr::const_expr() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.const_expr)
  return _internal_const_expr();
}
inline ::google::api::expr::v1alpha1::Constant* Expr::unsafe_arena_release_const_expr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.const_expr)
  if (_internal_has_const_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Constant* temp = expr_kind_.const_expr_;
    expr_kind_.const_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_const_expr(::google::api::expr::v1alpha1::Constant* const_expr) {
  clear_expr_kind();
  if (const_expr) {
    set_has_const_expr();
    expr_kind_.const_expr_ = const_expr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.const_expr)
}
inline ::google::api::expr::v1alpha1::Constant* Expr::_internal_mutable_const_expr() {
  if (!_internal_has_const_expr()) {
    clear_expr_kind();
    set_has_const_expr();
    expr_kind_.const_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Constant >(GetArenaForAllocation());
  }
  return expr_kind_.const_expr_;
}
inline ::google::api::expr::v1alpha1::Constant* Expr::mutable_const_expr() {
  ::google::api::expr::v1alpha1::Constant* _msg = _internal_mutable_const_expr();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.const_expr)
  return _msg;
}

// .google.api.expr.v1alpha1.Expr.Ident ident_expr = 4 [json_name = "identExpr"];
inline bool Expr::_internal_has_ident_expr() const {
  return expr_kind_case() == kIdentExpr;
}
inline bool Expr::has_ident_expr() const {
  return _internal_has_ident_expr();
}
inline void Expr::set_has_ident_expr() {
  _oneof_case_[0] = kIdentExpr;
}
inline void Expr::clear_ident_expr() {
  if (_internal_has_ident_expr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete expr_kind_.ident_expr_;
    }
    clear_has_expr_kind();
  }
}
inline ::google::api::expr::v1alpha1::Expr_Ident* Expr::release_ident_expr() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.ident_expr)
  if (_internal_has_ident_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Expr_Ident* temp = expr_kind_.ident_expr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_kind_.ident_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Expr_Ident& Expr::_internal_ident_expr() const {
  return _internal_has_ident_expr()
      ? *expr_kind_.ident_expr_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Expr_Ident&>(::google::api::expr::v1alpha1::_Expr_Ident_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr_Ident& Expr::ident_expr() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.ident_expr)
  return _internal_ident_expr();
}
inline ::google::api::expr::v1alpha1::Expr_Ident* Expr::unsafe_arena_release_ident_expr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.ident_expr)
  if (_internal_has_ident_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Expr_Ident* temp = expr_kind_.ident_expr_;
    expr_kind_.ident_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_ident_expr(::google::api::expr::v1alpha1::Expr_Ident* ident_expr) {
  clear_expr_kind();
  if (ident_expr) {
    set_has_ident_expr();
    expr_kind_.ident_expr_ = ident_expr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.ident_expr)
}
inline ::google::api::expr::v1alpha1::Expr_Ident* Expr::_internal_mutable_ident_expr() {
  if (!_internal_has_ident_expr()) {
    clear_expr_kind();
    set_has_ident_expr();
    expr_kind_.ident_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr_Ident >(GetArenaForAllocation());
  }
  return expr_kind_.ident_expr_;
}
inline ::google::api::expr::v1alpha1::Expr_Ident* Expr::mutable_ident_expr() {
  ::google::api::expr::v1alpha1::Expr_Ident* _msg = _internal_mutable_ident_expr();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.ident_expr)
  return _msg;
}

// .google.api.expr.v1alpha1.Expr.Select select_expr = 5 [json_name = "selectExpr"];
inline bool Expr::_internal_has_select_expr() const {
  return expr_kind_case() == kSelectExpr;
}
inline bool Expr::has_select_expr() const {
  return _internal_has_select_expr();
}
inline void Expr::set_has_select_expr() {
  _oneof_case_[0] = kSelectExpr;
}
inline void Expr::clear_select_expr() {
  if (_internal_has_select_expr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete expr_kind_.select_expr_;
    }
    clear_has_expr_kind();
  }
}
inline ::google::api::expr::v1alpha1::Expr_Select* Expr::release_select_expr() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.select_expr)
  if (_internal_has_select_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Expr_Select* temp = expr_kind_.select_expr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_kind_.select_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Expr_Select& Expr::_internal_select_expr() const {
  return _internal_has_select_expr()
      ? *expr_kind_.select_expr_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Expr_Select&>(::google::api::expr::v1alpha1::_Expr_Select_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr_Select& Expr::select_expr() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.select_expr)
  return _internal_select_expr();
}
inline ::google::api::expr::v1alpha1::Expr_Select* Expr::unsafe_arena_release_select_expr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.select_expr)
  if (_internal_has_select_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Expr_Select* temp = expr_kind_.select_expr_;
    expr_kind_.select_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_select_expr(::google::api::expr::v1alpha1::Expr_Select* select_expr) {
  clear_expr_kind();
  if (select_expr) {
    set_has_select_expr();
    expr_kind_.select_expr_ = select_expr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.select_expr)
}
inline ::google::api::expr::v1alpha1::Expr_Select* Expr::_internal_mutable_select_expr() {
  if (!_internal_has_select_expr()) {
    clear_expr_kind();
    set_has_select_expr();
    expr_kind_.select_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr_Select >(GetArenaForAllocation());
  }
  return expr_kind_.select_expr_;
}
inline ::google::api::expr::v1alpha1::Expr_Select* Expr::mutable_select_expr() {
  ::google::api::expr::v1alpha1::Expr_Select* _msg = _internal_mutable_select_expr();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.select_expr)
  return _msg;
}

// .google.api.expr.v1alpha1.Expr.Call call_expr = 6 [json_name = "callExpr"];
inline bool Expr::_internal_has_call_expr() const {
  return expr_kind_case() == kCallExpr;
}
inline bool Expr::has_call_expr() const {
  return _internal_has_call_expr();
}
inline void Expr::set_has_call_expr() {
  _oneof_case_[0] = kCallExpr;
}
inline void Expr::clear_call_expr() {
  if (_internal_has_call_expr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete expr_kind_.call_expr_;
    }
    clear_has_expr_kind();
  }
}
inline ::google::api::expr::v1alpha1::Expr_Call* Expr::release_call_expr() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.call_expr)
  if (_internal_has_call_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Expr_Call* temp = expr_kind_.call_expr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_kind_.call_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Expr_Call& Expr::_internal_call_expr() const {
  return _internal_has_call_expr()
      ? *expr_kind_.call_expr_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Expr_Call&>(::google::api::expr::v1alpha1::_Expr_Call_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr_Call& Expr::call_expr() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.call_expr)
  return _internal_call_expr();
}
inline ::google::api::expr::v1alpha1::Expr_Call* Expr::unsafe_arena_release_call_expr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.call_expr)
  if (_internal_has_call_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Expr_Call* temp = expr_kind_.call_expr_;
    expr_kind_.call_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_call_expr(::google::api::expr::v1alpha1::Expr_Call* call_expr) {
  clear_expr_kind();
  if (call_expr) {
    set_has_call_expr();
    expr_kind_.call_expr_ = call_expr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.call_expr)
}
inline ::google::api::expr::v1alpha1::Expr_Call* Expr::_internal_mutable_call_expr() {
  if (!_internal_has_call_expr()) {
    clear_expr_kind();
    set_has_call_expr();
    expr_kind_.call_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr_Call >(GetArenaForAllocation());
  }
  return expr_kind_.call_expr_;
}
inline ::google::api::expr::v1alpha1::Expr_Call* Expr::mutable_call_expr() {
  ::google::api::expr::v1alpha1::Expr_Call* _msg = _internal_mutable_call_expr();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.call_expr)
  return _msg;
}

// .google.api.expr.v1alpha1.Expr.CreateList list_expr = 7 [json_name = "listExpr"];
inline bool Expr::_internal_has_list_expr() const {
  return expr_kind_case() == kListExpr;
}
inline bool Expr::has_list_expr() const {
  return _internal_has_list_expr();
}
inline void Expr::set_has_list_expr() {
  _oneof_case_[0] = kListExpr;
}
inline void Expr::clear_list_expr() {
  if (_internal_has_list_expr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete expr_kind_.list_expr_;
    }
    clear_has_expr_kind();
  }
}
inline ::google::api::expr::v1alpha1::Expr_CreateList* Expr::release_list_expr() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.list_expr)
  if (_internal_has_list_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Expr_CreateList* temp = expr_kind_.list_expr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_kind_.list_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Expr_CreateList& Expr::_internal_list_expr() const {
  return _internal_has_list_expr()
      ? *expr_kind_.list_expr_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Expr_CreateList&>(::google::api::expr::v1alpha1::_Expr_CreateList_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr_CreateList& Expr::list_expr() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.list_expr)
  return _internal_list_expr();
}
inline ::google::api::expr::v1alpha1::Expr_CreateList* Expr::unsafe_arena_release_list_expr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.list_expr)
  if (_internal_has_list_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Expr_CreateList* temp = expr_kind_.list_expr_;
    expr_kind_.list_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_list_expr(::google::api::expr::v1alpha1::Expr_CreateList* list_expr) {
  clear_expr_kind();
  if (list_expr) {
    set_has_list_expr();
    expr_kind_.list_expr_ = list_expr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.list_expr)
}
inline ::google::api::expr::v1alpha1::Expr_CreateList* Expr::_internal_mutable_list_expr() {
  if (!_internal_has_list_expr()) {
    clear_expr_kind();
    set_has_list_expr();
    expr_kind_.list_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr_CreateList >(GetArenaForAllocation());
  }
  return expr_kind_.list_expr_;
}
inline ::google::api::expr::v1alpha1::Expr_CreateList* Expr::mutable_list_expr() {
  ::google::api::expr::v1alpha1::Expr_CreateList* _msg = _internal_mutable_list_expr();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.list_expr)
  return _msg;
}

// .google.api.expr.v1alpha1.Expr.CreateStruct struct_expr = 8 [json_name = "structExpr"];
inline bool Expr::_internal_has_struct_expr() const {
  return expr_kind_case() == kStructExpr;
}
inline bool Expr::has_struct_expr() const {
  return _internal_has_struct_expr();
}
inline void Expr::set_has_struct_expr() {
  _oneof_case_[0] = kStructExpr;
}
inline void Expr::clear_struct_expr() {
  if (_internal_has_struct_expr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete expr_kind_.struct_expr_;
    }
    clear_has_expr_kind();
  }
}
inline ::google::api::expr::v1alpha1::Expr_CreateStruct* Expr::release_struct_expr() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.struct_expr)
  if (_internal_has_struct_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Expr_CreateStruct* temp = expr_kind_.struct_expr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_kind_.struct_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Expr_CreateStruct& Expr::_internal_struct_expr() const {
  return _internal_has_struct_expr()
      ? *expr_kind_.struct_expr_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Expr_CreateStruct&>(::google::api::expr::v1alpha1::_Expr_CreateStruct_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr_CreateStruct& Expr::struct_expr() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.struct_expr)
  return _internal_struct_expr();
}
inline ::google::api::expr::v1alpha1::Expr_CreateStruct* Expr::unsafe_arena_release_struct_expr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.struct_expr)
  if (_internal_has_struct_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Expr_CreateStruct* temp = expr_kind_.struct_expr_;
    expr_kind_.struct_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_struct_expr(::google::api::expr::v1alpha1::Expr_CreateStruct* struct_expr) {
  clear_expr_kind();
  if (struct_expr) {
    set_has_struct_expr();
    expr_kind_.struct_expr_ = struct_expr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.struct_expr)
}
inline ::google::api::expr::v1alpha1::Expr_CreateStruct* Expr::_internal_mutable_struct_expr() {
  if (!_internal_has_struct_expr()) {
    clear_expr_kind();
    set_has_struct_expr();
    expr_kind_.struct_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr_CreateStruct >(GetArenaForAllocation());
  }
  return expr_kind_.struct_expr_;
}
inline ::google::api::expr::v1alpha1::Expr_CreateStruct* Expr::mutable_struct_expr() {
  ::google::api::expr::v1alpha1::Expr_CreateStruct* _msg = _internal_mutable_struct_expr();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.struct_expr)
  return _msg;
}

// .google.api.expr.v1alpha1.Expr.Comprehension comprehension_expr = 9 [json_name = "comprehensionExpr"];
inline bool Expr::_internal_has_comprehension_expr() const {
  return expr_kind_case() == kComprehensionExpr;
}
inline bool Expr::has_comprehension_expr() const {
  return _internal_has_comprehension_expr();
}
inline void Expr::set_has_comprehension_expr() {
  _oneof_case_[0] = kComprehensionExpr;
}
inline void Expr::clear_comprehension_expr() {
  if (_internal_has_comprehension_expr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete expr_kind_.comprehension_expr_;
    }
    clear_has_expr_kind();
  }
}
inline ::google::api::expr::v1alpha1::Expr_Comprehension* Expr::release_comprehension_expr() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Expr.comprehension_expr)
  if (_internal_has_comprehension_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Expr_Comprehension* temp = expr_kind_.comprehension_expr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_kind_.comprehension_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::Expr_Comprehension& Expr::_internal_comprehension_expr() const {
  return _internal_has_comprehension_expr()
      ? *expr_kind_.comprehension_expr_
      : reinterpret_cast< ::google::api::expr::v1alpha1::Expr_Comprehension&>(::google::api::expr::v1alpha1::_Expr_Comprehension_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Expr_Comprehension& Expr::comprehension_expr() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Expr.comprehension_expr)
  return _internal_comprehension_expr();
}
inline ::google::api::expr::v1alpha1::Expr_Comprehension* Expr::unsafe_arena_release_comprehension_expr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Expr.comprehension_expr)
  if (_internal_has_comprehension_expr()) {
    clear_has_expr_kind();
    ::google::api::expr::v1alpha1::Expr_Comprehension* temp = expr_kind_.comprehension_expr_;
    expr_kind_.comprehension_expr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Expr::unsafe_arena_set_allocated_comprehension_expr(::google::api::expr::v1alpha1::Expr_Comprehension* comprehension_expr) {
  clear_expr_kind();
  if (comprehension_expr) {
    set_has_comprehension_expr();
    expr_kind_.comprehension_expr_ = comprehension_expr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Expr.comprehension_expr)
}
inline ::google::api::expr::v1alpha1::Expr_Comprehension* Expr::_internal_mutable_comprehension_expr() {
  if (!_internal_has_comprehension_expr()) {
    clear_expr_kind();
    set_has_comprehension_expr();
    expr_kind_.comprehension_expr_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::Expr_Comprehension >(GetArenaForAllocation());
  }
  return expr_kind_.comprehension_expr_;
}
inline ::google::api::expr::v1alpha1::Expr_Comprehension* Expr::mutable_comprehension_expr() {
  ::google::api::expr::v1alpha1::Expr_Comprehension* _msg = _internal_mutable_comprehension_expr();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Expr.comprehension_expr)
  return _msg;
}

inline bool Expr::has_expr_kind() const {
  return expr_kind_case() != EXPR_KIND_NOT_SET;
}
inline void Expr::clear_has_expr_kind() {
  _oneof_case_[0] = EXPR_KIND_NOT_SET;
}
inline Expr::ExprKindCase Expr::expr_kind_case() const {
  return Expr::ExprKindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Constant

// .google.protobuf.NullValue null_value = 1 [json_name = "nullValue"];
inline bool Constant::_internal_has_null_value() const {
  return constant_kind_case() == kNullValue;
}
inline bool Constant::has_null_value() const {
  return _internal_has_null_value();
}
inline void Constant::set_has_null_value() {
  _oneof_case_[0] = kNullValue;
}
inline void Constant::clear_null_value() {
  if (_internal_has_null_value()) {
    constant_kind_.null_value_ = 0;
    clear_has_constant_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue Constant::_internal_null_value() const {
  if (_internal_has_null_value()) {
    return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(constant_kind_.null_value_);
  }
  return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(0);
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue Constant::null_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.null_value)
  return _internal_null_value();
}
inline void Constant::_internal_set_null_value(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  if (!_internal_has_null_value()) {
    clear_constant_kind();
    set_has_null_value();
  }
  constant_kind_.null_value_ = value;
}
inline void Constant::set_null_value(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  _internal_set_null_value(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.null_value)
}

// bool bool_value = 2 [json_name = "boolValue"];
inline bool Constant::_internal_has_bool_value() const {
  return constant_kind_case() == kBoolValue;
}
inline bool Constant::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void Constant::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void Constant::clear_bool_value() {
  if (_internal_has_bool_value()) {
    constant_kind_.bool_value_ = false;
    clear_has_constant_kind();
  }
}
inline bool Constant::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return constant_kind_.bool_value_;
  }
  return false;
}
inline void Constant::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_constant_kind();
    set_has_bool_value();
  }
  constant_kind_.bool_value_ = value;
}
inline bool Constant::bool_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.bool_value)
  return _internal_bool_value();
}
inline void Constant::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.bool_value)
}

// int64 int64_value = 3 [json_name = "int64Value"];
inline bool Constant::_internal_has_int64_value() const {
  return constant_kind_case() == kInt64Value;
}
inline bool Constant::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void Constant::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void Constant::clear_int64_value() {
  if (_internal_has_int64_value()) {
    constant_kind_.int64_value_ = int64_t{0};
    clear_has_constant_kind();
  }
}
inline int64_t Constant::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return constant_kind_.int64_value_;
  }
  return int64_t{0};
}
inline void Constant::_internal_set_int64_value(int64_t value) {
  if (!_internal_has_int64_value()) {
    clear_constant_kind();
    set_has_int64_value();
  }
  constant_kind_.int64_value_ = value;
}
inline int64_t Constant::int64_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.int64_value)
  return _internal_int64_value();
}
inline void Constant::set_int64_value(int64_t value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.int64_value)
}

// uint64 uint64_value = 4 [json_name = "uint64Value"];
inline bool Constant::_internal_has_uint64_value() const {
  return constant_kind_case() == kUint64Value;
}
inline bool Constant::has_uint64_value() const {
  return _internal_has_uint64_value();
}
inline void Constant::set_has_uint64_value() {
  _oneof_case_[0] = kUint64Value;
}
inline void Constant::clear_uint64_value() {
  if (_internal_has_uint64_value()) {
    constant_kind_.uint64_value_ = uint64_t{0u};
    clear_has_constant_kind();
  }
}
inline uint64_t Constant::_internal_uint64_value() const {
  if (_internal_has_uint64_value()) {
    return constant_kind_.uint64_value_;
  }
  return uint64_t{0u};
}
inline void Constant::_internal_set_uint64_value(uint64_t value) {
  if (!_internal_has_uint64_value()) {
    clear_constant_kind();
    set_has_uint64_value();
  }
  constant_kind_.uint64_value_ = value;
}
inline uint64_t Constant::uint64_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.uint64_value)
  return _internal_uint64_value();
}
inline void Constant::set_uint64_value(uint64_t value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.uint64_value)
}

// double double_value = 5 [json_name = "doubleValue"];
inline bool Constant::_internal_has_double_value() const {
  return constant_kind_case() == kDoubleValue;
}
inline bool Constant::has_double_value() const {
  return _internal_has_double_value();
}
inline void Constant::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void Constant::clear_double_value() {
  if (_internal_has_double_value()) {
    constant_kind_.double_value_ = 0;
    clear_has_constant_kind();
  }
}
inline double Constant::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return constant_kind_.double_value_;
  }
  return 0;
}
inline void Constant::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_constant_kind();
    set_has_double_value();
  }
  constant_kind_.double_value_ = value;
}
inline double Constant::double_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.double_value)
  return _internal_double_value();
}
inline void Constant::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.double_value)
}

// string string_value = 6 [json_name = "stringValue"];
inline bool Constant::_internal_has_string_value() const {
  return constant_kind_case() == kStringValue;
}
inline bool Constant::has_string_value() const {
  return _internal_has_string_value();
}
inline void Constant::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Constant::clear_string_value() {
  if (_internal_has_string_value()) {
    constant_kind_.string_value_.Destroy();
    clear_has_constant_kind();
  }
}
inline const std::string& Constant::string_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Constant::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_constant_kind();
    set_has_string_value();
    constant_kind_.string_value_.InitDefault();
  }
  constant_kind_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.string_value)
}
inline std::string* Constant::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Constant.string_value)
  return _s;
}
inline const std::string& Constant::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return constant_kind_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Constant::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_constant_kind();
    set_has_string_value();
    constant_kind_.string_value_.InitDefault();
  }
  constant_kind_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Constant::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_constant_kind();
    set_has_string_value();
    constant_kind_.string_value_.InitDefault();
  }
  return constant_kind_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Constant::release_string_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Constant.string_value)
  if (_internal_has_string_value()) {
    clear_has_constant_kind();
    return constant_kind_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Constant::set_allocated_string_value(std::string* string_value) {
  if (has_constant_kind()) {
    clear_constant_kind();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    constant_kind_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Constant.string_value)
}

// bytes bytes_value = 7 [json_name = "bytesValue"];
inline bool Constant::_internal_has_bytes_value() const {
  return constant_kind_case() == kBytesValue;
}
inline bool Constant::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void Constant::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void Constant::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    constant_kind_.bytes_value_.Destroy();
    clear_has_constant_kind();
  }
}
inline const std::string& Constant::bytes_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.bytes_value)
  return _internal_bytes_value();
}
template <typename ArgT0, typename... ArgT>
inline void Constant::set_bytes_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_value()) {
    clear_constant_kind();
    set_has_bytes_value();
    constant_kind_.bytes_value_.InitDefault();
  }
  constant_kind_.bytes_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Constant.bytes_value)
}
inline std::string* Constant::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Constant.bytes_value)
  return _s;
}
inline const std::string& Constant::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return constant_kind_.bytes_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Constant::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_constant_kind();
    set_has_bytes_value();
    constant_kind_.bytes_value_.InitDefault();
  }
  constant_kind_.bytes_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Constant::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_constant_kind();
    set_has_bytes_value();
    constant_kind_.bytes_value_.InitDefault();
  }
  return constant_kind_.bytes_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Constant::release_bytes_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Constant.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_constant_kind();
    return constant_kind_.bytes_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Constant::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_constant_kind()) {
    clear_constant_kind();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    constant_kind_.bytes_value_.InitAllocated(bytes_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Constant.bytes_value)
}

// .google.protobuf.Duration duration_value = 8 [json_name = "durationValue", deprecated = true];
inline bool Constant::_internal_has_duration_value() const {
  return constant_kind_case() == kDurationValue;
}
inline bool Constant::has_duration_value() const {
  return _internal_has_duration_value();
}
inline void Constant::set_has_duration_value() {
  _oneof_case_[0] = kDurationValue;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Constant::release_duration_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Constant.duration_value)
  if (_internal_has_duration_value()) {
    clear_has_constant_kind();
    ::PROTOBUF_NAMESPACE_ID::Duration* temp = constant_kind_.duration_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constant_kind_.duration_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Constant::_internal_duration_value() const {
  return _internal_has_duration_value()
      ? *constant_kind_.duration_value_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Duration&>(::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Constant::duration_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.duration_value)
  return _internal_duration_value();
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Constant::unsafe_arena_release_duration_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Constant.duration_value)
  if (_internal_has_duration_value()) {
    clear_has_constant_kind();
    ::PROTOBUF_NAMESPACE_ID::Duration* temp = constant_kind_.duration_value_;
    constant_kind_.duration_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Constant::unsafe_arena_set_allocated_duration_value(::PROTOBUF_NAMESPACE_ID::Duration* duration_value) {
  clear_constant_kind();
  if (duration_value) {
    set_has_duration_value();
    constant_kind_.duration_value_ = duration_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Constant.duration_value)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Constant::_internal_mutable_duration_value() {
  if (!_internal_has_duration_value()) {
    clear_constant_kind();
    set_has_duration_value();
    constant_kind_.duration_value_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Duration >(GetArenaForAllocation());
  }
  return constant_kind_.duration_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Constant::mutable_duration_value() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Constant.duration_value)
  return _msg;
}

// .google.protobuf.Timestamp timestamp_value = 9 [json_name = "timestampValue", deprecated = true];
inline bool Constant::_internal_has_timestamp_value() const {
  return constant_kind_case() == kTimestampValue;
}
inline bool Constant::has_timestamp_value() const {
  return _internal_has_timestamp_value();
}
inline void Constant::set_has_timestamp_value() {
  _oneof_case_[0] = kTimestampValue;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Constant::release_timestamp_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Constant.timestamp_value)
  if (_internal_has_timestamp_value()) {
    clear_has_constant_kind();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = constant_kind_.timestamp_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    constant_kind_.timestamp_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Constant::_internal_timestamp_value() const {
  return _internal_has_timestamp_value()
      ? *constant_kind_.timestamp_value_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Timestamp&>(::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Constant::timestamp_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Constant.timestamp_value)
  return _internal_timestamp_value();
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Constant::unsafe_arena_release_timestamp_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Constant.timestamp_value)
  if (_internal_has_timestamp_value()) {
    clear_has_constant_kind();
    ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = constant_kind_.timestamp_value_;
    constant_kind_.timestamp_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Constant::unsafe_arena_set_allocated_timestamp_value(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_value) {
  clear_constant_kind();
  if (timestamp_value) {
    set_has_timestamp_value();
    constant_kind_.timestamp_value_ = timestamp_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Constant.timestamp_value)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Constant::_internal_mutable_timestamp_value() {
  if (!_internal_has_timestamp_value()) {
    clear_constant_kind();
    set_has_timestamp_value();
    constant_kind_.timestamp_value_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Timestamp >(GetArenaForAllocation());
  }
  return constant_kind_.timestamp_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Constant::mutable_timestamp_value() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Constant.timestamp_value)
  return _msg;
}

inline bool Constant::has_constant_kind() const {
  return constant_kind_case() != CONSTANT_KIND_NOT_SET;
}
inline void Constant::clear_has_constant_kind() {
  _oneof_case_[0] = CONSTANT_KIND_NOT_SET;
}
inline Constant::ConstantKindCase Constant::constant_kind_case() const {
  return Constant::ConstantKindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SourceInfo

// string syntax_version = 1 [json_name = "syntaxVersion"];
inline void SourceInfo::clear_syntax_version() {
  syntax_version_.ClearToEmpty();
}
inline const std::string& SourceInfo::syntax_version() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourceInfo.syntax_version)
  return _internal_syntax_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SourceInfo::set_syntax_version(ArgT0&& arg0, ArgT... args) {
 
 syntax_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourceInfo.syntax_version)
}
inline std::string* SourceInfo::mutable_syntax_version() {
  std::string* _s = _internal_mutable_syntax_version();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.SourceInfo.syntax_version)
  return _s;
}
inline const std::string& SourceInfo::_internal_syntax_version() const {
  return syntax_version_.Get();
}
inline void SourceInfo::_internal_set_syntax_version(const std::string& value) {
  
  syntax_version_.Set(value, GetArenaForAllocation());
}
inline std::string* SourceInfo::_internal_mutable_syntax_version() {
  
  return syntax_version_.Mutable(GetArenaForAllocation());
}
inline std::string* SourceInfo::release_syntax_version() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.SourceInfo.syntax_version)
  return syntax_version_.Release();
}
inline void SourceInfo::set_allocated_syntax_version(std::string* syntax_version) {
  if (syntax_version != nullptr) {
    
  } else {
    
  }
  syntax_version_.SetAllocated(syntax_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (syntax_version_.IsDefault()) {
    syntax_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.SourceInfo.syntax_version)
}

// string location = 2 [json_name = "location"];
inline void SourceInfo::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& SourceInfo::location() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourceInfo.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SourceInfo::set_location(ArgT0&& arg0, ArgT... args) {
 
 location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourceInfo.location)
}
inline std::string* SourceInfo::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.SourceInfo.location)
  return _s;
}
inline const std::string& SourceInfo::_internal_location() const {
  return location_.Get();
}
inline void SourceInfo::_internal_set_location(const std::string& value) {
  
  location_.Set(value, GetArenaForAllocation());
}
inline std::string* SourceInfo::_internal_mutable_location() {
  
  return location_.Mutable(GetArenaForAllocation());
}
inline std::string* SourceInfo::release_location() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.SourceInfo.location)
  return location_.Release();
}
inline void SourceInfo::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (location_.IsDefault()) {
    location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.SourceInfo.location)
}

// repeated int32 line_offsets = 3 [json_name = "lineOffsets"];
inline int SourceInfo::_internal_line_offsets_size() const {
  return line_offsets_.size();
}
inline int SourceInfo::line_offsets_size() const {
  return _internal_line_offsets_size();
}
inline void SourceInfo::clear_line_offsets() {
  line_offsets_.Clear();
}
inline int32_t SourceInfo::_internal_line_offsets(int index) const {
  return line_offsets_.Get(index);
}
inline int32_t SourceInfo::line_offsets(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourceInfo.line_offsets)
  return _internal_line_offsets(index);
}
inline void SourceInfo::set_line_offsets(int index, int32_t value) {
  line_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourceInfo.line_offsets)
}
inline void SourceInfo::_internal_add_line_offsets(int32_t value) {
  line_offsets_.Add(value);
}
inline void SourceInfo::add_line_offsets(int32_t value) {
  _internal_add_line_offsets(value);
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.SourceInfo.line_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SourceInfo::_internal_line_offsets() const {
  return line_offsets_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SourceInfo::line_offsets() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.SourceInfo.line_offsets)
  return _internal_line_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SourceInfo::_internal_mutable_line_offsets() {
  return &line_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SourceInfo::mutable_line_offsets() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.SourceInfo.line_offsets)
  return _internal_mutable_line_offsets();
}

// map<int64, int32> positions = 4 [json_name = "positions"];
inline int SourceInfo::_internal_positions_size() const {
  return positions_.size();
}
inline int SourceInfo::positions_size() const {
  return _internal_positions_size();
}
inline void SourceInfo::clear_positions() {
  positions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int32_t >&
SourceInfo::_internal_positions() const {
  return positions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int32_t >&
SourceInfo::positions() const {
  // @@protoc_insertion_point(field_map:google.api.expr.v1alpha1.SourceInfo.positions)
  return _internal_positions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int32_t >*
SourceInfo::_internal_mutable_positions() {
  return positions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, int32_t >*
SourceInfo::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_map:google.api.expr.v1alpha1.SourceInfo.positions)
  return _internal_mutable_positions();
}

// map<int64, .google.api.expr.v1alpha1.Expr> macro_calls = 5 [json_name = "macroCalls"];
inline int SourceInfo::_internal_macro_calls_size() const {
  return macro_calls_.size();
}
inline int SourceInfo::macro_calls_size() const {
  return _internal_macro_calls_size();
}
inline void SourceInfo::clear_macro_calls() {
  macro_calls_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Expr >&
SourceInfo::_internal_macro_calls() const {
  return macro_calls_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Expr >&
SourceInfo::macro_calls() const {
  // @@protoc_insertion_point(field_map:google.api.expr.v1alpha1.SourceInfo.macro_calls)
  return _internal_macro_calls();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Expr >*
SourceInfo::_internal_mutable_macro_calls() {
  return macro_calls_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Expr >*
SourceInfo::mutable_macro_calls() {
  // @@protoc_insertion_point(field_mutable_map:google.api.expr.v1alpha1.SourceInfo.macro_calls)
  return _internal_mutable_macro_calls();
}

// -------------------------------------------------------------------

// SourcePosition

// string location = 1 [json_name = "location"];
inline void SourcePosition::clear_location() {
  location_.ClearToEmpty();
}
inline const std::string& SourcePosition::location() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourcePosition.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SourcePosition::set_location(ArgT0&& arg0, ArgT... args) {
 
 location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourcePosition.location)
}
inline std::string* SourcePosition::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.SourcePosition.location)
  return _s;
}
inline const std::string& SourcePosition::_internal_location() const {
  return location_.Get();
}
inline void SourcePosition::_internal_set_location(const std::string& value) {
  
  location_.Set(value, GetArenaForAllocation());
}
inline std::string* SourcePosition::_internal_mutable_location() {
  
  return location_.Mutable(GetArenaForAllocation());
}
inline std::string* SourcePosition::release_location() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.SourcePosition.location)
  return location_.Release();
}
inline void SourcePosition::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (location_.IsDefault()) {
    location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.SourcePosition.location)
}

// int32 offset = 2 [json_name = "offset"];
inline void SourcePosition::clear_offset() {
  offset_ = 0;
}
inline int32_t SourcePosition::_internal_offset() const {
  return offset_;
}
inline int32_t SourcePosition::offset() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourcePosition.offset)
  return _internal_offset();
}
inline void SourcePosition::_internal_set_offset(int32_t value) {
  
  offset_ = value;
}
inline void SourcePosition::set_offset(int32_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourcePosition.offset)
}

// int32 line = 3 [json_name = "line"];
inline void SourcePosition::clear_line() {
  line_ = 0;
}
inline int32_t SourcePosition::_internal_line() const {
  return line_;
}
inline int32_t SourcePosition::line() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourcePosition.line)
  return _internal_line();
}
inline void SourcePosition::_internal_set_line(int32_t value) {
  
  line_ = value;
}
inline void SourcePosition::set_line(int32_t value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourcePosition.line)
}

// int32 column = 4 [json_name = "column"];
inline void SourcePosition::clear_column() {
  column_ = 0;
}
inline int32_t SourcePosition::_internal_column() const {
  return column_;
}
inline int32_t SourcePosition::column() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.SourcePosition.column)
  return _internal_column();
}
inline void SourcePosition::_internal_set_column(int32_t value) {
  
  column_ = value;
}
inline void SourcePosition::set_column(int32_t value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.SourcePosition.column)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace expr
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto
