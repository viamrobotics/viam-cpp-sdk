// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/expr/v1alpha1/checked.proto

#include "google/api/expr/v1alpha1/checked.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace google {
namespace api {
namespace expr {
namespace v1alpha1 {
PROTOBUF_CONSTEXPR CheckedExpr_ReferenceMapEntry_DoNotUse::CheckedExpr_ReferenceMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CheckedExpr_ReferenceMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal _CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CheckedExpr_TypeMapEntry_DoNotUse::CheckedExpr_TypeMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CheckedExpr_TypeMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal _CheckedExpr_TypeMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CheckedExpr::CheckedExpr(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reference_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.type_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.expr_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.expr_)*/nullptr
  , /*decltype(_impl_.source_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CheckedExprDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CheckedExprDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CheckedExprDefaultTypeInternal() {}
  union {
    CheckedExpr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CheckedExprDefaultTypeInternal _CheckedExpr_default_instance_;
PROTOBUF_CONSTEXPR Type_ListType::Type_ListType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.elem_type_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_ListTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_ListTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_ListTypeDefaultTypeInternal() {}
  union {
    Type_ListType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_ListTypeDefaultTypeInternal _Type_ListType_default_instance_;
PROTOBUF_CONSTEXPR Type_MapType::Type_MapType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_type_)*/nullptr
  , /*decltype(_impl_.value_type_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_MapTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_MapTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_MapTypeDefaultTypeInternal() {}
  union {
    Type_MapType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_MapTypeDefaultTypeInternal _Type_MapType_default_instance_;
PROTOBUF_CONSTEXPR Type_FunctionType::Type_FunctionType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.arg_types_)*/{}
  , /*decltype(_impl_.result_type_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_FunctionTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_FunctionTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_FunctionTypeDefaultTypeInternal() {}
  union {
    Type_FunctionType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_FunctionTypeDefaultTypeInternal _Type_FunctionType_default_instance_;
PROTOBUF_CONSTEXPR Type_AbstractType::Type_AbstractType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parameter_types_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Type_AbstractTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Type_AbstractTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Type_AbstractTypeDefaultTypeInternal() {}
  union {
    Type_AbstractType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Type_AbstractTypeDefaultTypeInternal _Type_AbstractType_default_instance_;
PROTOBUF_CONSTEXPR Type::Type(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeDefaultTypeInternal() {}
  union {
    Type _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeDefaultTypeInternal _Type_default_instance_;
PROTOBUF_CONSTEXPR Decl_IdentDecl::Decl_IdentDecl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.doc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Decl_IdentDeclDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Decl_IdentDeclDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Decl_IdentDeclDefaultTypeInternal() {}
  union {
    Decl_IdentDecl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Decl_IdentDeclDefaultTypeInternal _Decl_IdentDecl_default_instance_;
PROTOBUF_CONSTEXPR Decl_FunctionDecl_Overload::Decl_FunctionDecl_Overload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_.type_params_)*/{}
  , /*decltype(_impl_.overload_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_type_)*/nullptr
  , /*decltype(_impl_.is_instance_function_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Decl_FunctionDecl_OverloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Decl_FunctionDecl_OverloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Decl_FunctionDecl_OverloadDefaultTypeInternal() {}
  union {
    Decl_FunctionDecl_Overload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Decl_FunctionDecl_OverloadDefaultTypeInternal _Decl_FunctionDecl_Overload_default_instance_;
PROTOBUF_CONSTEXPR Decl_FunctionDecl::Decl_FunctionDecl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.overloads_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Decl_FunctionDeclDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Decl_FunctionDeclDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Decl_FunctionDeclDefaultTypeInternal() {}
  union {
    Decl_FunctionDecl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Decl_FunctionDeclDefaultTypeInternal _Decl_FunctionDecl_default_instance_;
PROTOBUF_CONSTEXPR Decl::Decl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.decl_kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DeclDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeclDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeclDefaultTypeInternal() {}
  union {
    Decl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeclDefaultTypeInternal _Decl_default_instance_;
PROTOBUF_CONSTEXPR Reference::Reference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.overload_id_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceDefaultTypeInternal() {}
  union {
    Reference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceDefaultTypeInternal _Reference_default_instance_;
}  // namespace v1alpha1
}  // namespace expr
}  // namespace api
}  // namespace google
static ::_pb::Metadata file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto = nullptr;

const uint32_t TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _impl_.reference_map_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _impl_.type_map_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _impl_.source_info_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _impl_.expr_version_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _impl_.expr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_ListType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_ListType, _impl_.elem_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_MapType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_MapType, _impl_.key_type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_MapType, _impl_.value_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_FunctionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_FunctionType, _impl_.result_type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_FunctionType, _impl_.arg_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_AbstractType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_AbstractType, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_AbstractType, _impl_.parameter_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type, _impl_.type_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, _impl_.doc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_.overload_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_.type_params_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_.result_type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_.is_instance_function_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _impl_.doc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl, _impl_.overloads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, _impl_.name_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, _impl_.decl_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, _impl_.overload_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse)},
  { 20, -1, -1, sizeof(::google::api::expr::v1alpha1::CheckedExpr)},
  { 31, -1, -1, sizeof(::google::api::expr::v1alpha1::Type_ListType)},
  { 38, -1, -1, sizeof(::google::api::expr::v1alpha1::Type_MapType)},
  { 46, -1, -1, sizeof(::google::api::expr::v1alpha1::Type_FunctionType)},
  { 54, -1, -1, sizeof(::google::api::expr::v1alpha1::Type_AbstractType)},
  { 62, -1, -1, sizeof(::google::api::expr::v1alpha1::Type)},
  { 82, -1, -1, sizeof(::google::api::expr::v1alpha1::Decl_IdentDecl)},
  { 91, -1, -1, sizeof(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload)},
  { 103, -1, -1, sizeof(::google::api::expr::v1alpha1::Decl_FunctionDecl)},
  { 110, -1, -1, sizeof(::google::api::expr::v1alpha1::Decl)},
  { 120, -1, -1, sizeof(::google::api::expr::v1alpha1::Reference)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::google::api::expr::v1alpha1::_CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_._instance,
  &::google::api::expr::v1alpha1::_CheckedExpr_TypeMapEntry_DoNotUse_default_instance_._instance,
  &::google::api::expr::v1alpha1::_CheckedExpr_default_instance_._instance,
  &::google::api::expr::v1alpha1::_Type_ListType_default_instance_._instance,
  &::google::api::expr::v1alpha1::_Type_MapType_default_instance_._instance,
  &::google::api::expr::v1alpha1::_Type_FunctionType_default_instance_._instance,
  &::google::api::expr::v1alpha1::_Type_AbstractType_default_instance_._instance,
  &::google::api::expr::v1alpha1::_Type_default_instance_._instance,
  &::google::api::expr::v1alpha1::_Decl_IdentDecl_default_instance_._instance,
  &::google::api::expr::v1alpha1::_Decl_FunctionDecl_Overload_default_instance_._instance,
  &::google::api::expr::v1alpha1::_Decl_FunctionDecl_default_instance_._instance,
  &::google::api::expr::v1alpha1::_Decl_default_instance_._instance,
  &::google::api::expr::v1alpha1::_Reference_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&google/api/expr/v1alpha1/checked.proto"
  "\022\030google.api.expr.v1alpha1\032%google/api/e"
  "xpr/v1alpha1/syntax.proto\032\033google/protob"
  "uf/empty.proto\032\034google/protobuf/struct.p"
  "roto\"\232\004\n\013CheckedExpr\022\\\n\rreference_map\030\002 "
  "\003(\01327.google.api.expr.v1alpha1.CheckedEx"
  "pr.ReferenceMapEntryR\014referenceMap\022M\n\010ty"
  "pe_map\030\003 \003(\01322.google.api.expr.v1alpha1."
  "CheckedExpr.TypeMapEntryR\007typeMap\022E\n\013sou"
  "rce_info\030\005 \001(\0132$.google.api.expr.v1alpha"
  "1.SourceInfoR\nsourceInfo\022!\n\014expr_version"
  "\030\006 \001(\tR\013exprVersion\0222\n\004expr\030\004 \001(\0132\036.goog"
  "le.api.expr.v1alpha1.ExprR\004expr\032d\n\021Refer"
  "enceMapEntry\022\020\n\003key\030\001 \001(\003R\003key\0229\n\005value\030"
  "\002 \001(\0132#.google.api.expr.v1alpha1.Referen"
  "ceR\005value:\0028\001\032Z\n\014TypeMapEntry\022\020\n\003key\030\001 \001"
  "(\003R\003key\0224\n\005value\030\002 \001(\0132\036.google.api.expr"
  ".v1alpha1.TypeR\005value:\0028\001\"\310\013\n\004Type\022*\n\003dy"
  "n\030\001 \001(\0132\026.google.protobuf.EmptyH\000R\003dyn\0220"
  "\n\004null\030\002 \001(\0162\032.google.protobuf.NullValue"
  "H\000R\004null\022L\n\tprimitive\030\003 \001(\0162,.google.api"
  ".expr.v1alpha1.Type.PrimitiveTypeH\000R\tpri"
  "mitive\022H\n\007wrapper\030\004 \001(\0162,.google.api.exp"
  "r.v1alpha1.Type.PrimitiveTypeH\000R\007wrapper"
  "\022M\n\nwell_known\030\005 \001(\0162,.google.api.expr.v"
  "1alpha1.Type.WellKnownTypeH\000R\twellKnown\022"
  "F\n\tlist_type\030\006 \001(\0132\'.google.api.expr.v1a"
  "lpha1.Type.ListTypeH\000R\010listType\022C\n\010map_t"
  "ype\030\007 \001(\0132&.google.api.expr.v1alpha1.Typ"
  "e.MapTypeH\000R\007mapType\022I\n\010function\030\010 \001(\0132+"
  ".google.api.expr.v1alpha1.Type.FunctionT"
  "ypeH\000R\010function\022#\n\014message_type\030\t \001(\tH\000R"
  "\013messageType\022\037\n\ntype_param\030\n \001(\tH\000R\ttype"
  "Param\0224\n\004type\030\013 \001(\0132\036.google.api.expr.v1"
  "alpha1.TypeH\000R\004type\022.\n\005error\030\014 \001(\0132\026.goo"
  "gle.protobuf.EmptyH\000R\005error\022R\n\rabstract_"
  "type\030\016 \001(\0132+.google.api.expr.v1alpha1.Ty"
  "pe.AbstractTypeH\000R\014abstractType\032G\n\010ListT"
  "ype\022;\n\telem_type\030\001 \001(\0132\036.google.api.expr"
  ".v1alpha1.TypeR\010elemType\032\203\001\n\007MapType\0229\n\010"
  "key_type\030\001 \001(\0132\036.google.api.expr.v1alpha"
  "1.TypeR\007keyType\022=\n\nvalue_type\030\002 \001(\0132\036.go"
  "ogle.api.expr.v1alpha1.TypeR\tvalueType\032\214"
  "\001\n\014FunctionType\022\?\n\013result_type\030\001 \001(\0132\036.g"
  "oogle.api.expr.v1alpha1.TypeR\nresultType"
  "\022;\n\targ_types\030\002 \003(\0132\036.google.api.expr.v1"
  "alpha1.TypeR\010argTypes\032k\n\014AbstractType\022\022\n"
  "\004name\030\001 \001(\tR\004name\022G\n\017parameter_types\030\002 \003"
  "(\0132\036.google.api.expr.v1alpha1.TypeR\016para"
  "meterTypes\"s\n\rPrimitiveType\022\036\n\032PRIMITIVE"
  "_TYPE_UNSPECIFIED\020\000\022\010\n\004BOOL\020\001\022\t\n\005INT64\020\002"
  "\022\n\n\006UINT64\020\003\022\n\n\006DOUBLE\020\004\022\n\n\006STRING\020\005\022\t\n\005"
  "BYTES\020\006\"V\n\rWellKnownType\022\037\n\033WELL_KNOWN_T"
  "YPE_UNSPECIFIED\020\000\022\007\n\003ANY\020\001\022\r\n\tTIMESTAMP\020"
  "\002\022\014\n\010DURATION\020\003B\013\n\ttype_kind\"\263\005\n\004Decl\022\022\n"
  "\004name\030\001 \001(\tR\004name\022@\n\005ident\030\002 \001(\0132(.googl"
  "e.api.expr.v1alpha1.Decl.IdentDeclH\000R\005id"
  "ent\022I\n\010function\030\003 \001(\0132+.google.api.expr."
  "v1alpha1.Decl.FunctionDeclH\000R\010function\032\213"
  "\001\n\tIdentDecl\0222\n\004type\030\001 \001(\0132\036.google.api."
  "expr.v1alpha1.TypeR\004type\0228\n\005value\030\002 \001(\0132"
  "\".google.api.expr.v1alpha1.ConstantR\005val"
  "ue\022\020\n\003doc\030\003 \001(\tR\003doc\032\356\002\n\014FunctionDecl\022R\n"
  "\toverloads\030\001 \003(\01324.google.api.expr.v1alp"
  "ha1.Decl.FunctionDecl.OverloadR\toverload"
  "s\032\211\002\n\010Overload\022\037\n\013overload_id\030\001 \001(\tR\nove"
  "rloadId\0226\n\006params\030\002 \003(\0132\036.google.api.exp"
  "r.v1alpha1.TypeR\006params\022\037\n\013type_params\030\003"
  " \003(\tR\ntypeParams\022\?\n\013result_type\030\004 \001(\0132\036."
  "google.api.expr.v1alpha1.TypeR\nresultTyp"
  "e\0220\n\024is_instance_function\030\005 \001(\010R\022isInsta"
  "nceFunction\022\020\n\003doc\030\006 \001(\tR\003docB\013\n\tdecl_ki"
  "nd\"z\n\tReference\022\022\n\004name\030\001 \001(\tR\004name\022\037\n\013o"
  "verload_id\030\003 \003(\tR\noverloadId\0228\n\005value\030\004 "
  "\001(\0132\".google.api.expr.v1alpha1.ConstantR"
  "\005valueBl\n\034com.google.api.expr.v1alpha1B\t"
  "DeclProtoP\001Z<google.golang.org/genproto/"
  "googleapis/api/expr/v1alpha1;expr\370\001\001b\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto = {
    false, false, 3124, descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto,
    "google/api/expr/v1alpha1/checked.proto",
    &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once, descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_deps, 3, 13,
    schemas, file_default_instances, TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::offsets,
    file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto, file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto,
    file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter() {
  return &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto);
namespace google {
namespace api {
namespace expr {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_PrimitiveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[0];
}
bool Type_PrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Type_PrimitiveType Type::PRIMITIVE_TYPE_UNSPECIFIED;
constexpr Type_PrimitiveType Type::BOOL;
constexpr Type_PrimitiveType Type::INT64;
constexpr Type_PrimitiveType Type::UINT64;
constexpr Type_PrimitiveType Type::DOUBLE;
constexpr Type_PrimitiveType Type::STRING;
constexpr Type_PrimitiveType Type::BYTES;
constexpr Type_PrimitiveType Type::PrimitiveType_MIN;
constexpr Type_PrimitiveType Type::PrimitiveType_MAX;
constexpr int Type::PrimitiveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_WellKnownType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[1];
}
bool Type_WellKnownType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Type_WellKnownType Type::WELL_KNOWN_TYPE_UNSPECIFIED;
constexpr Type_WellKnownType Type::ANY;
constexpr Type_WellKnownType Type::TIMESTAMP;
constexpr Type_WellKnownType Type::DURATION;
constexpr Type_WellKnownType Type::WellKnownType_MIN;
constexpr Type_WellKnownType Type::WellKnownType_MAX;
constexpr int Type::WellKnownType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

CheckedExpr_ReferenceMapEntry_DoNotUse::CheckedExpr_ReferenceMapEntry_DoNotUse() {}
CheckedExpr_ReferenceMapEntry_DoNotUse::CheckedExpr_ReferenceMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CheckedExpr_ReferenceMapEntry_DoNotUse::MergeFrom(const CheckedExpr_ReferenceMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CheckedExpr_ReferenceMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[0]);
}

// ===================================================================

CheckedExpr_TypeMapEntry_DoNotUse::CheckedExpr_TypeMapEntry_DoNotUse() {}
CheckedExpr_TypeMapEntry_DoNotUse::CheckedExpr_TypeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CheckedExpr_TypeMapEntry_DoNotUse::MergeFrom(const CheckedExpr_TypeMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CheckedExpr_TypeMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[1]);
}

// ===================================================================

class CheckedExpr::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::SourceInfo& source_info(const CheckedExpr* msg);
  static const ::google::api::expr::v1alpha1::Expr& expr(const CheckedExpr* msg);
};

const ::google::api::expr::v1alpha1::SourceInfo&
CheckedExpr::_Internal::source_info(const CheckedExpr* msg) {
  return *msg->_impl_.source_info_;
}
const ::google::api::expr::v1alpha1::Expr&
CheckedExpr::_Internal::expr(const CheckedExpr* msg) {
  return *msg->_impl_.expr_;
}
void CheckedExpr::clear_source_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.source_info_ != nullptr) {
    delete _impl_.source_info_;
  }
  _impl_.source_info_ = nullptr;
}
void CheckedExpr::clear_expr() {
  if (GetArenaForAllocation() == nullptr && _impl_.expr_ != nullptr) {
    delete _impl_.expr_;
  }
  _impl_.expr_ = nullptr;
}
CheckedExpr::CheckedExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CheckedExpr::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.CheckedExpr)
}
CheckedExpr::CheckedExpr(const CheckedExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CheckedExpr* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.reference_map_)*/{}
    , /*decltype(_impl_.type_map_)*/{}
    , decltype(_impl_.expr_version_){}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.source_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.reference_map_.MergeFrom(from._impl_.reference_map_);
  _this->_impl_.type_map_.MergeFrom(from._impl_.type_map_);
  _impl_.expr_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expr_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_expr_version().empty()) {
    _this->_impl_.expr_version_.Set(from._internal_expr_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_expr()) {
    _this->_impl_.expr_ = new ::google::api::expr::v1alpha1::Expr(*from._impl_.expr_);
  }
  if (from._internal_has_source_info()) {
    _this->_impl_.source_info_ = new ::google::api::expr::v1alpha1::SourceInfo(*from._impl_.source_info_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.CheckedExpr)
}

inline void CheckedExpr::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.reference_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.type_map_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.expr_version_){}
    , decltype(_impl_.expr_){nullptr}
    , decltype(_impl_.source_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.expr_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.expr_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CheckedExpr::~CheckedExpr() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.CheckedExpr)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CheckedExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reference_map_.Destruct();
  _impl_.reference_map_.~MapField();
  _impl_.type_map_.Destruct();
  _impl_.type_map_.~MapField();
  _impl_.expr_version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.expr_;
  if (this != internal_default_instance()) delete _impl_.source_info_;
}

void CheckedExpr::ArenaDtor(void* object) {
  CheckedExpr* _this = reinterpret_cast< CheckedExpr* >(object);
  _this->_impl_.reference_map_.Destruct();
  _this->_impl_.type_map_.Destruct();
}
void CheckedExpr::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CheckedExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.CheckedExpr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reference_map_.Clear();
  _impl_.type_map_.Clear();
  _impl_.expr_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.expr_ != nullptr) {
    delete _impl_.expr_;
  }
  _impl_.expr_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.source_info_ != nullptr) {
    delete _impl_.source_info_;
  }
  _impl_.source_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckedExpr::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2 [json_name = "referenceMap"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.reference_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, .google.api.expr.v1alpha1.Type> type_map = 3 [json_name = "typeMap"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.type_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Expr expr = 4 [json_name = "expr"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.SourceInfo source_info = 5 [json_name = "sourceInfo"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string expr_version = 6 [json_name = "exprVersion"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_expr_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1alpha1.CheckedExpr.expr_version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CheckedExpr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.CheckedExpr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2 [json_name = "referenceMap"];
  if (!this->_internal_reference_map().empty()) {
    using MapType = ::_pb::Map<int64_t, ::google::api::expr::v1alpha1::Reference>;
    using WireHelper = CheckedExpr_ReferenceMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_reference_map();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int64, .google.api.expr.v1alpha1.Type> type_map = 3 [json_name = "typeMap"];
  if (!this->_internal_type_map().empty()) {
    using MapType = ::_pb::Map<int64_t, ::google::api::expr::v1alpha1::Type>;
    using WireHelper = CheckedExpr_TypeMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_type_map();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
      }
    }
  }

  // .google.api.expr.v1alpha1.Expr expr = 4 [json_name = "expr"];
  if (this->_internal_has_expr()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::expr(this),
        _Internal::expr(this).GetCachedSize(), target, stream);
  }

  // .google.api.expr.v1alpha1.SourceInfo source_info = 5 [json_name = "sourceInfo"];
  if (this->_internal_has_source_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::source_info(this),
        _Internal::source_info(this).GetCachedSize(), target, stream);
  }

  // string expr_version = 6 [json_name = "exprVersion"];
  if (!this->_internal_expr_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_expr_version().data(), static_cast<int>(this->_internal_expr_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.CheckedExpr.expr_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_expr_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.CheckedExpr)
  return target;
}

size_t CheckedExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.CheckedExpr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2 [json_name = "referenceMap"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reference_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Reference >::const_iterator
      it = this->_internal_reference_map().begin();
      it != this->_internal_reference_map().end(); ++it) {
    total_size += CheckedExpr_ReferenceMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, .google.api.expr.v1alpha1.Type> type_map = 3 [json_name = "typeMap"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_type_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::google::api::expr::v1alpha1::Type >::const_iterator
      it = this->_internal_type_map().begin();
      it != this->_internal_type_map().end(); ++it) {
    total_size += CheckedExpr_TypeMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string expr_version = 6 [json_name = "exprVersion"];
  if (!this->_internal_expr_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_expr_version());
  }

  // .google.api.expr.v1alpha1.Expr expr = 4 [json_name = "expr"];
  if (this->_internal_has_expr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expr_);
  }

  // .google.api.expr.v1alpha1.SourceInfo source_info = 5 [json_name = "sourceInfo"];
  if (this->_internal_has_source_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CheckedExpr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CheckedExpr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CheckedExpr::GetClassData() const { return &_class_data_; }


void CheckedExpr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CheckedExpr*>(&to_msg);
  auto& from = static_cast<const CheckedExpr&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.CheckedExpr)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.reference_map_.MergeFrom(from._impl_.reference_map_);
  _this->_impl_.type_map_.MergeFrom(from._impl_.type_map_);
  if (!from._internal_expr_version().empty()) {
    _this->_internal_set_expr_version(from._internal_expr_version());
  }
  if (from._internal_has_expr()) {
    _this->_internal_mutable_expr()->::google::api::expr::v1alpha1::Expr::MergeFrom(
        from._internal_expr());
  }
  if (from._internal_has_source_info()) {
    _this->_internal_mutable_source_info()->::google::api::expr::v1alpha1::SourceInfo::MergeFrom(
        from._internal_source_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CheckedExpr::CopyFrom(const CheckedExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.CheckedExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckedExpr::IsInitialized() const {
  return true;
}

void CheckedExpr::InternalSwap(CheckedExpr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.reference_map_.InternalSwap(&other->_impl_.reference_map_);
  _impl_.type_map_.InternalSwap(&other->_impl_.type_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.expr_version_, lhs_arena,
      &other->_impl_.expr_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_.source_info_)
      + sizeof(CheckedExpr::_impl_.source_info_)
      - PROTOBUF_FIELD_OFFSET(CheckedExpr, _impl_.expr_)>(
          reinterpret_cast<char*>(&_impl_.expr_),
          reinterpret_cast<char*>(&other->_impl_.expr_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckedExpr::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[2]);
}

// ===================================================================

class Type_ListType::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Type& elem_type(const Type_ListType* msg);
};

const ::google::api::expr::v1alpha1::Type&
Type_ListType::_Internal::elem_type(const Type_ListType* msg) {
  return *msg->_impl_.elem_type_;
}
Type_ListType::Type_ListType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type.ListType)
}
Type_ListType::Type_ListType(const Type_ListType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Type_ListType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.elem_type_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_elem_type()) {
    _this->_impl_.elem_type_ = new ::google::api::expr::v1alpha1::Type(*from._impl_.elem_type_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type.ListType)
}

inline void Type_ListType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.elem_type_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_ListType::~Type_ListType() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type.ListType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_ListType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.elem_type_;
}

void Type_ListType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_ListType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type.ListType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.elem_type_ != nullptr) {
    delete _impl_.elem_type_;
  }
  _impl_.elem_type_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_ListType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.api.expr.v1alpha1.Type elem_type = 1 [json_name = "elemType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_elem_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Type_ListType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type.ListType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.expr.v1alpha1.Type elem_type = 1 [json_name = "elemType"];
  if (this->_internal_has_elem_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::elem_type(this),
        _Internal::elem_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type.ListType)
  return target;
}

size_t Type_ListType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type.ListType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.api.expr.v1alpha1.Type elem_type = 1 [json_name = "elemType"];
  if (this->_internal_has_elem_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.elem_type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_ListType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_ListType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_ListType::GetClassData() const { return &_class_data_; }


void Type_ListType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_ListType*>(&to_msg);
  auto& from = static_cast<const Type_ListType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type.ListType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_elem_type()) {
    _this->_internal_mutable_elem_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
        from._internal_elem_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_ListType::CopyFrom(const Type_ListType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type.ListType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_ListType::IsInitialized() const {
  return true;
}

void Type_ListType::InternalSwap(Type_ListType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.elem_type_, other->_impl_.elem_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_ListType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[3]);
}

// ===================================================================

class Type_MapType::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Type& key_type(const Type_MapType* msg);
  static const ::google::api::expr::v1alpha1::Type& value_type(const Type_MapType* msg);
};

const ::google::api::expr::v1alpha1::Type&
Type_MapType::_Internal::key_type(const Type_MapType* msg) {
  return *msg->_impl_.key_type_;
}
const ::google::api::expr::v1alpha1::Type&
Type_MapType::_Internal::value_type(const Type_MapType* msg) {
  return *msg->_impl_.value_type_;
}
Type_MapType::Type_MapType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type.MapType)
}
Type_MapType::Type_MapType(const Type_MapType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Type_MapType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_type_){nullptr}
    , decltype(_impl_.value_type_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key_type()) {
    _this->_impl_.key_type_ = new ::google::api::expr::v1alpha1::Type(*from._impl_.key_type_);
  }
  if (from._internal_has_value_type()) {
    _this->_impl_.value_type_ = new ::google::api::expr::v1alpha1::Type(*from._impl_.value_type_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type.MapType)
}

inline void Type_MapType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_type_){nullptr}
    , decltype(_impl_.value_type_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_MapType::~Type_MapType() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type.MapType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_MapType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_type_;
  if (this != internal_default_instance()) delete _impl_.value_type_;
}

void Type_MapType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_MapType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type.MapType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.key_type_ != nullptr) {
    delete _impl_.key_type_;
  }
  _impl_.key_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_type_ != nullptr) {
    delete _impl_.value_type_;
  }
  _impl_.value_type_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_MapType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.api.expr.v1alpha1.Type key_type = 1 [json_name = "keyType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type value_type = 2 [json_name = "valueType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Type_MapType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type.MapType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.expr.v1alpha1.Type key_type = 1 [json_name = "keyType"];
  if (this->_internal_has_key_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key_type(this),
        _Internal::key_type(this).GetCachedSize(), target, stream);
  }

  // .google.api.expr.v1alpha1.Type value_type = 2 [json_name = "valueType"];
  if (this->_internal_has_value_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value_type(this),
        _Internal::value_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type.MapType)
  return target;
}

size_t Type_MapType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type.MapType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.api.expr.v1alpha1.Type key_type = 1 [json_name = "keyType"];
  if (this->_internal_has_key_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_type_);
  }

  // .google.api.expr.v1alpha1.Type value_type = 2 [json_name = "valueType"];
  if (this->_internal_has_value_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_MapType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_MapType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_MapType::GetClassData() const { return &_class_data_; }


void Type_MapType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_MapType*>(&to_msg);
  auto& from = static_cast<const Type_MapType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type.MapType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_key_type()) {
    _this->_internal_mutable_key_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
        from._internal_key_type());
  }
  if (from._internal_has_value_type()) {
    _this->_internal_mutable_value_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
        from._internal_value_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_MapType::CopyFrom(const Type_MapType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type.MapType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_MapType::IsInitialized() const {
  return true;
}

void Type_MapType::InternalSwap(Type_MapType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Type_MapType, _impl_.value_type_)
      + sizeof(Type_MapType::_impl_.value_type_)
      - PROTOBUF_FIELD_OFFSET(Type_MapType, _impl_.key_type_)>(
          reinterpret_cast<char*>(&_impl_.key_type_),
          reinterpret_cast<char*>(&other->_impl_.key_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_MapType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[4]);
}

// ===================================================================

class Type_FunctionType::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Type& result_type(const Type_FunctionType* msg);
};

const ::google::api::expr::v1alpha1::Type&
Type_FunctionType::_Internal::result_type(const Type_FunctionType* msg) {
  return *msg->_impl_.result_type_;
}
Type_FunctionType::Type_FunctionType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type.FunctionType)
}
Type_FunctionType::Type_FunctionType(const Type_FunctionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Type_FunctionType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.arg_types_){from._impl_.arg_types_}
    , decltype(_impl_.result_type_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result_type()) {
    _this->_impl_.result_type_ = new ::google::api::expr::v1alpha1::Type(*from._impl_.result_type_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type.FunctionType)
}

inline void Type_FunctionType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.arg_types_){arena}
    , decltype(_impl_.result_type_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Type_FunctionType::~Type_FunctionType() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type.FunctionType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_FunctionType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.arg_types_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.result_type_;
}

void Type_FunctionType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_FunctionType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type.FunctionType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.arg_types_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.result_type_ != nullptr) {
    delete _impl_.result_type_;
  }
  _impl_.result_type_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_FunctionType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.api.expr.v1alpha1.Type result_type = 1 [json_name = "resultType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.expr.v1alpha1.Type arg_types = 2 [json_name = "argTypes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arg_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Type_FunctionType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type.FunctionType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.expr.v1alpha1.Type result_type = 1 [json_name = "resultType"];
  if (this->_internal_has_result_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result_type(this),
        _Internal::result_type(this).GetCachedSize(), target, stream);
  }

  // repeated .google.api.expr.v1alpha1.Type arg_types = 2 [json_name = "argTypes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_arg_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_arg_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type.FunctionType)
  return target;
}

size_t Type_FunctionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type.FunctionType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.expr.v1alpha1.Type arg_types = 2 [json_name = "argTypes"];
  total_size += 1UL * this->_internal_arg_types_size();
  for (const auto& msg : this->_impl_.arg_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.api.expr.v1alpha1.Type result_type = 1 [json_name = "resultType"];
  if (this->_internal_has_result_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_type_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_FunctionType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_FunctionType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_FunctionType::GetClassData() const { return &_class_data_; }


void Type_FunctionType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_FunctionType*>(&to_msg);
  auto& from = static_cast<const Type_FunctionType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type.FunctionType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.arg_types_.MergeFrom(from._impl_.arg_types_);
  if (from._internal_has_result_type()) {
    _this->_internal_mutable_result_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
        from._internal_result_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_FunctionType::CopyFrom(const Type_FunctionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type.FunctionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FunctionType::IsInitialized() const {
  return true;
}

void Type_FunctionType::InternalSwap(Type_FunctionType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.arg_types_.InternalSwap(&other->_impl_.arg_types_);
  swap(_impl_.result_type_, other->_impl_.result_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FunctionType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[5]);
}

// ===================================================================

class Type_AbstractType::_Internal {
 public:
};

Type_AbstractType::Type_AbstractType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type.AbstractType)
}
Type_AbstractType::Type_AbstractType(const Type_AbstractType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Type_AbstractType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.parameter_types_){from._impl_.parameter_types_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type.AbstractType)
}

inline void Type_AbstractType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.parameter_types_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Type_AbstractType::~Type_AbstractType() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type.AbstractType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type_AbstractType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameter_types_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Type_AbstractType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type_AbstractType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type.AbstractType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameter_types_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type_AbstractType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1alpha1.Type.AbstractType.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.expr.v1alpha1.Type parameter_types = 2 [json_name = "parameterTypes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameter_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Type_AbstractType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type.AbstractType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Type.AbstractType.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .google.api.expr.v1alpha1.Type parameter_types = 2 [json_name = "parameterTypes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parameter_types_size()); i < n; i++) {
    const auto& repfield = this->_internal_parameter_types(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type.AbstractType)
  return target;
}

size_t Type_AbstractType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type.AbstractType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.expr.v1alpha1.Type parameter_types = 2 [json_name = "parameterTypes"];
  total_size += 1UL * this->_internal_parameter_types_size();
  for (const auto& msg : this->_impl_.parameter_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type_AbstractType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type_AbstractType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type_AbstractType::GetClassData() const { return &_class_data_; }


void Type_AbstractType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type_AbstractType*>(&to_msg);
  auto& from = static_cast<const Type_AbstractType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type.AbstractType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameter_types_.MergeFrom(from._impl_.parameter_types_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type_AbstractType::CopyFrom(const Type_AbstractType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type.AbstractType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_AbstractType::IsInitialized() const {
  return true;
}

void Type_AbstractType::InternalSwap(Type_AbstractType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parameter_types_.InternalSwap(&other->_impl_.parameter_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_AbstractType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[6]);
}

// ===================================================================

class Type::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Empty& dyn(const Type* msg);
  static const ::google::api::expr::v1alpha1::Type_ListType& list_type(const Type* msg);
  static const ::google::api::expr::v1alpha1::Type_MapType& map_type(const Type* msg);
  static const ::google::api::expr::v1alpha1::Type_FunctionType& function(const Type* msg);
  static const ::google::api::expr::v1alpha1::Type& type(const Type* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& error(const Type* msg);
  static const ::google::api::expr::v1alpha1::Type_AbstractType& abstract_type(const Type* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Empty&
Type::_Internal::dyn(const Type* msg) {
  return *msg->_impl_.type_kind_.dyn_;
}
const ::google::api::expr::v1alpha1::Type_ListType&
Type::_Internal::list_type(const Type* msg) {
  return *msg->_impl_.type_kind_.list_type_;
}
const ::google::api::expr::v1alpha1::Type_MapType&
Type::_Internal::map_type(const Type* msg) {
  return *msg->_impl_.type_kind_.map_type_;
}
const ::google::api::expr::v1alpha1::Type_FunctionType&
Type::_Internal::function(const Type* msg) {
  return *msg->_impl_.type_kind_.function_;
}
const ::google::api::expr::v1alpha1::Type&
Type::_Internal::type(const Type* msg) {
  return *msg->_impl_.type_kind_.type_;
}
const ::PROTOBUF_NAMESPACE_ID::Empty&
Type::_Internal::error(const Type* msg) {
  return *msg->_impl_.type_kind_.error_;
}
const ::google::api::expr::v1alpha1::Type_AbstractType&
Type::_Internal::abstract_type(const Type* msg) {
  return *msg->_impl_.type_kind_.abstract_type_;
}
void Type::set_allocated_dyn(::PROTOBUF_NAMESPACE_ID::Empty* dyn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_kind();
  if (dyn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dyn));
    if (message_arena != submessage_arena) {
      dyn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dyn, submessage_arena);
    }
    set_has_dyn();
    _impl_.type_kind_.dyn_ = dyn;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.dyn)
}
void Type::clear_dyn() {
  if (_internal_has_dyn()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_kind_.dyn_;
    }
    clear_has_type_kind();
  }
}
void Type::set_allocated_list_type(::google::api::expr::v1alpha1::Type_ListType* list_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_kind();
  if (list_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list_type);
    if (message_arena != submessage_arena) {
      list_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_type, submessage_arena);
    }
    set_has_list_type();
    _impl_.type_kind_.list_type_ = list_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.list_type)
}
void Type::set_allocated_map_type(::google::api::expr::v1alpha1::Type_MapType* map_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_kind();
  if (map_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_type);
    if (message_arena != submessage_arena) {
      map_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_type, submessage_arena);
    }
    set_has_map_type();
    _impl_.type_kind_.map_type_ = map_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.map_type)
}
void Type::set_allocated_function(::google::api::expr::v1alpha1::Type_FunctionType* function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_kind();
  if (function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(function);
    if (message_arena != submessage_arena) {
      function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    set_has_function();
    _impl_.type_kind_.function_ = function;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.function)
}
void Type::set_allocated_type(::google::api::expr::v1alpha1::Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_kind();
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
    _impl_.type_kind_.type_ = type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.type)
}
void Type::set_allocated_error(::PROTOBUF_NAMESPACE_ID::Empty* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_kind();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error));
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    _impl_.type_kind_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.error)
}
void Type::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.type_kind_.error_;
    }
    clear_has_type_kind();
  }
}
void Type::set_allocated_abstract_type(::google::api::expr::v1alpha1::Type_AbstractType* abstract_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type_kind();
  if (abstract_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(abstract_type);
    if (message_arena != submessage_arena) {
      abstract_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abstract_type, submessage_arena);
    }
    set_has_abstract_type();
    _impl_.type_kind_.abstract_type_ = abstract_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.abstract_type)
}
Type::Type(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type)
}
Type::Type(const Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Type* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type_kind();
  switch (from.type_kind_case()) {
    case kDyn: {
      _this->_internal_mutable_dyn()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_dyn());
      break;
    }
    case kNull: {
      _this->_internal_set_null(from._internal_null());
      break;
    }
    case kPrimitive: {
      _this->_internal_set_primitive(from._internal_primitive());
      break;
    }
    case kWrapper: {
      _this->_internal_set_wrapper(from._internal_wrapper());
      break;
    }
    case kWellKnown: {
      _this->_internal_set_well_known(from._internal_well_known());
      break;
    }
    case kListType: {
      _this->_internal_mutable_list_type()->::google::api::expr::v1alpha1::Type_ListType::MergeFrom(
          from._internal_list_type());
      break;
    }
    case kMapType: {
      _this->_internal_mutable_map_type()->::google::api::expr::v1alpha1::Type_MapType::MergeFrom(
          from._internal_map_type());
      break;
    }
    case kFunction: {
      _this->_internal_mutable_function()->::google::api::expr::v1alpha1::Type_FunctionType::MergeFrom(
          from._internal_function());
      break;
    }
    case kMessageType: {
      _this->_internal_set_message_type(from._internal_message_type());
      break;
    }
    case kTypeParam: {
      _this->_internal_set_type_param(from._internal_type_param());
      break;
    }
    case kType: {
      _this->_internal_mutable_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
          from._internal_type());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_error());
      break;
    }
    case kAbstractType: {
      _this->_internal_mutable_abstract_type()->::google::api::expr::v1alpha1::Type_AbstractType::MergeFrom(
          from._internal_abstract_type());
      break;
    }
    case TYPE_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type)
}

inline void Type::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type_kind();
}

Type::~Type() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Type::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type_kind()) {
    clear_type_kind();
  }
}

void Type::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Type::clear_type_kind() {
// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1alpha1.Type)
  switch (type_kind_case()) {
    case kDyn: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_kind_.dyn_;
      }
      break;
    }
    case kNull: {
      // No need to clear
      break;
    }
    case kPrimitive: {
      // No need to clear
      break;
    }
    case kWrapper: {
      // No need to clear
      break;
    }
    case kWellKnown: {
      // No need to clear
      break;
    }
    case kListType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_kind_.list_type_;
      }
      break;
    }
    case kMapType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_kind_.map_type_;
      }
      break;
    }
    case kFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_kind_.function_;
      }
      break;
    }
    case kMessageType: {
      _impl_.type_kind_.message_type_.Destroy();
      break;
    }
    case kTypeParam: {
      _impl_.type_kind_.type_param_.Destroy();
      break;
    }
    case kType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_kind_.type_;
      }
      break;
    }
    case kError: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_kind_.error_;
      }
      break;
    }
    case kAbstractType: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_kind_.abstract_type_;
      }
      break;
    }
    case TYPE_KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_KIND_NOT_SET;
}


void Type::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Type::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Empty dyn = 1 [json_name = "dyn"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dyn(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.NullValue null = 2 [json_name = "null"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_null(static_cast<::PROTOBUF_NAMESPACE_ID::NullValue>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3 [json_name = "primitive"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_primitive(static_cast<::google::api::expr::v1alpha1::Type_PrimitiveType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4 [json_name = "wrapper"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_wrapper(static_cast<::google::api::expr::v1alpha1::Type_PrimitiveType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5 [json_name = "wellKnown"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_well_known(static_cast<::google::api::expr::v1alpha1::Type_WellKnownType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.ListType list_type = 6 [json_name = "listType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.MapType map_type = 7 [json_name = "mapType"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.FunctionType function = 8 [json_name = "function"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message_type = 9 [json_name = "messageType"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_message_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1alpha1.Type.message_type"));
        } else
          goto handle_unusual;
        continue;
      // string type_param = 10 [json_name = "typeParam"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_type_param();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1alpha1.Type.type_param"));
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type type = 11 [json_name = "type"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Empty error = 12 [json_name = "error"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14 [json_name = "abstractType"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_abstract_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Type::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Empty dyn = 1 [json_name = "dyn"];
  if (_internal_has_dyn()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dyn(this),
        _Internal::dyn(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.NullValue null = 2 [json_name = "null"];
  if (_internal_has_null()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_null(), target);
  }

  // .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3 [json_name = "primitive"];
  if (_internal_has_primitive()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_primitive(), target);
  }

  // .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4 [json_name = "wrapper"];
  if (_internal_has_wrapper()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_wrapper(), target);
  }

  // .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5 [json_name = "wellKnown"];
  if (_internal_has_well_known()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_well_known(), target);
  }

  // .google.api.expr.v1alpha1.Type.ListType list_type = 6 [json_name = "listType"];
  if (_internal_has_list_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::list_type(this),
        _Internal::list_type(this).GetCachedSize(), target, stream);
  }

  // .google.api.expr.v1alpha1.Type.MapType map_type = 7 [json_name = "mapType"];
  if (_internal_has_map_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::map_type(this),
        _Internal::map_type(this).GetCachedSize(), target, stream);
  }

  // .google.api.expr.v1alpha1.Type.FunctionType function = 8 [json_name = "function"];
  if (_internal_has_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::function(this),
        _Internal::function(this).GetCachedSize(), target, stream);
  }

  // string message_type = 9 [json_name = "messageType"];
  if (_internal_has_message_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Type.message_type");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_message_type(), target);
  }

  // string type_param = 10 [json_name = "typeParam"];
  if (_internal_has_type_param()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_param().data(), static_cast<int>(this->_internal_type_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Type.type_param");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_type_param(), target);
  }

  // .google.api.expr.v1alpha1.Type type = 11 [json_name = "type"];
  if (_internal_has_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Empty error = 12 [json_name = "error"];
  if (_internal_has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  // .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14 [json_name = "abstractType"];
  if (_internal_has_abstract_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::abstract_type(this),
        _Internal::abstract_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type)
  return target;
}

size_t Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_kind_case()) {
    // .google.protobuf.Empty dyn = 1 [json_name = "dyn"];
    case kDyn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_kind_.dyn_);
      break;
    }
    // .google.protobuf.NullValue null = 2 [json_name = "null"];
    case kNull: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_null());
      break;
    }
    // .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3 [json_name = "primitive"];
    case kPrimitive: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_primitive());
      break;
    }
    // .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4 [json_name = "wrapper"];
    case kWrapper: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_wrapper());
      break;
    }
    // .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5 [json_name = "wellKnown"];
    case kWellKnown: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_well_known());
      break;
    }
    // .google.api.expr.v1alpha1.Type.ListType list_type = 6 [json_name = "listType"];
    case kListType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_kind_.list_type_);
      break;
    }
    // .google.api.expr.v1alpha1.Type.MapType map_type = 7 [json_name = "mapType"];
    case kMapType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_kind_.map_type_);
      break;
    }
    // .google.api.expr.v1alpha1.Type.FunctionType function = 8 [json_name = "function"];
    case kFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_kind_.function_);
      break;
    }
    // string message_type = 9 [json_name = "messageType"];
    case kMessageType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_type());
      break;
    }
    // string type_param = 10 [json_name = "typeParam"];
    case kTypeParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type_param());
      break;
    }
    // .google.api.expr.v1alpha1.Type type = 11 [json_name = "type"];
    case kType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_kind_.type_);
      break;
    }
    // .google.protobuf.Empty error = 12 [json_name = "error"];
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_kind_.error_);
      break;
    }
    // .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14 [json_name = "abstractType"];
    case kAbstractType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_kind_.abstract_type_);
      break;
    }
    case TYPE_KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Type::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Type::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Type::GetClassData() const { return &_class_data_; }


void Type::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Type*>(&to_msg);
  auto& from = static_cast<const Type&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_kind_case()) {
    case kDyn: {
      _this->_internal_mutable_dyn()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_dyn());
      break;
    }
    case kNull: {
      _this->_internal_set_null(from._internal_null());
      break;
    }
    case kPrimitive: {
      _this->_internal_set_primitive(from._internal_primitive());
      break;
    }
    case kWrapper: {
      _this->_internal_set_wrapper(from._internal_wrapper());
      break;
    }
    case kWellKnown: {
      _this->_internal_set_well_known(from._internal_well_known());
      break;
    }
    case kListType: {
      _this->_internal_mutable_list_type()->::google::api::expr::v1alpha1::Type_ListType::MergeFrom(
          from._internal_list_type());
      break;
    }
    case kMapType: {
      _this->_internal_mutable_map_type()->::google::api::expr::v1alpha1::Type_MapType::MergeFrom(
          from._internal_map_type());
      break;
    }
    case kFunction: {
      _this->_internal_mutable_function()->::google::api::expr::v1alpha1::Type_FunctionType::MergeFrom(
          from._internal_function());
      break;
    }
    case kMessageType: {
      _this->_internal_set_message_type(from._internal_message_type());
      break;
    }
    case kTypeParam: {
      _this->_internal_set_type_param(from._internal_type_param());
      break;
    }
    case kType: {
      _this->_internal_mutable_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
          from._internal_type());
      break;
    }
    case kError: {
      _this->_internal_mutable_error()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_error());
      break;
    }
    case kAbstractType: {
      _this->_internal_mutable_abstract_type()->::google::api::expr::v1alpha1::Type_AbstractType::MergeFrom(
          from._internal_abstract_type());
      break;
    }
    case TYPE_KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Type::CopyFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {
  return true;
}

void Type::InternalSwap(Type* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_kind_, other->_impl_.type_kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[7]);
}

// ===================================================================

class Decl_IdentDecl::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Type& type(const Decl_IdentDecl* msg);
  static const ::google::api::expr::v1alpha1::Constant& value(const Decl_IdentDecl* msg);
};

const ::google::api::expr::v1alpha1::Type&
Decl_IdentDecl::_Internal::type(const Decl_IdentDecl* msg) {
  return *msg->_impl_.type_;
}
const ::google::api::expr::v1alpha1::Constant&
Decl_IdentDecl::_Internal::value(const Decl_IdentDecl* msg) {
  return *msg->_impl_.value_;
}
void Decl_IdentDecl::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
Decl_IdentDecl::Decl_IdentDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Decl.IdentDecl)
}
Decl_IdentDecl::Decl_IdentDecl(const Decl_IdentDecl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Decl_IdentDecl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.doc_){}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.doc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_doc().empty()) {
    _this->_impl_.doc_.Set(from._internal_doc(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::google::api::expr::v1alpha1::Type(*from._impl_.type_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::google::api::expr::v1alpha1::Constant(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Decl.IdentDecl)
}

inline void Decl_IdentDecl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.doc_){}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.doc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Decl_IdentDecl::~Decl_IdentDecl() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Decl.IdentDecl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Decl_IdentDecl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.doc_.Destroy();
  if (this != internal_default_instance()) delete _impl_.type_;
  if (this != internal_default_instance()) delete _impl_.value_;
}

void Decl_IdentDecl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Decl_IdentDecl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Decl.IdentDecl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.doc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.type_ != nullptr) {
    delete _impl_.type_;
  }
  _impl_.type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decl_IdentDecl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string doc = 3 [json_name = "doc"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_doc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1alpha1.Decl.IdentDecl.doc"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Decl_IdentDecl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Decl.IdentDecl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];
  if (this->_internal_has_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // .google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  // string doc = 3 [json_name = "doc"];
  if (!this->_internal_doc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc().data(), static_cast<int>(this->_internal_doc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Decl.IdentDecl.doc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_doc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Decl.IdentDecl)
  return target;
}

size_t Decl_IdentDecl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Decl.IdentDecl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doc = 3 [json_name = "doc"];
  if (!this->_internal_doc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc());
  }

  // .google.api.expr.v1alpha1.Type type = 1 [json_name = "type"];
  if (this->_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.type_);
  }

  // .google.api.expr.v1alpha1.Constant value = 2 [json_name = "value"];
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Decl_IdentDecl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Decl_IdentDecl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Decl_IdentDecl::GetClassData() const { return &_class_data_; }


void Decl_IdentDecl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Decl_IdentDecl*>(&to_msg);
  auto& from = static_cast<const Decl_IdentDecl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Decl.IdentDecl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_doc().empty()) {
    _this->_internal_set_doc(from._internal_doc());
  }
  if (from._internal_has_type()) {
    _this->_internal_mutable_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
        from._internal_type());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::google::api::expr::v1alpha1::Constant::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Decl_IdentDecl::CopyFrom(const Decl_IdentDecl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Decl.IdentDecl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decl_IdentDecl::IsInitialized() const {
  return true;
}

void Decl_IdentDecl::InternalSwap(Decl_IdentDecl* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_, lhs_arena,
      &other->_impl_.doc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Decl_IdentDecl, _impl_.value_)
      + sizeof(Decl_IdentDecl::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(Decl_IdentDecl, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Decl_IdentDecl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[8]);
}

// ===================================================================

class Decl_FunctionDecl_Overload::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Type& result_type(const Decl_FunctionDecl_Overload* msg);
};

const ::google::api::expr::v1alpha1::Type&
Decl_FunctionDecl_Overload::_Internal::result_type(const Decl_FunctionDecl_Overload* msg) {
  return *msg->_impl_.result_type_;
}
Decl_FunctionDecl_Overload::Decl_FunctionDecl_Overload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
}
Decl_FunctionDecl_Overload::Decl_FunctionDecl_Overload(const Decl_FunctionDecl_Overload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Decl_FunctionDecl_Overload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){from._impl_.params_}
    , decltype(_impl_.type_params_){from._impl_.type_params_}
    , decltype(_impl_.overload_id_){}
    , decltype(_impl_.doc_){}
    , decltype(_impl_.result_type_){nullptr}
    , decltype(_impl_.is_instance_function_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.overload_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.overload_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_overload_id().empty()) {
    _this->_impl_.overload_id_.Set(from._internal_overload_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_doc().empty()) {
    _this->_impl_.doc_.Set(from._internal_doc(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result_type()) {
    _this->_impl_.result_type_ = new ::google::api::expr::v1alpha1::Type(*from._impl_.result_type_);
  }
  _this->_impl_.is_instance_function_ = from._impl_.is_instance_function_;
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
}

inline void Decl_FunctionDecl_Overload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.params_){arena}
    , decltype(_impl_.type_params_){arena}
    , decltype(_impl_.overload_id_){}
    , decltype(_impl_.doc_){}
    , decltype(_impl_.result_type_){nullptr}
    , decltype(_impl_.is_instance_function_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.overload_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.overload_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Decl_FunctionDecl_Overload::~Decl_FunctionDecl_Overload() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Decl_FunctionDecl_Overload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedPtrField();
  _impl_.type_params_.~RepeatedPtrField();
  _impl_.overload_id_.Destroy();
  _impl_.doc_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_type_;
}

void Decl_FunctionDecl_Overload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Decl_FunctionDecl_Overload::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.type_params_.Clear();
  _impl_.overload_id_.ClearToEmpty();
  _impl_.doc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.result_type_ != nullptr) {
    delete _impl_.result_type_;
  }
  _impl_.result_type_ = nullptr;
  _impl_.is_instance_function_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decl_FunctionDecl_Overload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string overload_id = 1 [json_name = "overloadId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_overload_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string type_params = 3 [json_name = "typeParams"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_type_params();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_instance_function = 5 [json_name = "isInstanceFunction"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_instance_function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string doc = 6 [json_name = "doc"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_doc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Decl_FunctionDecl_Overload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string overload_id = 1 [json_name = "overloadId"];
  if (!this->_internal_overload_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_overload_id().data(), static_cast<int>(this->_internal_overload_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_overload_id(), target);
  }

  // repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string type_params = 3 [json_name = "typeParams"];
  for (int i = 0, n = this->_internal_type_params_size(); i < n; i++) {
    const auto& s = this->_internal_type_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params");
    target = stream->WriteString(3, s, target);
  }

  // .google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];
  if (this->_internal_has_result_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::result_type(this),
        _Internal::result_type(this).GetCachedSize(), target, stream);
  }

  // bool is_instance_function = 5 [json_name = "isInstanceFunction"];
  if (this->_internal_is_instance_function() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_instance_function(), target);
  }

  // string doc = 6 [json_name = "doc"];
  if (!this->_internal_doc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc().data(), static_cast<int>(this->_internal_doc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_doc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  return target;
}

size_t Decl_FunctionDecl_Overload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.expr.v1alpha1.Type params = 2 [json_name = "params"];
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->_impl_.params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string type_params = 3 [json_name = "typeParams"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.type_params_.size());
  for (int i = 0, n = _impl_.type_params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.type_params_.Get(i));
  }

  // string overload_id = 1 [json_name = "overloadId"];
  if (!this->_internal_overload_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_overload_id());
  }

  // string doc = 6 [json_name = "doc"];
  if (!this->_internal_doc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc());
  }

  // .google.api.expr.v1alpha1.Type result_type = 4 [json_name = "resultType"];
  if (this->_internal_has_result_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.result_type_);
  }

  // bool is_instance_function = 5 [json_name = "isInstanceFunction"];
  if (this->_internal_is_instance_function() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Decl_FunctionDecl_Overload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Decl_FunctionDecl_Overload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Decl_FunctionDecl_Overload::GetClassData() const { return &_class_data_; }


void Decl_FunctionDecl_Overload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Decl_FunctionDecl_Overload*>(&to_msg);
  auto& from = static_cast<const Decl_FunctionDecl_Overload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  _this->_impl_.type_params_.MergeFrom(from._impl_.type_params_);
  if (!from._internal_overload_id().empty()) {
    _this->_internal_set_overload_id(from._internal_overload_id());
  }
  if (!from._internal_doc().empty()) {
    _this->_internal_set_doc(from._internal_doc());
  }
  if (from._internal_has_result_type()) {
    _this->_internal_mutable_result_type()->::google::api::expr::v1alpha1::Type::MergeFrom(
        from._internal_result_type());
  }
  if (from._internal_is_instance_function() != 0) {
    _this->_internal_set_is_instance_function(from._internal_is_instance_function());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Decl_FunctionDecl_Overload::CopyFrom(const Decl_FunctionDecl_Overload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decl_FunctionDecl_Overload::IsInitialized() const {
  return true;
}

void Decl_FunctionDecl_Overload::InternalSwap(Decl_FunctionDecl_Overload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  _impl_.type_params_.InternalSwap(&other->_impl_.type_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.overload_id_, lhs_arena,
      &other->_impl_.overload_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_, lhs_arena,
      &other->_impl_.doc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.is_instance_function_)
      + sizeof(Decl_FunctionDecl_Overload::_impl_.is_instance_function_)
      - PROTOBUF_FIELD_OFFSET(Decl_FunctionDecl_Overload, _impl_.result_type_)>(
          reinterpret_cast<char*>(&_impl_.result_type_),
          reinterpret_cast<char*>(&other->_impl_.result_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Decl_FunctionDecl_Overload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[9]);
}

// ===================================================================

class Decl_FunctionDecl::_Internal {
 public:
};

Decl_FunctionDecl::Decl_FunctionDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Decl.FunctionDecl)
}
Decl_FunctionDecl::Decl_FunctionDecl(const Decl_FunctionDecl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Decl_FunctionDecl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.overloads_){from._impl_.overloads_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Decl.FunctionDecl)
}

inline void Decl_FunctionDecl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.overloads_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Decl_FunctionDecl::~Decl_FunctionDecl() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Decl.FunctionDecl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Decl_FunctionDecl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.overloads_.~RepeatedPtrField();
}

void Decl_FunctionDecl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Decl_FunctionDecl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.overloads_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decl_FunctionDecl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overloads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Decl_FunctionDecl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_overloads_size()); i < n; i++) {
    const auto& repfield = this->_internal_overloads(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Decl.FunctionDecl)
  return target;
}

size_t Decl_FunctionDecl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1 [json_name = "overloads"];
  total_size += 1UL * this->_internal_overloads_size();
  for (const auto& msg : this->_impl_.overloads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Decl_FunctionDecl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Decl_FunctionDecl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Decl_FunctionDecl::GetClassData() const { return &_class_data_; }


void Decl_FunctionDecl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Decl_FunctionDecl*>(&to_msg);
  auto& from = static_cast<const Decl_FunctionDecl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.overloads_.MergeFrom(from._impl_.overloads_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Decl_FunctionDecl::CopyFrom(const Decl_FunctionDecl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decl_FunctionDecl::IsInitialized() const {
  return true;
}

void Decl_FunctionDecl::InternalSwap(Decl_FunctionDecl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.overloads_.InternalSwap(&other->_impl_.overloads_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Decl_FunctionDecl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[10]);
}

// ===================================================================

class Decl::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Decl_IdentDecl& ident(const Decl* msg);
  static const ::google::api::expr::v1alpha1::Decl_FunctionDecl& function(const Decl* msg);
};

const ::google::api::expr::v1alpha1::Decl_IdentDecl&
Decl::_Internal::ident(const Decl* msg) {
  return *msg->_impl_.decl_kind_.ident_;
}
const ::google::api::expr::v1alpha1::Decl_FunctionDecl&
Decl::_Internal::function(const Decl* msg) {
  return *msg->_impl_.decl_kind_.function_;
}
void Decl::set_allocated_ident(::google::api::expr::v1alpha1::Decl_IdentDecl* ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_decl_kind();
  if (ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ident);
    if (message_arena != submessage_arena) {
      ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    set_has_ident();
    _impl_.decl_kind_.ident_ = ident;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.ident)
}
void Decl::set_allocated_function(::google::api::expr::v1alpha1::Decl_FunctionDecl* function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_decl_kind();
  if (function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(function);
    if (message_arena != submessage_arena) {
      function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    set_has_function();
    _impl_.decl_kind_.function_ = function;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.function)
}
Decl::Decl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Decl)
}
Decl::Decl(const Decl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Decl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.decl_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  clear_has_decl_kind();
  switch (from.decl_kind_case()) {
    case kIdent: {
      _this->_internal_mutable_ident()->::google::api::expr::v1alpha1::Decl_IdentDecl::MergeFrom(
          from._internal_ident());
      break;
    }
    case kFunction: {
      _this->_internal_mutable_function()->::google::api::expr::v1alpha1::Decl_FunctionDecl::MergeFrom(
          from._internal_function());
      break;
    }
    case DECL_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Decl)
}

inline void Decl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.decl_kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_decl_kind();
}

Decl::~Decl() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Decl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Decl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (has_decl_kind()) {
    clear_decl_kind();
  }
}

void Decl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Decl::clear_decl_kind() {
// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1alpha1.Decl)
  switch (decl_kind_case()) {
    case kIdent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.decl_kind_.ident_;
      }
      break;
    }
    case kFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.decl_kind_.function_;
      }
      break;
    }
    case DECL_KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DECL_KIND_NOT_SET;
}


void Decl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Decl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  clear_decl_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1alpha1.Decl.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ident(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Decl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Decl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Decl.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];
  if (_internal_has_ident()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ident(this),
        _Internal::ident(this).GetCachedSize(), target, stream);
  }

  // .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];
  if (_internal_has_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::function(this),
        _Internal::function(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Decl)
  return target;
}

size_t Decl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Decl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (decl_kind_case()) {
    // .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2 [json_name = "ident"];
    case kIdent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.decl_kind_.ident_);
      break;
    }
    // .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3 [json_name = "function"];
    case kFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.decl_kind_.function_);
      break;
    }
    case DECL_KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Decl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Decl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Decl::GetClassData() const { return &_class_data_; }


void Decl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Decl*>(&to_msg);
  auto& from = static_cast<const Decl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Decl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  switch (from.decl_kind_case()) {
    case kIdent: {
      _this->_internal_mutable_ident()->::google::api::expr::v1alpha1::Decl_IdentDecl::MergeFrom(
          from._internal_ident());
      break;
    }
    case kFunction: {
      _this->_internal_mutable_function()->::google::api::expr::v1alpha1::Decl_FunctionDecl::MergeFrom(
          from._internal_function());
      break;
    }
    case DECL_KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Decl::CopyFrom(const Decl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Decl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decl::IsInitialized() const {
  return true;
}

void Decl::InternalSwap(Decl* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.decl_kind_, other->_impl_.decl_kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Decl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[11]);
}

// ===================================================================

class Reference::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Constant& value(const Reference* msg);
};

const ::google::api::expr::v1alpha1::Constant&
Reference::_Internal::value(const Reference* msg) {
  return *msg->_impl_.value_;
}
void Reference::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
Reference::Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Reference)
}
Reference::Reference(const Reference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Reference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.overload_id_){from._impl_.overload_id_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::google::api::expr::v1alpha1::Constant(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Reference)
}

inline void Reference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.overload_id_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Reference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Reference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.overload_id_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void Reference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Reference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.overload_id_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Reference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1alpha1.Reference.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string overload_id = 3 [json_name = "overloadId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_overload_id();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1alpha1.Reference.overload_id"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Constant value = 4 [json_name = "value"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Reference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Reference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Reference.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string overload_id = 3 [json_name = "overloadId"];
  for (int i = 0, n = this->_internal_overload_id_size(); i < n; i++) {
    const auto& s = this->_internal_overload_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Reference.overload_id");
    target = stream->WriteString(3, s, target);
  }

  // .google.api.expr.v1alpha1.Constant value = 4 [json_name = "value"];
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Reference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string overload_id = 3 [json_name = "overloadId"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.overload_id_.size());
  for (int i = 0, n = _impl_.overload_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.overload_id_.Get(i));
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.api.expr.v1alpha1.Constant value = 4 [json_name = "value"];
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Reference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Reference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Reference::GetClassData() const { return &_class_data_; }


void Reference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Reference*>(&to_msg);
  auto& from = static_cast<const Reference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Reference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.overload_id_.MergeFrom(from._impl_.overload_id_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::google::api::expr::v1alpha1::Constant::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::InternalSwap(Reference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.overload_id_.InternalSwap(&other->_impl_.overload_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace expr
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::CheckedExpr*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::CheckedExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::CheckedExpr >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Type_ListType*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_ListType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Type_ListType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Type_MapType*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_MapType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Type_MapType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Type_FunctionType*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_FunctionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Type_FunctionType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Type_AbstractType*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_AbstractType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Type_AbstractType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Type*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Type >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Decl_IdentDecl*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl_IdentDecl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Decl_IdentDecl >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Decl_FunctionDecl*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl_FunctionDecl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Decl_FunctionDecl >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Decl*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Decl >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Reference*
Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Reference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Reference >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
