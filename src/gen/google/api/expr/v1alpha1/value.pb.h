// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/expr/v1alpha1/value.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
namespace google {
namespace api {
namespace expr {
namespace v1alpha1 {
class EnumValue;
struct EnumValueDefaultTypeInternal;
extern EnumValueDefaultTypeInternal _EnumValue_default_instance_;
class ListValue;
struct ListValueDefaultTypeInternal;
extern ListValueDefaultTypeInternal _ListValue_default_instance_;
class MapValue;
struct MapValueDefaultTypeInternal;
extern MapValueDefaultTypeInternal _MapValue_default_instance_;
class MapValue_Entry;
struct MapValue_EntryDefaultTypeInternal;
extern MapValue_EntryDefaultTypeInternal _MapValue_Entry_default_instance_;
class Value;
struct ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
}  // namespace v1alpha1
}  // namespace expr
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::expr::v1alpha1::EnumValue* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::EnumValue>(Arena*);
template<> ::google::api::expr::v1alpha1::ListValue* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::ListValue>(Arena*);
template<> ::google::api::expr::v1alpha1::MapValue* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::MapValue>(Arena*);
template<> ::google::api::expr::v1alpha1::MapValue_Entry* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::MapValue_Entry>(Arena*);
template<> ::google::api::expr::v1alpha1::Value* Arena::CreateMaybeMessage<::google::api::expr::v1alpha1::Value>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace expr {
namespace v1alpha1 {

// ===================================================================

class Value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.Value) */ {
 public:
  inline Value() : Value(nullptr) {}
  ~Value() override;
  explicit PROTOBUF_CONSTEXPR Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Value& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kNullValue = 1,
    kBoolValue = 2,
    kInt64Value = 3,
    kUint64Value = 4,
    kDoubleValue = 5,
    kStringValue = 6,
    kBytesValue = 7,
    kEnumValue = 9,
    kObjectValue = 10,
    kMapValue = 11,
    kListValue = 12,
    kTypeValue = 15,
    KIND_NOT_SET = 0,
  };

  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Value& from) {
    Value::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Value* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.Value";
  }
  protected:
  explicit Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNullValueFieldNumber = 1,
    kBoolValueFieldNumber = 2,
    kInt64ValueFieldNumber = 3,
    kUint64ValueFieldNumber = 4,
    kDoubleValueFieldNumber = 5,
    kStringValueFieldNumber = 6,
    kBytesValueFieldNumber = 7,
    kEnumValueFieldNumber = 9,
    kObjectValueFieldNumber = 10,
    kMapValueFieldNumber = 11,
    kListValueFieldNumber = 12,
    kTypeValueFieldNumber = 15,
  };
  // .google.protobuf.NullValue null_value = 1 [json_name = "nullValue"];
  bool has_null_value() const;
  private:
  bool _internal_has_null_value() const;
  public:
  void clear_null_value();
  ::PROTOBUF_NAMESPACE_ID::NullValue null_value() const;
  void set_null_value(::PROTOBUF_NAMESPACE_ID::NullValue value);
  private:
  ::PROTOBUF_NAMESPACE_ID::NullValue _internal_null_value() const;
  void _internal_set_null_value(::PROTOBUF_NAMESPACE_ID::NullValue value);
  public:

  // bool bool_value = 2 [json_name = "boolValue"];
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // int64 int64_value = 3 [json_name = "int64Value"];
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  int64_t int64_value() const;
  void set_int64_value(int64_t value);
  private:
  int64_t _internal_int64_value() const;
  void _internal_set_int64_value(int64_t value);
  public:

  // uint64 uint64_value = 4 [json_name = "uint64Value"];
  bool has_uint64_value() const;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  uint64_t uint64_value() const;
  void set_uint64_value(uint64_t value);
  private:
  uint64_t _internal_uint64_value() const;
  void _internal_set_uint64_value(uint64_t value);
  public:

  // double double_value = 5 [json_name = "doubleValue"];
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string string_value = 6 [json_name = "stringValue"];
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bytes bytes_value = 7 [json_name = "bytesValue"];
  bool has_bytes_value() const;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bytes_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bytes_value();
  PROTOBUF_NODISCARD std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  // .google.api.expr.v1alpha1.EnumValue enum_value = 9 [json_name = "enumValue"];
  bool has_enum_value() const;
  private:
  bool _internal_has_enum_value() const;
  public:
  void clear_enum_value();
  const ::google::api::expr::v1alpha1::EnumValue& enum_value() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::EnumValue* release_enum_value();
  ::google::api::expr::v1alpha1::EnumValue* mutable_enum_value();
  void set_allocated_enum_value(::google::api::expr::v1alpha1::EnumValue* enum_value);
  private:
  const ::google::api::expr::v1alpha1::EnumValue& _internal_enum_value() const;
  ::google::api::expr::v1alpha1::EnumValue* _internal_mutable_enum_value();
  public:
  void unsafe_arena_set_allocated_enum_value(
      ::google::api::expr::v1alpha1::EnumValue* enum_value);
  ::google::api::expr::v1alpha1::EnumValue* unsafe_arena_release_enum_value();

  // .google.protobuf.Any object_value = 10 [json_name = "objectValue"];
  bool has_object_value() const;
  private:
  bool _internal_has_object_value() const;
  public:
  void clear_object_value();
  const ::PROTOBUF_NAMESPACE_ID::Any& object_value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_object_value();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_object_value();
  void set_allocated_object_value(::PROTOBUF_NAMESPACE_ID::Any* object_value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_object_value() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_object_value();
  public:
  void unsafe_arena_set_allocated_object_value(
      ::PROTOBUF_NAMESPACE_ID::Any* object_value);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_object_value();

  // .google.api.expr.v1alpha1.MapValue map_value = 11 [json_name = "mapValue"];
  bool has_map_value() const;
  private:
  bool _internal_has_map_value() const;
  public:
  void clear_map_value();
  const ::google::api::expr::v1alpha1::MapValue& map_value() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::MapValue* release_map_value();
  ::google::api::expr::v1alpha1::MapValue* mutable_map_value();
  void set_allocated_map_value(::google::api::expr::v1alpha1::MapValue* map_value);
  private:
  const ::google::api::expr::v1alpha1::MapValue& _internal_map_value() const;
  ::google::api::expr::v1alpha1::MapValue* _internal_mutable_map_value();
  public:
  void unsafe_arena_set_allocated_map_value(
      ::google::api::expr::v1alpha1::MapValue* map_value);
  ::google::api::expr::v1alpha1::MapValue* unsafe_arena_release_map_value();

  // .google.api.expr.v1alpha1.ListValue list_value = 12 [json_name = "listValue"];
  bool has_list_value() const;
  private:
  bool _internal_has_list_value() const;
  public:
  void clear_list_value();
  const ::google::api::expr::v1alpha1::ListValue& list_value() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::ListValue* release_list_value();
  ::google::api::expr::v1alpha1::ListValue* mutable_list_value();
  void set_allocated_list_value(::google::api::expr::v1alpha1::ListValue* list_value);
  private:
  const ::google::api::expr::v1alpha1::ListValue& _internal_list_value() const;
  ::google::api::expr::v1alpha1::ListValue* _internal_mutable_list_value();
  public:
  void unsafe_arena_set_allocated_list_value(
      ::google::api::expr::v1alpha1::ListValue* list_value);
  ::google::api::expr::v1alpha1::ListValue* unsafe_arena_release_list_value();

  // string type_value = 15 [json_name = "typeValue"];
  bool has_type_value() const;
  private:
  bool _internal_has_type_value() const;
  public:
  void clear_type_value();
  const std::string& type_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_value();
  PROTOBUF_NODISCARD std::string* release_type_value();
  void set_allocated_type_value(std::string* type_value);
  private:
  const std::string& _internal_type_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_value(const std::string& value);
  std::string* _internal_mutable_type_value();
  public:

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.Value)
 private:
  class _Internal;
  void set_has_null_value();
  void set_has_bool_value();
  void set_has_int64_value();
  void set_has_uint64_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_bytes_value();
  void set_has_enum_value();
  void set_has_object_value();
  void set_has_map_value();
  void set_has_list_value();
  void set_has_type_value();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union KindUnion {
      constexpr KindUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int null_value_;
      bool bool_value_;
      int64_t int64_value_;
      uint64_t uint64_value_;
      double double_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
      ::google::api::expr::v1alpha1::EnumValue* enum_value_;
      ::PROTOBUF_NAMESPACE_ID::Any* object_value_;
      ::google::api::expr::v1alpha1::MapValue* map_value_;
      ::google::api::expr::v1alpha1::ListValue* list_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_value_;
    } kind_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class EnumValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.EnumValue) */ {
 public:
  inline EnumValue() : EnumValue(nullptr) {}
  ~EnumValue() override;
  explicit PROTOBUF_CONSTEXPR EnumValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnumValue(const EnumValue& from);
  EnumValue(EnumValue&& from) noexcept
    : EnumValue() {
    *this = ::std::move(from);
  }

  inline EnumValue& operator=(const EnumValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnumValue& operator=(EnumValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnumValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnumValue* internal_default_instance() {
    return reinterpret_cast<const EnumValue*>(
               &_EnumValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnumValue& a, EnumValue& b) {
    a.Swap(&b);
  }
  inline void Swap(EnumValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnumValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnumValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnumValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnumValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnumValue& from) {
    EnumValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnumValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.EnumValue";
  }
  protected:
  explicit EnumValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string type = 1 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 value = 2 [json_name = "value"];
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.EnumValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class ListValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.ListValue) */ {
 public:
  inline ListValue() : ListValue(nullptr) {}
  ~ListValue() override;
  explicit PROTOBUF_CONSTEXPR ListValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListValue(const ListValue& from);
  ListValue(ListValue&& from) noexcept
    : ListValue() {
    *this = ::std::move(from);
  }

  inline ListValue& operator=(const ListValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListValue& operator=(ListValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListValue* internal_default_instance() {
    return reinterpret_cast<const ListValue*>(
               &_ListValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListValue& a, ListValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ListValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListValue& from) {
    ListValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.ListValue";
  }
  protected:
  explicit ListValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::google::api::expr::v1alpha1::Value* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Value >*
      mutable_values();
  private:
  const ::google::api::expr::v1alpha1::Value& _internal_values(int index) const;
  ::google::api::expr::v1alpha1::Value* _internal_add_values();
  public:
  const ::google::api::expr::v1alpha1::Value& values(int index) const;
  ::google::api::expr::v1alpha1::Value* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Value >&
      values() const;

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.ListValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Value > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class MapValue_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.MapValue.Entry) */ {
 public:
  inline MapValue_Entry() : MapValue_Entry(nullptr) {}
  ~MapValue_Entry() override;
  explicit PROTOBUF_CONSTEXPR MapValue_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapValue_Entry(const MapValue_Entry& from);
  MapValue_Entry(MapValue_Entry&& from) noexcept
    : MapValue_Entry() {
    *this = ::std::move(from);
  }

  inline MapValue_Entry& operator=(const MapValue_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapValue_Entry& operator=(MapValue_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapValue_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapValue_Entry* internal_default_instance() {
    return reinterpret_cast<const MapValue_Entry*>(
               &_MapValue_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MapValue_Entry& a, MapValue_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(MapValue_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapValue_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapValue_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapValue_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapValue_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapValue_Entry& from) {
    MapValue_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapValue_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.MapValue.Entry";
  }
  protected:
  explicit MapValue_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .google.api.expr.v1alpha1.Value key = 1 [json_name = "key"];
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::google::api::expr::v1alpha1::Value& key() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Value* release_key();
  ::google::api::expr::v1alpha1::Value* mutable_key();
  void set_allocated_key(::google::api::expr::v1alpha1::Value* key);
  private:
  const ::google::api::expr::v1alpha1::Value& _internal_key() const;
  ::google::api::expr::v1alpha1::Value* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::google::api::expr::v1alpha1::Value* key);
  ::google::api::expr::v1alpha1::Value* unsafe_arena_release_key();

  // .google.api.expr.v1alpha1.Value value = 2 [json_name = "value"];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::google::api::expr::v1alpha1::Value& value() const;
  PROTOBUF_NODISCARD ::google::api::expr::v1alpha1::Value* release_value();
  ::google::api::expr::v1alpha1::Value* mutable_value();
  void set_allocated_value(::google::api::expr::v1alpha1::Value* value);
  private:
  const ::google::api::expr::v1alpha1::Value& _internal_value() const;
  ::google::api::expr::v1alpha1::Value* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::google::api::expr::v1alpha1::Value* value);
  ::google::api::expr::v1alpha1::Value* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.MapValue.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::api::expr::v1alpha1::Value* key_;
    ::google::api::expr::v1alpha1::Value* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
};
// -------------------------------------------------------------------

class MapValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1alpha1.MapValue) */ {
 public:
  inline MapValue() : MapValue(nullptr) {}
  ~MapValue() override;
  explicit PROTOBUF_CONSTEXPR MapValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapValue(const MapValue& from);
  MapValue(MapValue&& from) noexcept
    : MapValue() {
    *this = ::std::move(from);
  }

  inline MapValue& operator=(const MapValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapValue& operator=(MapValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapValue* internal_default_instance() {
    return reinterpret_cast<const MapValue*>(
               &_MapValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MapValue& a, MapValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MapValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MapValue& from) {
    MapValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1alpha1.MapValue";
  }
  protected:
  explicit MapValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MapValue_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .google.api.expr.v1alpha1.MapValue.Entry entries = 1 [json_name = "entries"];
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::google::api::expr::v1alpha1::MapValue_Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::MapValue_Entry >*
      mutable_entries();
  private:
  const ::google::api::expr::v1alpha1::MapValue_Entry& _internal_entries(int index) const;
  ::google::api::expr::v1alpha1::MapValue_Entry* _internal_add_entries();
  public:
  const ::google::api::expr::v1alpha1::MapValue_Entry& entries(int index) const;
  ::google::api::expr::v1alpha1::MapValue_Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::MapValue_Entry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:google.api.expr.v1alpha1.MapValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::MapValue_Entry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Value

// .google.protobuf.NullValue null_value = 1 [json_name = "nullValue"];
inline bool Value::_internal_has_null_value() const {
  return kind_case() == kNullValue;
}
inline bool Value::has_null_value() const {
  return _internal_has_null_value();
}
inline void Value::set_has_null_value() {
  _impl_._oneof_case_[0] = kNullValue;
}
inline void Value::clear_null_value() {
  if (_internal_has_null_value()) {
    _impl_.kind_.null_value_ = 0;
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue Value::_internal_null_value() const {
  if (_internal_has_null_value()) {
    return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(_impl_.kind_.null_value_);
  }
  return static_cast< ::PROTOBUF_NAMESPACE_ID::NullValue >(0);
}
inline ::PROTOBUF_NAMESPACE_ID::NullValue Value::null_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.null_value)
  return _internal_null_value();
}
inline void Value::_internal_set_null_value(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  if (!_internal_has_null_value()) {
    clear_kind();
    set_has_null_value();
  }
  _impl_.kind_.null_value_ = value;
}
inline void Value::set_null_value(::PROTOBUF_NAMESPACE_ID::NullValue value) {
  _internal_set_null_value(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.null_value)
}

// bool bool_value = 2 [json_name = "boolValue"];
inline bool Value::_internal_has_bool_value() const {
  return kind_case() == kBoolValue;
}
inline bool Value::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void Value::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void Value::clear_bool_value() {
  if (_internal_has_bool_value()) {
    _impl_.kind_.bool_value_ = false;
    clear_has_kind();
  }
}
inline bool Value::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return _impl_.kind_.bool_value_;
  }
  return false;
}
inline void Value::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_kind();
    set_has_bool_value();
  }
  _impl_.kind_.bool_value_ = value;
}
inline bool Value::bool_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.bool_value)
  return _internal_bool_value();
}
inline void Value::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.bool_value)
}

// int64 int64_value = 3 [json_name = "int64Value"];
inline bool Value::_internal_has_int64_value() const {
  return kind_case() == kInt64Value;
}
inline bool Value::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void Value::set_has_int64_value() {
  _impl_._oneof_case_[0] = kInt64Value;
}
inline void Value::clear_int64_value() {
  if (_internal_has_int64_value()) {
    _impl_.kind_.int64_value_ = int64_t{0};
    clear_has_kind();
  }
}
inline int64_t Value::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return _impl_.kind_.int64_value_;
  }
  return int64_t{0};
}
inline void Value::_internal_set_int64_value(int64_t value) {
  if (!_internal_has_int64_value()) {
    clear_kind();
    set_has_int64_value();
  }
  _impl_.kind_.int64_value_ = value;
}
inline int64_t Value::int64_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.int64_value)
  return _internal_int64_value();
}
inline void Value::set_int64_value(int64_t value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.int64_value)
}

// uint64 uint64_value = 4 [json_name = "uint64Value"];
inline bool Value::_internal_has_uint64_value() const {
  return kind_case() == kUint64Value;
}
inline bool Value::has_uint64_value() const {
  return _internal_has_uint64_value();
}
inline void Value::set_has_uint64_value() {
  _impl_._oneof_case_[0] = kUint64Value;
}
inline void Value::clear_uint64_value() {
  if (_internal_has_uint64_value()) {
    _impl_.kind_.uint64_value_ = uint64_t{0u};
    clear_has_kind();
  }
}
inline uint64_t Value::_internal_uint64_value() const {
  if (_internal_has_uint64_value()) {
    return _impl_.kind_.uint64_value_;
  }
  return uint64_t{0u};
}
inline void Value::_internal_set_uint64_value(uint64_t value) {
  if (!_internal_has_uint64_value()) {
    clear_kind();
    set_has_uint64_value();
  }
  _impl_.kind_.uint64_value_ = value;
}
inline uint64_t Value::uint64_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.uint64_value)
  return _internal_uint64_value();
}
inline void Value::set_uint64_value(uint64_t value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.uint64_value)
}

// double double_value = 5 [json_name = "doubleValue"];
inline bool Value::_internal_has_double_value() const {
  return kind_case() == kDoubleValue;
}
inline bool Value::has_double_value() const {
  return _internal_has_double_value();
}
inline void Value::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void Value::clear_double_value() {
  if (_internal_has_double_value()) {
    _impl_.kind_.double_value_ = 0;
    clear_has_kind();
  }
}
inline double Value::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return _impl_.kind_.double_value_;
  }
  return 0;
}
inline void Value::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_kind();
    set_has_double_value();
  }
  _impl_.kind_.double_value_ = value;
}
inline double Value::double_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.double_value)
  return _internal_double_value();
}
inline void Value::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.double_value)
}

// string string_value = 6 [json_name = "stringValue"];
inline bool Value::_internal_has_string_value() const {
  return kind_case() == kStringValue;
}
inline bool Value::has_string_value() const {
  return _internal_has_string_value();
}
inline void Value::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void Value::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.kind_.string_value_.Destroy();
    clear_has_kind();
  }
}
inline const std::string& Value::string_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Value::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    _impl_.kind_.string_value_.InitDefault();
  }
  _impl_.kind_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.string_value)
}
inline std::string* Value::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.string_value)
  return _s;
}
inline const std::string& Value::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.kind_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    _impl_.kind_.string_value_.InitDefault();
  }
  _impl_.kind_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    _impl_.kind_.string_value_.InitDefault();
  }
  return _impl_.kind_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Value::release_string_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.string_value)
  if (_internal_has_string_value()) {
    clear_has_kind();
    return _impl_.kind_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_string_value(std::string* string_value) {
  if (has_kind()) {
    clear_kind();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.kind_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Value.string_value)
}

// bytes bytes_value = 7 [json_name = "bytesValue"];
inline bool Value::_internal_has_bytes_value() const {
  return kind_case() == kBytesValue;
}
inline bool Value::has_bytes_value() const {
  return _internal_has_bytes_value();
}
inline void Value::set_has_bytes_value() {
  _impl_._oneof_case_[0] = kBytesValue;
}
inline void Value::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    _impl_.kind_.bytes_value_.Destroy();
    clear_has_kind();
  }
}
inline const std::string& Value::bytes_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.bytes_value)
  return _internal_bytes_value();
}
template <typename ArgT0, typename... ArgT>
inline void Value::set_bytes_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    _impl_.kind_.bytes_value_.InitDefault();
  }
  _impl_.kind_.bytes_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.bytes_value)
}
inline std::string* Value::mutable_bytes_value() {
  std::string* _s = _internal_mutable_bytes_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.bytes_value)
  return _s;
}
inline const std::string& Value::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return _impl_.kind_.bytes_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    _impl_.kind_.bytes_value_.InitDefault();
  }
  _impl_.kind_.bytes_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_kind();
    set_has_bytes_value();
    _impl_.kind_.bytes_value_.InitDefault();
  }
  return _impl_.kind_.bytes_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Value::release_bytes_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_kind();
    return _impl_.kind_.bytes_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_kind()) {
    clear_kind();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    _impl_.kind_.bytes_value_.InitAllocated(bytes_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Value.bytes_value)
}

// .google.api.expr.v1alpha1.EnumValue enum_value = 9 [json_name = "enumValue"];
inline bool Value::_internal_has_enum_value() const {
  return kind_case() == kEnumValue;
}
inline bool Value::has_enum_value() const {
  return _internal_has_enum_value();
}
inline void Value::set_has_enum_value() {
  _impl_._oneof_case_[0] = kEnumValue;
}
inline void Value::clear_enum_value() {
  if (_internal_has_enum_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.enum_value_;
    }
    clear_has_kind();
  }
}
inline ::google::api::expr::v1alpha1::EnumValue* Value::release_enum_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.enum_value)
  if (_internal_has_enum_value()) {
    clear_has_kind();
    ::google::api::expr::v1alpha1::EnumValue* temp = _impl_.kind_.enum_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.enum_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::EnumValue& Value::_internal_enum_value() const {
  return _internal_has_enum_value()
      ? *_impl_.kind_.enum_value_
      : reinterpret_cast< ::google::api::expr::v1alpha1::EnumValue&>(::google::api::expr::v1alpha1::_EnumValue_default_instance_);
}
inline const ::google::api::expr::v1alpha1::EnumValue& Value::enum_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.enum_value)
  return _internal_enum_value();
}
inline ::google::api::expr::v1alpha1::EnumValue* Value::unsafe_arena_release_enum_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Value.enum_value)
  if (_internal_has_enum_value()) {
    clear_has_kind();
    ::google::api::expr::v1alpha1::EnumValue* temp = _impl_.kind_.enum_value_;
    _impl_.kind_.enum_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Value::unsafe_arena_set_allocated_enum_value(::google::api::expr::v1alpha1::EnumValue* enum_value) {
  clear_kind();
  if (enum_value) {
    set_has_enum_value();
    _impl_.kind_.enum_value_ = enum_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Value.enum_value)
}
inline ::google::api::expr::v1alpha1::EnumValue* Value::_internal_mutable_enum_value() {
  if (!_internal_has_enum_value()) {
    clear_kind();
    set_has_enum_value();
    _impl_.kind_.enum_value_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::EnumValue >(GetArenaForAllocation());
  }
  return _impl_.kind_.enum_value_;
}
inline ::google::api::expr::v1alpha1::EnumValue* Value::mutable_enum_value() {
  ::google::api::expr::v1alpha1::EnumValue* _msg = _internal_mutable_enum_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.enum_value)
  return _msg;
}

// .google.protobuf.Any object_value = 10 [json_name = "objectValue"];
inline bool Value::_internal_has_object_value() const {
  return kind_case() == kObjectValue;
}
inline bool Value::has_object_value() const {
  return _internal_has_object_value();
}
inline void Value::set_has_object_value() {
  _impl_._oneof_case_[0] = kObjectValue;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Value::release_object_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.object_value)
  if (_internal_has_object_value()) {
    clear_has_kind();
    ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.kind_.object_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.object_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Value::_internal_object_value() const {
  return _internal_has_object_value()
      ? *_impl_.kind_.object_value_
      : reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::Any&>(::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Value::object_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.object_value)
  return _internal_object_value();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Value::unsafe_arena_release_object_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Value.object_value)
  if (_internal_has_object_value()) {
    clear_has_kind();
    ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.kind_.object_value_;
    _impl_.kind_.object_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Value::unsafe_arena_set_allocated_object_value(::PROTOBUF_NAMESPACE_ID::Any* object_value) {
  clear_kind();
  if (object_value) {
    set_has_object_value();
    _impl_.kind_.object_value_ = object_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Value.object_value)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Value::_internal_mutable_object_value() {
  if (!_internal_has_object_value()) {
    clear_kind();
    set_has_object_value();
    _impl_.kind_.object_value_ = CreateMaybeMessage< ::PROTOBUF_NAMESPACE_ID::Any >(GetArenaForAllocation());
  }
  return _impl_.kind_.object_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Value::mutable_object_value() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_object_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.object_value)
  return _msg;
}

// .google.api.expr.v1alpha1.MapValue map_value = 11 [json_name = "mapValue"];
inline bool Value::_internal_has_map_value() const {
  return kind_case() == kMapValue;
}
inline bool Value::has_map_value() const {
  return _internal_has_map_value();
}
inline void Value::set_has_map_value() {
  _impl_._oneof_case_[0] = kMapValue;
}
inline void Value::clear_map_value() {
  if (_internal_has_map_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.map_value_;
    }
    clear_has_kind();
  }
}
inline ::google::api::expr::v1alpha1::MapValue* Value::release_map_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.map_value)
  if (_internal_has_map_value()) {
    clear_has_kind();
    ::google::api::expr::v1alpha1::MapValue* temp = _impl_.kind_.map_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.map_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::MapValue& Value::_internal_map_value() const {
  return _internal_has_map_value()
      ? *_impl_.kind_.map_value_
      : reinterpret_cast< ::google::api::expr::v1alpha1::MapValue&>(::google::api::expr::v1alpha1::_MapValue_default_instance_);
}
inline const ::google::api::expr::v1alpha1::MapValue& Value::map_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.map_value)
  return _internal_map_value();
}
inline ::google::api::expr::v1alpha1::MapValue* Value::unsafe_arena_release_map_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Value.map_value)
  if (_internal_has_map_value()) {
    clear_has_kind();
    ::google::api::expr::v1alpha1::MapValue* temp = _impl_.kind_.map_value_;
    _impl_.kind_.map_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Value::unsafe_arena_set_allocated_map_value(::google::api::expr::v1alpha1::MapValue* map_value) {
  clear_kind();
  if (map_value) {
    set_has_map_value();
    _impl_.kind_.map_value_ = map_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Value.map_value)
}
inline ::google::api::expr::v1alpha1::MapValue* Value::_internal_mutable_map_value() {
  if (!_internal_has_map_value()) {
    clear_kind();
    set_has_map_value();
    _impl_.kind_.map_value_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::MapValue >(GetArenaForAllocation());
  }
  return _impl_.kind_.map_value_;
}
inline ::google::api::expr::v1alpha1::MapValue* Value::mutable_map_value() {
  ::google::api::expr::v1alpha1::MapValue* _msg = _internal_mutable_map_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.map_value)
  return _msg;
}

// .google.api.expr.v1alpha1.ListValue list_value = 12 [json_name = "listValue"];
inline bool Value::_internal_has_list_value() const {
  return kind_case() == kListValue;
}
inline bool Value::has_list_value() const {
  return _internal_has_list_value();
}
inline void Value::set_has_list_value() {
  _impl_._oneof_case_[0] = kListValue;
}
inline void Value::clear_list_value() {
  if (_internal_has_list_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.list_value_;
    }
    clear_has_kind();
  }
}
inline ::google::api::expr::v1alpha1::ListValue* Value::release_list_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.list_value)
  if (_internal_has_list_value()) {
    clear_has_kind();
    ::google::api::expr::v1alpha1::ListValue* temp = _impl_.kind_.list_value_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.kind_.list_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1alpha1::ListValue& Value::_internal_list_value() const {
  return _internal_has_list_value()
      ? *_impl_.kind_.list_value_
      : reinterpret_cast< ::google::api::expr::v1alpha1::ListValue&>(::google::api::expr::v1alpha1::_ListValue_default_instance_);
}
inline const ::google::api::expr::v1alpha1::ListValue& Value::list_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.list_value)
  return _internal_list_value();
}
inline ::google::api::expr::v1alpha1::ListValue* Value::unsafe_arena_release_list_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1alpha1.Value.list_value)
  if (_internal_has_list_value()) {
    clear_has_kind();
    ::google::api::expr::v1alpha1::ListValue* temp = _impl_.kind_.list_value_;
    _impl_.kind_.list_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Value::unsafe_arena_set_allocated_list_value(::google::api::expr::v1alpha1::ListValue* list_value) {
  clear_kind();
  if (list_value) {
    set_has_list_value();
    _impl_.kind_.list_value_ = list_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Value.list_value)
}
inline ::google::api::expr::v1alpha1::ListValue* Value::_internal_mutable_list_value() {
  if (!_internal_has_list_value()) {
    clear_kind();
    set_has_list_value();
    _impl_.kind_.list_value_ = CreateMaybeMessage< ::google::api::expr::v1alpha1::ListValue >(GetArenaForAllocation());
  }
  return _impl_.kind_.list_value_;
}
inline ::google::api::expr::v1alpha1::ListValue* Value::mutable_list_value() {
  ::google::api::expr::v1alpha1::ListValue* _msg = _internal_mutable_list_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.list_value)
  return _msg;
}

// string type_value = 15 [json_name = "typeValue"];
inline bool Value::_internal_has_type_value() const {
  return kind_case() == kTypeValue;
}
inline bool Value::has_type_value() const {
  return _internal_has_type_value();
}
inline void Value::set_has_type_value() {
  _impl_._oneof_case_[0] = kTypeValue;
}
inline void Value::clear_type_value() {
  if (_internal_has_type_value()) {
    _impl_.kind_.type_value_.Destroy();
    clear_has_kind();
  }
}
inline const std::string& Value::type_value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.Value.type_value)
  return _internal_type_value();
}
template <typename ArgT0, typename... ArgT>
inline void Value::set_type_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_type_value()) {
    clear_kind();
    set_has_type_value();
    _impl_.kind_.type_value_.InitDefault();
  }
  _impl_.kind_.type_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.Value.type_value)
}
inline std::string* Value::mutable_type_value() {
  std::string* _s = _internal_mutable_type_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.Value.type_value)
  return _s;
}
inline const std::string& Value::_internal_type_value() const {
  if (_internal_has_type_value()) {
    return _impl_.kind_.type_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Value::_internal_set_type_value(const std::string& value) {
  if (!_internal_has_type_value()) {
    clear_kind();
    set_has_type_value();
    _impl_.kind_.type_value_.InitDefault();
  }
  _impl_.kind_.type_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Value::_internal_mutable_type_value() {
  if (!_internal_has_type_value()) {
    clear_kind();
    set_has_type_value();
    _impl_.kind_.type_value_.InitDefault();
  }
  return _impl_.kind_.type_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Value::release_type_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.Value.type_value)
  if (_internal_has_type_value()) {
    clear_has_kind();
    return _impl_.kind_.type_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Value::set_allocated_type_value(std::string* type_value) {
  if (has_kind()) {
    clear_kind();
  }
  if (type_value != nullptr) {
    set_has_type_value();
    _impl_.kind_.type_value_.InitAllocated(type_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Value.type_value)
}

inline bool Value::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Value::clear_has_kind() {
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}
inline Value::KindCase Value::kind_case() const {
  return Value::KindCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// EnumValue

// string type = 1 [json_name = "type"];
inline void EnumValue::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& EnumValue::type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.EnumValue.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EnumValue::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.EnumValue.type)
}
inline std::string* EnumValue::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.EnumValue.type)
  return _s;
}
inline const std::string& EnumValue::_internal_type() const {
  return _impl_.type_.Get();
}
inline void EnumValue::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* EnumValue::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* EnumValue::release_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.EnumValue.type)
  return _impl_.type_.Release();
}
inline void EnumValue::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.EnumValue.type)
}

// int32 value = 2 [json_name = "value"];
inline void EnumValue::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t EnumValue::_internal_value() const {
  return _impl_.value_;
}
inline int32_t EnumValue::value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.EnumValue.value)
  return _internal_value();
}
inline void EnumValue::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void EnumValue::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1alpha1.EnumValue.value)
}

// -------------------------------------------------------------------

// ListValue

// repeated .google.api.expr.v1alpha1.Value values = 1 [json_name = "values"];
inline int ListValue::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int ListValue::values_size() const {
  return _internal_values_size();
}
inline void ListValue::clear_values() {
  _impl_.values_.Clear();
}
inline ::google::api::expr::v1alpha1::Value* ListValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.ListValue.values)
  return _impl_.values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Value >*
ListValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.ListValue.values)
  return &_impl_.values_;
}
inline const ::google::api::expr::v1alpha1::Value& ListValue::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const ::google::api::expr::v1alpha1::Value& ListValue::values(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.ListValue.values)
  return _internal_values(index);
}
inline ::google::api::expr::v1alpha1::Value* ListValue::_internal_add_values() {
  return _impl_.values_.Add();
}
inline ::google::api::expr::v1alpha1::Value* ListValue::add_values() {
  ::google::api::expr::v1alpha1::Value* _add = _internal_add_values();
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.ListValue.values)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::Value >&
ListValue::values() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.ListValue.values)
  return _impl_.values_;
}

// -------------------------------------------------------------------

// MapValue_Entry

// .google.api.expr.v1alpha1.Value key = 1 [json_name = "key"];
inline bool MapValue_Entry::_internal_has_key() const {
  return this != internal_default_instance() && _impl_.key_ != nullptr;
}
inline bool MapValue_Entry::has_key() const {
  return _internal_has_key();
}
inline void MapValue_Entry::clear_key() {
  if (GetArenaForAllocation() == nullptr && _impl_.key_ != nullptr) {
    delete _impl_.key_;
  }
  _impl_.key_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Value& MapValue_Entry::_internal_key() const {
  const ::google::api::expr::v1alpha1::Value* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Value&>(
      ::google::api::expr::v1alpha1::_Value_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Value& MapValue_Entry::key() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.MapValue.Entry.key)
  return _internal_key();
}
inline void MapValue_Entry::unsafe_arena_set_allocated_key(
    ::google::api::expr::v1alpha1::Value* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.MapValue.Entry.key)
}
inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::release_key() {
  
  ::google::api::expr::v1alpha1::Value* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.MapValue.Entry.key)
  
  ::google::api::expr::v1alpha1::Value* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::_internal_mutable_key() {
  
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Value>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::mutable_key() {
  ::google::api::expr::v1alpha1::Value* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.MapValue.Entry.key)
  return _msg;
}
inline void MapValue_Entry::set_allocated_key(::google::api::expr::v1alpha1::Value* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.MapValue.Entry.key)
}

// .google.api.expr.v1alpha1.Value value = 2 [json_name = "value"];
inline bool MapValue_Entry::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool MapValue_Entry::has_value() const {
  return _internal_has_value();
}
inline void MapValue_Entry::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
inline const ::google::api::expr::v1alpha1::Value& MapValue_Entry::_internal_value() const {
  const ::google::api::expr::v1alpha1::Value* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::api::expr::v1alpha1::Value&>(
      ::google::api::expr::v1alpha1::_Value_default_instance_);
}
inline const ::google::api::expr::v1alpha1::Value& MapValue_Entry::value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.MapValue.Entry.value)
  return _internal_value();
}
inline void MapValue_Entry::unsafe_arena_set_allocated_value(
    ::google::api::expr::v1alpha1::Value* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.MapValue.Entry.value)
}
inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::release_value() {
  
  ::google::api::expr::v1alpha1::Value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1alpha1.MapValue.Entry.value)
  
  ::google::api::expr::v1alpha1::Value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1alpha1::Value>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::google::api::expr::v1alpha1::Value* MapValue_Entry::mutable_value() {
  ::google::api::expr::v1alpha1::Value* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.MapValue.Entry.value)
  return _msg;
}
inline void MapValue_Entry::set_allocated_value(::google::api::expr::v1alpha1::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.MapValue.Entry.value)
}

// -------------------------------------------------------------------

// MapValue

// repeated .google.api.expr.v1alpha1.MapValue.Entry entries = 1 [json_name = "entries"];
inline int MapValue::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int MapValue::entries_size() const {
  return _internal_entries_size();
}
inline void MapValue::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::google::api::expr::v1alpha1::MapValue_Entry* MapValue::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1alpha1.MapValue.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::MapValue_Entry >*
MapValue::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1alpha1.MapValue.entries)
  return &_impl_.entries_;
}
inline const ::google::api::expr::v1alpha1::MapValue_Entry& MapValue::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::google::api::expr::v1alpha1::MapValue_Entry& MapValue::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1alpha1.MapValue.entries)
  return _internal_entries(index);
}
inline ::google::api::expr::v1alpha1::MapValue_Entry* MapValue::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::google::api::expr::v1alpha1::MapValue_Entry* MapValue::add_entries() {
  ::google::api::expr::v1alpha1::MapValue_Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:google.api.expr.v1alpha1.MapValue.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1alpha1::MapValue_Entry >&
MapValue::entries() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1alpha1.MapValue.entries)
  return _impl_.entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace expr
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1alpha1_2fvalue_2eproto
