// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/expr/v1beta1/decl.proto

#include "google/api/expr/v1beta1/decl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace google {
namespace api {
namespace expr {
namespace v1beta1 {
PROTOBUF_CONSTEXPR Decl::Decl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.doc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DeclDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeclDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeclDefaultTypeInternal() {}
  union {
    Decl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeclDefaultTypeInternal _Decl_default_instance_;
PROTOBUF_CONSTEXPR DeclType::DeclType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_params_)*/{}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeclTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeclTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeclTypeDefaultTypeInternal() {}
  union {
    DeclType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeclTypeDefaultTypeInternal _DeclType_default_instance_;
PROTOBUF_CONSTEXPR IdentDecl::IdentDecl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IdentDeclDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdentDeclDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdentDeclDefaultTypeInternal() {}
  union {
    IdentDecl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdentDeclDefaultTypeInternal _IdentDecl_default_instance_;
PROTOBUF_CONSTEXPR FunctionDecl::FunctionDecl(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.return_type_)*/nullptr
  , /*decltype(_impl_.receiver_function_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FunctionDeclDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionDeclDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionDeclDefaultTypeInternal() {}
  union {
    FunctionDecl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionDeclDefaultTypeInternal _FunctionDecl_default_instance_;
}  // namespace v1beta1
}  // namespace expr
}  // namespace api
}  // namespace google
static ::_pb::Metadata file_level_metadata_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto = nullptr;

const uint32_t TableStruct_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::Decl, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::Decl, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::Decl, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::Decl, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::Decl, _impl_.doc_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::Decl, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::DeclType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::DeclType, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::DeclType, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::DeclType, _impl_.type_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::IdentDecl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::IdentDecl, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::IdentDecl, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::FunctionDecl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::FunctionDecl, _impl_.args_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::FunctionDecl, _impl_.return_type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::FunctionDecl, _impl_.receiver_function_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::google::api::expr::v1beta1::Decl)},
  { 12, -1, -1, sizeof(::google::api::expr::v1beta1::DeclType)},
  { 21, -1, -1, sizeof(::google::api::expr::v1beta1::IdentDecl)},
  { 29, -1, -1, sizeof(::google::api::expr::v1beta1::FunctionDecl)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::google::api::expr::v1beta1::_Decl_default_instance_._instance,
  &::google::api::expr::v1beta1::_DeclType_default_instance_._instance,
  &::google::api::expr::v1beta1::_IdentDecl_default_instance_._instance,
  &::google::api::expr::v1beta1::_FunctionDecl_default_instance_._instance,
};

const char descriptor_table_protodef_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"google/api/expr/v1beta1/decl.proto\022\027go"
  "ogle.api.expr.v1beta1\032\"google/api/expr/v"
  "1beta1/expr.proto\"\305\001\n\004Decl\022\016\n\002id\030\001 \001(\005R\002"
  "id\022\022\n\004name\030\002 \001(\tR\004name\022\020\n\003doc\030\003 \001(\tR\003doc"
  "\022:\n\005ident\030\004 \001(\0132\".google.api.expr.v1beta"
  "1.IdentDeclH\000R\005ident\022C\n\010function\030\005 \001(\0132%"
  ".google.api.expr.v1beta1.FunctionDeclH\000R"
  "\010functionB\006\n\004kind\"r\n\010DeclType\022\016\n\002id\030\001 \001("
  "\005R\002id\022\022\n\004type\030\002 \001(\tR\004type\022B\n\013type_params"
  "\030\004 \003(\0132!.google.api.expr.v1beta1.DeclTyp"
  "eR\ntypeParams\"w\n\tIdentDecl\0225\n\004type\030\003 \001(\013"
  "2!.google.api.expr.v1beta1.DeclTypeR\004typ"
  "e\0223\n\005value\030\004 \001(\0132\035.google.api.expr.v1bet"
  "a1.ExprR\005value\"\267\001\n\014FunctionDecl\0226\n\004args\030"
  "\001 \003(\0132\".google.api.expr.v1beta1.IdentDec"
  "lR\004args\022B\n\013return_type\030\002 \001(\0132!.google.ap"
  "i.expr.v1beta1.DeclTypeR\nreturnType\022+\n\021r"
  "eceiver_function\030\003 \001(\010R\020receiverFunction"
  "Bj\n\033com.google.api.expr.v1beta1B\tDeclPro"
  "toP\001Z;google.golang.org/genproto/googlea"
  "pis/api/expr/v1beta1;expr\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fexpr_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto = {
    false, false, 836, descriptor_table_protodef_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto,
    "google/api/expr/v1beta1/decl.proto",
    &descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_once, descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto::offsets,
    file_level_metadata_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto, file_level_enum_descriptors_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto,
    file_level_service_descriptors_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_getter() {
  return &descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto(&descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto);
namespace google {
namespace api {
namespace expr {
namespace v1beta1 {

// ===================================================================

class Decl::_Internal {
 public:
  static const ::google::api::expr::v1beta1::IdentDecl& ident(const Decl* msg);
  static const ::google::api::expr::v1beta1::FunctionDecl& function(const Decl* msg);
};

const ::google::api::expr::v1beta1::IdentDecl&
Decl::_Internal::ident(const Decl* msg) {
  return *msg->_impl_.kind_.ident_;
}
const ::google::api::expr::v1beta1::FunctionDecl&
Decl::_Internal::function(const Decl* msg) {
  return *msg->_impl_.kind_.function_;
}
void Decl::set_allocated_ident(::google::api::expr::v1beta1::IdentDecl* ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ident);
    if (message_arena != submessage_arena) {
      ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    set_has_ident();
    _impl_.kind_.ident_ = ident;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.Decl.ident)
}
void Decl::set_allocated_function(::google::api::expr::v1beta1::FunctionDecl* function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(function);
    if (message_arena != submessage_arena) {
      function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    set_has_function();
    _impl_.kind_.function_ = function;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.Decl.function)
}
Decl::Decl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1beta1.Decl)
}
Decl::Decl(const Decl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Decl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.doc_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.doc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_doc().empty()) {
    _this->_impl_.doc_.Set(from._internal_doc(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  clear_has_kind();
  switch (from.kind_case()) {
    case kIdent: {
      _this->_internal_mutable_ident()->::google::api::expr::v1beta1::IdentDecl::MergeFrom(
          from._internal_ident());
      break;
    }
    case kFunction: {
      _this->_internal_mutable_function()->::google::api::expr::v1beta1::FunctionDecl::MergeFrom(
          from._internal_function());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1beta1.Decl)
}

inline void Decl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.doc_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.doc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_kind();
}

Decl::~Decl() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1beta1.Decl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Decl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.doc_.Destroy();
  if (has_kind()) {
    clear_kind();
  }
}

void Decl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Decl::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1beta1.Decl)
  switch (kind_case()) {
    case kIdent: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.ident_;
      }
      break;
    }
    case kFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.function_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


void Decl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1beta1.Decl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.doc_.ClearToEmpty();
  _impl_.id_ = 0;
  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1beta1.Decl.name"));
        } else
          goto handle_unusual;
        continue;
      // string doc = 3 [json_name = "doc"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_doc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1beta1.Decl.doc"));
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1beta1.IdentDecl ident = 4 [json_name = "ident"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ident(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1beta1.FunctionDecl function = 5 [json_name = "function"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Decl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1beta1.Decl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1beta1.Decl.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string doc = 3 [json_name = "doc"];
  if (!this->_internal_doc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc().data(), static_cast<int>(this->_internal_doc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1beta1.Decl.doc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_doc(), target);
  }

  // .google.api.expr.v1beta1.IdentDecl ident = 4 [json_name = "ident"];
  if (_internal_has_ident()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ident(this),
        _Internal::ident(this).GetCachedSize(), target, stream);
  }

  // .google.api.expr.v1beta1.FunctionDecl function = 5 [json_name = "function"];
  if (_internal_has_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::function(this),
        _Internal::function(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1beta1.Decl)
  return target;
}

size_t Decl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1beta1.Decl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string doc = 3 [json_name = "doc"];
  if (!this->_internal_doc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc());
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  switch (kind_case()) {
    // .google.api.expr.v1beta1.IdentDecl ident = 4 [json_name = "ident"];
    case kIdent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.ident_);
      break;
    }
    // .google.api.expr.v1beta1.FunctionDecl function = 5 [json_name = "function"];
    case kFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.function_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Decl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Decl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Decl::GetClassData() const { return &_class_data_; }


void Decl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Decl*>(&to_msg);
  auto& from = static_cast<const Decl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1beta1.Decl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_doc().empty()) {
    _this->_internal_set_doc(from._internal_doc());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  switch (from.kind_case()) {
    case kIdent: {
      _this->_internal_mutable_ident()->::google::api::expr::v1beta1::IdentDecl::MergeFrom(
          from._internal_ident());
      break;
    }
    case kFunction: {
      _this->_internal_mutable_function()->::google::api::expr::v1beta1::FunctionDecl::MergeFrom(
          from._internal_function());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Decl::CopyFrom(const Decl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1beta1.Decl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decl::IsInitialized() const {
  return true;
}

void Decl::InternalSwap(Decl* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_, lhs_arena,
      &other->_impl_.doc_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Decl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto[0]);
}

// ===================================================================

class DeclType::_Internal {
 public:
};

DeclType::DeclType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1beta1.DeclType)
}
DeclType::DeclType(const DeclType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeclType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_params_){from._impl_.type_params_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1beta1.DeclType)
}

inline void DeclType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_params_){arena}
    , decltype(_impl_.type_){}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeclType::~DeclType() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1beta1.DeclType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeclType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_params_.~RepeatedPtrField();
  _impl_.type_.Destroy();
}

void DeclType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeclType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1beta1.DeclType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_params_.Clear();
  _impl_.type_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeclType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.api.expr.v1beta1.DeclType.type"));
        } else
          goto handle_unusual;
        continue;
      // repeated .google.api.expr.v1beta1.DeclType type_params = 4 [json_name = "typeParams"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeclType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1beta1.DeclType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1beta1.DeclType.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // repeated .google.api.expr.v1beta1.DeclType type_params = 4 [json_name = "typeParams"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_type_params_size()); i < n; i++) {
    const auto& repfield = this->_internal_type_params(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1beta1.DeclType)
  return target;
}

size_t DeclType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1beta1.DeclType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.expr.v1beta1.DeclType type_params = 4 [json_name = "typeParams"];
  total_size += 1UL * this->_internal_type_params_size();
  for (const auto& msg : this->_impl_.type_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 id = 1 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeclType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeclType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeclType::GetClassData() const { return &_class_data_; }


void DeclType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeclType*>(&to_msg);
  auto& from = static_cast<const DeclType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1beta1.DeclType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.type_params_.MergeFrom(from._impl_.type_params_);
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeclType::CopyFrom(const DeclType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1beta1.DeclType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeclType::IsInitialized() const {
  return true;
}

void DeclType::InternalSwap(DeclType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.type_params_.InternalSwap(&other->_impl_.type_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeclType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto[1]);
}

// ===================================================================

class IdentDecl::_Internal {
 public:
  static const ::google::api::expr::v1beta1::DeclType& type(const IdentDecl* msg);
  static const ::google::api::expr::v1beta1::Expr& value(const IdentDecl* msg);
};

const ::google::api::expr::v1beta1::DeclType&
IdentDecl::_Internal::type(const IdentDecl* msg) {
  return *msg->_impl_.type_;
}
const ::google::api::expr::v1beta1::Expr&
IdentDecl::_Internal::value(const IdentDecl* msg) {
  return *msg->_impl_.value_;
}
void IdentDecl::clear_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
}
IdentDecl::IdentDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1beta1.IdentDecl)
}
IdentDecl::IdentDecl(const IdentDecl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdentDecl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::google::api::expr::v1beta1::DeclType(*from._impl_.type_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::google::api::expr::v1beta1::Expr(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1beta1.IdentDecl)
}

inline void IdentDecl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){nullptr}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IdentDecl::~IdentDecl() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1beta1.IdentDecl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdentDecl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.type_;
  if (this != internal_default_instance()) delete _impl_.value_;
}

void IdentDecl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdentDecl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1beta1.IdentDecl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.type_ != nullptr) {
    delete _impl_.type_;
  }
  _impl_.type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdentDecl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.api.expr.v1beta1.DeclType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1beta1.Expr value = 4 [json_name = "value"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdentDecl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1beta1.IdentDecl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.expr.v1beta1.DeclType type = 3 [json_name = "type"];
  if (this->_internal_has_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // .google.api.expr.v1beta1.Expr value = 4 [json_name = "value"];
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1beta1.IdentDecl)
  return target;
}

size_t IdentDecl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1beta1.IdentDecl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.api.expr.v1beta1.DeclType type = 3 [json_name = "type"];
  if (this->_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.type_);
  }

  // .google.api.expr.v1beta1.Expr value = 4 [json_name = "value"];
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdentDecl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdentDecl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdentDecl::GetClassData() const { return &_class_data_; }


void IdentDecl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdentDecl*>(&to_msg);
  auto& from = static_cast<const IdentDecl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1beta1.IdentDecl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_type()) {
    _this->_internal_mutable_type()->::google::api::expr::v1beta1::DeclType::MergeFrom(
        from._internal_type());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::google::api::expr::v1beta1::Expr::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdentDecl::CopyFrom(const IdentDecl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1beta1.IdentDecl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentDecl::IsInitialized() const {
  return true;
}

void IdentDecl::InternalSwap(IdentDecl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdentDecl, _impl_.value_)
      + sizeof(IdentDecl::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(IdentDecl, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentDecl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto[2]);
}

// ===================================================================

class FunctionDecl::_Internal {
 public:
  static const ::google::api::expr::v1beta1::DeclType& return_type(const FunctionDecl* msg);
};

const ::google::api::expr::v1beta1::DeclType&
FunctionDecl::_Internal::return_type(const FunctionDecl* msg) {
  return *msg->_impl_.return_type_;
}
FunctionDecl::FunctionDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1beta1.FunctionDecl)
}
FunctionDecl::FunctionDecl(const FunctionDecl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctionDecl* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){from._impl_.args_}
    , decltype(_impl_.return_type_){nullptr}
    , decltype(_impl_.receiver_function_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_return_type()) {
    _this->_impl_.return_type_ = new ::google::api::expr::v1beta1::DeclType(*from._impl_.return_type_);
  }
  _this->_impl_.receiver_function_ = from._impl_.receiver_function_;
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1beta1.FunctionDecl)
}

inline void FunctionDecl::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){arena}
    , decltype(_impl_.return_type_){nullptr}
    , decltype(_impl_.receiver_function_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FunctionDecl::~FunctionDecl() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1beta1.FunctionDecl)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctionDecl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.return_type_;
}

void FunctionDecl::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctionDecl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1beta1.FunctionDecl)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.return_type_ != nullptr) {
    delete _impl_.return_type_;
  }
  _impl_.return_type_ = nullptr;
  _impl_.receiver_function_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionDecl::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.api.expr.v1beta1.IdentDecl args = 1 [json_name = "args"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.api.expr.v1beta1.DeclType return_type = 2 [json_name = "returnType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_return_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool receiver_function = 3 [json_name = "receiverFunction"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.receiver_function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionDecl::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1beta1.FunctionDecl)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.expr.v1beta1.IdentDecl args = 1 [json_name = "args"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_args_size()); i < n; i++) {
    const auto& repfield = this->_internal_args(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.api.expr.v1beta1.DeclType return_type = 2 [json_name = "returnType"];
  if (this->_internal_has_return_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::return_type(this),
        _Internal::return_type(this).GetCachedSize(), target, stream);
  }

  // bool receiver_function = 3 [json_name = "receiverFunction"];
  if (this->_internal_receiver_function() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_receiver_function(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1beta1.FunctionDecl)
  return target;
}

size_t FunctionDecl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1beta1.FunctionDecl)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.expr.v1beta1.IdentDecl args = 1 [json_name = "args"];
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->_impl_.args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.api.expr.v1beta1.DeclType return_type = 2 [json_name = "returnType"];
  if (this->_internal_has_return_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.return_type_);
  }

  // bool receiver_function = 3 [json_name = "receiverFunction"];
  if (this->_internal_receiver_function() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionDecl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctionDecl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionDecl::GetClassData() const { return &_class_data_; }


void FunctionDecl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctionDecl*>(&to_msg);
  auto& from = static_cast<const FunctionDecl&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1beta1.FunctionDecl)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  if (from._internal_has_return_type()) {
    _this->_internal_mutable_return_type()->::google::api::expr::v1beta1::DeclType::MergeFrom(
        from._internal_return_type());
  }
  if (from._internal_receiver_function() != 0) {
    _this->_internal_set_receiver_function(from._internal_receiver_function());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionDecl::CopyFrom(const FunctionDecl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1beta1.FunctionDecl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionDecl::IsInitialized() const {
  return true;
}

void FunctionDecl::InternalSwap(FunctionDecl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionDecl, _impl_.receiver_function_)
      + sizeof(FunctionDecl::_impl_.receiver_function_)
      - PROTOBUF_FIELD_OFFSET(FunctionDecl, _impl_.return_type_)>(
          reinterpret_cast<char*>(&_impl_.return_type_),
          reinterpret_cast<char*>(&other->_impl_.return_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionDecl::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_getter, &descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_once,
      file_level_metadata_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace expr
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::expr::v1beta1::Decl*
Arena::CreateMaybeMessage< ::google::api::expr::v1beta1::Decl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1beta1::Decl >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1beta1::DeclType*
Arena::CreateMaybeMessage< ::google::api::expr::v1beta1::DeclType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1beta1::DeclType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1beta1::IdentDecl*
Arena::CreateMaybeMessage< ::google::api::expr::v1beta1::IdentDecl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1beta1::IdentDecl >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1beta1::FunctionDecl*
Arena::CreateMaybeMessage< ::google::api::expr::v1beta1::FunctionDecl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1beta1::FunctionDecl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
