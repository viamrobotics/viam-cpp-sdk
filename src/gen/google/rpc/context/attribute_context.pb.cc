// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/rpc/context/attribute_context.proto

#include "google/rpc/context/attribute_context.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace google {
namespace rpc {
namespace context {
PROTOBUF_CONSTEXPR AttributeContext_Peer_LabelsEntry_DoNotUse::AttributeContext_Peer_LabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AttributeContext_Peer_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_Peer_LabelsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Peer_LabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AttributeContext_Peer::AttributeContext_Peer(
    ::_pbi::ConstantInitialized)
  : labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , ip_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , principal_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , region_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , port_(int64_t{0}){}
struct AttributeContext_PeerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeContext_PeerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeContext_PeerDefaultTypeInternal() {}
  union {
    AttributeContext_Peer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_PeerDefaultTypeInternal _AttributeContext_Peer_default_instance_;
PROTOBUF_CONSTEXPR AttributeContext_Api::AttributeContext_Api(
    ::_pbi::ConstantInitialized)
  : service_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , operation_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , protocol_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AttributeContext_ApiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeContext_ApiDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeContext_ApiDefaultTypeInternal() {}
  union {
    AttributeContext_Api _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_ApiDefaultTypeInternal _AttributeContext_Api_default_instance_;
PROTOBUF_CONSTEXPR AttributeContext_Auth::AttributeContext_Auth(
    ::_pbi::ConstantInitialized)
  : audiences_()
  , access_levels_()
  , principal_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , presenter_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , claims_(nullptr){}
struct AttributeContext_AuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeContext_AuthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeContext_AuthDefaultTypeInternal() {}
  union {
    AttributeContext_Auth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_AuthDefaultTypeInternal _AttributeContext_Auth_default_instance_;
PROTOBUF_CONSTEXPR AttributeContext_Request_HeadersEntry_DoNotUse::AttributeContext_Request_HeadersEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AttributeContext_Request_HeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_Request_HeadersEntry_DoNotUseDefaultTypeInternal _AttributeContext_Request_HeadersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AttributeContext_Request::AttributeContext_Request(
    ::_pbi::ConstantInitialized)
  : headers_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , method_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , host_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , scheme_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , query_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , protocol_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , reason_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_(nullptr)
  , auth_(nullptr)
  , size_(int64_t{0}){}
struct AttributeContext_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeContext_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeContext_RequestDefaultTypeInternal() {}
  union {
    AttributeContext_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_RequestDefaultTypeInternal _AttributeContext_Request_default_instance_;
PROTOBUF_CONSTEXPR AttributeContext_Response_HeadersEntry_DoNotUse::AttributeContext_Response_HeadersEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AttributeContext_Response_HeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_Response_HeadersEntry_DoNotUseDefaultTypeInternal _AttributeContext_Response_HeadersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AttributeContext_Response::AttributeContext_Response(
    ::_pbi::ConstantInitialized)
  : headers_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , time_(nullptr)
  , backend_latency_(nullptr)
  , code_(int64_t{0})
  , size_(int64_t{0}){}
struct AttributeContext_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeContext_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeContext_ResponseDefaultTypeInternal() {}
  union {
    AttributeContext_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_ResponseDefaultTypeInternal _AttributeContext_Response_default_instance_;
PROTOBUF_CONSTEXPR AttributeContext_Resource_LabelsEntry_DoNotUse::AttributeContext_Resource_LabelsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AttributeContext_Resource_LabelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_Resource_LabelsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Resource_LabelsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AttributeContext_Resource_AnnotationsEntry_DoNotUse::AttributeContext_Resource_AnnotationsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct AttributeContext_Resource_AnnotationsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeContext_Resource_AnnotationsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeContext_Resource_AnnotationsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AttributeContext_Resource_AnnotationsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_Resource_AnnotationsEntry_DoNotUseDefaultTypeInternal _AttributeContext_Resource_AnnotationsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AttributeContext_Resource::AttributeContext_Resource(
    ::_pbi::ConstantInitialized)
  : labels_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , annotations_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , service_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , uid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , display_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , etag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , location_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , create_time_(nullptr)
  , update_time_(nullptr)
  , delete_time_(nullptr){}
struct AttributeContext_ResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeContext_ResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeContext_ResourceDefaultTypeInternal() {}
  union {
    AttributeContext_Resource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContext_ResourceDefaultTypeInternal _AttributeContext_Resource_default_instance_;
PROTOBUF_CONSTEXPR AttributeContext::AttributeContext(
    ::_pbi::ConstantInitialized)
  : extensions_()
  , source_(nullptr)
  , destination_(nullptr)
  , request_(nullptr)
  , response_(nullptr)
  , resource_(nullptr)
  , api_(nullptr)
  , origin_(nullptr){}
struct AttributeContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeContextDefaultTypeInternal() {}
  union {
    AttributeContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeContextDefaultTypeInternal _AttributeContext_default_instance_;
}  // namespace context
}  // namespace rpc
}  // namespace google
static ::_pb::Metadata file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto = nullptr;

const uint32_t TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer, ip_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer, port_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer, labels_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer, principal_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Peer, region_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Api, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Api, service_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Api, operation_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Api, protocol_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Api, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, principal_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, audiences_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, presenter_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, claims_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Auth, access_levels_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, id_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, method_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, headers_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, path_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, host_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, scheme_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, query_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, time_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, size_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, protocol_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, reason_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Request, auth_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, code_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, size_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, headers_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, time_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Response, backend_latency_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, service_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, name_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, type_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, labels_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, uid_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, annotations_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, display_name_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, create_time_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, update_time_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, delete_time_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, etag_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext_Resource, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, origin_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, source_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, destination_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, request_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, response_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, resource_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, api_),
  PROTOBUF_FIELD_OFFSET(::google::rpc::context::AttributeContext, extensions_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::google::rpc::context::AttributeContext_Peer)},
  { 21, -1, -1, sizeof(::google::rpc::context::AttributeContext_Api)},
  { 31, -1, -1, sizeof(::google::rpc::context::AttributeContext_Auth)},
  { 42, 50, -1, sizeof(::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse)},
  { 52, -1, -1, sizeof(::google::rpc::context::AttributeContext_Request)},
  { 70, 78, -1, sizeof(::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse)},
  { 80, -1, -1, sizeof(::google::rpc::context::AttributeContext_Response)},
  { 91, 99, -1, sizeof(::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse)},
  { 101, 109, -1, sizeof(::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse)},
  { 111, -1, -1, sizeof(::google::rpc::context::AttributeContext_Resource)},
  { 129, -1, -1, sizeof(::google::rpc::context::AttributeContext)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::google::rpc::context::_AttributeContext_Peer_LabelsEntry_DoNotUse_default_instance_._instance,
  &::google::rpc::context::_AttributeContext_Peer_default_instance_._instance,
  &::google::rpc::context::_AttributeContext_Api_default_instance_._instance,
  &::google::rpc::context::_AttributeContext_Auth_default_instance_._instance,
  &::google::rpc::context::_AttributeContext_Request_HeadersEntry_DoNotUse_default_instance_._instance,
  &::google::rpc::context::_AttributeContext_Request_default_instance_._instance,
  &::google::rpc::context::_AttributeContext_Response_HeadersEntry_DoNotUse_default_instance_._instance,
  &::google::rpc::context::_AttributeContext_Response_default_instance_._instance,
  &::google::rpc::context::_AttributeContext_Resource_LabelsEntry_DoNotUse_default_instance_._instance,
  &::google::rpc::context::_AttributeContext_Resource_AnnotationsEntry_DoNotUse_default_instance_._instance,
  &::google::rpc::context::_AttributeContext_Resource_default_instance_._instance,
  &::google::rpc::context::_AttributeContext_default_instance_._instance,
};

const char descriptor_table_protodef_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*google/rpc/context/attribute_context.p"
  "roto\022\022google.rpc.context\032\031google/protobu"
  "f/any.proto\032\036google/protobuf/duration.pr"
  "oto\032\034google/protobuf/struct.proto\032\037googl"
  "e/protobuf/timestamp.proto\"\201\024\n\020Attribute"
  "Context\022A\n\006origin\030\007 \001(\0132).google.rpc.con"
  "text.AttributeContext.PeerR\006origin\022A\n\006so"
  "urce\030\001 \001(\0132).google.rpc.context.Attribut"
  "eContext.PeerR\006source\022K\n\013destination\030\002 \001"
  "(\0132).google.rpc.context.AttributeContext"
  ".PeerR\013destination\022F\n\007request\030\003 \001(\0132,.go"
  "ogle.rpc.context.AttributeContext.Reques"
  "tR\007request\022I\n\010response\030\004 \001(\0132-.google.rp"
  "c.context.AttributeContext.ResponseR\010res"
  "ponse\022I\n\010resource\030\005 \001(\0132-.google.rpc.con"
  "text.AttributeContext.ResourceR\010resource"
  "\022:\n\003api\030\006 \001(\0132(.google.rpc.context.Attri"
  "buteContext.ApiR\003api\0224\n\nextensions\030\010 \003(\013"
  "2\024.google.protobuf.AnyR\nextensions\032\363\001\n\004P"
  "eer\022\016\n\002ip\030\001 \001(\tR\002ip\022\022\n\004port\030\002 \001(\003R\004port\022"
  "M\n\006labels\030\006 \003(\01325.google.rpc.context.Att"
  "ributeContext.Peer.LabelsEntryR\006labels\022\034"
  "\n\tprincipal\030\007 \001(\tR\tprincipal\022\037\n\013region_c"
  "ode\030\010 \001(\tR\nregionCode\0329\n\013LabelsEntry\022\020\n\003"
  "key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001"
  "\032s\n\003Api\022\030\n\007service\030\001 \001(\tR\007service\022\034\n\tope"
  "ration\030\002 \001(\tR\toperation\022\032\n\010protocol\030\003 \001("
  "\tR\010protocol\022\030\n\007version\030\004 \001(\tR\007version\032\266\001"
  "\n\004Auth\022\034\n\tprincipal\030\001 \001(\tR\tprincipal\022\034\n\t"
  "audiences\030\002 \003(\tR\taudiences\022\034\n\tpresenter\030"
  "\003 \001(\tR\tpresenter\022/\n\006claims\030\004 \001(\0132\027.googl"
  "e.protobuf.StructR\006claims\022#\n\raccess_leve"
  "ls\030\005 \003(\tR\014accessLevels\032\317\003\n\007Request\022\016\n\002id"
  "\030\001 \001(\tR\002id\022\026\n\006method\030\002 \001(\tR\006method\022S\n\007he"
  "aders\030\003 \003(\01329.google.rpc.context.Attribu"
  "teContext.Request.HeadersEntryR\007headers\022"
  "\022\n\004path\030\004 \001(\tR\004path\022\022\n\004host\030\005 \001(\tR\004host\022"
  "\026\n\006scheme\030\006 \001(\tR\006scheme\022\024\n\005query\030\007 \001(\tR\005"
  "query\022.\n\004time\030\t \001(\0132\032.google.protobuf.Ti"
  "mestampR\004time\022\022\n\004size\030\n \001(\003R\004size\022\032\n\010pro"
  "tocol\030\013 \001(\tR\010protocol\022\026\n\006reason\030\014 \001(\tR\006r"
  "eason\022=\n\004auth\030\r \001(\0132).google.rpc.context"
  ".AttributeContext.AuthR\004auth\032:\n\014HeadersE"
  "ntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005v"
  "alue:\0028\001\032\270\002\n\010Response\022\022\n\004code\030\001 \001(\003R\004cod"
  "e\022\022\n\004size\030\002 \001(\003R\004size\022T\n\007headers\030\003 \003(\0132:"
  ".google.rpc.context.AttributeContext.Res"
  "ponse.HeadersEntryR\007headers\022.\n\004time\030\004 \001("
  "\0132\032.google.protobuf.TimestampR\004time\022B\n\017b"
  "ackend_latency\030\005 \001(\0132\031.google.protobuf.D"
  "urationR\016backendLatency\032:\n\014HeadersEntry\022"
  "\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:"
  "\0028\001\032\230\005\n\010Resource\022\030\n\007service\030\001 \001(\tR\007servi"
  "ce\022\022\n\004name\030\002 \001(\tR\004name\022\022\n\004type\030\003 \001(\tR\004ty"
  "pe\022Q\n\006labels\030\004 \003(\01329.google.rpc.context."
  "AttributeContext.Resource.LabelsEntryR\006l"
  "abels\022\020\n\003uid\030\005 \001(\tR\003uid\022`\n\013annotations\030\006"
  " \003(\0132>.google.rpc.context.AttributeConte"
  "xt.Resource.AnnotationsEntryR\013annotation"
  "s\022!\n\014display_name\030\007 \001(\tR\013displayName\022;\n\013"
  "create_time\030\010 \001(\0132\032.google.protobuf.Time"
  "stampR\ncreateTime\022;\n\013update_time\030\t \001(\0132\032"
  ".google.protobuf.TimestampR\nupdateTime\022;"
  "\n\013delete_time\030\n \001(\0132\032.google.protobuf.Ti"
  "mestampR\ndeleteTime\022\022\n\004etag\030\013 \001(\tR\004etag\022"
  "\032\n\010location\030\014 \001(\tR\010location\0329\n\013LabelsEnt"
  "ry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005val"
  "ue:\0028\001\032>\n\020AnnotationsEntry\022\020\n\003key\030\001 \001(\tR"
  "\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001B\213\001\n\026com.g"
  "oogle.rpc.contextB\025AttributeContextProto"
  "P\001ZUgoogle.golang.org/genproto/googleapi"
  "s/rpc/context/attribute_context;attribut"
  "e_context\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto = {
    false, false, 2900, descriptor_table_protodef_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto,
    "google/rpc/context/attribute_context.proto",
    &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once, descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_deps, 4, 12,
    schemas, file_default_instances, TableStruct_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto::offsets,
    file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto, file_level_enum_descriptors_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto,
    file_level_service_descriptors_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter() {
  return &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto(&descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto);
namespace google {
namespace rpc {
namespace context {

// ===================================================================

AttributeContext_Peer_LabelsEntry_DoNotUse::AttributeContext_Peer_LabelsEntry_DoNotUse() {}
AttributeContext_Peer_LabelsEntry_DoNotUse::AttributeContext_Peer_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AttributeContext_Peer_LabelsEntry_DoNotUse::MergeFrom(const AttributeContext_Peer_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AttributeContext_Peer_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[0]);
}

// ===================================================================

class AttributeContext_Peer::_Internal {
 public:
};

AttributeContext_Peer::AttributeContext_Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  labels_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AttributeContext_Peer::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext.Peer)
}
AttributeContext_Peer::AttributeContext_Peer(const AttributeContext_Peer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(from._internal_ip(), 
      GetArenaForAllocation());
  }
  principal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    principal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_principal().empty()) {
    principal_.Set(from._internal_principal(), 
      GetArenaForAllocation());
  }
  region_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    region_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_region_code().empty()) {
    region_code_.Set(from._internal_region_code(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext.Peer)
}

inline void AttributeContext_Peer::SharedCtor() {
ip_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
principal_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  principal_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
region_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  region_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
port_ = int64_t{0};
}

AttributeContext_Peer::~AttributeContext_Peer() {
  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext.Peer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AttributeContext_Peer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  labels_.Destruct();
  ip_.Destroy();
  principal_.Destroy();
  region_code_.Destroy();
}

void AttributeContext_Peer::ArenaDtor(void* object) {
  AttributeContext_Peer* _this = reinterpret_cast< AttributeContext_Peer* >(object);
  _this->labels_.Destruct();
}
void AttributeContext_Peer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttributeContext_Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext.Peer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  ip_.ClearToEmpty();
  principal_.ClearToEmpty();
  region_code_.ClearToEmpty();
  port_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeContext_Peer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip = 1 [json_name = "ip"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Peer.ip"));
        } else
          goto handle_unusual;
        continue;
      // int64 port = 2 [json_name = "port"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> labels = 6 [json_name = "labels"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string principal = 7 [json_name = "principal"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_principal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Peer.principal"));
        } else
          goto handle_unusual;
        continue;
      // string region_code = 8 [json_name = "regionCode"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_region_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Peer.region_code"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeContext_Peer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext.Peer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1 [json_name = "ip"];
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Peer.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int64 port = 2 [json_name = "port"];
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_port(), target);
  }

  // map<string, string> labels = 6 [json_name = "labels"];
  if (!this->_internal_labels().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AttributeContext_Peer_LabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_labels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.rpc.context.AttributeContext.Peer.LabelsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.rpc.context.AttributeContext.Peer.LabelsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string principal = 7 [json_name = "principal"];
  if (!this->_internal_principal().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_principal().data(), static_cast<int>(this->_internal_principal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Peer.principal");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_principal(), target);
  }

  // string region_code = 8 [json_name = "regionCode"];
  if (!this->_internal_region_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region_code().data(), static_cast<int>(this->_internal_region_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Peer.region_code");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_region_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext.Peer)
  return target;
}

size_t AttributeContext_Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext.Peer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 6 [json_name = "labels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += AttributeContext_Peer_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string ip = 1 [json_name = "ip"];
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string principal = 7 [json_name = "principal"];
  if (!this->_internal_principal().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_principal());
  }

  // string region_code = 8 [json_name = "regionCode"];
  if (!this->_internal_region_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region_code());
  }

  // int64 port = 2 [json_name = "port"];
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeContext_Peer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AttributeContext_Peer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeContext_Peer::GetClassData() const { return &_class_data_; }

void AttributeContext_Peer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AttributeContext_Peer *>(to)->MergeFrom(
      static_cast<const AttributeContext_Peer &>(from));
}


void AttributeContext_Peer::MergeFrom(const AttributeContext_Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from._internal_principal().empty()) {
    _internal_set_principal(from._internal_principal());
  }
  if (!from._internal_region_code().empty()) {
    _internal_set_region_code(from._internal_region_code());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeContext_Peer::CopyFrom(const AttributeContext_Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeContext_Peer::IsInitialized() const {
  return true;
}

void AttributeContext_Peer::InternalSwap(AttributeContext_Peer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &principal_, lhs_arena,
      &other->principal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &region_code_, lhs_arena,
      &other->region_code_, rhs_arena
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeContext_Peer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[1]);
}

// ===================================================================

class AttributeContext_Api::_Internal {
 public:
};

AttributeContext_Api::AttributeContext_Api(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext.Api)
}
AttributeContext_Api::AttributeContext_Api(const AttributeContext_Api& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service().empty()) {
    service_.Set(from._internal_service(), 
      GetArenaForAllocation());
  }
  operation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    operation_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_operation().empty()) {
    operation_.Set(from._internal_operation(), 
      GetArenaForAllocation());
  }
  protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    protocol_.Set(from._internal_protocol(), 
      GetArenaForAllocation());
  }
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext.Api)
}

inline void AttributeContext_Api::SharedCtor() {
service_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
operation_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  operation_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
protocol_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  protocol_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttributeContext_Api::~AttributeContext_Api() {
  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext.Api)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributeContext_Api::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_.Destroy();
  operation_.Destroy();
  protocol_.Destroy();
  version_.Destroy();
}

void AttributeContext_Api::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttributeContext_Api::Clear() {
// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext.Api)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_.ClearToEmpty();
  operation_.ClearToEmpty();
  protocol_.ClearToEmpty();
  version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeContext_Api::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service = 1 [json_name = "service"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Api.service"));
        } else
          goto handle_unusual;
        continue;
      // string operation = 2 [json_name = "operation"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_operation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Api.operation"));
        } else
          goto handle_unusual;
        continue;
      // string protocol = 3 [json_name = "protocol"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Api.protocol"));
        } else
          goto handle_unusual;
        continue;
      // string version = 4 [json_name = "version"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Api.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeContext_Api::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext.Api)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1 [json_name = "service"];
  if (!this->_internal_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Api.service");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service(), target);
  }

  // string operation = 2 [json_name = "operation"];
  if (!this->_internal_operation().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation().data(), static_cast<int>(this->_internal_operation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Api.operation");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operation(), target);
  }

  // string protocol = 3 [json_name = "protocol"];
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Api.protocol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_protocol(), target);
  }

  // string version = 4 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Api.version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext.Api)
  return target;
}

size_t AttributeContext_Api::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext.Api)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service = 1 [json_name = "service"];
  if (!this->_internal_service().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  // string operation = 2 [json_name = "operation"];
  if (!this->_internal_operation().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation());
  }

  // string protocol = 3 [json_name = "protocol"];
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // string version = 4 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeContext_Api::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AttributeContext_Api::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeContext_Api::GetClassData() const { return &_class_data_; }

void AttributeContext_Api::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AttributeContext_Api *>(to)->MergeFrom(
      static_cast<const AttributeContext_Api &>(from));
}


void AttributeContext_Api::MergeFrom(const AttributeContext_Api& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext.Api)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service().empty()) {
    _internal_set_service(from._internal_service());
  }
  if (!from._internal_operation().empty()) {
    _internal_set_operation(from._internal_operation());
  }
  if (!from._internal_protocol().empty()) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeContext_Api::CopyFrom(const AttributeContext_Api& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext.Api)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeContext_Api::IsInitialized() const {
  return true;
}

void AttributeContext_Api::InternalSwap(AttributeContext_Api* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &service_, lhs_arena,
      &other->service_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &operation_, lhs_arena,
      &other->operation_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &protocol_, lhs_arena,
      &other->protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeContext_Api::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[2]);
}

// ===================================================================

class AttributeContext_Auth::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& claims(const AttributeContext_Auth* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
AttributeContext_Auth::_Internal::claims(const AttributeContext_Auth* msg) {
  return *msg->claims_;
}
void AttributeContext_Auth::clear_claims() {
  if (GetArenaForAllocation() == nullptr && claims_ != nullptr) {
    delete claims_;
  }
  claims_ = nullptr;
}
AttributeContext_Auth::AttributeContext_Auth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  audiences_(arena),
  access_levels_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext.Auth)
}
AttributeContext_Auth::AttributeContext_Auth(const AttributeContext_Auth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      audiences_(from.audiences_),
      access_levels_(from.access_levels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  principal_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    principal_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_principal().empty()) {
    principal_.Set(from._internal_principal(), 
      GetArenaForAllocation());
  }
  presenter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    presenter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_presenter().empty()) {
    presenter_.Set(from._internal_presenter(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_claims()) {
    claims_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.claims_);
  } else {
    claims_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext.Auth)
}

inline void AttributeContext_Auth::SharedCtor() {
principal_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  principal_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
presenter_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  presenter_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
claims_ = nullptr;
}

AttributeContext_Auth::~AttributeContext_Auth() {
  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext.Auth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributeContext_Auth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  principal_.Destroy();
  presenter_.Destroy();
  if (this != internal_default_instance()) delete claims_;
}

void AttributeContext_Auth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttributeContext_Auth::Clear() {
// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext.Auth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  audiences_.Clear();
  access_levels_.Clear();
  principal_.ClearToEmpty();
  presenter_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && claims_ != nullptr) {
    delete claims_;
  }
  claims_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeContext_Auth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string principal = 1 [json_name = "principal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_principal();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Auth.principal"));
        } else
          goto handle_unusual;
        continue;
      // repeated string audiences = 2 [json_name = "audiences"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_audiences();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Auth.audiences"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string presenter = 3 [json_name = "presenter"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_presenter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Auth.presenter"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct claims = 4 [json_name = "claims"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_claims(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string access_levels = 5 [json_name = "accessLevels"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_access_levels();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Auth.access_levels"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeContext_Auth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext.Auth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string principal = 1 [json_name = "principal"];
  if (!this->_internal_principal().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_principal().data(), static_cast<int>(this->_internal_principal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Auth.principal");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_principal(), target);
  }

  // repeated string audiences = 2 [json_name = "audiences"];
  for (int i = 0, n = this->_internal_audiences_size(); i < n; i++) {
    const auto& s = this->_internal_audiences(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Auth.audiences");
    target = stream->WriteString(2, s, target);
  }

  // string presenter = 3 [json_name = "presenter"];
  if (!this->_internal_presenter().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_presenter().data(), static_cast<int>(this->_internal_presenter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Auth.presenter");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_presenter(), target);
  }

  // .google.protobuf.Struct claims = 4 [json_name = "claims"];
  if (this->_internal_has_claims()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::claims(this),
        _Internal::claims(this).GetCachedSize(), target, stream);
  }

  // repeated string access_levels = 5 [json_name = "accessLevels"];
  for (int i = 0, n = this->_internal_access_levels_size(); i < n; i++) {
    const auto& s = this->_internal_access_levels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Auth.access_levels");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext.Auth)
  return target;
}

size_t AttributeContext_Auth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext.Auth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string audiences = 2 [json_name = "audiences"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(audiences_.size());
  for (int i = 0, n = audiences_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      audiences_.Get(i));
  }

  // repeated string access_levels = 5 [json_name = "accessLevels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(access_levels_.size());
  for (int i = 0, n = access_levels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      access_levels_.Get(i));
  }

  // string principal = 1 [json_name = "principal"];
  if (!this->_internal_principal().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_principal());
  }

  // string presenter = 3 [json_name = "presenter"];
  if (!this->_internal_presenter().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_presenter());
  }

  // .google.protobuf.Struct claims = 4 [json_name = "claims"];
  if (this->_internal_has_claims()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *claims_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeContext_Auth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AttributeContext_Auth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeContext_Auth::GetClassData() const { return &_class_data_; }

void AttributeContext_Auth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AttributeContext_Auth *>(to)->MergeFrom(
      static_cast<const AttributeContext_Auth &>(from));
}


void AttributeContext_Auth::MergeFrom(const AttributeContext_Auth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext.Auth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  audiences_.MergeFrom(from.audiences_);
  access_levels_.MergeFrom(from.access_levels_);
  if (!from._internal_principal().empty()) {
    _internal_set_principal(from._internal_principal());
  }
  if (!from._internal_presenter().empty()) {
    _internal_set_presenter(from._internal_presenter());
  }
  if (from._internal_has_claims()) {
    _internal_mutable_claims()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_claims());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeContext_Auth::CopyFrom(const AttributeContext_Auth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext.Auth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeContext_Auth::IsInitialized() const {
  return true;
}

void AttributeContext_Auth::InternalSwap(AttributeContext_Auth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  audiences_.InternalSwap(&other->audiences_);
  access_levels_.InternalSwap(&other->access_levels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &principal_, lhs_arena,
      &other->principal_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &presenter_, lhs_arena,
      &other->presenter_, rhs_arena
  );
  swap(claims_, other->claims_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeContext_Auth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[3]);
}

// ===================================================================

AttributeContext_Request_HeadersEntry_DoNotUse::AttributeContext_Request_HeadersEntry_DoNotUse() {}
AttributeContext_Request_HeadersEntry_DoNotUse::AttributeContext_Request_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AttributeContext_Request_HeadersEntry_DoNotUse::MergeFrom(const AttributeContext_Request_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AttributeContext_Request_HeadersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[4]);
}

// ===================================================================

class AttributeContext_Request::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const AttributeContext_Request* msg);
  static const ::google::rpc::context::AttributeContext_Auth& auth(const AttributeContext_Request* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AttributeContext_Request::_Internal::time(const AttributeContext_Request* msg) {
  return *msg->time_;
}
const ::google::rpc::context::AttributeContext_Auth&
AttributeContext_Request::_Internal::auth(const AttributeContext_Request* msg) {
  return *msg->auth_;
}
void AttributeContext_Request::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
AttributeContext_Request::AttributeContext_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AttributeContext_Request::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext.Request)
}
AttributeContext_Request::AttributeContext_Request(const AttributeContext_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    method_.Set(from._internal_method(), 
      GetArenaForAllocation());
  }
  path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(from._internal_path(), 
      GetArenaForAllocation());
  }
  host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    host_.Set(from._internal_host(), 
      GetArenaForAllocation());
  }
  scheme_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    scheme_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scheme().empty()) {
    scheme_.Set(from._internal_scheme(), 
      GetArenaForAllocation());
  }
  query_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    query_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_query().empty()) {
    query_.Set(from._internal_query(), 
      GetArenaForAllocation());
  }
  protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    protocol_.Set(from._internal_protocol(), 
      GetArenaForAllocation());
  }
  reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    reason_.Set(from._internal_reason(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_auth()) {
    auth_ = new ::google::rpc::context::AttributeContext_Auth(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext.Request)
}

inline void AttributeContext_Request::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
method_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
host_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
scheme_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  scheme_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
query_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  query_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
protocol_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  protocol_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
reason_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reason_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&time_)) + sizeof(size_));
}

AttributeContext_Request::~AttributeContext_Request() {
  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext.Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AttributeContext_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  headers_.Destruct();
  id_.Destroy();
  method_.Destroy();
  path_.Destroy();
  host_.Destroy();
  scheme_.Destroy();
  query_.Destroy();
  protocol_.Destroy();
  reason_.Destroy();
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete auth_;
}

void AttributeContext_Request::ArenaDtor(void* object) {
  AttributeContext_Request* _this = reinterpret_cast< AttributeContext_Request* >(object);
  _this->headers_.Destruct();
}
void AttributeContext_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttributeContext_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  id_.ClearToEmpty();
  method_.ClearToEmpty();
  path_.ClearToEmpty();
  host_.ClearToEmpty();
  scheme_.ClearToEmpty();
  query_.ClearToEmpty();
  protocol_.ClearToEmpty();
  reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  size_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeContext_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Request.id"));
        } else
          goto handle_unusual;
        continue;
      // string method = 2 [json_name = "method"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Request.method"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> headers = 3 [json_name = "headers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string path = 4 [json_name = "path"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Request.path"));
        } else
          goto handle_unusual;
        continue;
      // string host = 5 [json_name = "host"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Request.host"));
        } else
          goto handle_unusual;
        continue;
      // string scheme = 6 [json_name = "scheme"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_scheme();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Request.scheme"));
        } else
          goto handle_unusual;
        continue;
      // string query = 7 [json_name = "query"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_query();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Request.query"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 9 [json_name = "time"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 10 [json_name = "size"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string protocol = 11 [json_name = "protocol"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Request.protocol"));
        } else
          goto handle_unusual;
        continue;
      // string reason = 12 [json_name = "reason"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Request.reason"));
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.context.AttributeContext.Auth auth = 13 [json_name = "auth"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeContext_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Request.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string method = 2 [json_name = "method"];
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Request.method");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method(), target);
  }

  // map<string, string> headers = 3 [json_name = "headers"];
  if (!this->_internal_headers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AttributeContext_Request_HeadersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_headers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.rpc.context.AttributeContext.Request.HeadersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.rpc.context.AttributeContext.Request.HeadersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string path = 4 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Request.path");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_path(), target);
  }

  // string host = 5 [json_name = "host"];
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Request.host");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_host(), target);
  }

  // string scheme = 6 [json_name = "scheme"];
  if (!this->_internal_scheme().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scheme().data(), static_cast<int>(this->_internal_scheme().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Request.scheme");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_scheme(), target);
  }

  // string query = 7 [json_name = "query"];
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Request.query");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_query(), target);
  }

  // .google.protobuf.Timestamp time = 9 [json_name = "time"];
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // int64 size = 10 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_size(), target);
  }

  // string protocol = 11 [json_name = "protocol"];
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Request.protocol");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_protocol(), target);
  }

  // string reason = 12 [json_name = "reason"];
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Request.reason");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_reason(), target);
  }

  // .google.rpc.context.AttributeContext.Auth auth = 13 [json_name = "auth"];
  if (this->_internal_has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::auth(this),
        _Internal::auth(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext.Request)
  return target;
}

size_t AttributeContext_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext.Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 3 [json_name = "headers"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += AttributeContext_Request_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string method = 2 [json_name = "method"];
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string path = 4 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // string host = 5 [json_name = "host"];
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string scheme = 6 [json_name = "scheme"];
  if (!this->_internal_scheme().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scheme());
  }

  // string query = 7 [json_name = "query"];
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string protocol = 11 [json_name = "protocol"];
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // string reason = 12 [json_name = "reason"];
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .google.protobuf.Timestamp time = 9 [json_name = "time"];
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .google.rpc.context.AttributeContext.Auth auth = 13 [json_name = "auth"];
  if (this->_internal_has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  // int64 size = 10 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeContext_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AttributeContext_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeContext_Request::GetClassData() const { return &_class_data_; }

void AttributeContext_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AttributeContext_Request *>(to)->MergeFrom(
      static_cast<const AttributeContext_Request &>(from));
}


void AttributeContext_Request::MergeFrom(const AttributeContext_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext.Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_method().empty()) {
    _internal_set_method(from._internal_method());
  }
  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (!from._internal_host().empty()) {
    _internal_set_host(from._internal_host());
  }
  if (!from._internal_scheme().empty()) {
    _internal_set_scheme(from._internal_scheme());
  }
  if (!from._internal_query().empty()) {
    _internal_set_query(from._internal_query());
  }
  if (!from._internal_protocol().empty()) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (!from._internal_reason().empty()) {
    _internal_set_reason(from._internal_reason());
  }
  if (from._internal_has_time()) {
    _internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from._internal_has_auth()) {
    _internal_mutable_auth()->::google::rpc::context::AttributeContext_Auth::MergeFrom(from._internal_auth());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeContext_Request::CopyFrom(const AttributeContext_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeContext_Request::IsInitialized() const {
  return true;
}

void AttributeContext_Request::InternalSwap(AttributeContext_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &method_, lhs_arena,
      &other->method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &host_, lhs_arena,
      &other->host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &scheme_, lhs_arena,
      &other->scheme_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &query_, lhs_arena,
      &other->query_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &protocol_, lhs_arena,
      &other->protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reason_, lhs_arena,
      &other->reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttributeContext_Request, size_)
      + sizeof(AttributeContext_Request::size_)
      - PROTOBUF_FIELD_OFFSET(AttributeContext_Request, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeContext_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[5]);
}

// ===================================================================

AttributeContext_Response_HeadersEntry_DoNotUse::AttributeContext_Response_HeadersEntry_DoNotUse() {}
AttributeContext_Response_HeadersEntry_DoNotUse::AttributeContext_Response_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AttributeContext_Response_HeadersEntry_DoNotUse::MergeFrom(const AttributeContext_Response_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AttributeContext_Response_HeadersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[6]);
}

// ===================================================================

class AttributeContext_Response::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const AttributeContext_Response* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& backend_latency(const AttributeContext_Response* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AttributeContext_Response::_Internal::time(const AttributeContext_Response* msg) {
  return *msg->time_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
AttributeContext_Response::_Internal::backend_latency(const AttributeContext_Response* msg) {
  return *msg->backend_latency_;
}
void AttributeContext_Response::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
void AttributeContext_Response::clear_backend_latency() {
  if (GetArenaForAllocation() == nullptr && backend_latency_ != nullptr) {
    delete backend_latency_;
  }
  backend_latency_ = nullptr;
}
AttributeContext_Response::AttributeContext_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AttributeContext_Response::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext.Response)
}
AttributeContext_Response::AttributeContext_Response(const AttributeContext_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  if (from._internal_has_time()) {
    time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_backend_latency()) {
    backend_latency_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.backend_latency_);
  } else {
    backend_latency_ = nullptr;
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&code_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext.Response)
}

inline void AttributeContext_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&time_)) + sizeof(size_));
}

AttributeContext_Response::~AttributeContext_Response() {
  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AttributeContext_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  headers_.Destruct();
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete backend_latency_;
}

void AttributeContext_Response::ArenaDtor(void* object) {
  AttributeContext_Response* _this = reinterpret_cast< AttributeContext_Response* >(object);
  _this->headers_.Destruct();
}
void AttributeContext_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttributeContext_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && backend_latency_ != nullptr) {
    delete backend_latency_;
  }
  backend_latency_ = nullptr;
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&code_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeContext_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 code = 1 [json_name = "code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2 [json_name = "size"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> headers = 3 [json_name = "headers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 4 [json_name = "time"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration backend_latency = 5 [json_name = "backendLatency"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_backend_latency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeContext_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 code = 1 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_code(), target);
  }

  // int64 size = 2 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // map<string, string> headers = 3 [json_name = "headers"];
  if (!this->_internal_headers().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AttributeContext_Response_HeadersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_headers();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.rpc.context.AttributeContext.Response.HeadersEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.rpc.context.AttributeContext.Response.HeadersEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Timestamp time = 4 [json_name = "time"];
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration backend_latency = 5 [json_name = "backendLatency"];
  if (this->_internal_has_backend_latency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::backend_latency(this),
        _Internal::backend_latency(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext.Response)
  return target;
}

size_t AttributeContext_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 3 [json_name = "headers"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += AttributeContext_Response_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.Timestamp time = 4 [json_name = "time"];
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .google.protobuf.Duration backend_latency = 5 [json_name = "backendLatency"];
  if (this->_internal_has_backend_latency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *backend_latency_);
  }

  // int64 code = 1 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_code());
  }

  // int64 size = 2 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeContext_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AttributeContext_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeContext_Response::GetClassData() const { return &_class_data_; }

void AttributeContext_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AttributeContext_Response *>(to)->MergeFrom(
      static_cast<const AttributeContext_Response &>(from));
}


void AttributeContext_Response::MergeFrom(const AttributeContext_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext.Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from._internal_has_time()) {
    _internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from._internal_has_backend_latency()) {
    _internal_mutable_backend_latency()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_backend_latency());
  }
  if (from._internal_code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeContext_Response::CopyFrom(const AttributeContext_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeContext_Response::IsInitialized() const {
  return true;
}

void AttributeContext_Response::InternalSwap(AttributeContext_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttributeContext_Response, size_)
      + sizeof(AttributeContext_Response::size_)
      - PROTOBUF_FIELD_OFFSET(AttributeContext_Response, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeContext_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[7]);
}

// ===================================================================

AttributeContext_Resource_LabelsEntry_DoNotUse::AttributeContext_Resource_LabelsEntry_DoNotUse() {}
AttributeContext_Resource_LabelsEntry_DoNotUse::AttributeContext_Resource_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AttributeContext_Resource_LabelsEntry_DoNotUse::MergeFrom(const AttributeContext_Resource_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AttributeContext_Resource_LabelsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[8]);
}

// ===================================================================

AttributeContext_Resource_AnnotationsEntry_DoNotUse::AttributeContext_Resource_AnnotationsEntry_DoNotUse() {}
AttributeContext_Resource_AnnotationsEntry_DoNotUse::AttributeContext_Resource_AnnotationsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AttributeContext_Resource_AnnotationsEntry_DoNotUse::MergeFrom(const AttributeContext_Resource_AnnotationsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AttributeContext_Resource_AnnotationsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[9]);
}

// ===================================================================

class AttributeContext_Resource::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const AttributeContext_Resource* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const AttributeContext_Resource* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& delete_time(const AttributeContext_Resource* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AttributeContext_Resource::_Internal::create_time(const AttributeContext_Resource* msg) {
  return *msg->create_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AttributeContext_Resource::_Internal::update_time(const AttributeContext_Resource* msg) {
  return *msg->update_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AttributeContext_Resource::_Internal::delete_time(const AttributeContext_Resource* msg) {
  return *msg->delete_time_;
}
void AttributeContext_Resource::clear_create_time() {
  if (GetArenaForAllocation() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void AttributeContext_Resource::clear_update_time() {
  if (GetArenaForAllocation() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
void AttributeContext_Resource::clear_delete_time() {
  if (GetArenaForAllocation() == nullptr && delete_time_ != nullptr) {
    delete delete_time_;
  }
  delete_time_ = nullptr;
}
AttributeContext_Resource::AttributeContext_Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  labels_(arena),
  annotations_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AttributeContext_Resource::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext.Resource)
}
AttributeContext_Resource::AttributeContext_Resource(const AttributeContext_Resource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  service_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service().empty()) {
    service_.Set(from._internal_service(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  uid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uid().empty()) {
    uid_.Set(from._internal_uid(), 
      GetArenaForAllocation());
  }
  display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    display_name_.Set(from._internal_display_name(), 
      GetArenaForAllocation());
  }
  etag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    etag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_etag().empty()) {
    etag_.Set(from._internal_etag(), 
      GetArenaForAllocation());
  }
  location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    location_.Set(from._internal_location(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_create_time()) {
    create_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from._internal_has_update_time()) {
    update_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  if (from._internal_has_delete_time()) {
    delete_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.delete_time_);
  } else {
    delete_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext.Resource)
}

inline void AttributeContext_Resource::SharedCtor() {
service_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
uid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
display_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
etag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  etag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
location_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&create_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delete_time_) -
    reinterpret_cast<char*>(&create_time_)) + sizeof(delete_time_));
}

AttributeContext_Resource::~AttributeContext_Resource() {
  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext.Resource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AttributeContext_Resource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  labels_.Destruct();
  annotations_.Destruct();
  service_.Destroy();
  name_.Destroy();
  type_.Destroy();
  uid_.Destroy();
  display_name_.Destroy();
  etag_.Destroy();
  location_.Destroy();
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
  if (this != internal_default_instance()) delete delete_time_;
}

void AttributeContext_Resource::ArenaDtor(void* object) {
  AttributeContext_Resource* _this = reinterpret_cast< AttributeContext_Resource* >(object);
  _this->labels_.Destruct();
  _this->annotations_.Destruct();
}
void AttributeContext_Resource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttributeContext_Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext.Resource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  annotations_.Clear();
  service_.ClearToEmpty();
  name_.ClearToEmpty();
  type_.ClearToEmpty();
  uid_.ClearToEmpty();
  display_name_.ClearToEmpty();
  etag_.ClearToEmpty();
  location_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && delete_time_ != nullptr) {
    delete delete_time_;
  }
  delete_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeContext_Resource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service = 1 [json_name = "service"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Resource.service"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Resource.name"));
        } else
          goto handle_unusual;
        continue;
      // string type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Resource.type"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> labels = 4 [json_name = "labels"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string uid = 5 [json_name = "uid"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_uid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Resource.uid"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> annotations = 6 [json_name = "annotations"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&annotations_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string display_name = 7 [json_name = "displayName"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Resource.display_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp delete_time = 10 [json_name = "deleteTime"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string etag = 11 [json_name = "etag"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_etag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Resource.etag"));
        } else
          goto handle_unusual;
        continue;
      // string location = 12 [json_name = "location"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "google.rpc.context.AttributeContext.Resource.location"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeContext_Resource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext.Resource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service = 1 [json_name = "service"];
  if (!this->_internal_service().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service().data(), static_cast<int>(this->_internal_service().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Resource.service");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Resource.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Resource.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // map<string, string> labels = 4 [json_name = "labels"];
  if (!this->_internal_labels().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AttributeContext_Resource_LabelsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_labels();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.rpc.context.AttributeContext.Resource.LabelsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.rpc.context.AttributeContext.Resource.LabelsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string uid = 5 [json_name = "uid"];
  if (!this->_internal_uid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uid().data(), static_cast<int>(this->_internal_uid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Resource.uid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_uid(), target);
  }

  // map<string, string> annotations = 6 [json_name = "annotations"];
  if (!this->_internal_annotations().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AttributeContext_Resource_AnnotationsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_annotations();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.rpc.context.AttributeContext.Resource.AnnotationsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "google.rpc.context.AttributeContext.Resource.AnnotationsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string display_name = 7 [json_name = "displayName"];
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Resource.display_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_display_name(), target);
  }

  // .google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];
  if (this->_internal_has_create_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::create_time(this),
        _Internal::create_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];
  if (this->_internal_has_update_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::update_time(this),
        _Internal::update_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp delete_time = 10 [json_name = "deleteTime"];
  if (this->_internal_has_delete_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::delete_time(this),
        _Internal::delete_time(this).GetCachedSize(), target, stream);
  }

  // string etag = 11 [json_name = "etag"];
  if (!this->_internal_etag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_etag().data(), static_cast<int>(this->_internal_etag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Resource.etag");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_etag(), target);
  }

  // string location = 12 [json_name = "location"];
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.rpc.context.AttributeContext.Resource.location");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext.Resource)
  return target;
}

size_t AttributeContext_Resource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext.Resource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 4 [json_name = "labels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += AttributeContext_Resource_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> annotations = 6 [json_name = "annotations"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_annotations_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_annotations().begin();
      it != this->_internal_annotations().end(); ++it) {
    total_size += AttributeContext_Resource_AnnotationsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string service = 1 [json_name = "service"];
  if (!this->_internal_service().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string uid = 5 [json_name = "uid"];
  if (!this->_internal_uid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uid());
  }

  // string display_name = 7 [json_name = "displayName"];
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string etag = 11 [json_name = "etag"];
  if (!this->_internal_etag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_etag());
  }

  // string location = 12 [json_name = "location"];
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // .google.protobuf.Timestamp create_time = 8 [json_name = "createTime"];
  if (this->_internal_has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 9 [json_name = "updateTime"];
  if (this->_internal_has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.protobuf.Timestamp delete_time = 10 [json_name = "deleteTime"];
  if (this->_internal_has_delete_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *delete_time_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeContext_Resource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AttributeContext_Resource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeContext_Resource::GetClassData() const { return &_class_data_; }

void AttributeContext_Resource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AttributeContext_Resource *>(to)->MergeFrom(
      static_cast<const AttributeContext_Resource &>(from));
}


void AttributeContext_Resource::MergeFrom(const AttributeContext_Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext.Resource)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  if (!from._internal_service().empty()) {
    _internal_set_service(from._internal_service());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_uid().empty()) {
    _internal_set_uid(from._internal_uid());
  }
  if (!from._internal_display_name().empty()) {
    _internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_etag().empty()) {
    _internal_set_etag(from._internal_etag());
  }
  if (!from._internal_location().empty()) {
    _internal_set_location(from._internal_location());
  }
  if (from._internal_has_create_time()) {
    _internal_mutable_create_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from._internal_has_update_time()) {
    _internal_mutable_update_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from._internal_has_delete_time()) {
    _internal_mutable_delete_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_delete_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeContext_Resource::CopyFrom(const AttributeContext_Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeContext_Resource::IsInitialized() const {
  return true;
}

void AttributeContext_Resource::InternalSwap(AttributeContext_Resource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  annotations_.InternalSwap(&other->annotations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &service_, lhs_arena,
      &other->service_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &uid_, lhs_arena,
      &other->uid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &etag_, lhs_arena,
      &other->etag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &location_, lhs_arena,
      &other->location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, delete_time_)
      + sizeof(AttributeContext_Resource::delete_time_)
      - PROTOBUF_FIELD_OFFSET(AttributeContext_Resource, create_time_)>(
          reinterpret_cast<char*>(&create_time_),
          reinterpret_cast<char*>(&other->create_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeContext_Resource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[10]);
}

// ===================================================================

class AttributeContext::_Internal {
 public:
  static const ::google::rpc::context::AttributeContext_Peer& origin(const AttributeContext* msg);
  static const ::google::rpc::context::AttributeContext_Peer& source(const AttributeContext* msg);
  static const ::google::rpc::context::AttributeContext_Peer& destination(const AttributeContext* msg);
  static const ::google::rpc::context::AttributeContext_Request& request(const AttributeContext* msg);
  static const ::google::rpc::context::AttributeContext_Response& response(const AttributeContext* msg);
  static const ::google::rpc::context::AttributeContext_Resource& resource(const AttributeContext* msg);
  static const ::google::rpc::context::AttributeContext_Api& api(const AttributeContext* msg);
};

const ::google::rpc::context::AttributeContext_Peer&
AttributeContext::_Internal::origin(const AttributeContext* msg) {
  return *msg->origin_;
}
const ::google::rpc::context::AttributeContext_Peer&
AttributeContext::_Internal::source(const AttributeContext* msg) {
  return *msg->source_;
}
const ::google::rpc::context::AttributeContext_Peer&
AttributeContext::_Internal::destination(const AttributeContext* msg) {
  return *msg->destination_;
}
const ::google::rpc::context::AttributeContext_Request&
AttributeContext::_Internal::request(const AttributeContext* msg) {
  return *msg->request_;
}
const ::google::rpc::context::AttributeContext_Response&
AttributeContext::_Internal::response(const AttributeContext* msg) {
  return *msg->response_;
}
const ::google::rpc::context::AttributeContext_Resource&
AttributeContext::_Internal::resource(const AttributeContext* msg) {
  return *msg->resource_;
}
const ::google::rpc::context::AttributeContext_Api&
AttributeContext::_Internal::api(const AttributeContext* msg) {
  return *msg->api_;
}
void AttributeContext::clear_extensions() {
  extensions_.Clear();
}
AttributeContext::AttributeContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extensions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:google.rpc.context.AttributeContext)
}
AttributeContext::AttributeContext(const AttributeContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      extensions_(from.extensions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source()) {
    source_ = new ::google::rpc::context::AttributeContext_Peer(*from.source_);
  } else {
    source_ = nullptr;
  }
  if (from._internal_has_destination()) {
    destination_ = new ::google::rpc::context::AttributeContext_Peer(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  if (from._internal_has_request()) {
    request_ = new ::google::rpc::context::AttributeContext_Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_response()) {
    response_ = new ::google::rpc::context::AttributeContext_Response(*from.response_);
  } else {
    response_ = nullptr;
  }
  if (from._internal_has_resource()) {
    resource_ = new ::google::rpc::context::AttributeContext_Resource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  if (from._internal_has_api()) {
    api_ = new ::google::rpc::context::AttributeContext_Api(*from.api_);
  } else {
    api_ = nullptr;
  }
  if (from._internal_has_origin()) {
    origin_ = new ::google::rpc::context::AttributeContext_Peer(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.rpc.context.AttributeContext)
}

inline void AttributeContext::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&source_)) + sizeof(origin_));
}

AttributeContext::~AttributeContext() {
  // @@protoc_insertion_point(destructor:google.rpc.context.AttributeContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributeContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete source_;
  if (this != internal_default_instance()) delete destination_;
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete response_;
  if (this != internal_default_instance()) delete resource_;
  if (this != internal_default_instance()) delete api_;
  if (this != internal_default_instance()) delete origin_;
}

void AttributeContext::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttributeContext::Clear() {
// @@protoc_insertion_point(message_clear_start:google.rpc.context.AttributeContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extensions_.Clear();
  if (GetArenaForAllocation() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  if (GetArenaForAllocation() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  if (GetArenaForAllocation() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
  if (GetArenaForAllocation() == nullptr && api_ != nullptr) {
    delete api_;
  }
  api_ = nullptr;
  if (GetArenaForAllocation() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttributeContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.rpc.context.AttributeContext.Peer source = 1 [json_name = "source"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.context.AttributeContext.Peer destination = 2 [json_name = "destination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.context.AttributeContext.Request request = 3 [json_name = "request"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.context.AttributeContext.Response response = 4 [json_name = "response"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.context.AttributeContext.Resource resource = 5 [json_name = "resource"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.context.AttributeContext.Api api = 6 [json_name = "api"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_api(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.rpc.context.AttributeContext.Peer origin = 7 [json_name = "origin"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any extensions = 8 [json_name = "extensions"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributeContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.rpc.context.AttributeContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.context.AttributeContext.Peer source = 1 [json_name = "source"];
  if (this->_internal_has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source(this),
        _Internal::source(this).GetCachedSize(), target, stream);
  }

  // .google.rpc.context.AttributeContext.Peer destination = 2 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::destination(this),
        _Internal::destination(this).GetCachedSize(), target, stream);
  }

  // .google.rpc.context.AttributeContext.Request request = 3 [json_name = "request"];
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // .google.rpc.context.AttributeContext.Response response = 4 [json_name = "response"];
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // .google.rpc.context.AttributeContext.Resource resource = 5 [json_name = "resource"];
  if (this->_internal_has_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::resource(this),
        _Internal::resource(this).GetCachedSize(), target, stream);
  }

  // .google.rpc.context.AttributeContext.Api api = 6 [json_name = "api"];
  if (this->_internal_has_api()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::api(this),
        _Internal::api(this).GetCachedSize(), target, stream);
  }

  // .google.rpc.context.AttributeContext.Peer origin = 7 [json_name = "origin"];
  if (this->_internal_has_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any extensions = 8 [json_name = "extensions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extensions_size()); i < n; i++) {
    const auto& repfield = this->_internal_extensions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.rpc.context.AttributeContext)
  return target;
}

size_t AttributeContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.rpc.context.AttributeContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any extensions = 8 [json_name = "extensions"];
  total_size += 1UL * this->_internal_extensions_size();
  for (const auto& msg : this->extensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.rpc.context.AttributeContext.Peer source = 1 [json_name = "source"];
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // .google.rpc.context.AttributeContext.Peer destination = 2 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // .google.rpc.context.AttributeContext.Request request = 3 [json_name = "request"];
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // .google.rpc.context.AttributeContext.Response response = 4 [json_name = "response"];
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  // .google.rpc.context.AttributeContext.Resource resource = 5 [json_name = "resource"];
  if (this->_internal_has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_);
  }

  // .google.rpc.context.AttributeContext.Api api = 6 [json_name = "api"];
  if (this->_internal_has_api()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *api_);
  }

  // .google.rpc.context.AttributeContext.Peer origin = 7 [json_name = "origin"];
  if (this->_internal_has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttributeContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AttributeContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttributeContext::GetClassData() const { return &_class_data_; }

void AttributeContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AttributeContext *>(to)->MergeFrom(
      static_cast<const AttributeContext &>(from));
}


void AttributeContext::MergeFrom(const AttributeContext& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.rpc.context.AttributeContext)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extensions_.MergeFrom(from.extensions_);
  if (from._internal_has_source()) {
    _internal_mutable_source()->::google::rpc::context::AttributeContext_Peer::MergeFrom(from._internal_source());
  }
  if (from._internal_has_destination()) {
    _internal_mutable_destination()->::google::rpc::context::AttributeContext_Peer::MergeFrom(from._internal_destination());
  }
  if (from._internal_has_request()) {
    _internal_mutable_request()->::google::rpc::context::AttributeContext_Request::MergeFrom(from._internal_request());
  }
  if (from._internal_has_response()) {
    _internal_mutable_response()->::google::rpc::context::AttributeContext_Response::MergeFrom(from._internal_response());
  }
  if (from._internal_has_resource()) {
    _internal_mutable_resource()->::google::rpc::context::AttributeContext_Resource::MergeFrom(from._internal_resource());
  }
  if (from._internal_has_api()) {
    _internal_mutable_api()->::google::rpc::context::AttributeContext_Api::MergeFrom(from._internal_api());
  }
  if (from._internal_has_origin()) {
    _internal_mutable_origin()->::google::rpc::context::AttributeContext_Peer::MergeFrom(from._internal_origin());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttributeContext::CopyFrom(const AttributeContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.rpc.context.AttributeContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributeContext::IsInitialized() const {
  return true;
}

void AttributeContext::InternalSwap(AttributeContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  extensions_.InternalSwap(&other->extensions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttributeContext, origin_)
      + sizeof(AttributeContext::origin_)
      - PROTOBUF_FIELD_OFFSET(AttributeContext, source_)>(
          reinterpret_cast<char*>(&source_),
          reinterpret_cast<char*>(&other->source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AttributeContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_getter, &descriptor_table_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto_once,
      file_level_metadata_google_2frpc_2fcontext_2fattribute_5fcontext_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace context
}  // namespace rpc
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::rpc::context::AttributeContext_Peer_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::rpc::context::AttributeContext_Peer*
Arena::CreateMaybeMessage< ::google::rpc::context::AttributeContext_Peer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::rpc::context::AttributeContext_Peer >(arena);
}
template<> PROTOBUF_NOINLINE ::google::rpc::context::AttributeContext_Api*
Arena::CreateMaybeMessage< ::google::rpc::context::AttributeContext_Api >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::rpc::context::AttributeContext_Api >(arena);
}
template<> PROTOBUF_NOINLINE ::google::rpc::context::AttributeContext_Auth*
Arena::CreateMaybeMessage< ::google::rpc::context::AttributeContext_Auth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::rpc::context::AttributeContext_Auth >(arena);
}
template<> PROTOBUF_NOINLINE ::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::rpc::context::AttributeContext_Request_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::rpc::context::AttributeContext_Request*
Arena::CreateMaybeMessage< ::google::rpc::context::AttributeContext_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::rpc::context::AttributeContext_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::rpc::context::AttributeContext_Response_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::rpc::context::AttributeContext_Response*
Arena::CreateMaybeMessage< ::google::rpc::context::AttributeContext_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::rpc::context::AttributeContext_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::rpc::context::AttributeContext_Resource_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::rpc::context::AttributeContext_Resource_AnnotationsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::rpc::context::AttributeContext_Resource*
Arena::CreateMaybeMessage< ::google::rpc::context::AttributeContext_Resource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::rpc::context::AttributeContext_Resource >(arena);
}
template<> PROTOBUF_NOINLINE ::google::rpc::context::AttributeContext*
Arena::CreateMaybeMessage< ::google::rpc::context::AttributeContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::rpc::context::AttributeContext >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
