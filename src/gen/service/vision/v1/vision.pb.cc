// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/vision/v1/vision.proto

#include "service/vision/v1/vision.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace service {
namespace vision {
namespace v1 {
PROTOBUF_CONSTEXPR GetModelParameterSchemaRequest::GetModelParameterSchemaRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , model_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct GetModelParameterSchemaRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModelParameterSchemaRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModelParameterSchemaRequestDefaultTypeInternal() {}
  union {
    GetModelParameterSchemaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModelParameterSchemaRequestDefaultTypeInternal _GetModelParameterSchemaRequest_default_instance_;
PROTOBUF_CONSTEXPR GetModelParameterSchemaResponse::GetModelParameterSchemaResponse(
    ::_pbi::ConstantInitialized)
  : model_parameter_schema_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetModelParameterSchemaResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetModelParameterSchemaResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetModelParameterSchemaResponseDefaultTypeInternal() {}
  union {
    GetModelParameterSchemaResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetModelParameterSchemaResponseDefaultTypeInternal _GetModelParameterSchemaResponse_default_instance_;
PROTOBUF_CONSTEXPR GetDetectorNamesRequest::GetDetectorNamesRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct GetDetectorNamesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDetectorNamesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDetectorNamesRequestDefaultTypeInternal() {}
  union {
    GetDetectorNamesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDetectorNamesRequestDefaultTypeInternal _GetDetectorNamesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDetectorNamesResponse::GetDetectorNamesResponse(
    ::_pbi::ConstantInitialized)
  : detector_names_(){}
struct GetDetectorNamesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDetectorNamesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDetectorNamesResponseDefaultTypeInternal() {}
  union {
    GetDetectorNamesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDetectorNamesResponseDefaultTypeInternal _GetDetectorNamesResponse_default_instance_;
PROTOBUF_CONSTEXPR AddDetectorRequest::AddDetectorRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , detector_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , detector_model_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , detector_parameters_(nullptr)
  , extra_(nullptr){}
struct AddDetectorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddDetectorRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddDetectorRequestDefaultTypeInternal() {}
  union {
    AddDetectorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddDetectorRequestDefaultTypeInternal _AddDetectorRequest_default_instance_;
PROTOBUF_CONSTEXPR AddDetectorResponse::AddDetectorResponse(
    ::_pbi::ConstantInitialized){}
struct AddDetectorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddDetectorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddDetectorResponseDefaultTypeInternal() {}
  union {
    AddDetectorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddDetectorResponseDefaultTypeInternal _AddDetectorResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveDetectorRequest::RemoveDetectorRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , detector_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct RemoveDetectorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveDetectorRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveDetectorRequestDefaultTypeInternal() {}
  union {
    RemoveDetectorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveDetectorRequestDefaultTypeInternal _RemoveDetectorRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveDetectorResponse::RemoveDetectorResponse(
    ::_pbi::ConstantInitialized){}
struct RemoveDetectorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveDetectorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveDetectorResponseDefaultTypeInternal() {}
  union {
    RemoveDetectorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveDetectorResponseDefaultTypeInternal _RemoveDetectorResponse_default_instance_;
PROTOBUF_CONSTEXPR GetDetectionsRequest::GetDetectionsRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , detector_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr)
  , width_(int64_t{0})
  , height_(int64_t{0}){}
struct GetDetectionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDetectionsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDetectionsRequestDefaultTypeInternal() {}
  union {
    GetDetectionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDetectionsRequestDefaultTypeInternal _GetDetectionsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDetectionsResponse::GetDetectionsResponse(
    ::_pbi::ConstantInitialized)
  : detections_(){}
struct GetDetectionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDetectionsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDetectionsResponseDefaultTypeInternal() {}
  union {
    GetDetectionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDetectionsResponseDefaultTypeInternal _GetDetectionsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetDetectionsFromCameraRequest::GetDetectionsFromCameraRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , camera_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , detector_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct GetDetectionsFromCameraRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDetectionsFromCameraRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDetectionsFromCameraRequestDefaultTypeInternal() {}
  union {
    GetDetectionsFromCameraRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDetectionsFromCameraRequestDefaultTypeInternal _GetDetectionsFromCameraRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDetectionsFromCameraResponse::GetDetectionsFromCameraResponse(
    ::_pbi::ConstantInitialized)
  : detections_(){}
struct GetDetectionsFromCameraResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDetectionsFromCameraResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDetectionsFromCameraResponseDefaultTypeInternal() {}
  union {
    GetDetectionsFromCameraResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDetectionsFromCameraResponseDefaultTypeInternal _GetDetectionsFromCameraResponse_default_instance_;
PROTOBUF_CONSTEXPR Detection::Detection(
    ::_pbi::ConstantInitialized)
  : class_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , x_min_(int64_t{0})
  , y_min_(int64_t{0})
  , x_max_(int64_t{0})
  , y_max_(int64_t{0})
  , confidence_(0){}
struct DetectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetectionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetectionDefaultTypeInternal() {}
  union {
    Detection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetectionDefaultTypeInternal _Detection_default_instance_;
PROTOBUF_CONSTEXPR GetClassifierNamesRequest::GetClassifierNamesRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct GetClassifierNamesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClassifierNamesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClassifierNamesRequestDefaultTypeInternal() {}
  union {
    GetClassifierNamesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClassifierNamesRequestDefaultTypeInternal _GetClassifierNamesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetClassifierNamesResponse::GetClassifierNamesResponse(
    ::_pbi::ConstantInitialized)
  : classifier_names_(){}
struct GetClassifierNamesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClassifierNamesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClassifierNamesResponseDefaultTypeInternal() {}
  union {
    GetClassifierNamesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClassifierNamesResponseDefaultTypeInternal _GetClassifierNamesResponse_default_instance_;
PROTOBUF_CONSTEXPR AddClassifierRequest::AddClassifierRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , classifier_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , classifier_model_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , classifier_parameters_(nullptr)
  , extra_(nullptr){}
struct AddClassifierRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddClassifierRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddClassifierRequestDefaultTypeInternal() {}
  union {
    AddClassifierRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddClassifierRequestDefaultTypeInternal _AddClassifierRequest_default_instance_;
PROTOBUF_CONSTEXPR AddClassifierResponse::AddClassifierResponse(
    ::_pbi::ConstantInitialized){}
struct AddClassifierResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddClassifierResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddClassifierResponseDefaultTypeInternal() {}
  union {
    AddClassifierResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddClassifierResponseDefaultTypeInternal _AddClassifierResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveClassifierRequest::RemoveClassifierRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , classifier_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct RemoveClassifierRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveClassifierRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveClassifierRequestDefaultTypeInternal() {}
  union {
    RemoveClassifierRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveClassifierRequestDefaultTypeInternal _RemoveClassifierRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveClassifierResponse::RemoveClassifierResponse(
    ::_pbi::ConstantInitialized){}
struct RemoveClassifierResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveClassifierResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveClassifierResponseDefaultTypeInternal() {}
  union {
    RemoveClassifierResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveClassifierResponseDefaultTypeInternal _RemoveClassifierResponse_default_instance_;
PROTOBUF_CONSTEXPR GetClassificationsRequest::GetClassificationsRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , classifier_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr)
  , width_(0)
  , height_(0)
  , n_(0){}
struct GetClassificationsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClassificationsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClassificationsRequestDefaultTypeInternal() {}
  union {
    GetClassificationsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClassificationsRequestDefaultTypeInternal _GetClassificationsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetClassificationsResponse::GetClassificationsResponse(
    ::_pbi::ConstantInitialized)
  : classifications_(){}
struct GetClassificationsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClassificationsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClassificationsResponseDefaultTypeInternal() {}
  union {
    GetClassificationsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClassificationsResponseDefaultTypeInternal _GetClassificationsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetClassificationsFromCameraRequest::GetClassificationsFromCameraRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , camera_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , classifier_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr)
  , n_(0){}
struct GetClassificationsFromCameraRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClassificationsFromCameraRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClassificationsFromCameraRequestDefaultTypeInternal() {}
  union {
    GetClassificationsFromCameraRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClassificationsFromCameraRequestDefaultTypeInternal _GetClassificationsFromCameraRequest_default_instance_;
PROTOBUF_CONSTEXPR GetClassificationsFromCameraResponse::GetClassificationsFromCameraResponse(
    ::_pbi::ConstantInitialized)
  : classifications_(){}
struct GetClassificationsFromCameraResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetClassificationsFromCameraResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetClassificationsFromCameraResponseDefaultTypeInternal() {}
  union {
    GetClassificationsFromCameraResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetClassificationsFromCameraResponseDefaultTypeInternal _GetClassificationsFromCameraResponse_default_instance_;
PROTOBUF_CONSTEXPR Classification::Classification(
    ::_pbi::ConstantInitialized)
  : class_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , confidence_(0){}
struct ClassificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassificationDefaultTypeInternal() {}
  union {
    Classification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassificationDefaultTypeInternal _Classification_default_instance_;
PROTOBUF_CONSTEXPR GetSegmenterNamesRequest::GetSegmenterNamesRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct GetSegmenterNamesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmenterNamesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmenterNamesRequestDefaultTypeInternal() {}
  union {
    GetSegmenterNamesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmenterNamesRequestDefaultTypeInternal _GetSegmenterNamesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSegmenterNamesResponse::GetSegmenterNamesResponse(
    ::_pbi::ConstantInitialized)
  : segmenter_names_(){}
struct GetSegmenterNamesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSegmenterNamesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSegmenterNamesResponseDefaultTypeInternal() {}
  union {
    GetSegmenterNamesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSegmenterNamesResponseDefaultTypeInternal _GetSegmenterNamesResponse_default_instance_;
PROTOBUF_CONSTEXPR AddSegmenterRequest::AddSegmenterRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , segmenter_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , segmenter_model_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , segmenter_parameters_(nullptr)
  , extra_(nullptr){}
struct AddSegmenterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddSegmenterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddSegmenterRequestDefaultTypeInternal() {}
  union {
    AddSegmenterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddSegmenterRequestDefaultTypeInternal _AddSegmenterRequest_default_instance_;
PROTOBUF_CONSTEXPR AddSegmenterResponse::AddSegmenterResponse(
    ::_pbi::ConstantInitialized){}
struct AddSegmenterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddSegmenterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddSegmenterResponseDefaultTypeInternal() {}
  union {
    AddSegmenterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddSegmenterResponseDefaultTypeInternal _AddSegmenterResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveSegmenterRequest::RemoveSegmenterRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , segmenter_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct RemoveSegmenterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveSegmenterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveSegmenterRequestDefaultTypeInternal() {}
  union {
    RemoveSegmenterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveSegmenterRequestDefaultTypeInternal _RemoveSegmenterRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveSegmenterResponse::RemoveSegmenterResponse(
    ::_pbi::ConstantInitialized){}
struct RemoveSegmenterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveSegmenterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveSegmenterResponseDefaultTypeInternal() {}
  union {
    RemoveSegmenterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveSegmenterResponseDefaultTypeInternal _RemoveSegmenterResponse_default_instance_;
PROTOBUF_CONSTEXPR GetObjectPointCloudsRequest::GetObjectPointCloudsRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , camera_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , segmenter_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct GetObjectPointCloudsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetObjectPointCloudsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetObjectPointCloudsRequestDefaultTypeInternal() {}
  union {
    GetObjectPointCloudsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetObjectPointCloudsRequestDefaultTypeInternal _GetObjectPointCloudsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetObjectPointCloudsResponse::GetObjectPointCloudsResponse(
    ::_pbi::ConstantInitialized)
  : objects_()
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetObjectPointCloudsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetObjectPointCloudsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetObjectPointCloudsResponseDefaultTypeInternal() {}
  union {
    GetObjectPointCloudsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetObjectPointCloudsResponseDefaultTypeInternal _GetObjectPointCloudsResponse_default_instance_;
}  // namespace v1
}  // namespace vision
}  // namespace service
}  // namespace viam
static ::_pb::Metadata file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[32];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_service_2fvision_2fv1_2fvision_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_service_2fvision_2fv1_2fvision_2eproto = nullptr;

const uint32_t TableStruct_service_2fvision_2fv1_2fvision_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetModelParameterSchemaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetModelParameterSchemaRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetModelParameterSchemaRequest, model_type_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetModelParameterSchemaRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetModelParameterSchemaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetModelParameterSchemaResponse, model_parameter_schema_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectorNamesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectorNamesRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectorNamesRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectorNamesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectorNamesResponse, detector_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddDetectorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddDetectorRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddDetectorRequest, detector_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddDetectorRequest, detector_model_type_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddDetectorRequest, detector_parameters_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddDetectorRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddDetectorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveDetectorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveDetectorRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveDetectorRequest, detector_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveDetectorRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveDetectorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, image_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, width_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, height_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, detector_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsResponse, detections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraRequest, camera_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraRequest, detector_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetDetectionsFromCameraResponse, detections_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, x_min_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, y_min_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, x_max_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, y_max_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, confidence_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Detection, class_name_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassifierNamesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassifierNamesRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassifierNamesRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassifierNamesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassifierNamesResponse, classifier_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddClassifierRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddClassifierRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddClassifierRequest, classifier_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddClassifierRequest, classifier_model_type_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddClassifierRequest, classifier_parameters_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddClassifierRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddClassifierResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveClassifierRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveClassifierRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveClassifierRequest, classifier_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveClassifierRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveClassifierResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, image_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, width_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, height_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, classifier_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, n_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsResponse, classifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraRequest, camera_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraRequest, classifier_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraRequest, n_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetClassificationsFromCameraResponse, classifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Classification, class_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::Classification, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetSegmenterNamesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetSegmenterNamesRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetSegmenterNamesRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetSegmenterNamesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetSegmenterNamesResponse, segmenter_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddSegmenterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddSegmenterRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddSegmenterRequest, segmenter_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddSegmenterRequest, segmenter_model_type_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddSegmenterRequest, segmenter_parameters_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddSegmenterRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::AddSegmenterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveSegmenterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveSegmenterRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveSegmenterRequest, segmenter_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveSegmenterRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::RemoveSegmenterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsRequest, camera_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsRequest, segmenter_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsRequest, mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsResponse, mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::service::vision::v1::GetObjectPointCloudsResponse, objects_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::service::vision::v1::GetModelParameterSchemaRequest)},
  { 9, -1, -1, sizeof(::viam::service::vision::v1::GetModelParameterSchemaResponse)},
  { 16, -1, -1, sizeof(::viam::service::vision::v1::GetDetectorNamesRequest)},
  { 24, -1, -1, sizeof(::viam::service::vision::v1::GetDetectorNamesResponse)},
  { 31, -1, -1, sizeof(::viam::service::vision::v1::AddDetectorRequest)},
  { 42, -1, -1, sizeof(::viam::service::vision::v1::AddDetectorResponse)},
  { 48, -1, -1, sizeof(::viam::service::vision::v1::RemoveDetectorRequest)},
  { 57, -1, -1, sizeof(::viam::service::vision::v1::RemoveDetectorResponse)},
  { 63, -1, -1, sizeof(::viam::service::vision::v1::GetDetectionsRequest)},
  { 76, -1, -1, sizeof(::viam::service::vision::v1::GetDetectionsResponse)},
  { 83, -1, -1, sizeof(::viam::service::vision::v1::GetDetectionsFromCameraRequest)},
  { 93, -1, -1, sizeof(::viam::service::vision::v1::GetDetectionsFromCameraResponse)},
  { 100, 112, -1, sizeof(::viam::service::vision::v1::Detection)},
  { 118, -1, -1, sizeof(::viam::service::vision::v1::GetClassifierNamesRequest)},
  { 126, -1, -1, sizeof(::viam::service::vision::v1::GetClassifierNamesResponse)},
  { 133, -1, -1, sizeof(::viam::service::vision::v1::AddClassifierRequest)},
  { 144, -1, -1, sizeof(::viam::service::vision::v1::AddClassifierResponse)},
  { 150, -1, -1, sizeof(::viam::service::vision::v1::RemoveClassifierRequest)},
  { 159, -1, -1, sizeof(::viam::service::vision::v1::RemoveClassifierResponse)},
  { 165, -1, -1, sizeof(::viam::service::vision::v1::GetClassificationsRequest)},
  { 179, -1, -1, sizeof(::viam::service::vision::v1::GetClassificationsResponse)},
  { 186, -1, -1, sizeof(::viam::service::vision::v1::GetClassificationsFromCameraRequest)},
  { 197, -1, -1, sizeof(::viam::service::vision::v1::GetClassificationsFromCameraResponse)},
  { 204, -1, -1, sizeof(::viam::service::vision::v1::Classification)},
  { 212, -1, -1, sizeof(::viam::service::vision::v1::GetSegmenterNamesRequest)},
  { 220, -1, -1, sizeof(::viam::service::vision::v1::GetSegmenterNamesResponse)},
  { 227, -1, -1, sizeof(::viam::service::vision::v1::AddSegmenterRequest)},
  { 238, -1, -1, sizeof(::viam::service::vision::v1::AddSegmenterResponse)},
  { 244, -1, -1, sizeof(::viam::service::vision::v1::RemoveSegmenterRequest)},
  { 253, -1, -1, sizeof(::viam::service::vision::v1::RemoveSegmenterResponse)},
  { 259, -1, -1, sizeof(::viam::service::vision::v1::GetObjectPointCloudsRequest)},
  { 270, -1, -1, sizeof(::viam::service::vision::v1::GetObjectPointCloudsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::service::vision::v1::_GetModelParameterSchemaRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetModelParameterSchemaResponse_default_instance_._instance,
  &::viam::service::vision::v1::_GetDetectorNamesRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetDetectorNamesResponse_default_instance_._instance,
  &::viam::service::vision::v1::_AddDetectorRequest_default_instance_._instance,
  &::viam::service::vision::v1::_AddDetectorResponse_default_instance_._instance,
  &::viam::service::vision::v1::_RemoveDetectorRequest_default_instance_._instance,
  &::viam::service::vision::v1::_RemoveDetectorResponse_default_instance_._instance,
  &::viam::service::vision::v1::_GetDetectionsRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetDetectionsResponse_default_instance_._instance,
  &::viam::service::vision::v1::_GetDetectionsFromCameraRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetDetectionsFromCameraResponse_default_instance_._instance,
  &::viam::service::vision::v1::_Detection_default_instance_._instance,
  &::viam::service::vision::v1::_GetClassifierNamesRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetClassifierNamesResponse_default_instance_._instance,
  &::viam::service::vision::v1::_AddClassifierRequest_default_instance_._instance,
  &::viam::service::vision::v1::_AddClassifierResponse_default_instance_._instance,
  &::viam::service::vision::v1::_RemoveClassifierRequest_default_instance_._instance,
  &::viam::service::vision::v1::_RemoveClassifierResponse_default_instance_._instance,
  &::viam::service::vision::v1::_GetClassificationsRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetClassificationsResponse_default_instance_._instance,
  &::viam::service::vision::v1::_GetClassificationsFromCameraRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetClassificationsFromCameraResponse_default_instance_._instance,
  &::viam::service::vision::v1::_Classification_default_instance_._instance,
  &::viam::service::vision::v1::_GetSegmenterNamesRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetSegmenterNamesResponse_default_instance_._instance,
  &::viam::service::vision::v1::_AddSegmenterRequest_default_instance_._instance,
  &::viam::service::vision::v1::_AddSegmenterResponse_default_instance_._instance,
  &::viam::service::vision::v1::_RemoveSegmenterRequest_default_instance_._instance,
  &::viam::service::vision::v1::_RemoveSegmenterResponse_default_instance_._instance,
  &::viam::service::vision::v1::_GetObjectPointCloudsRequest_default_instance_._instance,
  &::viam::service::vision::v1::_GetObjectPointCloudsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_service_2fvision_2fv1_2fvision_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036service/vision/v1/vision.proto\022\026viam.s"
  "ervice.vision.v1\032\026common/v1/common.proto"
  "\032\034google/api/annotations.proto\032\034google/p"
  "rotobuf/struct.proto\"\202\001\n\036GetModelParamet"
  "erSchemaRequest\022\022\n\004name\030\001 \001(\tR\004name\022\035\n\nm"
  "odel_type\030\002 \001(\tR\tmodelType\022-\n\005extra\030c \001("
  "\0132\027.google.protobuf.StructR\005extra\"W\n\037Get"
  "ModelParameterSchemaResponse\0224\n\026model_pa"
  "rameter_schema\030\001 \001(\014R\024modelParameterSche"
  "ma\"\\\n\027GetDetectorNamesRequest\022\022\n\004name\030\001 "
  "\001(\tR\004name\022-\n\005extra\030c \001(\0132\027.google.protob"
  "uf.StructR\005extra\"A\n\030GetDetectorNamesResp"
  "onse\022%\n\016detector_names\030\001 \003(\tR\rdetectorNa"
  "mes\"\366\001\n\022AddDetectorRequest\022\022\n\004name\030\001 \001(\t"
  "R\004name\022#\n\rdetector_name\030\002 \001(\tR\014detectorN"
  "ame\022.\n\023detector_model_type\030\003 \001(\tR\021detect"
  "orModelType\022H\n\023detector_parameters\030\004 \001(\013"
  "2\027.google.protobuf.StructR\022detectorParam"
  "eters\022-\n\005extra\030c \001(\0132\027.google.protobuf.S"
  "tructR\005extra\"\025\n\023AddDetectorResponse\"\177\n\025R"
  "emoveDetectorRequest\022\022\n\004name\030\001 \001(\tR\004name"
  "\022#\n\rdetector_name\030\002 \001(\tR\014detectorName\022-\n"
  "\005extra\030c \001(\0132\027.google.protobuf.StructR\005e"
  "xtra\"\030\n\026RemoveDetectorResponse\"\337\001\n\024GetDe"
  "tectionsRequest\022\022\n\004name\030\001 \001(\tR\004name\022\024\n\005i"
  "mage\030\002 \001(\014R\005image\022\024\n\005width\030\003 \001(\003R\005width\022"
  "\026\n\006height\030\004 \001(\003R\006height\022\033\n\tmime_type\030\005 \001"
  "(\tR\010mimeType\022#\n\rdetector_name\030\006 \001(\tR\014det"
  "ectorName\022-\n\005extra\030c \001(\0132\027.google.protob"
  "uf.StructR\005extra\"Z\n\025GetDetectionsRespons"
  "e\022A\n\ndetections\030\001 \003(\0132!.viam.service.vis"
  "ion.v1.DetectionR\ndetections\"\251\001\n\036GetDete"
  "ctionsFromCameraRequest\022\022\n\004name\030\001 \001(\tR\004n"
  "ame\022\037\n\013camera_name\030\002 \001(\tR\ncameraName\022#\n\r"
  "detector_name\030\003 \001(\tR\014detectorName\022-\n\005ext"
  "ra\030c \001(\0132\027.google.protobuf.StructR\005extra"
  "\"d\n\037GetDetectionsFromCameraResponse\022A\n\nd"
  "etections\030\001 \003(\0132!.viam.service.vision.v1"
  ".DetectionR\ndetections\"\332\001\n\tDetection\022\030\n\005"
  "x_min\030\001 \001(\003H\000R\004xMin\210\001\001\022\030\n\005y_min\030\002 \001(\003H\001R"
  "\004yMin\210\001\001\022\030\n\005x_max\030\003 \001(\003H\002R\004xMax\210\001\001\022\030\n\005y_"
  "max\030\004 \001(\003H\003R\004yMax\210\001\001\022\036\n\nconfidence\030\005 \001(\001"
  "R\nconfidence\022\035\n\nclass_name\030\006 \001(\tR\tclassN"
  "ameB\010\n\006_x_minB\010\n\006_y_minB\010\n\006_x_maxB\010\n\006_y_"
  "max\"^\n\031GetClassifierNamesRequest\022\022\n\004name"
  "\030\001 \001(\tR\004name\022-\n\005extra\030c \001(\0132\027.google.pro"
  "tobuf.StructR\005extra\"G\n\032GetClassifierName"
  "sResponse\022)\n\020classifier_names\030\001 \003(\tR\017cla"
  "ssifierNames\"\204\002\n\024AddClassifierRequest\022\022\n"
  "\004name\030\001 \001(\tR\004name\022\'\n\017classifier_name\030\002 \001"
  "(\tR\016classifierName\0222\n\025classifier_model_t"
  "ype\030\003 \001(\tR\023classifierModelType\022L\n\025classi"
  "fier_parameters\030\004 \001(\0132\027.google.protobuf."
  "StructR\024classifierParameters\022-\n\005extra\030c "
  "\001(\0132\027.google.protobuf.StructR\005extra\"\027\n\025A"
  "ddClassifierResponse\"\205\001\n\027RemoveClassifie"
  "rRequest\022\022\n\004name\030\001 \001(\tR\004name\022\'\n\017classifi"
  "er_name\030\002 \001(\tR\016classifierName\022-\n\005extra\030c"
  " \001(\0132\027.google.protobuf.StructR\005extra\"\032\n\030"
  "RemoveClassifierResponse\"\366\001\n\031GetClassifi"
  "cationsRequest\022\022\n\004name\030\001 \001(\tR\004name\022\024\n\005im"
  "age\030\002 \001(\014R\005image\022\024\n\005width\030\003 \001(\005R\005width\022\026"
  "\n\006height\030\004 \001(\005R\006height\022\033\n\tmime_type\030\005 \001("
  "\tR\010mimeType\022\'\n\017classifier_name\030\006 \001(\tR\016cl"
  "assifierName\022\014\n\001n\030\007 \001(\005R\001n\022-\n\005extra\030c \001("
  "\0132\027.google.protobuf.StructR\005extra\"n\n\032Get"
  "ClassificationsResponse\022P\n\017classificatio"
  "ns\030\001 \003(\0132&.viam.service.vision.v1.Classi"
  "ficationR\017classifications\"\300\001\n#GetClassif"
  "icationsFromCameraRequest\022\022\n\004name\030\001 \001(\tR"
  "\004name\022\037\n\013camera_name\030\002 \001(\tR\ncameraName\022\'"
  "\n\017classifier_name\030\003 \001(\tR\016classifierName\022"
  "\014\n\001n\030\004 \001(\005R\001n\022-\n\005extra\030c \001(\0132\027.google.pr"
  "otobuf.StructR\005extra\"x\n$GetClassificatio"
  "nsFromCameraResponse\022P\n\017classifications\030"
  "\001 \003(\0132&.viam.service.vision.v1.Classific"
  "ationR\017classifications\"O\n\016Classification"
  "\022\035\n\nclass_name\030\001 \001(\tR\tclassName\022\036\n\nconfi"
  "dence\030\002 \001(\001R\nconfidence\"]\n\030GetSegmenterN"
  "amesRequest\022\022\n\004name\030\001 \001(\tR\004name\022-\n\005extra"
  "\030c \001(\0132\027.google.protobuf.StructR\005extra\"D"
  "\n\031GetSegmenterNamesResponse\022\'\n\017segmenter"
  "_names\030\001 \003(\tR\016segmenterNames\"\375\001\n\023AddSegm"
  "enterRequest\022\022\n\004name\030\001 \001(\tR\004name\022%\n\016segm"
  "enter_name\030\002 \001(\tR\rsegmenterName\0220\n\024segme"
  "nter_model_type\030\003 \001(\tR\022segmenterModelTyp"
  "e\022J\n\024segmenter_parameters\030\004 \001(\0132\027.google"
  ".protobuf.StructR\023segmenterParameters\022-\n"
  "\005extra\030c \001(\0132\027.google.protobuf.StructR\005e"
  "xtra\"\026\n\024AddSegmenterResponse\"\202\001\n\026RemoveS"
  "egmenterRequest\022\022\n\004name\030\001 \001(\tR\004name\022%\n\016s"
  "egmenter_name\030\002 \001(\tR\rsegmenterName\022-\n\005ex"
  "tra\030c \001(\0132\027.google.protobuf.StructR\005extr"
  "a\"\031\n\027RemoveSegmenterResponse\"\305\001\n\033GetObje"
  "ctPointCloudsRequest\022\022\n\004name\030\001 \001(\tR\004name"
  "\022\037\n\013camera_name\030\002 \001(\tR\ncameraName\022%\n\016seg"
  "menter_name\030\003 \001(\tR\rsegmenterName\022\033\n\tmime"
  "_type\030\004 \001(\tR\010mimeType\022-\n\005extra\030c \001(\0132\027.g"
  "oogle.protobuf.StructR\005extra\"w\n\034GetObjec"
  "tPointCloudsResponse\022\033\n\tmime_type\030\001 \001(\tR"
  "\010mimeType\022:\n\007objects\030\002 \003(\0132 .viam.common"
  ".v1.PointCloudObjectR\007objects2\344\026\n\rVision"
  "Service\022\315\001\n\027GetModelParameterSchema\0226.vi"
  "am.service.vision.v1.GetModelParameterSc"
  "hemaRequest\0327.viam.service.vision.v1.Get"
  "ModelParameterSchemaResponse\"A\202\323\344\223\002;\0229/v"
  "iam/api/v1/service/vision/{name}/model_p"
  "arameter_schema\022\260\001\n\020GetDetectorNames\022/.v"
  "iam.service.vision.v1.GetDetectorNamesRe"
  "quest\0320.viam.service.vision.v1.GetDetect"
  "orNamesResponse\"9\202\323\344\223\0023\0221/viam/api/v1/se"
  "rvice/vision/{name}/detector_names\022\237\001\n\013A"
  "ddDetector\022*.viam.service.vision.v1.AddD"
  "etectorRequest\032+.viam.service.vision.v1."
  "AddDetectorResponse\"7\202\323\344\223\0021\"//viam/api/v"
  "1/service/vision/{name}/add_detector\022\253\001\n"
  "\016RemoveDetector\022-.viam.service.vision.v1"
  ".RemoveDetectorRequest\032..viam.service.vi"
  "sion.v1.RemoveDetectorResponse\":\202\323\344\223\0024\"2"
  "/viam/api/v1/service/vision/{name}/remov"
  "e_detector\022\310\001\n\027GetDetectionsFromCamera\0226"
  ".viam.service.vision.v1.GetDetectionsFro"
  "mCameraRequest\0327.viam.service.vision.v1."
  "GetDetectionsFromCameraResponse\"<\202\323\344\223\0026\""
  "4/viam/api/v1/service/vision/{name}/came"
  "ra_detections\022\243\001\n\rGetDetections\022,.viam.s"
  "ervice.vision.v1.GetDetectionsRequest\032-."
  "viam.service.vision.v1.GetDetectionsResp"
  "onse\"5\202\323\344\223\002/\"-/viam/api/v1/service/visio"
  "n/{name}/detections\022\270\001\n\022GetClassifierNam"
  "es\0221.viam.service.vision.v1.GetClassifie"
  "rNamesRequest\0322.viam.service.vision.v1.G"
  "etClassifierNamesResponse\";\202\323\344\223\0025\0223/viam"
  "/api/v1/service/vision/{name}/classifier"
  "_names\022\247\001\n\rAddClassifier\022,.viam.service."
  "vision.v1.AddClassifierRequest\032-.viam.se"
  "rvice.vision.v1.AddClassifierResponse\"9\202"
  "\323\344\223\0023\"1/viam/api/v1/service/vision/{name"
  "}/add_classifier\022\263\001\n\020RemoveClassifier\022/."
  "viam.service.vision.v1.RemoveClassifierR"
  "equest\0320.viam.service.vision.v1.RemoveCl"
  "assifierResponse\"<\202\323\344\223\0026\"4/viam/api/v1/s"
  "ervice/vision/{name}/remove_classifier\022\334"
  "\001\n\034GetClassificationsFromCamera\022;.viam.s"
  "ervice.vision.v1.GetClassificationsFromC"
  "ameraRequest\032<.viam.service.vision.v1.Ge"
  "tClassificationsFromCameraResponse\"A\202\323\344\223"
  "\002;\"9/viam/api/v1/service/vision/{name}/c"
  "amera_classifications\022\267\001\n\022GetClassificat"
  "ions\0221.viam.service.vision.v1.GetClassif"
  "icationsRequest\0322.viam.service.vision.v1"
  ".GetClassificationsResponse\":\202\323\344\223\0024\"2/vi"
  "am/api/v1/service/vision/{name}/classifi"
  "cations\022\264\001\n\021GetSegmenterNames\0220.viam.ser"
  "vice.vision.v1.GetSegmenterNamesRequest\032"
  "1.viam.service.vision.v1.GetSegmenterNam"
  "esResponse\":\202\323\344\223\0024\0222/viam/api/v1/service"
  "/vision/{name}/segmenter_names\022\243\001\n\014AddSe"
  "gmenter\022+.viam.service.vision.v1.AddSegm"
  "enterRequest\032,.viam.service.vision.v1.Ad"
  "dSegmenterResponse\"8\202\323\344\223\0022\"0/viam/api/v1"
  "/service/vision/{name}/add_segmenter\022\257\001\n"
  "\017RemoveSegmenter\022..viam.service.vision.v"
  "1.RemoveSegmenterRequest\032/.viam.service."
  "vision.v1.RemoveSegmenterResponse\";\202\323\344\223\002"
  "5\"3/viam/api/v1/service/vision/{name}/re"
  "move_segmenter\022\301\001\n\024GetObjectPointClouds\022"
  "3.viam.service.vision.v1.GetObjectPointC"
  "loudsRequest\0324.viam.service.vision.v1.Ge"
  "tObjectPointCloudsResponse\">\202\323\344\223\0028\"6/via"
  "m/api/v1/service/vision/{name}/object_po"
  "int_clouds\022\207\001\n\tDoCommand\022 .viam.common.v"
  "1.DoCommandRequest\032!.viam.common.v1.DoCo"
  "mmandResponse\"5\202\323\344\223\002/\"-/viam/api/v1/serv"
  "ice/vision/{name}/do_commandB\?\n\032com.viam"
  ".service.vision.v1Z!go.viam.com/api/serv"
  "ice/vision/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_service_2fvision_2fv1_2fvision_2eproto_deps[3] = {
  &::descriptor_table_common_2fv1_2fcommon_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_service_2fvision_2fv1_2fvision_2eproto = {
    false, false, 7061, descriptor_table_protodef_service_2fvision_2fv1_2fvision_2eproto,
    "service/vision/v1/vision.proto",
    &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once, descriptor_table_service_2fvision_2fv1_2fvision_2eproto_deps, 3, 32,
    schemas, file_default_instances, TableStruct_service_2fvision_2fv1_2fvision_2eproto::offsets,
    file_level_metadata_service_2fvision_2fv1_2fvision_2eproto, file_level_enum_descriptors_service_2fvision_2fv1_2fvision_2eproto,
    file_level_service_descriptors_service_2fvision_2fv1_2fvision_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter() {
  return &descriptor_table_service_2fvision_2fv1_2fvision_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_service_2fvision_2fv1_2fvision_2eproto(&descriptor_table_service_2fvision_2fv1_2fvision_2eproto);
namespace viam {
namespace service {
namespace vision {
namespace v1 {

// ===================================================================

class GetModelParameterSchemaRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetModelParameterSchemaRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetModelParameterSchemaRequest::_Internal::extra(const GetModelParameterSchemaRequest* msg) {
  return *msg->extra_;
}
void GetModelParameterSchemaRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetModelParameterSchemaRequest::GetModelParameterSchemaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetModelParameterSchemaRequest)
}
GetModelParameterSchemaRequest::GetModelParameterSchemaRequest(const GetModelParameterSchemaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  model_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_type().empty()) {
    model_type_.Set(from._internal_model_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetModelParameterSchemaRequest)
}

inline void GetModelParameterSchemaRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

GetModelParameterSchemaRequest::~GetModelParameterSchemaRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetModelParameterSchemaRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModelParameterSchemaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  model_type_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetModelParameterSchemaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetModelParameterSchemaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetModelParameterSchemaRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  model_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelParameterSchemaRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetModelParameterSchemaRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string model_type = 2 [json_name = "modelType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetModelParameterSchemaRequest.model_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelParameterSchemaRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetModelParameterSchemaRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetModelParameterSchemaRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string model_type = 2 [json_name = "modelType"];
  if (!this->_internal_model_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_type().data(), static_cast<int>(this->_internal_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetModelParameterSchemaRequest.model_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_type(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetModelParameterSchemaRequest)
  return target;
}

size_t GetModelParameterSchemaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetModelParameterSchemaRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string model_type = 2 [json_name = "modelType"];
  if (!this->_internal_model_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_type());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelParameterSchemaRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetModelParameterSchemaRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelParameterSchemaRequest::GetClassData() const { return &_class_data_; }

void GetModelParameterSchemaRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetModelParameterSchemaRequest *>(to)->MergeFrom(
      static_cast<const GetModelParameterSchemaRequest &>(from));
}


void GetModelParameterSchemaRequest::MergeFrom(const GetModelParameterSchemaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetModelParameterSchemaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_model_type().empty()) {
    _internal_set_model_type(from._internal_model_type());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelParameterSchemaRequest::CopyFrom(const GetModelParameterSchemaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetModelParameterSchemaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelParameterSchemaRequest::IsInitialized() const {
  return true;
}

void GetModelParameterSchemaRequest::InternalSwap(GetModelParameterSchemaRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_type_, lhs_arena,
      &other->model_type_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelParameterSchemaRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[0]);
}

// ===================================================================

class GetModelParameterSchemaResponse::_Internal {
 public:
};

GetModelParameterSchemaResponse::GetModelParameterSchemaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetModelParameterSchemaResponse)
}
GetModelParameterSchemaResponse::GetModelParameterSchemaResponse(const GetModelParameterSchemaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_parameter_schema_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_parameter_schema_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_parameter_schema().empty()) {
    model_parameter_schema_.Set(from._internal_model_parameter_schema(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetModelParameterSchemaResponse)
}

inline void GetModelParameterSchemaResponse::SharedCtor() {
model_parameter_schema_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_parameter_schema_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetModelParameterSchemaResponse::~GetModelParameterSchemaResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetModelParameterSchemaResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetModelParameterSchemaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_parameter_schema_.Destroy();
}

void GetModelParameterSchemaResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetModelParameterSchemaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetModelParameterSchemaResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_parameter_schema_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetModelParameterSchemaResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes model_parameter_schema = 1 [json_name = "modelParameterSchema"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model_parameter_schema();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetModelParameterSchemaResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetModelParameterSchemaResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes model_parameter_schema = 1 [json_name = "modelParameterSchema"];
  if (!this->_internal_model_parameter_schema().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_model_parameter_schema(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetModelParameterSchemaResponse)
  return target;
}

size_t GetModelParameterSchemaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetModelParameterSchemaResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes model_parameter_schema = 1 [json_name = "modelParameterSchema"];
  if (!this->_internal_model_parameter_schema().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_model_parameter_schema());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetModelParameterSchemaResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetModelParameterSchemaResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetModelParameterSchemaResponse::GetClassData() const { return &_class_data_; }

void GetModelParameterSchemaResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetModelParameterSchemaResponse *>(to)->MergeFrom(
      static_cast<const GetModelParameterSchemaResponse &>(from));
}


void GetModelParameterSchemaResponse::MergeFrom(const GetModelParameterSchemaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetModelParameterSchemaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model_parameter_schema().empty()) {
    _internal_set_model_parameter_schema(from._internal_model_parameter_schema());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetModelParameterSchemaResponse::CopyFrom(const GetModelParameterSchemaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetModelParameterSchemaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModelParameterSchemaResponse::IsInitialized() const {
  return true;
}

void GetModelParameterSchemaResponse::InternalSwap(GetModelParameterSchemaResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_parameter_schema_, lhs_arena,
      &other->model_parameter_schema_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModelParameterSchemaResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[1]);
}

// ===================================================================

class GetDetectorNamesRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetDetectorNamesRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetDetectorNamesRequest::_Internal::extra(const GetDetectorNamesRequest* msg) {
  return *msg->extra_;
}
void GetDetectorNamesRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetDetectorNamesRequest::GetDetectorNamesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetDetectorNamesRequest)
}
GetDetectorNamesRequest::GetDetectorNamesRequest(const GetDetectorNamesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetDetectorNamesRequest)
}

inline void GetDetectorNamesRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

GetDetectorNamesRequest::~GetDetectorNamesRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetDetectorNamesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDetectorNamesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetDetectorNamesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDetectorNamesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetDetectorNamesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDetectorNamesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetDetectorNamesRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDetectorNamesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetDetectorNamesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetDetectorNamesRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetDetectorNamesRequest)
  return target;
}

size_t GetDetectorNamesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetDetectorNamesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDetectorNamesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDetectorNamesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDetectorNamesRequest::GetClassData() const { return &_class_data_; }

void GetDetectorNamesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDetectorNamesRequest *>(to)->MergeFrom(
      static_cast<const GetDetectorNamesRequest &>(from));
}


void GetDetectorNamesRequest::MergeFrom(const GetDetectorNamesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetDetectorNamesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDetectorNamesRequest::CopyFrom(const GetDetectorNamesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetDetectorNamesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDetectorNamesRequest::IsInitialized() const {
  return true;
}

void GetDetectorNamesRequest::InternalSwap(GetDetectorNamesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDetectorNamesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[2]);
}

// ===================================================================

class GetDetectorNamesResponse::_Internal {
 public:
};

GetDetectorNamesResponse::GetDetectorNamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  detector_names_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetDetectorNamesResponse)
}
GetDetectorNamesResponse::GetDetectorNamesResponse(const GetDetectorNamesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detector_names_(from.detector_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetDetectorNamesResponse)
}

inline void GetDetectorNamesResponse::SharedCtor() {
}

GetDetectorNamesResponse::~GetDetectorNamesResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetDetectorNamesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDetectorNamesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetDetectorNamesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDetectorNamesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetDetectorNamesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detector_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDetectorNamesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string detector_names = 1 [json_name = "detectorNames"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_detector_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetDetectorNamesResponse.detector_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDetectorNamesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetDetectorNamesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string detector_names = 1 [json_name = "detectorNames"];
  for (int i = 0, n = this->_internal_detector_names_size(); i < n; i++) {
    const auto& s = this->_internal_detector_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetDetectorNamesResponse.detector_names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetDetectorNamesResponse)
  return target;
}

size_t GetDetectorNamesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetDetectorNamesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string detector_names = 1 [json_name = "detectorNames"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(detector_names_.size());
  for (int i = 0, n = detector_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      detector_names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDetectorNamesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDetectorNamesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDetectorNamesResponse::GetClassData() const { return &_class_data_; }

void GetDetectorNamesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDetectorNamesResponse *>(to)->MergeFrom(
      static_cast<const GetDetectorNamesResponse &>(from));
}


void GetDetectorNamesResponse::MergeFrom(const GetDetectorNamesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetDetectorNamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  detector_names_.MergeFrom(from.detector_names_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDetectorNamesResponse::CopyFrom(const GetDetectorNamesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetDetectorNamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDetectorNamesResponse::IsInitialized() const {
  return true;
}

void GetDetectorNamesResponse::InternalSwap(GetDetectorNamesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  detector_names_.InternalSwap(&other->detector_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDetectorNamesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[3]);
}

// ===================================================================

class AddDetectorRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& detector_parameters(const AddDetectorRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const AddDetectorRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
AddDetectorRequest::_Internal::detector_parameters(const AddDetectorRequest* msg) {
  return *msg->detector_parameters_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
AddDetectorRequest::_Internal::extra(const AddDetectorRequest* msg) {
  return *msg->extra_;
}
void AddDetectorRequest::clear_detector_parameters() {
  if (GetArenaForAllocation() == nullptr && detector_parameters_ != nullptr) {
    delete detector_parameters_;
  }
  detector_parameters_ = nullptr;
}
void AddDetectorRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
AddDetectorRequest::AddDetectorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.AddDetectorRequest)
}
AddDetectorRequest::AddDetectorRequest(const AddDetectorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  detector_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    detector_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detector_name().empty()) {
    detector_name_.Set(from._internal_detector_name(), 
      GetArenaForAllocation());
  }
  detector_model_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    detector_model_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detector_model_type().empty()) {
    detector_model_type_.Set(from._internal_detector_model_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_detector_parameters()) {
    detector_parameters_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.detector_parameters_);
  } else {
    detector_parameters_ = nullptr;
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.AddDetectorRequest)
}

inline void AddDetectorRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
detector_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  detector_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
detector_model_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  detector_model_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&detector_parameters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extra_) -
    reinterpret_cast<char*>(&detector_parameters_)) + sizeof(extra_));
}

AddDetectorRequest::~AddDetectorRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.AddDetectorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddDetectorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  detector_name_.Destroy();
  detector_model_type_.Destroy();
  if (this != internal_default_instance()) delete detector_parameters_;
  if (this != internal_default_instance()) delete extra_;
}

void AddDetectorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddDetectorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.AddDetectorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  detector_name_.ClearToEmpty();
  detector_model_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && detector_parameters_ != nullptr) {
    delete detector_parameters_;
  }
  detector_parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddDetectorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.AddDetectorRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string detector_name = 2 [json_name = "detectorName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_detector_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.AddDetectorRequest.detector_name"));
        } else
          goto handle_unusual;
        continue;
      // string detector_model_type = 3 [json_name = "detectorModelType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_detector_model_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.AddDetectorRequest.detector_model_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct detector_parameters = 4 [json_name = "detectorParameters"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_detector_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddDetectorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.AddDetectorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.AddDetectorRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string detector_name = 2 [json_name = "detectorName"];
  if (!this->_internal_detector_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detector_name().data(), static_cast<int>(this->_internal_detector_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.AddDetectorRequest.detector_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detector_name(), target);
  }

  // string detector_model_type = 3 [json_name = "detectorModelType"];
  if (!this->_internal_detector_model_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detector_model_type().data(), static_cast<int>(this->_internal_detector_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.AddDetectorRequest.detector_model_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_detector_model_type(), target);
  }

  // .google.protobuf.Struct detector_parameters = 4 [json_name = "detectorParameters"];
  if (this->_internal_has_detector_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::detector_parameters(this),
        _Internal::detector_parameters(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.AddDetectorRequest)
  return target;
}

size_t AddDetectorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.AddDetectorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string detector_name = 2 [json_name = "detectorName"];
  if (!this->_internal_detector_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detector_name());
  }

  // string detector_model_type = 3 [json_name = "detectorModelType"];
  if (!this->_internal_detector_model_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detector_model_type());
  }

  // .google.protobuf.Struct detector_parameters = 4 [json_name = "detectorParameters"];
  if (this->_internal_has_detector_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detector_parameters_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddDetectorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddDetectorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddDetectorRequest::GetClassData() const { return &_class_data_; }

void AddDetectorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddDetectorRequest *>(to)->MergeFrom(
      static_cast<const AddDetectorRequest &>(from));
}


void AddDetectorRequest::MergeFrom(const AddDetectorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.AddDetectorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_detector_name().empty()) {
    _internal_set_detector_name(from._internal_detector_name());
  }
  if (!from._internal_detector_model_type().empty()) {
    _internal_set_detector_model_type(from._internal_detector_model_type());
  }
  if (from._internal_has_detector_parameters()) {
    _internal_mutable_detector_parameters()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_detector_parameters());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddDetectorRequest::CopyFrom(const AddDetectorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.AddDetectorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDetectorRequest::IsInitialized() const {
  return true;
}

void AddDetectorRequest::InternalSwap(AddDetectorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &detector_name_, lhs_arena,
      &other->detector_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &detector_model_type_, lhs_arena,
      &other->detector_model_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddDetectorRequest, extra_)
      + sizeof(AddDetectorRequest::extra_)
      - PROTOBUF_FIELD_OFFSET(AddDetectorRequest, detector_parameters_)>(
          reinterpret_cast<char*>(&detector_parameters_),
          reinterpret_cast<char*>(&other->detector_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddDetectorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[4]);
}

// ===================================================================

class AddDetectorResponse::_Internal {
 public:
};

AddDetectorResponse::AddDetectorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.AddDetectorResponse)
}
AddDetectorResponse::AddDetectorResponse(const AddDetectorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.AddDetectorResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddDetectorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddDetectorResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddDetectorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[5]);
}

// ===================================================================

class RemoveDetectorRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const RemoveDetectorRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
RemoveDetectorRequest::_Internal::extra(const RemoveDetectorRequest* msg) {
  return *msg->extra_;
}
void RemoveDetectorRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
RemoveDetectorRequest::RemoveDetectorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.RemoveDetectorRequest)
}
RemoveDetectorRequest::RemoveDetectorRequest(const RemoveDetectorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  detector_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    detector_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detector_name().empty()) {
    detector_name_.Set(from._internal_detector_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.RemoveDetectorRequest)
}

inline void RemoveDetectorRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
detector_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  detector_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

RemoveDetectorRequest::~RemoveDetectorRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.RemoveDetectorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveDetectorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  detector_name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void RemoveDetectorRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveDetectorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.RemoveDetectorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  detector_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveDetectorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.RemoveDetectorRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string detector_name = 2 [json_name = "detectorName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_detector_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.RemoveDetectorRequest.detector_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveDetectorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.RemoveDetectorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.RemoveDetectorRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string detector_name = 2 [json_name = "detectorName"];
  if (!this->_internal_detector_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detector_name().data(), static_cast<int>(this->_internal_detector_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.RemoveDetectorRequest.detector_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detector_name(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.RemoveDetectorRequest)
  return target;
}

size_t RemoveDetectorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.RemoveDetectorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string detector_name = 2 [json_name = "detectorName"];
  if (!this->_internal_detector_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detector_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveDetectorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveDetectorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveDetectorRequest::GetClassData() const { return &_class_data_; }

void RemoveDetectorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveDetectorRequest *>(to)->MergeFrom(
      static_cast<const RemoveDetectorRequest &>(from));
}


void RemoveDetectorRequest::MergeFrom(const RemoveDetectorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.RemoveDetectorRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_detector_name().empty()) {
    _internal_set_detector_name(from._internal_detector_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveDetectorRequest::CopyFrom(const RemoveDetectorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.RemoveDetectorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveDetectorRequest::IsInitialized() const {
  return true;
}

void RemoveDetectorRequest::InternalSwap(RemoveDetectorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &detector_name_, lhs_arena,
      &other->detector_name_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveDetectorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[6]);
}

// ===================================================================

class RemoveDetectorResponse::_Internal {
 public:
};

RemoveDetectorResponse::RemoveDetectorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.RemoveDetectorResponse)
}
RemoveDetectorResponse::RemoveDetectorResponse(const RemoveDetectorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.RemoveDetectorResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveDetectorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveDetectorResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RemoveDetectorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[7]);
}

// ===================================================================

class GetDetectionsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetDetectionsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetDetectionsRequest::_Internal::extra(const GetDetectionsRequest* msg) {
  return *msg->extra_;
}
void GetDetectionsRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetDetectionsRequest::GetDetectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetDetectionsRequest)
}
GetDetectionsRequest::GetDetectionsRequest(const GetDetectionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    image_.Set(from._internal_image(), 
      GetArenaForAllocation());
  }
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  detector_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    detector_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detector_name().empty()) {
    detector_name_.Set(from._internal_detector_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetDetectionsRequest)
}

inline void GetDetectionsRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
detector_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  detector_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extra_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&extra_)) + sizeof(height_));
}

GetDetectionsRequest::~GetDetectionsRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetDetectionsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDetectionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  image_.Destroy();
  mime_type_.Destroy();
  detector_name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetDetectionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDetectionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetDetectionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  image_.ClearToEmpty();
  mime_type_.ClearToEmpty();
  detector_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDetectionsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetDetectionsRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2 [json_name = "image"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 width = 3 [json_name = "width"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 height = 4 [json_name = "height"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 5 [json_name = "mimeType"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetDetectionsRequest.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // string detector_name = 6 [json_name = "detectorName"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_detector_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetDetectionsRequest.detector_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDetectionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetDetectionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetDetectionsRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes image = 2 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  // int64 width = 3 [json_name = "width"];
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_width(), target);
  }

  // int64 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_height(), target);
  }

  // string mime_type = 5 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetDetectionsRequest.mime_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mime_type(), target);
  }

  // string detector_name = 6 [json_name = "detectorName"];
  if (!this->_internal_detector_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detector_name().data(), static_cast<int>(this->_internal_detector_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetDetectionsRequest.detector_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_detector_name(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetDetectionsRequest)
  return target;
}

size_t GetDetectionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetDetectionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes image = 2 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // string mime_type = 5 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // string detector_name = 6 [json_name = "detectorName"];
  if (!this->_internal_detector_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detector_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  // int64 width = 3 [json_name = "width"];
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_width());
  }

  // int64 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDetectionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDetectionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDetectionsRequest::GetClassData() const { return &_class_data_; }

void GetDetectionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDetectionsRequest *>(to)->MergeFrom(
      static_cast<const GetDetectionsRequest &>(from));
}


void GetDetectionsRequest::MergeFrom(const GetDetectionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetDetectionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_detector_name().empty()) {
    _internal_set_detector_name(from._internal_detector_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDetectionsRequest::CopyFrom(const GetDetectionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetDetectionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDetectionsRequest::IsInitialized() const {
  return true;
}

void GetDetectionsRequest::InternalSwap(GetDetectionsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &detector_name_, lhs_arena,
      &other->detector_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDetectionsRequest, height_)
      + sizeof(GetDetectionsRequest::height_)
      - PROTOBUF_FIELD_OFFSET(GetDetectionsRequest, extra_)>(
          reinterpret_cast<char*>(&extra_),
          reinterpret_cast<char*>(&other->extra_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDetectionsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[8]);
}

// ===================================================================

class GetDetectionsResponse::_Internal {
 public:
};

GetDetectionsResponse::GetDetectionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  detections_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetDetectionsResponse)
}
GetDetectionsResponse::GetDetectionsResponse(const GetDetectionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detections_(from.detections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetDetectionsResponse)
}

inline void GetDetectionsResponse::SharedCtor() {
}

GetDetectionsResponse::~GetDetectionsResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetDetectionsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDetectionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetDetectionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDetectionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetDetectionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDetectionsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDetectionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetDetectionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detections_size()); i < n; i++) {
    const auto& repfield = this->_internal_detections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetDetectionsResponse)
  return target;
}

size_t GetDetectionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetDetectionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
  total_size += 1UL * this->_internal_detections_size();
  for (const auto& msg : this->detections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDetectionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDetectionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDetectionsResponse::GetClassData() const { return &_class_data_; }

void GetDetectionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDetectionsResponse *>(to)->MergeFrom(
      static_cast<const GetDetectionsResponse &>(from));
}


void GetDetectionsResponse::MergeFrom(const GetDetectionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetDetectionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDetectionsResponse::CopyFrom(const GetDetectionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetDetectionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDetectionsResponse::IsInitialized() const {
  return true;
}

void GetDetectionsResponse::InternalSwap(GetDetectionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  detections_.InternalSwap(&other->detections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDetectionsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[9]);
}

// ===================================================================

class GetDetectionsFromCameraRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetDetectionsFromCameraRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetDetectionsFromCameraRequest::_Internal::extra(const GetDetectionsFromCameraRequest* msg) {
  return *msg->extra_;
}
void GetDetectionsFromCameraRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetDetectionsFromCameraRequest::GetDetectionsFromCameraRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetDetectionsFromCameraRequest)
}
GetDetectionsFromCameraRequest::GetDetectionsFromCameraRequest(const GetDetectionsFromCameraRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    camera_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    camera_name_.Set(from._internal_camera_name(), 
      GetArenaForAllocation());
  }
  detector_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    detector_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detector_name().empty()) {
    detector_name_.Set(from._internal_detector_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetDetectionsFromCameraRequest)
}

inline void GetDetectionsFromCameraRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
camera_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  camera_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
detector_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  detector_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

GetDetectionsFromCameraRequest::~GetDetectionsFromCameraRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDetectionsFromCameraRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  camera_name_.Destroy();
  detector_name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetDetectionsFromCameraRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDetectionsFromCameraRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  camera_name_.ClearToEmpty();
  detector_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDetectionsFromCameraRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetDetectionsFromCameraRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string camera_name = 2 [json_name = "cameraName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetDetectionsFromCameraRequest.camera_name"));
        } else
          goto handle_unusual;
        continue;
      // string detector_name = 3 [json_name = "detectorName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_detector_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetDetectionsFromCameraRequest.detector_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDetectionsFromCameraRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetDetectionsFromCameraRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetDetectionsFromCameraRequest.camera_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_name(), target);
  }

  // string detector_name = 3 [json_name = "detectorName"];
  if (!this->_internal_detector_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detector_name().data(), static_cast<int>(this->_internal_detector_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetDetectionsFromCameraRequest.detector_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_detector_name(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  return target;
}

size_t GetDetectionsFromCameraRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_name());
  }

  // string detector_name = 3 [json_name = "detectorName"];
  if (!this->_internal_detector_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detector_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDetectionsFromCameraRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDetectionsFromCameraRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDetectionsFromCameraRequest::GetClassData() const { return &_class_data_; }

void GetDetectionsFromCameraRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDetectionsFromCameraRequest *>(to)->MergeFrom(
      static_cast<const GetDetectionsFromCameraRequest &>(from));
}


void GetDetectionsFromCameraRequest::MergeFrom(const GetDetectionsFromCameraRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_camera_name().empty()) {
    _internal_set_camera_name(from._internal_camera_name());
  }
  if (!from._internal_detector_name().empty()) {
    _internal_set_detector_name(from._internal_detector_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDetectionsFromCameraRequest::CopyFrom(const GetDetectionsFromCameraRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetDetectionsFromCameraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDetectionsFromCameraRequest::IsInitialized() const {
  return true;
}

void GetDetectionsFromCameraRequest::InternalSwap(GetDetectionsFromCameraRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &camera_name_, lhs_arena,
      &other->camera_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &detector_name_, lhs_arena,
      &other->detector_name_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDetectionsFromCameraRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[10]);
}

// ===================================================================

class GetDetectionsFromCameraResponse::_Internal {
 public:
};

GetDetectionsFromCameraResponse::GetDetectionsFromCameraResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  detections_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetDetectionsFromCameraResponse)
}
GetDetectionsFromCameraResponse::GetDetectionsFromCameraResponse(const GetDetectionsFromCameraResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      detections_(from.detections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetDetectionsFromCameraResponse)
}

inline void GetDetectionsFromCameraResponse::SharedCtor() {
}

GetDetectionsFromCameraResponse::~GetDetectionsFromCameraResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDetectionsFromCameraResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetDetectionsFromCameraResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetDetectionsFromCameraResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detections_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDetectionsFromCameraResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_detections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDetectionsFromCameraResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_detections_size()); i < n; i++) {
    const auto& repfield = this->_internal_detections(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  return target;
}

size_t GetDetectionsFromCameraResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Detection detections = 1 [json_name = "detections"];
  total_size += 1UL * this->_internal_detections_size();
  for (const auto& msg : this->detections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDetectionsFromCameraResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetDetectionsFromCameraResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDetectionsFromCameraResponse::GetClassData() const { return &_class_data_; }

void GetDetectionsFromCameraResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetDetectionsFromCameraResponse *>(to)->MergeFrom(
      static_cast<const GetDetectionsFromCameraResponse &>(from));
}


void GetDetectionsFromCameraResponse::MergeFrom(const GetDetectionsFromCameraResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  detections_.MergeFrom(from.detections_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDetectionsFromCameraResponse::CopyFrom(const GetDetectionsFromCameraResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetDetectionsFromCameraResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDetectionsFromCameraResponse::IsInitialized() const {
  return true;
}

void GetDetectionsFromCameraResponse::InternalSwap(GetDetectionsFromCameraResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  detections_.InternalSwap(&other->detections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDetectionsFromCameraResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[11]);
}

// ===================================================================

class Detection::_Internal {
 public:
  using HasBits = decltype(std::declval<Detection>()._has_bits_);
  static void set_has_x_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y_min(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y_max(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

Detection::Detection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.Detection)
}
Detection::Detection(const Detection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_name().empty()) {
    class_name_.Set(from._internal_class_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&x_min_, &from.x_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&x_min_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.Detection)
}

inline void Detection::SharedCtor() {
class_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&x_min_)) + sizeof(confidence_));
}

Detection::~Detection() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.Detection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Detection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.Destroy();
}

void Detection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Detection::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.Detection)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_max_) -
        reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  }
  confidence_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Detection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 x_min = 1 [json_name = "xMin"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x_min(&has_bits);
          x_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 y_min = 2 [json_name = "yMin"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y_min(&has_bits);
          y_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 x_max = 3 [json_name = "xMax"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_x_max(&has_bits);
          x_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 y_max = 4 [json_name = "yMax"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_y_max(&has_bits);
          y_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double confidence = 5 [json_name = "confidence"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string class_name = 6 [json_name = "className"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.Detection.class_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Detection::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.Detection)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int64 x_min = 1 [json_name = "xMin"];
  if (_internal_has_x_min()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_x_min(), target);
  }

  // optional int64 y_min = 2 [json_name = "yMin"];
  if (_internal_has_y_min()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_y_min(), target);
  }

  // optional int64 x_max = 3 [json_name = "xMax"];
  if (_internal_has_x_max()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_x_max(), target);
  }

  // optional int64 y_max = 4 [json_name = "yMax"];
  if (_internal_has_y_max()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_y_max(), target);
  }

  // double confidence = 5 [json_name = "confidence"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_confidence(), target);
  }

  // string class_name = 6 [json_name = "className"];
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.Detection.class_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_class_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.Detection)
  return target;
}

size_t Detection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.Detection)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_name = 6 [json_name = "className"];
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 x_min = 1 [json_name = "xMin"];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_x_min());
    }

    // optional int64 y_min = 2 [json_name = "yMin"];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_y_min());
    }

    // optional int64 x_max = 3 [json_name = "xMax"];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_x_max());
    }

    // optional int64 y_max = 4 [json_name = "yMax"];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_y_max());
    }

  }
  // double confidence = 5 [json_name = "confidence"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Detection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Detection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Detection::GetClassData() const { return &_class_data_; }

void Detection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Detection *>(to)->MergeFrom(
      static_cast<const Detection &>(from));
}


void Detection::MergeFrom(const Detection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.Detection)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_min_ = from.x_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_min_ = from.y_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_max_ = from.x_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_max_ = from.y_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = from._internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Detection::CopyFrom(const Detection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.Detection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Detection::IsInitialized() const {
  return true;
}

void Detection::InternalSwap(Detection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Detection, confidence_)
      + sizeof(Detection::confidence_)
      - PROTOBUF_FIELD_OFFSET(Detection, x_min_)>(
          reinterpret_cast<char*>(&x_min_),
          reinterpret_cast<char*>(&other->x_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Detection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[12]);
}

// ===================================================================

class GetClassifierNamesRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetClassifierNamesRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetClassifierNamesRequest::_Internal::extra(const GetClassifierNamesRequest* msg) {
  return *msg->extra_;
}
void GetClassifierNamesRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetClassifierNamesRequest::GetClassifierNamesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetClassifierNamesRequest)
}
GetClassifierNamesRequest::GetClassifierNamesRequest(const GetClassifierNamesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetClassifierNamesRequest)
}

inline void GetClassifierNamesRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

GetClassifierNamesRequest::~GetClassifierNamesRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetClassifierNamesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClassifierNamesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetClassifierNamesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetClassifierNamesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetClassifierNamesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClassifierNamesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetClassifierNamesRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClassifierNamesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetClassifierNamesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetClassifierNamesRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetClassifierNamesRequest)
  return target;
}

size_t GetClassifierNamesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetClassifierNamesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClassifierNamesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetClassifierNamesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassifierNamesRequest::GetClassData() const { return &_class_data_; }

void GetClassifierNamesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetClassifierNamesRequest *>(to)->MergeFrom(
      static_cast<const GetClassifierNamesRequest &>(from));
}


void GetClassifierNamesRequest::MergeFrom(const GetClassifierNamesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetClassifierNamesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClassifierNamesRequest::CopyFrom(const GetClassifierNamesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetClassifierNamesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClassifierNamesRequest::IsInitialized() const {
  return true;
}

void GetClassifierNamesRequest::InternalSwap(GetClassifierNamesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClassifierNamesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[13]);
}

// ===================================================================

class GetClassifierNamesResponse::_Internal {
 public:
};

GetClassifierNamesResponse::GetClassifierNamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  classifier_names_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetClassifierNamesResponse)
}
GetClassifierNamesResponse::GetClassifierNamesResponse(const GetClassifierNamesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      classifier_names_(from.classifier_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetClassifierNamesResponse)
}

inline void GetClassifierNamesResponse::SharedCtor() {
}

GetClassifierNamesResponse::~GetClassifierNamesResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetClassifierNamesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClassifierNamesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetClassifierNamesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetClassifierNamesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetClassifierNamesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifier_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClassifierNamesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string classifier_names = 1 [json_name = "classifierNames"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_classifier_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetClassifierNamesResponse.classifier_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClassifierNamesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetClassifierNamesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string classifier_names = 1 [json_name = "classifierNames"];
  for (int i = 0, n = this->_internal_classifier_names_size(); i < n; i++) {
    const auto& s = this->_internal_classifier_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetClassifierNamesResponse.classifier_names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetClassifierNamesResponse)
  return target;
}

size_t GetClassifierNamesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetClassifierNamesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string classifier_names = 1 [json_name = "classifierNames"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(classifier_names_.size());
  for (int i = 0, n = classifier_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      classifier_names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClassifierNamesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetClassifierNamesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassifierNamesResponse::GetClassData() const { return &_class_data_; }

void GetClassifierNamesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetClassifierNamesResponse *>(to)->MergeFrom(
      static_cast<const GetClassifierNamesResponse &>(from));
}


void GetClassifierNamesResponse::MergeFrom(const GetClassifierNamesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetClassifierNamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  classifier_names_.MergeFrom(from.classifier_names_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClassifierNamesResponse::CopyFrom(const GetClassifierNamesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetClassifierNamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClassifierNamesResponse::IsInitialized() const {
  return true;
}

void GetClassifierNamesResponse::InternalSwap(GetClassifierNamesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  classifier_names_.InternalSwap(&other->classifier_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClassifierNamesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[14]);
}

// ===================================================================

class AddClassifierRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& classifier_parameters(const AddClassifierRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const AddClassifierRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
AddClassifierRequest::_Internal::classifier_parameters(const AddClassifierRequest* msg) {
  return *msg->classifier_parameters_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
AddClassifierRequest::_Internal::extra(const AddClassifierRequest* msg) {
  return *msg->extra_;
}
void AddClassifierRequest::clear_classifier_parameters() {
  if (GetArenaForAllocation() == nullptr && classifier_parameters_ != nullptr) {
    delete classifier_parameters_;
  }
  classifier_parameters_ = nullptr;
}
void AddClassifierRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
AddClassifierRequest::AddClassifierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.AddClassifierRequest)
}
AddClassifierRequest::AddClassifierRequest(const AddClassifierRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  classifier_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    classifier_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_classifier_name().empty()) {
    classifier_name_.Set(from._internal_classifier_name(), 
      GetArenaForAllocation());
  }
  classifier_model_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    classifier_model_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_classifier_model_type().empty()) {
    classifier_model_type_.Set(from._internal_classifier_model_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_classifier_parameters()) {
    classifier_parameters_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.classifier_parameters_);
  } else {
    classifier_parameters_ = nullptr;
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.AddClassifierRequest)
}

inline void AddClassifierRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
classifier_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  classifier_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
classifier_model_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  classifier_model_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&classifier_parameters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extra_) -
    reinterpret_cast<char*>(&classifier_parameters_)) + sizeof(extra_));
}

AddClassifierRequest::~AddClassifierRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.AddClassifierRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddClassifierRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  classifier_name_.Destroy();
  classifier_model_type_.Destroy();
  if (this != internal_default_instance()) delete classifier_parameters_;
  if (this != internal_default_instance()) delete extra_;
}

void AddClassifierRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddClassifierRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.AddClassifierRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  classifier_name_.ClearToEmpty();
  classifier_model_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && classifier_parameters_ != nullptr) {
    delete classifier_parameters_;
  }
  classifier_parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddClassifierRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.AddClassifierRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string classifier_name = 2 [json_name = "classifierName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_classifier_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.AddClassifierRequest.classifier_name"));
        } else
          goto handle_unusual;
        continue;
      // string classifier_model_type = 3 [json_name = "classifierModelType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_classifier_model_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.AddClassifierRequest.classifier_model_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct classifier_parameters = 4 [json_name = "classifierParameters"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_classifier_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddClassifierRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.AddClassifierRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.AddClassifierRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string classifier_name = 2 [json_name = "classifierName"];
  if (!this->_internal_classifier_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classifier_name().data(), static_cast<int>(this->_internal_classifier_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.AddClassifierRequest.classifier_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_classifier_name(), target);
  }

  // string classifier_model_type = 3 [json_name = "classifierModelType"];
  if (!this->_internal_classifier_model_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classifier_model_type().data(), static_cast<int>(this->_internal_classifier_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.AddClassifierRequest.classifier_model_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_classifier_model_type(), target);
  }

  // .google.protobuf.Struct classifier_parameters = 4 [json_name = "classifierParameters"];
  if (this->_internal_has_classifier_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::classifier_parameters(this),
        _Internal::classifier_parameters(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.AddClassifierRequest)
  return target;
}

size_t AddClassifierRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.AddClassifierRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string classifier_name = 2 [json_name = "classifierName"];
  if (!this->_internal_classifier_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classifier_name());
  }

  // string classifier_model_type = 3 [json_name = "classifierModelType"];
  if (!this->_internal_classifier_model_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classifier_model_type());
  }

  // .google.protobuf.Struct classifier_parameters = 4 [json_name = "classifierParameters"];
  if (this->_internal_has_classifier_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classifier_parameters_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddClassifierRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddClassifierRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddClassifierRequest::GetClassData() const { return &_class_data_; }

void AddClassifierRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddClassifierRequest *>(to)->MergeFrom(
      static_cast<const AddClassifierRequest &>(from));
}


void AddClassifierRequest::MergeFrom(const AddClassifierRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.AddClassifierRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_classifier_name().empty()) {
    _internal_set_classifier_name(from._internal_classifier_name());
  }
  if (!from._internal_classifier_model_type().empty()) {
    _internal_set_classifier_model_type(from._internal_classifier_model_type());
  }
  if (from._internal_has_classifier_parameters()) {
    _internal_mutable_classifier_parameters()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_classifier_parameters());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddClassifierRequest::CopyFrom(const AddClassifierRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.AddClassifierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddClassifierRequest::IsInitialized() const {
  return true;
}

void AddClassifierRequest::InternalSwap(AddClassifierRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &classifier_name_, lhs_arena,
      &other->classifier_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &classifier_model_type_, lhs_arena,
      &other->classifier_model_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddClassifierRequest, extra_)
      + sizeof(AddClassifierRequest::extra_)
      - PROTOBUF_FIELD_OFFSET(AddClassifierRequest, classifier_parameters_)>(
          reinterpret_cast<char*>(&classifier_parameters_),
          reinterpret_cast<char*>(&other->classifier_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddClassifierRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[15]);
}

// ===================================================================

class AddClassifierResponse::_Internal {
 public:
};

AddClassifierResponse::AddClassifierResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.AddClassifierResponse)
}
AddClassifierResponse::AddClassifierResponse(const AddClassifierResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.AddClassifierResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddClassifierResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddClassifierResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddClassifierResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[16]);
}

// ===================================================================

class RemoveClassifierRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const RemoveClassifierRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
RemoveClassifierRequest::_Internal::extra(const RemoveClassifierRequest* msg) {
  return *msg->extra_;
}
void RemoveClassifierRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
RemoveClassifierRequest::RemoveClassifierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.RemoveClassifierRequest)
}
RemoveClassifierRequest::RemoveClassifierRequest(const RemoveClassifierRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  classifier_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    classifier_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_classifier_name().empty()) {
    classifier_name_.Set(from._internal_classifier_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.RemoveClassifierRequest)
}

inline void RemoveClassifierRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
classifier_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  classifier_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

RemoveClassifierRequest::~RemoveClassifierRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.RemoveClassifierRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveClassifierRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  classifier_name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void RemoveClassifierRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveClassifierRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.RemoveClassifierRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  classifier_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveClassifierRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.RemoveClassifierRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string classifier_name = 2 [json_name = "classifierName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_classifier_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.RemoveClassifierRequest.classifier_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveClassifierRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.RemoveClassifierRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.RemoveClassifierRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string classifier_name = 2 [json_name = "classifierName"];
  if (!this->_internal_classifier_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classifier_name().data(), static_cast<int>(this->_internal_classifier_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.RemoveClassifierRequest.classifier_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_classifier_name(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.RemoveClassifierRequest)
  return target;
}

size_t RemoveClassifierRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.RemoveClassifierRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string classifier_name = 2 [json_name = "classifierName"];
  if (!this->_internal_classifier_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classifier_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveClassifierRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveClassifierRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveClassifierRequest::GetClassData() const { return &_class_data_; }

void RemoveClassifierRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveClassifierRequest *>(to)->MergeFrom(
      static_cast<const RemoveClassifierRequest &>(from));
}


void RemoveClassifierRequest::MergeFrom(const RemoveClassifierRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.RemoveClassifierRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_classifier_name().empty()) {
    _internal_set_classifier_name(from._internal_classifier_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveClassifierRequest::CopyFrom(const RemoveClassifierRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.RemoveClassifierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveClassifierRequest::IsInitialized() const {
  return true;
}

void RemoveClassifierRequest::InternalSwap(RemoveClassifierRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &classifier_name_, lhs_arena,
      &other->classifier_name_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveClassifierRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[17]);
}

// ===================================================================

class RemoveClassifierResponse::_Internal {
 public:
};

RemoveClassifierResponse::RemoveClassifierResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.RemoveClassifierResponse)
}
RemoveClassifierResponse::RemoveClassifierResponse(const RemoveClassifierResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.RemoveClassifierResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveClassifierResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveClassifierResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RemoveClassifierResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[18]);
}

// ===================================================================

class GetClassificationsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetClassificationsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetClassificationsRequest::_Internal::extra(const GetClassificationsRequest* msg) {
  return *msg->extra_;
}
void GetClassificationsRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetClassificationsRequest::GetClassificationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetClassificationsRequest)
}
GetClassificationsRequest::GetClassificationsRequest(const GetClassificationsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    image_.Set(from._internal_image(), 
      GetArenaForAllocation());
  }
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  classifier_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    classifier_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_classifier_name().empty()) {
    classifier_name_.Set(from._internal_classifier_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&n_) -
    reinterpret_cast<char*>(&width_)) + sizeof(n_));
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetClassificationsRequest)
}

inline void GetClassificationsRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
classifier_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  classifier_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extra_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&n_) -
    reinterpret_cast<char*>(&extra_)) + sizeof(n_));
}

GetClassificationsRequest::~GetClassificationsRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetClassificationsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClassificationsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  image_.Destroy();
  mime_type_.Destroy();
  classifier_name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetClassificationsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetClassificationsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetClassificationsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  image_.ClearToEmpty();
  mime_type_.ClearToEmpty();
  classifier_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&n_) -
      reinterpret_cast<char*>(&width_)) + sizeof(n_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClassificationsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetClassificationsRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2 [json_name = "image"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 3 [json_name = "width"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 4 [json_name = "height"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 5 [json_name = "mimeType"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetClassificationsRequest.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // string classifier_name = 6 [json_name = "classifierName"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_classifier_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetClassificationsRequest.classifier_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 n = 7 [json_name = "n"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClassificationsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetClassificationsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetClassificationsRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bytes image = 2 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  // int32 width = 3 [json_name = "width"];
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // string mime_type = 5 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetClassificationsRequest.mime_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mime_type(), target);
  }

  // string classifier_name = 6 [json_name = "classifierName"];
  if (!this->_internal_classifier_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classifier_name().data(), static_cast<int>(this->_internal_classifier_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetClassificationsRequest.classifier_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_classifier_name(), target);
  }

  // int32 n = 7 [json_name = "n"];
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_n(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetClassificationsRequest)
  return target;
}

size_t GetClassificationsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetClassificationsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes image = 2 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // string mime_type = 5 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // string classifier_name = 6 [json_name = "classifierName"];
  if (!this->_internal_classifier_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classifier_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  // int32 width = 3 [json_name = "width"];
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 4 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 n = 7 [json_name = "n"];
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClassificationsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetClassificationsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassificationsRequest::GetClassData() const { return &_class_data_; }

void GetClassificationsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetClassificationsRequest *>(to)->MergeFrom(
      static_cast<const GetClassificationsRequest &>(from));
}


void GetClassificationsRequest::MergeFrom(const GetClassificationsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetClassificationsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_classifier_name().empty()) {
    _internal_set_classifier_name(from._internal_classifier_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_n() != 0) {
    _internal_set_n(from._internal_n());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClassificationsRequest::CopyFrom(const GetClassificationsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetClassificationsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClassificationsRequest::IsInitialized() const {
  return true;
}

void GetClassificationsRequest::InternalSwap(GetClassificationsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &classifier_name_, lhs_arena,
      &other->classifier_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetClassificationsRequest, n_)
      + sizeof(GetClassificationsRequest::n_)
      - PROTOBUF_FIELD_OFFSET(GetClassificationsRequest, extra_)>(
          reinterpret_cast<char*>(&extra_),
          reinterpret_cast<char*>(&other->extra_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClassificationsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[19]);
}

// ===================================================================

class GetClassificationsResponse::_Internal {
 public:
};

GetClassificationsResponse::GetClassificationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  classifications_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetClassificationsResponse)
}
GetClassificationsResponse::GetClassificationsResponse(const GetClassificationsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      classifications_(from.classifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetClassificationsResponse)
}

inline void GetClassificationsResponse::SharedCtor() {
}

GetClassificationsResponse::~GetClassificationsResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetClassificationsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClassificationsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetClassificationsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetClassificationsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetClassificationsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifications_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClassificationsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClassificationsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetClassificationsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classifications_size()); i < n; i++) {
    const auto& repfield = this->_internal_classifications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetClassificationsResponse)
  return target;
}

size_t GetClassificationsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetClassificationsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
  total_size += 1UL * this->_internal_classifications_size();
  for (const auto& msg : this->classifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClassificationsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetClassificationsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassificationsResponse::GetClassData() const { return &_class_data_; }

void GetClassificationsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetClassificationsResponse *>(to)->MergeFrom(
      static_cast<const GetClassificationsResponse &>(from));
}


void GetClassificationsResponse::MergeFrom(const GetClassificationsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetClassificationsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  classifications_.MergeFrom(from.classifications_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClassificationsResponse::CopyFrom(const GetClassificationsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetClassificationsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClassificationsResponse::IsInitialized() const {
  return true;
}

void GetClassificationsResponse::InternalSwap(GetClassificationsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  classifications_.InternalSwap(&other->classifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClassificationsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[20]);
}

// ===================================================================

class GetClassificationsFromCameraRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetClassificationsFromCameraRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetClassificationsFromCameraRequest::_Internal::extra(const GetClassificationsFromCameraRequest* msg) {
  return *msg->extra_;
}
void GetClassificationsFromCameraRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetClassificationsFromCameraRequest::GetClassificationsFromCameraRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetClassificationsFromCameraRequest)
}
GetClassificationsFromCameraRequest::GetClassificationsFromCameraRequest(const GetClassificationsFromCameraRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    camera_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    camera_name_.Set(from._internal_camera_name(), 
      GetArenaForAllocation());
  }
  classifier_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    classifier_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_classifier_name().empty()) {
    classifier_name_.Set(from._internal_classifier_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  n_ = from.n_;
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetClassificationsFromCameraRequest)
}

inline void GetClassificationsFromCameraRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
camera_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  camera_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
classifier_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  classifier_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&extra_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&n_) -
    reinterpret_cast<char*>(&extra_)) + sizeof(n_));
}

GetClassificationsFromCameraRequest::~GetClassificationsFromCameraRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClassificationsFromCameraRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  camera_name_.Destroy();
  classifier_name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetClassificationsFromCameraRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetClassificationsFromCameraRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  camera_name_.ClearToEmpty();
  classifier_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  n_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClassificationsFromCameraRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetClassificationsFromCameraRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string camera_name = 2 [json_name = "cameraName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetClassificationsFromCameraRequest.camera_name"));
        } else
          goto handle_unusual;
        continue;
      // string classifier_name = 3 [json_name = "classifierName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_classifier_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetClassificationsFromCameraRequest.classifier_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 n = 4 [json_name = "n"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClassificationsFromCameraRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetClassificationsFromCameraRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetClassificationsFromCameraRequest.camera_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_name(), target);
  }

  // string classifier_name = 3 [json_name = "classifierName"];
  if (!this->_internal_classifier_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_classifier_name().data(), static_cast<int>(this->_internal_classifier_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetClassificationsFromCameraRequest.classifier_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_classifier_name(), target);
  }

  // int32 n = 4 [json_name = "n"];
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_n(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  return target;
}

size_t GetClassificationsFromCameraRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_name());
  }

  // string classifier_name = 3 [json_name = "classifierName"];
  if (!this->_internal_classifier_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_classifier_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  // int32 n = 4 [json_name = "n"];
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_n());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClassificationsFromCameraRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetClassificationsFromCameraRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassificationsFromCameraRequest::GetClassData() const { return &_class_data_; }

void GetClassificationsFromCameraRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetClassificationsFromCameraRequest *>(to)->MergeFrom(
      static_cast<const GetClassificationsFromCameraRequest &>(from));
}


void GetClassificationsFromCameraRequest::MergeFrom(const GetClassificationsFromCameraRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_camera_name().empty()) {
    _internal_set_camera_name(from._internal_camera_name());
  }
  if (!from._internal_classifier_name().empty()) {
    _internal_set_classifier_name(from._internal_classifier_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  if (from._internal_n() != 0) {
    _internal_set_n(from._internal_n());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClassificationsFromCameraRequest::CopyFrom(const GetClassificationsFromCameraRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetClassificationsFromCameraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClassificationsFromCameraRequest::IsInitialized() const {
  return true;
}

void GetClassificationsFromCameraRequest::InternalSwap(GetClassificationsFromCameraRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &camera_name_, lhs_arena,
      &other->camera_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &classifier_name_, lhs_arena,
      &other->classifier_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetClassificationsFromCameraRequest, n_)
      + sizeof(GetClassificationsFromCameraRequest::n_)
      - PROTOBUF_FIELD_OFFSET(GetClassificationsFromCameraRequest, extra_)>(
          reinterpret_cast<char*>(&extra_),
          reinterpret_cast<char*>(&other->extra_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClassificationsFromCameraRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[21]);
}

// ===================================================================

class GetClassificationsFromCameraResponse::_Internal {
 public:
};

GetClassificationsFromCameraResponse::GetClassificationsFromCameraResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  classifications_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetClassificationsFromCameraResponse)
}
GetClassificationsFromCameraResponse::GetClassificationsFromCameraResponse(const GetClassificationsFromCameraResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      classifications_(from.classifications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetClassificationsFromCameraResponse)
}

inline void GetClassificationsFromCameraResponse::SharedCtor() {
}

GetClassificationsFromCameraResponse::~GetClassificationsFromCameraResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetClassificationsFromCameraResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetClassificationsFromCameraResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetClassificationsFromCameraResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifications_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetClassificationsFromCameraResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetClassificationsFromCameraResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classifications_size()); i < n; i++) {
    const auto& repfield = this->_internal_classifications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  return target;
}

size_t GetClassificationsFromCameraResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.vision.v1.Classification classifications = 1 [json_name = "classifications"];
  total_size += 1UL * this->_internal_classifications_size();
  for (const auto& msg : this->classifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetClassificationsFromCameraResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetClassificationsFromCameraResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassificationsFromCameraResponse::GetClassData() const { return &_class_data_; }

void GetClassificationsFromCameraResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetClassificationsFromCameraResponse *>(to)->MergeFrom(
      static_cast<const GetClassificationsFromCameraResponse &>(from));
}


void GetClassificationsFromCameraResponse::MergeFrom(const GetClassificationsFromCameraResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  classifications_.MergeFrom(from.classifications_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetClassificationsFromCameraResponse::CopyFrom(const GetClassificationsFromCameraResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetClassificationsFromCameraResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetClassificationsFromCameraResponse::IsInitialized() const {
  return true;
}

void GetClassificationsFromCameraResponse::InternalSwap(GetClassificationsFromCameraResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  classifications_.InternalSwap(&other->classifications_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetClassificationsFromCameraResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[22]);
}

// ===================================================================

class Classification::_Internal {
 public:
};

Classification::Classification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.Classification)
}
Classification::Classification(const Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_class_name().empty()) {
    class_name_.Set(from._internal_class_name(), 
      GetArenaForAllocation());
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.Classification)
}

inline void Classification::SharedCtor() {
class_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
confidence_ = 0;
}

Classification::~Classification() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.Classification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Classification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  class_name_.Destroy();
}

void Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.Classification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  class_name_.ClearToEmpty();
  confidence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Classification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string class_name = 1 [json_name = "className"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.Classification.class_name"));
        } else
          goto handle_unusual;
        continue;
      // double confidence = 2 [json_name = "confidence"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Classification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.Classification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string class_name = 1 [json_name = "className"];
  if (!this->_internal_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_class_name().data(), static_cast<int>(this->_internal_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.Classification.class_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_class_name(), target);
  }

  // double confidence = 2 [json_name = "confidence"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.Classification)
  return target;
}

size_t Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.Classification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string class_name = 1 [json_name = "className"];
  if (!this->_internal_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_class_name());
  }

  // double confidence = 2 [json_name = "confidence"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = this->_internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Classification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Classification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Classification::GetClassData() const { return &_class_data_; }

void Classification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Classification *>(to)->MergeFrom(
      static_cast<const Classification &>(from));
}


void Classification::MergeFrom(const Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_class_name().empty()) {
    _internal_set_class_name(from._internal_class_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_confidence = from._internal_confidence();
  uint64_t raw_confidence;
  memcpy(&raw_confidence, &tmp_confidence, sizeof(tmp_confidence));
  if (raw_confidence != 0) {
    _internal_set_confidence(from._internal_confidence());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Classification::CopyFrom(const Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Classification::IsInitialized() const {
  return true;
}

void Classification::InternalSwap(Classification* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Classification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[23]);
}

// ===================================================================

class GetSegmenterNamesRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetSegmenterNamesRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetSegmenterNamesRequest::_Internal::extra(const GetSegmenterNamesRequest* msg) {
  return *msg->extra_;
}
void GetSegmenterNamesRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetSegmenterNamesRequest::GetSegmenterNamesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetSegmenterNamesRequest)
}
GetSegmenterNamesRequest::GetSegmenterNamesRequest(const GetSegmenterNamesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetSegmenterNamesRequest)
}

inline void GetSegmenterNamesRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

GetSegmenterNamesRequest::~GetSegmenterNamesRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetSegmenterNamesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSegmenterNamesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetSegmenterNamesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSegmenterNamesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetSegmenterNamesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmenterNamesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetSegmenterNamesRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSegmenterNamesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetSegmenterNamesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetSegmenterNamesRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetSegmenterNamesRequest)
  return target;
}

size_t GetSegmenterNamesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetSegmenterNamesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmenterNamesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSegmenterNamesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmenterNamesRequest::GetClassData() const { return &_class_data_; }

void GetSegmenterNamesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSegmenterNamesRequest *>(to)->MergeFrom(
      static_cast<const GetSegmenterNamesRequest &>(from));
}


void GetSegmenterNamesRequest::MergeFrom(const GetSegmenterNamesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetSegmenterNamesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSegmenterNamesRequest::CopyFrom(const GetSegmenterNamesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetSegmenterNamesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmenterNamesRequest::IsInitialized() const {
  return true;
}

void GetSegmenterNamesRequest::InternalSwap(GetSegmenterNamesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmenterNamesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[24]);
}

// ===================================================================

class GetSegmenterNamesResponse::_Internal {
 public:
};

GetSegmenterNamesResponse::GetSegmenterNamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  segmenter_names_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetSegmenterNamesResponse)
}
GetSegmenterNamesResponse::GetSegmenterNamesResponse(const GetSegmenterNamesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      segmenter_names_(from.segmenter_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetSegmenterNamesResponse)
}

inline void GetSegmenterNamesResponse::SharedCtor() {
}

GetSegmenterNamesResponse::~GetSegmenterNamesResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetSegmenterNamesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSegmenterNamesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSegmenterNamesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSegmenterNamesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetSegmenterNamesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  segmenter_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSegmenterNamesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string segmenter_names = 1 [json_name = "segmenterNames"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_segmenter_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetSegmenterNamesResponse.segmenter_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSegmenterNamesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetSegmenterNamesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string segmenter_names = 1 [json_name = "segmenterNames"];
  for (int i = 0, n = this->_internal_segmenter_names_size(); i < n; i++) {
    const auto& s = this->_internal_segmenter_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetSegmenterNamesResponse.segmenter_names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetSegmenterNamesResponse)
  return target;
}

size_t GetSegmenterNamesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetSegmenterNamesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string segmenter_names = 1 [json_name = "segmenterNames"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(segmenter_names_.size());
  for (int i = 0, n = segmenter_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      segmenter_names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSegmenterNamesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSegmenterNamesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSegmenterNamesResponse::GetClassData() const { return &_class_data_; }

void GetSegmenterNamesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSegmenterNamesResponse *>(to)->MergeFrom(
      static_cast<const GetSegmenterNamesResponse &>(from));
}


void GetSegmenterNamesResponse::MergeFrom(const GetSegmenterNamesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetSegmenterNamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  segmenter_names_.MergeFrom(from.segmenter_names_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSegmenterNamesResponse::CopyFrom(const GetSegmenterNamesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetSegmenterNamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSegmenterNamesResponse::IsInitialized() const {
  return true;
}

void GetSegmenterNamesResponse::InternalSwap(GetSegmenterNamesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  segmenter_names_.InternalSwap(&other->segmenter_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSegmenterNamesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[25]);
}

// ===================================================================

class AddSegmenterRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& segmenter_parameters(const AddSegmenterRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const AddSegmenterRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
AddSegmenterRequest::_Internal::segmenter_parameters(const AddSegmenterRequest* msg) {
  return *msg->segmenter_parameters_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
AddSegmenterRequest::_Internal::extra(const AddSegmenterRequest* msg) {
  return *msg->extra_;
}
void AddSegmenterRequest::clear_segmenter_parameters() {
  if (GetArenaForAllocation() == nullptr && segmenter_parameters_ != nullptr) {
    delete segmenter_parameters_;
  }
  segmenter_parameters_ = nullptr;
}
void AddSegmenterRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
AddSegmenterRequest::AddSegmenterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.AddSegmenterRequest)
}
AddSegmenterRequest::AddSegmenterRequest(const AddSegmenterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  segmenter_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    segmenter_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_segmenter_name().empty()) {
    segmenter_name_.Set(from._internal_segmenter_name(), 
      GetArenaForAllocation());
  }
  segmenter_model_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    segmenter_model_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_segmenter_model_type().empty()) {
    segmenter_model_type_.Set(from._internal_segmenter_model_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_segmenter_parameters()) {
    segmenter_parameters_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.segmenter_parameters_);
  } else {
    segmenter_parameters_ = nullptr;
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.AddSegmenterRequest)
}

inline void AddSegmenterRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
segmenter_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  segmenter_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
segmenter_model_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  segmenter_model_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&segmenter_parameters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extra_) -
    reinterpret_cast<char*>(&segmenter_parameters_)) + sizeof(extra_));
}

AddSegmenterRequest::~AddSegmenterRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.AddSegmenterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddSegmenterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  segmenter_name_.Destroy();
  segmenter_model_type_.Destroy();
  if (this != internal_default_instance()) delete segmenter_parameters_;
  if (this != internal_default_instance()) delete extra_;
}

void AddSegmenterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddSegmenterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.AddSegmenterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  segmenter_name_.ClearToEmpty();
  segmenter_model_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && segmenter_parameters_ != nullptr) {
    delete segmenter_parameters_;
  }
  segmenter_parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddSegmenterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.AddSegmenterRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string segmenter_name = 2 [json_name = "segmenterName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_segmenter_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.AddSegmenterRequest.segmenter_name"));
        } else
          goto handle_unusual;
        continue;
      // string segmenter_model_type = 3 [json_name = "segmenterModelType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_segmenter_model_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.AddSegmenterRequest.segmenter_model_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct segmenter_parameters = 4 [json_name = "segmenterParameters"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_segmenter_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddSegmenterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.AddSegmenterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.AddSegmenterRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string segmenter_name = 2 [json_name = "segmenterName"];
  if (!this->_internal_segmenter_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_segmenter_name().data(), static_cast<int>(this->_internal_segmenter_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.AddSegmenterRequest.segmenter_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_segmenter_name(), target);
  }

  // string segmenter_model_type = 3 [json_name = "segmenterModelType"];
  if (!this->_internal_segmenter_model_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_segmenter_model_type().data(), static_cast<int>(this->_internal_segmenter_model_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.AddSegmenterRequest.segmenter_model_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_segmenter_model_type(), target);
  }

  // .google.protobuf.Struct segmenter_parameters = 4 [json_name = "segmenterParameters"];
  if (this->_internal_has_segmenter_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::segmenter_parameters(this),
        _Internal::segmenter_parameters(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.AddSegmenterRequest)
  return target;
}

size_t AddSegmenterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.AddSegmenterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string segmenter_name = 2 [json_name = "segmenterName"];
  if (!this->_internal_segmenter_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_segmenter_name());
  }

  // string segmenter_model_type = 3 [json_name = "segmenterModelType"];
  if (!this->_internal_segmenter_model_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_segmenter_model_type());
  }

  // .google.protobuf.Struct segmenter_parameters = 4 [json_name = "segmenterParameters"];
  if (this->_internal_has_segmenter_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *segmenter_parameters_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddSegmenterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddSegmenterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddSegmenterRequest::GetClassData() const { return &_class_data_; }

void AddSegmenterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddSegmenterRequest *>(to)->MergeFrom(
      static_cast<const AddSegmenterRequest &>(from));
}


void AddSegmenterRequest::MergeFrom(const AddSegmenterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.AddSegmenterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_segmenter_name().empty()) {
    _internal_set_segmenter_name(from._internal_segmenter_name());
  }
  if (!from._internal_segmenter_model_type().empty()) {
    _internal_set_segmenter_model_type(from._internal_segmenter_model_type());
  }
  if (from._internal_has_segmenter_parameters()) {
    _internal_mutable_segmenter_parameters()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_segmenter_parameters());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddSegmenterRequest::CopyFrom(const AddSegmenterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.AddSegmenterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSegmenterRequest::IsInitialized() const {
  return true;
}

void AddSegmenterRequest::InternalSwap(AddSegmenterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &segmenter_name_, lhs_arena,
      &other->segmenter_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &segmenter_model_type_, lhs_arena,
      &other->segmenter_model_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddSegmenterRequest, extra_)
      + sizeof(AddSegmenterRequest::extra_)
      - PROTOBUF_FIELD_OFFSET(AddSegmenterRequest, segmenter_parameters_)>(
          reinterpret_cast<char*>(&segmenter_parameters_),
          reinterpret_cast<char*>(&other->segmenter_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddSegmenterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[26]);
}

// ===================================================================

class AddSegmenterResponse::_Internal {
 public:
};

AddSegmenterResponse::AddSegmenterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.AddSegmenterResponse)
}
AddSegmenterResponse::AddSegmenterResponse(const AddSegmenterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.AddSegmenterResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddSegmenterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddSegmenterResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddSegmenterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[27]);
}

// ===================================================================

class RemoveSegmenterRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const RemoveSegmenterRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
RemoveSegmenterRequest::_Internal::extra(const RemoveSegmenterRequest* msg) {
  return *msg->extra_;
}
void RemoveSegmenterRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
RemoveSegmenterRequest::RemoveSegmenterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.RemoveSegmenterRequest)
}
RemoveSegmenterRequest::RemoveSegmenterRequest(const RemoveSegmenterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  segmenter_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    segmenter_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_segmenter_name().empty()) {
    segmenter_name_.Set(from._internal_segmenter_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.RemoveSegmenterRequest)
}

inline void RemoveSegmenterRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
segmenter_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  segmenter_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

RemoveSegmenterRequest::~RemoveSegmenterRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.RemoveSegmenterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveSegmenterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  segmenter_name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void RemoveSegmenterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveSegmenterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.RemoveSegmenterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  segmenter_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveSegmenterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.RemoveSegmenterRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string segmenter_name = 2 [json_name = "segmenterName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_segmenter_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.RemoveSegmenterRequest.segmenter_name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveSegmenterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.RemoveSegmenterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.RemoveSegmenterRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string segmenter_name = 2 [json_name = "segmenterName"];
  if (!this->_internal_segmenter_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_segmenter_name().data(), static_cast<int>(this->_internal_segmenter_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.RemoveSegmenterRequest.segmenter_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_segmenter_name(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.RemoveSegmenterRequest)
  return target;
}

size_t RemoveSegmenterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.RemoveSegmenterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string segmenter_name = 2 [json_name = "segmenterName"];
  if (!this->_internal_segmenter_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_segmenter_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveSegmenterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveSegmenterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveSegmenterRequest::GetClassData() const { return &_class_data_; }

void RemoveSegmenterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveSegmenterRequest *>(to)->MergeFrom(
      static_cast<const RemoveSegmenterRequest &>(from));
}


void RemoveSegmenterRequest::MergeFrom(const RemoveSegmenterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.RemoveSegmenterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_segmenter_name().empty()) {
    _internal_set_segmenter_name(from._internal_segmenter_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveSegmenterRequest::CopyFrom(const RemoveSegmenterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.RemoveSegmenterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSegmenterRequest::IsInitialized() const {
  return true;
}

void RemoveSegmenterRequest::InternalSwap(RemoveSegmenterRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &segmenter_name_, lhs_arena,
      &other->segmenter_name_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveSegmenterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[28]);
}

// ===================================================================

class RemoveSegmenterResponse::_Internal {
 public:
};

RemoveSegmenterResponse::RemoveSegmenterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.RemoveSegmenterResponse)
}
RemoveSegmenterResponse::RemoveSegmenterResponse(const RemoveSegmenterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.RemoveSegmenterResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveSegmenterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveSegmenterResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata RemoveSegmenterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[29]);
}

// ===================================================================

class GetObjectPointCloudsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetObjectPointCloudsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetObjectPointCloudsRequest::_Internal::extra(const GetObjectPointCloudsRequest* msg) {
  return *msg->extra_;
}
void GetObjectPointCloudsRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetObjectPointCloudsRequest::GetObjectPointCloudsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetObjectPointCloudsRequest)
}
GetObjectPointCloudsRequest::GetObjectPointCloudsRequest(const GetObjectPointCloudsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    camera_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    camera_name_.Set(from._internal_camera_name(), 
      GetArenaForAllocation());
  }
  segmenter_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    segmenter_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_segmenter_name().empty()) {
    segmenter_name_.Set(from._internal_segmenter_name(), 
      GetArenaForAllocation());
  }
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetObjectPointCloudsRequest)
}

inline void GetObjectPointCloudsRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
camera_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  camera_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
segmenter_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  segmenter_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

GetObjectPointCloudsRequest::~GetObjectPointCloudsRequest() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetObjectPointCloudsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetObjectPointCloudsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  camera_name_.Destroy();
  segmenter_name_.Destroy();
  mime_type_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetObjectPointCloudsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetObjectPointCloudsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetObjectPointCloudsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  camera_name_.ClearToEmpty();
  segmenter_name_.ClearToEmpty();
  mime_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetObjectPointCloudsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetObjectPointCloudsRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string camera_name = 2 [json_name = "cameraName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetObjectPointCloudsRequest.camera_name"));
        } else
          goto handle_unusual;
        continue;
      // string segmenter_name = 3 [json_name = "segmenterName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_segmenter_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetObjectPointCloudsRequest.segmenter_name"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 4 [json_name = "mimeType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetObjectPointCloudsRequest.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetObjectPointCloudsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetObjectPointCloudsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetObjectPointCloudsRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_name().data(), static_cast<int>(this->_internal_camera_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetObjectPointCloudsRequest.camera_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_name(), target);
  }

  // string segmenter_name = 3 [json_name = "segmenterName"];
  if (!this->_internal_segmenter_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_segmenter_name().data(), static_cast<int>(this->_internal_segmenter_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetObjectPointCloudsRequest.segmenter_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_segmenter_name(), target);
  }

  // string mime_type = 4 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetObjectPointCloudsRequest.mime_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mime_type(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetObjectPointCloudsRequest)
  return target;
}

size_t GetObjectPointCloudsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetObjectPointCloudsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string camera_name = 2 [json_name = "cameraName"];
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_name());
  }

  // string segmenter_name = 3 [json_name = "segmenterName"];
  if (!this->_internal_segmenter_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_segmenter_name());
  }

  // string mime_type = 4 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetObjectPointCloudsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetObjectPointCloudsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetObjectPointCloudsRequest::GetClassData() const { return &_class_data_; }

void GetObjectPointCloudsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetObjectPointCloudsRequest *>(to)->MergeFrom(
      static_cast<const GetObjectPointCloudsRequest &>(from));
}


void GetObjectPointCloudsRequest::MergeFrom(const GetObjectPointCloudsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetObjectPointCloudsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_camera_name().empty()) {
    _internal_set_camera_name(from._internal_camera_name());
  }
  if (!from._internal_segmenter_name().empty()) {
    _internal_set_segmenter_name(from._internal_segmenter_name());
  }
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetObjectPointCloudsRequest::CopyFrom(const GetObjectPointCloudsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetObjectPointCloudsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectPointCloudsRequest::IsInitialized() const {
  return true;
}

void GetObjectPointCloudsRequest::InternalSwap(GetObjectPointCloudsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &camera_name_, lhs_arena,
      &other->camera_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &segmenter_name_, lhs_arena,
      &other->segmenter_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetObjectPointCloudsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[30]);
}

// ===================================================================

class GetObjectPointCloudsResponse::_Internal {
 public:
};

void GetObjectPointCloudsResponse::clear_objects() {
  objects_.Clear();
}
GetObjectPointCloudsResponse::GetObjectPointCloudsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  objects_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.vision.v1.GetObjectPointCloudsResponse)
}
GetObjectPointCloudsResponse::GetObjectPointCloudsResponse(const GetObjectPointCloudsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      objects_(from.objects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.vision.v1.GetObjectPointCloudsResponse)
}

inline void GetObjectPointCloudsResponse::SharedCtor() {
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetObjectPointCloudsResponse::~GetObjectPointCloudsResponse() {
  // @@protoc_insertion_point(destructor:viam.service.vision.v1.GetObjectPointCloudsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetObjectPointCloudsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mime_type_.Destroy();
}

void GetObjectPointCloudsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetObjectPointCloudsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.vision.v1.GetObjectPointCloudsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  objects_.Clear();
  mime_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetObjectPointCloudsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mime_type = 1 [json_name = "mimeType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.vision.v1.GetObjectPointCloudsResponse.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.common.v1.PointCloudObject objects = 2 [json_name = "objects"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_objects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetObjectPointCloudsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.vision.v1.GetObjectPointCloudsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mime_type = 1 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.vision.v1.GetObjectPointCloudsResponse.mime_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mime_type(), target);
  }

  // repeated .viam.common.v1.PointCloudObject objects = 2 [json_name = "objects"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.vision.v1.GetObjectPointCloudsResponse)
  return target;
}

size_t GetObjectPointCloudsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.vision.v1.GetObjectPointCloudsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.common.v1.PointCloudObject objects = 2 [json_name = "objects"];
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->objects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string mime_type = 1 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetObjectPointCloudsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetObjectPointCloudsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetObjectPointCloudsResponse::GetClassData() const { return &_class_data_; }

void GetObjectPointCloudsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetObjectPointCloudsResponse *>(to)->MergeFrom(
      static_cast<const GetObjectPointCloudsResponse &>(from));
}


void GetObjectPointCloudsResponse::MergeFrom(const GetObjectPointCloudsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.vision.v1.GetObjectPointCloudsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  objects_.MergeFrom(from.objects_);
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetObjectPointCloudsResponse::CopyFrom(const GetObjectPointCloudsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.vision.v1.GetObjectPointCloudsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectPointCloudsResponse::IsInitialized() const {
  return true;
}

void GetObjectPointCloudsResponse::InternalSwap(GetObjectPointCloudsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  objects_.InternalSwap(&other->objects_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetObjectPointCloudsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_getter, &descriptor_table_service_2fvision_2fv1_2fvision_2eproto_once,
      file_level_metadata_service_2fvision_2fv1_2fvision_2eproto[31]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace vision
}  // namespace service
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetModelParameterSchemaRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetModelParameterSchemaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetModelParameterSchemaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetModelParameterSchemaResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetModelParameterSchemaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetModelParameterSchemaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetDetectorNamesRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetDetectorNamesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetDetectorNamesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetDetectorNamesResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetDetectorNamesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetDetectorNamesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::AddDetectorRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::AddDetectorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::AddDetectorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::AddDetectorResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::AddDetectorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::AddDetectorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::RemoveDetectorRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::RemoveDetectorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::RemoveDetectorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::RemoveDetectorResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::RemoveDetectorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::RemoveDetectorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetDetectionsRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetDetectionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetDetectionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetDetectionsResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetDetectionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetDetectionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetDetectionsFromCameraRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetDetectionsFromCameraRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetDetectionsFromCameraRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetDetectionsFromCameraResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetDetectionsFromCameraResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetDetectionsFromCameraResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::Detection*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::Detection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::Detection >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetClassifierNamesRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetClassifierNamesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetClassifierNamesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetClassifierNamesResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetClassifierNamesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetClassifierNamesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::AddClassifierRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::AddClassifierRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::AddClassifierRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::AddClassifierResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::AddClassifierResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::AddClassifierResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::RemoveClassifierRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::RemoveClassifierRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::RemoveClassifierRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::RemoveClassifierResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::RemoveClassifierResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::RemoveClassifierResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetClassificationsRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetClassificationsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetClassificationsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetClassificationsResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetClassificationsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetClassificationsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetClassificationsFromCameraRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetClassificationsFromCameraRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetClassificationsFromCameraRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetClassificationsFromCameraResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetClassificationsFromCameraResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetClassificationsFromCameraResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::Classification*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::Classification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetSegmenterNamesRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetSegmenterNamesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetSegmenterNamesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetSegmenterNamesResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetSegmenterNamesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetSegmenterNamesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::AddSegmenterRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::AddSegmenterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::AddSegmenterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::AddSegmenterResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::AddSegmenterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::AddSegmenterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::RemoveSegmenterRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::RemoveSegmenterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::RemoveSegmenterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::RemoveSegmenterResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::RemoveSegmenterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::RemoveSegmenterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetObjectPointCloudsRequest*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetObjectPointCloudsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetObjectPointCloudsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::vision::v1::GetObjectPointCloudsResponse*
Arena::CreateMaybeMessage< ::viam::service::vision::v1::GetObjectPointCloudsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::vision::v1::GetObjectPointCloudsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
