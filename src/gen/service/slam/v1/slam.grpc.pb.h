// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service/slam/v1/slam.proto
#ifndef GRPC_service_2fslam_2fv1_2fslam_2eproto__INCLUDED
#define GRPC_service_2fslam_2fv1_2fslam_2eproto__INCLUDED

#include "service/slam/v1/slam.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace viam {
namespace service {
namespace slam {
namespace v1 {

// A SlamService declares the gRPC contract for a slam service
class SLAMService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.service.slam.v1.SLAMService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // GetPosition returns the current estimated position of the robot with
    // respect to the "origin" of the map.
    virtual ::grpc::Status GetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::viam::service::slam::v1::GetPositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPositionResponse>> AsyncGetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPositionResponse>>(AsyncGetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPositionResponse>> PrepareAsyncGetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPositionResponse>>(PrepareAsyncGetPositionRaw(context, request, cq));
    }
    // GetMap returns the latest map image or point cloud generated by the
    // SLAM library
    virtual ::grpc::Status GetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::viam::service::slam::v1::GetMapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetMapResponse>> AsyncGetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetMapResponse>>(AsyncGetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetMapResponse>> PrepareAsyncGetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetMapResponse>>(PrepareAsyncGetMapRaw(context, request, cq));
    }
    // GetPositionNew returns the current estimated position of the robot with
    // respect to a returned component reference. Note: this function will be
    // renamed to GetPosition and replace the existing one in the near future
    virtual ::grpc::Status GetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::viam::service::slam::v1::GetPositionNewResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPositionNewResponse>> AsyncGetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPositionNewResponse>>(AsyncGetPositionNewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPositionNewResponse>> PrepareAsyncGetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPositionNewResponse>>(PrepareAsyncGetPositionNewRaw(context, request, cq));
    }
    // GetPointCloudMap returns the latest point cloud map generated by the
    // SLAM library
    virtual ::grpc::Status GetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::viam::service::slam::v1::GetPointCloudMapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPointCloudMapResponse>> AsyncGetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPointCloudMapResponse>>(AsyncGetPointCloudMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPointCloudMapResponse>> PrepareAsyncGetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPointCloudMapResponse>>(PrepareAsyncGetPointCloudMapRaw(context, request, cq));
    }
    // GetInternalState returns the internal map as defined by the specified slam
    // algorithm required to continue mapping/localizing. This endpoint is not
    // intended for end user usage
    virtual ::grpc::Status GetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::viam::service::slam::v1::GetInternalStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetInternalStateResponse>> AsyncGetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetInternalStateResponse>>(AsyncGetInternalStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetInternalStateResponse>> PrepareAsyncGetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetInternalStateResponse>>(PrepareAsyncGetInternalStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // GetPosition returns the current estimated position of the robot with
      // respect to the "origin" of the map.
      virtual void GetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest* request, ::viam::service::slam::v1::GetPositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest* request, ::viam::service::slam::v1::GetPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetMap returns the latest map image or point cloud generated by the
      // SLAM library
      virtual void GetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest* request, ::viam::service::slam::v1::GetMapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest* request, ::viam::service::slam::v1::GetMapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetPositionNew returns the current estimated position of the robot with
      // respect to a returned component reference. Note: this function will be
      // renamed to GetPosition and replace the existing one in the near future
      virtual void GetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest* request, ::viam::service::slam::v1::GetPositionNewResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest* request, ::viam::service::slam::v1::GetPositionNewResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetPointCloudMap returns the latest point cloud map generated by the
      // SLAM library
      virtual void GetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest* request, ::viam::service::slam::v1::GetPointCloudMapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest* request, ::viam::service::slam::v1::GetPointCloudMapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetInternalState returns the internal map as defined by the specified slam
      // algorithm required to continue mapping/localizing. This endpoint is not
      // intended for end user usage
      virtual void GetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest* request, ::viam::service::slam::v1::GetInternalStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest* request, ::viam::service::slam::v1::GetInternalStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPositionResponse>* AsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPositionResponse>* PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetMapResponse>* AsyncGetMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetMapResponse>* PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPositionNewResponse>* AsyncGetPositionNewRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPositionNewResponse>* PrepareAsyncGetPositionNewRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPointCloudMapResponse>* AsyncGetPointCloudMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetPointCloudMapResponse>* PrepareAsyncGetPointCloudMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetInternalStateResponse>* AsyncGetInternalStateRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::slam::v1::GetInternalStateResponse>* PrepareAsyncGetInternalStateRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::viam::service::slam::v1::GetPositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionResponse>> AsyncGetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionResponse>>(AsyncGetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionResponse>> PrepareAsyncGetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionResponse>>(PrepareAsyncGetPositionRaw(context, request, cq));
    }
    ::grpc::Status GetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::viam::service::slam::v1::GetMapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetMapResponse>> AsyncGetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetMapResponse>>(AsyncGetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetMapResponse>> PrepareAsyncGetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetMapResponse>>(PrepareAsyncGetMapRaw(context, request, cq));
    }
    ::grpc::Status GetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::viam::service::slam::v1::GetPositionNewResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionNewResponse>> AsyncGetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionNewResponse>>(AsyncGetPositionNewRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionNewResponse>> PrepareAsyncGetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionNewResponse>>(PrepareAsyncGetPositionNewRaw(context, request, cq));
    }
    ::grpc::Status GetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::viam::service::slam::v1::GetPointCloudMapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPointCloudMapResponse>> AsyncGetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPointCloudMapResponse>>(AsyncGetPointCloudMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPointCloudMapResponse>> PrepareAsyncGetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPointCloudMapResponse>>(PrepareAsyncGetPointCloudMapRaw(context, request, cq));
    }
    ::grpc::Status GetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::viam::service::slam::v1::GetInternalStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetInternalStateResponse>> AsyncGetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetInternalStateResponse>>(AsyncGetInternalStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetInternalStateResponse>> PrepareAsyncGetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetInternalStateResponse>>(PrepareAsyncGetInternalStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest* request, ::viam::service::slam::v1::GetPositionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest* request, ::viam::service::slam::v1::GetPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest* request, ::viam::service::slam::v1::GetMapResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest* request, ::viam::service::slam::v1::GetMapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest* request, ::viam::service::slam::v1::GetPositionNewResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest* request, ::viam::service::slam::v1::GetPositionNewResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest* request, ::viam::service::slam::v1::GetPointCloudMapResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest* request, ::viam::service::slam::v1::GetPointCloudMapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest* request, ::viam::service::slam::v1::GetInternalStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest* request, ::viam::service::slam::v1::GetInternalStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionResponse>* AsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionResponse>* PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetMapResponse>* AsyncGetMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetMapResponse>* PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionNewResponse>* AsyncGetPositionNewRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionNewResponse>* PrepareAsyncGetPositionNewRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPointCloudMapResponse>* AsyncGetPointCloudMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPointCloudMapResponse>* PrepareAsyncGetPointCloudMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetInternalStateResponse>* AsyncGetInternalStateRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetInternalStateResponse>* PrepareAsyncGetInternalStateRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMap_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPositionNew_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPointCloudMap_;
    const ::grpc::internal::RpcMethod rpcmethod_GetInternalState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // GetPosition returns the current estimated position of the robot with
    // respect to the "origin" of the map.
    virtual ::grpc::Status GetPosition(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetPositionRequest* request, ::viam::service::slam::v1::GetPositionResponse* response);
    // GetMap returns the latest map image or point cloud generated by the
    // SLAM library
    virtual ::grpc::Status GetMap(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetMapRequest* request, ::viam::service::slam::v1::GetMapResponse* response);
    // GetPositionNew returns the current estimated position of the robot with
    // respect to a returned component reference. Note: this function will be
    // renamed to GetPosition and replace the existing one in the near future
    virtual ::grpc::Status GetPositionNew(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetPositionNewRequest* request, ::viam::service::slam::v1::GetPositionNewResponse* response);
    // GetPointCloudMap returns the latest point cloud map generated by the
    // SLAM library
    virtual ::grpc::Status GetPointCloudMap(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest* request, ::viam::service::slam::v1::GetPointCloudMapResponse* response);
    // GetInternalState returns the internal map as defined by the specified slam
    // algorithm required to continue mapping/localizing. This endpoint is not
    // intended for end user usage
    virtual ::grpc::Status GetInternalState(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetInternalStateRequest* request, ::viam::service::slam::v1::GetInternalStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPosition() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionRequest* /*request*/, ::viam::service::slam::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosition(::grpc::ServerContext* context, ::viam::service::slam::v1::GetPositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::service::slam::v1::GetPositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMap() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetMapRequest* /*request*/, ::viam::service::slam::v1::GetMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMap(::grpc::ServerContext* context, ::viam::service::slam::v1::GetMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::service::slam::v1::GetMapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPositionNew : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPositionNew() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetPositionNew() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositionNew(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionNewRequest* /*request*/, ::viam::service::slam::v1::GetPositionNewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPositionNew(::grpc::ServerContext* context, ::viam::service::slam::v1::GetPositionNewRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::service::slam::v1::GetPositionNewResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPointCloudMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPointCloudMap() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetPointCloudMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPointCloudMap(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPointCloudMapRequest* /*request*/, ::viam::service::slam::v1::GetPointCloudMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPointCloudMap(::grpc::ServerContext* context, ::viam::service::slam::v1::GetPointCloudMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::service::slam::v1::GetPointCloudMapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInternalState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInternalState() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetInternalState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInternalState(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetInternalStateRequest* /*request*/, ::viam::service::slam::v1::GetInternalStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInternalState(::grpc::ServerContext* context, ::viam::service::slam::v1::GetInternalStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::service::slam::v1::GetInternalStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetPosition<WithAsyncMethod_GetMap<WithAsyncMethod_GetPositionNew<WithAsyncMethod_GetPointCloudMap<WithAsyncMethod_GetInternalState<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPosition() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::service::slam::v1::GetPositionRequest, ::viam::service::slam::v1::GetPositionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::service::slam::v1::GetPositionRequest* request, ::viam::service::slam::v1::GetPositionResponse* response) { return this->GetPosition(context, request, response); }));}
    void SetMessageAllocatorFor_GetPosition(
        ::grpc::MessageAllocator< ::viam::service::slam::v1::GetPositionRequest, ::viam::service::slam::v1::GetPositionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::service::slam::v1::GetPositionRequest, ::viam::service::slam::v1::GetPositionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionRequest* /*request*/, ::viam::service::slam::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionRequest* /*request*/, ::viam::service::slam::v1::GetPositionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMap() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::service::slam::v1::GetMapRequest, ::viam::service::slam::v1::GetMapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::service::slam::v1::GetMapRequest* request, ::viam::service::slam::v1::GetMapResponse* response) { return this->GetMap(context, request, response); }));}
    void SetMessageAllocatorFor_GetMap(
        ::grpc::MessageAllocator< ::viam::service::slam::v1::GetMapRequest, ::viam::service::slam::v1::GetMapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::service::slam::v1::GetMapRequest, ::viam::service::slam::v1::GetMapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetMapRequest* /*request*/, ::viam::service::slam::v1::GetMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMap(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::service::slam::v1::GetMapRequest* /*request*/, ::viam::service::slam::v1::GetMapResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPositionNew : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPositionNew() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::service::slam::v1::GetPositionNewRequest, ::viam::service::slam::v1::GetPositionNewResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::service::slam::v1::GetPositionNewRequest* request, ::viam::service::slam::v1::GetPositionNewResponse* response) { return this->GetPositionNew(context, request, response); }));}
    void SetMessageAllocatorFor_GetPositionNew(
        ::grpc::MessageAllocator< ::viam::service::slam::v1::GetPositionNewRequest, ::viam::service::slam::v1::GetPositionNewResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::service::slam::v1::GetPositionNewRequest, ::viam::service::slam::v1::GetPositionNewResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPositionNew() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositionNew(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionNewRequest* /*request*/, ::viam::service::slam::v1::GetPositionNewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPositionNew(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionNewRequest* /*request*/, ::viam::service::slam::v1::GetPositionNewResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPointCloudMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPointCloudMap() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::service::slam::v1::GetPointCloudMapRequest, ::viam::service::slam::v1::GetPointCloudMapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest* request, ::viam::service::slam::v1::GetPointCloudMapResponse* response) { return this->GetPointCloudMap(context, request, response); }));}
    void SetMessageAllocatorFor_GetPointCloudMap(
        ::grpc::MessageAllocator< ::viam::service::slam::v1::GetPointCloudMapRequest, ::viam::service::slam::v1::GetPointCloudMapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::service::slam::v1::GetPointCloudMapRequest, ::viam::service::slam::v1::GetPointCloudMapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPointCloudMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPointCloudMap(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPointCloudMapRequest* /*request*/, ::viam::service::slam::v1::GetPointCloudMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPointCloudMap(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::service::slam::v1::GetPointCloudMapRequest* /*request*/, ::viam::service::slam::v1::GetPointCloudMapResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetInternalState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetInternalState() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::service::slam::v1::GetInternalStateRequest, ::viam::service::slam::v1::GetInternalStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::service::slam::v1::GetInternalStateRequest* request, ::viam::service::slam::v1::GetInternalStateResponse* response) { return this->GetInternalState(context, request, response); }));}
    void SetMessageAllocatorFor_GetInternalState(
        ::grpc::MessageAllocator< ::viam::service::slam::v1::GetInternalStateRequest, ::viam::service::slam::v1::GetInternalStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::service::slam::v1::GetInternalStateRequest, ::viam::service::slam::v1::GetInternalStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetInternalState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInternalState(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetInternalStateRequest* /*request*/, ::viam::service::slam::v1::GetInternalStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInternalState(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::service::slam::v1::GetInternalStateRequest* /*request*/, ::viam::service::slam::v1::GetInternalStateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetPosition<WithCallbackMethod_GetMap<WithCallbackMethod_GetPositionNew<WithCallbackMethod_GetPointCloudMap<WithCallbackMethod_GetInternalState<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPosition() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionRequest* /*request*/, ::viam::service::slam::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMap() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetMapRequest* /*request*/, ::viam::service::slam::v1::GetMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPositionNew : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPositionNew() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetPositionNew() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositionNew(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionNewRequest* /*request*/, ::viam::service::slam::v1::GetPositionNewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPointCloudMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPointCloudMap() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetPointCloudMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPointCloudMap(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPointCloudMapRequest* /*request*/, ::viam::service::slam::v1::GetPointCloudMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetInternalState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInternalState() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetInternalState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInternalState(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetInternalStateRequest* /*request*/, ::viam::service::slam::v1::GetInternalStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPosition() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionRequest* /*request*/, ::viam::service::slam::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMap() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetMapRequest* /*request*/, ::viam::service::slam::v1::GetMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPositionNew : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPositionNew() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetPositionNew() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositionNew(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionNewRequest* /*request*/, ::viam::service::slam::v1::GetPositionNewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPositionNew(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPointCloudMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPointCloudMap() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetPointCloudMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPointCloudMap(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPointCloudMapRequest* /*request*/, ::viam::service::slam::v1::GetPointCloudMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPointCloudMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInternalState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInternalState() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetInternalState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInternalState(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetInternalStateRequest* /*request*/, ::viam::service::slam::v1::GetInternalStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInternalState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPosition() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPosition(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionRequest* /*request*/, ::viam::service::slam::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMap() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetMapRequest* /*request*/, ::viam::service::slam::v1::GetMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPositionNew : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPositionNew() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPositionNew(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPositionNew() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPositionNew(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionNewRequest* /*request*/, ::viam::service::slam::v1::GetPositionNewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPositionNew(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPointCloudMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPointCloudMap() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPointCloudMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPointCloudMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPointCloudMap(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPointCloudMapRequest* /*request*/, ::viam::service::slam::v1::GetPointCloudMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPointCloudMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetInternalState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetInternalState() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetInternalState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetInternalState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInternalState(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetInternalStateRequest* /*request*/, ::viam::service::slam::v1::GetInternalStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetInternalState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPosition() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::service::slam::v1::GetPositionRequest, ::viam::service::slam::v1::GetPositionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::service::slam::v1::GetPositionRequest, ::viam::service::slam::v1::GetPositionResponse>* streamer) {
                       return this->StreamedGetPosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionRequest* /*request*/, ::viam::service::slam::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::service::slam::v1::GetPositionRequest,::viam::service::slam::v1::GetPositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMap() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::service::slam::v1::GetMapRequest, ::viam::service::slam::v1::GetMapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::service::slam::v1::GetMapRequest, ::viam::service::slam::v1::GetMapResponse>* streamer) {
                       return this->StreamedGetMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetMapRequest* /*request*/, ::viam::service::slam::v1::GetMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::service::slam::v1::GetMapRequest,::viam::service::slam::v1::GetMapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPositionNew : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPositionNew() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::service::slam::v1::GetPositionNewRequest, ::viam::service::slam::v1::GetPositionNewResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::service::slam::v1::GetPositionNewRequest, ::viam::service::slam::v1::GetPositionNewResponse>* streamer) {
                       return this->StreamedGetPositionNew(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPositionNew() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPositionNew(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPositionNewRequest* /*request*/, ::viam::service::slam::v1::GetPositionNewResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPositionNew(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::service::slam::v1::GetPositionNewRequest,::viam::service::slam::v1::GetPositionNewResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPointCloudMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPointCloudMap() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::service::slam::v1::GetPointCloudMapRequest, ::viam::service::slam::v1::GetPointCloudMapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::service::slam::v1::GetPointCloudMapRequest, ::viam::service::slam::v1::GetPointCloudMapResponse>* streamer) {
                       return this->StreamedGetPointCloudMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPointCloudMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPointCloudMap(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetPointCloudMapRequest* /*request*/, ::viam::service::slam::v1::GetPointCloudMapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPointCloudMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::service::slam::v1::GetPointCloudMapRequest,::viam::service::slam::v1::GetPointCloudMapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInternalState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInternalState() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::service::slam::v1::GetInternalStateRequest, ::viam::service::slam::v1::GetInternalStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::service::slam::v1::GetInternalStateRequest, ::viam::service::slam::v1::GetInternalStateResponse>* streamer) {
                       return this->StreamedGetInternalState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetInternalState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInternalState(::grpc::ServerContext* /*context*/, const ::viam::service::slam::v1::GetInternalStateRequest* /*request*/, ::viam::service::slam::v1::GetInternalStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInternalState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::service::slam::v1::GetInternalStateRequest,::viam::service::slam::v1::GetInternalStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetPosition<WithStreamedUnaryMethod_GetMap<WithStreamedUnaryMethod_GetPositionNew<WithStreamedUnaryMethod_GetPointCloudMap<WithStreamedUnaryMethod_GetInternalState<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetPosition<WithStreamedUnaryMethod_GetMap<WithStreamedUnaryMethod_GetPositionNew<WithStreamedUnaryMethod_GetPointCloudMap<WithStreamedUnaryMethod_GetInternalState<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace slam
}  // namespace service
}  // namespace viam


#endif  // GRPC_service_2fslam_2fv1_2fslam_2eproto__INCLUDED
