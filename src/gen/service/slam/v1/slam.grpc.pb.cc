// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service/slam/v1/slam.proto

#include "service/slam/v1/slam.pb.h"
#include "service/slam/v1/slam.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace viam {
namespace service {
namespace slam {
namespace v1 {

static const char* SLAMService_method_names[] = {
  "/viam.service.slam.v1.SLAMService/GetPosition",
  "/viam.service.slam.v1.SLAMService/GetMap",
  "/viam.service.slam.v1.SLAMService/GetPositionNew",
  "/viam.service.slam.v1.SLAMService/GetPointCloudMap",
  "/viam.service.slam.v1.SLAMService/GetInternalState",
  "/viam.service.slam.v1.SLAMService/GetPointCloudMapStream",
  "/viam.service.slam.v1.SLAMService/GetInternalStateStream",
  "/viam.service.slam.v1.SLAMService/DoCommand",
};

std::unique_ptr< SLAMService::Stub> SLAMService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SLAMService::Stub> stub(new SLAMService::Stub(channel, options));
  return stub;
}

SLAMService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetPosition_(SLAMService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMap_(SLAMService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPositionNew_(SLAMService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPointCloudMap_(SLAMService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInternalState_(SLAMService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPointCloudMapStream_(SLAMService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetInternalStateStream_(SLAMService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DoCommand_(SLAMService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SLAMService::Stub::GetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::viam::service::slam::v1::GetPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::service::slam::v1::GetPositionRequest, ::viam::service::slam::v1::GetPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPosition_, context, request, response);
}

void SLAMService::Stub::async::GetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest* request, ::viam::service::slam::v1::GetPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::service::slam::v1::GetPositionRequest, ::viam::service::slam::v1::GetPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, std::move(f));
}

void SLAMService::Stub::async::GetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest* request, ::viam::service::slam::v1::GetPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionResponse>* SLAMService::Stub::PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::service::slam::v1::GetPositionResponse, ::viam::service::slam::v1::GetPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionResponse>* SLAMService::Stub::AsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SLAMService::Stub::GetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::viam::service::slam::v1::GetMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::service::slam::v1::GetMapRequest, ::viam::service::slam::v1::GetMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMap_, context, request, response);
}

void SLAMService::Stub::async::GetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest* request, ::viam::service::slam::v1::GetMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::service::slam::v1::GetMapRequest, ::viam::service::slam::v1::GetMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, std::move(f));
}

void SLAMService::Stub::async::GetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest* request, ::viam::service::slam::v1::GetMapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetMapResponse>* SLAMService::Stub::PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::service::slam::v1::GetMapResponse, ::viam::service::slam::v1::GetMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetMapResponse>* SLAMService::Stub::AsyncGetMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SLAMService::Stub::GetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::viam::service::slam::v1::GetPositionNewResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::service::slam::v1::GetPositionNewRequest, ::viam::service::slam::v1::GetPositionNewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPositionNew_, context, request, response);
}

void SLAMService::Stub::async::GetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest* request, ::viam::service::slam::v1::GetPositionNewResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::service::slam::v1::GetPositionNewRequest, ::viam::service::slam::v1::GetPositionNewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPositionNew_, context, request, response, std::move(f));
}

void SLAMService::Stub::async::GetPositionNew(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest* request, ::viam::service::slam::v1::GetPositionNewResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPositionNew_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionNewResponse>* SLAMService::Stub::PrepareAsyncGetPositionNewRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::service::slam::v1::GetPositionNewResponse, ::viam::service::slam::v1::GetPositionNewRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPositionNew_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionNewResponse>* SLAMService::Stub::AsyncGetPositionNewRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionNewRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPositionNewRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SLAMService::Stub::GetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::viam::service::slam::v1::GetPointCloudMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::service::slam::v1::GetPointCloudMapRequest, ::viam::service::slam::v1::GetPointCloudMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPointCloudMap_, context, request, response);
}

void SLAMService::Stub::async::GetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest* request, ::viam::service::slam::v1::GetPointCloudMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::service::slam::v1::GetPointCloudMapRequest, ::viam::service::slam::v1::GetPointCloudMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPointCloudMap_, context, request, response, std::move(f));
}

void SLAMService::Stub::async::GetPointCloudMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest* request, ::viam::service::slam::v1::GetPointCloudMapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPointCloudMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPointCloudMapResponse>* SLAMService::Stub::PrepareAsyncGetPointCloudMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::service::slam::v1::GetPointCloudMapResponse, ::viam::service::slam::v1::GetPointCloudMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPointCloudMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPointCloudMapResponse>* SLAMService::Stub::AsyncGetPointCloudMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPointCloudMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SLAMService::Stub::GetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::viam::service::slam::v1::GetInternalStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::service::slam::v1::GetInternalStateRequest, ::viam::service::slam::v1::GetInternalStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetInternalState_, context, request, response);
}

void SLAMService::Stub::async::GetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest* request, ::viam::service::slam::v1::GetInternalStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::service::slam::v1::GetInternalStateRequest, ::viam::service::slam::v1::GetInternalStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInternalState_, context, request, response, std::move(f));
}

void SLAMService::Stub::async::GetInternalState(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest* request, ::viam::service::slam::v1::GetInternalStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetInternalState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetInternalStateResponse>* SLAMService::Stub::PrepareAsyncGetInternalStateRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::service::slam::v1::GetInternalStateResponse, ::viam::service::slam::v1::GetInternalStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetInternalState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetInternalStateResponse>* SLAMService::Stub::AsyncGetInternalStateRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetInternalStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::viam::service::slam::v1::GetPointCloudMapStreamResponse>* SLAMService::Stub::GetPointCloudMapStreamRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapStreamRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::viam::service::slam::v1::GetPointCloudMapStreamResponse>::Create(channel_.get(), rpcmethod_GetPointCloudMapStream_, context, request);
}

void SLAMService::Stub::async::GetPointCloudMapStream(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapStreamRequest* request, ::grpc::ClientReadReactor< ::viam::service::slam::v1::GetPointCloudMapStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::viam::service::slam::v1::GetPointCloudMapStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetPointCloudMapStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::viam::service::slam::v1::GetPointCloudMapStreamResponse>* SLAMService::Stub::AsyncGetPointCloudMapStreamRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::viam::service::slam::v1::GetPointCloudMapStreamResponse>::Create(channel_.get(), cq, rpcmethod_GetPointCloudMapStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::viam::service::slam::v1::GetPointCloudMapStreamResponse>* SLAMService::Stub::PrepareAsyncGetPointCloudMapStreamRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPointCloudMapStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::viam::service::slam::v1::GetPointCloudMapStreamResponse>::Create(channel_.get(), cq, rpcmethod_GetPointCloudMapStream_, context, request, false, nullptr);
}

::grpc::ClientReader< ::viam::service::slam::v1::GetInternalStateStreamResponse>* SLAMService::Stub::GetInternalStateStreamRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateStreamRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::viam::service::slam::v1::GetInternalStateStreamResponse>::Create(channel_.get(), rpcmethod_GetInternalStateStream_, context, request);
}

void SLAMService::Stub::async::GetInternalStateStream(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateStreamRequest* request, ::grpc::ClientReadReactor< ::viam::service::slam::v1::GetInternalStateStreamResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::viam::service::slam::v1::GetInternalStateStreamResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_GetInternalStateStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::viam::service::slam::v1::GetInternalStateStreamResponse>* SLAMService::Stub::AsyncGetInternalStateStreamRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::viam::service::slam::v1::GetInternalStateStreamResponse>::Create(channel_.get(), cq, rpcmethod_GetInternalStateStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::viam::service::slam::v1::GetInternalStateStreamResponse>* SLAMService::Stub::PrepareAsyncGetInternalStateStreamRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetInternalStateStreamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::viam::service::slam::v1::GetInternalStateStreamResponse>::Create(channel_.get(), cq, rpcmethod_GetInternalStateStream_, context, request, false, nullptr);
}

::grpc::Status SLAMService::Stub::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoCommand_, context, request, response);
}

void SLAMService::Stub::async::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, std::move(f));
}

void SLAMService::Stub::async::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* SLAMService::Stub::PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::common::v1::DoCommandResponse, ::viam::common::v1::DoCommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* SLAMService::Stub::AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

SLAMService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLAMService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLAMService::Service, ::viam::service::slam::v1::GetPositionRequest, ::viam::service::slam::v1::GetPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLAMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::slam::v1::GetPositionRequest* req,
             ::viam::service::slam::v1::GetPositionResponse* resp) {
               return service->GetPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLAMService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLAMService::Service, ::viam::service::slam::v1::GetMapRequest, ::viam::service::slam::v1::GetMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLAMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::slam::v1::GetMapRequest* req,
             ::viam::service::slam::v1::GetMapResponse* resp) {
               return service->GetMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLAMService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLAMService::Service, ::viam::service::slam::v1::GetPositionNewRequest, ::viam::service::slam::v1::GetPositionNewResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLAMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::slam::v1::GetPositionNewRequest* req,
             ::viam::service::slam::v1::GetPositionNewResponse* resp) {
               return service->GetPositionNew(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLAMService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLAMService::Service, ::viam::service::slam::v1::GetPointCloudMapRequest, ::viam::service::slam::v1::GetPointCloudMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLAMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::slam::v1::GetPointCloudMapRequest* req,
             ::viam::service::slam::v1::GetPointCloudMapResponse* resp) {
               return service->GetPointCloudMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLAMService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLAMService::Service, ::viam::service::slam::v1::GetInternalStateRequest, ::viam::service::slam::v1::GetInternalStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLAMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::slam::v1::GetInternalStateRequest* req,
             ::viam::service::slam::v1::GetInternalStateResponse* resp) {
               return service->GetInternalState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLAMService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SLAMService::Service, ::viam::service::slam::v1::GetPointCloudMapStreamRequest, ::viam::service::slam::v1::GetPointCloudMapStreamResponse>(
          [](SLAMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::slam::v1::GetPointCloudMapStreamRequest* req,
             ::grpc::ServerWriter<::viam::service::slam::v1::GetPointCloudMapStreamResponse>* writer) {
               return service->GetPointCloudMapStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLAMService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SLAMService::Service, ::viam::service::slam::v1::GetInternalStateStreamRequest, ::viam::service::slam::v1::GetInternalStateStreamResponse>(
          [](SLAMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::slam::v1::GetInternalStateStreamRequest* req,
             ::grpc::ServerWriter<::viam::service::slam::v1::GetInternalStateStreamResponse>* writer) {
               return service->GetInternalStateStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLAMService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLAMService::Service, ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLAMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::common::v1::DoCommandRequest* req,
             ::viam::common::v1::DoCommandResponse* resp) {
               return service->DoCommand(ctx, req, resp);
             }, this)));
}

SLAMService::Service::~Service() {
}

::grpc::Status SLAMService::Service::GetPosition(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetPositionRequest* request, ::viam::service::slam::v1::GetPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLAMService::Service::GetMap(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetMapRequest* request, ::viam::service::slam::v1::GetMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLAMService::Service::GetPositionNew(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetPositionNewRequest* request, ::viam::service::slam::v1::GetPositionNewResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLAMService::Service::GetPointCloudMap(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetPointCloudMapRequest* request, ::viam::service::slam::v1::GetPointCloudMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLAMService::Service::GetInternalState(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetInternalStateRequest* request, ::viam::service::slam::v1::GetInternalStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLAMService::Service::GetPointCloudMapStream(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetPointCloudMapStreamRequest* request, ::grpc::ServerWriter< ::viam::service::slam::v1::GetPointCloudMapStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLAMService::Service::GetInternalStateStream(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetInternalStateStreamRequest* request, ::grpc::ServerWriter< ::viam::service::slam::v1::GetInternalStateStreamResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLAMService::Service::DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viam
}  // namespace service
}  // namespace slam
}  // namespace v1

