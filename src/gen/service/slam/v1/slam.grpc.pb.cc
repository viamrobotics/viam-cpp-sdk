// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service/slam/v1/slam.proto

#include "service/slam/v1/slam.pb.h"
#include "service/slam/v1/slam.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace viam {
namespace service {
namespace slam {
namespace v1 {

static const char* SLAMService_method_names[] = {
  "/viam.service.slam.v1.SLAMService/GetPosition",
  "/viam.service.slam.v1.SLAMService/GetMap",
};

std::unique_ptr< SLAMService::Stub> SLAMService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SLAMService::Stub> stub(new SLAMService::Stub(channel, options));
  return stub;
}

SLAMService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetPosition_(SLAMService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMap_(SLAMService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SLAMService::Stub::GetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::viam::service::slam::v1::GetPositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::service::slam::v1::GetPositionRequest, ::viam::service::slam::v1::GetPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPosition_, context, request, response);
}

void SLAMService::Stub::async::GetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest* request, ::viam::service::slam::v1::GetPositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::service::slam::v1::GetPositionRequest, ::viam::service::slam::v1::GetPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, std::move(f));
}

void SLAMService::Stub::async::GetPosition(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest* request, ::viam::service::slam::v1::GetPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionResponse>* SLAMService::Stub::PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::service::slam::v1::GetPositionResponse, ::viam::service::slam::v1::GetPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetPositionResponse>* SLAMService::Stub::AsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SLAMService::Stub::GetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::viam::service::slam::v1::GetMapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::service::slam::v1::GetMapRequest, ::viam::service::slam::v1::GetMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMap_, context, request, response);
}

void SLAMService::Stub::async::GetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest* request, ::viam::service::slam::v1::GetMapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::service::slam::v1::GetMapRequest, ::viam::service::slam::v1::GetMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, std::move(f));
}

void SLAMService::Stub::async::GetMap(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest* request, ::viam::service::slam::v1::GetMapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetMapResponse>* SLAMService::Stub::PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::service::slam::v1::GetMapResponse, ::viam::service::slam::v1::GetMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::service::slam::v1::GetMapResponse>* SLAMService::Stub::AsyncGetMapRaw(::grpc::ClientContext* context, const ::viam::service::slam::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

SLAMService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLAMService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLAMService::Service, ::viam::service::slam::v1::GetPositionRequest, ::viam::service::slam::v1::GetPositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLAMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::slam::v1::GetPositionRequest* req,
             ::viam::service::slam::v1::GetPositionResponse* resp) {
               return service->GetPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SLAMService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SLAMService::Service, ::viam::service::slam::v1::GetMapRequest, ::viam::service::slam::v1::GetMapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SLAMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::slam::v1::GetMapRequest* req,
             ::viam::service::slam::v1::GetMapResponse* resp) {
               return service->GetMap(ctx, req, resp);
             }, this)));
}

SLAMService::Service::~Service() {
}

::grpc::Status SLAMService::Service::GetPosition(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetPositionRequest* request, ::viam::service::slam::v1::GetPositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SLAMService::Service::GetMap(::grpc::ServerContext* context, const ::viam::service::slam::v1::GetMapRequest* request, ::viam::service::slam::v1::GetMapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viam
}  // namespace service
}  // namespace slam
}  // namespace v1

