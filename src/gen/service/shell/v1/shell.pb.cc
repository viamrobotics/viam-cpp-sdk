// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/shell/v1/shell.proto

#include "service/shell/v1/shell.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace service {
namespace shell {
namespace v1 {
PROTOBUF_CONSTEXPR ShellRequest::ShellRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , data_in_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct ShellRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShellRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShellRequestDefaultTypeInternal() {}
  union {
    ShellRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShellRequestDefaultTypeInternal _ShellRequest_default_instance_;
PROTOBUF_CONSTEXPR ShellResponse::ShellResponse(
    ::_pbi::ConstantInitialized)
  : data_out_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , data_err_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , eof_(false){}
struct ShellResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShellResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShellResponseDefaultTypeInternal() {}
  union {
    ShellResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShellResponseDefaultTypeInternal _ShellResponse_default_instance_;
}  // namespace v1
}  // namespace shell
}  // namespace service
}  // namespace viam
static ::_pb::Metadata file_level_metadata_service_2fshell_2fv1_2fshell_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_service_2fshell_2fv1_2fshell_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_service_2fshell_2fv1_2fshell_2eproto = nullptr;

const uint32_t TableStruct_service_2fshell_2fv1_2fshell_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::shell::v1::ShellRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::shell::v1::ShellRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::shell::v1::ShellRequest, data_in_),
  PROTOBUF_FIELD_OFFSET(::viam::service::shell::v1::ShellRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::shell::v1::ShellResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::shell::v1::ShellResponse, data_out_),
  PROTOBUF_FIELD_OFFSET(::viam::service::shell::v1::ShellResponse, data_err_),
  PROTOBUF_FIELD_OFFSET(::viam::service::shell::v1::ShellResponse, eof_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::service::shell::v1::ShellRequest)},
  { 9, -1, -1, sizeof(::viam::service::shell::v1::ShellResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::service::shell::v1::_ShellRequest_default_instance_._instance,
  &::viam::service::shell::v1::_ShellResponse_default_instance_._instance,
};

const char descriptor_table_protodef_service_2fshell_2fv1_2fshell_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034service/shell/v1/shell.proto\022\025viam.ser"
  "vice.shell.v1\032\026common/v1/common.proto\032\034g"
  "oogle/api/annotations.proto\032\034google/prot"
  "obuf/struct.proto\"j\n\014ShellRequest\022\022\n\004nam"
  "e\030\001 \001(\tR\004name\022\027\n\007data_in\030\002 \001(\tR\006dataIn\022-"
  "\n\005extra\030c \001(\0132\027.google.protobuf.StructR\005"
  "extra\"W\n\rShellResponse\022\031\n\010data_out\030\001 \001(\t"
  "R\007dataOut\022\031\n\010data_err\030\002 \001(\tR\007dataErr\022\020\n\003"
  "eof\030\003 \001(\010R\003eof2\357\001\n\014ShellService\022V\n\005Shell"
  "\022#.viam.service.shell.v1.ShellRequest\032$."
  "viam.service.shell.v1.ShellResponse(\0010\001\022"
  "\206\001\n\tDoCommand\022 .viam.common.v1.DoCommand"
  "Request\032!.viam.common.v1.DoCommandRespon"
  "se\"4\202\323\344\223\002.\",/viam/api/v1/service/shell/{"
  "name}/do_commandB=\n\031com.viam.service.she"
  "ll.v1Z go.viam.com/api/service/shell/v1b"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_service_2fshell_2fv1_2fshell_2eproto_deps[3] = {
  &::descriptor_table_common_2fv1_2fcommon_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_service_2fshell_2fv1_2fshell_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_service_2fshell_2fv1_2fshell_2eproto = {
    false, false, 647, descriptor_table_protodef_service_2fshell_2fv1_2fshell_2eproto,
    "service/shell/v1/shell.proto",
    &descriptor_table_service_2fshell_2fv1_2fshell_2eproto_once, descriptor_table_service_2fshell_2fv1_2fshell_2eproto_deps, 3, 2,
    schemas, file_default_instances, TableStruct_service_2fshell_2fv1_2fshell_2eproto::offsets,
    file_level_metadata_service_2fshell_2fv1_2fshell_2eproto, file_level_enum_descriptors_service_2fshell_2fv1_2fshell_2eproto,
    file_level_service_descriptors_service_2fshell_2fv1_2fshell_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_service_2fshell_2fv1_2fshell_2eproto_getter() {
  return &descriptor_table_service_2fshell_2fv1_2fshell_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_service_2fshell_2fv1_2fshell_2eproto(&descriptor_table_service_2fshell_2fv1_2fshell_2eproto);
namespace viam {
namespace service {
namespace shell {
namespace v1 {

// ===================================================================

class ShellRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const ShellRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ShellRequest::_Internal::extra(const ShellRequest* msg) {
  return *msg->extra_;
}
void ShellRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
ShellRequest::ShellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.shell.v1.ShellRequest)
}
ShellRequest::ShellRequest(const ShellRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  data_in_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_in_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_in().empty()) {
    data_in_.Set(from._internal_data_in(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.shell.v1.ShellRequest)
}

inline void ShellRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_in_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_in_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

ShellRequest::~ShellRequest() {
  // @@protoc_insertion_point(destructor:viam.service.shell.v1.ShellRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShellRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  data_in_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void ShellRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShellRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.shell.v1.ShellRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  data_in_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.shell.v1.ShellRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string data_in = 2 [json_name = "dataIn"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data_in();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.shell.v1.ShellRequest.data_in"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShellRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.shell.v1.ShellRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.shell.v1.ShellRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string data_in = 2 [json_name = "dataIn"];
  if (!this->_internal_data_in().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_in().data(), static_cast<int>(this->_internal_data_in().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.shell.v1.ShellRequest.data_in");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data_in(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.shell.v1.ShellRequest)
  return target;
}

size_t ShellRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.shell.v1.ShellRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string data_in = 2 [json_name = "dataIn"];
  if (!this->_internal_data_in().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_in());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShellRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShellRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShellRequest::GetClassData() const { return &_class_data_; }

void ShellRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShellRequest *>(to)->MergeFrom(
      static_cast<const ShellRequest &>(from));
}


void ShellRequest::MergeFrom(const ShellRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.shell.v1.ShellRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_data_in().empty()) {
    _internal_set_data_in(from._internal_data_in());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShellRequest::CopyFrom(const ShellRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.shell.v1.ShellRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellRequest::IsInitialized() const {
  return true;
}

void ShellRequest::InternalSwap(ShellRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_in_, lhs_arena,
      &other->data_in_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fshell_2fv1_2fshell_2eproto_getter, &descriptor_table_service_2fshell_2fv1_2fshell_2eproto_once,
      file_level_metadata_service_2fshell_2fv1_2fshell_2eproto[0]);
}

// ===================================================================

class ShellResponse::_Internal {
 public:
};

ShellResponse::ShellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.shell.v1.ShellResponse)
}
ShellResponse::ShellResponse(const ShellResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_out_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_out_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_out().empty()) {
    data_out_.Set(from._internal_data_out(), 
      GetArenaForAllocation());
  }
  data_err_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_err_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_err().empty()) {
    data_err_.Set(from._internal_data_err(), 
      GetArenaForAllocation());
  }
  eof_ = from.eof_;
  // @@protoc_insertion_point(copy_constructor:viam.service.shell.v1.ShellResponse)
}

inline void ShellResponse::SharedCtor() {
data_out_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_out_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_err_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_err_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
eof_ = false;
}

ShellResponse::~ShellResponse() {
  // @@protoc_insertion_point(destructor:viam.service.shell.v1.ShellResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShellResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_out_.Destroy();
  data_err_.Destroy();
}

void ShellResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShellResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.shell.v1.ShellResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_out_.ClearToEmpty();
  data_err_.ClearToEmpty();
  eof_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShellResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data_out = 1 [json_name = "dataOut"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data_out();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.shell.v1.ShellResponse.data_out"));
        } else
          goto handle_unusual;
        continue;
      // string data_err = 2 [json_name = "dataErr"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data_err();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.shell.v1.ShellResponse.data_err"));
        } else
          goto handle_unusual;
        continue;
      // bool eof = 3 [json_name = "eof"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          eof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShellResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.shell.v1.ShellResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data_out = 1 [json_name = "dataOut"];
  if (!this->_internal_data_out().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_out().data(), static_cast<int>(this->_internal_data_out().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.shell.v1.ShellResponse.data_out");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data_out(), target);
  }

  // string data_err = 2 [json_name = "dataErr"];
  if (!this->_internal_data_err().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_err().data(), static_cast<int>(this->_internal_data_err().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.shell.v1.ShellResponse.data_err");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data_err(), target);
  }

  // bool eof = 3 [json_name = "eof"];
  if (this->_internal_eof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_eof(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.shell.v1.ShellResponse)
  return target;
}

size_t ShellResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.shell.v1.ShellResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data_out = 1 [json_name = "dataOut"];
  if (!this->_internal_data_out().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_out());
  }

  // string data_err = 2 [json_name = "dataErr"];
  if (!this->_internal_data_err().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_err());
  }

  // bool eof = 3 [json_name = "eof"];
  if (this->_internal_eof() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShellResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ShellResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShellResponse::GetClassData() const { return &_class_data_; }

void ShellResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ShellResponse *>(to)->MergeFrom(
      static_cast<const ShellResponse &>(from));
}


void ShellResponse::MergeFrom(const ShellResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.shell.v1.ShellResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data_out().empty()) {
    _internal_set_data_out(from._internal_data_out());
  }
  if (!from._internal_data_err().empty()) {
    _internal_set_data_err(from._internal_data_err());
  }
  if (from._internal_eof() != 0) {
    _internal_set_eof(from._internal_eof());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShellResponse::CopyFrom(const ShellResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.shell.v1.ShellResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellResponse::IsInitialized() const {
  return true;
}

void ShellResponse::InternalSwap(ShellResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_out_, lhs_arena,
      &other->data_out_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_err_, lhs_arena,
      &other->data_err_, rhs_arena
  );
  swap(eof_, other->eof_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fshell_2fv1_2fshell_2eproto_getter, &descriptor_table_service_2fshell_2fv1_2fshell_2eproto_once,
      file_level_metadata_service_2fshell_2fv1_2fshell_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace shell
}  // namespace service
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::service::shell::v1::ShellRequest*
Arena::CreateMaybeMessage< ::viam::service::shell::v1::ShellRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::shell::v1::ShellRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::shell::v1::ShellResponse*
Arena::CreateMaybeMessage< ::viam::service::shell::v1::ShellResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::shell::v1::ShellResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
