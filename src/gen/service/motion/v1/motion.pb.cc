// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/motion/v1/motion.proto

#include "service/motion/v1/motion.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace service {
namespace motion {
namespace v1 {
PROTOBUF_CONSTEXPR MoveRequest::MoveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destination_)*/nullptr
  , /*decltype(_impl_.component_name_)*/nullptr
  , /*decltype(_impl_.world_state_)*/nullptr
  , /*decltype(_impl_.constraints_)*/nullptr
  , /*decltype(_impl_.slam_service_name_)*/nullptr
  , /*decltype(_impl_.extra_)*/nullptr} {}
struct MoveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveRequestDefaultTypeInternal() {}
  union {
    MoveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
PROTOBUF_CONSTEXPR MoveResponse::MoveResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveResponseDefaultTypeInternal() {}
  union {
    MoveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveResponseDefaultTypeInternal _MoveResponse_default_instance_;
PROTOBUF_CONSTEXPR MoveSingleComponentRequest::MoveSingleComponentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destination_)*/nullptr
  , /*decltype(_impl_.component_name_)*/nullptr
  , /*decltype(_impl_.world_state_)*/nullptr
  , /*decltype(_impl_.extra_)*/nullptr} {}
struct MoveSingleComponentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveSingleComponentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveSingleComponentRequestDefaultTypeInternal() {}
  union {
    MoveSingleComponentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveSingleComponentRequestDefaultTypeInternal _MoveSingleComponentRequest_default_instance_;
PROTOBUF_CONSTEXPR MoveSingleComponentResponse::MoveSingleComponentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveSingleComponentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveSingleComponentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveSingleComponentResponseDefaultTypeInternal() {}
  union {
    MoveSingleComponentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveSingleComponentResponseDefaultTypeInternal _MoveSingleComponentResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPoseRequest::GetPoseRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.supplemental_transforms_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.destination_frame_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_name_)*/nullptr
  , /*decltype(_impl_.extra_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPoseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPoseRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPoseRequestDefaultTypeInternal() {}
  union {
    GetPoseRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPoseRequestDefaultTypeInternal _GetPoseRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPoseResponse::GetPoseResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPoseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPoseResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPoseResponseDefaultTypeInternal() {}
  union {
    GetPoseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPoseResponseDefaultTypeInternal _GetPoseResponse_default_instance_;
PROTOBUF_CONSTEXPR Constraints::Constraints(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.linear_constraint_)*/{}
  , /*decltype(_impl_.orientation_constraint_)*/{}
  , /*decltype(_impl_.collision_specification_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConstraintsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConstraintsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConstraintsDefaultTypeInternal() {}
  union {
    Constraints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConstraintsDefaultTypeInternal _Constraints_default_instance_;
PROTOBUF_CONSTEXPR LinearConstraint::LinearConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.line_tolerance_mm_)*/0
  , /*decltype(_impl_.orientation_tolerance_degs_)*/0} {}
struct LinearConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinearConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinearConstraintDefaultTypeInternal() {}
  union {
    LinearConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinearConstraintDefaultTypeInternal _LinearConstraint_default_instance_;
PROTOBUF_CONSTEXPR OrientationConstraint::OrientationConstraint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.orientation_tolerance_degs_)*/0} {}
struct OrientationConstraintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrientationConstraintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrientationConstraintDefaultTypeInternal() {}
  union {
    OrientationConstraint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrientationConstraintDefaultTypeInternal _OrientationConstraint_default_instance_;
PROTOBUF_CONSTEXPR CollisionSpecification_AllowedFrameCollisions::CollisionSpecification_AllowedFrameCollisions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.frame1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frame2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollisionSpecification_AllowedFrameCollisionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollisionSpecification_AllowedFrameCollisionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollisionSpecification_AllowedFrameCollisionsDefaultTypeInternal() {}
  union {
    CollisionSpecification_AllowedFrameCollisions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollisionSpecification_AllowedFrameCollisionsDefaultTypeInternal _CollisionSpecification_AllowedFrameCollisions_default_instance_;
PROTOBUF_CONSTEXPR CollisionSpecification::CollisionSpecification(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.allows_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollisionSpecificationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollisionSpecificationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollisionSpecificationDefaultTypeInternal() {}
  union {
    CollisionSpecification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollisionSpecificationDefaultTypeInternal _CollisionSpecification_default_instance_;
}  // namespace v1
}  // namespace motion
}  // namespace service
}  // namespace viam
static ::_pb::Metadata file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_service_2fmotion_2fv1_2fmotion_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_service_2fmotion_2fv1_2fmotion_2eproto = nullptr;

const uint32_t TableStruct_service_2fmotion_2fv1_2fmotion_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, _impl_.destination_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, _impl_.component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, _impl_.world_state_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, _impl_.constraints_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, _impl_.slam_service_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveRequest, _impl_.extra_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveSingleComponentRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveSingleComponentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveSingleComponentRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveSingleComponentRequest, _impl_.destination_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveSingleComponentRequest, _impl_.component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveSingleComponentRequest, _impl_.world_state_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveSingleComponentRequest, _impl_.extra_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveSingleComponentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::MoveSingleComponentResponse, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseRequest, _impl_.component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseRequest, _impl_.destination_frame_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseRequest, _impl_.supplemental_transforms_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseRequest, _impl_.extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::GetPoseResponse, _impl_.pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Constraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Constraints, _impl_.linear_constraint_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Constraints, _impl_.orientation_constraint_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::Constraints, _impl_.collision_specification_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::LinearConstraint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::LinearConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::LinearConstraint, _impl_.line_tolerance_mm_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::LinearConstraint, _impl_.orientation_tolerance_degs_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::OrientationConstraint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::OrientationConstraint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::OrientationConstraint, _impl_.orientation_tolerance_degs_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions, _impl_.frame1_),
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions, _impl_.frame2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::CollisionSpecification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::motion::v1::CollisionSpecification, _impl_.allows_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::viam::service::motion::v1::MoveRequest)},
  { 20, -1, -1, sizeof(::viam::service::motion::v1::MoveResponse)},
  { 27, 38, -1, sizeof(::viam::service::motion::v1::MoveSingleComponentRequest)},
  { 43, -1, -1, sizeof(::viam::service::motion::v1::MoveSingleComponentResponse)},
  { 50, -1, -1, sizeof(::viam::service::motion::v1::GetPoseRequest)},
  { 61, -1, -1, sizeof(::viam::service::motion::v1::GetPoseResponse)},
  { 68, -1, -1, sizeof(::viam::service::motion::v1::Constraints)},
  { 77, 85, -1, sizeof(::viam::service::motion::v1::LinearConstraint)},
  { 87, 94, -1, sizeof(::viam::service::motion::v1::OrientationConstraint)},
  { 95, -1, -1, sizeof(::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions)},
  { 103, -1, -1, sizeof(::viam::service::motion::v1::CollisionSpecification)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::service::motion::v1::_MoveRequest_default_instance_._instance,
  &::viam::service::motion::v1::_MoveResponse_default_instance_._instance,
  &::viam::service::motion::v1::_MoveSingleComponentRequest_default_instance_._instance,
  &::viam::service::motion::v1::_MoveSingleComponentResponse_default_instance_._instance,
  &::viam::service::motion::v1::_GetPoseRequest_default_instance_._instance,
  &::viam::service::motion::v1::_GetPoseResponse_default_instance_._instance,
  &::viam::service::motion::v1::_Constraints_default_instance_._instance,
  &::viam::service::motion::v1::_LinearConstraint_default_instance_._instance,
  &::viam::service::motion::v1::_OrientationConstraint_default_instance_._instance,
  &::viam::service::motion::v1::_CollisionSpecification_AllowedFrameCollisions_default_instance_._instance,
  &::viam::service::motion::v1::_CollisionSpecification_default_instance_._instance,
};

const char descriptor_table_protodef_service_2fmotion_2fv1_2fmotion_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036service/motion/v1/motion.proto\022\026viam.s"
  "ervice.motion.v1\032\026common/v1/common.proto"
  "\032\034google/api/annotations.proto\032\034google/p"
  "rotobuf/struct.proto\"\347\003\n\013MoveRequest\022\022\n\004"
  "name\030\001 \001(\tR\004name\022=\n\013destination\030\002 \001(\0132\033."
  "viam.common.v1.PoseInFrameR\013destination\022"
  "C\n\016component_name\030\003 \001(\0132\034.viam.common.v1"
  ".ResourceNameR\rcomponentName\022@\n\013world_st"
  "ate\030\004 \001(\0132\032.viam.common.v1.WorldStateH\000R"
  "\nworldState\210\001\001\022J\n\013constraints\030\005 \001(\0132#.vi"
  "am.service.motion.v1.ConstraintsH\001R\013cons"
  "traints\210\001\001\022M\n\021slam_service_name\030\006 \001(\0132\034."
  "viam.common.v1.ResourceNameH\002R\017slamServi"
  "ceName\210\001\001\022-\n\005extra\030c \001(\0132\027.google.protob"
  "uf.StructR\005extraB\016\n\014_world_stateB\016\n\014_con"
  "straintsB\024\n\022_slam_service_name\"(\n\014MoveRe"
  "sponse\022\030\n\007success\030\001 \001(\010R\007success\"\265\002\n\032Mov"
  "eSingleComponentRequest\022\022\n\004name\030\001 \001(\tR\004n"
  "ame\022=\n\013destination\030\002 \001(\0132\033.viam.common.v"
  "1.PoseInFrameR\013destination\022C\n\016component_"
  "name\030\003 \001(\0132\034.viam.common.v1.ResourceName"
  "R\rcomponentName\022@\n\013world_state\030\004 \001(\0132\032.v"
  "iam.common.v1.WorldStateH\000R\nworldState\210\001"
  "\001\022-\n\005extra\030c \001(\0132\027.google.protobuf.Struc"
  "tR\005extraB\016\n\014_world_state\"7\n\033MoveSingleCo"
  "mponentResponse\022\030\n\007success\030\001 \001(\010R\007succes"
  "s\"\231\002\n\016GetPoseRequest\022\022\n\004name\030\001 \001(\tR\004name"
  "\022C\n\016component_name\030\002 \001(\0132\034.viam.common.v"
  "1.ResourceNameR\rcomponentName\022+\n\021destina"
  "tion_frame\030\003 \001(\tR\020destinationFrame\022R\n\027su"
  "pplemental_transforms\030\004 \003(\0132\031.viam.commo"
  "n.v1.TransformR\026supplementalTransforms\022-"
  "\n\005extra\030c \001(\0132\027.google.protobuf.StructR\005"
  "extra\"B\n\017GetPoseResponse\022/\n\004pose\030\001 \001(\0132\033"
  ".viam.common.v1.PoseInFrameR\004pose\"\263\002\n\013Co"
  "nstraints\022U\n\021linear_constraint\030\001 \003(\0132(.v"
  "iam.service.motion.v1.LinearConstraintR\020"
  "linearConstraint\022d\n\026orientation_constrai"
  "nt\030\002 \003(\0132-.viam.service.motion.v1.Orient"
  "ationConstraintR\025orientationConstraint\022g"
  "\n\027collision_specification\030\003 \003(\0132..viam.s"
  "ervice.motion.v1.CollisionSpecificationR"
  "\026collisionSpecification\"\273\001\n\020LinearConstr"
  "aint\022/\n\021line_tolerance_mm\030\001 \001(\002H\000R\017lineT"
  "oleranceMm\210\001\001\022A\n\032orientation_tolerance_d"
  "egs\030\002 \001(\002H\001R\030orientationToleranceDegs\210\001\001"
  "B\024\n\022_line_tolerance_mmB\035\n\033_orientation_t"
  "olerance_degs\"y\n\025OrientationConstraint\022A"
  "\n\032orientation_tolerance_degs\030\001 \001(\002H\000R\030or"
  "ientationToleranceDegs\210\001\001B\035\n\033_orientatio"
  "n_tolerance_degs\"\301\001\n\026CollisionSpecificat"
  "ion\022]\n\006allows\030\001 \003(\0132E.viam.service.motio"
  "n.v1.CollisionSpecification.AllowedFrame"
  "CollisionsR\006allows\032H\n\026AllowedFrameCollis"
  "ions\022\026\n\006frame1\030\001 \001(\tR\006frame1\022\026\n\006frame2\030\002"
  " \001(\tR\006frame22\357\004\n\rMotionService\022\202\001\n\004Move\022"
  "#.viam.service.motion.v1.MoveRequest\032$.v"
  "iam.service.motion.v1.MoveResponse\"/\202\323\344\223"
  "\002)\"\'/viam/api/v1/service/motion/{name}/m"
  "ove\022\300\001\n\023MoveSingleComponent\0222.viam.servi"
  "ce.motion.v1.MoveSingleComponentRequest\032"
  "3.viam.service.motion.v1.MoveSingleCompo"
  "nentResponse\"@\202\323\344\223\002:\"8/viam/api/v1/servi"
  "ce/motion/{name}/move_single_component\022\213"
  "\001\n\007GetPose\022&.viam.service.motion.v1.GetP"
  "oseRequest\032\'.viam.service.motion.v1.GetP"
  "oseResponse\"/\202\323\344\223\002)\022\'/viam/api/v1/servic"
  "e/motion/{name}/pose\022\207\001\n\tDoCommand\022 .via"
  "m.common.v1.DoCommandRequest\032!.viam.comm"
  "on.v1.DoCommandResponse\"5\202\323\344\223\002/\"-/viam/a"
  "pi/v1/service/motion/{name}/do_commandB\?"
  "\n\032com.viam.service.motion.v1Z!go.viam.co"
  "m/api/service/motion/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_deps[3] = {
  &::descriptor_table_common_2fv1_2fcommon_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto = {
    false, false, 2911, descriptor_table_protodef_service_2fmotion_2fv1_2fmotion_2eproto,
    "service/motion/v1/motion.proto",
    &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once, descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_deps, 3, 11,
    schemas, file_default_instances, TableStruct_service_2fmotion_2fv1_2fmotion_2eproto::offsets,
    file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto, file_level_enum_descriptors_service_2fmotion_2fv1_2fmotion_2eproto,
    file_level_service_descriptors_service_2fmotion_2fv1_2fmotion_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter() {
  return &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_service_2fmotion_2fv1_2fmotion_2eproto(&descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto);
namespace viam {
namespace service {
namespace motion {
namespace v1 {

// ===================================================================

class MoveRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveRequest>()._impl_._has_bits_);
  static const ::viam::common::v1::PoseInFrame& destination(const MoveRequest* msg);
  static const ::viam::common::v1::ResourceName& component_name(const MoveRequest* msg);
  static const ::viam::common::v1::WorldState& world_state(const MoveRequest* msg);
  static void set_has_world_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::viam::service::motion::v1::Constraints& constraints(const MoveRequest* msg);
  static void set_has_constraints(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::viam::common::v1::ResourceName& slam_service_name(const MoveRequest* msg);
  static void set_has_slam_service_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const MoveRequest* msg);
};

const ::viam::common::v1::PoseInFrame&
MoveRequest::_Internal::destination(const MoveRequest* msg) {
  return *msg->_impl_.destination_;
}
const ::viam::common::v1::ResourceName&
MoveRequest::_Internal::component_name(const MoveRequest* msg) {
  return *msg->_impl_.component_name_;
}
const ::viam::common::v1::WorldState&
MoveRequest::_Internal::world_state(const MoveRequest* msg) {
  return *msg->_impl_.world_state_;
}
const ::viam::service::motion::v1::Constraints&
MoveRequest::_Internal::constraints(const MoveRequest* msg) {
  return *msg->_impl_.constraints_;
}
const ::viam::common::v1::ResourceName&
MoveRequest::_Internal::slam_service_name(const MoveRequest* msg) {
  return *msg->_impl_.slam_service_name_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
MoveRequest::_Internal::extra(const MoveRequest* msg) {
  return *msg->_impl_.extra_;
}
void MoveRequest::clear_destination() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ != nullptr) {
    delete _impl_.destination_;
  }
  _impl_.destination_ = nullptr;
}
void MoveRequest::clear_component_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.component_name_ != nullptr) {
    delete _impl_.component_name_;
  }
  _impl_.component_name_ = nullptr;
}
void MoveRequest::clear_world_state() {
  if (_impl_.world_state_ != nullptr) _impl_.world_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MoveRequest::clear_slam_service_name() {
  if (_impl_.slam_service_name_ != nullptr) _impl_.slam_service_name_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void MoveRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
}
MoveRequest::MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.MoveRequest)
}
MoveRequest::MoveRequest(const MoveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.destination_){nullptr}
    , decltype(_impl_.component_name_){nullptr}
    , decltype(_impl_.world_state_){nullptr}
    , decltype(_impl_.constraints_){nullptr}
    , decltype(_impl_.slam_service_name_){nullptr}
    , decltype(_impl_.extra_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_destination()) {
    _this->_impl_.destination_ = new ::viam::common::v1::PoseInFrame(*from._impl_.destination_);
  }
  if (from._internal_has_component_name()) {
    _this->_impl_.component_name_ = new ::viam::common::v1::ResourceName(*from._impl_.component_name_);
  }
  if (from._internal_has_world_state()) {
    _this->_impl_.world_state_ = new ::viam::common::v1::WorldState(*from._impl_.world_state_);
  }
  if (from._internal_has_constraints()) {
    _this->_impl_.constraints_ = new ::viam::service::motion::v1::Constraints(*from._impl_.constraints_);
  }
  if (from._internal_has_slam_service_name()) {
    _this->_impl_.slam_service_name_ = new ::viam::common::v1::ResourceName(*from._impl_.slam_service_name_);
  }
  if (from._internal_has_extra()) {
    _this->_impl_.extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.extra_);
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.MoveRequest)
}

inline void MoveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.destination_){nullptr}
    , decltype(_impl_.component_name_){nullptr}
    , decltype(_impl_.world_state_){nullptr}
    , decltype(_impl_.constraints_){nullptr}
    , decltype(_impl_.slam_service_name_){nullptr}
    , decltype(_impl_.extra_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MoveRequest::~MoveRequest() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.MoveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.destination_;
  if (this != internal_default_instance()) delete _impl_.component_name_;
  if (this != internal_default_instance()) delete _impl_.world_state_;
  if (this != internal_default_instance()) delete _impl_.constraints_;
  if (this != internal_default_instance()) delete _impl_.slam_service_name_;
  if (this != internal_default_instance()) delete _impl_.extra_;
}

void MoveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.MoveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ != nullptr) {
    delete _impl_.destination_;
  }
  _impl_.destination_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.component_name_ != nullptr) {
    delete _impl_.component_name_;
  }
  _impl_.component_name_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.world_state_ != nullptr);
      _impl_.world_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.constraints_ != nullptr);
      _impl_.constraints_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.slam_service_name_ != nullptr);
      _impl_.slam_service_name_->Clear();
    }
  }
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.MoveRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .viam.service.motion.v1.Constraints constraints = 5 [json_name = "constraints"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_constraints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .viam.common.v1.ResourceName slam_service_name = 6 [json_name = "slamServiceName"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_slam_service_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.MoveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.MoveRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::destination(this),
        _Internal::destination(this).GetCachedSize(), target, stream);
  }

  // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::component_name(this),
        _Internal::component_name(this).GetCachedSize(), target, stream);
  }

  // optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
  if (_internal_has_world_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::world_state(this),
        _Internal::world_state(this).GetCachedSize(), target, stream);
  }

  // optional .viam.service.motion.v1.Constraints constraints = 5 [json_name = "constraints"];
  if (_internal_has_constraints()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::constraints(this),
        _Internal::constraints(this).GetCachedSize(), target, stream);
  }

  // optional .viam.common.v1.ResourceName slam_service_name = 6 [json_name = "slamServiceName"];
  if (_internal_has_slam_service_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::slam_service_name(this),
        _Internal::slam_service_name(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.MoveRequest)
  return target;
}

size_t MoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.MoveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destination_);
  }

  // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.component_name_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.world_state_);
    }

    // optional .viam.service.motion.v1.Constraints constraints = 5 [json_name = "constraints"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.constraints_);
    }

    // optional .viam.common.v1.ResourceName slam_service_name = 6 [json_name = "slamServiceName"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.slam_service_name_);
    }

  }
  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveRequest::GetClassData() const { return &_class_data_; }


void MoveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveRequest*>(&to_msg);
  auto& from = static_cast<const MoveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.MoveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_destination()) {
    _this->_internal_mutable_destination()->::viam::common::v1::PoseInFrame::MergeFrom(
        from._internal_destination());
  }
  if (from._internal_has_component_name()) {
    _this->_internal_mutable_component_name()->::viam::common::v1::ResourceName::MergeFrom(
        from._internal_component_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_world_state()->::viam::common::v1::WorldState::MergeFrom(
          from._internal_world_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_constraints()->::viam::service::motion::v1::Constraints::MergeFrom(
          from._internal_constraints());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_slam_service_name()->::viam::common::v1::ResourceName::MergeFrom(
          from._internal_slam_service_name());
    }
  }
  if (from._internal_has_extra()) {
    _this->_internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_extra());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  return true;
}

void MoveRequest::InternalSwap(MoveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveRequest, _impl_.extra_)
      + sizeof(MoveRequest::_impl_.extra_)
      - PROTOBUF_FIELD_OFFSET(MoveRequest, _impl_.destination_)>(
          reinterpret_cast<char*>(&_impl_.destination_),
          reinterpret_cast<char*>(&other->_impl_.destination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[0]);
}

// ===================================================================

class MoveResponse::_Internal {
 public:
};

MoveResponse::MoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.MoveResponse)
}
MoveResponse::MoveResponse(const MoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.MoveResponse)
}

inline void MoveResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MoveResponse::~MoveResponse() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.MoveResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.MoveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.MoveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.MoveResponse)
  return target;
}

size_t MoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.MoveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveResponse::GetClassData() const { return &_class_data_; }


void MoveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveResponse*>(&to_msg);
  auto& from = static_cast<const MoveResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.MoveResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveResponse::CopyFrom(const MoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.MoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveResponse::IsInitialized() const {
  return true;
}

void MoveResponse::InternalSwap(MoveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[1]);
}

// ===================================================================

class MoveSingleComponentRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<MoveSingleComponentRequest>()._impl_._has_bits_);
  static const ::viam::common::v1::PoseInFrame& destination(const MoveSingleComponentRequest* msg);
  static const ::viam::common::v1::ResourceName& component_name(const MoveSingleComponentRequest* msg);
  static const ::viam::common::v1::WorldState& world_state(const MoveSingleComponentRequest* msg);
  static void set_has_world_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const MoveSingleComponentRequest* msg);
};

const ::viam::common::v1::PoseInFrame&
MoveSingleComponentRequest::_Internal::destination(const MoveSingleComponentRequest* msg) {
  return *msg->_impl_.destination_;
}
const ::viam::common::v1::ResourceName&
MoveSingleComponentRequest::_Internal::component_name(const MoveSingleComponentRequest* msg) {
  return *msg->_impl_.component_name_;
}
const ::viam::common::v1::WorldState&
MoveSingleComponentRequest::_Internal::world_state(const MoveSingleComponentRequest* msg) {
  return *msg->_impl_.world_state_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
MoveSingleComponentRequest::_Internal::extra(const MoveSingleComponentRequest* msg) {
  return *msg->_impl_.extra_;
}
void MoveSingleComponentRequest::clear_destination() {
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ != nullptr) {
    delete _impl_.destination_;
  }
  _impl_.destination_ = nullptr;
}
void MoveSingleComponentRequest::clear_component_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.component_name_ != nullptr) {
    delete _impl_.component_name_;
  }
  _impl_.component_name_ = nullptr;
}
void MoveSingleComponentRequest::clear_world_state() {
  if (_impl_.world_state_ != nullptr) _impl_.world_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MoveSingleComponentRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
}
MoveSingleComponentRequest::MoveSingleComponentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.MoveSingleComponentRequest)
}
MoveSingleComponentRequest::MoveSingleComponentRequest(const MoveSingleComponentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveSingleComponentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.destination_){nullptr}
    , decltype(_impl_.component_name_){nullptr}
    , decltype(_impl_.world_state_){nullptr}
    , decltype(_impl_.extra_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_destination()) {
    _this->_impl_.destination_ = new ::viam::common::v1::PoseInFrame(*from._impl_.destination_);
  }
  if (from._internal_has_component_name()) {
    _this->_impl_.component_name_ = new ::viam::common::v1::ResourceName(*from._impl_.component_name_);
  }
  if (from._internal_has_world_state()) {
    _this->_impl_.world_state_ = new ::viam::common::v1::WorldState(*from._impl_.world_state_);
  }
  if (from._internal_has_extra()) {
    _this->_impl_.extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.extra_);
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.MoveSingleComponentRequest)
}

inline void MoveSingleComponentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.destination_){nullptr}
    , decltype(_impl_.component_name_){nullptr}
    , decltype(_impl_.world_state_){nullptr}
    , decltype(_impl_.extra_){nullptr}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MoveSingleComponentRequest::~MoveSingleComponentRequest() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.MoveSingleComponentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveSingleComponentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.destination_;
  if (this != internal_default_instance()) delete _impl_.component_name_;
  if (this != internal_default_instance()) delete _impl_.world_state_;
  if (this != internal_default_instance()) delete _impl_.extra_;
}

void MoveSingleComponentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveSingleComponentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.MoveSingleComponentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.destination_ != nullptr) {
    delete _impl_.destination_;
  }
  _impl_.destination_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.component_name_ != nullptr) {
    delete _impl_.component_name_;
  }
  _impl_.component_name_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.world_state_ != nullptr);
    _impl_.world_state_->Clear();
  }
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveSingleComponentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.MoveSingleComponentRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveSingleComponentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.MoveSingleComponentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.MoveSingleComponentRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::destination(this),
        _Internal::destination(this).GetCachedSize(), target, stream);
  }

  // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::component_name(this),
        _Internal::component_name(this).GetCachedSize(), target, stream);
  }

  // optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
  if (_internal_has_world_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::world_state(this),
        _Internal::world_state(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.MoveSingleComponentRequest)
  return target;
}

size_t MoveSingleComponentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.MoveSingleComponentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
  if (this->_internal_has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.destination_);
  }

  // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.component_name_);
  }

  // optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.world_state_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveSingleComponentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveSingleComponentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveSingleComponentRequest::GetClassData() const { return &_class_data_; }


void MoveSingleComponentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveSingleComponentRequest*>(&to_msg);
  auto& from = static_cast<const MoveSingleComponentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.MoveSingleComponentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_destination()) {
    _this->_internal_mutable_destination()->::viam::common::v1::PoseInFrame::MergeFrom(
        from._internal_destination());
  }
  if (from._internal_has_component_name()) {
    _this->_internal_mutable_component_name()->::viam::common::v1::ResourceName::MergeFrom(
        from._internal_component_name());
  }
  if (from._internal_has_world_state()) {
    _this->_internal_mutable_world_state()->::viam::common::v1::WorldState::MergeFrom(
        from._internal_world_state());
  }
  if (from._internal_has_extra()) {
    _this->_internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_extra());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveSingleComponentRequest::CopyFrom(const MoveSingleComponentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.MoveSingleComponentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSingleComponentRequest::IsInitialized() const {
  return true;
}

void MoveSingleComponentRequest::InternalSwap(MoveSingleComponentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveSingleComponentRequest, _impl_.extra_)
      + sizeof(MoveSingleComponentRequest::_impl_.extra_)
      - PROTOBUF_FIELD_OFFSET(MoveSingleComponentRequest, _impl_.destination_)>(
          reinterpret_cast<char*>(&_impl_.destination_),
          reinterpret_cast<char*>(&other->_impl_.destination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSingleComponentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[2]);
}

// ===================================================================

class MoveSingleComponentResponse::_Internal {
 public:
};

MoveSingleComponentResponse::MoveSingleComponentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.MoveSingleComponentResponse)
}
MoveSingleComponentResponse::MoveSingleComponentResponse(const MoveSingleComponentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveSingleComponentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.MoveSingleComponentResponse)
}

inline void MoveSingleComponentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MoveSingleComponentResponse::~MoveSingleComponentResponse() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.MoveSingleComponentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveSingleComponentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveSingleComponentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveSingleComponentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.MoveSingleComponentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveSingleComponentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1 [json_name = "success"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveSingleComponentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.MoveSingleComponentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.MoveSingleComponentResponse)
  return target;
}

size_t MoveSingleComponentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.MoveSingleComponentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1 [json_name = "success"];
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveSingleComponentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveSingleComponentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveSingleComponentResponse::GetClassData() const { return &_class_data_; }


void MoveSingleComponentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveSingleComponentResponse*>(&to_msg);
  auto& from = static_cast<const MoveSingleComponentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.MoveSingleComponentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveSingleComponentResponse::CopyFrom(const MoveSingleComponentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.MoveSingleComponentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveSingleComponentResponse::IsInitialized() const {
  return true;
}

void MoveSingleComponentResponse::InternalSwap(MoveSingleComponentResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveSingleComponentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[3]);
}

// ===================================================================

class GetPoseRequest::_Internal {
 public:
  static const ::viam::common::v1::ResourceName& component_name(const GetPoseRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetPoseRequest* msg);
};

const ::viam::common::v1::ResourceName&
GetPoseRequest::_Internal::component_name(const GetPoseRequest* msg) {
  return *msg->_impl_.component_name_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
GetPoseRequest::_Internal::extra(const GetPoseRequest* msg) {
  return *msg->_impl_.extra_;
}
void GetPoseRequest::clear_component_name() {
  if (GetArenaForAllocation() == nullptr && _impl_.component_name_ != nullptr) {
    delete _impl_.component_name_;
  }
  _impl_.component_name_ = nullptr;
}
void GetPoseRequest::clear_supplemental_transforms() {
  _impl_.supplemental_transforms_.Clear();
}
void GetPoseRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
}
GetPoseRequest::GetPoseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.GetPoseRequest)
}
GetPoseRequest::GetPoseRequest(const GetPoseRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPoseRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.supplemental_transforms_){from._impl_.supplemental_transforms_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.destination_frame_){}
    , decltype(_impl_.component_name_){nullptr}
    , decltype(_impl_.extra_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.destination_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_frame().empty()) {
    _this->_impl_.destination_frame_.Set(from._internal_destination_frame(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_component_name()) {
    _this->_impl_.component_name_ = new ::viam::common::v1::ResourceName(*from._impl_.component_name_);
  }
  if (from._internal_has_extra()) {
    _this->_impl_.extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.extra_);
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.GetPoseRequest)
}

inline void GetPoseRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.supplemental_transforms_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.destination_frame_){}
    , decltype(_impl_.component_name_){nullptr}
    , decltype(_impl_.extra_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.destination_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPoseRequest::~GetPoseRequest() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.GetPoseRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPoseRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.supplemental_transforms_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.destination_frame_.Destroy();
  if (this != internal_default_instance()) delete _impl_.component_name_;
  if (this != internal_default_instance()) delete _impl_.extra_;
}

void GetPoseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPoseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.GetPoseRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.supplemental_transforms_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.destination_frame_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.component_name_ != nullptr) {
    delete _impl_.component_name_;
  }
  _impl_.component_name_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPoseRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.GetPoseRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string destination_frame = 3 [json_name = "destinationFrame"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_destination_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.GetPoseRequest.destination_frame"));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.common.v1.Transform supplemental_transforms = 4 [json_name = "supplementalTransforms"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supplemental_transforms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPoseRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.GetPoseRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.GetPoseRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::component_name(this),
        _Internal::component_name(this).GetCachedSize(), target, stream);
  }

  // string destination_frame = 3 [json_name = "destinationFrame"];
  if (!this->_internal_destination_frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination_frame().data(), static_cast<int>(this->_internal_destination_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.GetPoseRequest.destination_frame");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_destination_frame(), target);
  }

  // repeated .viam.common.v1.Transform supplemental_transforms = 4 [json_name = "supplementalTransforms"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_supplemental_transforms_size()); i < n; i++) {
    const auto& repfield = this->_internal_supplemental_transforms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.GetPoseRequest)
  return target;
}

size_t GetPoseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.GetPoseRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.common.v1.Transform supplemental_transforms = 4 [json_name = "supplementalTransforms"];
  total_size += 1UL * this->_internal_supplemental_transforms_size();
  for (const auto& msg : this->_impl_.supplemental_transforms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string destination_frame = 3 [json_name = "destinationFrame"];
  if (!this->_internal_destination_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination_frame());
  }

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  if (this->_internal_has_component_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.component_name_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPoseRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPoseRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPoseRequest::GetClassData() const { return &_class_data_; }


void GetPoseRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPoseRequest*>(&to_msg);
  auto& from = static_cast<const GetPoseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.GetPoseRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.supplemental_transforms_.MergeFrom(from._impl_.supplemental_transforms_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_destination_frame().empty()) {
    _this->_internal_set_destination_frame(from._internal_destination_frame());
  }
  if (from._internal_has_component_name()) {
    _this->_internal_mutable_component_name()->::viam::common::v1::ResourceName::MergeFrom(
        from._internal_component_name());
  }
  if (from._internal_has_extra()) {
    _this->_internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_extra());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPoseRequest::CopyFrom(const GetPoseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.GetPoseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPoseRequest::IsInitialized() const {
  return true;
}

void GetPoseRequest::InternalSwap(GetPoseRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.supplemental_transforms_.InternalSwap(&other->_impl_.supplemental_transforms_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.destination_frame_, lhs_arena,
      &other->_impl_.destination_frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPoseRequest, _impl_.extra_)
      + sizeof(GetPoseRequest::_impl_.extra_)
      - PROTOBUF_FIELD_OFFSET(GetPoseRequest, _impl_.component_name_)>(
          reinterpret_cast<char*>(&_impl_.component_name_),
          reinterpret_cast<char*>(&other->_impl_.component_name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPoseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[4]);
}

// ===================================================================

class GetPoseResponse::_Internal {
 public:
  static const ::viam::common::v1::PoseInFrame& pose(const GetPoseResponse* msg);
};

const ::viam::common::v1::PoseInFrame&
GetPoseResponse::_Internal::pose(const GetPoseResponse* msg) {
  return *msg->_impl_.pose_;
}
void GetPoseResponse::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
GetPoseResponse::GetPoseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.GetPoseResponse)
}
GetPoseResponse::GetPoseResponse(const GetPoseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPoseResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::viam::common::v1::PoseInFrame(*from._impl_.pose_);
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.GetPoseResponse)
}

inline void GetPoseResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPoseResponse::~GetPoseResponse() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.GetPoseResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPoseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pose_;
}

void GetPoseResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPoseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.GetPoseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPoseResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.common.v1.PoseInFrame pose = 1 [json_name = "pose"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPoseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.GetPoseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.common.v1.PoseInFrame pose = 1 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.GetPoseResponse)
  return target;
}

size_t GetPoseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.GetPoseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.common.v1.PoseInFrame pose = 1 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPoseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPoseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPoseResponse::GetClassData() const { return &_class_data_; }


void GetPoseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPoseResponse*>(&to_msg);
  auto& from = static_cast<const GetPoseResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.GetPoseResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::viam::common::v1::PoseInFrame::MergeFrom(
        from._internal_pose());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPoseResponse::CopyFrom(const GetPoseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.GetPoseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPoseResponse::IsInitialized() const {
  return true;
}

void GetPoseResponse::InternalSwap(GetPoseResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pose_, other->_impl_.pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPoseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[5]);
}

// ===================================================================

class Constraints::_Internal {
 public:
};

Constraints::Constraints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.Constraints)
}
Constraints::Constraints(const Constraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Constraints* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.linear_constraint_){from._impl_.linear_constraint_}
    , decltype(_impl_.orientation_constraint_){from._impl_.orientation_constraint_}
    , decltype(_impl_.collision_specification_){from._impl_.collision_specification_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.Constraints)
}

inline void Constraints::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.linear_constraint_){arena}
    , decltype(_impl_.orientation_constraint_){arena}
    , decltype(_impl_.collision_specification_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Constraints::~Constraints() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.Constraints)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Constraints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.linear_constraint_.~RepeatedPtrField();
  _impl_.orientation_constraint_.~RepeatedPtrField();
  _impl_.collision_specification_.~RepeatedPtrField();
}

void Constraints::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Constraints::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.Constraints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.linear_constraint_.Clear();
  _impl_.orientation_constraint_.Clear();
  _impl_.collision_specification_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Constraints::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.motion.v1.LinearConstraint linear_constraint = 1 [json_name = "linearConstraint"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linear_constraint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.service.motion.v1.OrientationConstraint orientation_constraint = 2 [json_name = "orientationConstraint"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orientation_constraint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.service.motion.v1.CollisionSpecification collision_specification = 3 [json_name = "collisionSpecification"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collision_specification(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Constraints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.Constraints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.LinearConstraint linear_constraint = 1 [json_name = "linearConstraint"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_linear_constraint_size()); i < n; i++) {
    const auto& repfield = this->_internal_linear_constraint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.service.motion.v1.OrientationConstraint orientation_constraint = 2 [json_name = "orientationConstraint"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orientation_constraint_size()); i < n; i++) {
    const auto& repfield = this->_internal_orientation_constraint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.service.motion.v1.CollisionSpecification collision_specification = 3 [json_name = "collisionSpecification"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collision_specification_size()); i < n; i++) {
    const auto& repfield = this->_internal_collision_specification(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.Constraints)
  return target;
}

size_t Constraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.Constraints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.LinearConstraint linear_constraint = 1 [json_name = "linearConstraint"];
  total_size += 1UL * this->_internal_linear_constraint_size();
  for (const auto& msg : this->_impl_.linear_constraint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.service.motion.v1.OrientationConstraint orientation_constraint = 2 [json_name = "orientationConstraint"];
  total_size += 1UL * this->_internal_orientation_constraint_size();
  for (const auto& msg : this->_impl_.orientation_constraint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.service.motion.v1.CollisionSpecification collision_specification = 3 [json_name = "collisionSpecification"];
  total_size += 1UL * this->_internal_collision_specification_size();
  for (const auto& msg : this->_impl_.collision_specification_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Constraints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Constraints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Constraints::GetClassData() const { return &_class_data_; }


void Constraints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Constraints*>(&to_msg);
  auto& from = static_cast<const Constraints&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.Constraints)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.linear_constraint_.MergeFrom(from._impl_.linear_constraint_);
  _this->_impl_.orientation_constraint_.MergeFrom(from._impl_.orientation_constraint_);
  _this->_impl_.collision_specification_.MergeFrom(from._impl_.collision_specification_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Constraints::CopyFrom(const Constraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.Constraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constraints::IsInitialized() const {
  return true;
}

void Constraints::InternalSwap(Constraints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.linear_constraint_.InternalSwap(&other->_impl_.linear_constraint_);
  _impl_.orientation_constraint_.InternalSwap(&other->_impl_.orientation_constraint_);
  _impl_.collision_specification_.InternalSwap(&other->_impl_.collision_specification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Constraints::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[6]);
}

// ===================================================================

class LinearConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<LinearConstraint>()._impl_._has_bits_);
  static void set_has_line_tolerance_mm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_orientation_tolerance_degs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LinearConstraint::LinearConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.LinearConstraint)
}
LinearConstraint::LinearConstraint(const LinearConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LinearConstraint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.line_tolerance_mm_){}
    , decltype(_impl_.orientation_tolerance_degs_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.line_tolerance_mm_, &from._impl_.line_tolerance_mm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.orientation_tolerance_degs_) -
    reinterpret_cast<char*>(&_impl_.line_tolerance_mm_)) + sizeof(_impl_.orientation_tolerance_degs_));
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.LinearConstraint)
}

inline void LinearConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.line_tolerance_mm_){0}
    , decltype(_impl_.orientation_tolerance_degs_){0}
  };
}

LinearConstraint::~LinearConstraint() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.LinearConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinearConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LinearConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LinearConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.LinearConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.line_tolerance_mm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.orientation_tolerance_degs_) -
        reinterpret_cast<char*>(&_impl_.line_tolerance_mm_)) + sizeof(_impl_.orientation_tolerance_degs_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LinearConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float line_tolerance_mm = 1 [json_name = "lineToleranceMm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_line_tolerance_mm(&has_bits);
          _impl_.line_tolerance_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float orientation_tolerance_degs = 2 [json_name = "orientationToleranceDegs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_orientation_tolerance_degs(&has_bits);
          _impl_.orientation_tolerance_degs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinearConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.LinearConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float line_tolerance_mm = 1 [json_name = "lineToleranceMm"];
  if (_internal_has_line_tolerance_mm()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_line_tolerance_mm(), target);
  }

  // optional float orientation_tolerance_degs = 2 [json_name = "orientationToleranceDegs"];
  if (_internal_has_orientation_tolerance_degs()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_orientation_tolerance_degs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.LinearConstraint)
  return target;
}

size_t LinearConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.LinearConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float line_tolerance_mm = 1 [json_name = "lineToleranceMm"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float orientation_tolerance_degs = 2 [json_name = "orientationToleranceDegs"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LinearConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LinearConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LinearConstraint::GetClassData() const { return &_class_data_; }


void LinearConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LinearConstraint*>(&to_msg);
  auto& from = static_cast<const LinearConstraint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.LinearConstraint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.line_tolerance_mm_ = from._impl_.line_tolerance_mm_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.orientation_tolerance_degs_ = from._impl_.orientation_tolerance_degs_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LinearConstraint::CopyFrom(const LinearConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.LinearConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearConstraint::IsInitialized() const {
  return true;
}

void LinearConstraint::InternalSwap(LinearConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LinearConstraint, _impl_.orientation_tolerance_degs_)
      + sizeof(LinearConstraint::_impl_.orientation_tolerance_degs_)
      - PROTOBUF_FIELD_OFFSET(LinearConstraint, _impl_.line_tolerance_mm_)>(
          reinterpret_cast<char*>(&_impl_.line_tolerance_mm_),
          reinterpret_cast<char*>(&other->_impl_.line_tolerance_mm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LinearConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[7]);
}

// ===================================================================

class OrientationConstraint::_Internal {
 public:
  using HasBits = decltype(std::declval<OrientationConstraint>()._impl_._has_bits_);
  static void set_has_orientation_tolerance_degs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OrientationConstraint::OrientationConstraint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.OrientationConstraint)
}
OrientationConstraint::OrientationConstraint(const OrientationConstraint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrientationConstraint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orientation_tolerance_degs_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.orientation_tolerance_degs_ = from._impl_.orientation_tolerance_degs_;
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.OrientationConstraint)
}

inline void OrientationConstraint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orientation_tolerance_degs_){0}
  };
}

OrientationConstraint::~OrientationConstraint() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.OrientationConstraint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrientationConstraint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OrientationConstraint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrientationConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.OrientationConstraint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orientation_tolerance_degs_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrientationConstraint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float orientation_tolerance_degs = 1 [json_name = "orientationToleranceDegs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_orientation_tolerance_degs(&has_bits);
          _impl_.orientation_tolerance_degs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrientationConstraint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.OrientationConstraint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float orientation_tolerance_degs = 1 [json_name = "orientationToleranceDegs"];
  if (_internal_has_orientation_tolerance_degs()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_orientation_tolerance_degs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.OrientationConstraint)
  return target;
}

size_t OrientationConstraint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.OrientationConstraint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float orientation_tolerance_degs = 1 [json_name = "orientationToleranceDegs"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrientationConstraint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrientationConstraint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrientationConstraint::GetClassData() const { return &_class_data_; }


void OrientationConstraint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrientationConstraint*>(&to_msg);
  auto& from = static_cast<const OrientationConstraint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.OrientationConstraint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_orientation_tolerance_degs()) {
    _this->_internal_set_orientation_tolerance_degs(from._internal_orientation_tolerance_degs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrientationConstraint::CopyFrom(const OrientationConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.OrientationConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrientationConstraint::IsInitialized() const {
  return true;
}

void OrientationConstraint::InternalSwap(OrientationConstraint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.orientation_tolerance_degs_, other->_impl_.orientation_tolerance_degs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrientationConstraint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[8]);
}

// ===================================================================

class CollisionSpecification_AllowedFrameCollisions::_Internal {
 public:
};

CollisionSpecification_AllowedFrameCollisions::CollisionSpecification_AllowedFrameCollisions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
}
CollisionSpecification_AllowedFrameCollisions::CollisionSpecification_AllowedFrameCollisions(const CollisionSpecification_AllowedFrameCollisions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollisionSpecification_AllowedFrameCollisions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.frame1_){}
    , decltype(_impl_.frame2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.frame1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame1().empty()) {
    _this->_impl_.frame1_.Set(from._internal_frame1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.frame2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame2().empty()) {
    _this->_impl_.frame2_.Set(from._internal_frame2(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
}

inline void CollisionSpecification_AllowedFrameCollisions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.frame1_){}
    , decltype(_impl_.frame2_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.frame1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.frame2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.frame2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CollisionSpecification_AllowedFrameCollisions::~CollisionSpecification_AllowedFrameCollisions() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollisionSpecification_AllowedFrameCollisions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.frame1_.Destroy();
  _impl_.frame2_.Destroy();
}

void CollisionSpecification_AllowedFrameCollisions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollisionSpecification_AllowedFrameCollisions::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.frame1_.ClearToEmpty();
  _impl_.frame2_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollisionSpecification_AllowedFrameCollisions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string frame1 = 1 [json_name = "frame1"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_frame1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions.frame1"));
        } else
          goto handle_unusual;
        continue;
      // string frame2 = 2 [json_name = "frame2"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_frame2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions.frame2"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollisionSpecification_AllowedFrameCollisions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string frame1 = 1 [json_name = "frame1"];
  if (!this->_internal_frame1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame1().data(), static_cast<int>(this->_internal_frame1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions.frame1");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_frame1(), target);
  }

  // string frame2 = 2 [json_name = "frame2"];
  if (!this->_internal_frame2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame2().data(), static_cast<int>(this->_internal_frame2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions.frame2");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  return target;
}

size_t CollisionSpecification_AllowedFrameCollisions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame1 = 1 [json_name = "frame1"];
  if (!this->_internal_frame1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame1());
  }

  // string frame2 = 2 [json_name = "frame2"];
  if (!this->_internal_frame2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollisionSpecification_AllowedFrameCollisions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollisionSpecification_AllowedFrameCollisions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollisionSpecification_AllowedFrameCollisions::GetClassData() const { return &_class_data_; }


void CollisionSpecification_AllowedFrameCollisions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollisionSpecification_AllowedFrameCollisions*>(&to_msg);
  auto& from = static_cast<const CollisionSpecification_AllowedFrameCollisions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_frame1().empty()) {
    _this->_internal_set_frame1(from._internal_frame1());
  }
  if (!from._internal_frame2().empty()) {
    _this->_internal_set_frame2(from._internal_frame2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollisionSpecification_AllowedFrameCollisions::CopyFrom(const CollisionSpecification_AllowedFrameCollisions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionSpecification_AllowedFrameCollisions::IsInitialized() const {
  return true;
}

void CollisionSpecification_AllowedFrameCollisions::InternalSwap(CollisionSpecification_AllowedFrameCollisions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame1_, lhs_arena,
      &other->_impl_.frame1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.frame2_, lhs_arena,
      &other->_impl_.frame2_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CollisionSpecification_AllowedFrameCollisions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[9]);
}

// ===================================================================

class CollisionSpecification::_Internal {
 public:
};

CollisionSpecification::CollisionSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.service.motion.v1.CollisionSpecification)
}
CollisionSpecification::CollisionSpecification(const CollisionSpecification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CollisionSpecification* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.allows_){from._impl_.allows_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.motion.v1.CollisionSpecification)
}

inline void CollisionSpecification::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.allows_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CollisionSpecification::~CollisionSpecification() {
  // @@protoc_insertion_point(destructor:viam.service.motion.v1.CollisionSpecification)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CollisionSpecification::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allows_.~RepeatedPtrField();
}

void CollisionSpecification::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CollisionSpecification::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.motion.v1.CollisionSpecification)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allows_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CollisionSpecification::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions allows = 1 [json_name = "allows"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allows(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CollisionSpecification::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.motion.v1.CollisionSpecification)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions allows = 1 [json_name = "allows"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_allows_size()); i < n; i++) {
    const auto& repfield = this->_internal_allows(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.motion.v1.CollisionSpecification)
  return target;
}

size_t CollisionSpecification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.motion.v1.CollisionSpecification)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.motion.v1.CollisionSpecification.AllowedFrameCollisions allows = 1 [json_name = "allows"];
  total_size += 1UL * this->_internal_allows_size();
  for (const auto& msg : this->_impl_.allows_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CollisionSpecification::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CollisionSpecification::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CollisionSpecification::GetClassData() const { return &_class_data_; }


void CollisionSpecification::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CollisionSpecification*>(&to_msg);
  auto& from = static_cast<const CollisionSpecification&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.service.motion.v1.CollisionSpecification)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.allows_.MergeFrom(from._impl_.allows_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CollisionSpecification::CopyFrom(const CollisionSpecification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.motion.v1.CollisionSpecification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollisionSpecification::IsInitialized() const {
  return true;
}

void CollisionSpecification::InternalSwap(CollisionSpecification* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.allows_.InternalSwap(&other->_impl_.allows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollisionSpecification::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_getter, &descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto_once,
      file_level_metadata_service_2fmotion_2fv1_2fmotion_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace motion
}  // namespace service
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::MoveRequest*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::MoveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::MoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::MoveResponse*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::MoveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::MoveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::MoveSingleComponentRequest*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::MoveSingleComponentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::MoveSingleComponentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::MoveSingleComponentResponse*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::MoveSingleComponentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::MoveSingleComponentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::GetPoseRequest*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::GetPoseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::GetPoseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::GetPoseResponse*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::GetPoseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::GetPoseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::Constraints*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::Constraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::Constraints >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::LinearConstraint*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::LinearConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::LinearConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::OrientationConstraint*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::OrientationConstraint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::OrientationConstraint >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::CollisionSpecification_AllowedFrameCollisions >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::motion::v1::CollisionSpecification*
Arena::CreateMaybeMessage< ::viam::service::motion::v1::CollisionSpecification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::motion::v1::CollisionSpecification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
