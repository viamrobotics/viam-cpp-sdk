// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/motion/v1/motion.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2fmotion_2fv1_2fmotion_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2fmotion_2fv1_2fmotion_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2fmotion_2fv1_2fmotion_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2fmotion_2fv1_2fmotion_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2fmotion_2fv1_2fmotion_2eproto;
namespace viam {
namespace service {
namespace motion {
namespace v1 {
class GetPoseRequest;
struct GetPoseRequestDefaultTypeInternal;
extern GetPoseRequestDefaultTypeInternal _GetPoseRequest_default_instance_;
class GetPoseResponse;
struct GetPoseResponseDefaultTypeInternal;
extern GetPoseResponseDefaultTypeInternal _GetPoseResponse_default_instance_;
class MoveRequest;
struct MoveRequestDefaultTypeInternal;
extern MoveRequestDefaultTypeInternal _MoveRequest_default_instance_;
class MoveResponse;
struct MoveResponseDefaultTypeInternal;
extern MoveResponseDefaultTypeInternal _MoveResponse_default_instance_;
class MoveSingleComponentRequest;
struct MoveSingleComponentRequestDefaultTypeInternal;
extern MoveSingleComponentRequestDefaultTypeInternal _MoveSingleComponentRequest_default_instance_;
class MoveSingleComponentResponse;
struct MoveSingleComponentResponseDefaultTypeInternal;
extern MoveSingleComponentResponseDefaultTypeInternal _MoveSingleComponentResponse_default_instance_;
}  // namespace v1
}  // namespace motion
}  // namespace service
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::service::motion::v1::GetPoseRequest* Arena::CreateMaybeMessage<::viam::service::motion::v1::GetPoseRequest>(Arena*);
template<> ::viam::service::motion::v1::GetPoseResponse* Arena::CreateMaybeMessage<::viam::service::motion::v1::GetPoseResponse>(Arena*);
template<> ::viam::service::motion::v1::MoveRequest* Arena::CreateMaybeMessage<::viam::service::motion::v1::MoveRequest>(Arena*);
template<> ::viam::service::motion::v1::MoveResponse* Arena::CreateMaybeMessage<::viam::service::motion::v1::MoveResponse>(Arena*);
template<> ::viam::service::motion::v1::MoveSingleComponentRequest* Arena::CreateMaybeMessage<::viam::service::motion::v1::MoveSingleComponentRequest>(Arena*);
template<> ::viam::service::motion::v1::MoveSingleComponentResponse* Arena::CreateMaybeMessage<::viam::service::motion::v1::MoveSingleComponentResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace service {
namespace motion {
namespace v1 {

// ===================================================================

class MoveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.motion.v1.MoveRequest) */ {
 public:
  inline MoveRequest() : MoveRequest(nullptr) {}
  ~MoveRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveRequest(const MoveRequest& from);
  MoveRequest(MoveRequest&& from) noexcept
    : MoveRequest() {
    *this = ::std::move(from);
  }

  inline MoveRequest& operator=(const MoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveRequest& operator=(MoveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveRequest* internal_default_instance() {
    return reinterpret_cast<const MoveRequest*>(
               &_MoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MoveRequest& a, MoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveRequest& from) {
    MoveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.motion.v1.MoveRequest";
  }
  protected:
  explicit MoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDestinationFieldNumber = 2,
    kComponentNameFieldNumber = 3,
    kWorldStateFieldNumber = 4,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::viam::common::v1::PoseInFrame& destination() const;
  PROTOBUF_NODISCARD ::viam::common::v1::PoseInFrame* release_destination();
  ::viam::common::v1::PoseInFrame* mutable_destination();
  void set_allocated_destination(::viam::common::v1::PoseInFrame* destination);
  private:
  const ::viam::common::v1::PoseInFrame& _internal_destination() const;
  ::viam::common::v1::PoseInFrame* _internal_mutable_destination();
  public:
  void unsafe_arena_set_allocated_destination(
      ::viam::common::v1::PoseInFrame* destination);
  ::viam::common::v1::PoseInFrame* unsafe_arena_release_destination();

  // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
  bool has_component_name() const;
  private:
  bool _internal_has_component_name() const;
  public:
  void clear_component_name();
  const ::viam::common::v1::ResourceName& component_name() const;
  PROTOBUF_NODISCARD ::viam::common::v1::ResourceName* release_component_name();
  ::viam::common::v1::ResourceName* mutable_component_name();
  void set_allocated_component_name(::viam::common::v1::ResourceName* component_name);
  private:
  const ::viam::common::v1::ResourceName& _internal_component_name() const;
  ::viam::common::v1::ResourceName* _internal_mutable_component_name();
  public:
  void unsafe_arena_set_allocated_component_name(
      ::viam::common::v1::ResourceName* component_name);
  ::viam::common::v1::ResourceName* unsafe_arena_release_component_name();

  // optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
  bool has_world_state() const;
  private:
  bool _internal_has_world_state() const;
  public:
  void clear_world_state();
  const ::viam::common::v1::WorldState& world_state() const;
  PROTOBUF_NODISCARD ::viam::common::v1::WorldState* release_world_state();
  ::viam::common::v1::WorldState* mutable_world_state();
  void set_allocated_world_state(::viam::common::v1::WorldState* world_state);
  private:
  const ::viam::common::v1::WorldState& _internal_world_state() const;
  ::viam::common::v1::WorldState* _internal_mutable_world_state();
  public:
  void unsafe_arena_set_allocated_world_state(
      ::viam::common::v1::WorldState* world_state);
  ::viam::common::v1::WorldState* unsafe_arena_release_world_state();

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.service.motion.v1.MoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::viam::common::v1::PoseInFrame* destination_;
    ::viam::common::v1::ResourceName* component_name_;
    ::viam::common::v1::WorldState* world_state_;
    ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fmotion_2fv1_2fmotion_2eproto;
};
// -------------------------------------------------------------------

class MoveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.motion.v1.MoveResponse) */ {
 public:
  inline MoveResponse() : MoveResponse(nullptr) {}
  ~MoveResponse() override;
  explicit PROTOBUF_CONSTEXPR MoveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveResponse(const MoveResponse& from);
  MoveResponse(MoveResponse&& from) noexcept
    : MoveResponse() {
    *this = ::std::move(from);
  }

  inline MoveResponse& operator=(const MoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveResponse& operator=(MoveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveResponse* internal_default_instance() {
    return reinterpret_cast<const MoveResponse*>(
               &_MoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MoveResponse& a, MoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveResponse& from) {
    MoveResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.motion.v1.MoveResponse";
  }
  protected:
  explicit MoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.service.motion.v1.MoveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fmotion_2fv1_2fmotion_2eproto;
};
// -------------------------------------------------------------------

class MoveSingleComponentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.motion.v1.MoveSingleComponentRequest) */ {
 public:
  inline MoveSingleComponentRequest() : MoveSingleComponentRequest(nullptr) {}
  ~MoveSingleComponentRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveSingleComponentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveSingleComponentRequest(const MoveSingleComponentRequest& from);
  MoveSingleComponentRequest(MoveSingleComponentRequest&& from) noexcept
    : MoveSingleComponentRequest() {
    *this = ::std::move(from);
  }

  inline MoveSingleComponentRequest& operator=(const MoveSingleComponentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSingleComponentRequest& operator=(MoveSingleComponentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveSingleComponentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveSingleComponentRequest* internal_default_instance() {
    return reinterpret_cast<const MoveSingleComponentRequest*>(
               &_MoveSingleComponentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MoveSingleComponentRequest& a, MoveSingleComponentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveSingleComponentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveSingleComponentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveSingleComponentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveSingleComponentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveSingleComponentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveSingleComponentRequest& from) {
    MoveSingleComponentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSingleComponentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.motion.v1.MoveSingleComponentRequest";
  }
  protected:
  explicit MoveSingleComponentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDestinationFieldNumber = 2,
    kComponentNameFieldNumber = 3,
    kWorldStateFieldNumber = 4,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::viam::common::v1::PoseInFrame& destination() const;
  PROTOBUF_NODISCARD ::viam::common::v1::PoseInFrame* release_destination();
  ::viam::common::v1::PoseInFrame* mutable_destination();
  void set_allocated_destination(::viam::common::v1::PoseInFrame* destination);
  private:
  const ::viam::common::v1::PoseInFrame& _internal_destination() const;
  ::viam::common::v1::PoseInFrame* _internal_mutable_destination();
  public:
  void unsafe_arena_set_allocated_destination(
      ::viam::common::v1::PoseInFrame* destination);
  ::viam::common::v1::PoseInFrame* unsafe_arena_release_destination();

  // .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
  bool has_component_name() const;
  private:
  bool _internal_has_component_name() const;
  public:
  void clear_component_name();
  const ::viam::common::v1::ResourceName& component_name() const;
  PROTOBUF_NODISCARD ::viam::common::v1::ResourceName* release_component_name();
  ::viam::common::v1::ResourceName* mutable_component_name();
  void set_allocated_component_name(::viam::common::v1::ResourceName* component_name);
  private:
  const ::viam::common::v1::ResourceName& _internal_component_name() const;
  ::viam::common::v1::ResourceName* _internal_mutable_component_name();
  public:
  void unsafe_arena_set_allocated_component_name(
      ::viam::common::v1::ResourceName* component_name);
  ::viam::common::v1::ResourceName* unsafe_arena_release_component_name();

  // optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
  bool has_world_state() const;
  private:
  bool _internal_has_world_state() const;
  public:
  void clear_world_state();
  const ::viam::common::v1::WorldState& world_state() const;
  PROTOBUF_NODISCARD ::viam::common::v1::WorldState* release_world_state();
  ::viam::common::v1::WorldState* mutable_world_state();
  void set_allocated_world_state(::viam::common::v1::WorldState* world_state);
  private:
  const ::viam::common::v1::WorldState& _internal_world_state() const;
  ::viam::common::v1::WorldState* _internal_mutable_world_state();
  public:
  void unsafe_arena_set_allocated_world_state(
      ::viam::common::v1::WorldState* world_state);
  ::viam::common::v1::WorldState* unsafe_arena_release_world_state();

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.service.motion.v1.MoveSingleComponentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::viam::common::v1::PoseInFrame* destination_;
    ::viam::common::v1::ResourceName* component_name_;
    ::viam::common::v1::WorldState* world_state_;
    ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fmotion_2fv1_2fmotion_2eproto;
};
// -------------------------------------------------------------------

class MoveSingleComponentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.motion.v1.MoveSingleComponentResponse) */ {
 public:
  inline MoveSingleComponentResponse() : MoveSingleComponentResponse(nullptr) {}
  ~MoveSingleComponentResponse() override;
  explicit PROTOBUF_CONSTEXPR MoveSingleComponentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveSingleComponentResponse(const MoveSingleComponentResponse& from);
  MoveSingleComponentResponse(MoveSingleComponentResponse&& from) noexcept
    : MoveSingleComponentResponse() {
    *this = ::std::move(from);
  }

  inline MoveSingleComponentResponse& operator=(const MoveSingleComponentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveSingleComponentResponse& operator=(MoveSingleComponentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveSingleComponentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveSingleComponentResponse* internal_default_instance() {
    return reinterpret_cast<const MoveSingleComponentResponse*>(
               &_MoveSingleComponentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MoveSingleComponentResponse& a, MoveSingleComponentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveSingleComponentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveSingleComponentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveSingleComponentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveSingleComponentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveSingleComponentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveSingleComponentResponse& from) {
    MoveSingleComponentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveSingleComponentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.motion.v1.MoveSingleComponentResponse";
  }
  protected:
  explicit MoveSingleComponentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.service.motion.v1.MoveSingleComponentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fmotion_2fv1_2fmotion_2eproto;
};
// -------------------------------------------------------------------

class GetPoseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.motion.v1.GetPoseRequest) */ {
 public:
  inline GetPoseRequest() : GetPoseRequest(nullptr) {}
  ~GetPoseRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPoseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPoseRequest(const GetPoseRequest& from);
  GetPoseRequest(GetPoseRequest&& from) noexcept
    : GetPoseRequest() {
    *this = ::std::move(from);
  }

  inline GetPoseRequest& operator=(const GetPoseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPoseRequest& operator=(GetPoseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPoseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPoseRequest* internal_default_instance() {
    return reinterpret_cast<const GetPoseRequest*>(
               &_GetPoseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetPoseRequest& a, GetPoseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPoseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPoseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPoseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPoseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPoseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPoseRequest& from) {
    GetPoseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPoseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.motion.v1.GetPoseRequest";
  }
  protected:
  explicit GetPoseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupplementalTransformsFieldNumber = 4,
    kNameFieldNumber = 1,
    kDestinationFrameFieldNumber = 3,
    kComponentNameFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // repeated .viam.common.v1.Transform supplemental_transforms = 4 [json_name = "supplementalTransforms"];
  int supplemental_transforms_size() const;
  private:
  int _internal_supplemental_transforms_size() const;
  public:
  void clear_supplemental_transforms();
  ::viam::common::v1::Transform* mutable_supplemental_transforms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >*
      mutable_supplemental_transforms();
  private:
  const ::viam::common::v1::Transform& _internal_supplemental_transforms(int index) const;
  ::viam::common::v1::Transform* _internal_add_supplemental_transforms();
  public:
  const ::viam::common::v1::Transform& supplemental_transforms(int index) const;
  ::viam::common::v1::Transform* add_supplemental_transforms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >&
      supplemental_transforms() const;

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string destination_frame = 3 [json_name = "destinationFrame"];
  void clear_destination_frame();
  const std::string& destination_frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination_frame();
  PROTOBUF_NODISCARD std::string* release_destination_frame();
  void set_allocated_destination_frame(std::string* destination_frame);
  private:
  const std::string& _internal_destination_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination_frame(const std::string& value);
  std::string* _internal_mutable_destination_frame();
  public:

  // .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
  bool has_component_name() const;
  private:
  bool _internal_has_component_name() const;
  public:
  void clear_component_name();
  const ::viam::common::v1::ResourceName& component_name() const;
  PROTOBUF_NODISCARD ::viam::common::v1::ResourceName* release_component_name();
  ::viam::common::v1::ResourceName* mutable_component_name();
  void set_allocated_component_name(::viam::common::v1::ResourceName* component_name);
  private:
  const ::viam::common::v1::ResourceName& _internal_component_name() const;
  ::viam::common::v1::ResourceName* _internal_mutable_component_name();
  public:
  void unsafe_arena_set_allocated_component_name(
      ::viam::common::v1::ResourceName* component_name);
  ::viam::common::v1::ResourceName* unsafe_arena_release_component_name();

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.service.motion.v1.GetPoseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform > supplemental_transforms_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_frame_;
    ::viam::common::v1::ResourceName* component_name_;
    ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fmotion_2fv1_2fmotion_2eproto;
};
// -------------------------------------------------------------------

class GetPoseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.motion.v1.GetPoseResponse) */ {
 public:
  inline GetPoseResponse() : GetPoseResponse(nullptr) {}
  ~GetPoseResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPoseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPoseResponse(const GetPoseResponse& from);
  GetPoseResponse(GetPoseResponse&& from) noexcept
    : GetPoseResponse() {
    *this = ::std::move(from);
  }

  inline GetPoseResponse& operator=(const GetPoseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPoseResponse& operator=(GetPoseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPoseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPoseResponse* internal_default_instance() {
    return reinterpret_cast<const GetPoseResponse*>(
               &_GetPoseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetPoseResponse& a, GetPoseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPoseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPoseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPoseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPoseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPoseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPoseResponse& from) {
    GetPoseResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPoseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.motion.v1.GetPoseResponse";
  }
  protected:
  explicit GetPoseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
  };
  // .viam.common.v1.PoseInFrame pose = 1 [json_name = "pose"];
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::viam::common::v1::PoseInFrame& pose() const;
  PROTOBUF_NODISCARD ::viam::common::v1::PoseInFrame* release_pose();
  ::viam::common::v1::PoseInFrame* mutable_pose();
  void set_allocated_pose(::viam::common::v1::PoseInFrame* pose);
  private:
  const ::viam::common::v1::PoseInFrame& _internal_pose() const;
  ::viam::common::v1::PoseInFrame* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::viam::common::v1::PoseInFrame* pose);
  ::viam::common::v1::PoseInFrame* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:viam.service.motion.v1.GetPoseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::viam::common::v1::PoseInFrame* pose_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fmotion_2fv1_2fmotion_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MoveRequest

// string name = 1 [json_name = "name"];
inline void MoveRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MoveRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.MoveRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.motion.v1.MoveRequest.name)
}
inline std::string* MoveRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.MoveRequest.name)
  return _s;
}
inline const std::string& MoveRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MoveRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MoveRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.MoveRequest.name)
  return _impl_.name_.Release();
}
inline void MoveRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.MoveRequest.name)
}

// .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
inline bool MoveRequest::_internal_has_destination() const {
  return this != internal_default_instance() && _impl_.destination_ != nullptr;
}
inline bool MoveRequest::has_destination() const {
  return _internal_has_destination();
}
inline const ::viam::common::v1::PoseInFrame& MoveRequest::_internal_destination() const {
  const ::viam::common::v1::PoseInFrame* p = _impl_.destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::PoseInFrame&>(
      ::viam::common::v1::_PoseInFrame_default_instance_);
}
inline const ::viam::common::v1::PoseInFrame& MoveRequest::destination() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.MoveRequest.destination)
  return _internal_destination();
}
inline void MoveRequest::unsafe_arena_set_allocated_destination(
    ::viam::common::v1::PoseInFrame* destination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_);
  }
  _impl_.destination_ = destination;
  if (destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.motion.v1.MoveRequest.destination)
}
inline ::viam::common::v1::PoseInFrame* MoveRequest::release_destination() {
  
  ::viam::common::v1::PoseInFrame* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::PoseInFrame* MoveRequest::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.MoveRequest.destination)
  
  ::viam::common::v1::PoseInFrame* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
  return temp;
}
inline ::viam::common::v1::PoseInFrame* MoveRequest::_internal_mutable_destination() {
  
  if (_impl_.destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::PoseInFrame>(GetArenaForAllocation());
    _impl_.destination_ = p;
  }
  return _impl_.destination_;
}
inline ::viam::common::v1::PoseInFrame* MoveRequest::mutable_destination() {
  ::viam::common::v1::PoseInFrame* _msg = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.MoveRequest.destination)
  return _msg;
}
inline void MoveRequest::set_allocated_destination(::viam::common::v1::PoseInFrame* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_);
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination));
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.MoveRequest.destination)
}

// .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
inline bool MoveRequest::_internal_has_component_name() const {
  return this != internal_default_instance() && _impl_.component_name_ != nullptr;
}
inline bool MoveRequest::has_component_name() const {
  return _internal_has_component_name();
}
inline const ::viam::common::v1::ResourceName& MoveRequest::_internal_component_name() const {
  const ::viam::common::v1::ResourceName* p = _impl_.component_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::ResourceName&>(
      ::viam::common::v1::_ResourceName_default_instance_);
}
inline const ::viam::common::v1::ResourceName& MoveRequest::component_name() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.MoveRequest.component_name)
  return _internal_component_name();
}
inline void MoveRequest::unsafe_arena_set_allocated_component_name(
    ::viam::common::v1::ResourceName* component_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.component_name_);
  }
  _impl_.component_name_ = component_name;
  if (component_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.motion.v1.MoveRequest.component_name)
}
inline ::viam::common::v1::ResourceName* MoveRequest::release_component_name() {
  
  ::viam::common::v1::ResourceName* temp = _impl_.component_name_;
  _impl_.component_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::ResourceName* MoveRequest::unsafe_arena_release_component_name() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.MoveRequest.component_name)
  
  ::viam::common::v1::ResourceName* temp = _impl_.component_name_;
  _impl_.component_name_ = nullptr;
  return temp;
}
inline ::viam::common::v1::ResourceName* MoveRequest::_internal_mutable_component_name() {
  
  if (_impl_.component_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::ResourceName>(GetArenaForAllocation());
    _impl_.component_name_ = p;
  }
  return _impl_.component_name_;
}
inline ::viam::common::v1::ResourceName* MoveRequest::mutable_component_name() {
  ::viam::common::v1::ResourceName* _msg = _internal_mutable_component_name();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.MoveRequest.component_name)
  return _msg;
}
inline void MoveRequest::set_allocated_component_name(::viam::common::v1::ResourceName* component_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.component_name_);
  }
  if (component_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_name));
    if (message_arena != submessage_arena) {
      component_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.component_name_ = component_name;
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.MoveRequest.component_name)
}

// optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
inline bool MoveRequest::_internal_has_world_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.world_state_ != nullptr);
  return value;
}
inline bool MoveRequest::has_world_state() const {
  return _internal_has_world_state();
}
inline const ::viam::common::v1::WorldState& MoveRequest::_internal_world_state() const {
  const ::viam::common::v1::WorldState* p = _impl_.world_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::WorldState&>(
      ::viam::common::v1::_WorldState_default_instance_);
}
inline const ::viam::common::v1::WorldState& MoveRequest::world_state() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.MoveRequest.world_state)
  return _internal_world_state();
}
inline void MoveRequest::unsafe_arena_set_allocated_world_state(
    ::viam::common::v1::WorldState* world_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.world_state_);
  }
  _impl_.world_state_ = world_state;
  if (world_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.motion.v1.MoveRequest.world_state)
}
inline ::viam::common::v1::WorldState* MoveRequest::release_world_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::common::v1::WorldState* temp = _impl_.world_state_;
  _impl_.world_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::WorldState* MoveRequest::unsafe_arena_release_world_state() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.MoveRequest.world_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::common::v1::WorldState* temp = _impl_.world_state_;
  _impl_.world_state_ = nullptr;
  return temp;
}
inline ::viam::common::v1::WorldState* MoveRequest::_internal_mutable_world_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.world_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::WorldState>(GetArenaForAllocation());
    _impl_.world_state_ = p;
  }
  return _impl_.world_state_;
}
inline ::viam::common::v1::WorldState* MoveRequest::mutable_world_state() {
  ::viam::common::v1::WorldState* _msg = _internal_mutable_world_state();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.MoveRequest.world_state)
  return _msg;
}
inline void MoveRequest::set_allocated_world_state(::viam::common::v1::WorldState* world_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.world_state_);
  }
  if (world_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_state));
    if (message_arena != submessage_arena) {
      world_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.world_state_ = world_state;
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.MoveRequest.world_state)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool MoveRequest::_internal_has_extra() const {
  return this != internal_default_instance() && _impl_.extra_ != nullptr;
}
inline bool MoveRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& MoveRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& MoveRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.MoveRequest.extra)
  return _internal_extra();
}
inline void MoveRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.motion.v1.MoveRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.MoveRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveRequest::_internal_mutable_extra() {
  
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.extra_ = p;
  }
  return _impl_.extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.MoveRequest.extra)
  return _msg;
}
inline void MoveRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.MoveRequest.extra)
}

// -------------------------------------------------------------------

// MoveResponse

// bool success = 1 [json_name = "success"];
inline void MoveResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool MoveResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool MoveResponse::success() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.MoveResponse.success)
  return _internal_success();
}
inline void MoveResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void MoveResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:viam.service.motion.v1.MoveResponse.success)
}

// -------------------------------------------------------------------

// MoveSingleComponentRequest

// string name = 1 [json_name = "name"];
inline void MoveSingleComponentRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MoveSingleComponentRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.MoveSingleComponentRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveSingleComponentRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.motion.v1.MoveSingleComponentRequest.name)
}
inline std::string* MoveSingleComponentRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.MoveSingleComponentRequest.name)
  return _s;
}
inline const std::string& MoveSingleComponentRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MoveSingleComponentRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveSingleComponentRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MoveSingleComponentRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.MoveSingleComponentRequest.name)
  return _impl_.name_.Release();
}
inline void MoveSingleComponentRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.MoveSingleComponentRequest.name)
}

// .viam.common.v1.PoseInFrame destination = 2 [json_name = "destination"];
inline bool MoveSingleComponentRequest::_internal_has_destination() const {
  return this != internal_default_instance() && _impl_.destination_ != nullptr;
}
inline bool MoveSingleComponentRequest::has_destination() const {
  return _internal_has_destination();
}
inline const ::viam::common::v1::PoseInFrame& MoveSingleComponentRequest::_internal_destination() const {
  const ::viam::common::v1::PoseInFrame* p = _impl_.destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::PoseInFrame&>(
      ::viam::common::v1::_PoseInFrame_default_instance_);
}
inline const ::viam::common::v1::PoseInFrame& MoveSingleComponentRequest::destination() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.MoveSingleComponentRequest.destination)
  return _internal_destination();
}
inline void MoveSingleComponentRequest::unsafe_arena_set_allocated_destination(
    ::viam::common::v1::PoseInFrame* destination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_);
  }
  _impl_.destination_ = destination;
  if (destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.motion.v1.MoveSingleComponentRequest.destination)
}
inline ::viam::common::v1::PoseInFrame* MoveSingleComponentRequest::release_destination() {
  
  ::viam::common::v1::PoseInFrame* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::PoseInFrame* MoveSingleComponentRequest::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.MoveSingleComponentRequest.destination)
  
  ::viam::common::v1::PoseInFrame* temp = _impl_.destination_;
  _impl_.destination_ = nullptr;
  return temp;
}
inline ::viam::common::v1::PoseInFrame* MoveSingleComponentRequest::_internal_mutable_destination() {
  
  if (_impl_.destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::PoseInFrame>(GetArenaForAllocation());
    _impl_.destination_ = p;
  }
  return _impl_.destination_;
}
inline ::viam::common::v1::PoseInFrame* MoveSingleComponentRequest::mutable_destination() {
  ::viam::common::v1::PoseInFrame* _msg = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.MoveSingleComponentRequest.destination)
  return _msg;
}
inline void MoveSingleComponentRequest::set_allocated_destination(::viam::common::v1::PoseInFrame* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.destination_);
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination));
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.MoveSingleComponentRequest.destination)
}

// .viam.common.v1.ResourceName component_name = 3 [json_name = "componentName"];
inline bool MoveSingleComponentRequest::_internal_has_component_name() const {
  return this != internal_default_instance() && _impl_.component_name_ != nullptr;
}
inline bool MoveSingleComponentRequest::has_component_name() const {
  return _internal_has_component_name();
}
inline const ::viam::common::v1::ResourceName& MoveSingleComponentRequest::_internal_component_name() const {
  const ::viam::common::v1::ResourceName* p = _impl_.component_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::ResourceName&>(
      ::viam::common::v1::_ResourceName_default_instance_);
}
inline const ::viam::common::v1::ResourceName& MoveSingleComponentRequest::component_name() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.MoveSingleComponentRequest.component_name)
  return _internal_component_name();
}
inline void MoveSingleComponentRequest::unsafe_arena_set_allocated_component_name(
    ::viam::common::v1::ResourceName* component_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.component_name_);
  }
  _impl_.component_name_ = component_name;
  if (component_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.motion.v1.MoveSingleComponentRequest.component_name)
}
inline ::viam::common::v1::ResourceName* MoveSingleComponentRequest::release_component_name() {
  
  ::viam::common::v1::ResourceName* temp = _impl_.component_name_;
  _impl_.component_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::ResourceName* MoveSingleComponentRequest::unsafe_arena_release_component_name() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.MoveSingleComponentRequest.component_name)
  
  ::viam::common::v1::ResourceName* temp = _impl_.component_name_;
  _impl_.component_name_ = nullptr;
  return temp;
}
inline ::viam::common::v1::ResourceName* MoveSingleComponentRequest::_internal_mutable_component_name() {
  
  if (_impl_.component_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::ResourceName>(GetArenaForAllocation());
    _impl_.component_name_ = p;
  }
  return _impl_.component_name_;
}
inline ::viam::common::v1::ResourceName* MoveSingleComponentRequest::mutable_component_name() {
  ::viam::common::v1::ResourceName* _msg = _internal_mutable_component_name();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.MoveSingleComponentRequest.component_name)
  return _msg;
}
inline void MoveSingleComponentRequest::set_allocated_component_name(::viam::common::v1::ResourceName* component_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.component_name_);
  }
  if (component_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_name));
    if (message_arena != submessage_arena) {
      component_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.component_name_ = component_name;
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.MoveSingleComponentRequest.component_name)
}

// optional .viam.common.v1.WorldState world_state = 4 [json_name = "worldState"];
inline bool MoveSingleComponentRequest::_internal_has_world_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.world_state_ != nullptr);
  return value;
}
inline bool MoveSingleComponentRequest::has_world_state() const {
  return _internal_has_world_state();
}
inline const ::viam::common::v1::WorldState& MoveSingleComponentRequest::_internal_world_state() const {
  const ::viam::common::v1::WorldState* p = _impl_.world_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::WorldState&>(
      ::viam::common::v1::_WorldState_default_instance_);
}
inline const ::viam::common::v1::WorldState& MoveSingleComponentRequest::world_state() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.MoveSingleComponentRequest.world_state)
  return _internal_world_state();
}
inline void MoveSingleComponentRequest::unsafe_arena_set_allocated_world_state(
    ::viam::common::v1::WorldState* world_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.world_state_);
  }
  _impl_.world_state_ = world_state;
  if (world_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.motion.v1.MoveSingleComponentRequest.world_state)
}
inline ::viam::common::v1::WorldState* MoveSingleComponentRequest::release_world_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::common::v1::WorldState* temp = _impl_.world_state_;
  _impl_.world_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::WorldState* MoveSingleComponentRequest::unsafe_arena_release_world_state() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.MoveSingleComponentRequest.world_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::common::v1::WorldState* temp = _impl_.world_state_;
  _impl_.world_state_ = nullptr;
  return temp;
}
inline ::viam::common::v1::WorldState* MoveSingleComponentRequest::_internal_mutable_world_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.world_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::WorldState>(GetArenaForAllocation());
    _impl_.world_state_ = p;
  }
  return _impl_.world_state_;
}
inline ::viam::common::v1::WorldState* MoveSingleComponentRequest::mutable_world_state() {
  ::viam::common::v1::WorldState* _msg = _internal_mutable_world_state();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.MoveSingleComponentRequest.world_state)
  return _msg;
}
inline void MoveSingleComponentRequest::set_allocated_world_state(::viam::common::v1::WorldState* world_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.world_state_);
  }
  if (world_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_state));
    if (message_arena != submessage_arena) {
      world_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.world_state_ = world_state;
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.MoveSingleComponentRequest.world_state)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool MoveSingleComponentRequest::_internal_has_extra() const {
  return this != internal_default_instance() && _impl_.extra_ != nullptr;
}
inline bool MoveSingleComponentRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& MoveSingleComponentRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& MoveSingleComponentRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.MoveSingleComponentRequest.extra)
  return _internal_extra();
}
inline void MoveSingleComponentRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.motion.v1.MoveSingleComponentRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveSingleComponentRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveSingleComponentRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.MoveSingleComponentRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveSingleComponentRequest::_internal_mutable_extra() {
  
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.extra_ = p;
  }
  return _impl_.extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveSingleComponentRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.MoveSingleComponentRequest.extra)
  return _msg;
}
inline void MoveSingleComponentRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.MoveSingleComponentRequest.extra)
}

// -------------------------------------------------------------------

// MoveSingleComponentResponse

// bool success = 1 [json_name = "success"];
inline void MoveSingleComponentResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool MoveSingleComponentResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool MoveSingleComponentResponse::success() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.MoveSingleComponentResponse.success)
  return _internal_success();
}
inline void MoveSingleComponentResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void MoveSingleComponentResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:viam.service.motion.v1.MoveSingleComponentResponse.success)
}

// -------------------------------------------------------------------

// GetPoseRequest

// string name = 1 [json_name = "name"];
inline void GetPoseRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetPoseRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.GetPoseRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPoseRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.motion.v1.GetPoseRequest.name)
}
inline std::string* GetPoseRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.GetPoseRequest.name)
  return _s;
}
inline const std::string& GetPoseRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetPoseRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPoseRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPoseRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.GetPoseRequest.name)
  return _impl_.name_.Release();
}
inline void GetPoseRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.GetPoseRequest.name)
}

// .viam.common.v1.ResourceName component_name = 2 [json_name = "componentName"];
inline bool GetPoseRequest::_internal_has_component_name() const {
  return this != internal_default_instance() && _impl_.component_name_ != nullptr;
}
inline bool GetPoseRequest::has_component_name() const {
  return _internal_has_component_name();
}
inline const ::viam::common::v1::ResourceName& GetPoseRequest::_internal_component_name() const {
  const ::viam::common::v1::ResourceName* p = _impl_.component_name_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::ResourceName&>(
      ::viam::common::v1::_ResourceName_default_instance_);
}
inline const ::viam::common::v1::ResourceName& GetPoseRequest::component_name() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.GetPoseRequest.component_name)
  return _internal_component_name();
}
inline void GetPoseRequest::unsafe_arena_set_allocated_component_name(
    ::viam::common::v1::ResourceName* component_name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.component_name_);
  }
  _impl_.component_name_ = component_name;
  if (component_name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.motion.v1.GetPoseRequest.component_name)
}
inline ::viam::common::v1::ResourceName* GetPoseRequest::release_component_name() {
  
  ::viam::common::v1::ResourceName* temp = _impl_.component_name_;
  _impl_.component_name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::ResourceName* GetPoseRequest::unsafe_arena_release_component_name() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.GetPoseRequest.component_name)
  
  ::viam::common::v1::ResourceName* temp = _impl_.component_name_;
  _impl_.component_name_ = nullptr;
  return temp;
}
inline ::viam::common::v1::ResourceName* GetPoseRequest::_internal_mutable_component_name() {
  
  if (_impl_.component_name_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::ResourceName>(GetArenaForAllocation());
    _impl_.component_name_ = p;
  }
  return _impl_.component_name_;
}
inline ::viam::common::v1::ResourceName* GetPoseRequest::mutable_component_name() {
  ::viam::common::v1::ResourceName* _msg = _internal_mutable_component_name();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.GetPoseRequest.component_name)
  return _msg;
}
inline void GetPoseRequest::set_allocated_component_name(::viam::common::v1::ResourceName* component_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.component_name_);
  }
  if (component_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(component_name));
    if (message_arena != submessage_arena) {
      component_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component_name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.component_name_ = component_name;
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.GetPoseRequest.component_name)
}

// string destination_frame = 3 [json_name = "destinationFrame"];
inline void GetPoseRequest::clear_destination_frame() {
  _impl_.destination_frame_.ClearToEmpty();
}
inline const std::string& GetPoseRequest::destination_frame() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.GetPoseRequest.destination_frame)
  return _internal_destination_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPoseRequest::set_destination_frame(ArgT0&& arg0, ArgT... args) {
 
 _impl_.destination_frame_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.motion.v1.GetPoseRequest.destination_frame)
}
inline std::string* GetPoseRequest::mutable_destination_frame() {
  std::string* _s = _internal_mutable_destination_frame();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.GetPoseRequest.destination_frame)
  return _s;
}
inline const std::string& GetPoseRequest::_internal_destination_frame() const {
  return _impl_.destination_frame_.Get();
}
inline void GetPoseRequest::_internal_set_destination_frame(const std::string& value) {
  
  _impl_.destination_frame_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPoseRequest::_internal_mutable_destination_frame() {
  
  return _impl_.destination_frame_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPoseRequest::release_destination_frame() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.GetPoseRequest.destination_frame)
  return _impl_.destination_frame_.Release();
}
inline void GetPoseRequest::set_allocated_destination_frame(std::string* destination_frame) {
  if (destination_frame != nullptr) {
    
  } else {
    
  }
  _impl_.destination_frame_.SetAllocated(destination_frame, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.destination_frame_.IsDefault()) {
    _impl_.destination_frame_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.GetPoseRequest.destination_frame)
}

// repeated .viam.common.v1.Transform supplemental_transforms = 4 [json_name = "supplementalTransforms"];
inline int GetPoseRequest::_internal_supplemental_transforms_size() const {
  return _impl_.supplemental_transforms_.size();
}
inline int GetPoseRequest::supplemental_transforms_size() const {
  return _internal_supplemental_transforms_size();
}
inline ::viam::common::v1::Transform* GetPoseRequest::mutable_supplemental_transforms(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.GetPoseRequest.supplemental_transforms)
  return _impl_.supplemental_transforms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >*
GetPoseRequest::mutable_supplemental_transforms() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.motion.v1.GetPoseRequest.supplemental_transforms)
  return &_impl_.supplemental_transforms_;
}
inline const ::viam::common::v1::Transform& GetPoseRequest::_internal_supplemental_transforms(int index) const {
  return _impl_.supplemental_transforms_.Get(index);
}
inline const ::viam::common::v1::Transform& GetPoseRequest::supplemental_transforms(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.GetPoseRequest.supplemental_transforms)
  return _internal_supplemental_transforms(index);
}
inline ::viam::common::v1::Transform* GetPoseRequest::_internal_add_supplemental_transforms() {
  return _impl_.supplemental_transforms_.Add();
}
inline ::viam::common::v1::Transform* GetPoseRequest::add_supplemental_transforms() {
  ::viam::common::v1::Transform* _add = _internal_add_supplemental_transforms();
  // @@protoc_insertion_point(field_add:viam.service.motion.v1.GetPoseRequest.supplemental_transforms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >&
GetPoseRequest::supplemental_transforms() const {
  // @@protoc_insertion_point(field_list:viam.service.motion.v1.GetPoseRequest.supplemental_transforms)
  return _impl_.supplemental_transforms_;
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetPoseRequest::_internal_has_extra() const {
  return this != internal_default_instance() && _impl_.extra_ != nullptr;
}
inline bool GetPoseRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetPoseRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetPoseRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.GetPoseRequest.extra)
  return _internal_extra();
}
inline void GetPoseRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.motion.v1.GetPoseRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPoseRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPoseRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.GetPoseRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPoseRequest::_internal_mutable_extra() {
  
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.extra_ = p;
  }
  return _impl_.extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetPoseRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.GetPoseRequest.extra)
  return _msg;
}
inline void GetPoseRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.GetPoseRequest.extra)
}

// -------------------------------------------------------------------

// GetPoseResponse

// .viam.common.v1.PoseInFrame pose = 1 [json_name = "pose"];
inline bool GetPoseResponse::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool GetPoseResponse::has_pose() const {
  return _internal_has_pose();
}
inline const ::viam::common::v1::PoseInFrame& GetPoseResponse::_internal_pose() const {
  const ::viam::common::v1::PoseInFrame* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::PoseInFrame&>(
      ::viam::common::v1::_PoseInFrame_default_instance_);
}
inline const ::viam::common::v1::PoseInFrame& GetPoseResponse::pose() const {
  // @@protoc_insertion_point(field_get:viam.service.motion.v1.GetPoseResponse.pose)
  return _internal_pose();
}
inline void GetPoseResponse::unsafe_arena_set_allocated_pose(
    ::viam::common::v1::PoseInFrame* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.motion.v1.GetPoseResponse.pose)
}
inline ::viam::common::v1::PoseInFrame* GetPoseResponse::release_pose() {
  
  ::viam::common::v1::PoseInFrame* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::PoseInFrame* GetPoseResponse::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:viam.service.motion.v1.GetPoseResponse.pose)
  
  ::viam::common::v1::PoseInFrame* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::viam::common::v1::PoseInFrame* GetPoseResponse::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::PoseInFrame>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::viam::common::v1::PoseInFrame* GetPoseResponse::mutable_pose() {
  ::viam::common::v1::PoseInFrame* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:viam.service.motion.v1.GetPoseResponse.pose)
  return _msg;
}
inline void GetPoseResponse::set_allocated_pose(::viam::common::v1::PoseInFrame* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:viam.service.motion.v1.GetPoseResponse.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace motion
}  // namespace service
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2fmotion_2fv1_2fmotion_2eproto
