// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/sensors/v1/sensors.proto

#include "service/sensors/v1/sensors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace service {
namespace sensors {
namespace v1 {
PROTOBUF_CONSTEXPR GetSensorsRequest::GetSensorsRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct GetSensorsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSensorsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSensorsRequestDefaultTypeInternal() {}
  union {
    GetSensorsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSensorsRequestDefaultTypeInternal _GetSensorsRequest_default_instance_;
PROTOBUF_CONSTEXPR GetSensorsResponse::GetSensorsResponse(
    ::_pbi::ConstantInitialized)
  : sensor_names_(){}
struct GetSensorsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSensorsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSensorsResponseDefaultTypeInternal() {}
  union {
    GetSensorsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSensorsResponseDefaultTypeInternal _GetSensorsResponse_default_instance_;
PROTOBUF_CONSTEXPR GetReadingsRequest::GetReadingsRequest(
    ::_pbi::ConstantInitialized)
  : sensor_names_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extra_(nullptr){}
struct GetReadingsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetReadingsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetReadingsRequestDefaultTypeInternal() {}
  union {
    GetReadingsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetReadingsRequestDefaultTypeInternal _GetReadingsRequest_default_instance_;
PROTOBUF_CONSTEXPR Readings_ReadingsEntry_DoNotUse::Readings_ReadingsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct Readings_ReadingsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Readings_ReadingsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Readings_ReadingsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Readings_ReadingsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Readings_ReadingsEntry_DoNotUseDefaultTypeInternal _Readings_ReadingsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Readings::Readings(
    ::_pbi::ConstantInitialized)
  : readings_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(nullptr){}
struct ReadingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReadingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReadingsDefaultTypeInternal() {}
  union {
    Readings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReadingsDefaultTypeInternal _Readings_default_instance_;
PROTOBUF_CONSTEXPR GetReadingsResponse::GetReadingsResponse(
    ::_pbi::ConstantInitialized)
  : readings_(){}
struct GetReadingsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetReadingsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetReadingsResponseDefaultTypeInternal() {}
  union {
    GetReadingsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetReadingsResponseDefaultTypeInternal _GetReadingsResponse_default_instance_;
}  // namespace v1
}  // namespace sensors
}  // namespace service
}  // namespace viam
static ::_pb::Metadata file_level_metadata_service_2fsensors_2fv1_2fsensors_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_service_2fsensors_2fv1_2fsensors_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_service_2fsensors_2fv1_2fsensors_2eproto = nullptr;

const uint32_t TableStruct_service_2fsensors_2fv1_2fsensors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::GetSensorsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::GetSensorsRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::GetSensorsRequest, extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::GetSensorsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::GetSensorsResponse, sensor_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::GetReadingsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::GetReadingsRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::GetReadingsRequest, sensor_names_),
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::GetReadingsRequest, extra_),
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::Readings_ReadingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::Readings_ReadingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::Readings_ReadingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::Readings_ReadingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::Readings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::Readings, name_),
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::Readings, readings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::GetReadingsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::service::sensors::v1::GetReadingsResponse, readings_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::service::sensors::v1::GetSensorsRequest)},
  { 8, -1, -1, sizeof(::viam::service::sensors::v1::GetSensorsResponse)},
  { 15, -1, -1, sizeof(::viam::service::sensors::v1::GetReadingsRequest)},
  { 24, 32, -1, sizeof(::viam::service::sensors::v1::Readings_ReadingsEntry_DoNotUse)},
  { 34, -1, -1, sizeof(::viam::service::sensors::v1::Readings)},
  { 42, -1, -1, sizeof(::viam::service::sensors::v1::GetReadingsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::service::sensors::v1::_GetSensorsRequest_default_instance_._instance,
  &::viam::service::sensors::v1::_GetSensorsResponse_default_instance_._instance,
  &::viam::service::sensors::v1::_GetReadingsRequest_default_instance_._instance,
  &::viam::service::sensors::v1::_Readings_ReadingsEntry_DoNotUse_default_instance_._instance,
  &::viam::service::sensors::v1::_Readings_default_instance_._instance,
  &::viam::service::sensors::v1::_GetReadingsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_service_2fsensors_2fv1_2fsensors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n service/sensors/v1/sensors.proto\022\027viam"
  ".service.sensors.v1\032\026common/v1/common.pr"
  "oto\032\034google/api/annotations.proto\032\034googl"
  "e/protobuf/struct.proto\"V\n\021GetSensorsReq"
  "uest\022\022\n\004name\030\001 \001(\tR\004name\022-\n\005extra\030c \001(\0132"
  "\027.google.protobuf.StructR\005extra\"U\n\022GetSe"
  "nsorsResponse\022\?\n\014sensor_names\030\001 \003(\0132\034.vi"
  "am.common.v1.ResourceNameR\013sensorNames\"\230"
  "\001\n\022GetReadingsRequest\022\022\n\004name\030\001 \001(\tR\004nam"
  "e\022\?\n\014sensor_names\030\002 \003(\0132\034.viam.common.v1"
  ".ResourceNameR\013sensorNames\022-\n\005extra\030c \001("
  "\0132\027.google.protobuf.StructR\005extra\"\336\001\n\010Re"
  "adings\0220\n\004name\030\001 \001(\0132\034.viam.common.v1.Re"
  "sourceNameR\004name\022K\n\010readings\030\002 \003(\0132/.via"
  "m.service.sensors.v1.Readings.ReadingsEn"
  "tryR\010readings\032S\n\rReadingsEntry\022\020\n\003key\030\001 "
  "\001(\tR\003key\022,\n\005value\030\002 \001(\0132\026.google.protobu"
  "f.ValueR\005value:\0028\001\"T\n\023GetReadingsRespons"
  "e\022=\n\010readings\030\001 \003(\0132!.viam.service.senso"
  "rs.v1.ReadingsR\010readings2\321\003\n\016SensorsServ"
  "ice\022\222\001\n\nGetSensors\022*.viam.service.sensor"
  "s.v1.GetSensorsRequest\032+.viam.service.se"
  "nsors.v1.GetSensorsResponse\"+\202\323\344\223\002%\022#/vi"
  "am/api/v1/service/{name}/sensors\022\236\001\n\013Get"
  "Readings\022+.viam.service.sensors.v1.GetRe"
  "adingsRequest\032,.viam.service.sensors.v1."
  "GetReadingsResponse\"4\202\323\344\223\002.\022,/viam/api/v"
  "1/service/sensors/{name}/readings\022\210\001\n\tDo"
  "Command\022 .viam.common.v1.DoCommandReques"
  "t\032!.viam.common.v1.DoCommandResponse\"6\202\323"
  "\344\223\0020\"./viam/api/v1/service/sensors/{name"
  "}/do_commandBA\n\033com.viam.service.sensors"
  ".v1Z\"go.viam.com/api/service/sensors/v1b"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_deps[3] = {
  &::descriptor_table_common_2fv1_2fcommon_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto = {
    false, false, 1327, descriptor_table_protodef_service_2fsensors_2fv1_2fsensors_2eproto,
    "service/sensors/v1/sensors.proto",
    &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_once, descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_deps, 3, 6,
    schemas, file_default_instances, TableStruct_service_2fsensors_2fv1_2fsensors_2eproto::offsets,
    file_level_metadata_service_2fsensors_2fv1_2fsensors_2eproto, file_level_enum_descriptors_service_2fsensors_2fv1_2fsensors_2eproto,
    file_level_service_descriptors_service_2fsensors_2fv1_2fsensors_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_getter() {
  return &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_service_2fsensors_2fv1_2fsensors_2eproto(&descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto);
namespace viam {
namespace service {
namespace sensors {
namespace v1 {

// ===================================================================

class GetSensorsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetSensorsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetSensorsRequest::_Internal::extra(const GetSensorsRequest* msg) {
  return *msg->extra_;
}
void GetSensorsRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetSensorsRequest::GetSensorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.sensors.v1.GetSensorsRequest)
}
GetSensorsRequest::GetSensorsRequest(const GetSensorsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.sensors.v1.GetSensorsRequest)
}

inline void GetSensorsRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

GetSensorsRequest::~GetSensorsRequest() {
  // @@protoc_insertion_point(destructor:viam.service.sensors.v1.GetSensorsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSensorsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetSensorsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSensorsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.sensors.v1.GetSensorsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSensorsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.sensors.v1.GetSensorsRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSensorsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.sensors.v1.GetSensorsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.sensors.v1.GetSensorsRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.sensors.v1.GetSensorsRequest)
  return target;
}

size_t GetSensorsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.sensors.v1.GetSensorsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSensorsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSensorsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSensorsRequest::GetClassData() const { return &_class_data_; }

void GetSensorsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSensorsRequest *>(to)->MergeFrom(
      static_cast<const GetSensorsRequest &>(from));
}


void GetSensorsRequest::MergeFrom(const GetSensorsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.sensors.v1.GetSensorsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSensorsRequest::CopyFrom(const GetSensorsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.sensors.v1.GetSensorsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSensorsRequest::IsInitialized() const {
  return true;
}

void GetSensorsRequest::InternalSwap(GetSensorsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSensorsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_getter, &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_once,
      file_level_metadata_service_2fsensors_2fv1_2fsensors_2eproto[0]);
}

// ===================================================================

class GetSensorsResponse::_Internal {
 public:
};

void GetSensorsResponse::clear_sensor_names() {
  sensor_names_.Clear();
}
GetSensorsResponse::GetSensorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sensor_names_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.sensors.v1.GetSensorsResponse)
}
GetSensorsResponse::GetSensorsResponse(const GetSensorsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sensor_names_(from.sensor_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.sensors.v1.GetSensorsResponse)
}

inline void GetSensorsResponse::SharedCtor() {
}

GetSensorsResponse::~GetSensorsResponse() {
  // @@protoc_insertion_point(destructor:viam.service.sensors.v1.GetSensorsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSensorsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetSensorsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSensorsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.sensors.v1.GetSensorsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSensorsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.common.v1.ResourceName sensor_names = 1 [json_name = "sensorNames"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSensorsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.sensors.v1.GetSensorsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.common.v1.ResourceName sensor_names = 1 [json_name = "sensorNames"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor_names(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.sensors.v1.GetSensorsResponse)
  return target;
}

size_t GetSensorsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.sensors.v1.GetSensorsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.common.v1.ResourceName sensor_names = 1 [json_name = "sensorNames"];
  total_size += 1UL * this->_internal_sensor_names_size();
  for (const auto& msg : this->sensor_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSensorsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSensorsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSensorsResponse::GetClassData() const { return &_class_data_; }

void GetSensorsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSensorsResponse *>(to)->MergeFrom(
      static_cast<const GetSensorsResponse &>(from));
}


void GetSensorsResponse::MergeFrom(const GetSensorsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.sensors.v1.GetSensorsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_names_.MergeFrom(from.sensor_names_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSensorsResponse::CopyFrom(const GetSensorsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.sensors.v1.GetSensorsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSensorsResponse::IsInitialized() const {
  return true;
}

void GetSensorsResponse::InternalSwap(GetSensorsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sensor_names_.InternalSwap(&other->sensor_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSensorsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_getter, &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_once,
      file_level_metadata_service_2fsensors_2fv1_2fsensors_2eproto[1]);
}

// ===================================================================

class GetReadingsRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const GetReadingsRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
GetReadingsRequest::_Internal::extra(const GetReadingsRequest* msg) {
  return *msg->extra_;
}
void GetReadingsRequest::clear_sensor_names() {
  sensor_names_.Clear();
}
void GetReadingsRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
}
GetReadingsRequest::GetReadingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  sensor_names_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.sensors.v1.GetReadingsRequest)
}
GetReadingsRequest::GetReadingsRequest(const GetReadingsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sensor_names_(from.sensor_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.extra_);
  } else {
    extra_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.sensors.v1.GetReadingsRequest)
}

inline void GetReadingsRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extra_ = nullptr;
}

GetReadingsRequest::~GetReadingsRequest() {
  // @@protoc_insertion_point(destructor:viam.service.sensors.v1.GetReadingsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetReadingsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete extra_;
}

void GetReadingsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetReadingsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.sensors.v1.GetReadingsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_names_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && extra_ != nullptr) {
    delete extra_;
  }
  extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReadingsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.service.sensors.v1.GetReadingsRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.common.v1.ResourceName sensor_names = 2 [json_name = "sensorNames"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sensor_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetReadingsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.sensors.v1.GetReadingsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.service.sensors.v1.GetReadingsRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .viam.common.v1.ResourceName sensor_names = 2 [json_name = "sensorNames"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sensor_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_sensor_names(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.sensors.v1.GetReadingsRequest)
  return target;
}

size_t GetReadingsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.sensors.v1.GetReadingsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.common.v1.ResourceName sensor_names = 2 [json_name = "sensorNames"];
  total_size += 1UL * this->_internal_sensor_names_size();
  for (const auto& msg : this->sensor_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReadingsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetReadingsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReadingsRequest::GetClassData() const { return &_class_data_; }

void GetReadingsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetReadingsRequest *>(to)->MergeFrom(
      static_cast<const GetReadingsRequest &>(from));
}


void GetReadingsRequest::MergeFrom(const GetReadingsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.sensors.v1.GetReadingsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_names_.MergeFrom(from.sensor_names_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_extra()) {
    _internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_extra());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReadingsRequest::CopyFrom(const GetReadingsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.sensors.v1.GetReadingsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReadingsRequest::IsInitialized() const {
  return true;
}

void GetReadingsRequest::InternalSwap(GetReadingsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sensor_names_.InternalSwap(&other->sensor_names_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(extra_, other->extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReadingsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_getter, &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_once,
      file_level_metadata_service_2fsensors_2fv1_2fsensors_2eproto[2]);
}

// ===================================================================

Readings_ReadingsEntry_DoNotUse::Readings_ReadingsEntry_DoNotUse() {}
Readings_ReadingsEntry_DoNotUse::Readings_ReadingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Readings_ReadingsEntry_DoNotUse::MergeFrom(const Readings_ReadingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Readings_ReadingsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_getter, &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_once,
      file_level_metadata_service_2fsensors_2fv1_2fsensors_2eproto[3]);
}

// ===================================================================

class Readings::_Internal {
 public:
  static const ::viam::common::v1::ResourceName& name(const Readings* msg);
};

const ::viam::common::v1::ResourceName&
Readings::_Internal::name(const Readings* msg) {
  return *msg->name_;
}
void Readings::clear_name() {
  if (GetArenaForAllocation() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
}
void Readings::clear_readings() {
  readings_.Clear();
}
Readings::Readings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  readings_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Readings::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:viam.service.sensors.v1.Readings)
}
Readings::Readings(const Readings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  readings_.MergeFrom(from.readings_);
  if (from._internal_has_name()) {
    name_ = new ::viam::common::v1::ResourceName(*from.name_);
  } else {
    name_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.service.sensors.v1.Readings)
}

inline void Readings::SharedCtor() {
name_ = nullptr;
}

Readings::~Readings() {
  // @@protoc_insertion_point(destructor:viam.service.sensors.v1.Readings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Readings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  readings_.Destruct();
  if (this != internal_default_instance()) delete name_;
}

void Readings::ArenaDtor(void* object) {
  Readings* _this = reinterpret_cast< Readings* >(object);
  _this->readings_.Destruct();
}
void Readings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Readings::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.sensors.v1.Readings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readings_.Clear();
  if (GetArenaForAllocation() == nullptr && name_ != nullptr) {
    delete name_;
  }
  name_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Readings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.common.v1.ResourceName name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_name(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Value> readings = 2 [json_name = "readings"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&readings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Readings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.sensors.v1.Readings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.common.v1.ResourceName name = 1 [json_name = "name"];
  if (this->_internal_has_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::name(this),
        _Internal::name(this).GetCachedSize(), target, stream);
  }

  // map<string, .google.protobuf.Value> readings = 2 [json_name = "readings"];
  if (!this->_internal_readings().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Value>;
    using WireHelper = Readings_ReadingsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_readings();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "viam.service.sensors.v1.Readings.ReadingsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.sensors.v1.Readings)
  return target;
}

size_t Readings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.sensors.v1.Readings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Value> readings = 2 [json_name = "readings"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_readings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Value >::const_iterator
      it = this->_internal_readings().begin();
      it != this->_internal_readings().end(); ++it) {
    total_size += Readings_ReadingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .viam.common.v1.ResourceName name = 1 [json_name = "name"];
  if (this->_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Readings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Readings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Readings::GetClassData() const { return &_class_data_; }

void Readings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Readings *>(to)->MergeFrom(
      static_cast<const Readings &>(from));
}


void Readings::MergeFrom(const Readings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.sensors.v1.Readings)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  readings_.MergeFrom(from.readings_);
  if (from._internal_has_name()) {
    _internal_mutable_name()->::viam::common::v1::ResourceName::MergeFrom(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Readings::CopyFrom(const Readings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.sensors.v1.Readings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Readings::IsInitialized() const {
  return true;
}

void Readings::InternalSwap(Readings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  readings_.InternalSwap(&other->readings_);
  swap(name_, other->name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Readings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_getter, &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_once,
      file_level_metadata_service_2fsensors_2fv1_2fsensors_2eproto[4]);
}

// ===================================================================

class GetReadingsResponse::_Internal {
 public:
};

GetReadingsResponse::GetReadingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  readings_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.service.sensors.v1.GetReadingsResponse)
}
GetReadingsResponse::GetReadingsResponse(const GetReadingsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      readings_(from.readings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.service.sensors.v1.GetReadingsResponse)
}

inline void GetReadingsResponse::SharedCtor() {
}

GetReadingsResponse::~GetReadingsResponse() {
  // @@protoc_insertion_point(destructor:viam.service.sensors.v1.GetReadingsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetReadingsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetReadingsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetReadingsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.service.sensors.v1.GetReadingsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetReadingsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.service.sensors.v1.Readings readings = 1 [json_name = "readings"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_readings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetReadingsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.service.sensors.v1.GetReadingsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.service.sensors.v1.Readings readings = 1 [json_name = "readings"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_readings_size()); i < n; i++) {
    const auto& repfield = this->_internal_readings(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.service.sensors.v1.GetReadingsResponse)
  return target;
}

size_t GetReadingsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.service.sensors.v1.GetReadingsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.service.sensors.v1.Readings readings = 1 [json_name = "readings"];
  total_size += 1UL * this->_internal_readings_size();
  for (const auto& msg : this->readings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetReadingsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetReadingsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetReadingsResponse::GetClassData() const { return &_class_data_; }

void GetReadingsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetReadingsResponse *>(to)->MergeFrom(
      static_cast<const GetReadingsResponse &>(from));
}


void GetReadingsResponse::MergeFrom(const GetReadingsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.service.sensors.v1.GetReadingsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  readings_.MergeFrom(from.readings_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetReadingsResponse::CopyFrom(const GetReadingsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.service.sensors.v1.GetReadingsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReadingsResponse::IsInitialized() const {
  return true;
}

void GetReadingsResponse::InternalSwap(GetReadingsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  readings_.InternalSwap(&other->readings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetReadingsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_getter, &descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto_once,
      file_level_metadata_service_2fsensors_2fv1_2fsensors_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace sensors
}  // namespace service
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::service::sensors::v1::GetSensorsRequest*
Arena::CreateMaybeMessage< ::viam::service::sensors::v1::GetSensorsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::sensors::v1::GetSensorsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::sensors::v1::GetSensorsResponse*
Arena::CreateMaybeMessage< ::viam::service::sensors::v1::GetSensorsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::sensors::v1::GetSensorsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::sensors::v1::GetReadingsRequest*
Arena::CreateMaybeMessage< ::viam::service::sensors::v1::GetReadingsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::sensors::v1::GetReadingsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::sensors::v1::Readings_ReadingsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::viam::service::sensors::v1::Readings_ReadingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::sensors::v1::Readings_ReadingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::sensors::v1::Readings*
Arena::CreateMaybeMessage< ::viam::service::sensors::v1::Readings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::sensors::v1::Readings >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::service::sensors::v1::GetReadingsResponse*
Arena::CreateMaybeMessage< ::viam::service::sensors::v1::GetReadingsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::service::sensors::v1::GetReadingsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
