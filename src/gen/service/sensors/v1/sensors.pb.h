// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/sensors/v1/sensors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2fsensors_2fv1_2fsensors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2fsensors_2fv1_2fsensors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2fsensors_2fv1_2fsensors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2fsensors_2fv1_2fsensors_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2fsensors_2fv1_2fsensors_2eproto;
namespace viam {
namespace service {
namespace sensors {
namespace v1 {
class GetReadingsRequest;
struct GetReadingsRequestDefaultTypeInternal;
extern GetReadingsRequestDefaultTypeInternal _GetReadingsRequest_default_instance_;
class GetReadingsResponse;
struct GetReadingsResponseDefaultTypeInternal;
extern GetReadingsResponseDefaultTypeInternal _GetReadingsResponse_default_instance_;
class GetSensorsRequest;
struct GetSensorsRequestDefaultTypeInternal;
extern GetSensorsRequestDefaultTypeInternal _GetSensorsRequest_default_instance_;
class GetSensorsResponse;
struct GetSensorsResponseDefaultTypeInternal;
extern GetSensorsResponseDefaultTypeInternal _GetSensorsResponse_default_instance_;
class Readings;
struct ReadingsDefaultTypeInternal;
extern ReadingsDefaultTypeInternal _Readings_default_instance_;
class Readings_ReadingsEntry_DoNotUse;
struct Readings_ReadingsEntry_DoNotUseDefaultTypeInternal;
extern Readings_ReadingsEntry_DoNotUseDefaultTypeInternal _Readings_ReadingsEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace sensors
}  // namespace service
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::service::sensors::v1::GetReadingsRequest* Arena::CreateMaybeMessage<::viam::service::sensors::v1::GetReadingsRequest>(Arena*);
template<> ::viam::service::sensors::v1::GetReadingsResponse* Arena::CreateMaybeMessage<::viam::service::sensors::v1::GetReadingsResponse>(Arena*);
template<> ::viam::service::sensors::v1::GetSensorsRequest* Arena::CreateMaybeMessage<::viam::service::sensors::v1::GetSensorsRequest>(Arena*);
template<> ::viam::service::sensors::v1::GetSensorsResponse* Arena::CreateMaybeMessage<::viam::service::sensors::v1::GetSensorsResponse>(Arena*);
template<> ::viam::service::sensors::v1::Readings* Arena::CreateMaybeMessage<::viam::service::sensors::v1::Readings>(Arena*);
template<> ::viam::service::sensors::v1::Readings_ReadingsEntry_DoNotUse* Arena::CreateMaybeMessage<::viam::service::sensors::v1::Readings_ReadingsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace service {
namespace sensors {
namespace v1 {

// ===================================================================

class GetSensorsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.sensors.v1.GetSensorsRequest) */ {
 public:
  inline GetSensorsRequest() : GetSensorsRequest(nullptr) {}
  ~GetSensorsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSensorsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSensorsRequest(const GetSensorsRequest& from);
  GetSensorsRequest(GetSensorsRequest&& from) noexcept
    : GetSensorsRequest() {
    *this = ::std::move(from);
  }

  inline GetSensorsRequest& operator=(const GetSensorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSensorsRequest& operator=(GetSensorsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSensorsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSensorsRequest* internal_default_instance() {
    return reinterpret_cast<const GetSensorsRequest*>(
               &_GetSensorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetSensorsRequest& a, GetSensorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSensorsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSensorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSensorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSensorsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSensorsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSensorsRequest& from) {
    GetSensorsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSensorsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.sensors.v1.GetSensorsRequest";
  }
  protected:
  explicit GetSensorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.service.sensors.v1.GetSensorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fsensors_2fv1_2fsensors_2eproto;
};
// -------------------------------------------------------------------

class GetSensorsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.sensors.v1.GetSensorsResponse) */ {
 public:
  inline GetSensorsResponse() : GetSensorsResponse(nullptr) {}
  ~GetSensorsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSensorsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSensorsResponse(const GetSensorsResponse& from);
  GetSensorsResponse(GetSensorsResponse&& from) noexcept
    : GetSensorsResponse() {
    *this = ::std::move(from);
  }

  inline GetSensorsResponse& operator=(const GetSensorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSensorsResponse& operator=(GetSensorsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSensorsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSensorsResponse* internal_default_instance() {
    return reinterpret_cast<const GetSensorsResponse*>(
               &_GetSensorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetSensorsResponse& a, GetSensorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSensorsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSensorsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSensorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSensorsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSensorsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSensorsResponse& from) {
    GetSensorsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSensorsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.sensors.v1.GetSensorsResponse";
  }
  protected:
  explicit GetSensorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorNamesFieldNumber = 1,
  };
  // repeated .viam.common.v1.ResourceName sensor_names = 1 [json_name = "sensorNames"];
  int sensor_names_size() const;
  private:
  int _internal_sensor_names_size() const;
  public:
  void clear_sensor_names();
  ::viam::common::v1::ResourceName* mutable_sensor_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
      mutable_sensor_names();
  private:
  const ::viam::common::v1::ResourceName& _internal_sensor_names(int index) const;
  ::viam::common::v1::ResourceName* _internal_add_sensor_names();
  public:
  const ::viam::common::v1::ResourceName& sensor_names(int index) const;
  ::viam::common::v1::ResourceName* add_sensor_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
      sensor_names() const;

  // @@protoc_insertion_point(class_scope:viam.service.sensors.v1.GetSensorsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName > sensor_names_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fsensors_2fv1_2fsensors_2eproto;
};
// -------------------------------------------------------------------

class GetReadingsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.sensors.v1.GetReadingsRequest) */ {
 public:
  inline GetReadingsRequest() : GetReadingsRequest(nullptr) {}
  ~GetReadingsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetReadingsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReadingsRequest(const GetReadingsRequest& from);
  GetReadingsRequest(GetReadingsRequest&& from) noexcept
    : GetReadingsRequest() {
    *this = ::std::move(from);
  }

  inline GetReadingsRequest& operator=(const GetReadingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReadingsRequest& operator=(GetReadingsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReadingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReadingsRequest* internal_default_instance() {
    return reinterpret_cast<const GetReadingsRequest*>(
               &_GetReadingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetReadingsRequest& a, GetReadingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReadingsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReadingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReadingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReadingsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetReadingsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetReadingsRequest& from) {
    GetReadingsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReadingsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.sensors.v1.GetReadingsRequest";
  }
  protected:
  explicit GetReadingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorNamesFieldNumber = 2,
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // repeated .viam.common.v1.ResourceName sensor_names = 2 [json_name = "sensorNames"];
  int sensor_names_size() const;
  private:
  int _internal_sensor_names_size() const;
  public:
  void clear_sensor_names();
  ::viam::common::v1::ResourceName* mutable_sensor_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
      mutable_sensor_names();
  private:
  const ::viam::common::v1::ResourceName& _internal_sensor_names(int index) const;
  ::viam::common::v1::ResourceName* _internal_add_sensor_names();
  public:
  const ::viam::common::v1::ResourceName& sensor_names(int index) const;
  ::viam::common::v1::ResourceName* add_sensor_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
      sensor_names() const;

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.service.sensors.v1.GetReadingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName > sensor_names_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fsensors_2fv1_2fsensors_2eproto;
};
// -------------------------------------------------------------------

class Readings_ReadingsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Readings_ReadingsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Readings_ReadingsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::Value,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Readings_ReadingsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Readings_ReadingsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Readings_ReadingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Readings_ReadingsEntry_DoNotUse& other);
  static const Readings_ReadingsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Readings_ReadingsEntry_DoNotUse*>(&_Readings_ReadingsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "viam.service.sensors.v1.Readings.ReadingsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_service_2fsensors_2fv1_2fsensors_2eproto;
};

// -------------------------------------------------------------------

class Readings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.sensors.v1.Readings) */ {
 public:
  inline Readings() : Readings(nullptr) {}
  ~Readings() override;
  explicit PROTOBUF_CONSTEXPR Readings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Readings(const Readings& from);
  Readings(Readings&& from) noexcept
    : Readings() {
    *this = ::std::move(from);
  }

  inline Readings& operator=(const Readings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Readings& operator=(Readings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Readings& default_instance() {
    return *internal_default_instance();
  }
  static inline const Readings* internal_default_instance() {
    return reinterpret_cast<const Readings*>(
               &_Readings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Readings& a, Readings& b) {
    a.Swap(&b);
  }
  inline void Swap(Readings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Readings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Readings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Readings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Readings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Readings& from) {
    Readings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Readings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.sensors.v1.Readings";
  }
  protected:
  explicit Readings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kReadingsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, .google.protobuf.Value> readings = 2 [json_name = "readings"];
  int readings_size() const;
  private:
  int _internal_readings_size() const;
  public:
  void clear_readings();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Value >&
      _internal_readings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Value >*
      _internal_mutable_readings();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Value >&
      readings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Value >*
      mutable_readings();

  // .viam.common.v1.ResourceName name = 1 [json_name = "name"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::viam::common::v1::ResourceName& name() const;
  PROTOBUF_NODISCARD ::viam::common::v1::ResourceName* release_name();
  ::viam::common::v1::ResourceName* mutable_name();
  void set_allocated_name(::viam::common::v1::ResourceName* name);
  private:
  const ::viam::common::v1::ResourceName& _internal_name() const;
  ::viam::common::v1::ResourceName* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::viam::common::v1::ResourceName* name);
  ::viam::common::v1::ResourceName* unsafe_arena_release_name();

  // @@protoc_insertion_point(class_scope:viam.service.sensors.v1.Readings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Readings_ReadingsEntry_DoNotUse,
        std::string, ::PROTOBUF_NAMESPACE_ID::Value,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> readings_;
    ::viam::common::v1::ResourceName* name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fsensors_2fv1_2fsensors_2eproto;
};
// -------------------------------------------------------------------

class GetReadingsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.sensors.v1.GetReadingsResponse) */ {
 public:
  inline GetReadingsResponse() : GetReadingsResponse(nullptr) {}
  ~GetReadingsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetReadingsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetReadingsResponse(const GetReadingsResponse& from);
  GetReadingsResponse(GetReadingsResponse&& from) noexcept
    : GetReadingsResponse() {
    *this = ::std::move(from);
  }

  inline GetReadingsResponse& operator=(const GetReadingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReadingsResponse& operator=(GetReadingsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetReadingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetReadingsResponse* internal_default_instance() {
    return reinterpret_cast<const GetReadingsResponse*>(
               &_GetReadingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetReadingsResponse& a, GetReadingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReadingsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReadingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetReadingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetReadingsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetReadingsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetReadingsResponse& from) {
    GetReadingsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReadingsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.sensors.v1.GetReadingsResponse";
  }
  protected:
  explicit GetReadingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadingsFieldNumber = 1,
  };
  // repeated .viam.service.sensors.v1.Readings readings = 1 [json_name = "readings"];
  int readings_size() const;
  private:
  int _internal_readings_size() const;
  public:
  void clear_readings();
  ::viam::service::sensors::v1::Readings* mutable_readings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::sensors::v1::Readings >*
      mutable_readings();
  private:
  const ::viam::service::sensors::v1::Readings& _internal_readings(int index) const;
  ::viam::service::sensors::v1::Readings* _internal_add_readings();
  public:
  const ::viam::service::sensors::v1::Readings& readings(int index) const;
  ::viam::service::sensors::v1::Readings* add_readings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::sensors::v1::Readings >&
      readings() const;

  // @@protoc_insertion_point(class_scope:viam.service.sensors.v1.GetReadingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::sensors::v1::Readings > readings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_service_2fsensors_2fv1_2fsensors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetSensorsRequest

// string name = 1 [json_name = "name"];
inline void GetSensorsRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetSensorsRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.sensors.v1.GetSensorsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSensorsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.sensors.v1.GetSensorsRequest.name)
}
inline std::string* GetSensorsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.sensors.v1.GetSensorsRequest.name)
  return _s;
}
inline const std::string& GetSensorsRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetSensorsRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSensorsRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSensorsRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.sensors.v1.GetSensorsRequest.name)
  return _impl_.name_.Release();
}
inline void GetSensorsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.sensors.v1.GetSensorsRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetSensorsRequest::_internal_has_extra() const {
  return this != internal_default_instance() && _impl_.extra_ != nullptr;
}
inline bool GetSensorsRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetSensorsRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetSensorsRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.sensors.v1.GetSensorsRequest.extra)
  return _internal_extra();
}
inline void GetSensorsRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.sensors.v1.GetSensorsRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetSensorsRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetSensorsRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.sensors.v1.GetSensorsRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetSensorsRequest::_internal_mutable_extra() {
  
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.extra_ = p;
  }
  return _impl_.extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetSensorsRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.sensors.v1.GetSensorsRequest.extra)
  return _msg;
}
inline void GetSensorsRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.sensors.v1.GetSensorsRequest.extra)
}

// -------------------------------------------------------------------

// GetSensorsResponse

// repeated .viam.common.v1.ResourceName sensor_names = 1 [json_name = "sensorNames"];
inline int GetSensorsResponse::_internal_sensor_names_size() const {
  return _impl_.sensor_names_.size();
}
inline int GetSensorsResponse::sensor_names_size() const {
  return _internal_sensor_names_size();
}
inline ::viam::common::v1::ResourceName* GetSensorsResponse::mutable_sensor_names(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.sensors.v1.GetSensorsResponse.sensor_names)
  return _impl_.sensor_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
GetSensorsResponse::mutable_sensor_names() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.sensors.v1.GetSensorsResponse.sensor_names)
  return &_impl_.sensor_names_;
}
inline const ::viam::common::v1::ResourceName& GetSensorsResponse::_internal_sensor_names(int index) const {
  return _impl_.sensor_names_.Get(index);
}
inline const ::viam::common::v1::ResourceName& GetSensorsResponse::sensor_names(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.sensors.v1.GetSensorsResponse.sensor_names)
  return _internal_sensor_names(index);
}
inline ::viam::common::v1::ResourceName* GetSensorsResponse::_internal_add_sensor_names() {
  return _impl_.sensor_names_.Add();
}
inline ::viam::common::v1::ResourceName* GetSensorsResponse::add_sensor_names() {
  ::viam::common::v1::ResourceName* _add = _internal_add_sensor_names();
  // @@protoc_insertion_point(field_add:viam.service.sensors.v1.GetSensorsResponse.sensor_names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
GetSensorsResponse::sensor_names() const {
  // @@protoc_insertion_point(field_list:viam.service.sensors.v1.GetSensorsResponse.sensor_names)
  return _impl_.sensor_names_;
}

// -------------------------------------------------------------------

// GetReadingsRequest

// string name = 1 [json_name = "name"];
inline void GetReadingsRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetReadingsRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.sensors.v1.GetReadingsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetReadingsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.sensors.v1.GetReadingsRequest.name)
}
inline std::string* GetReadingsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.sensors.v1.GetReadingsRequest.name)
  return _s;
}
inline const std::string& GetReadingsRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetReadingsRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetReadingsRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetReadingsRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.sensors.v1.GetReadingsRequest.name)
  return _impl_.name_.Release();
}
inline void GetReadingsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.sensors.v1.GetReadingsRequest.name)
}

// repeated .viam.common.v1.ResourceName sensor_names = 2 [json_name = "sensorNames"];
inline int GetReadingsRequest::_internal_sensor_names_size() const {
  return _impl_.sensor_names_.size();
}
inline int GetReadingsRequest::sensor_names_size() const {
  return _internal_sensor_names_size();
}
inline ::viam::common::v1::ResourceName* GetReadingsRequest::mutable_sensor_names(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.sensors.v1.GetReadingsRequest.sensor_names)
  return _impl_.sensor_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
GetReadingsRequest::mutable_sensor_names() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.sensors.v1.GetReadingsRequest.sensor_names)
  return &_impl_.sensor_names_;
}
inline const ::viam::common::v1::ResourceName& GetReadingsRequest::_internal_sensor_names(int index) const {
  return _impl_.sensor_names_.Get(index);
}
inline const ::viam::common::v1::ResourceName& GetReadingsRequest::sensor_names(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.sensors.v1.GetReadingsRequest.sensor_names)
  return _internal_sensor_names(index);
}
inline ::viam::common::v1::ResourceName* GetReadingsRequest::_internal_add_sensor_names() {
  return _impl_.sensor_names_.Add();
}
inline ::viam::common::v1::ResourceName* GetReadingsRequest::add_sensor_names() {
  ::viam::common::v1::ResourceName* _add = _internal_add_sensor_names();
  // @@protoc_insertion_point(field_add:viam.service.sensors.v1.GetReadingsRequest.sensor_names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
GetReadingsRequest::sensor_names() const {
  // @@protoc_insertion_point(field_list:viam.service.sensors.v1.GetReadingsRequest.sensor_names)
  return _impl_.sensor_names_;
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetReadingsRequest::_internal_has_extra() const {
  return this != internal_default_instance() && _impl_.extra_ != nullptr;
}
inline bool GetReadingsRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetReadingsRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetReadingsRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.sensors.v1.GetReadingsRequest.extra)
  return _internal_extra();
}
inline void GetReadingsRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.sensors.v1.GetReadingsRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetReadingsRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetReadingsRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.sensors.v1.GetReadingsRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetReadingsRequest::_internal_mutable_extra() {
  
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.extra_ = p;
  }
  return _impl_.extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetReadingsRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.sensors.v1.GetReadingsRequest.extra)
  return _msg;
}
inline void GetReadingsRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.sensors.v1.GetReadingsRequest.extra)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Readings

// .viam.common.v1.ResourceName name = 1 [json_name = "name"];
inline bool Readings::_internal_has_name() const {
  return this != internal_default_instance() && _impl_.name_ != nullptr;
}
inline bool Readings::has_name() const {
  return _internal_has_name();
}
inline const ::viam::common::v1::ResourceName& Readings::_internal_name() const {
  const ::viam::common::v1::ResourceName* p = _impl_.name_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::ResourceName&>(
      ::viam::common::v1::_ResourceName_default_instance_);
}
inline const ::viam::common::v1::ResourceName& Readings::name() const {
  // @@protoc_insertion_point(field_get:viam.service.sensors.v1.Readings.name)
  return _internal_name();
}
inline void Readings::unsafe_arena_set_allocated_name(
    ::viam::common::v1::ResourceName* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.name_);
  }
  _impl_.name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.sensors.v1.Readings.name)
}
inline ::viam::common::v1::ResourceName* Readings::release_name() {
  
  ::viam::common::v1::ResourceName* temp = _impl_.name_;
  _impl_.name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::ResourceName* Readings::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:viam.service.sensors.v1.Readings.name)
  
  ::viam::common::v1::ResourceName* temp = _impl_.name_;
  _impl_.name_ = nullptr;
  return temp;
}
inline ::viam::common::v1::ResourceName* Readings::_internal_mutable_name() {
  
  if (_impl_.name_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::ResourceName>(GetArenaForAllocation());
    _impl_.name_ = p;
  }
  return _impl_.name_;
}
inline ::viam::common::v1::ResourceName* Readings::mutable_name() {
  ::viam::common::v1::ResourceName* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.sensors.v1.Readings.name)
  return _msg;
}
inline void Readings::set_allocated_name(::viam::common::v1::ResourceName* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name));
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.name_ = name;
  // @@protoc_insertion_point(field_set_allocated:viam.service.sensors.v1.Readings.name)
}

// map<string, .google.protobuf.Value> readings = 2 [json_name = "readings"];
inline int Readings::_internal_readings_size() const {
  return _impl_.readings_.size();
}
inline int Readings::readings_size() const {
  return _internal_readings_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Value >&
Readings::_internal_readings() const {
  return _impl_.readings_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Value >&
Readings::readings() const {
  // @@protoc_insertion_point(field_map:viam.service.sensors.v1.Readings.readings)
  return _internal_readings();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Value >*
Readings::_internal_mutable_readings() {
  return _impl_.readings_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Value >*
Readings::mutable_readings() {
  // @@protoc_insertion_point(field_mutable_map:viam.service.sensors.v1.Readings.readings)
  return _internal_mutable_readings();
}

// -------------------------------------------------------------------

// GetReadingsResponse

// repeated .viam.service.sensors.v1.Readings readings = 1 [json_name = "readings"];
inline int GetReadingsResponse::_internal_readings_size() const {
  return _impl_.readings_.size();
}
inline int GetReadingsResponse::readings_size() const {
  return _internal_readings_size();
}
inline void GetReadingsResponse::clear_readings() {
  _impl_.readings_.Clear();
}
inline ::viam::service::sensors::v1::Readings* GetReadingsResponse::mutable_readings(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.sensors.v1.GetReadingsResponse.readings)
  return _impl_.readings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::sensors::v1::Readings >*
GetReadingsResponse::mutable_readings() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.sensors.v1.GetReadingsResponse.readings)
  return &_impl_.readings_;
}
inline const ::viam::service::sensors::v1::Readings& GetReadingsResponse::_internal_readings(int index) const {
  return _impl_.readings_.Get(index);
}
inline const ::viam::service::sensors::v1::Readings& GetReadingsResponse::readings(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.sensors.v1.GetReadingsResponse.readings)
  return _internal_readings(index);
}
inline ::viam::service::sensors::v1::Readings* GetReadingsResponse::_internal_add_readings() {
  return _impl_.readings_.Add();
}
inline ::viam::service::sensors::v1::Readings* GetReadingsResponse::add_readings() {
  ::viam::service::sensors::v1::Readings* _add = _internal_add_readings();
  // @@protoc_insertion_point(field_add:viam.service.sensors.v1.GetReadingsResponse.readings)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::sensors::v1::Readings >&
GetReadingsResponse::readings() const {
  // @@protoc_insertion_point(field_list:viam.service.sensors.v1.GetReadingsResponse.readings)
  return _impl_.readings_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace sensors
}  // namespace service
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2fsensors_2fv1_2fsensors_2eproto
