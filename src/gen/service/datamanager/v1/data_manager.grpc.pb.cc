// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service/datamanager/v1/data_manager.proto

#include "service/datamanager/v1/data_manager.pb.h"
#include "service/datamanager/v1/data_manager.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace viam {
namespace service {
namespace datamanager {
namespace v1 {

static const char* DataManagerService_method_names[] = {
  "/viam.service.datamanager.v1.DataManagerService/Sync",
  "/viam.service.datamanager.v1.DataManagerService/DoCommand",
};

std::unique_ptr< DataManagerService::Stub> DataManagerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DataManagerService::Stub> stub(new DataManagerService::Stub(channel, options));
  return stub;
}

DataManagerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Sync_(DataManagerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoCommand_(DataManagerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataManagerService::Stub::Sync(::grpc::ClientContext* context, const ::viam::service::datamanager::v1::SyncRequest& request, ::viam::service::datamanager::v1::SyncResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::service::datamanager::v1::SyncRequest, ::viam::service::datamanager::v1::SyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Sync_, context, request, response);
}

void DataManagerService::Stub::async::Sync(::grpc::ClientContext* context, const ::viam::service::datamanager::v1::SyncRequest* request, ::viam::service::datamanager::v1::SyncResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::service::datamanager::v1::SyncRequest, ::viam::service::datamanager::v1::SyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sync_, context, request, response, std::move(f));
}

void DataManagerService::Stub::async::Sync(::grpc::ClientContext* context, const ::viam::service::datamanager::v1::SyncRequest* request, ::viam::service::datamanager::v1::SyncResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Sync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::service::datamanager::v1::SyncResponse>* DataManagerService::Stub::PrepareAsyncSyncRaw(::grpc::ClientContext* context, const ::viam::service::datamanager::v1::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::service::datamanager::v1::SyncResponse, ::viam::service::datamanager::v1::SyncRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Sync_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::service::datamanager::v1::SyncResponse>* DataManagerService::Stub::AsyncSyncRaw(::grpc::ClientContext* context, const ::viam::service::datamanager::v1::SyncRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSyncRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DataManagerService::Stub::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DoCommand_, context, request, response);
}

void DataManagerService::Stub::async::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, std::move(f));
}

void DataManagerService::Stub::async::DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DoCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* DataManagerService::Stub::PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::common::v1::DoCommandResponse, ::viam::common::v1::DoCommandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DoCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* DataManagerService::Stub::AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

DataManagerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataManagerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataManagerService::Service, ::viam::service::datamanager::v1::SyncRequest, ::viam::service::datamanager::v1::SyncResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::service::datamanager::v1::SyncRequest* req,
             ::viam::service::datamanager::v1::SyncResponse* resp) {
               return service->Sync(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DataManagerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DataManagerService::Service, ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DataManagerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::common::v1::DoCommandRequest* req,
             ::viam::common::v1::DoCommandResponse* resp) {
               return service->DoCommand(ctx, req, resp);
             }, this)));
}

DataManagerService::Service::~Service() {
}

::grpc::Status DataManagerService::Service::Sync(::grpc::ServerContext* context, const ::viam::service::datamanager::v1::SyncRequest* request, ::viam::service::datamanager::v1::SyncResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataManagerService::Service::DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viam
}  // namespace service
}  // namespace datamanager
}  // namespace v1

