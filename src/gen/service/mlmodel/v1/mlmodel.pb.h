// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service/mlmodel/v1/mlmodel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_service_2fmlmodel_2fv1_2fmlmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_service_2fmlmodel_2fv1_2fmlmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_service_2fmlmodel_2fv1_2fmlmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_service_2fmlmodel_2fv1_2fmlmodel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_service_2fmlmodel_2fv1_2fmlmodel_2eproto;
namespace viam {
namespace service {
namespace mlmodel {
namespace v1 {
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class InferRequest;
struct InferRequestDefaultTypeInternal;
extern InferRequestDefaultTypeInternal _InferRequest_default_instance_;
class InferResponse;
struct InferResponseDefaultTypeInternal;
extern InferResponseDefaultTypeInternal _InferResponse_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
class MetadataRequest;
struct MetadataRequestDefaultTypeInternal;
extern MetadataRequestDefaultTypeInternal _MetadataRequest_default_instance_;
class MetadataResponse;
struct MetadataResponseDefaultTypeInternal;
extern MetadataResponseDefaultTypeInternal _MetadataResponse_default_instance_;
class TensorInfo;
struct TensorInfoDefaultTypeInternal;
extern TensorInfoDefaultTypeInternal _TensorInfo_default_instance_;
}  // namespace v1
}  // namespace mlmodel
}  // namespace service
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::service::mlmodel::v1::File* Arena::CreateMaybeMessage<::viam::service::mlmodel::v1::File>(Arena*);
template<> ::viam::service::mlmodel::v1::InferRequest* Arena::CreateMaybeMessage<::viam::service::mlmodel::v1::InferRequest>(Arena*);
template<> ::viam::service::mlmodel::v1::InferResponse* Arena::CreateMaybeMessage<::viam::service::mlmodel::v1::InferResponse>(Arena*);
template<> ::viam::service::mlmodel::v1::Metadata* Arena::CreateMaybeMessage<::viam::service::mlmodel::v1::Metadata>(Arena*);
template<> ::viam::service::mlmodel::v1::MetadataRequest* Arena::CreateMaybeMessage<::viam::service::mlmodel::v1::MetadataRequest>(Arena*);
template<> ::viam::service::mlmodel::v1::MetadataResponse* Arena::CreateMaybeMessage<::viam::service::mlmodel::v1::MetadataResponse>(Arena*);
template<> ::viam::service::mlmodel::v1::TensorInfo* Arena::CreateMaybeMessage<::viam::service::mlmodel::v1::TensorInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace service {
namespace mlmodel {
namespace v1 {

enum LabelType : int {
  LABEL_TYPE_UNSPECIFIED = 0,
  LABEL_TYPE_TENSOR_VALUE = 1,
  LABEL_TYPE_TENSOR_AXIS = 2,
  LabelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LabelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LabelType_IsValid(int value);
constexpr LabelType LabelType_MIN = LABEL_TYPE_UNSPECIFIED;
constexpr LabelType LabelType_MAX = LABEL_TYPE_TENSOR_AXIS;
constexpr int LabelType_ARRAYSIZE = LabelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LabelType_descriptor();
template<typename T>
inline const std::string& LabelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LabelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LabelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LabelType_descriptor(), enum_t_value);
}
inline bool LabelType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LabelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LabelType>(
    LabelType_descriptor(), name, value);
}
// ===================================================================

class InferRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.mlmodel.v1.InferRequest) */ {
 public:
  inline InferRequest() : InferRequest(nullptr) {}
  ~InferRequest() override;
  explicit PROTOBUF_CONSTEXPR InferRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferRequest(const InferRequest& from);
  InferRequest(InferRequest&& from) noexcept
    : InferRequest() {
    *this = ::std::move(from);
  }

  inline InferRequest& operator=(const InferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferRequest& operator=(InferRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferRequest* internal_default_instance() {
    return reinterpret_cast<const InferRequest*>(
               &_InferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InferRequest& a, InferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InferRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InferRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.mlmodel.v1.InferRequest";
  }
  protected:
  explicit InferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInputDataFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct input_data = 2 [json_name = "inputData"];
  bool has_input_data() const;
  private:
  bool _internal_has_input_data() const;
  public:
  void clear_input_data();
  const ::PROTOBUF_NAMESPACE_ID::Struct& input_data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_input_data();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_input_data();
  void set_allocated_input_data(::PROTOBUF_NAMESPACE_ID::Struct* input_data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_input_data() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_input_data();
  public:
  void unsafe_arena_set_allocated_input_data(
      ::PROTOBUF_NAMESPACE_ID::Struct* input_data);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_input_data();

  // @@protoc_insertion_point(class_scope:viam.service.mlmodel.v1.InferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* input_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fmlmodel_2fv1_2fmlmodel_2eproto;
};
// -------------------------------------------------------------------

class InferResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.mlmodel.v1.InferResponse) */ {
 public:
  inline InferResponse() : InferResponse(nullptr) {}
  ~InferResponse() override;
  explicit PROTOBUF_CONSTEXPR InferResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InferResponse(const InferResponse& from);
  InferResponse(InferResponse&& from) noexcept
    : InferResponse() {
    *this = ::std::move(from);
  }

  inline InferResponse& operator=(const InferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InferResponse& operator=(InferResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InferResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InferResponse* internal_default_instance() {
    return reinterpret_cast<const InferResponse*>(
               &_InferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InferResponse& a, InferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InferResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InferResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InferResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InferResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InferResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InferResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.mlmodel.v1.InferResponse";
  }
  protected:
  explicit InferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputDataFieldNumber = 2,
  };
  // .google.protobuf.Struct output_data = 2 [json_name = "outputData"];
  bool has_output_data() const;
  private:
  bool _internal_has_output_data() const;
  public:
  void clear_output_data();
  const ::PROTOBUF_NAMESPACE_ID::Struct& output_data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_output_data();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_output_data();
  void set_allocated_output_data(::PROTOBUF_NAMESPACE_ID::Struct* output_data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_output_data() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_output_data();
  public:
  void unsafe_arena_set_allocated_output_data(
      ::PROTOBUF_NAMESPACE_ID::Struct* output_data);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_output_data();

  // @@protoc_insertion_point(class_scope:viam.service.mlmodel.v1.InferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Struct* output_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fmlmodel_2fv1_2fmlmodel_2eproto;
};
// -------------------------------------------------------------------

class MetadataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.mlmodel.v1.MetadataRequest) */ {
 public:
  inline MetadataRequest() : MetadataRequest(nullptr) {}
  ~MetadataRequest() override;
  explicit PROTOBUF_CONSTEXPR MetadataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetadataRequest(const MetadataRequest& from);
  MetadataRequest(MetadataRequest&& from) noexcept
    : MetadataRequest() {
    *this = ::std::move(from);
  }

  inline MetadataRequest& operator=(const MetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataRequest& operator=(MetadataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetadataRequest* internal_default_instance() {
    return reinterpret_cast<const MetadataRequest*>(
               &_MetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MetadataRequest& a, MetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetadataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetadataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MetadataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.mlmodel.v1.MetadataRequest";
  }
  protected:
  explicit MetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.service.mlmodel.v1.MetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fmlmodel_2fv1_2fmlmodel_2eproto;
};
// -------------------------------------------------------------------

class MetadataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.mlmodel.v1.MetadataResponse) */ {
 public:
  inline MetadataResponse() : MetadataResponse(nullptr) {}
  ~MetadataResponse() override;
  explicit PROTOBUF_CONSTEXPR MetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetadataResponse(const MetadataResponse& from);
  MetadataResponse(MetadataResponse&& from) noexcept
    : MetadataResponse() {
    *this = ::std::move(from);
  }

  inline MetadataResponse& operator=(const MetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataResponse& operator=(MetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetadataResponse* internal_default_instance() {
    return reinterpret_cast<const MetadataResponse*>(
               &_MetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MetadataResponse& a, MetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MetadataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MetadataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MetadataResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.mlmodel.v1.MetadataResponse";
  }
  protected:
  explicit MetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
  };
  // .viam.service.mlmodel.v1.Metadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::viam::service::mlmodel::v1::Metadata& metadata() const;
  PROTOBUF_NODISCARD ::viam::service::mlmodel::v1::Metadata* release_metadata();
  ::viam::service::mlmodel::v1::Metadata* mutable_metadata();
  void set_allocated_metadata(::viam::service::mlmodel::v1::Metadata* metadata);
  private:
  const ::viam::service::mlmodel::v1::Metadata& _internal_metadata() const;
  ::viam::service::mlmodel::v1::Metadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::viam::service::mlmodel::v1::Metadata* metadata);
  ::viam::service::mlmodel::v1::Metadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:viam.service.mlmodel.v1.MetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::service::mlmodel::v1::Metadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fmlmodel_2fv1_2fmlmodel_2eproto;
};
// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.mlmodel.v1.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit PROTOBUF_CONSTEXPR Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Metadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Metadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.mlmodel.v1.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputInfoFieldNumber = 4,
    kOutputInfoFieldNumber = 5,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // repeated .viam.service.mlmodel.v1.TensorInfo input_info = 4 [json_name = "inputInfo"];
  int input_info_size() const;
  private:
  int _internal_input_info_size() const;
  public:
  void clear_input_info();
  ::viam::service::mlmodel::v1::TensorInfo* mutable_input_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::TensorInfo >*
      mutable_input_info();
  private:
  const ::viam::service::mlmodel::v1::TensorInfo& _internal_input_info(int index) const;
  ::viam::service::mlmodel::v1::TensorInfo* _internal_add_input_info();
  public:
  const ::viam::service::mlmodel::v1::TensorInfo& input_info(int index) const;
  ::viam::service::mlmodel::v1::TensorInfo* add_input_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::TensorInfo >&
      input_info() const;

  // repeated .viam.service.mlmodel.v1.TensorInfo output_info = 5 [json_name = "outputInfo"];
  int output_info_size() const;
  private:
  int _internal_output_info_size() const;
  public:
  void clear_output_info();
  ::viam::service::mlmodel::v1::TensorInfo* mutable_output_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::TensorInfo >*
      mutable_output_info();
  private:
  const ::viam::service::mlmodel::v1::TensorInfo& _internal_output_info(int index) const;
  ::viam::service::mlmodel::v1::TensorInfo* _internal_add_output_info();
  public:
  const ::viam::service::mlmodel::v1::TensorInfo& output_info(int index) const;
  ::viam::service::mlmodel::v1::TensorInfo* add_output_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::TensorInfo >&
      output_info() const;

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 2 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string description = 3 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:viam.service.mlmodel.v1.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::TensorInfo > input_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::TensorInfo > output_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fmlmodel_2fv1_2fmlmodel_2eproto;
};
// -------------------------------------------------------------------

class TensorInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.mlmodel.v1.TensorInfo) */ {
 public:
  inline TensorInfo() : TensorInfo(nullptr) {}
  ~TensorInfo() override;
  explicit PROTOBUF_CONSTEXPR TensorInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TensorInfo(const TensorInfo& from);
  TensorInfo(TensorInfo&& from) noexcept
    : TensorInfo() {
    *this = ::std::move(from);
  }

  inline TensorInfo& operator=(const TensorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorInfo& operator=(TensorInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TensorInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TensorInfo* internal_default_instance() {
    return reinterpret_cast<const TensorInfo*>(
               &_TensorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TensorInfo& a, TensorInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TensorInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TensorInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TensorInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TensorInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.mlmodel.v1.TensorInfo";
  }
  protected:
  explicit TensorInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 4,
    kAssociatedFilesFieldNumber = 5,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kDataTypeFieldNumber = 3,
    kExtraFieldNumber = 99,
  };
  // repeated int32 shape = 4 [json_name = "shape"];
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  int32_t _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_shape() const;
  void _internal_add_shape(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_shape();
  public:
  int32_t shape(int index) const;
  void set_shape(int index, int32_t value);
  void add_shape(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_shape();

  // repeated .viam.service.mlmodel.v1.File associated_files = 5 [json_name = "associatedFiles"];
  int associated_files_size() const;
  private:
  int _internal_associated_files_size() const;
  public:
  void clear_associated_files();
  ::viam::service::mlmodel::v1::File* mutable_associated_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::File >*
      mutable_associated_files();
  private:
  const ::viam::service::mlmodel::v1::File& _internal_associated_files(int index) const;
  ::viam::service::mlmodel::v1::File* _internal_add_associated_files();
  public:
  const ::viam::service::mlmodel::v1::File& associated_files(int index) const;
  ::viam::service::mlmodel::v1::File* add_associated_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::File >&
      associated_files() const;

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string data_type = 3 [json_name = "dataType"];
  void clear_data_type();
  const std::string& data_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_type();
  PROTOBUF_NODISCARD std::string* release_data_type();
  void set_allocated_data_type(std::string* data_type);
  private:
  const std::string& _internal_data_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_type(const std::string& value);
  std::string* _internal_mutable_data_type();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.service.mlmodel.v1.TensorInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::File > associated_files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_type_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fmlmodel_2fv1_2fmlmodel_2eproto;
};
// -------------------------------------------------------------------

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.service.mlmodel.v1.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit PROTOBUF_CONSTEXPR File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const File& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.service.mlmodel.v1.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kLabelTypeFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .viam.service.mlmodel.v1.LabelType label_type = 3 [json_name = "labelType"];
  void clear_label_type();
  ::viam::service::mlmodel::v1::LabelType label_type() const;
  void set_label_type(::viam::service::mlmodel::v1::LabelType value);
  private:
  ::viam::service::mlmodel::v1::LabelType _internal_label_type() const;
  void _internal_set_label_type(::viam::service::mlmodel::v1::LabelType value);
  public:

  // @@protoc_insertion_point(class_scope:viam.service.mlmodel.v1.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int label_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_service_2fmlmodel_2fv1_2fmlmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InferRequest

// string name = 1 [json_name = "name"];
inline void InferRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InferRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.InferRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InferRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.mlmodel.v1.InferRequest.name)
}
inline std::string* InferRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.InferRequest.name)
  return _s;
}
inline const std::string& InferRequest::_internal_name() const {
  return name_.Get();
}
inline void InferRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* InferRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* InferRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.InferRequest.name)
  return name_.Release();
}
inline void InferRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.InferRequest.name)
}

// .google.protobuf.Struct input_data = 2 [json_name = "inputData"];
inline bool InferRequest::_internal_has_input_data() const {
  return this != internal_default_instance() && input_data_ != nullptr;
}
inline bool InferRequest::has_input_data() const {
  return _internal_has_input_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& InferRequest::_internal_input_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = input_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& InferRequest::input_data() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.InferRequest.input_data)
  return _internal_input_data();
}
inline void InferRequest::unsafe_arena_set_allocated_input_data(
    ::PROTOBUF_NAMESPACE_ID::Struct* input_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_data_);
  }
  input_data_ = input_data;
  if (input_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.mlmodel.v1.InferRequest.input_data)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* InferRequest::release_input_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = input_data_;
  input_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* InferRequest::unsafe_arena_release_input_data() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.InferRequest.input_data)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = input_data_;
  input_data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* InferRequest::_internal_mutable_input_data() {
  
  if (input_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    input_data_ = p;
  }
  return input_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* InferRequest::mutable_input_data() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_input_data();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.InferRequest.input_data)
  return _msg;
}
inline void InferRequest::set_allocated_input_data(::PROTOBUF_NAMESPACE_ID::Struct* input_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_data_);
  }
  if (input_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(input_data));
    if (message_arena != submessage_arena) {
      input_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input_data, submessage_arena);
    }
    
  } else {
    
  }
  input_data_ = input_data;
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.InferRequest.input_data)
}

// -------------------------------------------------------------------

// InferResponse

// .google.protobuf.Struct output_data = 2 [json_name = "outputData"];
inline bool InferResponse::_internal_has_output_data() const {
  return this != internal_default_instance() && output_data_ != nullptr;
}
inline bool InferResponse::has_output_data() const {
  return _internal_has_output_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& InferResponse::_internal_output_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = output_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& InferResponse::output_data() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.InferResponse.output_data)
  return _internal_output_data();
}
inline void InferResponse::unsafe_arena_set_allocated_output_data(
    ::PROTOBUF_NAMESPACE_ID::Struct* output_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_data_);
  }
  output_data_ = output_data;
  if (output_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.mlmodel.v1.InferResponse.output_data)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* InferResponse::release_output_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = output_data_;
  output_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* InferResponse::unsafe_arena_release_output_data() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.InferResponse.output_data)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = output_data_;
  output_data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* InferResponse::_internal_mutable_output_data() {
  
  if (output_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    output_data_ = p;
  }
  return output_data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* InferResponse::mutable_output_data() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_output_data();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.InferResponse.output_data)
  return _msg;
}
inline void InferResponse::set_allocated_output_data(::PROTOBUF_NAMESPACE_ID::Struct* output_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_data_);
  }
  if (output_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(output_data));
    if (message_arena != submessage_arena) {
      output_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, output_data, submessage_arena);
    }
    
  } else {
    
  }
  output_data_ = output_data;
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.InferResponse.output_data)
}

// -------------------------------------------------------------------

// MetadataRequest

// string name = 1 [json_name = "name"];
inline void MetadataRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MetadataRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.MetadataRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MetadataRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.mlmodel.v1.MetadataRequest.name)
}
inline std::string* MetadataRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.MetadataRequest.name)
  return _s;
}
inline const std::string& MetadataRequest::_internal_name() const {
  return name_.Get();
}
inline void MetadataRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* MetadataRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* MetadataRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.MetadataRequest.name)
  return name_.Release();
}
inline void MetadataRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.MetadataRequest.name)
}

// -------------------------------------------------------------------

// MetadataResponse

// .viam.service.mlmodel.v1.Metadata metadata = 1 [json_name = "metadata"];
inline bool MetadataResponse::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool MetadataResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void MetadataResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::viam::service::mlmodel::v1::Metadata& MetadataResponse::_internal_metadata() const {
  const ::viam::service::mlmodel::v1::Metadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::service::mlmodel::v1::Metadata&>(
      ::viam::service::mlmodel::v1::_Metadata_default_instance_);
}
inline const ::viam::service::mlmodel::v1::Metadata& MetadataResponse::metadata() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.MetadataResponse.metadata)
  return _internal_metadata();
}
inline void MetadataResponse::unsafe_arena_set_allocated_metadata(
    ::viam::service::mlmodel::v1::Metadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.mlmodel.v1.MetadataResponse.metadata)
}
inline ::viam::service::mlmodel::v1::Metadata* MetadataResponse::release_metadata() {
  
  ::viam::service::mlmodel::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::service::mlmodel::v1::Metadata* MetadataResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.MetadataResponse.metadata)
  
  ::viam::service::mlmodel::v1::Metadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::viam::service::mlmodel::v1::Metadata* MetadataResponse::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::service::mlmodel::v1::Metadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::viam::service::mlmodel::v1::Metadata* MetadataResponse::mutable_metadata() {
  ::viam::service::mlmodel::v1::Metadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.MetadataResponse.metadata)
  return _msg;
}
inline void MetadataResponse::set_allocated_metadata(::viam::service::mlmodel::v1::Metadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.MetadataResponse.metadata)
}

// -------------------------------------------------------------------

// Metadata

// string name = 1 [json_name = "name"];
inline void Metadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Metadata::name() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.Metadata.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.mlmodel.v1.Metadata.name)
}
inline std::string* Metadata::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.Metadata.name)
  return _s;
}
inline const std::string& Metadata::_internal_name() const {
  return name_.Get();
}
inline void Metadata::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.Metadata.name)
  return name_.Release();
}
inline void Metadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.Metadata.name)
}

// string type = 2 [json_name = "type"];
inline void Metadata::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Metadata::type() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.Metadata.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.mlmodel.v1.Metadata.type)
}
inline std::string* Metadata::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.Metadata.type)
  return _s;
}
inline const std::string& Metadata::_internal_type() const {
  return type_.Get();
}
inline void Metadata::_internal_set_type(const std::string& value) {
  
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_type() {
  
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_type() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.Metadata.type)
  return type_.Release();
}
inline void Metadata::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.Metadata.type)
}

// string description = 3 [json_name = "description"];
inline void Metadata::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Metadata::description() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.Metadata.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Metadata::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.mlmodel.v1.Metadata.description)
}
inline std::string* Metadata::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.Metadata.description)
  return _s;
}
inline const std::string& Metadata::_internal_description() const {
  return description_.Get();
}
inline void Metadata::_internal_set_description(const std::string& value) {
  
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_description() {
  
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* Metadata::release_description() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.Metadata.description)
  return description_.Release();
}
inline void Metadata::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.Metadata.description)
}

// repeated .viam.service.mlmodel.v1.TensorInfo input_info = 4 [json_name = "inputInfo"];
inline int Metadata::_internal_input_info_size() const {
  return input_info_.size();
}
inline int Metadata::input_info_size() const {
  return _internal_input_info_size();
}
inline void Metadata::clear_input_info() {
  input_info_.Clear();
}
inline ::viam::service::mlmodel::v1::TensorInfo* Metadata::mutable_input_info(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.Metadata.input_info)
  return input_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::TensorInfo >*
Metadata::mutable_input_info() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.mlmodel.v1.Metadata.input_info)
  return &input_info_;
}
inline const ::viam::service::mlmodel::v1::TensorInfo& Metadata::_internal_input_info(int index) const {
  return input_info_.Get(index);
}
inline const ::viam::service::mlmodel::v1::TensorInfo& Metadata::input_info(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.Metadata.input_info)
  return _internal_input_info(index);
}
inline ::viam::service::mlmodel::v1::TensorInfo* Metadata::_internal_add_input_info() {
  return input_info_.Add();
}
inline ::viam::service::mlmodel::v1::TensorInfo* Metadata::add_input_info() {
  ::viam::service::mlmodel::v1::TensorInfo* _add = _internal_add_input_info();
  // @@protoc_insertion_point(field_add:viam.service.mlmodel.v1.Metadata.input_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::TensorInfo >&
Metadata::input_info() const {
  // @@protoc_insertion_point(field_list:viam.service.mlmodel.v1.Metadata.input_info)
  return input_info_;
}

// repeated .viam.service.mlmodel.v1.TensorInfo output_info = 5 [json_name = "outputInfo"];
inline int Metadata::_internal_output_info_size() const {
  return output_info_.size();
}
inline int Metadata::output_info_size() const {
  return _internal_output_info_size();
}
inline void Metadata::clear_output_info() {
  output_info_.Clear();
}
inline ::viam::service::mlmodel::v1::TensorInfo* Metadata::mutable_output_info(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.Metadata.output_info)
  return output_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::TensorInfo >*
Metadata::mutable_output_info() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.mlmodel.v1.Metadata.output_info)
  return &output_info_;
}
inline const ::viam::service::mlmodel::v1::TensorInfo& Metadata::_internal_output_info(int index) const {
  return output_info_.Get(index);
}
inline const ::viam::service::mlmodel::v1::TensorInfo& Metadata::output_info(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.Metadata.output_info)
  return _internal_output_info(index);
}
inline ::viam::service::mlmodel::v1::TensorInfo* Metadata::_internal_add_output_info() {
  return output_info_.Add();
}
inline ::viam::service::mlmodel::v1::TensorInfo* Metadata::add_output_info() {
  ::viam::service::mlmodel::v1::TensorInfo* _add = _internal_add_output_info();
  // @@protoc_insertion_point(field_add:viam.service.mlmodel.v1.Metadata.output_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::TensorInfo >&
Metadata::output_info() const {
  // @@protoc_insertion_point(field_list:viam.service.mlmodel.v1.Metadata.output_info)
  return output_info_;
}

// -------------------------------------------------------------------

// TensorInfo

// string name = 1 [json_name = "name"];
inline void TensorInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TensorInfo::name() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.TensorInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TensorInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.mlmodel.v1.TensorInfo.name)
}
inline std::string* TensorInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.TensorInfo.name)
  return _s;
}
inline const std::string& TensorInfo::_internal_name() const {
  return name_.Get();
}
inline void TensorInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* TensorInfo::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* TensorInfo::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.TensorInfo.name)
  return name_.Release();
}
inline void TensorInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.TensorInfo.name)
}

// string description = 2 [json_name = "description"];
inline void TensorInfo::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& TensorInfo::description() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.TensorInfo.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TensorInfo::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.mlmodel.v1.TensorInfo.description)
}
inline std::string* TensorInfo::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.TensorInfo.description)
  return _s;
}
inline const std::string& TensorInfo::_internal_description() const {
  return description_.Get();
}
inline void TensorInfo::_internal_set_description(const std::string& value) {
  
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* TensorInfo::_internal_mutable_description() {
  
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* TensorInfo::release_description() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.TensorInfo.description)
  return description_.Release();
}
inline void TensorInfo::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.TensorInfo.description)
}

// string data_type = 3 [json_name = "dataType"];
inline void TensorInfo::clear_data_type() {
  data_type_.ClearToEmpty();
}
inline const std::string& TensorInfo::data_type() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.TensorInfo.data_type)
  return _internal_data_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TensorInfo::set_data_type(ArgT0&& arg0, ArgT... args) {
 
 data_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.mlmodel.v1.TensorInfo.data_type)
}
inline std::string* TensorInfo::mutable_data_type() {
  std::string* _s = _internal_mutable_data_type();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.TensorInfo.data_type)
  return _s;
}
inline const std::string& TensorInfo::_internal_data_type() const {
  return data_type_.Get();
}
inline void TensorInfo::_internal_set_data_type(const std::string& value) {
  
  data_type_.Set(value, GetArenaForAllocation());
}
inline std::string* TensorInfo::_internal_mutable_data_type() {
  
  return data_type_.Mutable(GetArenaForAllocation());
}
inline std::string* TensorInfo::release_data_type() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.TensorInfo.data_type)
  return data_type_.Release();
}
inline void TensorInfo::set_allocated_data_type(std::string* data_type) {
  if (data_type != nullptr) {
    
  } else {
    
  }
  data_type_.SetAllocated(data_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_type_.IsDefault()) {
    data_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.TensorInfo.data_type)
}

// repeated int32 shape = 4 [json_name = "shape"];
inline int TensorInfo::_internal_shape_size() const {
  return shape_.size();
}
inline int TensorInfo::shape_size() const {
  return _internal_shape_size();
}
inline void TensorInfo::clear_shape() {
  shape_.Clear();
}
inline int32_t TensorInfo::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline int32_t TensorInfo::shape(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.TensorInfo.shape)
  return _internal_shape(index);
}
inline void TensorInfo::set_shape(int index, int32_t value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:viam.service.mlmodel.v1.TensorInfo.shape)
}
inline void TensorInfo::_internal_add_shape(int32_t value) {
  shape_.Add(value);
}
inline void TensorInfo::add_shape(int32_t value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:viam.service.mlmodel.v1.TensorInfo.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TensorInfo::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
TensorInfo::shape() const {
  // @@protoc_insertion_point(field_list:viam.service.mlmodel.v1.TensorInfo.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TensorInfo::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
TensorInfo::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.mlmodel.v1.TensorInfo.shape)
  return _internal_mutable_shape();
}

// repeated .viam.service.mlmodel.v1.File associated_files = 5 [json_name = "associatedFiles"];
inline int TensorInfo::_internal_associated_files_size() const {
  return associated_files_.size();
}
inline int TensorInfo::associated_files_size() const {
  return _internal_associated_files_size();
}
inline void TensorInfo::clear_associated_files() {
  associated_files_.Clear();
}
inline ::viam::service::mlmodel::v1::File* TensorInfo::mutable_associated_files(int index) {
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.TensorInfo.associated_files)
  return associated_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::File >*
TensorInfo::mutable_associated_files() {
  // @@protoc_insertion_point(field_mutable_list:viam.service.mlmodel.v1.TensorInfo.associated_files)
  return &associated_files_;
}
inline const ::viam::service::mlmodel::v1::File& TensorInfo::_internal_associated_files(int index) const {
  return associated_files_.Get(index);
}
inline const ::viam::service::mlmodel::v1::File& TensorInfo::associated_files(int index) const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.TensorInfo.associated_files)
  return _internal_associated_files(index);
}
inline ::viam::service::mlmodel::v1::File* TensorInfo::_internal_add_associated_files() {
  return associated_files_.Add();
}
inline ::viam::service::mlmodel::v1::File* TensorInfo::add_associated_files() {
  ::viam::service::mlmodel::v1::File* _add = _internal_add_associated_files();
  // @@protoc_insertion_point(field_add:viam.service.mlmodel.v1.TensorInfo.associated_files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::service::mlmodel::v1::File >&
TensorInfo::associated_files() const {
  // @@protoc_insertion_point(field_list:viam.service.mlmodel.v1.TensorInfo.associated_files)
  return associated_files_;
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool TensorInfo::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool TensorInfo::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TensorInfo::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TensorInfo::extra() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.TensorInfo.extra)
  return _internal_extra();
}
inline void TensorInfo::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.service.mlmodel.v1.TensorInfo.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TensorInfo::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TensorInfo::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.TensorInfo.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TensorInfo::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TensorInfo::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.TensorInfo.extra)
  return _msg;
}
inline void TensorInfo::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.TensorInfo.extra)
}

// -------------------------------------------------------------------

// File

// string name = 1 [json_name = "name"];
inline void File::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& File::name() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.File.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.mlmodel.v1.File.name)
}
inline std::string* File::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.File.name)
  return _s;
}
inline const std::string& File::_internal_name() const {
  return name_.Get();
}
inline void File::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.File.name)
  return name_.Release();
}
inline void File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.File.name)
}

// string description = 2 [json_name = "description"];
inline void File::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& File::description() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.File.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.service.mlmodel.v1.File.description)
}
inline std::string* File::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:viam.service.mlmodel.v1.File.description)
  return _s;
}
inline const std::string& File::_internal_description() const {
  return description_.Get();
}
inline void File::_internal_set_description(const std::string& value) {
  
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_description() {
  
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_description() {
  // @@protoc_insertion_point(field_release:viam.service.mlmodel.v1.File.description)
  return description_.Release();
}
inline void File::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.service.mlmodel.v1.File.description)
}

// .viam.service.mlmodel.v1.LabelType label_type = 3 [json_name = "labelType"];
inline void File::clear_label_type() {
  label_type_ = 0;
}
inline ::viam::service::mlmodel::v1::LabelType File::_internal_label_type() const {
  return static_cast< ::viam::service::mlmodel::v1::LabelType >(label_type_);
}
inline ::viam::service::mlmodel::v1::LabelType File::label_type() const {
  // @@protoc_insertion_point(field_get:viam.service.mlmodel.v1.File.label_type)
  return _internal_label_type();
}
inline void File::_internal_set_label_type(::viam::service::mlmodel::v1::LabelType value) {
  
  label_type_ = value;
}
inline void File::set_label_type(::viam::service::mlmodel::v1::LabelType value) {
  _internal_set_label_type(value);
  // @@protoc_insertion_point(field_set:viam.service.mlmodel.v1.File.label_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace mlmodel
}  // namespace service
}  // namespace viam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::viam::service::mlmodel::v1::LabelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::service::mlmodel::v1::LabelType>() {
  return ::viam::service::mlmodel::v1::LabelType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_service_2fmlmodel_2fv1_2fmlmodel_2eproto
