// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service/navigation/v1/navigation.proto
#ifndef GRPC_service_2fnavigation_2fv1_2fnavigation_2eproto__INCLUDED
#define GRPC_service_2fnavigation_2fv1_2fnavigation_2eproto__INCLUDED

#include "service/navigation/v1/navigation.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace viam {
namespace service {
namespace navigation {
namespace v1 {

// A NavigationService declares the gRPC contract for a Navigation service
class NavigationService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.service.navigation.v1.NavigationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::viam::service::navigation::v1::GetModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetModeResponse>> AsyncGetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetModeResponse>>(AsyncGetModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetModeResponse>> PrepareAsyncGetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetModeResponse>>(PrepareAsyncGetModeRaw(context, request, cq));
    }
    virtual ::grpc::Status SetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::viam::service::navigation::v1::SetModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::SetModeResponse>> AsyncSetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::SetModeResponse>>(AsyncSetModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::SetModeResponse>> PrepareAsyncSetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::SetModeResponse>>(PrepareAsyncSetModeRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::viam::service::navigation::v1::GetLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetLocationResponse>> AsyncGetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetLocationResponse>>(AsyncGetLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetLocationResponse>> PrepareAsyncGetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetLocationResponse>>(PrepareAsyncGetLocationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::viam::service::navigation::v1::GetWaypointsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetWaypointsResponse>> AsyncGetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetWaypointsResponse>>(AsyncGetWaypointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetWaypointsResponse>> PrepareAsyncGetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetWaypointsResponse>>(PrepareAsyncGetWaypointsRaw(context, request, cq));
    }
    virtual ::grpc::Status AddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::viam::service::navigation::v1::AddWaypointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::AddWaypointResponse>> AsyncAddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::AddWaypointResponse>>(AsyncAddWaypointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::AddWaypointResponse>> PrepareAsyncAddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::AddWaypointResponse>>(PrepareAsyncAddWaypointRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::viam::service::navigation::v1::RemoveWaypointResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::RemoveWaypointResponse>> AsyncRemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::RemoveWaypointResponse>>(AsyncRemoveWaypointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::RemoveWaypointResponse>> PrepareAsyncRemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::RemoveWaypointResponse>>(PrepareAsyncRemoveWaypointRaw(context, request, cq));
    }
    // DoCommand sends/receives arbitrary commands
    virtual ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest* request, ::viam::service::navigation::v1::GetModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest* request, ::viam::service::navigation::v1::GetModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest* request, ::viam::service::navigation::v1::SetModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest* request, ::viam::service::navigation::v1::SetModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest* request, ::viam::service::navigation::v1::GetLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest* request, ::viam::service::navigation::v1::GetLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest* request, ::viam::service::navigation::v1::GetWaypointsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest* request, ::viam::service::navigation::v1::GetWaypointsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest* request, ::viam::service::navigation::v1::AddWaypointResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest* request, ::viam::service::navigation::v1::AddWaypointResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest* request, ::viam::service::navigation::v1::RemoveWaypointResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest* request, ::viam::service::navigation::v1::RemoveWaypointResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DoCommand sends/receives arbitrary commands
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetModeResponse>* AsyncGetModeRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetModeResponse>* PrepareAsyncGetModeRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::SetModeResponse>* AsyncSetModeRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::SetModeResponse>* PrepareAsyncSetModeRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetLocationResponse>* AsyncGetLocationRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetLocationResponse>* PrepareAsyncGetLocationRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetWaypointsResponse>* AsyncGetWaypointsRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::GetWaypointsResponse>* PrepareAsyncGetWaypointsRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::AddWaypointResponse>* AsyncAddWaypointRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::AddWaypointResponse>* PrepareAsyncAddWaypointRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::RemoveWaypointResponse>* AsyncRemoveWaypointRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::service::navigation::v1::RemoveWaypointResponse>* PrepareAsyncRemoveWaypointRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::viam::service::navigation::v1::GetModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetModeResponse>> AsyncGetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetModeResponse>>(AsyncGetModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetModeResponse>> PrepareAsyncGetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetModeResponse>>(PrepareAsyncGetModeRaw(context, request, cq));
    }
    ::grpc::Status SetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::viam::service::navigation::v1::SetModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::SetModeResponse>> AsyncSetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::SetModeResponse>>(AsyncSetModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::SetModeResponse>> PrepareAsyncSetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::SetModeResponse>>(PrepareAsyncSetModeRaw(context, request, cq));
    }
    ::grpc::Status GetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::viam::service::navigation::v1::GetLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetLocationResponse>> AsyncGetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetLocationResponse>>(AsyncGetLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetLocationResponse>> PrepareAsyncGetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetLocationResponse>>(PrepareAsyncGetLocationRaw(context, request, cq));
    }
    ::grpc::Status GetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::viam::service::navigation::v1::GetWaypointsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetWaypointsResponse>> AsyncGetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetWaypointsResponse>>(AsyncGetWaypointsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetWaypointsResponse>> PrepareAsyncGetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetWaypointsResponse>>(PrepareAsyncGetWaypointsRaw(context, request, cq));
    }
    ::grpc::Status AddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::viam::service::navigation::v1::AddWaypointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::AddWaypointResponse>> AsyncAddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::AddWaypointResponse>>(AsyncAddWaypointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::AddWaypointResponse>> PrepareAsyncAddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::AddWaypointResponse>>(PrepareAsyncAddWaypointRaw(context, request, cq));
    }
    ::grpc::Status RemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::viam::service::navigation::v1::RemoveWaypointResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::RemoveWaypointResponse>> AsyncRemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::RemoveWaypointResponse>>(AsyncRemoveWaypointRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::RemoveWaypointResponse>> PrepareAsyncRemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::RemoveWaypointResponse>>(PrepareAsyncRemoveWaypointRaw(context, request, cq));
    }
    ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest* request, ::viam::service::navigation::v1::GetModeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest* request, ::viam::service::navigation::v1::GetModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest* request, ::viam::service::navigation::v1::SetModeResponse* response, std::function<void(::grpc::Status)>) override;
      void SetMode(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest* request, ::viam::service::navigation::v1::SetModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest* request, ::viam::service::navigation::v1::GetLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLocation(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest* request, ::viam::service::navigation::v1::GetLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest* request, ::viam::service::navigation::v1::GetWaypointsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWaypoints(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest* request, ::viam::service::navigation::v1::GetWaypointsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest* request, ::viam::service::navigation::v1::AddWaypointResponse* response, std::function<void(::grpc::Status)>) override;
      void AddWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest* request, ::viam::service::navigation::v1::AddWaypointResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest* request, ::viam::service::navigation::v1::RemoveWaypointResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveWaypoint(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest* request, ::viam::service::navigation::v1::RemoveWaypointResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetModeResponse>* AsyncGetModeRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetModeResponse>* PrepareAsyncGetModeRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::SetModeResponse>* AsyncSetModeRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::SetModeResponse>* PrepareAsyncSetModeRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::SetModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetLocationResponse>* AsyncGetLocationRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetLocationResponse>* PrepareAsyncGetLocationRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetWaypointsResponse>* AsyncGetWaypointsRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::GetWaypointsResponse>* PrepareAsyncGetWaypointsRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::AddWaypointResponse>* AsyncAddWaypointRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::AddWaypointResponse>* PrepareAsyncAddWaypointRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::AddWaypointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::RemoveWaypointResponse>* AsyncRemoveWaypointRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::service::navigation::v1::RemoveWaypointResponse>* PrepareAsyncRemoveWaypointRaw(::grpc::ClientContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMode_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWaypoints_;
    const ::grpc::internal::RpcMethod rpcmethod_AddWaypoint_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveWaypoint_;
    const ::grpc::internal::RpcMethod rpcmethod_DoCommand_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetMode(::grpc::ServerContext* context, const ::viam::service::navigation::v1::GetModeRequest* request, ::viam::service::navigation::v1::GetModeResponse* response);
    virtual ::grpc::Status SetMode(::grpc::ServerContext* context, const ::viam::service::navigation::v1::SetModeRequest* request, ::viam::service::navigation::v1::SetModeResponse* response);
    virtual ::grpc::Status GetLocation(::grpc::ServerContext* context, const ::viam::service::navigation::v1::GetLocationRequest* request, ::viam::service::navigation::v1::GetLocationResponse* response);
    virtual ::grpc::Status GetWaypoints(::grpc::ServerContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest* request, ::viam::service::navigation::v1::GetWaypointsResponse* response);
    virtual ::grpc::Status AddWaypoint(::grpc::ServerContext* context, const ::viam::service::navigation::v1::AddWaypointRequest* request, ::viam::service::navigation::v1::AddWaypointResponse* response);
    virtual ::grpc::Status RemoveWaypoint(::grpc::ServerContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest* request, ::viam::service::navigation::v1::RemoveWaypointResponse* response);
    // DoCommand sends/receives arbitrary commands
    virtual ::grpc::Status DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMode(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetModeRequest* /*request*/, ::viam::service::navigation::v1::GetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMode(::grpc::ServerContext* context, ::viam::service::navigation::v1::GetModeRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::service::navigation::v1::GetModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMode() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMode(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::SetModeRequest* /*request*/, ::viam::service::navigation::v1::SetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMode(::grpc::ServerContext* context, ::viam::service::navigation::v1::SetModeRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::service::navigation::v1::SetModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLocation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetLocationRequest* /*request*/, ::viam::service::navigation::v1::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLocation(::grpc::ServerContext* context, ::viam::service::navigation::v1::GetLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::service::navigation::v1::GetLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWaypoints() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWaypoints(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetWaypointsRequest* /*request*/, ::viam::service::navigation::v1::GetWaypointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWaypoints(::grpc::ServerContext* context, ::viam::service::navigation::v1::GetWaypointsRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::service::navigation::v1::GetWaypointsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddWaypoint() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AddWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddWaypoint(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::AddWaypointRequest* /*request*/, ::viam::service::navigation::v1::AddWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddWaypoint(::grpc::ServerContext* context, ::viam::service::navigation::v1::AddWaypointRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::service::navigation::v1::AddWaypointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveWaypoint() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RemoveWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveWaypoint(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::RemoveWaypointRequest* /*request*/, ::viam::service::navigation::v1::RemoveWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveWaypoint(::grpc::ServerContext* context, ::viam::service::navigation::v1::RemoveWaypointRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::service::navigation::v1::RemoveWaypointResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoCommand() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::viam::common::v1::DoCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::common::v1::DoCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMode<WithAsyncMethod_SetMode<WithAsyncMethod_GetLocation<WithAsyncMethod_GetWaypoints<WithAsyncMethod_AddWaypoint<WithAsyncMethod_RemoveWaypoint<WithAsyncMethod_DoCommand<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMode() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::service::navigation::v1::GetModeRequest, ::viam::service::navigation::v1::GetModeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::service::navigation::v1::GetModeRequest* request, ::viam::service::navigation::v1::GetModeResponse* response) { return this->GetMode(context, request, response); }));}
    void SetMessageAllocatorFor_GetMode(
        ::grpc::MessageAllocator< ::viam::service::navigation::v1::GetModeRequest, ::viam::service::navigation::v1::GetModeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::service::navigation::v1::GetModeRequest, ::viam::service::navigation::v1::GetModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMode(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetModeRequest* /*request*/, ::viam::service::navigation::v1::GetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMode(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::service::navigation::v1::GetModeRequest* /*request*/, ::viam::service::navigation::v1::GetModeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetMode() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::service::navigation::v1::SetModeRequest, ::viam::service::navigation::v1::SetModeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::service::navigation::v1::SetModeRequest* request, ::viam::service::navigation::v1::SetModeResponse* response) { return this->SetMode(context, request, response); }));}
    void SetMessageAllocatorFor_SetMode(
        ::grpc::MessageAllocator< ::viam::service::navigation::v1::SetModeRequest, ::viam::service::navigation::v1::SetModeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::service::navigation::v1::SetModeRequest, ::viam::service::navigation::v1::SetModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMode(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::SetModeRequest* /*request*/, ::viam::service::navigation::v1::SetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMode(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::service::navigation::v1::SetModeRequest* /*request*/, ::viam::service::navigation::v1::SetModeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLocation() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::service::navigation::v1::GetLocationRequest, ::viam::service::navigation::v1::GetLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::service::navigation::v1::GetLocationRequest* request, ::viam::service::navigation::v1::GetLocationResponse* response) { return this->GetLocation(context, request, response); }));}
    void SetMessageAllocatorFor_GetLocation(
        ::grpc::MessageAllocator< ::viam::service::navigation::v1::GetLocationRequest, ::viam::service::navigation::v1::GetLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::service::navigation::v1::GetLocationRequest, ::viam::service::navigation::v1::GetLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetLocationRequest* /*request*/, ::viam::service::navigation::v1::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::service::navigation::v1::GetLocationRequest* /*request*/, ::viam::service::navigation::v1::GetLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWaypoints() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::service::navigation::v1::GetWaypointsRequest, ::viam::service::navigation::v1::GetWaypointsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::service::navigation::v1::GetWaypointsRequest* request, ::viam::service::navigation::v1::GetWaypointsResponse* response) { return this->GetWaypoints(context, request, response); }));}
    void SetMessageAllocatorFor_GetWaypoints(
        ::grpc::MessageAllocator< ::viam::service::navigation::v1::GetWaypointsRequest, ::viam::service::navigation::v1::GetWaypointsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::service::navigation::v1::GetWaypointsRequest, ::viam::service::navigation::v1::GetWaypointsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWaypoints(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetWaypointsRequest* /*request*/, ::viam::service::navigation::v1::GetWaypointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWaypoints(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::service::navigation::v1::GetWaypointsRequest* /*request*/, ::viam::service::navigation::v1::GetWaypointsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddWaypoint() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::service::navigation::v1::AddWaypointRequest, ::viam::service::navigation::v1::AddWaypointResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::service::navigation::v1::AddWaypointRequest* request, ::viam::service::navigation::v1::AddWaypointResponse* response) { return this->AddWaypoint(context, request, response); }));}
    void SetMessageAllocatorFor_AddWaypoint(
        ::grpc::MessageAllocator< ::viam::service::navigation::v1::AddWaypointRequest, ::viam::service::navigation::v1::AddWaypointResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::service::navigation::v1::AddWaypointRequest, ::viam::service::navigation::v1::AddWaypointResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddWaypoint(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::AddWaypointRequest* /*request*/, ::viam::service::navigation::v1::AddWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddWaypoint(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::service::navigation::v1::AddWaypointRequest* /*request*/, ::viam::service::navigation::v1::AddWaypointResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveWaypoint() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::service::navigation::v1::RemoveWaypointRequest, ::viam::service::navigation::v1::RemoveWaypointResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::service::navigation::v1::RemoveWaypointRequest* request, ::viam::service::navigation::v1::RemoveWaypointResponse* response) { return this->RemoveWaypoint(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveWaypoint(
        ::grpc::MessageAllocator< ::viam::service::navigation::v1::RemoveWaypointRequest, ::viam::service::navigation::v1::RemoveWaypointResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::service::navigation::v1::RemoveWaypointRequest, ::viam::service::navigation::v1::RemoveWaypointResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveWaypoint(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::RemoveWaypointRequest* /*request*/, ::viam::service::navigation::v1::RemoveWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveWaypoint(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::service::navigation::v1::RemoveWaypointRequest* /*request*/, ::viam::service::navigation::v1::RemoveWaypointResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) { return this->DoCommand(context, request, response); }));}
    void SetMessageAllocatorFor_DoCommand(
        ::grpc::MessageAllocator< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetMode<WithCallbackMethod_SetMode<WithCallbackMethod_GetLocation<WithCallbackMethod_GetWaypoints<WithCallbackMethod_AddWaypoint<WithCallbackMethod_RemoveWaypoint<WithCallbackMethod_DoCommand<Service > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMode(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetModeRequest* /*request*/, ::viam::service::navigation::v1::GetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMode() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMode(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::SetModeRequest* /*request*/, ::viam::service::navigation::v1::SetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLocation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetLocationRequest* /*request*/, ::viam::service::navigation::v1::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWaypoints() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWaypoints(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetWaypointsRequest* /*request*/, ::viam::service::navigation::v1::GetWaypointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddWaypoint() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AddWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddWaypoint(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::AddWaypointRequest* /*request*/, ::viam::service::navigation::v1::AddWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveWaypoint() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RemoveWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveWaypoint(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::RemoveWaypointRequest* /*request*/, ::viam::service::navigation::v1::RemoveWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoCommand() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMode() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMode(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetModeRequest* /*request*/, ::viam::service::navigation::v1::GetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMode() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMode(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::SetModeRequest* /*request*/, ::viam::service::navigation::v1::SetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLocation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetLocationRequest* /*request*/, ::viam::service::navigation::v1::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWaypoints() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWaypoints(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetWaypointsRequest* /*request*/, ::viam::service::navigation::v1::GetWaypointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWaypoints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddWaypoint() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AddWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddWaypoint(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::AddWaypointRequest* /*request*/, ::viam::service::navigation::v1::AddWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddWaypoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveWaypoint() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RemoveWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveWaypoint(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::RemoveWaypointRequest* /*request*/, ::viam::service::navigation::v1::RemoveWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveWaypoint(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoCommand() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMode() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMode(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetModeRequest* /*request*/, ::viam::service::navigation::v1::GetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetMode() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMode(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::SetModeRequest* /*request*/, ::viam::service::navigation::v1::SetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLocation() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetLocationRequest* /*request*/, ::viam::service::navigation::v1::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWaypoints() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWaypoints(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWaypoints(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetWaypointsRequest* /*request*/, ::viam::service::navigation::v1::GetWaypointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWaypoints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddWaypoint() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddWaypoint(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddWaypoint(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::AddWaypointRequest* /*request*/, ::viam::service::navigation::v1::AddWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddWaypoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveWaypoint() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveWaypoint(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveWaypoint(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::RemoveWaypointRequest* /*request*/, ::viam::service::navigation::v1::RemoveWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveWaypoint(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::service::navigation::v1::GetModeRequest, ::viam::service::navigation::v1::GetModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::service::navigation::v1::GetModeRequest, ::viam::service::navigation::v1::GetModeResponse>* streamer) {
                       return this->StreamedGetMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMode(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetModeRequest* /*request*/, ::viam::service::navigation::v1::GetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::service::navigation::v1::GetModeRequest,::viam::service::navigation::v1::GetModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMode() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::service::navigation::v1::SetModeRequest, ::viam::service::navigation::v1::SetModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::service::navigation::v1::SetModeRequest, ::viam::service::navigation::v1::SetModeResponse>* streamer) {
                       return this->StreamedSetMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMode(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::SetModeRequest* /*request*/, ::viam::service::navigation::v1::SetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::service::navigation::v1::SetModeRequest,::viam::service::navigation::v1::SetModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLocation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::service::navigation::v1::GetLocationRequest, ::viam::service::navigation::v1::GetLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::service::navigation::v1::GetLocationRequest, ::viam::service::navigation::v1::GetLocationResponse>* streamer) {
                       return this->StreamedGetLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetLocationRequest* /*request*/, ::viam::service::navigation::v1::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::service::navigation::v1::GetLocationRequest,::viam::service::navigation::v1::GetLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWaypoints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWaypoints() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::service::navigation::v1::GetWaypointsRequest, ::viam::service::navigation::v1::GetWaypointsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::service::navigation::v1::GetWaypointsRequest, ::viam::service::navigation::v1::GetWaypointsResponse>* streamer) {
                       return this->StreamedGetWaypoints(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWaypoints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWaypoints(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::GetWaypointsRequest* /*request*/, ::viam::service::navigation::v1::GetWaypointsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWaypoints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::service::navigation::v1::GetWaypointsRequest,::viam::service::navigation::v1::GetWaypointsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddWaypoint() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::service::navigation::v1::AddWaypointRequest, ::viam::service::navigation::v1::AddWaypointResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::service::navigation::v1::AddWaypointRequest, ::viam::service::navigation::v1::AddWaypointResponse>* streamer) {
                       return this->StreamedAddWaypoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddWaypoint(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::AddWaypointRequest* /*request*/, ::viam::service::navigation::v1::AddWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddWaypoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::service::navigation::v1::AddWaypointRequest,::viam::service::navigation::v1::AddWaypointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveWaypoint : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveWaypoint() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::service::navigation::v1::RemoveWaypointRequest, ::viam::service::navigation::v1::RemoveWaypointResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::service::navigation::v1::RemoveWaypointRequest, ::viam::service::navigation::v1::RemoveWaypointResponse>* streamer) {
                       return this->StreamedRemoveWaypoint(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveWaypoint() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveWaypoint(::grpc::ServerContext* /*context*/, const ::viam::service::navigation::v1::RemoveWaypointRequest* /*request*/, ::viam::service::navigation::v1::RemoveWaypointResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveWaypoint(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::service::navigation::v1::RemoveWaypointRequest,::viam::service::navigation::v1::RemoveWaypointResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoCommand() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* streamer) {
                       return this->StreamedDoCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::common::v1::DoCommandRequest,::viam::common::v1::DoCommandResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMode<WithStreamedUnaryMethod_SetMode<WithStreamedUnaryMethod_GetLocation<WithStreamedUnaryMethod_GetWaypoints<WithStreamedUnaryMethod_AddWaypoint<WithStreamedUnaryMethod_RemoveWaypoint<WithStreamedUnaryMethod_DoCommand<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMode<WithStreamedUnaryMethod_SetMode<WithStreamedUnaryMethod_GetLocation<WithStreamedUnaryMethod_GetWaypoints<WithStreamedUnaryMethod_AddWaypoint<WithStreamedUnaryMethod_RemoveWaypoint<WithStreamedUnaryMethod_DoCommand<Service > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace navigation
}  // namespace service
}  // namespace viam


#endif  // GRPC_service_2fnavigation_2fv1_2fnavigation_2eproto__INCLUDED
