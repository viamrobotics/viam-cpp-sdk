// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: robot/v1/robot.proto

#include "robot/v1/robot.pb.h"
#include "robot/v1/robot.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace viam {
namespace robot {
namespace v1 {

static const char* RobotService_method_names[] = {
  "/viam.robot.v1.RobotService/GetOperations",
  "/viam.robot.v1.RobotService/GetSessions",
  "/viam.robot.v1.RobotService/ResourceNames",
  "/viam.robot.v1.RobotService/ResourceRPCSubtypes",
  "/viam.robot.v1.RobotService/CancelOperation",
  "/viam.robot.v1.RobotService/BlockForOperation",
  "/viam.robot.v1.RobotService/DiscoverComponents",
  "/viam.robot.v1.RobotService/FrameSystemConfig",
  "/viam.robot.v1.RobotService/TransformPose",
  "/viam.robot.v1.RobotService/TransformPCD",
  "/viam.robot.v1.RobotService/GetStatus",
  "/viam.robot.v1.RobotService/StreamStatus",
  "/viam.robot.v1.RobotService/StopAll",
  "/viam.robot.v1.RobotService/StartSession",
  "/viam.robot.v1.RobotService/SendSessionHeartbeat",
};

std::unique_ptr< RobotService::Stub> RobotService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RobotService::Stub> stub(new RobotService::Stub(channel, options));
  return stub;
}

RobotService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetOperations_(RobotService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSessions_(RobotService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResourceNames_(RobotService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResourceRPCSubtypes_(RobotService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOperation_(RobotService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BlockForOperation_(RobotService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DiscoverComponents_(RobotService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FrameSystemConfig_(RobotService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransformPose_(RobotService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TransformPCD_(RobotService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStatus_(RobotService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamStatus_(RobotService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StopAll_(RobotService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartSession_(RobotService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendSessionHeartbeat_(RobotService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RobotService::Stub::GetOperations(::grpc::ClientContext* context, const ::viam::robot::v1::GetOperationsRequest& request, ::viam::robot::v1::GetOperationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::GetOperationsRequest, ::viam::robot::v1::GetOperationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOperations_, context, request, response);
}

void RobotService::Stub::async::GetOperations(::grpc::ClientContext* context, const ::viam::robot::v1::GetOperationsRequest* request, ::viam::robot::v1::GetOperationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::GetOperationsRequest, ::viam::robot::v1::GetOperationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOperations_, context, request, response, std::move(f));
}

void RobotService::Stub::async::GetOperations(::grpc::ClientContext* context, const ::viam::robot::v1::GetOperationsRequest* request, ::viam::robot::v1::GetOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOperations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::GetOperationsResponse>* RobotService::Stub::PrepareAsyncGetOperationsRaw(::grpc::ClientContext* context, const ::viam::robot::v1::GetOperationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::GetOperationsResponse, ::viam::robot::v1::GetOperationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOperations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::GetOperationsResponse>* RobotService::Stub::AsyncGetOperationsRaw(::grpc::ClientContext* context, const ::viam::robot::v1::GetOperationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOperationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::GetSessions(::grpc::ClientContext* context, const ::viam::robot::v1::GetSessionsRequest& request, ::viam::robot::v1::GetSessionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::GetSessionsRequest, ::viam::robot::v1::GetSessionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSessions_, context, request, response);
}

void RobotService::Stub::async::GetSessions(::grpc::ClientContext* context, const ::viam::robot::v1::GetSessionsRequest* request, ::viam::robot::v1::GetSessionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::GetSessionsRequest, ::viam::robot::v1::GetSessionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSessions_, context, request, response, std::move(f));
}

void RobotService::Stub::async::GetSessions(::grpc::ClientContext* context, const ::viam::robot::v1::GetSessionsRequest* request, ::viam::robot::v1::GetSessionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSessions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::GetSessionsResponse>* RobotService::Stub::PrepareAsyncGetSessionsRaw(::grpc::ClientContext* context, const ::viam::robot::v1::GetSessionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::GetSessionsResponse, ::viam::robot::v1::GetSessionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSessions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::GetSessionsResponse>* RobotService::Stub::AsyncGetSessionsRaw(::grpc::ClientContext* context, const ::viam::robot::v1::GetSessionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSessionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::ResourceNames(::grpc::ClientContext* context, const ::viam::robot::v1::ResourceNamesRequest& request, ::viam::robot::v1::ResourceNamesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::ResourceNamesRequest, ::viam::robot::v1::ResourceNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResourceNames_, context, request, response);
}

void RobotService::Stub::async::ResourceNames(::grpc::ClientContext* context, const ::viam::robot::v1::ResourceNamesRequest* request, ::viam::robot::v1::ResourceNamesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::ResourceNamesRequest, ::viam::robot::v1::ResourceNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResourceNames_, context, request, response, std::move(f));
}

void RobotService::Stub::async::ResourceNames(::grpc::ClientContext* context, const ::viam::robot::v1::ResourceNamesRequest* request, ::viam::robot::v1::ResourceNamesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResourceNames_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::ResourceNamesResponse>* RobotService::Stub::PrepareAsyncResourceNamesRaw(::grpc::ClientContext* context, const ::viam::robot::v1::ResourceNamesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::ResourceNamesResponse, ::viam::robot::v1::ResourceNamesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResourceNames_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::ResourceNamesResponse>* RobotService::Stub::AsyncResourceNamesRaw(::grpc::ClientContext* context, const ::viam::robot::v1::ResourceNamesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResourceNamesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::ResourceRPCSubtypes(::grpc::ClientContext* context, const ::viam::robot::v1::ResourceRPCSubtypesRequest& request, ::viam::robot::v1::ResourceRPCSubtypesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::ResourceRPCSubtypesRequest, ::viam::robot::v1::ResourceRPCSubtypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResourceRPCSubtypes_, context, request, response);
}

void RobotService::Stub::async::ResourceRPCSubtypes(::grpc::ClientContext* context, const ::viam::robot::v1::ResourceRPCSubtypesRequest* request, ::viam::robot::v1::ResourceRPCSubtypesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::ResourceRPCSubtypesRequest, ::viam::robot::v1::ResourceRPCSubtypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResourceRPCSubtypes_, context, request, response, std::move(f));
}

void RobotService::Stub::async::ResourceRPCSubtypes(::grpc::ClientContext* context, const ::viam::robot::v1::ResourceRPCSubtypesRequest* request, ::viam::robot::v1::ResourceRPCSubtypesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResourceRPCSubtypes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::ResourceRPCSubtypesResponse>* RobotService::Stub::PrepareAsyncResourceRPCSubtypesRaw(::grpc::ClientContext* context, const ::viam::robot::v1::ResourceRPCSubtypesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::ResourceRPCSubtypesResponse, ::viam::robot::v1::ResourceRPCSubtypesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResourceRPCSubtypes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::ResourceRPCSubtypesResponse>* RobotService::Stub::AsyncResourceRPCSubtypesRaw(::grpc::ClientContext* context, const ::viam::robot::v1::ResourceRPCSubtypesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResourceRPCSubtypesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::CancelOperation(::grpc::ClientContext* context, const ::viam::robot::v1::CancelOperationRequest& request, ::viam::robot::v1::CancelOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::CancelOperationRequest, ::viam::robot::v1::CancelOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelOperation_, context, request, response);
}

void RobotService::Stub::async::CancelOperation(::grpc::ClientContext* context, const ::viam::robot::v1::CancelOperationRequest* request, ::viam::robot::v1::CancelOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::CancelOperationRequest, ::viam::robot::v1::CancelOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOperation_, context, request, response, std::move(f));
}

void RobotService::Stub::async::CancelOperation(::grpc::ClientContext* context, const ::viam::robot::v1::CancelOperationRequest* request, ::viam::robot::v1::CancelOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOperation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::CancelOperationResponse>* RobotService::Stub::PrepareAsyncCancelOperationRaw(::grpc::ClientContext* context, const ::viam::robot::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::CancelOperationResponse, ::viam::robot::v1::CancelOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelOperation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::CancelOperationResponse>* RobotService::Stub::AsyncCancelOperationRaw(::grpc::ClientContext* context, const ::viam::robot::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelOperationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::BlockForOperation(::grpc::ClientContext* context, const ::viam::robot::v1::BlockForOperationRequest& request, ::viam::robot::v1::BlockForOperationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::BlockForOperationRequest, ::viam::robot::v1::BlockForOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BlockForOperation_, context, request, response);
}

void RobotService::Stub::async::BlockForOperation(::grpc::ClientContext* context, const ::viam::robot::v1::BlockForOperationRequest* request, ::viam::robot::v1::BlockForOperationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::BlockForOperationRequest, ::viam::robot::v1::BlockForOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BlockForOperation_, context, request, response, std::move(f));
}

void RobotService::Stub::async::BlockForOperation(::grpc::ClientContext* context, const ::viam::robot::v1::BlockForOperationRequest* request, ::viam::robot::v1::BlockForOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BlockForOperation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::BlockForOperationResponse>* RobotService::Stub::PrepareAsyncBlockForOperationRaw(::grpc::ClientContext* context, const ::viam::robot::v1::BlockForOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::BlockForOperationResponse, ::viam::robot::v1::BlockForOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BlockForOperation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::BlockForOperationResponse>* RobotService::Stub::AsyncBlockForOperationRaw(::grpc::ClientContext* context, const ::viam::robot::v1::BlockForOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBlockForOperationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::DiscoverComponents(::grpc::ClientContext* context, const ::viam::robot::v1::DiscoverComponentsRequest& request, ::viam::robot::v1::DiscoverComponentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::DiscoverComponentsRequest, ::viam::robot::v1::DiscoverComponentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DiscoverComponents_, context, request, response);
}

void RobotService::Stub::async::DiscoverComponents(::grpc::ClientContext* context, const ::viam::robot::v1::DiscoverComponentsRequest* request, ::viam::robot::v1::DiscoverComponentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::DiscoverComponentsRequest, ::viam::robot::v1::DiscoverComponentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DiscoverComponents_, context, request, response, std::move(f));
}

void RobotService::Stub::async::DiscoverComponents(::grpc::ClientContext* context, const ::viam::robot::v1::DiscoverComponentsRequest* request, ::viam::robot::v1::DiscoverComponentsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DiscoverComponents_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::DiscoverComponentsResponse>* RobotService::Stub::PrepareAsyncDiscoverComponentsRaw(::grpc::ClientContext* context, const ::viam::robot::v1::DiscoverComponentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::DiscoverComponentsResponse, ::viam::robot::v1::DiscoverComponentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DiscoverComponents_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::DiscoverComponentsResponse>* RobotService::Stub::AsyncDiscoverComponentsRaw(::grpc::ClientContext* context, const ::viam::robot::v1::DiscoverComponentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDiscoverComponentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::FrameSystemConfig(::grpc::ClientContext* context, const ::viam::robot::v1::FrameSystemConfigRequest& request, ::viam::robot::v1::FrameSystemConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::FrameSystemConfigRequest, ::viam::robot::v1::FrameSystemConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FrameSystemConfig_, context, request, response);
}

void RobotService::Stub::async::FrameSystemConfig(::grpc::ClientContext* context, const ::viam::robot::v1::FrameSystemConfigRequest* request, ::viam::robot::v1::FrameSystemConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::FrameSystemConfigRequest, ::viam::robot::v1::FrameSystemConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrameSystemConfig_, context, request, response, std::move(f));
}

void RobotService::Stub::async::FrameSystemConfig(::grpc::ClientContext* context, const ::viam::robot::v1::FrameSystemConfigRequest* request, ::viam::robot::v1::FrameSystemConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FrameSystemConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::FrameSystemConfigResponse>* RobotService::Stub::PrepareAsyncFrameSystemConfigRaw(::grpc::ClientContext* context, const ::viam::robot::v1::FrameSystemConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::FrameSystemConfigResponse, ::viam::robot::v1::FrameSystemConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FrameSystemConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::FrameSystemConfigResponse>* RobotService::Stub::AsyncFrameSystemConfigRaw(::grpc::ClientContext* context, const ::viam::robot::v1::FrameSystemConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFrameSystemConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::TransformPose(::grpc::ClientContext* context, const ::viam::robot::v1::TransformPoseRequest& request, ::viam::robot::v1::TransformPoseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::TransformPoseRequest, ::viam::robot::v1::TransformPoseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TransformPose_, context, request, response);
}

void RobotService::Stub::async::TransformPose(::grpc::ClientContext* context, const ::viam::robot::v1::TransformPoseRequest* request, ::viam::robot::v1::TransformPoseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::TransformPoseRequest, ::viam::robot::v1::TransformPoseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransformPose_, context, request, response, std::move(f));
}

void RobotService::Stub::async::TransformPose(::grpc::ClientContext* context, const ::viam::robot::v1::TransformPoseRequest* request, ::viam::robot::v1::TransformPoseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransformPose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::TransformPoseResponse>* RobotService::Stub::PrepareAsyncTransformPoseRaw(::grpc::ClientContext* context, const ::viam::robot::v1::TransformPoseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::TransformPoseResponse, ::viam::robot::v1::TransformPoseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TransformPose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::TransformPoseResponse>* RobotService::Stub::AsyncTransformPoseRaw(::grpc::ClientContext* context, const ::viam::robot::v1::TransformPoseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransformPoseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::TransformPCD(::grpc::ClientContext* context, const ::viam::robot::v1::TransformPCDRequest& request, ::viam::robot::v1::TransformPCDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::TransformPCDRequest, ::viam::robot::v1::TransformPCDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TransformPCD_, context, request, response);
}

void RobotService::Stub::async::TransformPCD(::grpc::ClientContext* context, const ::viam::robot::v1::TransformPCDRequest* request, ::viam::robot::v1::TransformPCDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::TransformPCDRequest, ::viam::robot::v1::TransformPCDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransformPCD_, context, request, response, std::move(f));
}

void RobotService::Stub::async::TransformPCD(::grpc::ClientContext* context, const ::viam::robot::v1::TransformPCDRequest* request, ::viam::robot::v1::TransformPCDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TransformPCD_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::TransformPCDResponse>* RobotService::Stub::PrepareAsyncTransformPCDRaw(::grpc::ClientContext* context, const ::viam::robot::v1::TransformPCDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::TransformPCDResponse, ::viam::robot::v1::TransformPCDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TransformPCD_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::TransformPCDResponse>* RobotService::Stub::AsyncTransformPCDRaw(::grpc::ClientContext* context, const ::viam::robot::v1::TransformPCDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTransformPCDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::GetStatus(::grpc::ClientContext* context, const ::viam::robot::v1::GetStatusRequest& request, ::viam::robot::v1::GetStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::GetStatusRequest, ::viam::robot::v1::GetStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStatus_, context, request, response);
}

void RobotService::Stub::async::GetStatus(::grpc::ClientContext* context, const ::viam::robot::v1::GetStatusRequest* request, ::viam::robot::v1::GetStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::GetStatusRequest, ::viam::robot::v1::GetStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, std::move(f));
}

void RobotService::Stub::async::GetStatus(::grpc::ClientContext* context, const ::viam::robot::v1::GetStatusRequest* request, ::viam::robot::v1::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::GetStatusResponse>* RobotService::Stub::PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::viam::robot::v1::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::GetStatusResponse, ::viam::robot::v1::GetStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::GetStatusResponse>* RobotService::Stub::AsyncGetStatusRaw(::grpc::ClientContext* context, const ::viam::robot::v1::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::viam::robot::v1::StreamStatusResponse>* RobotService::Stub::StreamStatusRaw(::grpc::ClientContext* context, const ::viam::robot::v1::StreamStatusRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::viam::robot::v1::StreamStatusResponse>::Create(channel_.get(), rpcmethod_StreamStatus_, context, request);
}

void RobotService::Stub::async::StreamStatus(::grpc::ClientContext* context, const ::viam::robot::v1::StreamStatusRequest* request, ::grpc::ClientReadReactor< ::viam::robot::v1::StreamStatusResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::viam::robot::v1::StreamStatusResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::viam::robot::v1::StreamStatusResponse>* RobotService::Stub::AsyncStreamStatusRaw(::grpc::ClientContext* context, const ::viam::robot::v1::StreamStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::viam::robot::v1::StreamStatusResponse>::Create(channel_.get(), cq, rpcmethod_StreamStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::viam::robot::v1::StreamStatusResponse>* RobotService::Stub::PrepareAsyncStreamStatusRaw(::grpc::ClientContext* context, const ::viam::robot::v1::StreamStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::viam::robot::v1::StreamStatusResponse>::Create(channel_.get(), cq, rpcmethod_StreamStatus_, context, request, false, nullptr);
}

::grpc::Status RobotService::Stub::StopAll(::grpc::ClientContext* context, const ::viam::robot::v1::StopAllRequest& request, ::viam::robot::v1::StopAllResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::StopAllRequest, ::viam::robot::v1::StopAllResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopAll_, context, request, response);
}

void RobotService::Stub::async::StopAll(::grpc::ClientContext* context, const ::viam::robot::v1::StopAllRequest* request, ::viam::robot::v1::StopAllResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::StopAllRequest, ::viam::robot::v1::StopAllResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopAll_, context, request, response, std::move(f));
}

void RobotService::Stub::async::StopAll(::grpc::ClientContext* context, const ::viam::robot::v1::StopAllRequest* request, ::viam::robot::v1::StopAllResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopAll_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::StopAllResponse>* RobotService::Stub::PrepareAsyncStopAllRaw(::grpc::ClientContext* context, const ::viam::robot::v1::StopAllRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::StopAllResponse, ::viam::robot::v1::StopAllRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopAll_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::StopAllResponse>* RobotService::Stub::AsyncStopAllRaw(::grpc::ClientContext* context, const ::viam::robot::v1::StopAllRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopAllRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::StartSession(::grpc::ClientContext* context, const ::viam::robot::v1::StartSessionRequest& request, ::viam::robot::v1::StartSessionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::StartSessionRequest, ::viam::robot::v1::StartSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartSession_, context, request, response);
}

void RobotService::Stub::async::StartSession(::grpc::ClientContext* context, const ::viam::robot::v1::StartSessionRequest* request, ::viam::robot::v1::StartSessionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::StartSessionRequest, ::viam::robot::v1::StartSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartSession_, context, request, response, std::move(f));
}

void RobotService::Stub::async::StartSession(::grpc::ClientContext* context, const ::viam::robot::v1::StartSessionRequest* request, ::viam::robot::v1::StartSessionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartSession_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::StartSessionResponse>* RobotService::Stub::PrepareAsyncStartSessionRaw(::grpc::ClientContext* context, const ::viam::robot::v1::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::StartSessionResponse, ::viam::robot::v1::StartSessionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartSession_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::StartSessionResponse>* RobotService::Stub::AsyncStartSessionRaw(::grpc::ClientContext* context, const ::viam::robot::v1::StartSessionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartSessionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotService::Stub::SendSessionHeartbeat(::grpc::ClientContext* context, const ::viam::robot::v1::SendSessionHeartbeatRequest& request, ::viam::robot::v1::SendSessionHeartbeatResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::viam::robot::v1::SendSessionHeartbeatRequest, ::viam::robot::v1::SendSessionHeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendSessionHeartbeat_, context, request, response);
}

void RobotService::Stub::async::SendSessionHeartbeat(::grpc::ClientContext* context, const ::viam::robot::v1::SendSessionHeartbeatRequest* request, ::viam::robot::v1::SendSessionHeartbeatResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::viam::robot::v1::SendSessionHeartbeatRequest, ::viam::robot::v1::SendSessionHeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSessionHeartbeat_, context, request, response, std::move(f));
}

void RobotService::Stub::async::SendSessionHeartbeat(::grpc::ClientContext* context, const ::viam::robot::v1::SendSessionHeartbeatRequest* request, ::viam::robot::v1::SendSessionHeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendSessionHeartbeat_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::SendSessionHeartbeatResponse>* RobotService::Stub::PrepareAsyncSendSessionHeartbeatRaw(::grpc::ClientContext* context, const ::viam::robot::v1::SendSessionHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::viam::robot::v1::SendSessionHeartbeatResponse, ::viam::robot::v1::SendSessionHeartbeatRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendSessionHeartbeat_, context, request);
}

::grpc::ClientAsyncResponseReader< ::viam::robot::v1::SendSessionHeartbeatResponse>* RobotService::Stub::AsyncSendSessionHeartbeatRaw(::grpc::ClientContext* context, const ::viam::robot::v1::SendSessionHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendSessionHeartbeatRaw(context, request, cq);
  result->StartCall();
  return result;
}

RobotService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::GetOperationsRequest, ::viam::robot::v1::GetOperationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::GetOperationsRequest* req,
             ::viam::robot::v1::GetOperationsResponse* resp) {
               return service->GetOperations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::GetSessionsRequest, ::viam::robot::v1::GetSessionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::GetSessionsRequest* req,
             ::viam::robot::v1::GetSessionsResponse* resp) {
               return service->GetSessions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::ResourceNamesRequest, ::viam::robot::v1::ResourceNamesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::ResourceNamesRequest* req,
             ::viam::robot::v1::ResourceNamesResponse* resp) {
               return service->ResourceNames(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::ResourceRPCSubtypesRequest, ::viam::robot::v1::ResourceRPCSubtypesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::ResourceRPCSubtypesRequest* req,
             ::viam::robot::v1::ResourceRPCSubtypesResponse* resp) {
               return service->ResourceRPCSubtypes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::CancelOperationRequest, ::viam::robot::v1::CancelOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::CancelOperationRequest* req,
             ::viam::robot::v1::CancelOperationResponse* resp) {
               return service->CancelOperation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::BlockForOperationRequest, ::viam::robot::v1::BlockForOperationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::BlockForOperationRequest* req,
             ::viam::robot::v1::BlockForOperationResponse* resp) {
               return service->BlockForOperation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::DiscoverComponentsRequest, ::viam::robot::v1::DiscoverComponentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::DiscoverComponentsRequest* req,
             ::viam::robot::v1::DiscoverComponentsResponse* resp) {
               return service->DiscoverComponents(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::FrameSystemConfigRequest, ::viam::robot::v1::FrameSystemConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::FrameSystemConfigRequest* req,
             ::viam::robot::v1::FrameSystemConfigResponse* resp) {
               return service->FrameSystemConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::TransformPoseRequest, ::viam::robot::v1::TransformPoseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::TransformPoseRequest* req,
             ::viam::robot::v1::TransformPoseResponse* resp) {
               return service->TransformPose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::TransformPCDRequest, ::viam::robot::v1::TransformPCDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::TransformPCDRequest* req,
             ::viam::robot::v1::TransformPCDResponse* resp) {
               return service->TransformPCD(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::GetStatusRequest, ::viam::robot::v1::GetStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::GetStatusRequest* req,
             ::viam::robot::v1::GetStatusResponse* resp) {
               return service->GetStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RobotService::Service, ::viam::robot::v1::StreamStatusRequest, ::viam::robot::v1::StreamStatusResponse>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::StreamStatusRequest* req,
             ::grpc::ServerWriter<::viam::robot::v1::StreamStatusResponse>* writer) {
               return service->StreamStatus(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::StopAllRequest, ::viam::robot::v1::StopAllResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::StopAllRequest* req,
             ::viam::robot::v1::StopAllResponse* resp) {
               return service->StopAll(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::StartSessionRequest, ::viam::robot::v1::StartSessionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::StartSessionRequest* req,
             ::viam::robot::v1::StartSessionResponse* resp) {
               return service->StartSession(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotService::Service, ::viam::robot::v1::SendSessionHeartbeatRequest, ::viam::robot::v1::SendSessionHeartbeatResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::viam::robot::v1::SendSessionHeartbeatRequest* req,
             ::viam::robot::v1::SendSessionHeartbeatResponse* resp) {
               return service->SendSessionHeartbeat(ctx, req, resp);
             }, this)));
}

RobotService::Service::~Service() {
}

::grpc::Status RobotService::Service::GetOperations(::grpc::ServerContext* context, const ::viam::robot::v1::GetOperationsRequest* request, ::viam::robot::v1::GetOperationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::GetSessions(::grpc::ServerContext* context, const ::viam::robot::v1::GetSessionsRequest* request, ::viam::robot::v1::GetSessionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::ResourceNames(::grpc::ServerContext* context, const ::viam::robot::v1::ResourceNamesRequest* request, ::viam::robot::v1::ResourceNamesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::ResourceRPCSubtypes(::grpc::ServerContext* context, const ::viam::robot::v1::ResourceRPCSubtypesRequest* request, ::viam::robot::v1::ResourceRPCSubtypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::CancelOperation(::grpc::ServerContext* context, const ::viam::robot::v1::CancelOperationRequest* request, ::viam::robot::v1::CancelOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::BlockForOperation(::grpc::ServerContext* context, const ::viam::robot::v1::BlockForOperationRequest* request, ::viam::robot::v1::BlockForOperationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::DiscoverComponents(::grpc::ServerContext* context, const ::viam::robot::v1::DiscoverComponentsRequest* request, ::viam::robot::v1::DiscoverComponentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::FrameSystemConfig(::grpc::ServerContext* context, const ::viam::robot::v1::FrameSystemConfigRequest* request, ::viam::robot::v1::FrameSystemConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::TransformPose(::grpc::ServerContext* context, const ::viam::robot::v1::TransformPoseRequest* request, ::viam::robot::v1::TransformPoseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::TransformPCD(::grpc::ServerContext* context, const ::viam::robot::v1::TransformPCDRequest* request, ::viam::robot::v1::TransformPCDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::GetStatus(::grpc::ServerContext* context, const ::viam::robot::v1::GetStatusRequest* request, ::viam::robot::v1::GetStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::StreamStatus(::grpc::ServerContext* context, const ::viam::robot::v1::StreamStatusRequest* request, ::grpc::ServerWriter< ::viam::robot::v1::StreamStatusResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::StopAll(::grpc::ServerContext* context, const ::viam::robot::v1::StopAllRequest* request, ::viam::robot::v1::StopAllResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::StartSession(::grpc::ServerContext* context, const ::viam::robot::v1::StartSessionRequest* request, ::viam::robot::v1::StartSessionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotService::Service::SendSessionHeartbeat(::grpc::ServerContext* context, const ::viam::robot::v1::SendSessionHeartbeatRequest* request, ::viam::robot::v1::SendSessionHeartbeatResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace viam
}  // namespace robot
}  // namespace v1

