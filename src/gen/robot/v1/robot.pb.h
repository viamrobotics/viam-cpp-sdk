// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot/v1/robot.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_robot_2fv1_2frobot_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_robot_2fv1_2frobot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_robot_2fv1_2frobot_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_robot_2fv1_2frobot_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_2fv1_2frobot_2eproto;
namespace viam {
namespace robot {
namespace v1 {
class BlockForOperationRequest;
struct BlockForOperationRequestDefaultTypeInternal;
extern BlockForOperationRequestDefaultTypeInternal _BlockForOperationRequest_default_instance_;
class BlockForOperationResponse;
struct BlockForOperationResponseDefaultTypeInternal;
extern BlockForOperationResponseDefaultTypeInternal _BlockForOperationResponse_default_instance_;
class CancelOperationRequest;
struct CancelOperationRequestDefaultTypeInternal;
extern CancelOperationRequestDefaultTypeInternal _CancelOperationRequest_default_instance_;
class CancelOperationResponse;
struct CancelOperationResponseDefaultTypeInternal;
extern CancelOperationResponseDefaultTypeInternal _CancelOperationResponse_default_instance_;
class DiscoverComponentsRequest;
struct DiscoverComponentsRequestDefaultTypeInternal;
extern DiscoverComponentsRequestDefaultTypeInternal _DiscoverComponentsRequest_default_instance_;
class DiscoverComponentsResponse;
struct DiscoverComponentsResponseDefaultTypeInternal;
extern DiscoverComponentsResponseDefaultTypeInternal _DiscoverComponentsResponse_default_instance_;
class Discovery;
struct DiscoveryDefaultTypeInternal;
extern DiscoveryDefaultTypeInternal _Discovery_default_instance_;
class DiscoveryQuery;
struct DiscoveryQueryDefaultTypeInternal;
extern DiscoveryQueryDefaultTypeInternal _DiscoveryQuery_default_instance_;
class FrameSystemConfig;
struct FrameSystemConfigDefaultTypeInternal;
extern FrameSystemConfigDefaultTypeInternal _FrameSystemConfig_default_instance_;
class FrameSystemConfigRequest;
struct FrameSystemConfigRequestDefaultTypeInternal;
extern FrameSystemConfigRequestDefaultTypeInternal _FrameSystemConfigRequest_default_instance_;
class FrameSystemConfigResponse;
struct FrameSystemConfigResponseDefaultTypeInternal;
extern FrameSystemConfigResponseDefaultTypeInternal _FrameSystemConfigResponse_default_instance_;
class GetOperationsRequest;
struct GetOperationsRequestDefaultTypeInternal;
extern GetOperationsRequestDefaultTypeInternal _GetOperationsRequest_default_instance_;
class GetOperationsResponse;
struct GetOperationsResponseDefaultTypeInternal;
extern GetOperationsResponseDefaultTypeInternal _GetOperationsResponse_default_instance_;
class GetStatusRequest;
struct GetStatusRequestDefaultTypeInternal;
extern GetStatusRequestDefaultTypeInternal _GetStatusRequest_default_instance_;
class GetStatusResponse;
struct GetStatusResponseDefaultTypeInternal;
extern GetStatusResponseDefaultTypeInternal _GetStatusResponse_default_instance_;
class Operation;
struct OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class ResourceNamesRequest;
struct ResourceNamesRequestDefaultTypeInternal;
extern ResourceNamesRequestDefaultTypeInternal _ResourceNamesRequest_default_instance_;
class ResourceNamesResponse;
struct ResourceNamesResponseDefaultTypeInternal;
extern ResourceNamesResponseDefaultTypeInternal _ResourceNamesResponse_default_instance_;
class ResourceRPCSubtype;
struct ResourceRPCSubtypeDefaultTypeInternal;
extern ResourceRPCSubtypeDefaultTypeInternal _ResourceRPCSubtype_default_instance_;
class ResourceRPCSubtypesRequest;
struct ResourceRPCSubtypesRequestDefaultTypeInternal;
extern ResourceRPCSubtypesRequestDefaultTypeInternal _ResourceRPCSubtypesRequest_default_instance_;
class ResourceRPCSubtypesResponse;
struct ResourceRPCSubtypesResponseDefaultTypeInternal;
extern ResourceRPCSubtypesResponseDefaultTypeInternal _ResourceRPCSubtypesResponse_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StopAllRequest;
struct StopAllRequestDefaultTypeInternal;
extern StopAllRequestDefaultTypeInternal _StopAllRequest_default_instance_;
class StopAllResponse;
struct StopAllResponseDefaultTypeInternal;
extern StopAllResponseDefaultTypeInternal _StopAllResponse_default_instance_;
class StopExtraParameters;
struct StopExtraParametersDefaultTypeInternal;
extern StopExtraParametersDefaultTypeInternal _StopExtraParameters_default_instance_;
class StreamStatusRequest;
struct StreamStatusRequestDefaultTypeInternal;
extern StreamStatusRequestDefaultTypeInternal _StreamStatusRequest_default_instance_;
class StreamStatusResponse;
struct StreamStatusResponseDefaultTypeInternal;
extern StreamStatusResponseDefaultTypeInternal _StreamStatusResponse_default_instance_;
class TransformPoseRequest;
struct TransformPoseRequestDefaultTypeInternal;
extern TransformPoseRequestDefaultTypeInternal _TransformPoseRequest_default_instance_;
class TransformPoseResponse;
struct TransformPoseResponseDefaultTypeInternal;
extern TransformPoseResponseDefaultTypeInternal _TransformPoseResponse_default_instance_;
}  // namespace v1
}  // namespace robot
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::robot::v1::BlockForOperationRequest* Arena::CreateMaybeMessage<::viam::robot::v1::BlockForOperationRequest>(Arena*);
template<> ::viam::robot::v1::BlockForOperationResponse* Arena::CreateMaybeMessage<::viam::robot::v1::BlockForOperationResponse>(Arena*);
template<> ::viam::robot::v1::CancelOperationRequest* Arena::CreateMaybeMessage<::viam::robot::v1::CancelOperationRequest>(Arena*);
template<> ::viam::robot::v1::CancelOperationResponse* Arena::CreateMaybeMessage<::viam::robot::v1::CancelOperationResponse>(Arena*);
template<> ::viam::robot::v1::DiscoverComponentsRequest* Arena::CreateMaybeMessage<::viam::robot::v1::DiscoverComponentsRequest>(Arena*);
template<> ::viam::robot::v1::DiscoverComponentsResponse* Arena::CreateMaybeMessage<::viam::robot::v1::DiscoverComponentsResponse>(Arena*);
template<> ::viam::robot::v1::Discovery* Arena::CreateMaybeMessage<::viam::robot::v1::Discovery>(Arena*);
template<> ::viam::robot::v1::DiscoveryQuery* Arena::CreateMaybeMessage<::viam::robot::v1::DiscoveryQuery>(Arena*);
template<> ::viam::robot::v1::FrameSystemConfig* Arena::CreateMaybeMessage<::viam::robot::v1::FrameSystemConfig>(Arena*);
template<> ::viam::robot::v1::FrameSystemConfigRequest* Arena::CreateMaybeMessage<::viam::robot::v1::FrameSystemConfigRequest>(Arena*);
template<> ::viam::robot::v1::FrameSystemConfigResponse* Arena::CreateMaybeMessage<::viam::robot::v1::FrameSystemConfigResponse>(Arena*);
template<> ::viam::robot::v1::GetOperationsRequest* Arena::CreateMaybeMessage<::viam::robot::v1::GetOperationsRequest>(Arena*);
template<> ::viam::robot::v1::GetOperationsResponse* Arena::CreateMaybeMessage<::viam::robot::v1::GetOperationsResponse>(Arena*);
template<> ::viam::robot::v1::GetStatusRequest* Arena::CreateMaybeMessage<::viam::robot::v1::GetStatusRequest>(Arena*);
template<> ::viam::robot::v1::GetStatusResponse* Arena::CreateMaybeMessage<::viam::robot::v1::GetStatusResponse>(Arena*);
template<> ::viam::robot::v1::Operation* Arena::CreateMaybeMessage<::viam::robot::v1::Operation>(Arena*);
template<> ::viam::robot::v1::ResourceNamesRequest* Arena::CreateMaybeMessage<::viam::robot::v1::ResourceNamesRequest>(Arena*);
template<> ::viam::robot::v1::ResourceNamesResponse* Arena::CreateMaybeMessage<::viam::robot::v1::ResourceNamesResponse>(Arena*);
template<> ::viam::robot::v1::ResourceRPCSubtype* Arena::CreateMaybeMessage<::viam::robot::v1::ResourceRPCSubtype>(Arena*);
template<> ::viam::robot::v1::ResourceRPCSubtypesRequest* Arena::CreateMaybeMessage<::viam::robot::v1::ResourceRPCSubtypesRequest>(Arena*);
template<> ::viam::robot::v1::ResourceRPCSubtypesResponse* Arena::CreateMaybeMessage<::viam::robot::v1::ResourceRPCSubtypesResponse>(Arena*);
template<> ::viam::robot::v1::Status* Arena::CreateMaybeMessage<::viam::robot::v1::Status>(Arena*);
template<> ::viam::robot::v1::StopAllRequest* Arena::CreateMaybeMessage<::viam::robot::v1::StopAllRequest>(Arena*);
template<> ::viam::robot::v1::StopAllResponse* Arena::CreateMaybeMessage<::viam::robot::v1::StopAllResponse>(Arena*);
template<> ::viam::robot::v1::StopExtraParameters* Arena::CreateMaybeMessage<::viam::robot::v1::StopExtraParameters>(Arena*);
template<> ::viam::robot::v1::StreamStatusRequest* Arena::CreateMaybeMessage<::viam::robot::v1::StreamStatusRequest>(Arena*);
template<> ::viam::robot::v1::StreamStatusResponse* Arena::CreateMaybeMessage<::viam::robot::v1::StreamStatusResponse>(Arena*);
template<> ::viam::robot::v1::TransformPoseRequest* Arena::CreateMaybeMessage<::viam::robot::v1::TransformPoseRequest>(Arena*);
template<> ::viam::robot::v1::TransformPoseResponse* Arena::CreateMaybeMessage<::viam::robot::v1::TransformPoseResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace robot {
namespace v1 {

// ===================================================================

class FrameSystemConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.FrameSystemConfig) */ {
 public:
  inline FrameSystemConfig() : FrameSystemConfig(nullptr) {}
  ~FrameSystemConfig() override;
  explicit PROTOBUF_CONSTEXPR FrameSystemConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSystemConfig(const FrameSystemConfig& from);
  FrameSystemConfig(FrameSystemConfig&& from) noexcept
    : FrameSystemConfig() {
    *this = ::std::move(from);
  }

  inline FrameSystemConfig& operator=(const FrameSystemConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSystemConfig& operator=(FrameSystemConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSystemConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSystemConfig* internal_default_instance() {
    return reinterpret_cast<const FrameSystemConfig*>(
               &_FrameSystemConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FrameSystemConfig& a, FrameSystemConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSystemConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSystemConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameSystemConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameSystemConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameSystemConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrameSystemConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSystemConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.FrameSystemConfig";
  }
  protected:
  explicit FrameSystemConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kModelJsonFieldNumber = 3,
    kPoseInParentFrameFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes model_json = 3 [json_name = "modelJson"];
  void clear_model_json();
  const std::string& model_json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_json();
  PROTOBUF_NODISCARD std::string* release_model_json();
  void set_allocated_model_json(std::string* model_json);
  private:
  const std::string& _internal_model_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_json(const std::string& value);
  std::string* _internal_mutable_model_json();
  public:

  // .viam.common.v1.PoseInFrame pose_in_parent_frame = 2 [json_name = "poseInParentFrame"];
  bool has_pose_in_parent_frame() const;
  private:
  bool _internal_has_pose_in_parent_frame() const;
  public:
  void clear_pose_in_parent_frame();
  const ::viam::common::v1::PoseInFrame& pose_in_parent_frame() const;
  PROTOBUF_NODISCARD ::viam::common::v1::PoseInFrame* release_pose_in_parent_frame();
  ::viam::common::v1::PoseInFrame* mutable_pose_in_parent_frame();
  void set_allocated_pose_in_parent_frame(::viam::common::v1::PoseInFrame* pose_in_parent_frame);
  private:
  const ::viam::common::v1::PoseInFrame& _internal_pose_in_parent_frame() const;
  ::viam::common::v1::PoseInFrame* _internal_mutable_pose_in_parent_frame();
  public:
  void unsafe_arena_set_allocated_pose_in_parent_frame(
      ::viam::common::v1::PoseInFrame* pose_in_parent_frame);
  ::viam::common::v1::PoseInFrame* unsafe_arena_release_pose_in_parent_frame();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.FrameSystemConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_json_;
  ::viam::common::v1::PoseInFrame* pose_in_parent_frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class FrameSystemConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.FrameSystemConfigRequest) */ {
 public:
  inline FrameSystemConfigRequest() : FrameSystemConfigRequest(nullptr) {}
  ~FrameSystemConfigRequest() override;
  explicit PROTOBUF_CONSTEXPR FrameSystemConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSystemConfigRequest(const FrameSystemConfigRequest& from);
  FrameSystemConfigRequest(FrameSystemConfigRequest&& from) noexcept
    : FrameSystemConfigRequest() {
    *this = ::std::move(from);
  }

  inline FrameSystemConfigRequest& operator=(const FrameSystemConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSystemConfigRequest& operator=(FrameSystemConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSystemConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSystemConfigRequest* internal_default_instance() {
    return reinterpret_cast<const FrameSystemConfigRequest*>(
               &_FrameSystemConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FrameSystemConfigRequest& a, FrameSystemConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSystemConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSystemConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameSystemConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameSystemConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameSystemConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrameSystemConfigRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSystemConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.FrameSystemConfigRequest";
  }
  protected:
  explicit FrameSystemConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupplementalTransformsFieldNumber = 1,
  };
  // repeated .viam.common.v1.Transform supplemental_transforms = 1 [json_name = "supplementalTransforms"];
  int supplemental_transforms_size() const;
  private:
  int _internal_supplemental_transforms_size() const;
  public:
  void clear_supplemental_transforms();
  ::viam::common::v1::Transform* mutable_supplemental_transforms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >*
      mutable_supplemental_transforms();
  private:
  const ::viam::common::v1::Transform& _internal_supplemental_transforms(int index) const;
  ::viam::common::v1::Transform* _internal_add_supplemental_transforms();
  public:
  const ::viam::common::v1::Transform& supplemental_transforms(int index) const;
  ::viam::common::v1::Transform* add_supplemental_transforms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >&
      supplemental_transforms() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.FrameSystemConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform > supplemental_transforms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class FrameSystemConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.FrameSystemConfigResponse) */ {
 public:
  inline FrameSystemConfigResponse() : FrameSystemConfigResponse(nullptr) {}
  ~FrameSystemConfigResponse() override;
  explicit PROTOBUF_CONSTEXPR FrameSystemConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FrameSystemConfigResponse(const FrameSystemConfigResponse& from);
  FrameSystemConfigResponse(FrameSystemConfigResponse&& from) noexcept
    : FrameSystemConfigResponse() {
    *this = ::std::move(from);
  }

  inline FrameSystemConfigResponse& operator=(const FrameSystemConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameSystemConfigResponse& operator=(FrameSystemConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FrameSystemConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FrameSystemConfigResponse* internal_default_instance() {
    return reinterpret_cast<const FrameSystemConfigResponse*>(
               &_FrameSystemConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FrameSystemConfigResponse& a, FrameSystemConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameSystemConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameSystemConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FrameSystemConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FrameSystemConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FrameSystemConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FrameSystemConfigResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameSystemConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.FrameSystemConfigResponse";
  }
  protected:
  explicit FrameSystemConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameSystemConfigsFieldNumber = 1,
  };
  // repeated .viam.robot.v1.FrameSystemConfig frame_system_configs = 1 [json_name = "frameSystemConfigs"];
  int frame_system_configs_size() const;
  private:
  int _internal_frame_system_configs_size() const;
  public:
  void clear_frame_system_configs();
  ::viam::robot::v1::FrameSystemConfig* mutable_frame_system_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::FrameSystemConfig >*
      mutable_frame_system_configs();
  private:
  const ::viam::robot::v1::FrameSystemConfig& _internal_frame_system_configs(int index) const;
  ::viam::robot::v1::FrameSystemConfig* _internal_add_frame_system_configs();
  public:
  const ::viam::robot::v1::FrameSystemConfig& frame_system_configs(int index) const;
  ::viam::robot::v1::FrameSystemConfig* add_frame_system_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::FrameSystemConfig >&
      frame_system_configs() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.FrameSystemConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::FrameSystemConfig > frame_system_configs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class TransformPoseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.TransformPoseRequest) */ {
 public:
  inline TransformPoseRequest() : TransformPoseRequest(nullptr) {}
  ~TransformPoseRequest() override;
  explicit PROTOBUF_CONSTEXPR TransformPoseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformPoseRequest(const TransformPoseRequest& from);
  TransformPoseRequest(TransformPoseRequest&& from) noexcept
    : TransformPoseRequest() {
    *this = ::std::move(from);
  }

  inline TransformPoseRequest& operator=(const TransformPoseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformPoseRequest& operator=(TransformPoseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformPoseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformPoseRequest* internal_default_instance() {
    return reinterpret_cast<const TransformPoseRequest*>(
               &_TransformPoseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransformPoseRequest& a, TransformPoseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformPoseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformPoseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformPoseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformPoseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformPoseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransformPoseRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformPoseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.TransformPoseRequest";
  }
  protected:
  explicit TransformPoseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupplementalTransformsFieldNumber = 3,
    kDestinationFieldNumber = 2,
    kSourceFieldNumber = 1,
  };
  // repeated .viam.common.v1.Transform supplemental_transforms = 3 [json_name = "supplementalTransforms"];
  int supplemental_transforms_size() const;
  private:
  int _internal_supplemental_transforms_size() const;
  public:
  void clear_supplemental_transforms();
  ::viam::common::v1::Transform* mutable_supplemental_transforms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >*
      mutable_supplemental_transforms();
  private:
  const ::viam::common::v1::Transform& _internal_supplemental_transforms(int index) const;
  ::viam::common::v1::Transform* _internal_add_supplemental_transforms();
  public:
  const ::viam::common::v1::Transform& supplemental_transforms(int index) const;
  ::viam::common::v1::Transform* add_supplemental_transforms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >&
      supplemental_transforms() const;

  // string destination = 2 [json_name = "destination"];
  void clear_destination();
  const std::string& destination() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_destination(ArgT0&& arg0, ArgT... args);
  std::string* mutable_destination();
  PROTOBUF_NODISCARD std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // .viam.common.v1.PoseInFrame source = 1 [json_name = "source"];
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::viam::common::v1::PoseInFrame& source() const;
  PROTOBUF_NODISCARD ::viam::common::v1::PoseInFrame* release_source();
  ::viam::common::v1::PoseInFrame* mutable_source();
  void set_allocated_source(::viam::common::v1::PoseInFrame* source);
  private:
  const ::viam::common::v1::PoseInFrame& _internal_source() const;
  ::viam::common::v1::PoseInFrame* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::viam::common::v1::PoseInFrame* source);
  ::viam::common::v1::PoseInFrame* unsafe_arena_release_source();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.TransformPoseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform > supplemental_transforms_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::viam::common::v1::PoseInFrame* source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class TransformPoseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.TransformPoseResponse) */ {
 public:
  inline TransformPoseResponse() : TransformPoseResponse(nullptr) {}
  ~TransformPoseResponse() override;
  explicit PROTOBUF_CONSTEXPR TransformPoseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformPoseResponse(const TransformPoseResponse& from);
  TransformPoseResponse(TransformPoseResponse&& from) noexcept
    : TransformPoseResponse() {
    *this = ::std::move(from);
  }

  inline TransformPoseResponse& operator=(const TransformPoseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformPoseResponse& operator=(TransformPoseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformPoseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransformPoseResponse* internal_default_instance() {
    return reinterpret_cast<const TransformPoseResponse*>(
               &_TransformPoseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TransformPoseResponse& a, TransformPoseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformPoseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformPoseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformPoseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformPoseResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformPoseResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransformPoseResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformPoseResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.TransformPoseResponse";
  }
  protected:
  explicit TransformPoseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
  };
  // .viam.common.v1.PoseInFrame pose = 1 [json_name = "pose"];
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::viam::common::v1::PoseInFrame& pose() const;
  PROTOBUF_NODISCARD ::viam::common::v1::PoseInFrame* release_pose();
  ::viam::common::v1::PoseInFrame* mutable_pose();
  void set_allocated_pose(::viam::common::v1::PoseInFrame* pose);
  private:
  const ::viam::common::v1::PoseInFrame& _internal_pose() const;
  ::viam::common::v1::PoseInFrame* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::viam::common::v1::PoseInFrame* pose);
  ::viam::common::v1::PoseInFrame* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.TransformPoseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::PoseInFrame* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ResourceNamesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.ResourceNamesRequest) */ {
 public:
  inline ResourceNamesRequest() : ResourceNamesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ResourceNamesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceNamesRequest(const ResourceNamesRequest& from);
  ResourceNamesRequest(ResourceNamesRequest&& from) noexcept
    : ResourceNamesRequest() {
    *this = ::std::move(from);
  }

  inline ResourceNamesRequest& operator=(const ResourceNamesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceNamesRequest& operator=(ResourceNamesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceNamesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceNamesRequest* internal_default_instance() {
    return reinterpret_cast<const ResourceNamesRequest*>(
               &_ResourceNamesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResourceNamesRequest& a, ResourceNamesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceNamesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceNamesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceNamesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceNamesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResourceNamesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResourceNamesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ResourceNamesRequest";
  }
  protected:
  explicit ResourceNamesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ResourceNamesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ResourceNamesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.ResourceNamesResponse) */ {
 public:
  inline ResourceNamesResponse() : ResourceNamesResponse(nullptr) {}
  ~ResourceNamesResponse() override;
  explicit PROTOBUF_CONSTEXPR ResourceNamesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceNamesResponse(const ResourceNamesResponse& from);
  ResourceNamesResponse(ResourceNamesResponse&& from) noexcept
    : ResourceNamesResponse() {
    *this = ::std::move(from);
  }

  inline ResourceNamesResponse& operator=(const ResourceNamesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceNamesResponse& operator=(ResourceNamesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceNamesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceNamesResponse* internal_default_instance() {
    return reinterpret_cast<const ResourceNamesResponse*>(
               &_ResourceNamesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResourceNamesResponse& a, ResourceNamesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceNamesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceNamesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceNamesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceNamesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceNamesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceNamesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceNamesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ResourceNamesResponse";
  }
  protected:
  explicit ResourceNamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 1,
  };
  // repeated .viam.common.v1.ResourceName resources = 1 [json_name = "resources"];
  int resources_size() const;
  private:
  int _internal_resources_size() const;
  public:
  void clear_resources();
  ::viam::common::v1::ResourceName* mutable_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
      mutable_resources();
  private:
  const ::viam::common::v1::ResourceName& _internal_resources(int index) const;
  ::viam::common::v1::ResourceName* _internal_add_resources();
  public:
  const ::viam::common::v1::ResourceName& resources(int index) const;
  ::viam::common::v1::ResourceName* add_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
      resources() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ResourceNamesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName > resources_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ResourceRPCSubtype final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.ResourceRPCSubtype) */ {
 public:
  inline ResourceRPCSubtype() : ResourceRPCSubtype(nullptr) {}
  ~ResourceRPCSubtype() override;
  explicit PROTOBUF_CONSTEXPR ResourceRPCSubtype(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceRPCSubtype(const ResourceRPCSubtype& from);
  ResourceRPCSubtype(ResourceRPCSubtype&& from) noexcept
    : ResourceRPCSubtype() {
    *this = ::std::move(from);
  }

  inline ResourceRPCSubtype& operator=(const ResourceRPCSubtype& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceRPCSubtype& operator=(ResourceRPCSubtype&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceRPCSubtype& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceRPCSubtype* internal_default_instance() {
    return reinterpret_cast<const ResourceRPCSubtype*>(
               &_ResourceRPCSubtype_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ResourceRPCSubtype& a, ResourceRPCSubtype& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceRPCSubtype* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceRPCSubtype* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceRPCSubtype* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceRPCSubtype>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceRPCSubtype& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceRPCSubtype& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceRPCSubtype* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ResourceRPCSubtype";
  }
  protected:
  explicit ResourceRPCSubtype(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtoServiceFieldNumber = 2,
    kSubtypeFieldNumber = 1,
  };
  // string proto_service = 2 [json_name = "protoService"];
  void clear_proto_service();
  const std::string& proto_service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_service();
  PROTOBUF_NODISCARD std::string* release_proto_service();
  void set_allocated_proto_service(std::string* proto_service);
  private:
  const std::string& _internal_proto_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_service(const std::string& value);
  std::string* _internal_mutable_proto_service();
  public:

  // .viam.common.v1.ResourceName subtype = 1 [json_name = "subtype"];
  bool has_subtype() const;
  private:
  bool _internal_has_subtype() const;
  public:
  void clear_subtype();
  const ::viam::common::v1::ResourceName& subtype() const;
  PROTOBUF_NODISCARD ::viam::common::v1::ResourceName* release_subtype();
  ::viam::common::v1::ResourceName* mutable_subtype();
  void set_allocated_subtype(::viam::common::v1::ResourceName* subtype);
  private:
  const ::viam::common::v1::ResourceName& _internal_subtype() const;
  ::viam::common::v1::ResourceName* _internal_mutable_subtype();
  public:
  void unsafe_arena_set_allocated_subtype(
      ::viam::common::v1::ResourceName* subtype);
  ::viam::common::v1::ResourceName* unsafe_arena_release_subtype();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ResourceRPCSubtype)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_service_;
  ::viam::common::v1::ResourceName* subtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ResourceRPCSubtypesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.ResourceRPCSubtypesRequest) */ {
 public:
  inline ResourceRPCSubtypesRequest() : ResourceRPCSubtypesRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ResourceRPCSubtypesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceRPCSubtypesRequest(const ResourceRPCSubtypesRequest& from);
  ResourceRPCSubtypesRequest(ResourceRPCSubtypesRequest&& from) noexcept
    : ResourceRPCSubtypesRequest() {
    *this = ::std::move(from);
  }

  inline ResourceRPCSubtypesRequest& operator=(const ResourceRPCSubtypesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceRPCSubtypesRequest& operator=(ResourceRPCSubtypesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceRPCSubtypesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceRPCSubtypesRequest* internal_default_instance() {
    return reinterpret_cast<const ResourceRPCSubtypesRequest*>(
               &_ResourceRPCSubtypesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResourceRPCSubtypesRequest& a, ResourceRPCSubtypesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceRPCSubtypesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceRPCSubtypesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceRPCSubtypesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceRPCSubtypesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResourceRPCSubtypesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResourceRPCSubtypesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ResourceRPCSubtypesRequest";
  }
  protected:
  explicit ResourceRPCSubtypesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ResourceRPCSubtypesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class ResourceRPCSubtypesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.ResourceRPCSubtypesResponse) */ {
 public:
  inline ResourceRPCSubtypesResponse() : ResourceRPCSubtypesResponse(nullptr) {}
  ~ResourceRPCSubtypesResponse() override;
  explicit PROTOBUF_CONSTEXPR ResourceRPCSubtypesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceRPCSubtypesResponse(const ResourceRPCSubtypesResponse& from);
  ResourceRPCSubtypesResponse(ResourceRPCSubtypesResponse&& from) noexcept
    : ResourceRPCSubtypesResponse() {
    *this = ::std::move(from);
  }

  inline ResourceRPCSubtypesResponse& operator=(const ResourceRPCSubtypesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceRPCSubtypesResponse& operator=(ResourceRPCSubtypesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceRPCSubtypesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceRPCSubtypesResponse* internal_default_instance() {
    return reinterpret_cast<const ResourceRPCSubtypesResponse*>(
               &_ResourceRPCSubtypesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResourceRPCSubtypesResponse& a, ResourceRPCSubtypesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceRPCSubtypesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceRPCSubtypesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceRPCSubtypesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceRPCSubtypesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceRPCSubtypesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceRPCSubtypesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceRPCSubtypesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.ResourceRPCSubtypesResponse";
  }
  protected:
  explicit ResourceRPCSubtypesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceRpcSubtypesFieldNumber = 1,
  };
  // repeated .viam.robot.v1.ResourceRPCSubtype resource_rpc_subtypes = 1 [json_name = "resourceRpcSubtypes"];
  int resource_rpc_subtypes_size() const;
  private:
  int _internal_resource_rpc_subtypes_size() const;
  public:
  void clear_resource_rpc_subtypes();
  ::viam::robot::v1::ResourceRPCSubtype* mutable_resource_rpc_subtypes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceRPCSubtype >*
      mutable_resource_rpc_subtypes();
  private:
  const ::viam::robot::v1::ResourceRPCSubtype& _internal_resource_rpc_subtypes(int index) const;
  ::viam::robot::v1::ResourceRPCSubtype* _internal_add_resource_rpc_subtypes();
  public:
  const ::viam::robot::v1::ResourceRPCSubtype& resource_rpc_subtypes(int index) const;
  ::viam::robot::v1::ResourceRPCSubtype* add_resource_rpc_subtypes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceRPCSubtype >&
      resource_rpc_subtypes() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.ResourceRPCSubtypesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceRPCSubtype > resource_rpc_subtypes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class Operation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {}
  ~Operation() override;
  explicit PROTOBUF_CONSTEXPR Operation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Operation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Operation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Operation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMethodFieldNumber = 2,
    kArgumentsFieldNumber = 3,
    kStartedFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string method = 2 [json_name = "method"];
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // .google.protobuf.Struct arguments = 3 [json_name = "arguments"];
  bool has_arguments() const;
  private:
  bool _internal_has_arguments() const;
  public:
  void clear_arguments();
  const ::PROTOBUF_NAMESPACE_ID::Struct& arguments() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_arguments();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_arguments();
  void set_allocated_arguments(::PROTOBUF_NAMESPACE_ID::Struct* arguments);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_arguments() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_arguments();
  public:
  void unsafe_arena_set_allocated_arguments(
      ::PROTOBUF_NAMESPACE_ID::Struct* arguments);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_arguments();

  // .google.protobuf.Timestamp started = 4 [json_name = "started"];
  bool has_started() const;
  private:
  bool _internal_has_started() const;
  public:
  void clear_started();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& started() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_started();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_started();
  void set_allocated_started(::PROTOBUF_NAMESPACE_ID::Timestamp* started);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_started() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_started();
  public:
  void unsafe_arena_set_allocated_started(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* started);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_started();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.Operation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::Struct* arguments_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* started_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetOperationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetOperationsRequest) */ {
 public:
  inline GetOperationsRequest() : GetOperationsRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GetOperationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOperationsRequest(const GetOperationsRequest& from);
  GetOperationsRequest(GetOperationsRequest&& from) noexcept
    : GetOperationsRequest() {
    *this = ::std::move(from);
  }

  inline GetOperationsRequest& operator=(const GetOperationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOperationsRequest& operator=(GetOperationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOperationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOperationsRequest* internal_default_instance() {
    return reinterpret_cast<const GetOperationsRequest*>(
               &_GetOperationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetOperationsRequest& a, GetOperationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOperationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOperationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOperationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOperationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetOperationsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetOperationsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetOperationsRequest";
  }
  protected:
  explicit GetOperationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetOperationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetOperationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetOperationsResponse) */ {
 public:
  inline GetOperationsResponse() : GetOperationsResponse(nullptr) {}
  ~GetOperationsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetOperationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOperationsResponse(const GetOperationsResponse& from);
  GetOperationsResponse(GetOperationsResponse&& from) noexcept
    : GetOperationsResponse() {
    *this = ::std::move(from);
  }

  inline GetOperationsResponse& operator=(const GetOperationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOperationsResponse& operator=(GetOperationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOperationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOperationsResponse* internal_default_instance() {
    return reinterpret_cast<const GetOperationsResponse*>(
               &_GetOperationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetOperationsResponse& a, GetOperationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOperationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOperationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOperationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetOperationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOperationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOperationsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOperationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetOperationsResponse";
  }
  protected:
  explicit GetOperationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 1,
  };
  // repeated .viam.robot.v1.Operation operations = 1 [json_name = "operations"];
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::viam::robot::v1::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Operation >*
      mutable_operations();
  private:
  const ::viam::robot::v1::Operation& _internal_operations(int index) const;
  ::viam::robot::v1::Operation* _internal_add_operations();
  public:
  const ::viam::robot::v1::Operation& operations(int index) const;
  ::viam::robot::v1::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Operation >&
      operations() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetOperationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Operation > operations_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class CancelOperationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.CancelOperationRequest) */ {
 public:
  inline CancelOperationRequest() : CancelOperationRequest(nullptr) {}
  ~CancelOperationRequest() override;
  explicit PROTOBUF_CONSTEXPR CancelOperationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelOperationRequest(const CancelOperationRequest& from);
  CancelOperationRequest(CancelOperationRequest&& from) noexcept
    : CancelOperationRequest() {
    *this = ::std::move(from);
  }

  inline CancelOperationRequest& operator=(const CancelOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOperationRequest& operator=(CancelOperationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelOperationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelOperationRequest* internal_default_instance() {
    return reinterpret_cast<const CancelOperationRequest*>(
               &_CancelOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CancelOperationRequest& a, CancelOperationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOperationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOperationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelOperationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelOperationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CancelOperationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CancelOperationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOperationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.CancelOperationRequest";
  }
  protected:
  explicit CancelOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.CancelOperationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class CancelOperationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.CancelOperationResponse) */ {
 public:
  inline CancelOperationResponse() : CancelOperationResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CancelOperationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelOperationResponse(const CancelOperationResponse& from);
  CancelOperationResponse(CancelOperationResponse&& from) noexcept
    : CancelOperationResponse() {
    *this = ::std::move(from);
  }

  inline CancelOperationResponse& operator=(const CancelOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOperationResponse& operator=(CancelOperationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelOperationResponse* internal_default_instance() {
    return reinterpret_cast<const CancelOperationResponse*>(
               &_CancelOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CancelOperationResponse& a, CancelOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOperationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelOperationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CancelOperationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CancelOperationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.CancelOperationResponse";
  }
  protected:
  explicit CancelOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.CancelOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class BlockForOperationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.BlockForOperationRequest) */ {
 public:
  inline BlockForOperationRequest() : BlockForOperationRequest(nullptr) {}
  ~BlockForOperationRequest() override;
  explicit PROTOBUF_CONSTEXPR BlockForOperationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockForOperationRequest(const BlockForOperationRequest& from);
  BlockForOperationRequest(BlockForOperationRequest&& from) noexcept
    : BlockForOperationRequest() {
    *this = ::std::move(from);
  }

  inline BlockForOperationRequest& operator=(const BlockForOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockForOperationRequest& operator=(BlockForOperationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockForOperationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockForOperationRequest* internal_default_instance() {
    return reinterpret_cast<const BlockForOperationRequest*>(
               &_BlockForOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BlockForOperationRequest& a, BlockForOperationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockForOperationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockForOperationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockForOperationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockForOperationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockForOperationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BlockForOperationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockForOperationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.BlockForOperationRequest";
  }
  protected:
  explicit BlockForOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.BlockForOperationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class BlockForOperationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.BlockForOperationResponse) */ {
 public:
  inline BlockForOperationResponse() : BlockForOperationResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR BlockForOperationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockForOperationResponse(const BlockForOperationResponse& from);
  BlockForOperationResponse(BlockForOperationResponse&& from) noexcept
    : BlockForOperationResponse() {
    *this = ::std::move(from);
  }

  inline BlockForOperationResponse& operator=(const BlockForOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockForOperationResponse& operator=(BlockForOperationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockForOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockForOperationResponse* internal_default_instance() {
    return reinterpret_cast<const BlockForOperationResponse*>(
               &_BlockForOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BlockForOperationResponse& a, BlockForOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockForOperationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockForOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockForOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockForOperationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const BlockForOperationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const BlockForOperationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.BlockForOperationResponse";
  }
  protected:
  explicit BlockForOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.BlockForOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryQuery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.DiscoveryQuery) */ {
 public:
  inline DiscoveryQuery() : DiscoveryQuery(nullptr) {}
  ~DiscoveryQuery() override;
  explicit PROTOBUF_CONSTEXPR DiscoveryQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoveryQuery(const DiscoveryQuery& from);
  DiscoveryQuery(DiscoveryQuery&& from) noexcept
    : DiscoveryQuery() {
    *this = ::std::move(from);
  }

  inline DiscoveryQuery& operator=(const DiscoveryQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryQuery& operator=(DiscoveryQuery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoveryQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoveryQuery* internal_default_instance() {
    return reinterpret_cast<const DiscoveryQuery*>(
               &_DiscoveryQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DiscoveryQuery& a, DiscoveryQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoveryQuery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoveryQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoveryQuery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoveryQuery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscoveryQuery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoveryQuery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.DiscoveryQuery";
  }
  protected:
  explicit DiscoveryQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubtypeFieldNumber = 1,
    kModelFieldNumber = 2,
  };
  // string subtype = 1 [json_name = "subtype"];
  void clear_subtype();
  const std::string& subtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtype();
  PROTOBUF_NODISCARD std::string* release_subtype();
  void set_allocated_subtype(std::string* subtype);
  private:
  const std::string& _internal_subtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtype(const std::string& value);
  std::string* _internal_mutable_subtype();
  public:

  // string model = 2 [json_name = "model"];
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // @@protoc_insertion_point(class_scope:viam.robot.v1.DiscoveryQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class Discovery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.Discovery) */ {
 public:
  inline Discovery() : Discovery(nullptr) {}
  ~Discovery() override;
  explicit PROTOBUF_CONSTEXPR Discovery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Discovery(const Discovery& from);
  Discovery(Discovery&& from) noexcept
    : Discovery() {
    *this = ::std::move(from);
  }

  inline Discovery& operator=(const Discovery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Discovery& operator=(Discovery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Discovery& default_instance() {
    return *internal_default_instance();
  }
  static inline const Discovery* internal_default_instance() {
    return reinterpret_cast<const Discovery*>(
               &_Discovery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Discovery& a, Discovery& b) {
    a.Swap(&b);
  }
  inline void Swap(Discovery* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Discovery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Discovery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Discovery>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Discovery& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Discovery& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discovery* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.Discovery";
  }
  protected:
  explicit Discovery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 1,
    kResultsFieldNumber = 2,
  };
  // .viam.robot.v1.DiscoveryQuery query = 1 [json_name = "query"];
  bool has_query() const;
  private:
  bool _internal_has_query() const;
  public:
  void clear_query();
  const ::viam::robot::v1::DiscoveryQuery& query() const;
  PROTOBUF_NODISCARD ::viam::robot::v1::DiscoveryQuery* release_query();
  ::viam::robot::v1::DiscoveryQuery* mutable_query();
  void set_allocated_query(::viam::robot::v1::DiscoveryQuery* query);
  private:
  const ::viam::robot::v1::DiscoveryQuery& _internal_query() const;
  ::viam::robot::v1::DiscoveryQuery* _internal_mutable_query();
  public:
  void unsafe_arena_set_allocated_query(
      ::viam::robot::v1::DiscoveryQuery* query);
  ::viam::robot::v1::DiscoveryQuery* unsafe_arena_release_query();

  // .google.protobuf.Struct results = 2 [json_name = "results"];
  bool has_results() const;
  private:
  bool _internal_has_results() const;
  public:
  void clear_results();
  const ::PROTOBUF_NAMESPACE_ID::Struct& results() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_results();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_results();
  void set_allocated_results(::PROTOBUF_NAMESPACE_ID::Struct* results);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_results() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_results();
  public:
  void unsafe_arena_set_allocated_results(
      ::PROTOBUF_NAMESPACE_ID::Struct* results);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_results();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.Discovery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::robot::v1::DiscoveryQuery* query_;
  ::PROTOBUF_NAMESPACE_ID::Struct* results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class DiscoverComponentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.DiscoverComponentsRequest) */ {
 public:
  inline DiscoverComponentsRequest() : DiscoverComponentsRequest(nullptr) {}
  ~DiscoverComponentsRequest() override;
  explicit PROTOBUF_CONSTEXPR DiscoverComponentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoverComponentsRequest(const DiscoverComponentsRequest& from);
  DiscoverComponentsRequest(DiscoverComponentsRequest&& from) noexcept
    : DiscoverComponentsRequest() {
    *this = ::std::move(from);
  }

  inline DiscoverComponentsRequest& operator=(const DiscoverComponentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverComponentsRequest& operator=(DiscoverComponentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoverComponentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoverComponentsRequest* internal_default_instance() {
    return reinterpret_cast<const DiscoverComponentsRequest*>(
               &_DiscoverComponentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DiscoverComponentsRequest& a, DiscoverComponentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoverComponentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverComponentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoverComponentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoverComponentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoverComponentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscoverComponentsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoverComponentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.DiscoverComponentsRequest";
  }
  protected:
  explicit DiscoverComponentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueriesFieldNumber = 1,
  };
  // repeated .viam.robot.v1.DiscoveryQuery queries = 1 [json_name = "queries"];
  int queries_size() const;
  private:
  int _internal_queries_size() const;
  public:
  void clear_queries();
  ::viam::robot::v1::DiscoveryQuery* mutable_queries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::DiscoveryQuery >*
      mutable_queries();
  private:
  const ::viam::robot::v1::DiscoveryQuery& _internal_queries(int index) const;
  ::viam::robot::v1::DiscoveryQuery* _internal_add_queries();
  public:
  const ::viam::robot::v1::DiscoveryQuery& queries(int index) const;
  ::viam::robot::v1::DiscoveryQuery* add_queries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::DiscoveryQuery >&
      queries() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.DiscoverComponentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::DiscoveryQuery > queries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class DiscoverComponentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.DiscoverComponentsResponse) */ {
 public:
  inline DiscoverComponentsResponse() : DiscoverComponentsResponse(nullptr) {}
  ~DiscoverComponentsResponse() override;
  explicit PROTOBUF_CONSTEXPR DiscoverComponentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoverComponentsResponse(const DiscoverComponentsResponse& from);
  DiscoverComponentsResponse(DiscoverComponentsResponse&& from) noexcept
    : DiscoverComponentsResponse() {
    *this = ::std::move(from);
  }

  inline DiscoverComponentsResponse& operator=(const DiscoverComponentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoverComponentsResponse& operator=(DiscoverComponentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiscoverComponentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoverComponentsResponse* internal_default_instance() {
    return reinterpret_cast<const DiscoverComponentsResponse*>(
               &_DiscoverComponentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DiscoverComponentsResponse& a, DiscoverComponentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DiscoverComponentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoverComponentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoverComponentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoverComponentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiscoverComponentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiscoverComponentsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiscoverComponentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.DiscoverComponentsResponse";
  }
  protected:
  explicit DiscoverComponentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiscoveryFieldNumber = 1,
  };
  // repeated .viam.robot.v1.Discovery discovery = 1 [json_name = "discovery"];
  int discovery_size() const;
  private:
  int _internal_discovery_size() const;
  public:
  void clear_discovery();
  ::viam::robot::v1::Discovery* mutable_discovery(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Discovery >*
      mutable_discovery();
  private:
  const ::viam::robot::v1::Discovery& _internal_discovery(int index) const;
  ::viam::robot::v1::Discovery* _internal_add_discovery();
  public:
  const ::viam::robot::v1::Discovery& discovery(int index) const;
  ::viam::robot::v1::Discovery* add_discovery();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Discovery >&
      discovery() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.DiscoverComponentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Discovery > discovery_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // .viam.common.v1.ResourceName name = 1 [json_name = "name"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::viam::common::v1::ResourceName& name() const;
  PROTOBUF_NODISCARD ::viam::common::v1::ResourceName* release_name();
  ::viam::common::v1::ResourceName* mutable_name();
  void set_allocated_name(::viam::common::v1::ResourceName* name);
  private:
  const ::viam::common::v1::ResourceName& _internal_name() const;
  ::viam::common::v1::ResourceName* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::viam::common::v1::ResourceName* name);
  ::viam::common::v1::ResourceName* unsafe_arena_release_name();

  // .google.protobuf.Struct status = 2 [json_name = "status"];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::PROTOBUF_NAMESPACE_ID::Struct& status() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_status();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_status();
  void set_allocated_status(::PROTOBUF_NAMESPACE_ID::Struct* status);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_status() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::PROTOBUF_NAMESPACE_ID::Struct* status);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::ResourceName* name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetStatusRequest) */ {
 public:
  inline GetStatusRequest() : GetStatusRequest(nullptr) {}
  ~GetStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR GetStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatusRequest(const GetStatusRequest& from);
  GetStatusRequest(GetStatusRequest&& from) noexcept
    : GetStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetStatusRequest& operator=(const GetStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusRequest& operator=(GetStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetStatusRequest*>(
               &_GetStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetStatusRequest& a, GetStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetStatusRequest";
  }
  protected:
  explicit GetStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceNamesFieldNumber = 1,
  };
  // repeated .viam.common.v1.ResourceName resource_names = 1 [json_name = "resourceNames"];
  int resource_names_size() const;
  private:
  int _internal_resource_names_size() const;
  public:
  void clear_resource_names();
  ::viam::common::v1::ResourceName* mutable_resource_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
      mutable_resource_names();
  private:
  const ::viam::common::v1::ResourceName& _internal_resource_names(int index) const;
  ::viam::common::v1::ResourceName* _internal_add_resource_names();
  public:
  const ::viam::common::v1::ResourceName& resource_names(int index) const;
  ::viam::common::v1::ResourceName* add_resource_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
      resource_names() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName > resource_names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class GetStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.GetStatusResponse) */ {
 public:
  inline GetStatusResponse() : GetStatusResponse(nullptr) {}
  ~GetStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR GetStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStatusResponse(const GetStatusResponse& from);
  GetStatusResponse(GetStatusResponse&& from) noexcept
    : GetStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetStatusResponse& operator=(const GetStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStatusResponse& operator=(GetStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetStatusResponse*>(
               &_GetStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetStatusResponse& a, GetStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.GetStatusResponse";
  }
  protected:
  explicit GetStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // repeated .viam.robot.v1.Status status = 1 [json_name = "status"];
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  ::viam::robot::v1::Status* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >*
      mutable_status();
  private:
  const ::viam::robot::v1::Status& _internal_status(int index) const;
  ::viam::robot::v1::Status* _internal_add_status();
  public:
  const ::viam::robot::v1::Status& status(int index) const;
  ::viam::robot::v1::Status* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >&
      status() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.GetStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status > status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class StreamStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.StreamStatusRequest) */ {
 public:
  inline StreamStatusRequest() : StreamStatusRequest(nullptr) {}
  ~StreamStatusRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamStatusRequest(const StreamStatusRequest& from);
  StreamStatusRequest(StreamStatusRequest&& from) noexcept
    : StreamStatusRequest() {
    *this = ::std::move(from);
  }

  inline StreamStatusRequest& operator=(const StreamStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStatusRequest& operator=(StreamStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamStatusRequest* internal_default_instance() {
    return reinterpret_cast<const StreamStatusRequest*>(
               &_StreamStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(StreamStatusRequest& a, StreamStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.StreamStatusRequest";
  }
  protected:
  explicit StreamStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceNamesFieldNumber = 1,
    kEveryFieldNumber = 2,
  };
  // repeated .viam.common.v1.ResourceName resource_names = 1 [json_name = "resourceNames"];
  int resource_names_size() const;
  private:
  int _internal_resource_names_size() const;
  public:
  void clear_resource_names();
  ::viam::common::v1::ResourceName* mutable_resource_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
      mutable_resource_names();
  private:
  const ::viam::common::v1::ResourceName& _internal_resource_names(int index) const;
  ::viam::common::v1::ResourceName* _internal_add_resource_names();
  public:
  const ::viam::common::v1::ResourceName& resource_names(int index) const;
  ::viam::common::v1::ResourceName* add_resource_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
      resource_names() const;

  // .google.protobuf.Duration every = 2 [json_name = "every"];
  bool has_every() const;
  private:
  bool _internal_has_every() const;
  public:
  void clear_every();
  const ::PROTOBUF_NAMESPACE_ID::Duration& every() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_every();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_every();
  void set_allocated_every(::PROTOBUF_NAMESPACE_ID::Duration* every);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_every() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_every();
  public:
  void unsafe_arena_set_allocated_every(
      ::PROTOBUF_NAMESPACE_ID::Duration* every);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_every();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.StreamStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName > resource_names_;
  ::PROTOBUF_NAMESPACE_ID::Duration* every_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class StreamStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.StreamStatusResponse) */ {
 public:
  inline StreamStatusResponse() : StreamStatusResponse(nullptr) {}
  ~StreamStatusResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamStatusResponse(const StreamStatusResponse& from);
  StreamStatusResponse(StreamStatusResponse&& from) noexcept
    : StreamStatusResponse() {
    *this = ::std::move(from);
  }

  inline StreamStatusResponse& operator=(const StreamStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamStatusResponse& operator=(StreamStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamStatusResponse* internal_default_instance() {
    return reinterpret_cast<const StreamStatusResponse*>(
               &_StreamStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(StreamStatusResponse& a, StreamStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.StreamStatusResponse";
  }
  protected:
  explicit StreamStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // repeated .viam.robot.v1.Status status = 1 [json_name = "status"];
  int status_size() const;
  private:
  int _internal_status_size() const;
  public:
  void clear_status();
  ::viam::robot::v1::Status* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >*
      mutable_status();
  private:
  const ::viam::robot::v1::Status& _internal_status(int index) const;
  ::viam::robot::v1::Status* _internal_add_status();
  public:
  const ::viam::robot::v1::Status& status(int index) const;
  ::viam::robot::v1::Status* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >&
      status() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.StreamStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status > status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class StopExtraParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.StopExtraParameters) */ {
 public:
  inline StopExtraParameters() : StopExtraParameters(nullptr) {}
  ~StopExtraParameters() override;
  explicit PROTOBUF_CONSTEXPR StopExtraParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopExtraParameters(const StopExtraParameters& from);
  StopExtraParameters(StopExtraParameters&& from) noexcept
    : StopExtraParameters() {
    *this = ::std::move(from);
  }

  inline StopExtraParameters& operator=(const StopExtraParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopExtraParameters& operator=(StopExtraParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopExtraParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopExtraParameters* internal_default_instance() {
    return reinterpret_cast<const StopExtraParameters*>(
               &_StopExtraParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(StopExtraParameters& a, StopExtraParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(StopExtraParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopExtraParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopExtraParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopExtraParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopExtraParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopExtraParameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopExtraParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.StopExtraParameters";
  }
  protected:
  explicit StopExtraParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // .viam.common.v1.ResourceName name = 1 [json_name = "name"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::viam::common::v1::ResourceName& name() const;
  PROTOBUF_NODISCARD ::viam::common::v1::ResourceName* release_name();
  ::viam::common::v1::ResourceName* mutable_name();
  void set_allocated_name(::viam::common::v1::ResourceName* name);
  private:
  const ::viam::common::v1::ResourceName& _internal_name() const;
  ::viam::common::v1::ResourceName* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::viam::common::v1::ResourceName* name);
  ::viam::common::v1::ResourceName* unsafe_arena_release_name();

  // .google.protobuf.Struct params = 2 [json_name = "params"];
  bool has_params() const;
  private:
  bool _internal_has_params() const;
  public:
  void clear_params();
  const ::PROTOBUF_NAMESPACE_ID::Struct& params() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_params();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_params();
  void set_allocated_params(::PROTOBUF_NAMESPACE_ID::Struct* params);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::PROTOBUF_NAMESPACE_ID::Struct* params);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_params();

  // @@protoc_insertion_point(class_scope:viam.robot.v1.StopExtraParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::ResourceName* name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class StopAllRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.robot.v1.StopAllRequest) */ {
 public:
  inline StopAllRequest() : StopAllRequest(nullptr) {}
  ~StopAllRequest() override;
  explicit PROTOBUF_CONSTEXPR StopAllRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopAllRequest(const StopAllRequest& from);
  StopAllRequest(StopAllRequest&& from) noexcept
    : StopAllRequest() {
    *this = ::std::move(from);
  }

  inline StopAllRequest& operator=(const StopAllRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopAllRequest& operator=(StopAllRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopAllRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopAllRequest* internal_default_instance() {
    return reinterpret_cast<const StopAllRequest*>(
               &_StopAllRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(StopAllRequest& a, StopAllRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopAllRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopAllRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopAllRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopAllRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopAllRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StopAllRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopAllRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.StopAllRequest";
  }
  protected:
  explicit StopAllRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtraFieldNumber = 99,
  };
  // repeated .viam.robot.v1.StopExtraParameters extra = 99 [json_name = "extra"];
  int extra_size() const;
  private:
  int _internal_extra_size() const;
  public:
  void clear_extra();
  ::viam::robot::v1::StopExtraParameters* mutable_extra(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::StopExtraParameters >*
      mutable_extra();
  private:
  const ::viam::robot::v1::StopExtraParameters& _internal_extra(int index) const;
  ::viam::robot::v1::StopExtraParameters* _internal_add_extra();
  public:
  const ::viam::robot::v1::StopExtraParameters& extra(int index) const;
  ::viam::robot::v1::StopExtraParameters* add_extra();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::StopExtraParameters >&
      extra() const;

  // @@protoc_insertion_point(class_scope:viam.robot.v1.StopAllRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::StopExtraParameters > extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// -------------------------------------------------------------------

class StopAllResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.robot.v1.StopAllResponse) */ {
 public:
  inline StopAllResponse() : StopAllResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StopAllResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopAllResponse(const StopAllResponse& from);
  StopAllResponse(StopAllResponse&& from) noexcept
    : StopAllResponse() {
    *this = ::std::move(from);
  }

  inline StopAllResponse& operator=(const StopAllResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopAllResponse& operator=(StopAllResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopAllResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopAllResponse* internal_default_instance() {
    return reinterpret_cast<const StopAllResponse*>(
               &_StopAllResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(StopAllResponse& a, StopAllResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopAllResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopAllResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopAllResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopAllResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopAllResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopAllResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.robot.v1.StopAllResponse";
  }
  protected:
  explicit StopAllResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.robot.v1.StopAllResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_robot_2fv1_2frobot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FrameSystemConfig

// string name = 1 [json_name = "name"];
inline void FrameSystemConfig::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FrameSystemConfig::name() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.FrameSystemConfig.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FrameSystemConfig::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.FrameSystemConfig.name)
}
inline std::string* FrameSystemConfig::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.FrameSystemConfig.name)
  return _s;
}
inline const std::string& FrameSystemConfig::_internal_name() const {
  return name_.Get();
}
inline void FrameSystemConfig::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* FrameSystemConfig::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* FrameSystemConfig::release_name() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.FrameSystemConfig.name)
  return name_.Release();
}
inline void FrameSystemConfig::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.FrameSystemConfig.name)
}

// .viam.common.v1.PoseInFrame pose_in_parent_frame = 2 [json_name = "poseInParentFrame"];
inline bool FrameSystemConfig::_internal_has_pose_in_parent_frame() const {
  return this != internal_default_instance() && pose_in_parent_frame_ != nullptr;
}
inline bool FrameSystemConfig::has_pose_in_parent_frame() const {
  return _internal_has_pose_in_parent_frame();
}
inline const ::viam::common::v1::PoseInFrame& FrameSystemConfig::_internal_pose_in_parent_frame() const {
  const ::viam::common::v1::PoseInFrame* p = pose_in_parent_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::PoseInFrame&>(
      ::viam::common::v1::_PoseInFrame_default_instance_);
}
inline const ::viam::common::v1::PoseInFrame& FrameSystemConfig::pose_in_parent_frame() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.FrameSystemConfig.pose_in_parent_frame)
  return _internal_pose_in_parent_frame();
}
inline void FrameSystemConfig::unsafe_arena_set_allocated_pose_in_parent_frame(
    ::viam::common::v1::PoseInFrame* pose_in_parent_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_in_parent_frame_);
  }
  pose_in_parent_frame_ = pose_in_parent_frame;
  if (pose_in_parent_frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.FrameSystemConfig.pose_in_parent_frame)
}
inline ::viam::common::v1::PoseInFrame* FrameSystemConfig::release_pose_in_parent_frame() {
  
  ::viam::common::v1::PoseInFrame* temp = pose_in_parent_frame_;
  pose_in_parent_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::PoseInFrame* FrameSystemConfig::unsafe_arena_release_pose_in_parent_frame() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.FrameSystemConfig.pose_in_parent_frame)
  
  ::viam::common::v1::PoseInFrame* temp = pose_in_parent_frame_;
  pose_in_parent_frame_ = nullptr;
  return temp;
}
inline ::viam::common::v1::PoseInFrame* FrameSystemConfig::_internal_mutable_pose_in_parent_frame() {
  
  if (pose_in_parent_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::PoseInFrame>(GetArenaForAllocation());
    pose_in_parent_frame_ = p;
  }
  return pose_in_parent_frame_;
}
inline ::viam::common::v1::PoseInFrame* FrameSystemConfig::mutable_pose_in_parent_frame() {
  ::viam::common::v1::PoseInFrame* _msg = _internal_mutable_pose_in_parent_frame();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.FrameSystemConfig.pose_in_parent_frame)
  return _msg;
}
inline void FrameSystemConfig::set_allocated_pose_in_parent_frame(::viam::common::v1::PoseInFrame* pose_in_parent_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_in_parent_frame_);
  }
  if (pose_in_parent_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_in_parent_frame));
    if (message_arena != submessage_arena) {
      pose_in_parent_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_in_parent_frame, submessage_arena);
    }
    
  } else {
    
  }
  pose_in_parent_frame_ = pose_in_parent_frame;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.FrameSystemConfig.pose_in_parent_frame)
}

// bytes model_json = 3 [json_name = "modelJson"];
inline void FrameSystemConfig::clear_model_json() {
  model_json_.ClearToEmpty();
}
inline const std::string& FrameSystemConfig::model_json() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.FrameSystemConfig.model_json)
  return _internal_model_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FrameSystemConfig::set_model_json(ArgT0&& arg0, ArgT... args) {
 
 model_json_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.FrameSystemConfig.model_json)
}
inline std::string* FrameSystemConfig::mutable_model_json() {
  std::string* _s = _internal_mutable_model_json();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.FrameSystemConfig.model_json)
  return _s;
}
inline const std::string& FrameSystemConfig::_internal_model_json() const {
  return model_json_.Get();
}
inline void FrameSystemConfig::_internal_set_model_json(const std::string& value) {
  
  model_json_.Set(value, GetArenaForAllocation());
}
inline std::string* FrameSystemConfig::_internal_mutable_model_json() {
  
  return model_json_.Mutable(GetArenaForAllocation());
}
inline std::string* FrameSystemConfig::release_model_json() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.FrameSystemConfig.model_json)
  return model_json_.Release();
}
inline void FrameSystemConfig::set_allocated_model_json(std::string* model_json) {
  if (model_json != nullptr) {
    
  } else {
    
  }
  model_json_.SetAllocated(model_json, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_json_.IsDefault()) {
    model_json_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.FrameSystemConfig.model_json)
}

// -------------------------------------------------------------------

// FrameSystemConfigRequest

// repeated .viam.common.v1.Transform supplemental_transforms = 1 [json_name = "supplementalTransforms"];
inline int FrameSystemConfigRequest::_internal_supplemental_transforms_size() const {
  return supplemental_transforms_.size();
}
inline int FrameSystemConfigRequest::supplemental_transforms_size() const {
  return _internal_supplemental_transforms_size();
}
inline ::viam::common::v1::Transform* FrameSystemConfigRequest::mutable_supplemental_transforms(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.FrameSystemConfigRequest.supplemental_transforms)
  return supplemental_transforms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >*
FrameSystemConfigRequest::mutable_supplemental_transforms() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.FrameSystemConfigRequest.supplemental_transforms)
  return &supplemental_transforms_;
}
inline const ::viam::common::v1::Transform& FrameSystemConfigRequest::_internal_supplemental_transforms(int index) const {
  return supplemental_transforms_.Get(index);
}
inline const ::viam::common::v1::Transform& FrameSystemConfigRequest::supplemental_transforms(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.FrameSystemConfigRequest.supplemental_transforms)
  return _internal_supplemental_transforms(index);
}
inline ::viam::common::v1::Transform* FrameSystemConfigRequest::_internal_add_supplemental_transforms() {
  return supplemental_transforms_.Add();
}
inline ::viam::common::v1::Transform* FrameSystemConfigRequest::add_supplemental_transforms() {
  ::viam::common::v1::Transform* _add = _internal_add_supplemental_transforms();
  // @@protoc_insertion_point(field_add:viam.robot.v1.FrameSystemConfigRequest.supplemental_transforms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >&
FrameSystemConfigRequest::supplemental_transforms() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.FrameSystemConfigRequest.supplemental_transforms)
  return supplemental_transforms_;
}

// -------------------------------------------------------------------

// FrameSystemConfigResponse

// repeated .viam.robot.v1.FrameSystemConfig frame_system_configs = 1 [json_name = "frameSystemConfigs"];
inline int FrameSystemConfigResponse::_internal_frame_system_configs_size() const {
  return frame_system_configs_.size();
}
inline int FrameSystemConfigResponse::frame_system_configs_size() const {
  return _internal_frame_system_configs_size();
}
inline void FrameSystemConfigResponse::clear_frame_system_configs() {
  frame_system_configs_.Clear();
}
inline ::viam::robot::v1::FrameSystemConfig* FrameSystemConfigResponse::mutable_frame_system_configs(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.FrameSystemConfigResponse.frame_system_configs)
  return frame_system_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::FrameSystemConfig >*
FrameSystemConfigResponse::mutable_frame_system_configs() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.FrameSystemConfigResponse.frame_system_configs)
  return &frame_system_configs_;
}
inline const ::viam::robot::v1::FrameSystemConfig& FrameSystemConfigResponse::_internal_frame_system_configs(int index) const {
  return frame_system_configs_.Get(index);
}
inline const ::viam::robot::v1::FrameSystemConfig& FrameSystemConfigResponse::frame_system_configs(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.FrameSystemConfigResponse.frame_system_configs)
  return _internal_frame_system_configs(index);
}
inline ::viam::robot::v1::FrameSystemConfig* FrameSystemConfigResponse::_internal_add_frame_system_configs() {
  return frame_system_configs_.Add();
}
inline ::viam::robot::v1::FrameSystemConfig* FrameSystemConfigResponse::add_frame_system_configs() {
  ::viam::robot::v1::FrameSystemConfig* _add = _internal_add_frame_system_configs();
  // @@protoc_insertion_point(field_add:viam.robot.v1.FrameSystemConfigResponse.frame_system_configs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::FrameSystemConfig >&
FrameSystemConfigResponse::frame_system_configs() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.FrameSystemConfigResponse.frame_system_configs)
  return frame_system_configs_;
}

// -------------------------------------------------------------------

// TransformPoseRequest

// .viam.common.v1.PoseInFrame source = 1 [json_name = "source"];
inline bool TransformPoseRequest::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool TransformPoseRequest::has_source() const {
  return _internal_has_source();
}
inline const ::viam::common::v1::PoseInFrame& TransformPoseRequest::_internal_source() const {
  const ::viam::common::v1::PoseInFrame* p = source_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::PoseInFrame&>(
      ::viam::common::v1::_PoseInFrame_default_instance_);
}
inline const ::viam::common::v1::PoseInFrame& TransformPoseRequest::source() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TransformPoseRequest.source)
  return _internal_source();
}
inline void TransformPoseRequest::unsafe_arena_set_allocated_source(
    ::viam::common::v1::PoseInFrame* source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.TransformPoseRequest.source)
}
inline ::viam::common::v1::PoseInFrame* TransformPoseRequest::release_source() {
  
  ::viam::common::v1::PoseInFrame* temp = source_;
  source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::PoseInFrame* TransformPoseRequest::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.TransformPoseRequest.source)
  
  ::viam::common::v1::PoseInFrame* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::viam::common::v1::PoseInFrame* TransformPoseRequest::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::PoseInFrame>(GetArenaForAllocation());
    source_ = p;
  }
  return source_;
}
inline ::viam::common::v1::PoseInFrame* TransformPoseRequest::mutable_source() {
  ::viam::common::v1::PoseInFrame* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TransformPoseRequest.source)
  return _msg;
}
inline void TransformPoseRequest::set_allocated_source(::viam::common::v1::PoseInFrame* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source));
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.TransformPoseRequest.source)
}

// string destination = 2 [json_name = "destination"];
inline void TransformPoseRequest::clear_destination() {
  destination_.ClearToEmpty();
}
inline const std::string& TransformPoseRequest::destination() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TransformPoseRequest.destination)
  return _internal_destination();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TransformPoseRequest::set_destination(ArgT0&& arg0, ArgT... args) {
 
 destination_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.TransformPoseRequest.destination)
}
inline std::string* TransformPoseRequest::mutable_destination() {
  std::string* _s = _internal_mutable_destination();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TransformPoseRequest.destination)
  return _s;
}
inline const std::string& TransformPoseRequest::_internal_destination() const {
  return destination_.Get();
}
inline void TransformPoseRequest::_internal_set_destination(const std::string& value) {
  
  destination_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformPoseRequest::_internal_mutable_destination() {
  
  return destination_.Mutable(GetArenaForAllocation());
}
inline std::string* TransformPoseRequest::release_destination() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.TransformPoseRequest.destination)
  return destination_.Release();
}
inline void TransformPoseRequest::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocated(destination, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (destination_.IsDefault()) {
    destination_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.TransformPoseRequest.destination)
}

// repeated .viam.common.v1.Transform supplemental_transforms = 3 [json_name = "supplementalTransforms"];
inline int TransformPoseRequest::_internal_supplemental_transforms_size() const {
  return supplemental_transforms_.size();
}
inline int TransformPoseRequest::supplemental_transforms_size() const {
  return _internal_supplemental_transforms_size();
}
inline ::viam::common::v1::Transform* TransformPoseRequest::mutable_supplemental_transforms(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TransformPoseRequest.supplemental_transforms)
  return supplemental_transforms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >*
TransformPoseRequest::mutable_supplemental_transforms() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.TransformPoseRequest.supplemental_transforms)
  return &supplemental_transforms_;
}
inline const ::viam::common::v1::Transform& TransformPoseRequest::_internal_supplemental_transforms(int index) const {
  return supplemental_transforms_.Get(index);
}
inline const ::viam::common::v1::Transform& TransformPoseRequest::supplemental_transforms(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TransformPoseRequest.supplemental_transforms)
  return _internal_supplemental_transforms(index);
}
inline ::viam::common::v1::Transform* TransformPoseRequest::_internal_add_supplemental_transforms() {
  return supplemental_transforms_.Add();
}
inline ::viam::common::v1::Transform* TransformPoseRequest::add_supplemental_transforms() {
  ::viam::common::v1::Transform* _add = _internal_add_supplemental_transforms();
  // @@protoc_insertion_point(field_add:viam.robot.v1.TransformPoseRequest.supplemental_transforms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >&
TransformPoseRequest::supplemental_transforms() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.TransformPoseRequest.supplemental_transforms)
  return supplemental_transforms_;
}

// -------------------------------------------------------------------

// TransformPoseResponse

// .viam.common.v1.PoseInFrame pose = 1 [json_name = "pose"];
inline bool TransformPoseResponse::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool TransformPoseResponse::has_pose() const {
  return _internal_has_pose();
}
inline const ::viam::common::v1::PoseInFrame& TransformPoseResponse::_internal_pose() const {
  const ::viam::common::v1::PoseInFrame* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::PoseInFrame&>(
      ::viam::common::v1::_PoseInFrame_default_instance_);
}
inline const ::viam::common::v1::PoseInFrame& TransformPoseResponse::pose() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.TransformPoseResponse.pose)
  return _internal_pose();
}
inline void TransformPoseResponse::unsafe_arena_set_allocated_pose(
    ::viam::common::v1::PoseInFrame* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.TransformPoseResponse.pose)
}
inline ::viam::common::v1::PoseInFrame* TransformPoseResponse::release_pose() {
  
  ::viam::common::v1::PoseInFrame* temp = pose_;
  pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::PoseInFrame* TransformPoseResponse::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.TransformPoseResponse.pose)
  
  ::viam::common::v1::PoseInFrame* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::viam::common::v1::PoseInFrame* TransformPoseResponse::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::PoseInFrame>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::viam::common::v1::PoseInFrame* TransformPoseResponse::mutable_pose() {
  ::viam::common::v1::PoseInFrame* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.TransformPoseResponse.pose)
  return _msg;
}
inline void TransformPoseResponse::set_allocated_pose(::viam::common::v1::PoseInFrame* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.TransformPoseResponse.pose)
}

// -------------------------------------------------------------------

// ResourceNamesRequest

// -------------------------------------------------------------------

// ResourceNamesResponse

// repeated .viam.common.v1.ResourceName resources = 1 [json_name = "resources"];
inline int ResourceNamesResponse::_internal_resources_size() const {
  return resources_.size();
}
inline int ResourceNamesResponse::resources_size() const {
  return _internal_resources_size();
}
inline ::viam::common::v1::ResourceName* ResourceNamesResponse::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceNamesResponse.resources)
  return resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
ResourceNamesResponse::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.ResourceNamesResponse.resources)
  return &resources_;
}
inline const ::viam::common::v1::ResourceName& ResourceNamesResponse::_internal_resources(int index) const {
  return resources_.Get(index);
}
inline const ::viam::common::v1::ResourceName& ResourceNamesResponse::resources(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceNamesResponse.resources)
  return _internal_resources(index);
}
inline ::viam::common::v1::ResourceName* ResourceNamesResponse::_internal_add_resources() {
  return resources_.Add();
}
inline ::viam::common::v1::ResourceName* ResourceNamesResponse::add_resources() {
  ::viam::common::v1::ResourceName* _add = _internal_add_resources();
  // @@protoc_insertion_point(field_add:viam.robot.v1.ResourceNamesResponse.resources)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
ResourceNamesResponse::resources() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.ResourceNamesResponse.resources)
  return resources_;
}

// -------------------------------------------------------------------

// ResourceRPCSubtype

// .viam.common.v1.ResourceName subtype = 1 [json_name = "subtype"];
inline bool ResourceRPCSubtype::_internal_has_subtype() const {
  return this != internal_default_instance() && subtype_ != nullptr;
}
inline bool ResourceRPCSubtype::has_subtype() const {
  return _internal_has_subtype();
}
inline const ::viam::common::v1::ResourceName& ResourceRPCSubtype::_internal_subtype() const {
  const ::viam::common::v1::ResourceName* p = subtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::ResourceName&>(
      ::viam::common::v1::_ResourceName_default_instance_);
}
inline const ::viam::common::v1::ResourceName& ResourceRPCSubtype::subtype() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceRPCSubtype.subtype)
  return _internal_subtype();
}
inline void ResourceRPCSubtype::unsafe_arena_set_allocated_subtype(
    ::viam::common::v1::ResourceName* subtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subtype_);
  }
  subtype_ = subtype;
  if (subtype) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.ResourceRPCSubtype.subtype)
}
inline ::viam::common::v1::ResourceName* ResourceRPCSubtype::release_subtype() {
  
  ::viam::common::v1::ResourceName* temp = subtype_;
  subtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::ResourceName* ResourceRPCSubtype::unsafe_arena_release_subtype() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ResourceRPCSubtype.subtype)
  
  ::viam::common::v1::ResourceName* temp = subtype_;
  subtype_ = nullptr;
  return temp;
}
inline ::viam::common::v1::ResourceName* ResourceRPCSubtype::_internal_mutable_subtype() {
  
  if (subtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::ResourceName>(GetArenaForAllocation());
    subtype_ = p;
  }
  return subtype_;
}
inline ::viam::common::v1::ResourceName* ResourceRPCSubtype::mutable_subtype() {
  ::viam::common::v1::ResourceName* _msg = _internal_mutable_subtype();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceRPCSubtype.subtype)
  return _msg;
}
inline void ResourceRPCSubtype::set_allocated_subtype(::viam::common::v1::ResourceName* subtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(subtype_);
  }
  if (subtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subtype));
    if (message_arena != submessage_arena) {
      subtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subtype, submessage_arena);
    }
    
  } else {
    
  }
  subtype_ = subtype;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ResourceRPCSubtype.subtype)
}

// string proto_service = 2 [json_name = "protoService"];
inline void ResourceRPCSubtype::clear_proto_service() {
  proto_service_.ClearToEmpty();
}
inline const std::string& ResourceRPCSubtype::proto_service() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceRPCSubtype.proto_service)
  return _internal_proto_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceRPCSubtype::set_proto_service(ArgT0&& arg0, ArgT... args) {
 
 proto_service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.ResourceRPCSubtype.proto_service)
}
inline std::string* ResourceRPCSubtype::mutable_proto_service() {
  std::string* _s = _internal_mutable_proto_service();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceRPCSubtype.proto_service)
  return _s;
}
inline const std::string& ResourceRPCSubtype::_internal_proto_service() const {
  return proto_service_.Get();
}
inline void ResourceRPCSubtype::_internal_set_proto_service(const std::string& value) {
  
  proto_service_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceRPCSubtype::_internal_mutable_proto_service() {
  
  return proto_service_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceRPCSubtype::release_proto_service() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.ResourceRPCSubtype.proto_service)
  return proto_service_.Release();
}
inline void ResourceRPCSubtype::set_allocated_proto_service(std::string* proto_service) {
  if (proto_service != nullptr) {
    
  } else {
    
  }
  proto_service_.SetAllocated(proto_service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (proto_service_.IsDefault()) {
    proto_service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.ResourceRPCSubtype.proto_service)
}

// -------------------------------------------------------------------

// ResourceRPCSubtypesRequest

// -------------------------------------------------------------------

// ResourceRPCSubtypesResponse

// repeated .viam.robot.v1.ResourceRPCSubtype resource_rpc_subtypes = 1 [json_name = "resourceRpcSubtypes"];
inline int ResourceRPCSubtypesResponse::_internal_resource_rpc_subtypes_size() const {
  return resource_rpc_subtypes_.size();
}
inline int ResourceRPCSubtypesResponse::resource_rpc_subtypes_size() const {
  return _internal_resource_rpc_subtypes_size();
}
inline void ResourceRPCSubtypesResponse::clear_resource_rpc_subtypes() {
  resource_rpc_subtypes_.Clear();
}
inline ::viam::robot::v1::ResourceRPCSubtype* ResourceRPCSubtypesResponse::mutable_resource_rpc_subtypes(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.ResourceRPCSubtypesResponse.resource_rpc_subtypes)
  return resource_rpc_subtypes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceRPCSubtype >*
ResourceRPCSubtypesResponse::mutable_resource_rpc_subtypes() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.ResourceRPCSubtypesResponse.resource_rpc_subtypes)
  return &resource_rpc_subtypes_;
}
inline const ::viam::robot::v1::ResourceRPCSubtype& ResourceRPCSubtypesResponse::_internal_resource_rpc_subtypes(int index) const {
  return resource_rpc_subtypes_.Get(index);
}
inline const ::viam::robot::v1::ResourceRPCSubtype& ResourceRPCSubtypesResponse::resource_rpc_subtypes(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.ResourceRPCSubtypesResponse.resource_rpc_subtypes)
  return _internal_resource_rpc_subtypes(index);
}
inline ::viam::robot::v1::ResourceRPCSubtype* ResourceRPCSubtypesResponse::_internal_add_resource_rpc_subtypes() {
  return resource_rpc_subtypes_.Add();
}
inline ::viam::robot::v1::ResourceRPCSubtype* ResourceRPCSubtypesResponse::add_resource_rpc_subtypes() {
  ::viam::robot::v1::ResourceRPCSubtype* _add = _internal_add_resource_rpc_subtypes();
  // @@protoc_insertion_point(field_add:viam.robot.v1.ResourceRPCSubtypesResponse.resource_rpc_subtypes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::ResourceRPCSubtype >&
ResourceRPCSubtypesResponse::resource_rpc_subtypes() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.ResourceRPCSubtypesResponse.resource_rpc_subtypes)
  return resource_rpc_subtypes_;
}

// -------------------------------------------------------------------

// Operation

// string id = 1 [json_name = "id"];
inline void Operation::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Operation::id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Operation.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.Operation.id)
}
inline std::string* Operation::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Operation.id)
  return _s;
}
inline const std::string& Operation::_internal_id() const {
  return id_.Get();
}
inline void Operation::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Operation.id)
  return id_.Release();
}
inline void Operation::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Operation.id)
}

// string method = 2 [json_name = "method"];
inline void Operation::clear_method() {
  method_.ClearToEmpty();
}
inline const std::string& Operation::method() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Operation.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Operation::set_method(ArgT0&& arg0, ArgT... args) {
 
 method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.Operation.method)
}
inline std::string* Operation::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Operation.method)
  return _s;
}
inline const std::string& Operation::_internal_method() const {
  return method_.Get();
}
inline void Operation::_internal_set_method(const std::string& value) {
  
  method_.Set(value, GetArenaForAllocation());
}
inline std::string* Operation::_internal_mutable_method() {
  
  return method_.Mutable(GetArenaForAllocation());
}
inline std::string* Operation::release_method() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Operation.method)
  return method_.Release();
}
inline void Operation::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Operation.method)
}

// .google.protobuf.Struct arguments = 3 [json_name = "arguments"];
inline bool Operation::_internal_has_arguments() const {
  return this != internal_default_instance() && arguments_ != nullptr;
}
inline bool Operation::has_arguments() const {
  return _internal_has_arguments();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Operation::_internal_arguments() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = arguments_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Operation::arguments() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Operation.arguments)
  return _internal_arguments();
}
inline void Operation::unsafe_arena_set_allocated_arguments(
    ::PROTOBUF_NAMESPACE_ID::Struct* arguments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arguments_);
  }
  arguments_ = arguments;
  if (arguments) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Operation.arguments)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Operation::release_arguments() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = arguments_;
  arguments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Operation::unsafe_arena_release_arguments() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Operation.arguments)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = arguments_;
  arguments_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Operation::_internal_mutable_arguments() {
  
  if (arguments_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    arguments_ = p;
  }
  return arguments_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Operation::mutable_arguments() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_arguments();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Operation.arguments)
  return _msg;
}
inline void Operation::set_allocated_arguments(::PROTOBUF_NAMESPACE_ID::Struct* arguments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(arguments_);
  }
  if (arguments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arguments));
    if (message_arena != submessage_arena) {
      arguments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arguments, submessage_arena);
    }
    
  } else {
    
  }
  arguments_ = arguments;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Operation.arguments)
}

// .google.protobuf.Timestamp started = 4 [json_name = "started"];
inline bool Operation::_internal_has_started() const {
  return this != internal_default_instance() && started_ != nullptr;
}
inline bool Operation::has_started() const {
  return _internal_has_started();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Operation::_internal_started() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = started_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Operation::started() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Operation.started)
  return _internal_started();
}
inline void Operation::unsafe_arena_set_allocated_started(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* started) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_);
  }
  started_ = started;
  if (started) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Operation.started)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::release_started() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = started_;
  started_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::unsafe_arena_release_started() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Operation.started)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = started_;
  started_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::_internal_mutable_started() {
  
  if (started_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    started_ = p;
  }
  return started_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Operation::mutable_started() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_started();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Operation.started)
  return _msg;
}
inline void Operation::set_allocated_started(::PROTOBUF_NAMESPACE_ID::Timestamp* started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_);
  }
  if (started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started));
    if (message_arena != submessage_arena) {
      started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started, submessage_arena);
    }
    
  } else {
    
  }
  started_ = started;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Operation.started)
}

// -------------------------------------------------------------------

// GetOperationsRequest

// -------------------------------------------------------------------

// GetOperationsResponse

// repeated .viam.robot.v1.Operation operations = 1 [json_name = "operations"];
inline int GetOperationsResponse::_internal_operations_size() const {
  return operations_.size();
}
inline int GetOperationsResponse::operations_size() const {
  return _internal_operations_size();
}
inline void GetOperationsResponse::clear_operations() {
  operations_.Clear();
}
inline ::viam::robot::v1::Operation* GetOperationsResponse::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetOperationsResponse.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Operation >*
GetOperationsResponse::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.GetOperationsResponse.operations)
  return &operations_;
}
inline const ::viam::robot::v1::Operation& GetOperationsResponse::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::viam::robot::v1::Operation& GetOperationsResponse::operations(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetOperationsResponse.operations)
  return _internal_operations(index);
}
inline ::viam::robot::v1::Operation* GetOperationsResponse::_internal_add_operations() {
  return operations_.Add();
}
inline ::viam::robot::v1::Operation* GetOperationsResponse::add_operations() {
  ::viam::robot::v1::Operation* _add = _internal_add_operations();
  // @@protoc_insertion_point(field_add:viam.robot.v1.GetOperationsResponse.operations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Operation >&
GetOperationsResponse::operations() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.GetOperationsResponse.operations)
  return operations_;
}

// -------------------------------------------------------------------

// CancelOperationRequest

// string id = 1 [json_name = "id"];
inline void CancelOperationRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CancelOperationRequest::id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.CancelOperationRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CancelOperationRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.CancelOperationRequest.id)
}
inline std::string* CancelOperationRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.CancelOperationRequest.id)
  return _s;
}
inline const std::string& CancelOperationRequest::_internal_id() const {
  return id_.Get();
}
inline void CancelOperationRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* CancelOperationRequest::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* CancelOperationRequest::release_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.CancelOperationRequest.id)
  return id_.Release();
}
inline void CancelOperationRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.CancelOperationRequest.id)
}

// -------------------------------------------------------------------

// CancelOperationResponse

// -------------------------------------------------------------------

// BlockForOperationRequest

// string id = 1 [json_name = "id"];
inline void BlockForOperationRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& BlockForOperationRequest::id() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.BlockForOperationRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BlockForOperationRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.BlockForOperationRequest.id)
}
inline std::string* BlockForOperationRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.BlockForOperationRequest.id)
  return _s;
}
inline const std::string& BlockForOperationRequest::_internal_id() const {
  return id_.Get();
}
inline void BlockForOperationRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockForOperationRequest::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* BlockForOperationRequest::release_id() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.BlockForOperationRequest.id)
  return id_.Release();
}
inline void BlockForOperationRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.BlockForOperationRequest.id)
}

// -------------------------------------------------------------------

// BlockForOperationResponse

// -------------------------------------------------------------------

// DiscoveryQuery

// string subtype = 1 [json_name = "subtype"];
inline void DiscoveryQuery::clear_subtype() {
  subtype_.ClearToEmpty();
}
inline const std::string& DiscoveryQuery::subtype() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.DiscoveryQuery.subtype)
  return _internal_subtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQuery::set_subtype(ArgT0&& arg0, ArgT... args) {
 
 subtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.DiscoveryQuery.subtype)
}
inline std::string* DiscoveryQuery::mutable_subtype() {
  std::string* _s = _internal_mutable_subtype();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.DiscoveryQuery.subtype)
  return _s;
}
inline const std::string& DiscoveryQuery::_internal_subtype() const {
  return subtype_.Get();
}
inline void DiscoveryQuery::_internal_set_subtype(const std::string& value) {
  
  subtype_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQuery::_internal_mutable_subtype() {
  
  return subtype_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQuery::release_subtype() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.DiscoveryQuery.subtype)
  return subtype_.Release();
}
inline void DiscoveryQuery::set_allocated_subtype(std::string* subtype) {
  if (subtype != nullptr) {
    
  } else {
    
  }
  subtype_.SetAllocated(subtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subtype_.IsDefault()) {
    subtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.DiscoveryQuery.subtype)
}

// string model = 2 [json_name = "model"];
inline void DiscoveryQuery::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& DiscoveryQuery::model() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.DiscoveryQuery.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryQuery::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.robot.v1.DiscoveryQuery.model)
}
inline std::string* DiscoveryQuery::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.DiscoveryQuery.model)
  return _s;
}
inline const std::string& DiscoveryQuery::_internal_model() const {
  return model_.Get();
}
inline void DiscoveryQuery::_internal_set_model(const std::string& value) {
  
  model_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryQuery::_internal_mutable_model() {
  
  return model_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryQuery::release_model() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.DiscoveryQuery.model)
  return model_.Release();
}
inline void DiscoveryQuery::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault()) {
    model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.DiscoveryQuery.model)
}

// -------------------------------------------------------------------

// Discovery

// .viam.robot.v1.DiscoveryQuery query = 1 [json_name = "query"];
inline bool Discovery::_internal_has_query() const {
  return this != internal_default_instance() && query_ != nullptr;
}
inline bool Discovery::has_query() const {
  return _internal_has_query();
}
inline void Discovery::clear_query() {
  if (GetArenaForAllocation() == nullptr && query_ != nullptr) {
    delete query_;
  }
  query_ = nullptr;
}
inline const ::viam::robot::v1::DiscoveryQuery& Discovery::_internal_query() const {
  const ::viam::robot::v1::DiscoveryQuery* p = query_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::robot::v1::DiscoveryQuery&>(
      ::viam::robot::v1::_DiscoveryQuery_default_instance_);
}
inline const ::viam::robot::v1::DiscoveryQuery& Discovery::query() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Discovery.query)
  return _internal_query();
}
inline void Discovery::unsafe_arena_set_allocated_query(
    ::viam::robot::v1::DiscoveryQuery* query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_);
  }
  query_ = query;
  if (query) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Discovery.query)
}
inline ::viam::robot::v1::DiscoveryQuery* Discovery::release_query() {
  
  ::viam::robot::v1::DiscoveryQuery* temp = query_;
  query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::robot::v1::DiscoveryQuery* Discovery::unsafe_arena_release_query() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Discovery.query)
  
  ::viam::robot::v1::DiscoveryQuery* temp = query_;
  query_ = nullptr;
  return temp;
}
inline ::viam::robot::v1::DiscoveryQuery* Discovery::_internal_mutable_query() {
  
  if (query_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::robot::v1::DiscoveryQuery>(GetArenaForAllocation());
    query_ = p;
  }
  return query_;
}
inline ::viam::robot::v1::DiscoveryQuery* Discovery::mutable_query() {
  ::viam::robot::v1::DiscoveryQuery* _msg = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Discovery.query)
  return _msg;
}
inline void Discovery::set_allocated_query(::viam::robot::v1::DiscoveryQuery* query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete query_;
  }
  if (query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(query);
    if (message_arena != submessage_arena) {
      query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, query, submessage_arena);
    }
    
  } else {
    
  }
  query_ = query;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Discovery.query)
}

// .google.protobuf.Struct results = 2 [json_name = "results"];
inline bool Discovery::_internal_has_results() const {
  return this != internal_default_instance() && results_ != nullptr;
}
inline bool Discovery::has_results() const {
  return _internal_has_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Discovery::_internal_results() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = results_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Discovery::results() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Discovery.results)
  return _internal_results();
}
inline void Discovery::unsafe_arena_set_allocated_results(
    ::PROTOBUF_NAMESPACE_ID::Struct* results) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  results_ = results;
  if (results) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Discovery.results)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Discovery::release_results() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = results_;
  results_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Discovery::unsafe_arena_release_results() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Discovery.results)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = results_;
  results_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Discovery::_internal_mutable_results() {
  
  if (results_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    results_ = p;
  }
  return results_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Discovery::mutable_results() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_results();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Discovery.results)
  return _msg;
}
inline void Discovery::set_allocated_results(::PROTOBUF_NAMESPACE_ID::Struct* results) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(results_);
  }
  if (results) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(results));
    if (message_arena != submessage_arena) {
      results = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, results, submessage_arena);
    }
    
  } else {
    
  }
  results_ = results;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Discovery.results)
}

// -------------------------------------------------------------------

// DiscoverComponentsRequest

// repeated .viam.robot.v1.DiscoveryQuery queries = 1 [json_name = "queries"];
inline int DiscoverComponentsRequest::_internal_queries_size() const {
  return queries_.size();
}
inline int DiscoverComponentsRequest::queries_size() const {
  return _internal_queries_size();
}
inline void DiscoverComponentsRequest::clear_queries() {
  queries_.Clear();
}
inline ::viam::robot::v1::DiscoveryQuery* DiscoverComponentsRequest::mutable_queries(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.DiscoverComponentsRequest.queries)
  return queries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::DiscoveryQuery >*
DiscoverComponentsRequest::mutable_queries() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.DiscoverComponentsRequest.queries)
  return &queries_;
}
inline const ::viam::robot::v1::DiscoveryQuery& DiscoverComponentsRequest::_internal_queries(int index) const {
  return queries_.Get(index);
}
inline const ::viam::robot::v1::DiscoveryQuery& DiscoverComponentsRequest::queries(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.DiscoverComponentsRequest.queries)
  return _internal_queries(index);
}
inline ::viam::robot::v1::DiscoveryQuery* DiscoverComponentsRequest::_internal_add_queries() {
  return queries_.Add();
}
inline ::viam::robot::v1::DiscoveryQuery* DiscoverComponentsRequest::add_queries() {
  ::viam::robot::v1::DiscoveryQuery* _add = _internal_add_queries();
  // @@protoc_insertion_point(field_add:viam.robot.v1.DiscoverComponentsRequest.queries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::DiscoveryQuery >&
DiscoverComponentsRequest::queries() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.DiscoverComponentsRequest.queries)
  return queries_;
}

// -------------------------------------------------------------------

// DiscoverComponentsResponse

// repeated .viam.robot.v1.Discovery discovery = 1 [json_name = "discovery"];
inline int DiscoverComponentsResponse::_internal_discovery_size() const {
  return discovery_.size();
}
inline int DiscoverComponentsResponse::discovery_size() const {
  return _internal_discovery_size();
}
inline void DiscoverComponentsResponse::clear_discovery() {
  discovery_.Clear();
}
inline ::viam::robot::v1::Discovery* DiscoverComponentsResponse::mutable_discovery(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.DiscoverComponentsResponse.discovery)
  return discovery_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Discovery >*
DiscoverComponentsResponse::mutable_discovery() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.DiscoverComponentsResponse.discovery)
  return &discovery_;
}
inline const ::viam::robot::v1::Discovery& DiscoverComponentsResponse::_internal_discovery(int index) const {
  return discovery_.Get(index);
}
inline const ::viam::robot::v1::Discovery& DiscoverComponentsResponse::discovery(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.DiscoverComponentsResponse.discovery)
  return _internal_discovery(index);
}
inline ::viam::robot::v1::Discovery* DiscoverComponentsResponse::_internal_add_discovery() {
  return discovery_.Add();
}
inline ::viam::robot::v1::Discovery* DiscoverComponentsResponse::add_discovery() {
  ::viam::robot::v1::Discovery* _add = _internal_add_discovery();
  // @@protoc_insertion_point(field_add:viam.robot.v1.DiscoverComponentsResponse.discovery)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Discovery >&
DiscoverComponentsResponse::discovery() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.DiscoverComponentsResponse.discovery)
  return discovery_;
}

// -------------------------------------------------------------------

// Status

// .viam.common.v1.ResourceName name = 1 [json_name = "name"];
inline bool Status::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool Status::has_name() const {
  return _internal_has_name();
}
inline const ::viam::common::v1::ResourceName& Status::_internal_name() const {
  const ::viam::common::v1::ResourceName* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::ResourceName&>(
      ::viam::common::v1::_ResourceName_default_instance_);
}
inline const ::viam::common::v1::ResourceName& Status::name() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Status.name)
  return _internal_name();
}
inline void Status::unsafe_arena_set_allocated_name(
    ::viam::common::v1::ResourceName* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Status.name)
}
inline ::viam::common::v1::ResourceName* Status::release_name() {
  
  ::viam::common::v1::ResourceName* temp = name_;
  name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::ResourceName* Status::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Status.name)
  
  ::viam::common::v1::ResourceName* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::viam::common::v1::ResourceName* Status::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::ResourceName>(GetArenaForAllocation());
    name_ = p;
  }
  return name_;
}
inline ::viam::common::v1::ResourceName* Status::mutable_name() {
  ::viam::common::v1::ResourceName* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Status.name)
  return _msg;
}
inline void Status::set_allocated_name(::viam::common::v1::ResourceName* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name));
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Status.name)
}

// .google.protobuf.Struct status = 2 [json_name = "status"];
inline bool Status::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Status::has_status() const {
  return _internal_has_status();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Status::_internal_status() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& Status::status() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.Status.status)
  return _internal_status();
}
inline void Status::unsafe_arena_set_allocated_status(
    ::PROTOBUF_NAMESPACE_ID::Struct* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.Status.status)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Status::release_status() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Status::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.Status.status)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Status::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* Status::mutable_status() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.Status.status)
  return _msg;
}
inline void Status::set_allocated_status(::PROTOBUF_NAMESPACE_ID::Struct* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.Status.status)
}

// -------------------------------------------------------------------

// GetStatusRequest

// repeated .viam.common.v1.ResourceName resource_names = 1 [json_name = "resourceNames"];
inline int GetStatusRequest::_internal_resource_names_size() const {
  return resource_names_.size();
}
inline int GetStatusRequest::resource_names_size() const {
  return _internal_resource_names_size();
}
inline ::viam::common::v1::ResourceName* GetStatusRequest::mutable_resource_names(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetStatusRequest.resource_names)
  return resource_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
GetStatusRequest::mutable_resource_names() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.GetStatusRequest.resource_names)
  return &resource_names_;
}
inline const ::viam::common::v1::ResourceName& GetStatusRequest::_internal_resource_names(int index) const {
  return resource_names_.Get(index);
}
inline const ::viam::common::v1::ResourceName& GetStatusRequest::resource_names(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetStatusRequest.resource_names)
  return _internal_resource_names(index);
}
inline ::viam::common::v1::ResourceName* GetStatusRequest::_internal_add_resource_names() {
  return resource_names_.Add();
}
inline ::viam::common::v1::ResourceName* GetStatusRequest::add_resource_names() {
  ::viam::common::v1::ResourceName* _add = _internal_add_resource_names();
  // @@protoc_insertion_point(field_add:viam.robot.v1.GetStatusRequest.resource_names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
GetStatusRequest::resource_names() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.GetStatusRequest.resource_names)
  return resource_names_;
}

// -------------------------------------------------------------------

// GetStatusResponse

// repeated .viam.robot.v1.Status status = 1 [json_name = "status"];
inline int GetStatusResponse::_internal_status_size() const {
  return status_.size();
}
inline int GetStatusResponse::status_size() const {
  return _internal_status_size();
}
inline void GetStatusResponse::clear_status() {
  status_.Clear();
}
inline ::viam::robot::v1::Status* GetStatusResponse::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.GetStatusResponse.status)
  return status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >*
GetStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.GetStatusResponse.status)
  return &status_;
}
inline const ::viam::robot::v1::Status& GetStatusResponse::_internal_status(int index) const {
  return status_.Get(index);
}
inline const ::viam::robot::v1::Status& GetStatusResponse::status(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.GetStatusResponse.status)
  return _internal_status(index);
}
inline ::viam::robot::v1::Status* GetStatusResponse::_internal_add_status() {
  return status_.Add();
}
inline ::viam::robot::v1::Status* GetStatusResponse::add_status() {
  ::viam::robot::v1::Status* _add = _internal_add_status();
  // @@protoc_insertion_point(field_add:viam.robot.v1.GetStatusResponse.status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >&
GetStatusResponse::status() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.GetStatusResponse.status)
  return status_;
}

// -------------------------------------------------------------------

// StreamStatusRequest

// repeated .viam.common.v1.ResourceName resource_names = 1 [json_name = "resourceNames"];
inline int StreamStatusRequest::_internal_resource_names_size() const {
  return resource_names_.size();
}
inline int StreamStatusRequest::resource_names_size() const {
  return _internal_resource_names_size();
}
inline ::viam::common::v1::ResourceName* StreamStatusRequest::mutable_resource_names(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StreamStatusRequest.resource_names)
  return resource_names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >*
StreamStatusRequest::mutable_resource_names() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.StreamStatusRequest.resource_names)
  return &resource_names_;
}
inline const ::viam::common::v1::ResourceName& StreamStatusRequest::_internal_resource_names(int index) const {
  return resource_names_.Get(index);
}
inline const ::viam::common::v1::ResourceName& StreamStatusRequest::resource_names(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StreamStatusRequest.resource_names)
  return _internal_resource_names(index);
}
inline ::viam::common::v1::ResourceName* StreamStatusRequest::_internal_add_resource_names() {
  return resource_names_.Add();
}
inline ::viam::common::v1::ResourceName* StreamStatusRequest::add_resource_names() {
  ::viam::common::v1::ResourceName* _add = _internal_add_resource_names();
  // @@protoc_insertion_point(field_add:viam.robot.v1.StreamStatusRequest.resource_names)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::ResourceName >&
StreamStatusRequest::resource_names() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.StreamStatusRequest.resource_names)
  return resource_names_;
}

// .google.protobuf.Duration every = 2 [json_name = "every"];
inline bool StreamStatusRequest::_internal_has_every() const {
  return this != internal_default_instance() && every_ != nullptr;
}
inline bool StreamStatusRequest::has_every() const {
  return _internal_has_every();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamStatusRequest::_internal_every() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = every_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& StreamStatusRequest::every() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StreamStatusRequest.every)
  return _internal_every();
}
inline void StreamStatusRequest::unsafe_arena_set_allocated_every(
    ::PROTOBUF_NAMESPACE_ID::Duration* every) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(every_);
  }
  every_ = every;
  if (every) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.StreamStatusRequest.every)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamStatusRequest::release_every() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = every_;
  every_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamStatusRequest::unsafe_arena_release_every() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.StreamStatusRequest.every)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = every_;
  every_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamStatusRequest::_internal_mutable_every() {
  
  if (every_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    every_ = p;
  }
  return every_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* StreamStatusRequest::mutable_every() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_every();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StreamStatusRequest.every)
  return _msg;
}
inline void StreamStatusRequest::set_allocated_every(::PROTOBUF_NAMESPACE_ID::Duration* every) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(every_);
  }
  if (every) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(every));
    if (message_arena != submessage_arena) {
      every = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, every, submessage_arena);
    }
    
  } else {
    
  }
  every_ = every;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.StreamStatusRequest.every)
}

// -------------------------------------------------------------------

// StreamStatusResponse

// repeated .viam.robot.v1.Status status = 1 [json_name = "status"];
inline int StreamStatusResponse::_internal_status_size() const {
  return status_.size();
}
inline int StreamStatusResponse::status_size() const {
  return _internal_status_size();
}
inline void StreamStatusResponse::clear_status() {
  status_.Clear();
}
inline ::viam::robot::v1::Status* StreamStatusResponse::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StreamStatusResponse.status)
  return status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >*
StreamStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.StreamStatusResponse.status)
  return &status_;
}
inline const ::viam::robot::v1::Status& StreamStatusResponse::_internal_status(int index) const {
  return status_.Get(index);
}
inline const ::viam::robot::v1::Status& StreamStatusResponse::status(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StreamStatusResponse.status)
  return _internal_status(index);
}
inline ::viam::robot::v1::Status* StreamStatusResponse::_internal_add_status() {
  return status_.Add();
}
inline ::viam::robot::v1::Status* StreamStatusResponse::add_status() {
  ::viam::robot::v1::Status* _add = _internal_add_status();
  // @@protoc_insertion_point(field_add:viam.robot.v1.StreamStatusResponse.status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::Status >&
StreamStatusResponse::status() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.StreamStatusResponse.status)
  return status_;
}

// -------------------------------------------------------------------

// StopExtraParameters

// .viam.common.v1.ResourceName name = 1 [json_name = "name"];
inline bool StopExtraParameters::_internal_has_name() const {
  return this != internal_default_instance() && name_ != nullptr;
}
inline bool StopExtraParameters::has_name() const {
  return _internal_has_name();
}
inline const ::viam::common::v1::ResourceName& StopExtraParameters::_internal_name() const {
  const ::viam::common::v1::ResourceName* p = name_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::ResourceName&>(
      ::viam::common::v1::_ResourceName_default_instance_);
}
inline const ::viam::common::v1::ResourceName& StopExtraParameters::name() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StopExtraParameters.name)
  return _internal_name();
}
inline void StopExtraParameters::unsafe_arena_set_allocated_name(
    ::viam::common::v1::ResourceName* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.StopExtraParameters.name)
}
inline ::viam::common::v1::ResourceName* StopExtraParameters::release_name() {
  
  ::viam::common::v1::ResourceName* temp = name_;
  name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::ResourceName* StopExtraParameters::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.StopExtraParameters.name)
  
  ::viam::common::v1::ResourceName* temp = name_;
  name_ = nullptr;
  return temp;
}
inline ::viam::common::v1::ResourceName* StopExtraParameters::_internal_mutable_name() {
  
  if (name_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::ResourceName>(GetArenaForAllocation());
    name_ = p;
  }
  return name_;
}
inline ::viam::common::v1::ResourceName* StopExtraParameters::mutable_name() {
  ::viam::common::v1::ResourceName* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StopExtraParameters.name)
  return _msg;
}
inline void StopExtraParameters::set_allocated_name(::viam::common::v1::ResourceName* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name));
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    
  } else {
    
  }
  name_ = name;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.StopExtraParameters.name)
}

// .google.protobuf.Struct params = 2 [json_name = "params"];
inline bool StopExtraParameters::_internal_has_params() const {
  return this != internal_default_instance() && params_ != nullptr;
}
inline bool StopExtraParameters::has_params() const {
  return _internal_has_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StopExtraParameters::_internal_params() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = params_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StopExtraParameters::params() const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StopExtraParameters.params)
  return _internal_params();
}
inline void StopExtraParameters::unsafe_arena_set_allocated_params(
    ::PROTOBUF_NAMESPACE_ID::Struct* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  params_ = params;
  if (params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.robot.v1.StopExtraParameters.params)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopExtraParameters::release_params() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = params_;
  params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopExtraParameters::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:viam.robot.v1.StopExtraParameters.params)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = params_;
  params_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopExtraParameters::_internal_mutable_params() {
  
  if (params_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    params_ = p;
  }
  return params_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopExtraParameters::mutable_params() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StopExtraParameters.params)
  return _msg;
}
inline void StopExtraParameters::set_allocated_params(::PROTOBUF_NAMESPACE_ID::Struct* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    
  } else {
    
  }
  params_ = params;
  // @@protoc_insertion_point(field_set_allocated:viam.robot.v1.StopExtraParameters.params)
}

// -------------------------------------------------------------------

// StopAllRequest

// repeated .viam.robot.v1.StopExtraParameters extra = 99 [json_name = "extra"];
inline int StopAllRequest::_internal_extra_size() const {
  return extra_.size();
}
inline int StopAllRequest::extra_size() const {
  return _internal_extra_size();
}
inline void StopAllRequest::clear_extra() {
  extra_.Clear();
}
inline ::viam::robot::v1::StopExtraParameters* StopAllRequest::mutable_extra(int index) {
  // @@protoc_insertion_point(field_mutable:viam.robot.v1.StopAllRequest.extra)
  return extra_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::StopExtraParameters >*
StopAllRequest::mutable_extra() {
  // @@protoc_insertion_point(field_mutable_list:viam.robot.v1.StopAllRequest.extra)
  return &extra_;
}
inline const ::viam::robot::v1::StopExtraParameters& StopAllRequest::_internal_extra(int index) const {
  return extra_.Get(index);
}
inline const ::viam::robot::v1::StopExtraParameters& StopAllRequest::extra(int index) const {
  // @@protoc_insertion_point(field_get:viam.robot.v1.StopAllRequest.extra)
  return _internal_extra(index);
}
inline ::viam::robot::v1::StopExtraParameters* StopAllRequest::_internal_add_extra() {
  return extra_.Add();
}
inline ::viam::robot::v1::StopExtraParameters* StopAllRequest::add_extra() {
  ::viam::robot::v1::StopExtraParameters* _add = _internal_add_extra();
  // @@protoc_insertion_point(field_add:viam.robot.v1.StopAllRequest.extra)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::robot::v1::StopExtraParameters >&
StopAllRequest::extra() const {
  // @@protoc_insertion_point(field_list:viam.robot.v1.StopAllRequest.extra)
  return extra_;
}

// -------------------------------------------------------------------

// StopAllResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace robot
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_robot_2fv1_2frobot_2eproto
