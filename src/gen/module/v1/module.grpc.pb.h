// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: module/v1/module.proto
#ifndef GRPC_module_2fv1_2fmodule_2eproto__INCLUDED
#define GRPC_module_2fv1_2fmodule_2eproto__INCLUDED

#include "module/v1/module.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace viam {
namespace module {
namespace v1 {

// ModuleService deals with modular resource registration
class ModuleService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.module.v1.ModuleService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // AddResource tells a module about a new resource to handle
    virtual ::grpc::Status AddResource(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest& request, ::viam::module::v1::AddResourceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::AddResourceResponse>> AsyncAddResource(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::AddResourceResponse>>(AsyncAddResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::AddResourceResponse>> PrepareAsyncAddResource(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::AddResourceResponse>>(PrepareAsyncAddResourceRaw(context, request, cq));
    }
    // ReconfigureResource tells a module to reconfigure an existing resource
    virtual ::grpc::Status ReconfigureResource(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest& request, ::viam::module::v1::ReconfigureResourceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ReconfigureResourceResponse>> AsyncReconfigureResource(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ReconfigureResourceResponse>>(AsyncReconfigureResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ReconfigureResourceResponse>> PrepareAsyncReconfigureResource(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ReconfigureResourceResponse>>(PrepareAsyncReconfigureResourceRaw(context, request, cq));
    }
    // RemoveResource tells a module to close/stop a component/service and remove it
    virtual ::grpc::Status RemoveResource(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest& request, ::viam::module::v1::RemoveResourceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::RemoveResourceResponse>> AsyncRemoveResource(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::RemoveResourceResponse>>(AsyncRemoveResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::RemoveResourceResponse>> PrepareAsyncRemoveResource(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::RemoveResourceResponse>>(PrepareAsyncRemoveResourceRaw(context, request, cq));
    }
    // Ready determines if the server is started and ready to recieve resource configurations.
    virtual ::grpc::Status Ready(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest& request, ::viam::module::v1::ReadyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ReadyResponse>> AsyncReady(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ReadyResponse>>(AsyncReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ReadyResponse>> PrepareAsyncReady(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ReadyResponse>>(PrepareAsyncReadyRaw(context, request, cq));
    }
    // ValidateConfig determines whether the given config is valid and registers/returns implicit
    // dependencies.
    virtual ::grpc::Status ValidateConfig(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest& request, ::viam::module::v1::ValidateConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ValidateConfigResponse>> AsyncValidateConfig(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ValidateConfigResponse>>(AsyncValidateConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ValidateConfigResponse>> PrepareAsyncValidateConfig(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ValidateConfigResponse>>(PrepareAsyncValidateConfigRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // AddResource tells a module about a new resource to handle
      virtual void AddResource(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest* request, ::viam::module::v1::AddResourceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddResource(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest* request, ::viam::module::v1::AddResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ReconfigureResource tells a module to reconfigure an existing resource
      virtual void ReconfigureResource(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest* request, ::viam::module::v1::ReconfigureResourceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReconfigureResource(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest* request, ::viam::module::v1::ReconfigureResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RemoveResource tells a module to close/stop a component/service and remove it
      virtual void RemoveResource(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest* request, ::viam::module::v1::RemoveResourceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveResource(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest* request, ::viam::module::v1::RemoveResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Ready determines if the server is started and ready to recieve resource configurations.
      virtual void Ready(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest* request, ::viam::module::v1::ReadyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ready(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest* request, ::viam::module::v1::ReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ValidateConfig determines whether the given config is valid and registers/returns implicit
      // dependencies.
      virtual void ValidateConfig(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest* request, ::viam::module::v1::ValidateConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ValidateConfig(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest* request, ::viam::module::v1::ValidateConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::AddResourceResponse>* AsyncAddResourceRaw(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::AddResourceResponse>* PrepareAsyncAddResourceRaw(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ReconfigureResourceResponse>* AsyncReconfigureResourceRaw(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ReconfigureResourceResponse>* PrepareAsyncReconfigureResourceRaw(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::RemoveResourceResponse>* AsyncRemoveResourceRaw(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::RemoveResourceResponse>* PrepareAsyncRemoveResourceRaw(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ReadyResponse>* AsyncReadyRaw(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ReadyResponse>* PrepareAsyncReadyRaw(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ValidateConfigResponse>* AsyncValidateConfigRaw(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::module::v1::ValidateConfigResponse>* PrepareAsyncValidateConfigRaw(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status AddResource(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest& request, ::viam::module::v1::AddResourceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::AddResourceResponse>> AsyncAddResource(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::AddResourceResponse>>(AsyncAddResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::AddResourceResponse>> PrepareAsyncAddResource(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::AddResourceResponse>>(PrepareAsyncAddResourceRaw(context, request, cq));
    }
    ::grpc::Status ReconfigureResource(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest& request, ::viam::module::v1::ReconfigureResourceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ReconfigureResourceResponse>> AsyncReconfigureResource(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ReconfigureResourceResponse>>(AsyncReconfigureResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ReconfigureResourceResponse>> PrepareAsyncReconfigureResource(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ReconfigureResourceResponse>>(PrepareAsyncReconfigureResourceRaw(context, request, cq));
    }
    ::grpc::Status RemoveResource(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest& request, ::viam::module::v1::RemoveResourceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::RemoveResourceResponse>> AsyncRemoveResource(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::RemoveResourceResponse>>(AsyncRemoveResourceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::RemoveResourceResponse>> PrepareAsyncRemoveResource(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::RemoveResourceResponse>>(PrepareAsyncRemoveResourceRaw(context, request, cq));
    }
    ::grpc::Status Ready(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest& request, ::viam::module::v1::ReadyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ReadyResponse>> AsyncReady(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ReadyResponse>>(AsyncReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ReadyResponse>> PrepareAsyncReady(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ReadyResponse>>(PrepareAsyncReadyRaw(context, request, cq));
    }
    ::grpc::Status ValidateConfig(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest& request, ::viam::module::v1::ValidateConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ValidateConfigResponse>> AsyncValidateConfig(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ValidateConfigResponse>>(AsyncValidateConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ValidateConfigResponse>> PrepareAsyncValidateConfig(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ValidateConfigResponse>>(PrepareAsyncValidateConfigRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void AddResource(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest* request, ::viam::module::v1::AddResourceResponse* response, std::function<void(::grpc::Status)>) override;
      void AddResource(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest* request, ::viam::module::v1::AddResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReconfigureResource(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest* request, ::viam::module::v1::ReconfigureResourceResponse* response, std::function<void(::grpc::Status)>) override;
      void ReconfigureResource(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest* request, ::viam::module::v1::ReconfigureResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveResource(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest* request, ::viam::module::v1::RemoveResourceResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveResource(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest* request, ::viam::module::v1::RemoveResourceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Ready(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest* request, ::viam::module::v1::ReadyResponse* response, std::function<void(::grpc::Status)>) override;
      void Ready(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest* request, ::viam::module::v1::ReadyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ValidateConfig(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest* request, ::viam::module::v1::ValidateConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void ValidateConfig(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest* request, ::viam::module::v1::ValidateConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::module::v1::AddResourceResponse>* AsyncAddResourceRaw(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::module::v1::AddResourceResponse>* PrepareAsyncAddResourceRaw(::grpc::ClientContext* context, const ::viam::module::v1::AddResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ReconfigureResourceResponse>* AsyncReconfigureResourceRaw(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ReconfigureResourceResponse>* PrepareAsyncReconfigureResourceRaw(::grpc::ClientContext* context, const ::viam::module::v1::ReconfigureResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::module::v1::RemoveResourceResponse>* AsyncRemoveResourceRaw(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::module::v1::RemoveResourceResponse>* PrepareAsyncRemoveResourceRaw(::grpc::ClientContext* context, const ::viam::module::v1::RemoveResourceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ReadyResponse>* AsyncReadyRaw(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ReadyResponse>* PrepareAsyncReadyRaw(::grpc::ClientContext* context, const ::viam::module::v1::ReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ValidateConfigResponse>* AsyncValidateConfigRaw(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::module::v1::ValidateConfigResponse>* PrepareAsyncValidateConfigRaw(::grpc::ClientContext* context, const ::viam::module::v1::ValidateConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddResource_;
    const ::grpc::internal::RpcMethod rpcmethod_ReconfigureResource_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveResource_;
    const ::grpc::internal::RpcMethod rpcmethod_Ready_;
    const ::grpc::internal::RpcMethod rpcmethod_ValidateConfig_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // AddResource tells a module about a new resource to handle
    virtual ::grpc::Status AddResource(::grpc::ServerContext* context, const ::viam::module::v1::AddResourceRequest* request, ::viam::module::v1::AddResourceResponse* response);
    // ReconfigureResource tells a module to reconfigure an existing resource
    virtual ::grpc::Status ReconfigureResource(::grpc::ServerContext* context, const ::viam::module::v1::ReconfigureResourceRequest* request, ::viam::module::v1::ReconfigureResourceResponse* response);
    // RemoveResource tells a module to close/stop a component/service and remove it
    virtual ::grpc::Status RemoveResource(::grpc::ServerContext* context, const ::viam::module::v1::RemoveResourceRequest* request, ::viam::module::v1::RemoveResourceResponse* response);
    // Ready determines if the server is started and ready to recieve resource configurations.
    virtual ::grpc::Status Ready(::grpc::ServerContext* context, const ::viam::module::v1::ReadyRequest* request, ::viam::module::v1::ReadyResponse* response);
    // ValidateConfig determines whether the given config is valid and registers/returns implicit
    // dependencies.
    virtual ::grpc::Status ValidateConfig(::grpc::ServerContext* context, const ::viam::module::v1::ValidateConfigRequest* request, ::viam::module::v1::ValidateConfigResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddResource() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::AddResourceRequest* /*request*/, ::viam::module::v1::AddResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddResource(::grpc::ServerContext* context, ::viam::module::v1::AddResourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::module::v1::AddResourceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReconfigureResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReconfigureResource() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ReconfigureResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconfigureResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ReconfigureResourceRequest* /*request*/, ::viam::module::v1::ReconfigureResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconfigureResource(::grpc::ServerContext* context, ::viam::module::v1::ReconfigureResourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::module::v1::ReconfigureResourceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveResource() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RemoveResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::RemoveResourceRequest* /*request*/, ::viam::module::v1::RemoveResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveResource(::grpc::ServerContext* context, ::viam::module::v1::RemoveResourceRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::module::v1::RemoveResourceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ready : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ready() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Ready() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ready(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ReadyRequest* /*request*/, ::viam::module::v1::ReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReady(::grpc::ServerContext* context, ::viam::module::v1::ReadyRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::module::v1::ReadyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ValidateConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ValidateConfig() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ValidateConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateConfig(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ValidateConfigRequest* /*request*/, ::viam::module::v1::ValidateConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateConfig(::grpc::ServerContext* context, ::viam::module::v1::ValidateConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::module::v1::ValidateConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddResource<WithAsyncMethod_ReconfigureResource<WithAsyncMethod_RemoveResource<WithAsyncMethod_Ready<WithAsyncMethod_ValidateConfig<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_AddResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddResource() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::module::v1::AddResourceRequest, ::viam::module::v1::AddResourceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::module::v1::AddResourceRequest* request, ::viam::module::v1::AddResourceResponse* response) { return this->AddResource(context, request, response); }));}
    void SetMessageAllocatorFor_AddResource(
        ::grpc::MessageAllocator< ::viam::module::v1::AddResourceRequest, ::viam::module::v1::AddResourceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::module::v1::AddResourceRequest, ::viam::module::v1::AddResourceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::AddResourceRequest* /*request*/, ::viam::module::v1::AddResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddResource(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::module::v1::AddResourceRequest* /*request*/, ::viam::module::v1::AddResourceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReconfigureResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReconfigureResource() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::module::v1::ReconfigureResourceRequest, ::viam::module::v1::ReconfigureResourceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::module::v1::ReconfigureResourceRequest* request, ::viam::module::v1::ReconfigureResourceResponse* response) { return this->ReconfigureResource(context, request, response); }));}
    void SetMessageAllocatorFor_ReconfigureResource(
        ::grpc::MessageAllocator< ::viam::module::v1::ReconfigureResourceRequest, ::viam::module::v1::ReconfigureResourceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::module::v1::ReconfigureResourceRequest, ::viam::module::v1::ReconfigureResourceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReconfigureResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconfigureResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ReconfigureResourceRequest* /*request*/, ::viam::module::v1::ReconfigureResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReconfigureResource(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::module::v1::ReconfigureResourceRequest* /*request*/, ::viam::module::v1::ReconfigureResourceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveResource() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::module::v1::RemoveResourceRequest, ::viam::module::v1::RemoveResourceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::module::v1::RemoveResourceRequest* request, ::viam::module::v1::RemoveResourceResponse* response) { return this->RemoveResource(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveResource(
        ::grpc::MessageAllocator< ::viam::module::v1::RemoveResourceRequest, ::viam::module::v1::RemoveResourceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::module::v1::RemoveResourceRequest, ::viam::module::v1::RemoveResourceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::RemoveResourceRequest* /*request*/, ::viam::module::v1::RemoveResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveResource(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::module::v1::RemoveResourceRequest* /*request*/, ::viam::module::v1::RemoveResourceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Ready : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ready() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::module::v1::ReadyRequest, ::viam::module::v1::ReadyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::module::v1::ReadyRequest* request, ::viam::module::v1::ReadyResponse* response) { return this->Ready(context, request, response); }));}
    void SetMessageAllocatorFor_Ready(
        ::grpc::MessageAllocator< ::viam::module::v1::ReadyRequest, ::viam::module::v1::ReadyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::module::v1::ReadyRequest, ::viam::module::v1::ReadyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ready() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ready(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ReadyRequest* /*request*/, ::viam::module::v1::ReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ready(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::module::v1::ReadyRequest* /*request*/, ::viam::module::v1::ReadyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ValidateConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ValidateConfig() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::module::v1::ValidateConfigRequest, ::viam::module::v1::ValidateConfigResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::module::v1::ValidateConfigRequest* request, ::viam::module::v1::ValidateConfigResponse* response) { return this->ValidateConfig(context, request, response); }));}
    void SetMessageAllocatorFor_ValidateConfig(
        ::grpc::MessageAllocator< ::viam::module::v1::ValidateConfigRequest, ::viam::module::v1::ValidateConfigResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::module::v1::ValidateConfigRequest, ::viam::module::v1::ValidateConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ValidateConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateConfig(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ValidateConfigRequest* /*request*/, ::viam::module::v1::ValidateConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidateConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::module::v1::ValidateConfigRequest* /*request*/, ::viam::module::v1::ValidateConfigResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_AddResource<WithCallbackMethod_ReconfigureResource<WithCallbackMethod_RemoveResource<WithCallbackMethod_Ready<WithCallbackMethod_ValidateConfig<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddResource() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::AddResourceRequest* /*request*/, ::viam::module::v1::AddResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReconfigureResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReconfigureResource() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ReconfigureResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconfigureResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ReconfigureResourceRequest* /*request*/, ::viam::module::v1::ReconfigureResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveResource() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RemoveResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::RemoveResourceRequest* /*request*/, ::viam::module::v1::RemoveResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ready : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ready() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Ready() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ready(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ReadyRequest* /*request*/, ::viam::module::v1::ReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ValidateConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ValidateConfig() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ValidateConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateConfig(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ValidateConfigRequest* /*request*/, ::viam::module::v1::ValidateConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddResource() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::AddResourceRequest* /*request*/, ::viam::module::v1::AddResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReconfigureResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReconfigureResource() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ReconfigureResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconfigureResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ReconfigureResourceRequest* /*request*/, ::viam::module::v1::ReconfigureResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReconfigureResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveResource() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RemoveResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::RemoveResourceRequest* /*request*/, ::viam::module::v1::RemoveResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveResource(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ready : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ready() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Ready() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ready(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ReadyRequest* /*request*/, ::viam::module::v1::ReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ValidateConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ValidateConfig() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ValidateConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateConfig(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ValidateConfigRequest* /*request*/, ::viam::module::v1::ValidateConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestValidateConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddResource() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddResource(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::AddResourceRequest* /*request*/, ::viam::module::v1::AddResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReconfigureResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReconfigureResource() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReconfigureResource(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReconfigureResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReconfigureResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ReconfigureResourceRequest* /*request*/, ::viam::module::v1::ReconfigureResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReconfigureResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveResource() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveResource(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::RemoveResourceRequest* /*request*/, ::viam::module::v1::RemoveResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveResource(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ready : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ready() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ready(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ready() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ready(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ReadyRequest* /*request*/, ::viam::module::v1::ReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ready(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ValidateConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ValidateConfig() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ValidateConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_ValidateConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ValidateConfig(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ValidateConfigRequest* /*request*/, ::viam::module::v1::ValidateConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ValidateConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddResource() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::module::v1::AddResourceRequest, ::viam::module::v1::AddResourceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::module::v1::AddResourceRequest, ::viam::module::v1::AddResourceResponse>* streamer) {
                       return this->StreamedAddResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::AddResourceRequest* /*request*/, ::viam::module::v1::AddResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::module::v1::AddResourceRequest,::viam::module::v1::AddResourceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReconfigureResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReconfigureResource() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::module::v1::ReconfigureResourceRequest, ::viam::module::v1::ReconfigureResourceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::module::v1::ReconfigureResourceRequest, ::viam::module::v1::ReconfigureResourceResponse>* streamer) {
                       return this->StreamedReconfigureResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReconfigureResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReconfigureResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ReconfigureResourceRequest* /*request*/, ::viam::module::v1::ReconfigureResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReconfigureResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::module::v1::ReconfigureResourceRequest,::viam::module::v1::ReconfigureResourceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveResource : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveResource() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::module::v1::RemoveResourceRequest, ::viam::module::v1::RemoveResourceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::module::v1::RemoveResourceRequest, ::viam::module::v1::RemoveResourceResponse>* streamer) {
                       return this->StreamedRemoveResource(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveResource() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveResource(::grpc::ServerContext* /*context*/, const ::viam::module::v1::RemoveResourceRequest* /*request*/, ::viam::module::v1::RemoveResourceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveResource(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::module::v1::RemoveResourceRequest,::viam::module::v1::RemoveResourceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ready : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ready() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::module::v1::ReadyRequest, ::viam::module::v1::ReadyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::module::v1::ReadyRequest, ::viam::module::v1::ReadyResponse>* streamer) {
                       return this->StreamedReady(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ready() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ready(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ReadyRequest* /*request*/, ::viam::module::v1::ReadyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::module::v1::ReadyRequest,::viam::module::v1::ReadyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ValidateConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ValidateConfig() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::module::v1::ValidateConfigRequest, ::viam::module::v1::ValidateConfigResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::module::v1::ValidateConfigRequest, ::viam::module::v1::ValidateConfigResponse>* streamer) {
                       return this->StreamedValidateConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ValidateConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ValidateConfig(::grpc::ServerContext* /*context*/, const ::viam::module::v1::ValidateConfigRequest* /*request*/, ::viam::module::v1::ValidateConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedValidateConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::module::v1::ValidateConfigRequest,::viam::module::v1::ValidateConfigResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddResource<WithStreamedUnaryMethod_ReconfigureResource<WithStreamedUnaryMethod_RemoveResource<WithStreamedUnaryMethod_Ready<WithStreamedUnaryMethod_ValidateConfig<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddResource<WithStreamedUnaryMethod_ReconfigureResource<WithStreamedUnaryMethod_RemoveResource<WithStreamedUnaryMethod_Ready<WithStreamedUnaryMethod_ValidateConfig<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace module
}  // namespace viam


#endif  // GRPC_module_2fv1_2fmodule_2eproto__INCLUDED
