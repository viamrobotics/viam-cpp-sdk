// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/package/v1/package.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fpackage_2fv1_2fpackage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_2fpackage_2fv1_2fpackage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_2fpackage_2fv1_2fpackage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fpackage_2fv1_2fpackage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_app_2fpackage_2fv1_2fpackage_2eproto;
namespace viam {
namespace app {
namespace package {
namespace v1 {
class CreatePackageRequest;
struct CreatePackageRequestDefaultTypeInternal;
extern CreatePackageRequestDefaultTypeInternal _CreatePackageRequest_default_instance_;
class CreatePackageResponse;
struct CreatePackageResponseDefaultTypeInternal;
extern CreatePackageResponseDefaultTypeInternal _CreatePackageResponse_default_instance_;
class DeletePackageRequest;
struct DeletePackageRequestDefaultTypeInternal;
extern DeletePackageRequestDefaultTypeInternal _DeletePackageRequest_default_instance_;
class DeletePackageResponse;
struct DeletePackageResponseDefaultTypeInternal;
extern DeletePackageResponseDefaultTypeInternal _DeletePackageResponse_default_instance_;
class FileInfo;
struct FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class GetPackageRequest;
struct GetPackageRequestDefaultTypeInternal;
extern GetPackageRequestDefaultTypeInternal _GetPackageRequest_default_instance_;
class GetPackageResponse;
struct GetPackageResponseDefaultTypeInternal;
extern GetPackageResponseDefaultTypeInternal _GetPackageResponse_default_instance_;
class ListPackagesRequest;
struct ListPackagesRequestDefaultTypeInternal;
extern ListPackagesRequestDefaultTypeInternal _ListPackagesRequest_default_instance_;
class ListPackagesResponse;
struct ListPackagesResponseDefaultTypeInternal;
extern ListPackagesResponseDefaultTypeInternal _ListPackagesResponse_default_instance_;
class Package;
struct PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class PackageInfo;
struct PackageInfoDefaultTypeInternal;
extern PackageInfoDefaultTypeInternal _PackageInfo_default_instance_;
}  // namespace v1
}  // namespace package
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::app::package::v1::CreatePackageRequest* Arena::CreateMaybeMessage<::viam::app::package::v1::CreatePackageRequest>(Arena*);
template<> ::viam::app::package::v1::CreatePackageResponse* Arena::CreateMaybeMessage<::viam::app::package::v1::CreatePackageResponse>(Arena*);
template<> ::viam::app::package::v1::DeletePackageRequest* Arena::CreateMaybeMessage<::viam::app::package::v1::DeletePackageRequest>(Arena*);
template<> ::viam::app::package::v1::DeletePackageResponse* Arena::CreateMaybeMessage<::viam::app::package::v1::DeletePackageResponse>(Arena*);
template<> ::viam::app::package::v1::FileInfo* Arena::CreateMaybeMessage<::viam::app::package::v1::FileInfo>(Arena*);
template<> ::viam::app::package::v1::GetPackageRequest* Arena::CreateMaybeMessage<::viam::app::package::v1::GetPackageRequest>(Arena*);
template<> ::viam::app::package::v1::GetPackageResponse* Arena::CreateMaybeMessage<::viam::app::package::v1::GetPackageResponse>(Arena*);
template<> ::viam::app::package::v1::ListPackagesRequest* Arena::CreateMaybeMessage<::viam::app::package::v1::ListPackagesRequest>(Arena*);
template<> ::viam::app::package::v1::ListPackagesResponse* Arena::CreateMaybeMessage<::viam::app::package::v1::ListPackagesResponse>(Arena*);
template<> ::viam::app::package::v1::Package* Arena::CreateMaybeMessage<::viam::app::package::v1::Package>(Arena*);
template<> ::viam::app::package::v1::PackageInfo* Arena::CreateMaybeMessage<::viam::app::package::v1::PackageInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace app {
namespace package {
namespace v1 {

enum PackageType : int {
  PACKAGE_TYPE_UNSPECIFIED = 0,
  PACKAGE_TYPE_ARCHIVE = 1,
  PACKAGE_TYPE_ML_MODEL = 2,
  PackageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PackageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PackageType_IsValid(int value);
constexpr PackageType PackageType_MIN = PACKAGE_TYPE_UNSPECIFIED;
constexpr PackageType PackageType_MAX = PACKAGE_TYPE_ML_MODEL;
constexpr int PackageType_ARRAYSIZE = PackageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PackageType_descriptor();
template<typename T>
inline const std::string& PackageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PackageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PackageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PackageType_descriptor(), enum_t_value);
}
inline bool PackageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PackageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PackageType>(
    PackageType_descriptor(), name, value);
}
// ===================================================================

class FileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.package.v1.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  ~FileInfo() override;
  explicit PROTOBUF_CONSTEXPR FileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.package.v1.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 size = 2 [json_name = "size"];
  void clear_size();
  uint64_t size() const;
  void set_size(uint64_t value);
  private:
  uint64_t _internal_size() const;
  void _internal_set_size(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.package.v1.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fpackage_2fv1_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class PackageInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.package.v1.PackageInfo) */ {
 public:
  inline PackageInfo() : PackageInfo(nullptr) {}
  ~PackageInfo() override;
  explicit PROTOBUF_CONSTEXPR PackageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PackageInfo(const PackageInfo& from);
  PackageInfo(PackageInfo&& from) noexcept
    : PackageInfo() {
    *this = ::std::move(from);
  }

  inline PackageInfo& operator=(const PackageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PackageInfo& operator=(PackageInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PackageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PackageInfo* internal_default_instance() {
    return reinterpret_cast<const PackageInfo*>(
               &_PackageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PackageInfo& a, PackageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PackageInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PackageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PackageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PackageInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PackageInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PackageInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackageInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.package.v1.PackageInfo";
  }
  protected:
  explicit PackageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 5,
    kOrganizationIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kMetadataFieldNumber = 6,
    kTypeFieldNumber = 4,
  };
  // repeated .viam.app.package.v1.FileInfo files = 5 [json_name = "files"];
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::viam::app::package::v1::FileInfo* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::package::v1::FileInfo >*
      mutable_files();
  private:
  const ::viam::app::package::v1::FileInfo& _internal_files(int index) const;
  ::viam::app::package::v1::FileInfo* _internal_add_files();
  public:
  const ::viam::app::package::v1::FileInfo& files(int index) const;
  ::viam::app::package::v1::FileInfo* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::package::v1::FileInfo >&
      files() const;

  // string organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_NODISCARD std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 3 [json_name = "version"];
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .google.protobuf.Struct metadata = 6 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::PROTOBUF_NAMESPACE_ID::Struct& metadata() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_metadata();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_metadata();
  void set_allocated_metadata(::PROTOBUF_NAMESPACE_ID::Struct* metadata);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::PROTOBUF_NAMESPACE_ID::Struct* metadata);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_metadata();

  // .viam.app.package.v1.PackageType type = 4 [json_name = "type"];
  void clear_type();
  ::viam::app::package::v1::PackageType type() const;
  void set_type(::viam::app::package::v1::PackageType value);
  private:
  ::viam::app::package::v1::PackageType _internal_type() const;
  void _internal_set_type(::viam::app::package::v1::PackageType value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.package.v1.PackageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::package::v1::FileInfo > files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::Struct* metadata_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fpackage_2fv1_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class CreatePackageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.package.v1.CreatePackageRequest) */ {
 public:
  inline CreatePackageRequest() : CreatePackageRequest(nullptr) {}
  ~CreatePackageRequest() override;
  explicit PROTOBUF_CONSTEXPR CreatePackageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePackageRequest(const CreatePackageRequest& from);
  CreatePackageRequest(CreatePackageRequest&& from) noexcept
    : CreatePackageRequest() {
    *this = ::std::move(from);
  }

  inline CreatePackageRequest& operator=(const CreatePackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePackageRequest& operator=(CreatePackageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePackageRequest& default_instance() {
    return *internal_default_instance();
  }
  enum PackageCase {
    kInfo = 1,
    kContents = 2,
    PACKAGE_NOT_SET = 0,
  };

  static inline const CreatePackageRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePackageRequest*>(
               &_CreatePackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreatePackageRequest& a, CreatePackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePackageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePackageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatePackageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreatePackageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePackageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.package.v1.CreatePackageRequest";
  }
  protected:
  explicit CreatePackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kContentsFieldNumber = 2,
  };
  // .viam.app.package.v1.PackageInfo info = 1 [json_name = "info"];
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::viam::app::package::v1::PackageInfo& info() const;
  PROTOBUF_NODISCARD ::viam::app::package::v1::PackageInfo* release_info();
  ::viam::app::package::v1::PackageInfo* mutable_info();
  void set_allocated_info(::viam::app::package::v1::PackageInfo* info);
  private:
  const ::viam::app::package::v1::PackageInfo& _internal_info() const;
  ::viam::app::package::v1::PackageInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::viam::app::package::v1::PackageInfo* info);
  ::viam::app::package::v1::PackageInfo* unsafe_arena_release_info();

  // bytes contents = 2 [json_name = "contents"];
  bool has_contents() const;
  private:
  bool _internal_has_contents() const;
  public:
  void clear_contents();
  const std::string& contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contents();
  PROTOBUF_NODISCARD std::string* release_contents();
  void set_allocated_contents(std::string* contents);
  private:
  const std::string& _internal_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contents(const std::string& value);
  std::string* _internal_mutable_contents();
  public:

  void clear_package();
  PackageCase package_case() const;
  // @@protoc_insertion_point(class_scope:viam.app.package.v1.CreatePackageRequest)
 private:
  class _Internal;
  void set_has_info();
  void set_has_contents();

  inline bool has_package() const;
  inline void clear_has_package();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PackageUnion {
    constexpr PackageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::viam::app::package::v1::PackageInfo* info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contents_;
  } package_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_app_2fpackage_2fv1_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class CreatePackageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.package.v1.CreatePackageResponse) */ {
 public:
  inline CreatePackageResponse() : CreatePackageResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CreatePackageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePackageResponse(const CreatePackageResponse& from);
  CreatePackageResponse(CreatePackageResponse&& from) noexcept
    : CreatePackageResponse() {
    *this = ::std::move(from);
  }

  inline CreatePackageResponse& operator=(const CreatePackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePackageResponse& operator=(CreatePackageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePackageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePackageResponse* internal_default_instance() {
    return reinterpret_cast<const CreatePackageResponse*>(
               &_CreatePackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreatePackageResponse& a, CreatePackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePackageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePackageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePackageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePackageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CreatePackageResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CreatePackageResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.package.v1.CreatePackageResponse";
  }
  protected:
  explicit CreatePackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.package.v1.CreatePackageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_app_2fpackage_2fv1_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class DeletePackageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.package.v1.DeletePackageRequest) */ {
 public:
  inline DeletePackageRequest() : DeletePackageRequest(nullptr) {}
  ~DeletePackageRequest() override;
  explicit PROTOBUF_CONSTEXPR DeletePackageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeletePackageRequest(const DeletePackageRequest& from);
  DeletePackageRequest(DeletePackageRequest&& from) noexcept
    : DeletePackageRequest() {
    *this = ::std::move(from);
  }

  inline DeletePackageRequest& operator=(const DeletePackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePackageRequest& operator=(DeletePackageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeletePackageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeletePackageRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePackageRequest*>(
               &_DeletePackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeletePackageRequest& a, DeletePackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePackageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeletePackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeletePackageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeletePackageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeletePackageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePackageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.package.v1.DeletePackageRequest";
  }
  protected:
  explicit DeletePackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionsFieldNumber = 3,
    kOrganizationIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated string versions = 3 [json_name = "versions"];
  int versions_size() const;
  private:
  int _internal_versions_size() const;
  public:
  void clear_versions();
  const std::string& versions(int index) const;
  std::string* mutable_versions(int index);
  void set_versions(int index, const std::string& value);
  void set_versions(int index, std::string&& value);
  void set_versions(int index, const char* value);
  void set_versions(int index, const char* value, size_t size);
  std::string* add_versions();
  void add_versions(const std::string& value);
  void add_versions(std::string&& value);
  void add_versions(const char* value);
  void add_versions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& versions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_versions();
  private:
  const std::string& _internal_versions(int index) const;
  std::string* _internal_add_versions();
  public:

  // string organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_NODISCARD std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.package.v1.DeletePackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> versions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fpackage_2fv1_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class DeletePackageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.package.v1.DeletePackageResponse) */ {
 public:
  inline DeletePackageResponse() : DeletePackageResponse(nullptr) {}
  ~DeletePackageResponse() override;
  explicit PROTOBUF_CONSTEXPR DeletePackageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeletePackageResponse(const DeletePackageResponse& from);
  DeletePackageResponse(DeletePackageResponse&& from) noexcept
    : DeletePackageResponse() {
    *this = ::std::move(from);
  }

  inline DeletePackageResponse& operator=(const DeletePackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePackageResponse& operator=(DeletePackageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeletePackageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeletePackageResponse* internal_default_instance() {
    return reinterpret_cast<const DeletePackageResponse*>(
               &_DeletePackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeletePackageResponse& a, DeletePackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePackageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePackageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeletePackageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeletePackageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeletePackageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeletePackageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePackageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.package.v1.DeletePackageResponse";
  }
  protected:
  explicit DeletePackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedCountFieldNumber = 1,
  };
  // int64 deleted_count = 1 [json_name = "deletedCount"];
  void clear_deleted_count();
  int64_t deleted_count() const;
  void set_deleted_count(int64_t value);
  private:
  int64_t _internal_deleted_count() const;
  void _internal_set_deleted_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.package.v1.DeletePackageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t deleted_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fpackage_2fv1_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class Package final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.package.v1.Package) */ {
 public:
  inline Package() : Package(nullptr) {}
  ~Package() override;
  explicit PROTOBUF_CONSTEXPR Package(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Package(const Package& from);
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline Package& operator=(Package&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Package& default_instance() {
    return *internal_default_instance();
  }
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }
  inline void Swap(Package* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Package* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Package& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Package& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Package* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.package.v1.Package";
  }
  protected:
  explicit Package(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 2,
    kInfoFieldNumber = 1,
  };
  // string uri = 2 [json_name = "uri"];
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // .viam.app.package.v1.PackageInfo info = 1 [json_name = "info"];
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::viam::app::package::v1::PackageInfo& info() const;
  PROTOBUF_NODISCARD ::viam::app::package::v1::PackageInfo* release_info();
  ::viam::app::package::v1::PackageInfo* mutable_info();
  void set_allocated_info(::viam::app::package::v1::PackageInfo* info);
  private:
  const ::viam::app::package::v1::PackageInfo& _internal_info() const;
  ::viam::app::package::v1::PackageInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::viam::app::package::v1::PackageInfo* info);
  ::viam::app::package::v1::PackageInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:viam.app.package.v1.Package)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::viam::app::package::v1::PackageInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fpackage_2fv1_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class GetPackageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.package.v1.GetPackageRequest) */ {
 public:
  inline GetPackageRequest() : GetPackageRequest(nullptr) {}
  ~GetPackageRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPackageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPackageRequest(const GetPackageRequest& from);
  GetPackageRequest(GetPackageRequest&& from) noexcept
    : GetPackageRequest() {
    *this = ::std::move(from);
  }

  inline GetPackageRequest& operator=(const GetPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPackageRequest& operator=(GetPackageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPackageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPackageRequest* internal_default_instance() {
    return reinterpret_cast<const GetPackageRequest*>(
               &_GetPackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetPackageRequest& a, GetPackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPackageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPackageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPackageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPackageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPackageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.package.v1.GetPackageRequest";
  }
  protected:
  explicit GetPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // string organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_NODISCARD std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 3 [json_name = "version"];
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.package.v1.GetPackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fpackage_2fv1_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class GetPackageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.package.v1.GetPackageResponse) */ {
 public:
  inline GetPackageResponse() : GetPackageResponse(nullptr) {}
  ~GetPackageResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPackageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPackageResponse(const GetPackageResponse& from);
  GetPackageResponse(GetPackageResponse&& from) noexcept
    : GetPackageResponse() {
    *this = ::std::move(from);
  }

  inline GetPackageResponse& operator=(const GetPackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPackageResponse& operator=(GetPackageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPackageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPackageResponse* internal_default_instance() {
    return reinterpret_cast<const GetPackageResponse*>(
               &_GetPackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetPackageResponse& a, GetPackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPackageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPackageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPackageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPackageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPackageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPackageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPackageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.package.v1.GetPackageResponse";
  }
  protected:
  explicit GetPackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
  };
  // .viam.app.package.v1.Package package = 1 [json_name = "package"];
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::viam::app::package::v1::Package& package() const;
  PROTOBUF_NODISCARD ::viam::app::package::v1::Package* release_package();
  ::viam::app::package::v1::Package* mutable_package();
  void set_allocated_package(::viam::app::package::v1::Package* package);
  private:
  const ::viam::app::package::v1::Package& _internal_package() const;
  ::viam::app::package::v1::Package* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::viam::app::package::v1::Package* package);
  ::viam::app::package::v1::Package* unsafe_arena_release_package();

  // @@protoc_insertion_point(class_scope:viam.app.package.v1.GetPackageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::app::package::v1::Package* package_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fpackage_2fv1_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class ListPackagesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.package.v1.ListPackagesRequest) */ {
 public:
  inline ListPackagesRequest() : ListPackagesRequest(nullptr) {}
  ~ListPackagesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListPackagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPackagesRequest(const ListPackagesRequest& from);
  ListPackagesRequest(ListPackagesRequest&& from) noexcept
    : ListPackagesRequest() {
    *this = ::std::move(from);
  }

  inline ListPackagesRequest& operator=(const ListPackagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPackagesRequest& operator=(ListPackagesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPackagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPackagesRequest* internal_default_instance() {
    return reinterpret_cast<const ListPackagesRequest*>(
               &_ListPackagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListPackagesRequest& a, ListPackagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPackagesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPackagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPackagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPackagesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPackagesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListPackagesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPackagesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.package.v1.ListPackagesRequest";
  }
  protected:
  explicit ListPackagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrganizationIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kTypeFieldNumber = 4,
  };
  // string organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_NODISCARD std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // optional string name = 2 [json_name = "name"];
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string version = 3 [json_name = "version"];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional .viam.app.package.v1.PackageType type = 4 [json_name = "type"];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::viam::app::package::v1::PackageType type() const;
  void set_type(::viam::app::package::v1::PackageType value);
  private:
  ::viam::app::package::v1::PackageType _internal_type() const;
  void _internal_set_type(::viam::app::package::v1::PackageType value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.package.v1.ListPackagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  int type_;
  friend struct ::TableStruct_app_2fpackage_2fv1_2fpackage_2eproto;
};
// -------------------------------------------------------------------

class ListPackagesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.package.v1.ListPackagesResponse) */ {
 public:
  inline ListPackagesResponse() : ListPackagesResponse(nullptr) {}
  ~ListPackagesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListPackagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPackagesResponse(const ListPackagesResponse& from);
  ListPackagesResponse(ListPackagesResponse&& from) noexcept
    : ListPackagesResponse() {
    *this = ::std::move(from);
  }

  inline ListPackagesResponse& operator=(const ListPackagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPackagesResponse& operator=(ListPackagesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPackagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPackagesResponse* internal_default_instance() {
    return reinterpret_cast<const ListPackagesResponse*>(
               &_ListPackagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListPackagesResponse& a, ListPackagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPackagesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPackagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPackagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPackagesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPackagesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListPackagesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPackagesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.package.v1.ListPackagesResponse";
  }
  protected:
  explicit ListPackagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 1,
  };
  // repeated .viam.app.package.v1.Package packages = 1 [json_name = "packages"];
  int packages_size() const;
  private:
  int _internal_packages_size() const;
  public:
  void clear_packages();
  ::viam::app::package::v1::Package* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::package::v1::Package >*
      mutable_packages();
  private:
  const ::viam::app::package::v1::Package& _internal_packages(int index) const;
  ::viam::app::package::v1::Package* _internal_add_packages();
  public:
  const ::viam::app::package::v1::Package& packages(int index) const;
  ::viam::app::package::v1::Package* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::package::v1::Package >&
      packages() const;

  // @@protoc_insertion_point(class_scope:viam.app.package.v1.ListPackagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::package::v1::Package > packages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fpackage_2fv1_2fpackage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileInfo

// string name = 1 [json_name = "name"];
inline void FileInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FileInfo::name() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.FileInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.FileInfo.name)
}
inline std::string* FileInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.FileInfo.name)
  return _s;
}
inline const std::string& FileInfo::_internal_name() const {
  return name_.Get();
}
inline void FileInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* FileInfo::release_name() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.FileInfo.name)
  return name_.Release();
}
inline void FileInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.FileInfo.name)
}

// uint64 size = 2 [json_name = "size"];
inline void FileInfo::clear_size() {
  size_ = uint64_t{0u};
}
inline uint64_t FileInfo::_internal_size() const {
  return size_;
}
inline uint64_t FileInfo::size() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.FileInfo.size)
  return _internal_size();
}
inline void FileInfo::_internal_set_size(uint64_t value) {
  
  size_ = value;
}
inline void FileInfo::set_size(uint64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:viam.app.package.v1.FileInfo.size)
}

// -------------------------------------------------------------------

// PackageInfo

// string organization_id = 1 [json_name = "organizationId"];
inline void PackageInfo::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& PackageInfo::organization_id() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.PackageInfo.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PackageInfo::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.PackageInfo.organization_id)
}
inline std::string* PackageInfo::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.PackageInfo.organization_id)
  return _s;
}
inline const std::string& PackageInfo::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void PackageInfo::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PackageInfo::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PackageInfo::release_organization_id() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.PackageInfo.organization_id)
  return organization_id_.Release();
}
inline void PackageInfo::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(organization_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (organization_id_.IsDefault()) {
    organization_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.PackageInfo.organization_id)
}

// string name = 2 [json_name = "name"];
inline void PackageInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PackageInfo::name() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.PackageInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PackageInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.PackageInfo.name)
}
inline std::string* PackageInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.PackageInfo.name)
  return _s;
}
inline const std::string& PackageInfo::_internal_name() const {
  return name_.Get();
}
inline void PackageInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* PackageInfo::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* PackageInfo::release_name() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.PackageInfo.name)
  return name_.Release();
}
inline void PackageInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.PackageInfo.name)
}

// string version = 3 [json_name = "version"];
inline void PackageInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& PackageInfo::version() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.PackageInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PackageInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.PackageInfo.version)
}
inline std::string* PackageInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.PackageInfo.version)
  return _s;
}
inline const std::string& PackageInfo::_internal_version() const {
  return version_.Get();
}
inline void PackageInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* PackageInfo::_internal_mutable_version() {
  
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* PackageInfo::release_version() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.PackageInfo.version)
  return version_.Release();
}
inline void PackageInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.PackageInfo.version)
}

// .viam.app.package.v1.PackageType type = 4 [json_name = "type"];
inline void PackageInfo::clear_type() {
  type_ = 0;
}
inline ::viam::app::package::v1::PackageType PackageInfo::_internal_type() const {
  return static_cast< ::viam::app::package::v1::PackageType >(type_);
}
inline ::viam::app::package::v1::PackageType PackageInfo::type() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.PackageInfo.type)
  return _internal_type();
}
inline void PackageInfo::_internal_set_type(::viam::app::package::v1::PackageType value) {
  
  type_ = value;
}
inline void PackageInfo::set_type(::viam::app::package::v1::PackageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:viam.app.package.v1.PackageInfo.type)
}

// repeated .viam.app.package.v1.FileInfo files = 5 [json_name = "files"];
inline int PackageInfo::_internal_files_size() const {
  return files_.size();
}
inline int PackageInfo::files_size() const {
  return _internal_files_size();
}
inline void PackageInfo::clear_files() {
  files_.Clear();
}
inline ::viam::app::package::v1::FileInfo* PackageInfo::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.PackageInfo.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::package::v1::FileInfo >*
PackageInfo::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.package.v1.PackageInfo.files)
  return &files_;
}
inline const ::viam::app::package::v1::FileInfo& PackageInfo::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::viam::app::package::v1::FileInfo& PackageInfo::files(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.PackageInfo.files)
  return _internal_files(index);
}
inline ::viam::app::package::v1::FileInfo* PackageInfo::_internal_add_files() {
  return files_.Add();
}
inline ::viam::app::package::v1::FileInfo* PackageInfo::add_files() {
  ::viam::app::package::v1::FileInfo* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:viam.app.package.v1.PackageInfo.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::package::v1::FileInfo >&
PackageInfo::files() const {
  // @@protoc_insertion_point(field_list:viam.app.package.v1.PackageInfo.files)
  return files_;
}

// .google.protobuf.Struct metadata = 6 [json_name = "metadata"];
inline bool PackageInfo::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool PackageInfo::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& PackageInfo::_internal_metadata() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& PackageInfo::metadata() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.PackageInfo.metadata)
  return _internal_metadata();
}
inline void PackageInfo::unsafe_arena_set_allocated_metadata(
    ::PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.package.v1.PackageInfo.metadata)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PackageInfo::release_metadata() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PackageInfo::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.PackageInfo.metadata)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PackageInfo::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* PackageInfo::mutable_metadata() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.PackageInfo.metadata)
  return _msg;
}
inline void PackageInfo::set_allocated_metadata(::PROTOBUF_NAMESPACE_ID::Struct* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.PackageInfo.metadata)
}

// -------------------------------------------------------------------

// CreatePackageRequest

// .viam.app.package.v1.PackageInfo info = 1 [json_name = "info"];
inline bool CreatePackageRequest::_internal_has_info() const {
  return package_case() == kInfo;
}
inline bool CreatePackageRequest::has_info() const {
  return _internal_has_info();
}
inline void CreatePackageRequest::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void CreatePackageRequest::clear_info() {
  if (_internal_has_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete package_.info_;
    }
    clear_has_package();
  }
}
inline ::viam::app::package::v1::PackageInfo* CreatePackageRequest::release_info() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.CreatePackageRequest.info)
  if (_internal_has_info()) {
    clear_has_package();
    ::viam::app::package::v1::PackageInfo* temp = package_.info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    package_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::app::package::v1::PackageInfo& CreatePackageRequest::_internal_info() const {
  return _internal_has_info()
      ? *package_.info_
      : reinterpret_cast< ::viam::app::package::v1::PackageInfo&>(::viam::app::package::v1::_PackageInfo_default_instance_);
}
inline const ::viam::app::package::v1::PackageInfo& CreatePackageRequest::info() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.CreatePackageRequest.info)
  return _internal_info();
}
inline ::viam::app::package::v1::PackageInfo* CreatePackageRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.app.package.v1.CreatePackageRequest.info)
  if (_internal_has_info()) {
    clear_has_package();
    ::viam::app::package::v1::PackageInfo* temp = package_.info_;
    package_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CreatePackageRequest::unsafe_arena_set_allocated_info(::viam::app::package::v1::PackageInfo* info) {
  clear_package();
  if (info) {
    set_has_info();
    package_.info_ = info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.package.v1.CreatePackageRequest.info)
}
inline ::viam::app::package::v1::PackageInfo* CreatePackageRequest::_internal_mutable_info() {
  if (!_internal_has_info()) {
    clear_package();
    set_has_info();
    package_.info_ = CreateMaybeMessage< ::viam::app::package::v1::PackageInfo >(GetArenaForAllocation());
  }
  return package_.info_;
}
inline ::viam::app::package::v1::PackageInfo* CreatePackageRequest::mutable_info() {
  ::viam::app::package::v1::PackageInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.CreatePackageRequest.info)
  return _msg;
}

// bytes contents = 2 [json_name = "contents"];
inline bool CreatePackageRequest::_internal_has_contents() const {
  return package_case() == kContents;
}
inline bool CreatePackageRequest::has_contents() const {
  return _internal_has_contents();
}
inline void CreatePackageRequest::set_has_contents() {
  _oneof_case_[0] = kContents;
}
inline void CreatePackageRequest::clear_contents() {
  if (_internal_has_contents()) {
    package_.contents_.Destroy();
    clear_has_package();
  }
}
inline const std::string& CreatePackageRequest::contents() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.CreatePackageRequest.contents)
  return _internal_contents();
}
template <typename ArgT0, typename... ArgT>
inline void CreatePackageRequest::set_contents(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_contents()) {
    clear_package();
    set_has_contents();
    package_.contents_.InitDefault();
  }
  package_.contents_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.CreatePackageRequest.contents)
}
inline std::string* CreatePackageRequest::mutable_contents() {
  std::string* _s = _internal_mutable_contents();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.CreatePackageRequest.contents)
  return _s;
}
inline const std::string& CreatePackageRequest::_internal_contents() const {
  if (_internal_has_contents()) {
    return package_.contents_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CreatePackageRequest::_internal_set_contents(const std::string& value) {
  if (!_internal_has_contents()) {
    clear_package();
    set_has_contents();
    package_.contents_.InitDefault();
  }
  package_.contents_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePackageRequest::_internal_mutable_contents() {
  if (!_internal_has_contents()) {
    clear_package();
    set_has_contents();
    package_.contents_.InitDefault();
  }
  return package_.contents_.Mutable(      GetArenaForAllocation());
}
inline std::string* CreatePackageRequest::release_contents() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.CreatePackageRequest.contents)
  if (_internal_has_contents()) {
    clear_has_package();
    return package_.contents_.Release();
  } else {
    return nullptr;
  }
}
inline void CreatePackageRequest::set_allocated_contents(std::string* contents) {
  if (has_package()) {
    clear_package();
  }
  if (contents != nullptr) {
    set_has_contents();
    package_.contents_.InitAllocated(contents, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.CreatePackageRequest.contents)
}

inline bool CreatePackageRequest::has_package() const {
  return package_case() != PACKAGE_NOT_SET;
}
inline void CreatePackageRequest::clear_has_package() {
  _oneof_case_[0] = PACKAGE_NOT_SET;
}
inline CreatePackageRequest::PackageCase CreatePackageRequest::package_case() const {
  return CreatePackageRequest::PackageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreatePackageResponse

// -------------------------------------------------------------------

// DeletePackageRequest

// string organization_id = 1 [json_name = "organizationId"];
inline void DeletePackageRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& DeletePackageRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.DeletePackageRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeletePackageRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.DeletePackageRequest.organization_id)
}
inline std::string* DeletePackageRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.DeletePackageRequest.organization_id)
  return _s;
}
inline const std::string& DeletePackageRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void DeletePackageRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeletePackageRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeletePackageRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.DeletePackageRequest.organization_id)
  return organization_id_.Release();
}
inline void DeletePackageRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(organization_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (organization_id_.IsDefault()) {
    organization_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.DeletePackageRequest.organization_id)
}

// string name = 2 [json_name = "name"];
inline void DeletePackageRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeletePackageRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.DeletePackageRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeletePackageRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.DeletePackageRequest.name)
}
inline std::string* DeletePackageRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.DeletePackageRequest.name)
  return _s;
}
inline const std::string& DeletePackageRequest::_internal_name() const {
  return name_.Get();
}
inline void DeletePackageRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeletePackageRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeletePackageRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.DeletePackageRequest.name)
  return name_.Release();
}
inline void DeletePackageRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.DeletePackageRequest.name)
}

// repeated string versions = 3 [json_name = "versions"];
inline int DeletePackageRequest::_internal_versions_size() const {
  return versions_.size();
}
inline int DeletePackageRequest::versions_size() const {
  return _internal_versions_size();
}
inline void DeletePackageRequest::clear_versions() {
  versions_.Clear();
}
inline std::string* DeletePackageRequest::add_versions() {
  std::string* _s = _internal_add_versions();
  // @@protoc_insertion_point(field_add_mutable:viam.app.package.v1.DeletePackageRequest.versions)
  return _s;
}
inline const std::string& DeletePackageRequest::_internal_versions(int index) const {
  return versions_.Get(index);
}
inline const std::string& DeletePackageRequest::versions(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.DeletePackageRequest.versions)
  return _internal_versions(index);
}
inline std::string* DeletePackageRequest::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.DeletePackageRequest.versions)
  return versions_.Mutable(index);
}
inline void DeletePackageRequest::set_versions(int index, const std::string& value) {
  versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.package.v1.DeletePackageRequest.versions)
}
inline void DeletePackageRequest::set_versions(int index, std::string&& value) {
  versions_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.package.v1.DeletePackageRequest.versions)
}
inline void DeletePackageRequest::set_versions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.package.v1.DeletePackageRequest.versions)
}
inline void DeletePackageRequest::set_versions(int index, const char* value, size_t size) {
  versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.package.v1.DeletePackageRequest.versions)
}
inline std::string* DeletePackageRequest::_internal_add_versions() {
  return versions_.Add();
}
inline void DeletePackageRequest::add_versions(const std::string& value) {
  versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.package.v1.DeletePackageRequest.versions)
}
inline void DeletePackageRequest::add_versions(std::string&& value) {
  versions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.package.v1.DeletePackageRequest.versions)
}
inline void DeletePackageRequest::add_versions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.package.v1.DeletePackageRequest.versions)
}
inline void DeletePackageRequest::add_versions(const char* value, size_t size) {
  versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.package.v1.DeletePackageRequest.versions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeletePackageRequest::versions() const {
  // @@protoc_insertion_point(field_list:viam.app.package.v1.DeletePackageRequest.versions)
  return versions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeletePackageRequest::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.package.v1.DeletePackageRequest.versions)
  return &versions_;
}

// -------------------------------------------------------------------

// DeletePackageResponse

// int64 deleted_count = 1 [json_name = "deletedCount"];
inline void DeletePackageResponse::clear_deleted_count() {
  deleted_count_ = int64_t{0};
}
inline int64_t DeletePackageResponse::_internal_deleted_count() const {
  return deleted_count_;
}
inline int64_t DeletePackageResponse::deleted_count() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.DeletePackageResponse.deleted_count)
  return _internal_deleted_count();
}
inline void DeletePackageResponse::_internal_set_deleted_count(int64_t value) {
  
  deleted_count_ = value;
}
inline void DeletePackageResponse::set_deleted_count(int64_t value) {
  _internal_set_deleted_count(value);
  // @@protoc_insertion_point(field_set:viam.app.package.v1.DeletePackageResponse.deleted_count)
}

// -------------------------------------------------------------------

// Package

// .viam.app.package.v1.PackageInfo info = 1 [json_name = "info"];
inline bool Package::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool Package::has_info() const {
  return _internal_has_info();
}
inline void Package::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::viam::app::package::v1::PackageInfo& Package::_internal_info() const {
  const ::viam::app::package::v1::PackageInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::package::v1::PackageInfo&>(
      ::viam::app::package::v1::_PackageInfo_default_instance_);
}
inline const ::viam::app::package::v1::PackageInfo& Package::info() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.Package.info)
  return _internal_info();
}
inline void Package::unsafe_arena_set_allocated_info(
    ::viam::app::package::v1::PackageInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.package.v1.Package.info)
}
inline ::viam::app::package::v1::PackageInfo* Package::release_info() {
  
  ::viam::app::package::v1::PackageInfo* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::package::v1::PackageInfo* Package::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.Package.info)
  
  ::viam::app::package::v1::PackageInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::viam::app::package::v1::PackageInfo* Package::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::package::v1::PackageInfo>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::viam::app::package::v1::PackageInfo* Package::mutable_info() {
  ::viam::app::package::v1::PackageInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.Package.info)
  return _msg;
}
inline void Package::set_allocated_info(::viam::app::package::v1::PackageInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.Package.info)
}

// string uri = 2 [json_name = "uri"];
inline void Package::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& Package::uri() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.Package.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Package::set_uri(ArgT0&& arg0, ArgT... args) {
 
 uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.Package.uri)
}
inline std::string* Package::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.Package.uri)
  return _s;
}
inline const std::string& Package::_internal_uri() const {
  return uri_.Get();
}
inline void Package::_internal_set_uri(const std::string& value) {
  
  uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Package::_internal_mutable_uri() {
  
  return uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Package::release_uri() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.Package.uri)
  return uri_.Release();
}
inline void Package::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault()) {
    uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.Package.uri)
}

// -------------------------------------------------------------------

// GetPackageRequest

// string organization_id = 1 [json_name = "organizationId"];
inline void GetPackageRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& GetPackageRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.GetPackageRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPackageRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.GetPackageRequest.organization_id)
}
inline std::string* GetPackageRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.GetPackageRequest.organization_id)
  return _s;
}
inline const std::string& GetPackageRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void GetPackageRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPackageRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPackageRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.GetPackageRequest.organization_id)
  return organization_id_.Release();
}
inline void GetPackageRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(organization_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (organization_id_.IsDefault()) {
    organization_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.GetPackageRequest.organization_id)
}

// string name = 2 [json_name = "name"];
inline void GetPackageRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetPackageRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.GetPackageRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPackageRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.GetPackageRequest.name)
}
inline std::string* GetPackageRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.GetPackageRequest.name)
  return _s;
}
inline const std::string& GetPackageRequest::_internal_name() const {
  return name_.Get();
}
inline void GetPackageRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPackageRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPackageRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.GetPackageRequest.name)
  return name_.Release();
}
inline void GetPackageRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.GetPackageRequest.name)
}

// string version = 3 [json_name = "version"];
inline void GetPackageRequest::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& GetPackageRequest::version() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.GetPackageRequest.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPackageRequest::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.GetPackageRequest.version)
}
inline std::string* GetPackageRequest::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.GetPackageRequest.version)
  return _s;
}
inline const std::string& GetPackageRequest::_internal_version() const {
  return version_.Get();
}
inline void GetPackageRequest::_internal_set_version(const std::string& value) {
  
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPackageRequest::_internal_mutable_version() {
  
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPackageRequest::release_version() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.GetPackageRequest.version)
  return version_.Release();
}
inline void GetPackageRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.GetPackageRequest.version)
}

// -------------------------------------------------------------------

// GetPackageResponse

// .viam.app.package.v1.Package package = 1 [json_name = "package"];
inline bool GetPackageResponse::_internal_has_package() const {
  return this != internal_default_instance() && package_ != nullptr;
}
inline bool GetPackageResponse::has_package() const {
  return _internal_has_package();
}
inline void GetPackageResponse::clear_package() {
  if (GetArenaForAllocation() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
}
inline const ::viam::app::package::v1::Package& GetPackageResponse::_internal_package() const {
  const ::viam::app::package::v1::Package* p = package_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::package::v1::Package&>(
      ::viam::app::package::v1::_Package_default_instance_);
}
inline const ::viam::app::package::v1::Package& GetPackageResponse::package() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.GetPackageResponse.package)
  return _internal_package();
}
inline void GetPackageResponse::unsafe_arena_set_allocated_package(
    ::viam::app::package::v1::Package* package) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package_);
  }
  package_ = package;
  if (package) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.package.v1.GetPackageResponse.package)
}
inline ::viam::app::package::v1::Package* GetPackageResponse::release_package() {
  
  ::viam::app::package::v1::Package* temp = package_;
  package_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::package::v1::Package* GetPackageResponse::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.GetPackageResponse.package)
  
  ::viam::app::package::v1::Package* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::viam::app::package::v1::Package* GetPackageResponse::_internal_mutable_package() {
  
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::package::v1::Package>(GetArenaForAllocation());
    package_ = p;
  }
  return package_;
}
inline ::viam::app::package::v1::Package* GetPackageResponse::mutable_package() {
  ::viam::app::package::v1::Package* _msg = _internal_mutable_package();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.GetPackageResponse.package)
  return _msg;
}
inline void GetPackageResponse::set_allocated_package(::viam::app::package::v1::Package* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    
  } else {
    
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.GetPackageResponse.package)
}

// -------------------------------------------------------------------

// ListPackagesRequest

// string organization_id = 1 [json_name = "organizationId"];
inline void ListPackagesRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& ListPackagesRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.ListPackagesRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPackagesRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.ListPackagesRequest.organization_id)
}
inline std::string* ListPackagesRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.ListPackagesRequest.organization_id)
  return _s;
}
inline const std::string& ListPackagesRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void ListPackagesRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPackagesRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPackagesRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.ListPackagesRequest.organization_id)
  return organization_id_.Release();
}
inline void ListPackagesRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(organization_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (organization_id_.IsDefault()) {
    organization_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.ListPackagesRequest.organization_id)
}

// optional string name = 2 [json_name = "name"];
inline bool ListPackagesRequest::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListPackagesRequest::has_name() const {
  return _internal_has_name();
}
inline void ListPackagesRequest::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListPackagesRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.ListPackagesRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPackagesRequest::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.ListPackagesRequest.name)
}
inline std::string* ListPackagesRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.ListPackagesRequest.name)
  return _s;
}
inline const std::string& ListPackagesRequest::_internal_name() const {
  return name_.Get();
}
inline void ListPackagesRequest::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPackagesRequest::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPackagesRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.ListPackagesRequest.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ListPackagesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.ListPackagesRequest.name)
}

// optional string version = 3 [json_name = "version"];
inline bool ListPackagesRequest::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ListPackagesRequest::has_version() const {
  return _internal_has_version();
}
inline void ListPackagesRequest::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ListPackagesRequest::version() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.ListPackagesRequest.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPackagesRequest::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.package.v1.ListPackagesRequest.version)
}
inline std::string* ListPackagesRequest::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.ListPackagesRequest.version)
  return _s;
}
inline const std::string& ListPackagesRequest::_internal_version() const {
  return version_.Get();
}
inline void ListPackagesRequest::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPackagesRequest::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPackagesRequest::release_version() {
  // @@protoc_insertion_point(field_release:viam.app.package.v1.ListPackagesRequest.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ListPackagesRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.package.v1.ListPackagesRequest.version)
}

// optional .viam.app.package.v1.PackageType type = 4 [json_name = "type"];
inline bool ListPackagesRequest::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ListPackagesRequest::has_type() const {
  return _internal_has_type();
}
inline void ListPackagesRequest::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::viam::app::package::v1::PackageType ListPackagesRequest::_internal_type() const {
  return static_cast< ::viam::app::package::v1::PackageType >(type_);
}
inline ::viam::app::package::v1::PackageType ListPackagesRequest::type() const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.ListPackagesRequest.type)
  return _internal_type();
}
inline void ListPackagesRequest::_internal_set_type(::viam::app::package::v1::PackageType value) {
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void ListPackagesRequest::set_type(::viam::app::package::v1::PackageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:viam.app.package.v1.ListPackagesRequest.type)
}

// -------------------------------------------------------------------

// ListPackagesResponse

// repeated .viam.app.package.v1.Package packages = 1 [json_name = "packages"];
inline int ListPackagesResponse::_internal_packages_size() const {
  return packages_.size();
}
inline int ListPackagesResponse::packages_size() const {
  return _internal_packages_size();
}
inline void ListPackagesResponse::clear_packages() {
  packages_.Clear();
}
inline ::viam::app::package::v1::Package* ListPackagesResponse::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.package.v1.ListPackagesResponse.packages)
  return packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::package::v1::Package >*
ListPackagesResponse::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.package.v1.ListPackagesResponse.packages)
  return &packages_;
}
inline const ::viam::app::package::v1::Package& ListPackagesResponse::_internal_packages(int index) const {
  return packages_.Get(index);
}
inline const ::viam::app::package::v1::Package& ListPackagesResponse::packages(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.package.v1.ListPackagesResponse.packages)
  return _internal_packages(index);
}
inline ::viam::app::package::v1::Package* ListPackagesResponse::_internal_add_packages() {
  return packages_.Add();
}
inline ::viam::app::package::v1::Package* ListPackagesResponse::add_packages() {
  ::viam::app::package::v1::Package* _add = _internal_add_packages();
  // @@protoc_insertion_point(field_add:viam.app.package.v1.ListPackagesResponse.packages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::package::v1::Package >&
ListPackagesResponse::packages() const {
  // @@protoc_insertion_point(field_list:viam.app.package.v1.ListPackagesResponse.packages)
  return packages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace package
}  // namespace app
}  // namespace viam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::viam::app::package::v1::PackageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::app::package::v1::PackageType>() {
  return ::viam::app::package::v1::PackageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_2fpackage_2fv1_2fpackage_2eproto
