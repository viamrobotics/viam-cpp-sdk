// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/datasync/v1/data_sync.proto

#include "app/datasync/v1/data_sync.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace app {
namespace datasync {
namespace v1 {
PROTOBUF_CONSTEXPR SensorMetadata::SensorMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_requested_)*/nullptr
  , /*decltype(_impl_.time_received_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SensorMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorMetadataDefaultTypeInternal() {}
  union {
    SensorMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorMetadataDefaultTypeInternal _SensorMetadata_default_instance_;
PROTOBUF_CONSTEXPR SensorData::SensorData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SensorDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SensorDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SensorDataDefaultTypeInternal() {}
  union {
    SensorData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SensorDataDefaultTypeInternal _SensorData_default_instance_;
PROTOBUF_CONSTEXPR FileData::FileData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FileDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDataDefaultTypeInternal() {}
  union {
    FileData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDataDefaultTypeInternal _FileData_default_instance_;
PROTOBUF_CONSTEXPR UploadMetadata_MethodParametersEntry_DoNotUse::UploadMetadata_MethodParametersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct UploadMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    UploadMetadata_MethodParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal _UploadMetadata_MethodParametersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR UploadMetadata::UploadMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.method_parameters_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.part_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_extension_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadMetadataDefaultTypeInternal() {}
  union {
    UploadMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadMetadataDefaultTypeInternal _UploadMetadata_default_instance_;
PROTOBUF_CONSTEXPR UploadRequest::UploadRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.upload_packet_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UploadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadRequestDefaultTypeInternal() {}
  union {
    UploadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadRequestDefaultTypeInternal _UploadRequest_default_instance_;
PROTOBUF_CONSTEXPR UploadResponse::UploadResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.requests_written_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UploadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadResponseDefaultTypeInternal() {}
  union {
    UploadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadResponseDefaultTypeInternal _UploadResponse_default_instance_;
PROTOBUF_CONSTEXPR CaptureInterval::CaptureInterval(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_)*/nullptr
  , /*decltype(_impl_.end_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CaptureIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptureIntervalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptureIntervalDefaultTypeInternal() {}
  union {
    CaptureInterval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptureIntervalDefaultTypeInternal _CaptureInterval_default_instance_;
PROTOBUF_CONSTEXPR DataCaptureMetadata_MethodParametersEntry_DoNotUse::DataCaptureMetadata_MethodParametersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DataCaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataCaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataCaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DataCaptureMetadata_MethodParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataCaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal _DataCaptureMetadata_MethodParametersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DataCaptureMetadata::DataCaptureMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.method_parameters_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.component_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_extension_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataCaptureMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataCaptureMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataCaptureMetadataDefaultTypeInternal() {}
  union {
    DataCaptureMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataCaptureMetadataDefaultTypeInternal _DataCaptureMetadata_default_instance_;
PROTOBUF_CONSTEXPR TabularCapture_MethodParametersEntry_DoNotUse::TabularCapture_MethodParametersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TabularCapture_MethodParametersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TabularCapture_MethodParametersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TabularCapture_MethodParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TabularCapture_MethodParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TabularCapture_MethodParametersEntry_DoNotUseDefaultTypeInternal _TabularCapture_MethodParametersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TabularCapture::TabularCapture(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_names_)*/{}
  , /*decltype(_impl_.method_parameters_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.org_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.robot_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.part_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blob_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.file_size_bytes_)*/int64_t{0}
  , /*decltype(_impl_.message_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TabularCaptureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TabularCaptureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TabularCaptureDefaultTypeInternal() {}
  union {
    TabularCapture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TabularCaptureDefaultTypeInternal _TabularCapture_default_instance_;
PROTOBUF_CONSTEXPR BinaryCapture_MethodParametersEntry_DoNotUse::BinaryCapture_MethodParametersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct BinaryCapture_MethodParametersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryCapture_MethodParametersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryCapture_MethodParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BinaryCapture_MethodParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryCapture_MethodParametersEntry_DoNotUseDefaultTypeInternal _BinaryCapture_MethodParametersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR BinaryCapture::BinaryCapture(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.method_parameters_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.org_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.robot_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.part_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.component_model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.blob_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mime_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_ext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.interval_)*/nullptr
  , /*decltype(_impl_.file_size_bytes_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinaryCaptureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryCaptureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryCaptureDefaultTypeInternal() {}
  union {
    BinaryCapture _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryCaptureDefaultTypeInternal _BinaryCapture_default_instance_;
}  // namespace v1
}  // namespace datasync
}  // namespace app
}  // namespace viam
static ::_pb::Metadata file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_app_2fdatasync_2fv1_2fdata_5fsync_2eproto = nullptr;

const uint32_t TableStruct_app_2fdatasync_2fv1_2fdata_5fsync_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::SensorMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::SensorMetadata, _impl_.time_requested_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::SensorMetadata, _impl_.time_received_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::SensorData, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::SensorData, _impl_.metadata_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::SensorData, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::FileData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::FileData, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata_MethodParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata_MethodParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata_MethodParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata_MethodParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata, _impl_.part_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata, _impl_.component_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata, _impl_.component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata, _impl_.component_model_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata, _impl_.method_parameters_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata, _impl_.file_extension_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadMetadata, _impl_.session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadRequest, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadRequest, _impl_.upload_packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::UploadResponse, _impl_.requests_written_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::CaptureInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::CaptureInterval, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::CaptureInterval, _impl_.end_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata_MethodParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata_MethodParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata_MethodParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata_MethodParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata, _impl_.component_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata, _impl_.component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata, _impl_.component_model_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata, _impl_.method_parameters_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata, _impl_.file_extension_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::DataCaptureMetadata, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture_MethodParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture_MethodParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture_MethodParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture_MethodParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.org_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.robot_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.part_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.location_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.component_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.component_model_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.blob_path_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.column_names_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.method_parameters_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.file_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.message_count_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.file_size_bytes_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::TabularCapture, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture_MethodParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture_MethodParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture_MethodParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture_MethodParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.interval_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.org_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.robot_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.part_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.location_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.component_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.component_model_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.method_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.blob_path_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.method_parameters_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.file_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.file_size_bytes_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.session_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.file_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.file_ext_),
  PROTOBUF_FIELD_OFFSET(::viam::app::datasync::v1::BinaryCapture, _impl_.id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::app::datasync::v1::SensorMetadata)},
  { 8, -1, -1, sizeof(::viam::app::datasync::v1::SensorData)},
  { 18, -1, -1, sizeof(::viam::app::datasync::v1::FileData)},
  { 25, 33, -1, sizeof(::viam::app::datasync::v1::UploadMetadata_MethodParametersEntry_DoNotUse)},
  { 35, -1, -1, sizeof(::viam::app::datasync::v1::UploadMetadata)},
  { 52, -1, -1, sizeof(::viam::app::datasync::v1::UploadRequest)},
  { 62, -1, -1, sizeof(::viam::app::datasync::v1::UploadResponse)},
  { 69, -1, -1, sizeof(::viam::app::datasync::v1::CaptureInterval)},
  { 77, 85, -1, sizeof(::viam::app::datasync::v1::DataCaptureMetadata_MethodParametersEntry_DoNotUse)},
  { 87, -1, -1, sizeof(::viam::app::datasync::v1::DataCaptureMetadata)},
  { 102, 110, -1, sizeof(::viam::app::datasync::v1::TabularCapture_MethodParametersEntry_DoNotUse)},
  { 112, -1, -1, sizeof(::viam::app::datasync::v1::TabularCapture)},
  { 137, 145, -1, sizeof(::viam::app::datasync::v1::BinaryCapture_MethodParametersEntry_DoNotUse)},
  { 147, -1, -1, sizeof(::viam::app::datasync::v1::BinaryCapture)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::app::datasync::v1::_SensorMetadata_default_instance_._instance,
  &::viam::app::datasync::v1::_SensorData_default_instance_._instance,
  &::viam::app::datasync::v1::_FileData_default_instance_._instance,
  &::viam::app::datasync::v1::_UploadMetadata_MethodParametersEntry_DoNotUse_default_instance_._instance,
  &::viam::app::datasync::v1::_UploadMetadata_default_instance_._instance,
  &::viam::app::datasync::v1::_UploadRequest_default_instance_._instance,
  &::viam::app::datasync::v1::_UploadResponse_default_instance_._instance,
  &::viam::app::datasync::v1::_CaptureInterval_default_instance_._instance,
  &::viam::app::datasync::v1::_DataCaptureMetadata_MethodParametersEntry_DoNotUse_default_instance_._instance,
  &::viam::app::datasync::v1::_DataCaptureMetadata_default_instance_._instance,
  &::viam::app::datasync::v1::_TabularCapture_MethodParametersEntry_DoNotUse_default_instance_._instance,
  &::viam::app::datasync::v1::_TabularCapture_default_instance_._instance,
  &::viam::app::datasync::v1::_BinaryCapture_MethodParametersEntry_DoNotUse_default_instance_._instance,
  &::viam::app::datasync::v1::_BinaryCapture_default_instance_._instance,
};

const char descriptor_table_protodef_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037app/datasync/v1/data_sync.proto\022\024viam."
  "app.datasync.v1\032\031google/protobuf/any.pro"
  "to\032\034google/protobuf/struct.proto\032\037google"
  "/protobuf/timestamp.proto\032\026tagger/v1/tag"
  "ger.proto\"\224\001\n\016SensorMetadata\022A\n\016time_req"
  "uested\030\001 \001(\0132\032.google.protobuf.Timestamp"
  "R\rtimeRequested\022\?\n\rtime_received\030\002 \001(\0132\032"
  ".google.protobuf.TimestampR\014timeReceived"
  "\"\243\001\n\nSensorData\022@\n\010metadata\030\001 \001(\0132$.viam"
  ".app.datasync.v1.SensorMetadataR\010metadat"
  "a\0221\n\006struct\030\002 \001(\0132\027.google.protobuf.Stru"
  "ctH\000R\006struct\022\030\n\006binary\030\003 \001(\014H\000R\006binaryB\006"
  "\n\004data\"\036\n\010FileData\022\022\n\004data\030\001 \001(\014R\004data\"\260"
  "\004\n\016UploadMetadata\022\027\n\007part_id\030\001 \001(\tR\006part"
  "Id\022%\n\016component_type\030\002 \001(\tR\rcomponentTyp"
  "e\022%\n\016component_name\030\003 \001(\tR\rcomponentName"
  "\022\'\n\017component_model\030\004 \001(\tR\016componentMode"
  "l\022\037\n\013method_name\030\005 \001(\tR\nmethodName\0222\n\004ty"
  "pe\030\006 \001(\0162\036.viam.app.datasync.v1.DataType"
  "R\004type\022\033\n\tfile_name\030\007 \001(\tR\010fileName\022g\n\021m"
  "ethod_parameters\030\010 \003(\0132:.viam.app.datasy"
  "nc.v1.UploadMetadata.MethodParametersEnt"
  "ryR\020methodParameters\022%\n\016file_extension\030\t"
  " \001(\tR\rfileExtension\022\022\n\004tags\030\n \003(\tR\004tags\022"
  "\035\n\nsession_id\030\013 \001(\tR\tsessionId\032Y\n\025Method"
  "ParametersEntry\022\020\n\003key\030\001 \001(\tR\003key\022*\n\005val"
  "ue\030\002 \001(\0132\024.google.protobuf.AnyR\005value:\0028"
  "\001\"\370\001\n\rUploadRequest\022B\n\010metadata\030\001 \001(\0132$."
  "viam.app.datasync.v1.UploadMetadataH\000R\010m"
  "etadata\022K\n\017sensor_contents\030\002 \001(\0132 .viam."
  "app.datasync.v1.SensorDataH\000R\016sensorCont"
  "ents\022E\n\rfile_contents\030\003 \001(\0132\036.viam.app.d"
  "atasync.v1.FileDataH\000R\014fileContentsB\017\n\ru"
  "pload_packet\";\n\016UploadResponse\022)\n\020reques"
  "ts_written\030\001 \001(\005R\017requestsWritten\"q\n\017Cap"
  "tureInterval\0220\n\005start\030\001 \001(\0132\032.google.pro"
  "tobuf.TimestampR\005start\022,\n\003end\030\002 \001(\0132\032.go"
  "ogle.protobuf.TimestampR\003end\"\204\004\n\023DataCap"
  "tureMetadata\022%\n\016component_type\030\001 \001(\tR\rco"
  "mponentType\022%\n\016component_name\030\002 \001(\tR\rcom"
  "ponentName\022\'\n\017component_model\030\003 \001(\tR\016com"
  "ponentModel\022\037\n\013method_name\030\004 \001(\tR\nmethod"
  "Name\0222\n\004type\030\005 \001(\0162\036.viam.app.datasync.v"
  "1.DataTypeR\004type\022l\n\021method_parameters\030\006 "
  "\003(\0132\?.viam.app.datasync.v1.DataCaptureMe"
  "tadata.MethodParametersEntryR\020methodPara"
  "meters\022%\n\016file_extension\030\007 \001(\tR\rfileExte"
  "nsion\022\022\n\004tags\030\010 \003(\tR\004tags\022\035\n\nsession_id\030"
  "\t \001(\tR\tsessionId\032Y\n\025MethodParametersEntr"
  "y\022\020\n\003key\030\001 \001(\tR\003key\022*\n\005value\030\002 \001(\0132\024.goo"
  "gle.protobuf.AnyR\005value:\0028\001\"\317\014\n\016TabularC"
  "apture\022g\n\010interval\030\001 \001(\0132%.viam.app.data"
  "sync.v1.CaptureIntervalB$\232\204\236\003\037bson:\"inte"
  "rval\" json:\"interval\"R\010interval\0227\n\006org_i"
  "d\030\002 \001(\tB \232\204\236\003\033bson:\"org_id\" json:\"org_id"
  "\"R\005orgId\022\?\n\010robot_id\030\003 \001(\tB$\232\204\236\003\037bson:\"r"
  "obot_id\" json:\"robot_id\"R\007robotId\022;\n\007par"
  "t_id\030\004 \001(\tB\"\232\204\236\003\035bson:\"part_id\" json:\"pa"
  "rt_id\"R\006partId\022K\n\013location_id\030\005 \001(\tB*\232\204\236"
  "\003%bson:\"location_id\" json:\"location_id\"R"
  "\nlocationId\022W\n\016component_name\030\006 \001(\tB0\232\204\236"
  "\003+bson:\"component_name\" json:\"component_"
  "name\"R\rcomponentName\022W\n\016component_type\030\007"
  " \001(\tB0\232\204\236\003+bson:\"component_type\" json:\"c"
  "omponent_type\"R\rcomponentType\022[\n\017compone"
  "nt_model\030\010 \001(\tB2\232\204\236\003-bson:\"component_mod"
  "el\" json:\"component_model\"R\016componentMod"
  "el\022K\n\013method_name\030\t \001(\tB*\232\204\236\003%bson:\"meth"
  "od_name\" json:\"method_name\"R\nmethodName\022"
  "C\n\tblob_path\030\n \001(\tB&\232\204\236\003!bson:\"blob_path"
  "\" json:\"blob_path\"R\010blobPath\022O\n\014column_n"
  "ames\030\013 \003(\tB,\232\204\236\003\'bson:\"column_names\" jso"
  "n:\"column_names\"R\013columnNames\022\237\001\n\021method"
  "_parameters\030\014 \003(\0132:.viam.app.datasync.v1"
  ".TabularCapture.MethodParametersEntryB6\232"
  "\204\236\0031bson:\"method_parameters\" json:\"metho"
  "d_parameters\"R\020methodParameters\022;\n\007file_"
  "id\030\r \001(\tB\"\232\204\236\003\035bson:\"file_id\" json:\"file"
  "_id\"R\006fileId\0220\n\004tags\030\016 \003(\tB\034\232\204\236\003\027bson:\"t"
  "ags\" json:\"tags\"R\004tags\022S\n\rmessage_count\030"
  "\017 \001(\005B.\232\204\236\003)bson:\"message_count\" json:\"m"
  "essage_count\"R\014messageCount\022Z\n\017file_size"
  "_bytes\030\020 \001(\003B2\232\204\236\003-bson:\"file_size_bytes"
  "\" json:\"file_size_bytes\"R\rfileSizeBytes\022"
  "G\n\nsession_id\030\021 \001(\tB(\232\204\236\003#bson:\"session_"
  "id\" json:\"session_id\"R\tsessionId\022C\n\tmime"
  "_type\030\022 \001(\tB&\232\204\236\003!bson:\"mime_type\" json:"
  "\"mime_type\"R\010mimeType\0223\n\002id\030\023 \001(\tB#\232\204\236\003\036"
  "bson:\"_id\" json:\"id,omitempty\"R\002id\032Y\n\025Me"
  "thodParametersEntry\022\020\n\003key\030\001 \001(\tR\003key\022*\n"
  "\005value\030\002 \001(\0132\024.google.protobuf.AnyR\005valu"
  "e:\0028\001\"\255\014\n\rBinaryCapture\022g\n\010interval\030\001 \001("
  "\0132%.viam.app.datasync.v1.CaptureInterval"
  "B$\232\204\236\003\037bson:\"interval\" json:\"interval\"R\010"
  "interval\0227\n\006org_id\030\002 \001(\tB \232\204\236\003\033bson:\"org"
  "_id\" json:\"org_id\"R\005orgId\022\?\n\010robot_id\030\003 "
  "\001(\tB$\232\204\236\003\037bson:\"robot_id\" json:\"robot_id"
  "\"R\007robotId\022;\n\007part_id\030\004 \001(\tB\"\232\204\236\003\035bson:\""
  "part_id\" json:\"part_id\"R\006partId\022K\n\013locat"
  "ion_id\030\005 \001(\tB*\232\204\236\003%bson:\"location_id\" js"
  "on:\"location_id\"R\nlocationId\022W\n\016componen"
  "t_name\030\006 \001(\tB0\232\204\236\003+bson:\"component_name\""
  " json:\"component_name\"R\rcomponentName\022W\n"
  "\016component_type\030\007 \001(\tB0\232\204\236\003+bson:\"compon"
  "ent_type\" json:\"component_type\"R\rcompone"
  "ntType\022[\n\017component_model\030\010 \001(\tB2\232\204\236\003-bs"
  "on:\"component_model\" json:\"component_mod"
  "el\"R\016componentModel\022K\n\013method_name\030\t \001(\t"
  "B*\232\204\236\003%bson:\"method_name\" json:\"method_n"
  "ame\"R\nmethodName\022C\n\tblob_path\030\n \001(\tB&\232\204\236"
  "\003!bson:\"blob_path\" json:\"blob_path\"R\010blo"
  "bPath\022\236\001\n\021method_parameters\030\013 \003(\01329.viam"
  ".app.datasync.v1.BinaryCapture.MethodPar"
  "ametersEntryB6\232\204\236\0031bson:\"method_paramete"
  "rs\" json:\"method_parameters\"R\020methodPara"
  "meters\022;\n\007file_id\030\014 \001(\tB\"\232\204\236\003\035bson:\"file"
  "_id\" json:\"file_id\"R\006fileId\0220\n\004tags\030\r \003("
  "\tB\034\232\204\236\003\027bson:\"tags\" json:\"tags\"R\004tags\022Z\n"
  "\017file_size_bytes\030\016 \001(\003B2\232\204\236\003-bson:\"file_"
  "size_bytes\" json:\"file_size_bytes\"R\rfile"
  "SizeBytes\022G\n\nsession_id\030\017 \001(\tB(\232\204\236\003#bson"
  ":\"session_id\" json:\"session_id\"R\tsession"
  "Id\022C\n\tmime_type\030\020 \001(\tB&\232\204\236\003!bson:\"mime_t"
  "ype\" json:\"mime_type\"R\010mimeType\022C\n\tfile_"
  "name\030\021 \001(\tB&\232\204\236\003!bson:\"file_name\" json:\""
  "file_name\"R\010fileName\022\?\n\010file_ext\030\022 \001(\tB$"
  "\232\204\236\003\037bson:\"file_ext\" json:\"file_ext\"R\007fi"
  "leExt\0223\n\002id\030\023 \001(\tB#\232\204\236\003\036bson:\"_id\" json:"
  "\"id,omitempty\"R\002id\032Y\n\025MethodParametersEn"
  "try\022\020\n\003key\030\001 \001(\tR\003key\022*\n\005value\030\002 \001(\0132\024.g"
  "oogle.protobuf.AnyR\005value:\0028\001*t\n\010DataTyp"
  "e\022\031\n\025DATA_TYPE_UNSPECIFIED\020\000\022\033\n\027DATA_TYP"
  "E_BINARY_SENSOR\020\001\022\034\n\030DATA_TYPE_TABULAR_S"
  "ENSOR\020\002\022\022\n\016DATA_TYPE_FILE\020\0032j\n\017DataSyncS"
  "ervice\022W\n\006Upload\022#.viam.app.datasync.v1."
  "UploadRequest\032$.viam.app.datasync.v1.Upl"
  "oadResponse(\0010\001B!Z\037go.viam.com/api/app/d"
  "atasync/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_tagger_2fv1_2ftagger_2eproto,
};
static ::_pbi::once_flag descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto = {
    false, false, 5498, descriptor_table_protodef_app_2fdatasync_2fv1_2fdata_5fsync_2eproto,
    "app/datasync/v1/data_sync.proto",
    &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once, descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_deps, 4, 14,
    schemas, file_default_instances, TableStruct_app_2fdatasync_2fv1_2fdata_5fsync_2eproto::offsets,
    file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto, file_level_enum_descriptors_app_2fdatasync_2fv1_2fdata_5fsync_2eproto,
    file_level_service_descriptors_app_2fdatasync_2fv1_2fdata_5fsync_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter() {
  return &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fdatasync_2fv1_2fdata_5fsync_2eproto(&descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto);
namespace viam {
namespace app {
namespace datasync {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto);
  return file_level_enum_descriptors_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[0];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SensorMetadata::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_requested(const SensorMetadata* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_received(const SensorMetadata* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SensorMetadata::_Internal::time_requested(const SensorMetadata* msg) {
  return *msg->_impl_.time_requested_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SensorMetadata::_Internal::time_received(const SensorMetadata* msg) {
  return *msg->_impl_.time_received_;
}
void SensorMetadata::clear_time_requested() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_requested_ != nullptr) {
    delete _impl_.time_requested_;
  }
  _impl_.time_requested_ = nullptr;
}
void SensorMetadata::clear_time_received() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_received_ != nullptr) {
    delete _impl_.time_received_;
  }
  _impl_.time_received_ = nullptr;
}
SensorMetadata::SensorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.datasync.v1.SensorMetadata)
}
SensorMetadata::SensorMetadata(const SensorMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_requested_){nullptr}
    , decltype(_impl_.time_received_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_requested()) {
    _this->_impl_.time_requested_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_requested_);
  }
  if (from._internal_has_time_received()) {
    _this->_impl_.time_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_received_);
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.datasync.v1.SensorMetadata)
}

inline void SensorMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_requested_){nullptr}
    , decltype(_impl_.time_received_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SensorMetadata::~SensorMetadata() {
  // @@protoc_insertion_point(destructor:viam.app.datasync.v1.SensorMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_requested_;
  if (this != internal_default_instance()) delete _impl_.time_received_;
}

void SensorMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.datasync.v1.SensorMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.time_requested_ != nullptr) {
    delete _impl_.time_requested_;
  }
  _impl_.time_requested_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_received_ != nullptr) {
    delete _impl_.time_received_;
  }
  _impl_.time_received_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time_requested = 1 [json_name = "timeRequested"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_requested(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_received = 2 [json_name = "timeReceived"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.datasync.v1.SensorMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_requested = 1 [json_name = "timeRequested"];
  if (this->_internal_has_time_requested()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time_requested(this),
        _Internal::time_requested(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_received = 2 [json_name = "timeReceived"];
  if (this->_internal_has_time_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_received(this),
        _Internal::time_received(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.datasync.v1.SensorMetadata)
  return target;
}

size_t SensorMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.datasync.v1.SensorMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time_requested = 1 [json_name = "timeRequested"];
  if (this->_internal_has_time_requested()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_requested_);
  }

  // .google.protobuf.Timestamp time_received = 2 [json_name = "timeReceived"];
  if (this->_internal_has_time_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_received_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorMetadata::GetClassData() const { return &_class_data_; }


void SensorMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorMetadata*>(&to_msg);
  auto& from = static_cast<const SensorMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.datasync.v1.SensorMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_requested()) {
    _this->_internal_mutable_time_requested()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_requested());
  }
  if (from._internal_has_time_received()) {
    _this->_internal_mutable_time_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_received());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorMetadata::CopyFrom(const SensorMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.datasync.v1.SensorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorMetadata::IsInitialized() const {
  return true;
}

void SensorMetadata::InternalSwap(SensorMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SensorMetadata, _impl_.time_received_)
      + sizeof(SensorMetadata::_impl_.time_received_)
      - PROTOBUF_FIELD_OFFSET(SensorMetadata, _impl_.time_requested_)>(
          reinterpret_cast<char*>(&_impl_.time_requested_),
          reinterpret_cast<char*>(&other->_impl_.time_requested_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[0]);
}

// ===================================================================

class SensorData::_Internal {
 public:
  static const ::viam::app::datasync::v1::SensorMetadata& metadata(const SensorData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& struct_(const SensorData* msg);
};

const ::viam::app::datasync::v1::SensorMetadata&
SensorData::_Internal::metadata(const SensorData* msg) {
  return *msg->_impl_.metadata_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
SensorData::_Internal::struct_(const SensorData* msg) {
  return *msg->_impl_.data_.struct__;
}
void SensorData::set_allocated_struct_(::PROTOBUF_NAMESPACE_ID::Struct* struct_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (struct_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(struct_));
    if (message_arena != submessage_arena) {
      struct_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, struct_, submessage_arena);
    }
    set_has_struct_();
    _impl_.data_.struct__ = struct_;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.datasync.v1.SensorData.struct)
}
void SensorData::clear_struct_() {
  if (_internal_has_struct_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.struct__;
    }
    clear_has_data();
  }
}
SensorData::SensorData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.datasync.v1.SensorData)
}
SensorData::SensorData(const SensorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SensorData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::viam::app::datasync::v1::SensorMetadata(*from._impl_.metadata_);
  }
  clear_has_data();
  switch (from.data_case()) {
    case kStruct: {
      _this->_internal_mutable_struct_()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
          from._internal_struct_());
      break;
    }
    case kBinary: {
      _this->_internal_set_binary(from._internal_binary());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.datasync.v1.SensorData)
}

inline void SensorData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:viam.app.datasync.v1.SensorData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SensorData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (has_data()) {
    clear_data();
  }
}

void SensorData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SensorData::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:viam.app.datasync.v1.SensorData)
  switch (data_case()) {
    case kStruct: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.struct__;
      }
      break;
    }
    case kBinary: {
      _impl_.data_.binary_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.datasync.v1.SensorData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SensorData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.datasync.v1.SensorMetadata metadata = 1 [json_name = "metadata"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct struct = 2 [json_name = "struct"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_struct_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes binary = 3 [json_name = "binary"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_binary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SensorData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.datasync.v1.SensorData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.datasync.v1.SensorMetadata metadata = 1 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct struct = 2 [json_name = "struct"];
  if (_internal_has_struct_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::struct_(this),
        _Internal::struct_(this).GetCachedSize(), target, stream);
  }

  // bytes binary = 3 [json_name = "binary"];
  if (_internal_has_binary()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_binary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.datasync.v1.SensorData)
  return target;
}

size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.datasync.v1.SensorData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.datasync.v1.SensorMetadata metadata = 1 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  switch (data_case()) {
    // .google.protobuf.Struct struct = 2 [json_name = "struct"];
    case kStruct: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.struct__);
      break;
    }
    // bytes binary = 3 [json_name = "binary"];
    case kBinary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SensorData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SensorData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SensorData::GetClassData() const { return &_class_data_; }


void SensorData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SensorData*>(&to_msg);
  auto& from = static_cast<const SensorData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.datasync.v1.SensorData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::viam::app::datasync::v1::SensorMetadata::MergeFrom(
        from._internal_metadata());
  }
  switch (from.data_case()) {
    case kStruct: {
      _this->_internal_mutable_struct_()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
          from._internal_struct_());
      break;
    }
    case kBinary: {
      _this->_internal_set_binary(from._internal_binary());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.datasync.v1.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  return true;
}

void SensorData::InternalSwap(SensorData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.metadata_, other->_impl_.metadata_);
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[1]);
}

// ===================================================================

class FileData::_Internal {
 public:
};

FileData::FileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.datasync.v1.FileData)
}
FileData::FileData(const FileData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FileData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.datasync.v1.FileData)
}

inline void FileData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileData::~FileData() {
  // @@protoc_insertion_point(destructor:viam.app.datasync.v1.FileData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void FileData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FileData::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.datasync.v1.FileData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.datasync.v1.FileData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.datasync.v1.FileData)
  return target;
}

size_t FileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.datasync.v1.FileData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FileData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileData::GetClassData() const { return &_class_data_; }


void FileData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FileData*>(&to_msg);
  auto& from = static_cast<const FileData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.datasync.v1.FileData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileData::CopyFrom(const FileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.datasync.v1.FileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileData::IsInitialized() const {
  return true;
}

void FileData::InternalSwap(FileData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FileData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[2]);
}

// ===================================================================

UploadMetadata_MethodParametersEntry_DoNotUse::UploadMetadata_MethodParametersEntry_DoNotUse() {}
UploadMetadata_MethodParametersEntry_DoNotUse::UploadMetadata_MethodParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UploadMetadata_MethodParametersEntry_DoNotUse::MergeFrom(const UploadMetadata_MethodParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UploadMetadata_MethodParametersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[3]);
}

// ===================================================================

class UploadMetadata::_Internal {
 public:
};

void UploadMetadata::clear_method_parameters() {
  _impl_.method_parameters_.Clear();
}
UploadMetadata::UploadMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &UploadMetadata::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:viam.app.datasync.v1.UploadMetadata)
}
UploadMetadata::UploadMetadata(const UploadMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.method_parameters_)*/{}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.part_id_){}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.component_model_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.file_extension_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.method_parameters_.MergeFrom(from._impl_.method_parameters_);
  _impl_.part_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part_id().empty()) {
    _this->_impl_.part_id_.Set(from._internal_part_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_type().empty()) {
    _this->_impl_.component_type_.Set(from._internal_component_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_name().empty()) {
    _this->_impl_.component_name_.Set(from._internal_component_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_model().empty()) {
    _this->_impl_.component_model_.Set(from._internal_component_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method_name().empty()) {
    _this->_impl_.method_name_.Set(from._internal_method_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_extension().empty()) {
    _this->_impl_.file_extension_.Set(from._internal_file_extension(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:viam.app.datasync.v1.UploadMetadata)
}

inline void UploadMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.method_parameters_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.part_id_){}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.component_model_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.file_extension_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.part_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadMetadata::~UploadMetadata() {
  // @@protoc_insertion_point(destructor:viam.app.datasync.v1.UploadMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void UploadMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_parameters_.Destruct();
  _impl_.method_parameters_.~MapField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.part_id_.Destroy();
  _impl_.component_type_.Destroy();
  _impl_.component_name_.Destroy();
  _impl_.component_model_.Destroy();
  _impl_.method_name_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.file_extension_.Destroy();
  _impl_.session_id_.Destroy();
}

void UploadMetadata::ArenaDtor(void* object) {
  UploadMetadata* _this = reinterpret_cast< UploadMetadata* >(object);
  _this->_impl_.method_parameters_.Destruct();
}
void UploadMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.datasync.v1.UploadMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.method_parameters_.Clear();
  _impl_.tags_.Clear();
  _impl_.part_id_.ClearToEmpty();
  _impl_.component_type_.ClearToEmpty();
  _impl_.component_name_.ClearToEmpty();
  _impl_.component_model_.ClearToEmpty();
  _impl_.method_name_.ClearToEmpty();
  _impl_.file_name_.ClearToEmpty();
  _impl_.file_extension_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string part_id = 1 [json_name = "partId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_part_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.UploadMetadata.part_id"));
        } else
          goto handle_unusual;
        continue;
      // string component_type = 2 [json_name = "componentType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_component_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.UploadMetadata.component_type"));
        } else
          goto handle_unusual;
        continue;
      // string component_name = 3 [json_name = "componentName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_component_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.UploadMetadata.component_name"));
        } else
          goto handle_unusual;
        continue;
      // string component_model = 4 [json_name = "componentModel"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_component_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.UploadMetadata.component_model"));
        } else
          goto handle_unusual;
        continue;
      // string method_name = 5 [json_name = "methodName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.UploadMetadata.method_name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.datasync.v1.DataType type = 6 [json_name = "type"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::viam::app::datasync::v1::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // string file_name = 7 [json_name = "fileName"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.UploadMetadata.file_name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> method_parameters = 8 [json_name = "methodParameters"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.method_parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string file_extension = 9 [json_name = "fileExtension"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_file_extension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.UploadMetadata.file_extension"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 10 [json_name = "tags"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.UploadMetadata.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 11 [json_name = "sessionId"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.UploadMetadata.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.datasync.v1.UploadMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string part_id = 1 [json_name = "partId"];
  if (!this->_internal_part_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_part_id().data(), static_cast<int>(this->_internal_part_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.UploadMetadata.part_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_part_id(), target);
  }

  // string component_type = 2 [json_name = "componentType"];
  if (!this->_internal_component_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_type().data(), static_cast<int>(this->_internal_component_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.UploadMetadata.component_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_component_type(), target);
  }

  // string component_name = 3 [json_name = "componentName"];
  if (!this->_internal_component_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.UploadMetadata.component_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_component_name(), target);
  }

  // string component_model = 4 [json_name = "componentModel"];
  if (!this->_internal_component_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_model().data(), static_cast<int>(this->_internal_component_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.UploadMetadata.component_model");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_component_model(), target);
  }

  // string method_name = 5 [json_name = "methodName"];
  if (!this->_internal_method_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.UploadMetadata.method_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_method_name(), target);
  }

  // .viam.app.datasync.v1.DataType type = 6 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // string file_name = 7 [json_name = "fileName"];
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.UploadMetadata.file_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_file_name(), target);
  }

  // map<string, .google.protobuf.Any> method_parameters = 8 [json_name = "methodParameters"];
  if (!this->_internal_method_parameters().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Any>;
    using WireHelper = UploadMetadata_MethodParametersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_method_parameters();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "viam.app.datasync.v1.UploadMetadata.MethodParametersEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(8, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string file_extension = 9 [json_name = "fileExtension"];
  if (!this->_internal_file_extension().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_extension().data(), static_cast<int>(this->_internal_file_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.UploadMetadata.file_extension");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_file_extension(), target);
  }

  // repeated string tags = 10 [json_name = "tags"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.UploadMetadata.tags");
    target = stream->WriteString(10, s, target);
  }

  // string session_id = 11 [json_name = "sessionId"];
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.UploadMetadata.session_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.datasync.v1.UploadMetadata)
  return target;
}

size_t UploadMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.datasync.v1.UploadMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Any> method_parameters = 8 [json_name = "methodParameters"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_method_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_method_parameters().begin();
      it != this->_internal_method_parameters().end(); ++it) {
    total_size += UploadMetadata_MethodParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string tags = 10 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string part_id = 1 [json_name = "partId"];
  if (!this->_internal_part_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_part_id());
  }

  // string component_type = 2 [json_name = "componentType"];
  if (!this->_internal_component_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_type());
  }

  // string component_name = 3 [json_name = "componentName"];
  if (!this->_internal_component_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_name());
  }

  // string component_model = 4 [json_name = "componentModel"];
  if (!this->_internal_component_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_model());
  }

  // string method_name = 5 [json_name = "methodName"];
  if (!this->_internal_method_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  // string file_name = 7 [json_name = "fileName"];
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string file_extension = 9 [json_name = "fileExtension"];
  if (!this->_internal_file_extension().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_extension());
  }

  // string session_id = 11 [json_name = "sessionId"];
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .viam.app.datasync.v1.DataType type = 6 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadMetadata::GetClassData() const { return &_class_data_; }


void UploadMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadMetadata*>(&to_msg);
  auto& from = static_cast<const UploadMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.datasync.v1.UploadMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.method_parameters_.MergeFrom(from._impl_.method_parameters_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_part_id().empty()) {
    _this->_internal_set_part_id(from._internal_part_id());
  }
  if (!from._internal_component_type().empty()) {
    _this->_internal_set_component_type(from._internal_component_type());
  }
  if (!from._internal_component_name().empty()) {
    _this->_internal_set_component_name(from._internal_component_name());
  }
  if (!from._internal_component_model().empty()) {
    _this->_internal_set_component_model(from._internal_component_model());
  }
  if (!from._internal_method_name().empty()) {
    _this->_internal_set_method_name(from._internal_method_name());
  }
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_file_extension().empty()) {
    _this->_internal_set_file_extension(from._internal_file_extension());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadMetadata::CopyFrom(const UploadMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.datasync.v1.UploadMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadMetadata::IsInitialized() const {
  return true;
}

void UploadMetadata::InternalSwap(UploadMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.method_parameters_.InternalSwap(&other->_impl_.method_parameters_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.part_id_, lhs_arena,
      &other->_impl_.part_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_type_, lhs_arena,
      &other->_impl_.component_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_name_, lhs_arena,
      &other->_impl_.component_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_model_, lhs_arena,
      &other->_impl_.component_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_extension_, lhs_arena,
      &other->_impl_.file_extension_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[4]);
}

// ===================================================================

class UploadRequest::_Internal {
 public:
  static const ::viam::app::datasync::v1::UploadMetadata& metadata(const UploadRequest* msg);
  static const ::viam::app::datasync::v1::SensorData& sensor_contents(const UploadRequest* msg);
  static const ::viam::app::datasync::v1::FileData& file_contents(const UploadRequest* msg);
};

const ::viam::app::datasync::v1::UploadMetadata&
UploadRequest::_Internal::metadata(const UploadRequest* msg) {
  return *msg->_impl_.upload_packet_.metadata_;
}
const ::viam::app::datasync::v1::SensorData&
UploadRequest::_Internal::sensor_contents(const UploadRequest* msg) {
  return *msg->_impl_.upload_packet_.sensor_contents_;
}
const ::viam::app::datasync::v1::FileData&
UploadRequest::_Internal::file_contents(const UploadRequest* msg) {
  return *msg->_impl_.upload_packet_.file_contents_;
}
void UploadRequest::set_allocated_metadata(::viam::app::datasync::v1::UploadMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_upload_packet();
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    set_has_metadata();
    _impl_.upload_packet_.metadata_ = metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.datasync.v1.UploadRequest.metadata)
}
void UploadRequest::set_allocated_sensor_contents(::viam::app::datasync::v1::SensorData* sensor_contents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_upload_packet();
  if (sensor_contents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sensor_contents);
    if (message_arena != submessage_arena) {
      sensor_contents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sensor_contents, submessage_arena);
    }
    set_has_sensor_contents();
    _impl_.upload_packet_.sensor_contents_ = sensor_contents;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.datasync.v1.UploadRequest.sensor_contents)
}
void UploadRequest::set_allocated_file_contents(::viam::app::datasync::v1::FileData* file_contents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_upload_packet();
  if (file_contents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file_contents);
    if (message_arena != submessage_arena) {
      file_contents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_contents, submessage_arena);
    }
    set_has_file_contents();
    _impl_.upload_packet_.file_contents_ = file_contents;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.datasync.v1.UploadRequest.file_contents)
}
UploadRequest::UploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.datasync.v1.UploadRequest)
}
UploadRequest::UploadRequest(const UploadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.upload_packet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_upload_packet();
  switch (from.upload_packet_case()) {
    case kMetadata: {
      _this->_internal_mutable_metadata()->::viam::app::datasync::v1::UploadMetadata::MergeFrom(
          from._internal_metadata());
      break;
    }
    case kSensorContents: {
      _this->_internal_mutable_sensor_contents()->::viam::app::datasync::v1::SensorData::MergeFrom(
          from._internal_sensor_contents());
      break;
    }
    case kFileContents: {
      _this->_internal_mutable_file_contents()->::viam::app::datasync::v1::FileData::MergeFrom(
          from._internal_file_contents());
      break;
    }
    case UPLOAD_PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.datasync.v1.UploadRequest)
}

inline void UploadRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.upload_packet_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_upload_packet();
}

UploadRequest::~UploadRequest() {
  // @@protoc_insertion_point(destructor:viam.app.datasync.v1.UploadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_upload_packet()) {
    clear_upload_packet();
  }
}

void UploadRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadRequest::clear_upload_packet() {
// @@protoc_insertion_point(one_of_clear_start:viam.app.datasync.v1.UploadRequest)
  switch (upload_packet_case()) {
    case kMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.upload_packet_.metadata_;
      }
      break;
    }
    case kSensorContents: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.upload_packet_.sensor_contents_;
      }
      break;
    }
    case kFileContents: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.upload_packet_.file_contents_;
      }
      break;
    }
    case UPLOAD_PACKET_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = UPLOAD_PACKET_NOT_SET;
}


void UploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.datasync.v1.UploadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_upload_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.datasync.v1.UploadMetadata metadata = 1 [json_name = "metadata"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.datasync.v1.SensorData sensor_contents = 2 [json_name = "sensorContents"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sensor_contents(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.datasync.v1.FileData file_contents = 3 [json_name = "fileContents"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_contents(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.datasync.v1.UploadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.datasync.v1.UploadMetadata metadata = 1 [json_name = "metadata"];
  if (_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .viam.app.datasync.v1.SensorData sensor_contents = 2 [json_name = "sensorContents"];
  if (_internal_has_sensor_contents()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sensor_contents(this),
        _Internal::sensor_contents(this).GetCachedSize(), target, stream);
  }

  // .viam.app.datasync.v1.FileData file_contents = 3 [json_name = "fileContents"];
  if (_internal_has_file_contents()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::file_contents(this),
        _Internal::file_contents(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.datasync.v1.UploadRequest)
  return target;
}

size_t UploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.datasync.v1.UploadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (upload_packet_case()) {
    // .viam.app.datasync.v1.UploadMetadata metadata = 1 [json_name = "metadata"];
    case kMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.upload_packet_.metadata_);
      break;
    }
    // .viam.app.datasync.v1.SensorData sensor_contents = 2 [json_name = "sensorContents"];
    case kSensorContents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.upload_packet_.sensor_contents_);
      break;
    }
    // .viam.app.datasync.v1.FileData file_contents = 3 [json_name = "fileContents"];
    case kFileContents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.upload_packet_.file_contents_);
      break;
    }
    case UPLOAD_PACKET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadRequest::GetClassData() const { return &_class_data_; }


void UploadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadRequest*>(&to_msg);
  auto& from = static_cast<const UploadRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.datasync.v1.UploadRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.upload_packet_case()) {
    case kMetadata: {
      _this->_internal_mutable_metadata()->::viam::app::datasync::v1::UploadMetadata::MergeFrom(
          from._internal_metadata());
      break;
    }
    case kSensorContents: {
      _this->_internal_mutable_sensor_contents()->::viam::app::datasync::v1::SensorData::MergeFrom(
          from._internal_sensor_contents());
      break;
    }
    case kFileContents: {
      _this->_internal_mutable_file_contents()->::viam::app::datasync::v1::FileData::MergeFrom(
          from._internal_file_contents());
      break;
    }
    case UPLOAD_PACKET_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadRequest::CopyFrom(const UploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.datasync.v1.UploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadRequest::IsInitialized() const {
  return true;
}

void UploadRequest::InternalSwap(UploadRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.upload_packet_, other->_impl_.upload_packet_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[5]);
}

// ===================================================================

class UploadResponse::_Internal {
 public:
};

UploadResponse::UploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.datasync.v1.UploadResponse)
}
UploadResponse::UploadResponse(const UploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UploadResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.requests_written_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.requests_written_ = from._impl_.requests_written_;
  // @@protoc_insertion_point(copy_constructor:viam.app.datasync.v1.UploadResponse)
}

inline void UploadResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.requests_written_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UploadResponse::~UploadResponse() {
  // @@protoc_insertion_point(destructor:viam.app.datasync.v1.UploadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UploadResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.datasync.v1.UploadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.requests_written_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 requests_written = 1 [json_name = "requestsWritten"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.requests_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.datasync.v1.UploadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 requests_written = 1 [json_name = "requestsWritten"];
  if (this->_internal_requests_written() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_requests_written(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.datasync.v1.UploadResponse)
  return target;
}

size_t UploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.datasync.v1.UploadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 requests_written = 1 [json_name = "requestsWritten"];
  if (this->_internal_requests_written() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_requests_written());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UploadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadResponse::GetClassData() const { return &_class_data_; }


void UploadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UploadResponse*>(&to_msg);
  auto& from = static_cast<const UploadResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.datasync.v1.UploadResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_requests_written() != 0) {
    _this->_internal_set_requests_written(from._internal_requests_written());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadResponse::CopyFrom(const UploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.datasync.v1.UploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadResponse::IsInitialized() const {
  return true;
}

void UploadResponse::InternalSwap(UploadResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.requests_written_, other->_impl_.requests_written_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[6]);
}

// ===================================================================

class CaptureInterval::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start(const CaptureInterval* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end(const CaptureInterval* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CaptureInterval::_Internal::start(const CaptureInterval* msg) {
  return *msg->_impl_.start_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CaptureInterval::_Internal::end(const CaptureInterval* msg) {
  return *msg->_impl_.end_;
}
void CaptureInterval::clear_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
}
void CaptureInterval::clear_end() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_ != nullptr) {
    delete _impl_.end_;
  }
  _impl_.end_ = nullptr;
}
CaptureInterval::CaptureInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.app.datasync.v1.CaptureInterval)
}
CaptureInterval::CaptureInterval(const CaptureInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CaptureInterval* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    _this->_impl_.start_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.start_);
  }
  if (from._internal_has_end()) {
    _this->_impl_.end_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.end_);
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.datasync.v1.CaptureInterval)
}

inline void CaptureInterval::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CaptureInterval::~CaptureInterval() {
  // @@protoc_insertion_point(destructor:viam.app.datasync.v1.CaptureInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CaptureInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_;
  if (this != internal_default_instance()) delete _impl_.end_;
}

void CaptureInterval::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CaptureInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.datasync.v1.CaptureInterval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.end_ != nullptr) {
    delete _impl_.end_;
  }
  _impl_.end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CaptureInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start = 1 [json_name = "start"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 2 [json_name = "end"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CaptureInterval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.datasync.v1.CaptureInterval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1 [json_name = "start"];
  if (this->_internal_has_start()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end = 2 [json_name = "end"];
  if (this->_internal_has_end()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.datasync.v1.CaptureInterval)
  return target;
}

size_t CaptureInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.datasync.v1.CaptureInterval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1 [json_name = "start"];
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.start_);
  }

  // .google.protobuf.Timestamp end = 2 [json_name = "end"];
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CaptureInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CaptureInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CaptureInterval::GetClassData() const { return &_class_data_; }


void CaptureInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CaptureInterval*>(&to_msg);
  auto& from = static_cast<const CaptureInterval&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.datasync.v1.CaptureInterval)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _this->_internal_mutable_start()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_start());
  }
  if (from._internal_has_end()) {
    _this->_internal_mutable_end()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CaptureInterval::CopyFrom(const CaptureInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.datasync.v1.CaptureInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureInterval::IsInitialized() const {
  return true;
}

void CaptureInterval::InternalSwap(CaptureInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaptureInterval, _impl_.end_)
      + sizeof(CaptureInterval::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(CaptureInterval, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CaptureInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[7]);
}

// ===================================================================

DataCaptureMetadata_MethodParametersEntry_DoNotUse::DataCaptureMetadata_MethodParametersEntry_DoNotUse() {}
DataCaptureMetadata_MethodParametersEntry_DoNotUse::DataCaptureMetadata_MethodParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DataCaptureMetadata_MethodParametersEntry_DoNotUse::MergeFrom(const DataCaptureMetadata_MethodParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DataCaptureMetadata_MethodParametersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[8]);
}

// ===================================================================

class DataCaptureMetadata::_Internal {
 public:
};

void DataCaptureMetadata::clear_method_parameters() {
  _impl_.method_parameters_.Clear();
}
DataCaptureMetadata::DataCaptureMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DataCaptureMetadata::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:viam.app.datasync.v1.DataCaptureMetadata)
}
DataCaptureMetadata::DataCaptureMetadata(const DataCaptureMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataCaptureMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.method_parameters_)*/{}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.component_model_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.file_extension_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.method_parameters_.MergeFrom(from._impl_.method_parameters_);
  _impl_.component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_type().empty()) {
    _this->_impl_.component_type_.Set(from._internal_component_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_name().empty()) {
    _this->_impl_.component_name_.Set(from._internal_component_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_model().empty()) {
    _this->_impl_.component_model_.Set(from._internal_component_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method_name().empty()) {
    _this->_impl_.method_name_.Set(from._internal_method_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_extension().empty()) {
    _this->_impl_.file_extension_.Set(from._internal_file_extension(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:viam.app.datasync.v1.DataCaptureMetadata)
}

inline void DataCaptureMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.method_parameters_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.component_model_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.file_extension_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DataCaptureMetadata::~DataCaptureMetadata() {
  // @@protoc_insertion_point(destructor:viam.app.datasync.v1.DataCaptureMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DataCaptureMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_parameters_.Destruct();
  _impl_.method_parameters_.~MapField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.component_type_.Destroy();
  _impl_.component_name_.Destroy();
  _impl_.component_model_.Destroy();
  _impl_.method_name_.Destroy();
  _impl_.file_extension_.Destroy();
  _impl_.session_id_.Destroy();
}

void DataCaptureMetadata::ArenaDtor(void* object) {
  DataCaptureMetadata* _this = reinterpret_cast< DataCaptureMetadata* >(object);
  _this->_impl_.method_parameters_.Destruct();
}
void DataCaptureMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataCaptureMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.datasync.v1.DataCaptureMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.method_parameters_.Clear();
  _impl_.tags_.Clear();
  _impl_.component_type_.ClearToEmpty();
  _impl_.component_name_.ClearToEmpty();
  _impl_.component_model_.ClearToEmpty();
  _impl_.method_name_.ClearToEmpty();
  _impl_.file_extension_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataCaptureMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string component_type = 1 [json_name = "componentType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_component_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.DataCaptureMetadata.component_type"));
        } else
          goto handle_unusual;
        continue;
      // string component_name = 2 [json_name = "componentName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_component_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.DataCaptureMetadata.component_name"));
        } else
          goto handle_unusual;
        continue;
      // string component_model = 3 [json_name = "componentModel"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_component_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.DataCaptureMetadata.component_model"));
        } else
          goto handle_unusual;
        continue;
      // string method_name = 4 [json_name = "methodName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.DataCaptureMetadata.method_name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.datasync.v1.DataType type = 5 [json_name = "type"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::viam::app::datasync::v1::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> method_parameters = 6 [json_name = "methodParameters"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.method_parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string file_extension = 7 [json_name = "fileExtension"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_file_extension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.DataCaptureMetadata.file_extension"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 8 [json_name = "tags"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.DataCaptureMetadata.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string session_id = 9 [json_name = "sessionId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.DataCaptureMetadata.session_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataCaptureMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.datasync.v1.DataCaptureMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string component_type = 1 [json_name = "componentType"];
  if (!this->_internal_component_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_type().data(), static_cast<int>(this->_internal_component_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.DataCaptureMetadata.component_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_component_type(), target);
  }

  // string component_name = 2 [json_name = "componentName"];
  if (!this->_internal_component_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.DataCaptureMetadata.component_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_component_name(), target);
  }

  // string component_model = 3 [json_name = "componentModel"];
  if (!this->_internal_component_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_model().data(), static_cast<int>(this->_internal_component_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.DataCaptureMetadata.component_model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_component_model(), target);
  }

  // string method_name = 4 [json_name = "methodName"];
  if (!this->_internal_method_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.DataCaptureMetadata.method_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_method_name(), target);
  }

  // .viam.app.datasync.v1.DataType type = 5 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // map<string, .google.protobuf.Any> method_parameters = 6 [json_name = "methodParameters"];
  if (!this->_internal_method_parameters().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Any>;
    using WireHelper = DataCaptureMetadata_MethodParametersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_method_parameters();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "viam.app.datasync.v1.DataCaptureMetadata.MethodParametersEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string file_extension = 7 [json_name = "fileExtension"];
  if (!this->_internal_file_extension().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_extension().data(), static_cast<int>(this->_internal_file_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.DataCaptureMetadata.file_extension");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_file_extension(), target);
  }

  // repeated string tags = 8 [json_name = "tags"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.DataCaptureMetadata.tags");
    target = stream->WriteString(8, s, target);
  }

  // string session_id = 9 [json_name = "sessionId"];
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.DataCaptureMetadata.session_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_session_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.datasync.v1.DataCaptureMetadata)
  return target;
}

size_t DataCaptureMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.datasync.v1.DataCaptureMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Any> method_parameters = 6 [json_name = "methodParameters"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_method_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_method_parameters().begin();
      it != this->_internal_method_parameters().end(); ++it) {
    total_size += DataCaptureMetadata_MethodParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string tags = 8 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string component_type = 1 [json_name = "componentType"];
  if (!this->_internal_component_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_type());
  }

  // string component_name = 2 [json_name = "componentName"];
  if (!this->_internal_component_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_name());
  }

  // string component_model = 3 [json_name = "componentModel"];
  if (!this->_internal_component_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_model());
  }

  // string method_name = 4 [json_name = "methodName"];
  if (!this->_internal_method_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  // string file_extension = 7 [json_name = "fileExtension"];
  if (!this->_internal_file_extension().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_extension());
  }

  // string session_id = 9 [json_name = "sessionId"];
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .viam.app.datasync.v1.DataType type = 5 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataCaptureMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataCaptureMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataCaptureMetadata::GetClassData() const { return &_class_data_; }


void DataCaptureMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataCaptureMetadata*>(&to_msg);
  auto& from = static_cast<const DataCaptureMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.datasync.v1.DataCaptureMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.method_parameters_.MergeFrom(from._impl_.method_parameters_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_component_type().empty()) {
    _this->_internal_set_component_type(from._internal_component_type());
  }
  if (!from._internal_component_name().empty()) {
    _this->_internal_set_component_name(from._internal_component_name());
  }
  if (!from._internal_component_model().empty()) {
    _this->_internal_set_component_model(from._internal_component_model());
  }
  if (!from._internal_method_name().empty()) {
    _this->_internal_set_method_name(from._internal_method_name());
  }
  if (!from._internal_file_extension().empty()) {
    _this->_internal_set_file_extension(from._internal_file_extension());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataCaptureMetadata::CopyFrom(const DataCaptureMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.datasync.v1.DataCaptureMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCaptureMetadata::IsInitialized() const {
  return true;
}

void DataCaptureMetadata::InternalSwap(DataCaptureMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.method_parameters_.InternalSwap(&other->_impl_.method_parameters_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_type_, lhs_arena,
      &other->_impl_.component_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_name_, lhs_arena,
      &other->_impl_.component_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_model_, lhs_arena,
      &other->_impl_.component_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_extension_, lhs_arena,
      &other->_impl_.file_extension_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataCaptureMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[9]);
}

// ===================================================================

TabularCapture_MethodParametersEntry_DoNotUse::TabularCapture_MethodParametersEntry_DoNotUse() {}
TabularCapture_MethodParametersEntry_DoNotUse::TabularCapture_MethodParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TabularCapture_MethodParametersEntry_DoNotUse::MergeFrom(const TabularCapture_MethodParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TabularCapture_MethodParametersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[10]);
}

// ===================================================================

class TabularCapture::_Internal {
 public:
  static const ::viam::app::datasync::v1::CaptureInterval& interval(const TabularCapture* msg);
};

const ::viam::app::datasync::v1::CaptureInterval&
TabularCapture::_Internal::interval(const TabularCapture* msg) {
  return *msg->_impl_.interval_;
}
void TabularCapture::clear_method_parameters() {
  _impl_.method_parameters_.Clear();
}
TabularCapture::TabularCapture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TabularCapture::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:viam.app.datasync.v1.TabularCapture)
}
TabularCapture::TabularCapture(const TabularCapture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TabularCapture* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_names_){from._impl_.column_names_}
    , /*decltype(_impl_.method_parameters_)*/{}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.org_id_){}
    , decltype(_impl_.robot_id_){}
    , decltype(_impl_.part_id_){}
    , decltype(_impl_.location_id_){}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_model_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.blob_path_){}
    , decltype(_impl_.file_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.file_size_bytes_){}
    , decltype(_impl_.message_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.method_parameters_.MergeFrom(from._impl_.method_parameters_);
  _impl_.org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    _this->_impl_.org_id_.Set(from._internal_org_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.robot_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_id().empty()) {
    _this->_impl_.robot_id_.Set(from._internal_robot_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.part_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part_id().empty()) {
    _this->_impl_.part_id_.Set(from._internal_part_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location_id().empty()) {
    _this->_impl_.location_id_.Set(from._internal_location_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_name().empty()) {
    _this->_impl_.component_name_.Set(from._internal_component_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_type().empty()) {
    _this->_impl_.component_type_.Set(from._internal_component_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_model().empty()) {
    _this->_impl_.component_model_.Set(from._internal_component_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method_name().empty()) {
    _this->_impl_.method_name_.Set(from._internal_method_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.blob_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blob_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blob_path().empty()) {
    _this->_impl_.blob_path_.Set(from._internal_blob_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_id().empty()) {
    _this->_impl_.file_id_.Set(from._internal_file_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_interval()) {
    _this->_impl_.interval_ = new ::viam::app::datasync::v1::CaptureInterval(*from._impl_.interval_);
  }
  ::memcpy(&_impl_.file_size_bytes_, &from._impl_.file_size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.message_count_) -
    reinterpret_cast<char*>(&_impl_.file_size_bytes_)) + sizeof(_impl_.message_count_));
  // @@protoc_insertion_point(copy_constructor:viam.app.datasync.v1.TabularCapture)
}

inline void TabularCapture::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_names_){arena}
    , /*decltype(_impl_.method_parameters_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.org_id_){}
    , decltype(_impl_.robot_id_){}
    , decltype(_impl_.part_id_){}
    , decltype(_impl_.location_id_){}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_model_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.blob_path_){}
    , decltype(_impl_.file_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.file_size_bytes_){int64_t{0}}
    , decltype(_impl_.message_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.robot_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.part_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blob_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blob_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TabularCapture::~TabularCapture() {
  // @@protoc_insertion_point(destructor:viam.app.datasync.v1.TabularCapture)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TabularCapture::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_names_.~RepeatedPtrField();
  _impl_.method_parameters_.Destruct();
  _impl_.method_parameters_.~MapField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.org_id_.Destroy();
  _impl_.robot_id_.Destroy();
  _impl_.part_id_.Destroy();
  _impl_.location_id_.Destroy();
  _impl_.component_name_.Destroy();
  _impl_.component_type_.Destroy();
  _impl_.component_model_.Destroy();
  _impl_.method_name_.Destroy();
  _impl_.blob_path_.Destroy();
  _impl_.file_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.mime_type_.Destroy();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.interval_;
}

void TabularCapture::ArenaDtor(void* object) {
  TabularCapture* _this = reinterpret_cast< TabularCapture* >(object);
  _this->_impl_.method_parameters_.Destruct();
}
void TabularCapture::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TabularCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.datasync.v1.TabularCapture)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_names_.Clear();
  _impl_.method_parameters_.Clear();
  _impl_.tags_.Clear();
  _impl_.org_id_.ClearToEmpty();
  _impl_.robot_id_.ClearToEmpty();
  _impl_.part_id_.ClearToEmpty();
  _impl_.location_id_.ClearToEmpty();
  _impl_.component_name_.ClearToEmpty();
  _impl_.component_type_.ClearToEmpty();
  _impl_.component_model_.ClearToEmpty();
  _impl_.method_name_.ClearToEmpty();
  _impl_.blob_path_.ClearToEmpty();
  _impl_.file_id_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
  ::memset(&_impl_.file_size_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.message_count_) -
      reinterpret_cast<char*>(&_impl_.file_size_bytes_)) + sizeof(_impl_.message_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TabularCapture::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.datasync.v1.CaptureInterval interval = 1 [json_name = "interval", (.tagger.v1.tags) = "bson:\"interval\" json:\"interval\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string org_id = 2 [json_name = "orgId", (.tagger.v1.tags) = "bson:\"org_id\" json:\"org_id\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.org_id"));
        } else
          goto handle_unusual;
        continue;
      // string robot_id = 3 [json_name = "robotId", (.tagger.v1.tags) = "bson:\"robot_id\" json:\"robot_id\""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.robot_id"));
        } else
          goto handle_unusual;
        continue;
      // string part_id = 4 [json_name = "partId", (.tagger.v1.tags) = "bson:\"part_id\" json:\"part_id\""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_part_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.part_id"));
        } else
          goto handle_unusual;
        continue;
      // string location_id = 5 [json_name = "locationId", (.tagger.v1.tags) = "bson:\"location_id\" json:\"location_id\""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_location_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.location_id"));
        } else
          goto handle_unusual;
        continue;
      // string component_name = 6 [json_name = "componentName", (.tagger.v1.tags) = "bson:\"component_name\" json:\"component_name\""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_component_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.component_name"));
        } else
          goto handle_unusual;
        continue;
      // string component_type = 7 [json_name = "componentType", (.tagger.v1.tags) = "bson:\"component_type\" json:\"component_type\""];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_component_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.component_type"));
        } else
          goto handle_unusual;
        continue;
      // string component_model = 8 [json_name = "componentModel", (.tagger.v1.tags) = "bson:\"component_model\" json:\"component_model\""];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_component_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.component_model"));
        } else
          goto handle_unusual;
        continue;
      // string method_name = 9 [json_name = "methodName", (.tagger.v1.tags) = "bson:\"method_name\" json:\"method_name\""];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.method_name"));
        } else
          goto handle_unusual;
        continue;
      // string blob_path = 10 [json_name = "blobPath", (.tagger.v1.tags) = "bson:\"blob_path\" json:\"blob_path\""];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_blob_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.blob_path"));
        } else
          goto handle_unusual;
        continue;
      // repeated string column_names = 11 [json_name = "columnNames", (.tagger.v1.tags) = "bson:\"column_names\" json:\"column_names\""];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_column_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.column_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> method_parameters = 12 [json_name = "methodParameters", (.tagger.v1.tags) = "bson:\"method_parameters\" json:\"method_parameters\""];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.method_parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string file_id = 13 [json_name = "fileId", (.tagger.v1.tags) = "bson:\"file_id\" json:\"file_id\""];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_file_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.file_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 14 [json_name = "tags", (.tagger.v1.tags) = "bson:\"tags\" json:\"tags\""];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 message_count = 15 [json_name = "messageCount", (.tagger.v1.tags) = "bson:\"message_count\" json:\"message_count\""];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.message_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 file_size_bytes = 16 [json_name = "fileSizeBytes", (.tagger.v1.tags) = "bson:\"file_size_bytes\" json:\"file_size_bytes\""];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.file_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 17 [json_name = "sessionId", (.tagger.v1.tags) = "bson:\"session_id\" json:\"session_id\""];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 18 [json_name = "mimeType", (.tagger.v1.tags) = "bson:\"mime_type\" json:\"mime_type\""];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // string id = 19 [json_name = "id", (.tagger.v1.tags) = "bson:\"_id\" json:\"id,omitempty\""];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.TabularCapture.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TabularCapture::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.datasync.v1.TabularCapture)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.datasync.v1.CaptureInterval interval = 1 [json_name = "interval", (.tagger.v1.tags) = "bson:\"interval\" json:\"interval\""];
  if (this->_internal_has_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // string org_id = 2 [json_name = "orgId", (.tagger.v1.tags) = "bson:\"org_id\" json:\"org_id\""];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.org_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_org_id(), target);
  }

  // string robot_id = 3 [json_name = "robotId", (.tagger.v1.tags) = "bson:\"robot_id\" json:\"robot_id\""];
  if (!this->_internal_robot_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.robot_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_robot_id(), target);
  }

  // string part_id = 4 [json_name = "partId", (.tagger.v1.tags) = "bson:\"part_id\" json:\"part_id\""];
  if (!this->_internal_part_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_part_id().data(), static_cast<int>(this->_internal_part_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.part_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_part_id(), target);
  }

  // string location_id = 5 [json_name = "locationId", (.tagger.v1.tags) = "bson:\"location_id\" json:\"location_id\""];
  if (!this->_internal_location_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location_id().data(), static_cast<int>(this->_internal_location_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.location_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_location_id(), target);
  }

  // string component_name = 6 [json_name = "componentName", (.tagger.v1.tags) = "bson:\"component_name\" json:\"component_name\""];
  if (!this->_internal_component_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.component_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_component_name(), target);
  }

  // string component_type = 7 [json_name = "componentType", (.tagger.v1.tags) = "bson:\"component_type\" json:\"component_type\""];
  if (!this->_internal_component_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_type().data(), static_cast<int>(this->_internal_component_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.component_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_component_type(), target);
  }

  // string component_model = 8 [json_name = "componentModel", (.tagger.v1.tags) = "bson:\"component_model\" json:\"component_model\""];
  if (!this->_internal_component_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_model().data(), static_cast<int>(this->_internal_component_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.component_model");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_component_model(), target);
  }

  // string method_name = 9 [json_name = "methodName", (.tagger.v1.tags) = "bson:\"method_name\" json:\"method_name\""];
  if (!this->_internal_method_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.method_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_method_name(), target);
  }

  // string blob_path = 10 [json_name = "blobPath", (.tagger.v1.tags) = "bson:\"blob_path\" json:\"blob_path\""];
  if (!this->_internal_blob_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blob_path().data(), static_cast<int>(this->_internal_blob_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.blob_path");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_blob_path(), target);
  }

  // repeated string column_names = 11 [json_name = "columnNames", (.tagger.v1.tags) = "bson:\"column_names\" json:\"column_names\""];
  for (int i = 0, n = this->_internal_column_names_size(); i < n; i++) {
    const auto& s = this->_internal_column_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.column_names");
    target = stream->WriteString(11, s, target);
  }

  // map<string, .google.protobuf.Any> method_parameters = 12 [json_name = "methodParameters", (.tagger.v1.tags) = "bson:\"method_parameters\" json:\"method_parameters\""];
  if (!this->_internal_method_parameters().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Any>;
    using WireHelper = TabularCapture_MethodParametersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_method_parameters();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "viam.app.datasync.v1.TabularCapture.MethodParametersEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(12, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string file_id = 13 [json_name = "fileId", (.tagger.v1.tags) = "bson:\"file_id\" json:\"file_id\""];
  if (!this->_internal_file_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.file_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_file_id(), target);
  }

  // repeated string tags = 14 [json_name = "tags", (.tagger.v1.tags) = "bson:\"tags\" json:\"tags\""];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.tags");
    target = stream->WriteString(14, s, target);
  }

  // int32 message_count = 15 [json_name = "messageCount", (.tagger.v1.tags) = "bson:\"message_count\" json:\"message_count\""];
  if (this->_internal_message_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_message_count(), target);
  }

  // int64 file_size_bytes = 16 [json_name = "fileSizeBytes", (.tagger.v1.tags) = "bson:\"file_size_bytes\" json:\"file_size_bytes\""];
  if (this->_internal_file_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_file_size_bytes(), target);
  }

  // string session_id = 17 [json_name = "sessionId", (.tagger.v1.tags) = "bson:\"session_id\" json:\"session_id\""];
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.session_id");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_session_id(), target);
  }

  // string mime_type = 18 [json_name = "mimeType", (.tagger.v1.tags) = "bson:\"mime_type\" json:\"mime_type\""];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.mime_type");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_mime_type(), target);
  }

  // string id = 19 [json_name = "id", (.tagger.v1.tags) = "bson:\"_id\" json:\"id,omitempty\""];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.TabularCapture.id");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.datasync.v1.TabularCapture)
  return target;
}

size_t TabularCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.datasync.v1.TabularCapture)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string column_names = 11 [json_name = "columnNames", (.tagger.v1.tags) = "bson:\"column_names\" json:\"column_names\""];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.column_names_.size());
  for (int i = 0, n = _impl_.column_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.column_names_.Get(i));
  }

  // map<string, .google.protobuf.Any> method_parameters = 12 [json_name = "methodParameters", (.tagger.v1.tags) = "bson:\"method_parameters\" json:\"method_parameters\""];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_method_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_method_parameters().begin();
      it != this->_internal_method_parameters().end(); ++it) {
    total_size += TabularCapture_MethodParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string tags = 14 [json_name = "tags", (.tagger.v1.tags) = "bson:\"tags\" json:\"tags\""];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string org_id = 2 [json_name = "orgId", (.tagger.v1.tags) = "bson:\"org_id\" json:\"org_id\""];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  // string robot_id = 3 [json_name = "robotId", (.tagger.v1.tags) = "bson:\"robot_id\" json:\"robot_id\""];
  if (!this->_internal_robot_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string part_id = 4 [json_name = "partId", (.tagger.v1.tags) = "bson:\"part_id\" json:\"part_id\""];
  if (!this->_internal_part_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_part_id());
  }

  // string location_id = 5 [json_name = "locationId", (.tagger.v1.tags) = "bson:\"location_id\" json:\"location_id\""];
  if (!this->_internal_location_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location_id());
  }

  // string component_name = 6 [json_name = "componentName", (.tagger.v1.tags) = "bson:\"component_name\" json:\"component_name\""];
  if (!this->_internal_component_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_name());
  }

  // string component_type = 7 [json_name = "componentType", (.tagger.v1.tags) = "bson:\"component_type\" json:\"component_type\""];
  if (!this->_internal_component_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_type());
  }

  // string component_model = 8 [json_name = "componentModel", (.tagger.v1.tags) = "bson:\"component_model\" json:\"component_model\""];
  if (!this->_internal_component_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_model());
  }

  // string method_name = 9 [json_name = "methodName", (.tagger.v1.tags) = "bson:\"method_name\" json:\"method_name\""];
  if (!this->_internal_method_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  // string blob_path = 10 [json_name = "blobPath", (.tagger.v1.tags) = "bson:\"blob_path\" json:\"blob_path\""];
  if (!this->_internal_blob_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blob_path());
  }

  // string file_id = 13 [json_name = "fileId", (.tagger.v1.tags) = "bson:\"file_id\" json:\"file_id\""];
  if (!this->_internal_file_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_id());
  }

  // string session_id = 17 [json_name = "sessionId", (.tagger.v1.tags) = "bson:\"session_id\" json:\"session_id\""];
  if (!this->_internal_session_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string mime_type = 18 [json_name = "mimeType", (.tagger.v1.tags) = "bson:\"mime_type\" json:\"mime_type\""];
  if (!this->_internal_mime_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // string id = 19 [json_name = "id", (.tagger.v1.tags) = "bson:\"_id\" json:\"id,omitempty\""];
  if (!this->_internal_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .viam.app.datasync.v1.CaptureInterval interval = 1 [json_name = "interval", (.tagger.v1.tags) = "bson:\"interval\" json:\"interval\""];
  if (this->_internal_has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interval_);
  }

  // int64 file_size_bytes = 16 [json_name = "fileSizeBytes", (.tagger.v1.tags) = "bson:\"file_size_bytes\" json:\"file_size_bytes\""];
  if (this->_internal_file_size_bytes() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_file_size_bytes());
  }

  // int32 message_count = 15 [json_name = "messageCount", (.tagger.v1.tags) = "bson:\"message_count\" json:\"message_count\""];
  if (this->_internal_message_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_message_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TabularCapture::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TabularCapture::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TabularCapture::GetClassData() const { return &_class_data_; }


void TabularCapture::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TabularCapture*>(&to_msg);
  auto& from = static_cast<const TabularCapture&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.datasync.v1.TabularCapture)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_names_.MergeFrom(from._impl_.column_names_);
  _this->_impl_.method_parameters_.MergeFrom(from._impl_.method_parameters_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_org_id().empty()) {
    _this->_internal_set_org_id(from._internal_org_id());
  }
  if (!from._internal_robot_id().empty()) {
    _this->_internal_set_robot_id(from._internal_robot_id());
  }
  if (!from._internal_part_id().empty()) {
    _this->_internal_set_part_id(from._internal_part_id());
  }
  if (!from._internal_location_id().empty()) {
    _this->_internal_set_location_id(from._internal_location_id());
  }
  if (!from._internal_component_name().empty()) {
    _this->_internal_set_component_name(from._internal_component_name());
  }
  if (!from._internal_component_type().empty()) {
    _this->_internal_set_component_type(from._internal_component_type());
  }
  if (!from._internal_component_model().empty()) {
    _this->_internal_set_component_model(from._internal_component_model());
  }
  if (!from._internal_method_name().empty()) {
    _this->_internal_set_method_name(from._internal_method_name());
  }
  if (!from._internal_blob_path().empty()) {
    _this->_internal_set_blob_path(from._internal_blob_path());
  }
  if (!from._internal_file_id().empty()) {
    _this->_internal_set_file_id(from._internal_file_id());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_interval()) {
    _this->_internal_mutable_interval()->::viam::app::datasync::v1::CaptureInterval::MergeFrom(
        from._internal_interval());
  }
  if (from._internal_file_size_bytes() != 0) {
    _this->_internal_set_file_size_bytes(from._internal_file_size_bytes());
  }
  if (from._internal_message_count() != 0) {
    _this->_internal_set_message_count(from._internal_message_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TabularCapture::CopyFrom(const TabularCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.datasync.v1.TabularCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabularCapture::IsInitialized() const {
  return true;
}

void TabularCapture::InternalSwap(TabularCapture* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.column_names_.InternalSwap(&other->_impl_.column_names_);
  _impl_.method_parameters_.InternalSwap(&other->_impl_.method_parameters_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.org_id_, lhs_arena,
      &other->_impl_.org_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.robot_id_, lhs_arena,
      &other->_impl_.robot_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.part_id_, lhs_arena,
      &other->_impl_.part_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_id_, lhs_arena,
      &other->_impl_.location_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_name_, lhs_arena,
      &other->_impl_.component_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_type_, lhs_arena,
      &other->_impl_.component_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_model_, lhs_arena,
      &other->_impl_.component_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blob_path_, lhs_arena,
      &other->_impl_.blob_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_id_, lhs_arena,
      &other->_impl_.file_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TabularCapture, _impl_.message_count_)
      + sizeof(TabularCapture::_impl_.message_count_)
      - PROTOBUF_FIELD_OFFSET(TabularCapture, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TabularCapture::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[11]);
}

// ===================================================================

BinaryCapture_MethodParametersEntry_DoNotUse::BinaryCapture_MethodParametersEntry_DoNotUse() {}
BinaryCapture_MethodParametersEntry_DoNotUse::BinaryCapture_MethodParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BinaryCapture_MethodParametersEntry_DoNotUse::MergeFrom(const BinaryCapture_MethodParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BinaryCapture_MethodParametersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[12]);
}

// ===================================================================

class BinaryCapture::_Internal {
 public:
  static const ::viam::app::datasync::v1::CaptureInterval& interval(const BinaryCapture* msg);
};

const ::viam::app::datasync::v1::CaptureInterval&
BinaryCapture::_Internal::interval(const BinaryCapture* msg) {
  return *msg->_impl_.interval_;
}
void BinaryCapture::clear_method_parameters() {
  _impl_.method_parameters_.Clear();
}
BinaryCapture::BinaryCapture(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &BinaryCapture::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:viam.app.datasync.v1.BinaryCapture)
}
BinaryCapture::BinaryCapture(const BinaryCapture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinaryCapture* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.method_parameters_)*/{}
    , decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.org_id_){}
    , decltype(_impl_.robot_id_){}
    , decltype(_impl_.part_id_){}
    , decltype(_impl_.location_id_){}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_model_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.blob_path_){}
    , decltype(_impl_.file_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.file_ext_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.file_size_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.method_parameters_.MergeFrom(from._impl_.method_parameters_);
  _impl_.org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    _this->_impl_.org_id_.Set(from._internal_org_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.robot_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_id().empty()) {
    _this->_impl_.robot_id_.Set(from._internal_robot_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.part_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part_id().empty()) {
    _this->_impl_.part_id_.Set(from._internal_part_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location_id().empty()) {
    _this->_impl_.location_id_.Set(from._internal_location_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_name().empty()) {
    _this->_impl_.component_name_.Set(from._internal_component_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_type().empty()) {
    _this->_impl_.component_type_.Set(from._internal_component_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_model().empty()) {
    _this->_impl_.component_model_.Set(from._internal_component_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method_name().empty()) {
    _this->_impl_.method_name_.Set(from._internal_method_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.blob_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blob_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blob_path().empty()) {
    _this->_impl_.blob_path_.Set(from._internal_blob_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_id().empty()) {
    _this->_impl_.file_id_.Set(from._internal_file_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    _this->_impl_.mime_type_.Set(from._internal_mime_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    _this->_impl_.file_name_.Set(from._internal_file_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_ext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_ext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_ext().empty()) {
    _this->_impl_.file_ext_.Set(from._internal_file_ext(), 
      _this->GetArenaForAllocation());
  }
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_interval()) {
    _this->_impl_.interval_ = new ::viam::app::datasync::v1::CaptureInterval(*from._impl_.interval_);
  }
  _this->_impl_.file_size_bytes_ = from._impl_.file_size_bytes_;
  // @@protoc_insertion_point(copy_constructor:viam.app.datasync.v1.BinaryCapture)
}

inline void BinaryCapture::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.method_parameters_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.tags_){arena}
    , decltype(_impl_.org_id_){}
    , decltype(_impl_.robot_id_){}
    , decltype(_impl_.part_id_){}
    , decltype(_impl_.location_id_){}
    , decltype(_impl_.component_name_){}
    , decltype(_impl_.component_type_){}
    , decltype(_impl_.component_model_){}
    , decltype(_impl_.method_name_){}
    , decltype(_impl_.blob_path_){}
    , decltype(_impl_.file_id_){}
    , decltype(_impl_.session_id_){}
    , decltype(_impl_.mime_type_){}
    , decltype(_impl_.file_name_){}
    , decltype(_impl_.file_ext_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.interval_){nullptr}
    , decltype(_impl_.file_size_bytes_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.robot_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.robot_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.part_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.part_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.blob_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.blob_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_ext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_ext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BinaryCapture::~BinaryCapture() {
  // @@protoc_insertion_point(destructor:viam.app.datasync.v1.BinaryCapture)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void BinaryCapture::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.method_parameters_.Destruct();
  _impl_.method_parameters_.~MapField();
  _impl_.tags_.~RepeatedPtrField();
  _impl_.org_id_.Destroy();
  _impl_.robot_id_.Destroy();
  _impl_.part_id_.Destroy();
  _impl_.location_id_.Destroy();
  _impl_.component_name_.Destroy();
  _impl_.component_type_.Destroy();
  _impl_.component_model_.Destroy();
  _impl_.method_name_.Destroy();
  _impl_.blob_path_.Destroy();
  _impl_.file_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.mime_type_.Destroy();
  _impl_.file_name_.Destroy();
  _impl_.file_ext_.Destroy();
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.interval_;
}

void BinaryCapture::ArenaDtor(void* object) {
  BinaryCapture* _this = reinterpret_cast< BinaryCapture* >(object);
  _this->_impl_.method_parameters_.Destruct();
}
void BinaryCapture::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinaryCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.datasync.v1.BinaryCapture)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.method_parameters_.Clear();
  _impl_.tags_.Clear();
  _impl_.org_id_.ClearToEmpty();
  _impl_.robot_id_.ClearToEmpty();
  _impl_.part_id_.ClearToEmpty();
  _impl_.location_id_.ClearToEmpty();
  _impl_.component_name_.ClearToEmpty();
  _impl_.component_type_.ClearToEmpty();
  _impl_.component_model_.ClearToEmpty();
  _impl_.method_name_.ClearToEmpty();
  _impl_.blob_path_.ClearToEmpty();
  _impl_.file_id_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.mime_type_.ClearToEmpty();
  _impl_.file_name_.ClearToEmpty();
  _impl_.file_ext_.ClearToEmpty();
  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.interval_ != nullptr) {
    delete _impl_.interval_;
  }
  _impl_.interval_ = nullptr;
  _impl_.file_size_bytes_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryCapture::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.datasync.v1.CaptureInterval interval = 1 [json_name = "interval", (.tagger.v1.tags) = "bson:\"interval\" json:\"interval\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string org_id = 2 [json_name = "orgId", (.tagger.v1.tags) = "bson:\"org_id\" json:\"org_id\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.org_id"));
        } else
          goto handle_unusual;
        continue;
      // string robot_id = 3 [json_name = "robotId", (.tagger.v1.tags) = "bson:\"robot_id\" json:\"robot_id\""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.robot_id"));
        } else
          goto handle_unusual;
        continue;
      // string part_id = 4 [json_name = "partId", (.tagger.v1.tags) = "bson:\"part_id\" json:\"part_id\""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_part_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.part_id"));
        } else
          goto handle_unusual;
        continue;
      // string location_id = 5 [json_name = "locationId", (.tagger.v1.tags) = "bson:\"location_id\" json:\"location_id\""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_location_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.location_id"));
        } else
          goto handle_unusual;
        continue;
      // string component_name = 6 [json_name = "componentName", (.tagger.v1.tags) = "bson:\"component_name\" json:\"component_name\""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_component_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.component_name"));
        } else
          goto handle_unusual;
        continue;
      // string component_type = 7 [json_name = "componentType", (.tagger.v1.tags) = "bson:\"component_type\" json:\"component_type\""];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_component_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.component_type"));
        } else
          goto handle_unusual;
        continue;
      // string component_model = 8 [json_name = "componentModel", (.tagger.v1.tags) = "bson:\"component_model\" json:\"component_model\""];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_component_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.component_model"));
        } else
          goto handle_unusual;
        continue;
      // string method_name = 9 [json_name = "methodName", (.tagger.v1.tags) = "bson:\"method_name\" json:\"method_name\""];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.method_name"));
        } else
          goto handle_unusual;
        continue;
      // string blob_path = 10 [json_name = "blobPath", (.tagger.v1.tags) = "bson:\"blob_path\" json:\"blob_path\""];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_blob_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.blob_path"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters", (.tagger.v1.tags) = "bson:\"method_parameters\" json:\"method_parameters\""];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.method_parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string file_id = 12 [json_name = "fileId", (.tagger.v1.tags) = "bson:\"file_id\" json:\"file_id\""];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_file_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.file_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 13 [json_name = "tags", (.tagger.v1.tags) = "bson:\"tags\" json:\"tags\""];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 file_size_bytes = 14 [json_name = "fileSizeBytes", (.tagger.v1.tags) = "bson:\"file_size_bytes\" json:\"file_size_bytes\""];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.file_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string session_id = 15 [json_name = "sessionId", (.tagger.v1.tags) = "bson:\"session_id\" json:\"session_id\""];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.session_id"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 16 [json_name = "mimeType", (.tagger.v1.tags) = "bson:\"mime_type\" json:\"mime_type\""];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // string file_name = 17 [json_name = "fileName", (.tagger.v1.tags) = "bson:\"file_name\" json:\"file_name\""];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.file_name"));
        } else
          goto handle_unusual;
        continue;
      // string file_ext = 18 [json_name = "fileExt", (.tagger.v1.tags) = "bson:\"file_ext\" json:\"file_ext\""];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_file_ext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.file_ext"));
        } else
          goto handle_unusual;
        continue;
      // string id = 19 [json_name = "id", (.tagger.v1.tags) = "bson:\"_id\" json:\"id,omitempty\""];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.datasync.v1.BinaryCapture.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryCapture::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.datasync.v1.BinaryCapture)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.datasync.v1.CaptureInterval interval = 1 [json_name = "interval", (.tagger.v1.tags) = "bson:\"interval\" json:\"interval\""];
  if (this->_internal_has_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  // string org_id = 2 [json_name = "orgId", (.tagger.v1.tags) = "bson:\"org_id\" json:\"org_id\""];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.org_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_org_id(), target);
  }

  // string robot_id = 3 [json_name = "robotId", (.tagger.v1.tags) = "bson:\"robot_id\" json:\"robot_id\""];
  if (!this->_internal_robot_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.robot_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_robot_id(), target);
  }

  // string part_id = 4 [json_name = "partId", (.tagger.v1.tags) = "bson:\"part_id\" json:\"part_id\""];
  if (!this->_internal_part_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_part_id().data(), static_cast<int>(this->_internal_part_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.part_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_part_id(), target);
  }

  // string location_id = 5 [json_name = "locationId", (.tagger.v1.tags) = "bson:\"location_id\" json:\"location_id\""];
  if (!this->_internal_location_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location_id().data(), static_cast<int>(this->_internal_location_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.location_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_location_id(), target);
  }

  // string component_name = 6 [json_name = "componentName", (.tagger.v1.tags) = "bson:\"component_name\" json:\"component_name\""];
  if (!this->_internal_component_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.component_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_component_name(), target);
  }

  // string component_type = 7 [json_name = "componentType", (.tagger.v1.tags) = "bson:\"component_type\" json:\"component_type\""];
  if (!this->_internal_component_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_type().data(), static_cast<int>(this->_internal_component_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.component_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_component_type(), target);
  }

  // string component_model = 8 [json_name = "componentModel", (.tagger.v1.tags) = "bson:\"component_model\" json:\"component_model\""];
  if (!this->_internal_component_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_model().data(), static_cast<int>(this->_internal_component_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.component_model");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_component_model(), target);
  }

  // string method_name = 9 [json_name = "methodName", (.tagger.v1.tags) = "bson:\"method_name\" json:\"method_name\""];
  if (!this->_internal_method_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.method_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_method_name(), target);
  }

  // string blob_path = 10 [json_name = "blobPath", (.tagger.v1.tags) = "bson:\"blob_path\" json:\"blob_path\""];
  if (!this->_internal_blob_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blob_path().data(), static_cast<int>(this->_internal_blob_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.blob_path");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_blob_path(), target);
  }

  // map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters", (.tagger.v1.tags) = "bson:\"method_parameters\" json:\"method_parameters\""];
  if (!this->_internal_method_parameters().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Any>;
    using WireHelper = BinaryCapture_MethodParametersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_method_parameters();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "viam.app.datasync.v1.BinaryCapture.MethodParametersEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string file_id = 12 [json_name = "fileId", (.tagger.v1.tags) = "bson:\"file_id\" json:\"file_id\""];
  if (!this->_internal_file_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.file_id");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_file_id(), target);
  }

  // repeated string tags = 13 [json_name = "tags", (.tagger.v1.tags) = "bson:\"tags\" json:\"tags\""];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.tags");
    target = stream->WriteString(13, s, target);
  }

  // int64 file_size_bytes = 14 [json_name = "fileSizeBytes", (.tagger.v1.tags) = "bson:\"file_size_bytes\" json:\"file_size_bytes\""];
  if (this->_internal_file_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_file_size_bytes(), target);
  }

  // string session_id = 15 [json_name = "sessionId", (.tagger.v1.tags) = "bson:\"session_id\" json:\"session_id\""];
  if (!this->_internal_session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.session_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_session_id(), target);
  }

  // string mime_type = 16 [json_name = "mimeType", (.tagger.v1.tags) = "bson:\"mime_type\" json:\"mime_type\""];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.mime_type");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_mime_type(), target);
  }

  // string file_name = 17 [json_name = "fileName", (.tagger.v1.tags) = "bson:\"file_name\" json:\"file_name\""];
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.file_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_file_name(), target);
  }

  // string file_ext = 18 [json_name = "fileExt", (.tagger.v1.tags) = "bson:\"file_ext\" json:\"file_ext\""];
  if (!this->_internal_file_ext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_ext().data(), static_cast<int>(this->_internal_file_ext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.file_ext");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_file_ext(), target);
  }

  // string id = 19 [json_name = "id", (.tagger.v1.tags) = "bson:\"_id\" json:\"id,omitempty\""];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.datasync.v1.BinaryCapture.id");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.datasync.v1.BinaryCapture)
  return target;
}

size_t BinaryCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.datasync.v1.BinaryCapture)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters", (.tagger.v1.tags) = "bson:\"method_parameters\" json:\"method_parameters\""];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_method_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_method_parameters().begin();
      it != this->_internal_method_parameters().end(); ++it) {
    total_size += BinaryCapture_MethodParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string tags = 13 [json_name = "tags", (.tagger.v1.tags) = "bson:\"tags\" json:\"tags\""];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string org_id = 2 [json_name = "orgId", (.tagger.v1.tags) = "bson:\"org_id\" json:\"org_id\""];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  // string robot_id = 3 [json_name = "robotId", (.tagger.v1.tags) = "bson:\"robot_id\" json:\"robot_id\""];
  if (!this->_internal_robot_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string part_id = 4 [json_name = "partId", (.tagger.v1.tags) = "bson:\"part_id\" json:\"part_id\""];
  if (!this->_internal_part_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_part_id());
  }

  // string location_id = 5 [json_name = "locationId", (.tagger.v1.tags) = "bson:\"location_id\" json:\"location_id\""];
  if (!this->_internal_location_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location_id());
  }

  // string component_name = 6 [json_name = "componentName", (.tagger.v1.tags) = "bson:\"component_name\" json:\"component_name\""];
  if (!this->_internal_component_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_name());
  }

  // string component_type = 7 [json_name = "componentType", (.tagger.v1.tags) = "bson:\"component_type\" json:\"component_type\""];
  if (!this->_internal_component_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_type());
  }

  // string component_model = 8 [json_name = "componentModel", (.tagger.v1.tags) = "bson:\"component_model\" json:\"component_model\""];
  if (!this->_internal_component_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_model());
  }

  // string method_name = 9 [json_name = "methodName", (.tagger.v1.tags) = "bson:\"method_name\" json:\"method_name\""];
  if (!this->_internal_method_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  // string blob_path = 10 [json_name = "blobPath", (.tagger.v1.tags) = "bson:\"blob_path\" json:\"blob_path\""];
  if (!this->_internal_blob_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blob_path());
  }

  // string file_id = 12 [json_name = "fileId", (.tagger.v1.tags) = "bson:\"file_id\" json:\"file_id\""];
  if (!this->_internal_file_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_id());
  }

  // string session_id = 15 [json_name = "sessionId", (.tagger.v1.tags) = "bson:\"session_id\" json:\"session_id\""];
  if (!this->_internal_session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string mime_type = 16 [json_name = "mimeType", (.tagger.v1.tags) = "bson:\"mime_type\" json:\"mime_type\""];
  if (!this->_internal_mime_type().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // string file_name = 17 [json_name = "fileName", (.tagger.v1.tags) = "bson:\"file_name\" json:\"file_name\""];
  if (!this->_internal_file_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string file_ext = 18 [json_name = "fileExt", (.tagger.v1.tags) = "bson:\"file_ext\" json:\"file_ext\""];
  if (!this->_internal_file_ext().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_ext());
  }

  // string id = 19 [json_name = "id", (.tagger.v1.tags) = "bson:\"_id\" json:\"id,omitempty\""];
  if (!this->_internal_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .viam.app.datasync.v1.CaptureInterval interval = 1 [json_name = "interval", (.tagger.v1.tags) = "bson:\"interval\" json:\"interval\""];
  if (this->_internal_has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.interval_);
  }

  // int64 file_size_bytes = 14 [json_name = "fileSizeBytes", (.tagger.v1.tags) = "bson:\"file_size_bytes\" json:\"file_size_bytes\""];
  if (this->_internal_file_size_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_file_size_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryCapture::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinaryCapture::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryCapture::GetClassData() const { return &_class_data_; }


void BinaryCapture::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinaryCapture*>(&to_msg);
  auto& from = static_cast<const BinaryCapture&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.app.datasync.v1.BinaryCapture)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.method_parameters_.MergeFrom(from._impl_.method_parameters_);
  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_org_id().empty()) {
    _this->_internal_set_org_id(from._internal_org_id());
  }
  if (!from._internal_robot_id().empty()) {
    _this->_internal_set_robot_id(from._internal_robot_id());
  }
  if (!from._internal_part_id().empty()) {
    _this->_internal_set_part_id(from._internal_part_id());
  }
  if (!from._internal_location_id().empty()) {
    _this->_internal_set_location_id(from._internal_location_id());
  }
  if (!from._internal_component_name().empty()) {
    _this->_internal_set_component_name(from._internal_component_name());
  }
  if (!from._internal_component_type().empty()) {
    _this->_internal_set_component_type(from._internal_component_type());
  }
  if (!from._internal_component_model().empty()) {
    _this->_internal_set_component_model(from._internal_component_model());
  }
  if (!from._internal_method_name().empty()) {
    _this->_internal_set_method_name(from._internal_method_name());
  }
  if (!from._internal_blob_path().empty()) {
    _this->_internal_set_blob_path(from._internal_blob_path());
  }
  if (!from._internal_file_id().empty()) {
    _this->_internal_set_file_id(from._internal_file_id());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_mime_type().empty()) {
    _this->_internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_file_name().empty()) {
    _this->_internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_file_ext().empty()) {
    _this->_internal_set_file_ext(from._internal_file_ext());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_interval()) {
    _this->_internal_mutable_interval()->::viam::app::datasync::v1::CaptureInterval::MergeFrom(
        from._internal_interval());
  }
  if (from._internal_file_size_bytes() != 0) {
    _this->_internal_set_file_size_bytes(from._internal_file_size_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryCapture::CopyFrom(const BinaryCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.datasync.v1.BinaryCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryCapture::IsInitialized() const {
  return true;
}

void BinaryCapture::InternalSwap(BinaryCapture* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.method_parameters_.InternalSwap(&other->_impl_.method_parameters_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.org_id_, lhs_arena,
      &other->_impl_.org_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.robot_id_, lhs_arena,
      &other->_impl_.robot_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.part_id_, lhs_arena,
      &other->_impl_.part_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_id_, lhs_arena,
      &other->_impl_.location_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_name_, lhs_arena,
      &other->_impl_.component_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_type_, lhs_arena,
      &other->_impl_.component_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.component_model_, lhs_arena,
      &other->_impl_.component_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_name_, lhs_arena,
      &other->_impl_.method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.blob_path_, lhs_arena,
      &other->_impl_.blob_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_id_, lhs_arena,
      &other->_impl_.file_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_id_, lhs_arena,
      &other->_impl_.session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mime_type_, lhs_arena,
      &other->_impl_.mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_name_, lhs_arena,
      &other->_impl_.file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_ext_, lhs_arena,
      &other->_impl_.file_ext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryCapture, _impl_.file_size_bytes_)
      + sizeof(BinaryCapture::_impl_.file_size_bytes_)
      - PROTOBUF_FIELD_OFFSET(BinaryCapture, _impl_.interval_)>(
          reinterpret_cast<char*>(&_impl_.interval_),
          reinterpret_cast<char*>(&other->_impl_.interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryCapture::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_getter, &descriptor_table_app_2fdatasync_2fv1_2fdata_5fsync_2eproto_once,
      file_level_metadata_app_2fdatasync_2fv1_2fdata_5fsync_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace datasync
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::SensorMetadata*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::SensorMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::SensorMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::SensorData*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::SensorData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::SensorData >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::FileData*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::FileData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::FileData >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::UploadMetadata_MethodParametersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::UploadMetadata_MethodParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::UploadMetadata_MethodParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::UploadMetadata*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::UploadMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::UploadMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::UploadRequest*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::UploadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::UploadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::UploadResponse*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::UploadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::UploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::CaptureInterval*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::CaptureInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::CaptureInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::DataCaptureMetadata_MethodParametersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::DataCaptureMetadata_MethodParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::DataCaptureMetadata_MethodParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::DataCaptureMetadata*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::DataCaptureMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::DataCaptureMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::TabularCapture_MethodParametersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::TabularCapture_MethodParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::TabularCapture_MethodParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::TabularCapture*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::TabularCapture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::TabularCapture >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::BinaryCapture_MethodParametersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::BinaryCapture_MethodParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::BinaryCapture_MethodParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::datasync::v1::BinaryCapture*
Arena::CreateMaybeMessage< ::viam::app::datasync::v1::BinaryCapture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::datasync::v1::BinaryCapture >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
