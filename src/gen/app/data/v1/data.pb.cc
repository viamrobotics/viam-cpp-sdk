// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/data/v1/data.proto

#include "app/data/v1/data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace app {
namespace data {
namespace v1 {
PROTOBUF_CONSTEXPR Result::Result(
    ::_pbi::ConstantInitialized)
  : message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(0)
{}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;
PROTOBUF_CONSTEXPR DataRequest::DataRequest(
    ::_pbi::ConstantInitialized)
  : last_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , filter_(nullptr)
  , limit_(uint64_t{0u})
  , sort_order_(0)
{}
struct DataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataRequestDefaultTypeInternal() {}
  union {
    DataRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataRequestDefaultTypeInternal _DataRequest_default_instance_;
PROTOBUF_CONSTEXPR Filter::Filter(
    ::_pbi::ConstantInitialized)
  : tags_()
  , location_ids_()
  , org_ids_()
  , mime_type_()
  , component_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , component_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , component_model_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , method_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , robot_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , robot_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , part_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , part_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , interval_(nullptr){}
struct FilterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterDefaultTypeInternal() {}
  union {
    Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterDefaultTypeInternal _Filter_default_instance_;
PROTOBUF_CONSTEXPR CaptureMetadata_MethodParametersEntry_DoNotUse::CaptureMetadata_MethodParametersEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct CaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CaptureMetadata_MethodParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal _CaptureMetadata_MethodParametersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CaptureMetadata::CaptureMetadata(
    ::_pbi::ConstantInitialized)
  : method_parameters_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , tags_()
  , org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , location_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , robot_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , robot_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , part_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , part_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , component_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , component_model_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , component_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , method_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CaptureMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptureMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptureMetadataDefaultTypeInternal() {}
  union {
    CaptureMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptureMetadataDefaultTypeInternal _CaptureMetadata_default_instance_;
PROTOBUF_CONSTEXPR CaptureInterval::CaptureInterval(
    ::_pbi::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr){}
struct CaptureIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptureIntervalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptureIntervalDefaultTypeInternal() {}
  union {
    CaptureInterval _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptureIntervalDefaultTypeInternal _CaptureInterval_default_instance_;
PROTOBUF_CONSTEXPR TabularDataByFilterRequest::TabularDataByFilterRequest(
    ::_pbi::ConstantInitialized)
  : data_request_(nullptr)
  , count_only_(false){}
struct TabularDataByFilterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TabularDataByFilterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TabularDataByFilterRequestDefaultTypeInternal() {}
  union {
    TabularDataByFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TabularDataByFilterRequestDefaultTypeInternal _TabularDataByFilterRequest_default_instance_;
PROTOBUF_CONSTEXPR TabularDataByFilterResponse::TabularDataByFilterResponse(
    ::_pbi::ConstantInitialized)
  : metadata_()
  , data_()
  , last_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , count_(int64_t{0}){}
struct TabularDataByFilterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TabularDataByFilterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TabularDataByFilterResponseDefaultTypeInternal() {}
  union {
    TabularDataByFilterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TabularDataByFilterResponseDefaultTypeInternal _TabularDataByFilterResponse_default_instance_;
PROTOBUF_CONSTEXPR TabularData::TabularData(
    ::_pbi::ConstantInitialized)
  : data_(nullptr)
  , time_requested_(nullptr)
  , time_received_(nullptr)
  , metadata_index_(0){}
struct TabularDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TabularDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TabularDataDefaultTypeInternal() {}
  union {
    TabularData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TabularDataDefaultTypeInternal _TabularData_default_instance_;
PROTOBUF_CONSTEXPR BinaryData::BinaryData(
    ::_pbi::ConstantInitialized)
  : binary_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , metadata_(nullptr){}
struct BinaryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryDataDefaultTypeInternal() {}
  union {
    BinaryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryDataDefaultTypeInternal _BinaryData_default_instance_;
PROTOBUF_CONSTEXPR BinaryDataByFilterRequest::BinaryDataByFilterRequest(
    ::_pbi::ConstantInitialized)
  : data_request_(nullptr)
  , include_binary_(false)
  , count_only_(false){}
struct BinaryDataByFilterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryDataByFilterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryDataByFilterRequestDefaultTypeInternal() {}
  union {
    BinaryDataByFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryDataByFilterRequestDefaultTypeInternal _BinaryDataByFilterRequest_default_instance_;
PROTOBUF_CONSTEXPR BinaryDataByFilterResponse::BinaryDataByFilterResponse(
    ::_pbi::ConstantInitialized)
  : data_()
  , last_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , count_(uint64_t{0u}){}
struct BinaryDataByFilterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryDataByFilterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryDataByFilterResponseDefaultTypeInternal() {}
  union {
    BinaryDataByFilterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryDataByFilterResponseDefaultTypeInternal _BinaryDataByFilterResponse_default_instance_;
PROTOBUF_CONSTEXPR BinaryDataByIDsRequest::BinaryDataByIDsRequest(
    ::_pbi::ConstantInitialized)
  : file_ids_()
  , include_binary_(false){}
struct BinaryDataByIDsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryDataByIDsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryDataByIDsRequestDefaultTypeInternal() {}
  union {
    BinaryDataByIDsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryDataByIDsRequestDefaultTypeInternal _BinaryDataByIDsRequest_default_instance_;
PROTOBUF_CONSTEXPR BinaryDataByIDsResponse::BinaryDataByIDsResponse(
    ::_pbi::ConstantInitialized)
  : data_()
  , last_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , count_(uint64_t{0u}){}
struct BinaryDataByIDsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryDataByIDsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryDataByIDsResponseDefaultTypeInternal() {}
  union {
    BinaryDataByIDsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryDataByIDsResponseDefaultTypeInternal _BinaryDataByIDsResponse_default_instance_;
PROTOBUF_CONSTEXPR BinaryMetadata::BinaryMetadata(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_ext_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , uri_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , capture_metadata_(nullptr)
  , time_requested_(nullptr)
  , time_received_(nullptr){}
struct BinaryMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinaryMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinaryMetadataDefaultTypeInternal() {}
  union {
    BinaryMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinaryMetadataDefaultTypeInternal _BinaryMetadata_default_instance_;
PROTOBUF_CONSTEXPR DeleteTabularDataByFilterRequest::DeleteTabularDataByFilterRequest(
    ::_pbi::ConstantInitialized)
  : filter_(nullptr){}
struct DeleteTabularDataByFilterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteTabularDataByFilterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteTabularDataByFilterRequestDefaultTypeInternal() {}
  union {
    DeleteTabularDataByFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteTabularDataByFilterRequestDefaultTypeInternal _DeleteTabularDataByFilterRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteTabularDataByFilterResponse::DeleteTabularDataByFilterResponse(
    ::_pbi::ConstantInitialized)
  : result_(nullptr)
  , deleted_count_(uint64_t{0u}){}
struct DeleteTabularDataByFilterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteTabularDataByFilterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteTabularDataByFilterResponseDefaultTypeInternal() {}
  union {
    DeleteTabularDataByFilterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteTabularDataByFilterResponseDefaultTypeInternal _DeleteTabularDataByFilterResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteBinaryDataByFilterRequest::DeleteBinaryDataByFilterRequest(
    ::_pbi::ConstantInitialized)
  : filter_(nullptr){}
struct DeleteBinaryDataByFilterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteBinaryDataByFilterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteBinaryDataByFilterRequestDefaultTypeInternal() {}
  union {
    DeleteBinaryDataByFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteBinaryDataByFilterRequestDefaultTypeInternal _DeleteBinaryDataByFilterRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteBinaryDataByFilterResponse::DeleteBinaryDataByFilterResponse(
    ::_pbi::ConstantInitialized)
  : result_(nullptr)
  , deleted_count_(uint64_t{0u}){}
struct DeleteBinaryDataByFilterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteBinaryDataByFilterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteBinaryDataByFilterResponseDefaultTypeInternal() {}
  union {
    DeleteBinaryDataByFilterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteBinaryDataByFilterResponseDefaultTypeInternal _DeleteBinaryDataByFilterResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteBinaryDataByIDsRequest::DeleteBinaryDataByIDsRequest(
    ::_pbi::ConstantInitialized)
  : file_ids_(){}
struct DeleteBinaryDataByIDsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteBinaryDataByIDsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteBinaryDataByIDsRequestDefaultTypeInternal() {}
  union {
    DeleteBinaryDataByIDsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteBinaryDataByIDsRequestDefaultTypeInternal _DeleteBinaryDataByIDsRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteBinaryDataByIDsResponse::DeleteBinaryDataByIDsResponse(
    ::_pbi::ConstantInitialized)
  : result_(nullptr)
  , deleted_count_(uint64_t{0u}){}
struct DeleteBinaryDataByIDsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteBinaryDataByIDsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteBinaryDataByIDsResponseDefaultTypeInternal() {}
  union {
    DeleteBinaryDataByIDsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteBinaryDataByIDsResponseDefaultTypeInternal _DeleteBinaryDataByIDsResponse_default_instance_;
PROTOBUF_CONSTEXPR AddTagsToBinaryDataByFileIDsRequest::AddTagsToBinaryDataByFileIDsRequest(
    ::_pbi::ConstantInitialized)
  : file_ids_()
  , tags_(){}
struct AddTagsToBinaryDataByFileIDsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTagsToBinaryDataByFileIDsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTagsToBinaryDataByFileIDsRequestDefaultTypeInternal() {}
  union {
    AddTagsToBinaryDataByFileIDsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTagsToBinaryDataByFileIDsRequestDefaultTypeInternal _AddTagsToBinaryDataByFileIDsRequest_default_instance_;
PROTOBUF_CONSTEXPR AddTagsToBinaryDataByFileIDsResponse::AddTagsToBinaryDataByFileIDsResponse(
    ::_pbi::ConstantInitialized){}
struct AddTagsToBinaryDataByFileIDsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTagsToBinaryDataByFileIDsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTagsToBinaryDataByFileIDsResponseDefaultTypeInternal() {}
  union {
    AddTagsToBinaryDataByFileIDsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTagsToBinaryDataByFileIDsResponseDefaultTypeInternal _AddTagsToBinaryDataByFileIDsResponse_default_instance_;
PROTOBUF_CONSTEXPR AddTagsToBinaryDataByFilterRequest::AddTagsToBinaryDataByFilterRequest(
    ::_pbi::ConstantInitialized)
  : tags_()
  , filter_(nullptr){}
struct AddTagsToBinaryDataByFilterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTagsToBinaryDataByFilterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTagsToBinaryDataByFilterRequestDefaultTypeInternal() {}
  union {
    AddTagsToBinaryDataByFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTagsToBinaryDataByFilterRequestDefaultTypeInternal _AddTagsToBinaryDataByFilterRequest_default_instance_;
PROTOBUF_CONSTEXPR AddTagsToBinaryDataByFilterResponse::AddTagsToBinaryDataByFilterResponse(
    ::_pbi::ConstantInitialized){}
struct AddTagsToBinaryDataByFilterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddTagsToBinaryDataByFilterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddTagsToBinaryDataByFilterResponseDefaultTypeInternal() {}
  union {
    AddTagsToBinaryDataByFilterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddTagsToBinaryDataByFilterResponseDefaultTypeInternal _AddTagsToBinaryDataByFilterResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveTagsFromBinaryDataByFileIDsRequest::RemoveTagsFromBinaryDataByFileIDsRequest(
    ::_pbi::ConstantInitialized)
  : file_ids_()
  , tags_(){}
struct RemoveTagsFromBinaryDataByFileIDsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveTagsFromBinaryDataByFileIDsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveTagsFromBinaryDataByFileIDsRequestDefaultTypeInternal() {}
  union {
    RemoveTagsFromBinaryDataByFileIDsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveTagsFromBinaryDataByFileIDsRequestDefaultTypeInternal _RemoveTagsFromBinaryDataByFileIDsRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveTagsFromBinaryDataByFileIDsResponse::RemoveTagsFromBinaryDataByFileIDsResponse(
    ::_pbi::ConstantInitialized)
  : deleted_count_(uint64_t{0u}){}
struct RemoveTagsFromBinaryDataByFileIDsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveTagsFromBinaryDataByFileIDsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveTagsFromBinaryDataByFileIDsResponseDefaultTypeInternal() {}
  union {
    RemoveTagsFromBinaryDataByFileIDsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveTagsFromBinaryDataByFileIDsResponseDefaultTypeInternal _RemoveTagsFromBinaryDataByFileIDsResponse_default_instance_;
PROTOBUF_CONSTEXPR RemoveTagsFromBinaryDataByFilterRequest::RemoveTagsFromBinaryDataByFilterRequest(
    ::_pbi::ConstantInitialized)
  : tags_()
  , filter_(nullptr){}
struct RemoveTagsFromBinaryDataByFilterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveTagsFromBinaryDataByFilterRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveTagsFromBinaryDataByFilterRequestDefaultTypeInternal() {}
  union {
    RemoveTagsFromBinaryDataByFilterRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveTagsFromBinaryDataByFilterRequestDefaultTypeInternal _RemoveTagsFromBinaryDataByFilterRequest_default_instance_;
PROTOBUF_CONSTEXPR RemoveTagsFromBinaryDataByFilterResponse::RemoveTagsFromBinaryDataByFilterResponse(
    ::_pbi::ConstantInitialized)
  : deleted_count_(uint64_t{0u}){}
struct RemoveTagsFromBinaryDataByFilterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveTagsFromBinaryDataByFilterResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveTagsFromBinaryDataByFilterResponseDefaultTypeInternal() {}
  union {
    RemoveTagsFromBinaryDataByFilterResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveTagsFromBinaryDataByFilterResponseDefaultTypeInternal _RemoveTagsFromBinaryDataByFilterResponse_default_instance_;
}  // namespace v1
}  // namespace data
}  // namespace app
}  // namespace viam
static ::_pb::Metadata file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[29];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_app_2fdata_2fv1_2fdata_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_app_2fdata_2fv1_2fdata_2eproto = nullptr;

const uint32_t TableStruct_app_2fdata_2fv1_2fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Result, status_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Result, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DataRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DataRequest, limit_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DataRequest, last_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DataRequest, sort_order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, component_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, component_model_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, method_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, tags_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, robot_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, robot_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, part_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, part_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, location_ids_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, org_ids_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::Filter, interval_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, org_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, location_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, robot_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, robot_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, part_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, part_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, component_type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, component_model_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, component_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, method_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, method_parameters_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, tags_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureMetadata, mime_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureInterval, start_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::CaptureInterval, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterRequest, data_request_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterRequest, count_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterResponse, metadata_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterResponse, data_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterResponse, count_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularDataByFilterResponse, last_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularData, data_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularData, metadata_index_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularData, time_requested_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::TabularData, time_received_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryData, binary_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryData, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterRequest, data_request_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterRequest, include_binary_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterRequest, count_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterResponse, data_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterResponse, count_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByFilterResponse, last_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsRequest, file_ids_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsRequest, include_binary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsResponse, data_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsResponse, count_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryDataByIDsResponse, last_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryMetadata, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryMetadata, capture_metadata_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryMetadata, time_requested_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryMetadata, time_received_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryMetadata, file_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryMetadata, file_ext_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::BinaryMetadata, uri_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteTabularDataByFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteTabularDataByFilterRequest, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteTabularDataByFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteTabularDataByFilterResponse, deleted_count_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteTabularDataByFilterResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteBinaryDataByFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteBinaryDataByFilterRequest, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteBinaryDataByFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteBinaryDataByFilterResponse, deleted_count_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteBinaryDataByFilterResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteBinaryDataByIDsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteBinaryDataByIDsRequest, file_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteBinaryDataByIDsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteBinaryDataByIDsResponse, deleted_count_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::DeleteBinaryDataByIDsResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::AddTagsToBinaryDataByFileIDsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::AddTagsToBinaryDataByFileIDsRequest, file_ids_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::AddTagsToBinaryDataByFileIDsRequest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::AddTagsToBinaryDataByFileIDsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::AddTagsToBinaryDataByFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::AddTagsToBinaryDataByFilterRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::AddTagsToBinaryDataByFilterRequest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::AddTagsToBinaryDataByFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsRequest, file_ids_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsRequest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsResponse, deleted_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterRequest, filter_),
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterRequest, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterResponse, deleted_count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::app::data::v1::Result)},
  { 8, -1, -1, sizeof(::viam::app::data::v1::DataRequest)},
  { 18, -1, -1, sizeof(::viam::app::data::v1::Filter)},
  { 37, 45, -1, sizeof(::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse)},
  { 47, -1, -1, sizeof(::viam::app::data::v1::CaptureMetadata)},
  { 66, -1, -1, sizeof(::viam::app::data::v1::CaptureInterval)},
  { 74, -1, -1, sizeof(::viam::app::data::v1::TabularDataByFilterRequest)},
  { 82, -1, -1, sizeof(::viam::app::data::v1::TabularDataByFilterResponse)},
  { 92, -1, -1, sizeof(::viam::app::data::v1::TabularData)},
  { 102, -1, -1, sizeof(::viam::app::data::v1::BinaryData)},
  { 110, -1, -1, sizeof(::viam::app::data::v1::BinaryDataByFilterRequest)},
  { 119, -1, -1, sizeof(::viam::app::data::v1::BinaryDataByFilterResponse)},
  { 128, -1, -1, sizeof(::viam::app::data::v1::BinaryDataByIDsRequest)},
  { 136, -1, -1, sizeof(::viam::app::data::v1::BinaryDataByIDsResponse)},
  { 145, -1, -1, sizeof(::viam::app::data::v1::BinaryMetadata)},
  { 158, -1, -1, sizeof(::viam::app::data::v1::DeleteTabularDataByFilterRequest)},
  { 165, -1, -1, sizeof(::viam::app::data::v1::DeleteTabularDataByFilterResponse)},
  { 173, -1, -1, sizeof(::viam::app::data::v1::DeleteBinaryDataByFilterRequest)},
  { 180, -1, -1, sizeof(::viam::app::data::v1::DeleteBinaryDataByFilterResponse)},
  { 188, -1, -1, sizeof(::viam::app::data::v1::DeleteBinaryDataByIDsRequest)},
  { 195, -1, -1, sizeof(::viam::app::data::v1::DeleteBinaryDataByIDsResponse)},
  { 203, -1, -1, sizeof(::viam::app::data::v1::AddTagsToBinaryDataByFileIDsRequest)},
  { 211, -1, -1, sizeof(::viam::app::data::v1::AddTagsToBinaryDataByFileIDsResponse)},
  { 217, -1, -1, sizeof(::viam::app::data::v1::AddTagsToBinaryDataByFilterRequest)},
  { 225, -1, -1, sizeof(::viam::app::data::v1::AddTagsToBinaryDataByFilterResponse)},
  { 231, -1, -1, sizeof(::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsRequest)},
  { 239, -1, -1, sizeof(::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsResponse)},
  { 246, -1, -1, sizeof(::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterRequest)},
  { 254, -1, -1, sizeof(::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::app::data::v1::_Result_default_instance_._instance,
  &::viam::app::data::v1::_DataRequest_default_instance_._instance,
  &::viam::app::data::v1::_Filter_default_instance_._instance,
  &::viam::app::data::v1::_CaptureMetadata_MethodParametersEntry_DoNotUse_default_instance_._instance,
  &::viam::app::data::v1::_CaptureMetadata_default_instance_._instance,
  &::viam::app::data::v1::_CaptureInterval_default_instance_._instance,
  &::viam::app::data::v1::_TabularDataByFilterRequest_default_instance_._instance,
  &::viam::app::data::v1::_TabularDataByFilterResponse_default_instance_._instance,
  &::viam::app::data::v1::_TabularData_default_instance_._instance,
  &::viam::app::data::v1::_BinaryData_default_instance_._instance,
  &::viam::app::data::v1::_BinaryDataByFilterRequest_default_instance_._instance,
  &::viam::app::data::v1::_BinaryDataByFilterResponse_default_instance_._instance,
  &::viam::app::data::v1::_BinaryDataByIDsRequest_default_instance_._instance,
  &::viam::app::data::v1::_BinaryDataByIDsResponse_default_instance_._instance,
  &::viam::app::data::v1::_BinaryMetadata_default_instance_._instance,
  &::viam::app::data::v1::_DeleteTabularDataByFilterRequest_default_instance_._instance,
  &::viam::app::data::v1::_DeleteTabularDataByFilterResponse_default_instance_._instance,
  &::viam::app::data::v1::_DeleteBinaryDataByFilterRequest_default_instance_._instance,
  &::viam::app::data::v1::_DeleteBinaryDataByFilterResponse_default_instance_._instance,
  &::viam::app::data::v1::_DeleteBinaryDataByIDsRequest_default_instance_._instance,
  &::viam::app::data::v1::_DeleteBinaryDataByIDsResponse_default_instance_._instance,
  &::viam::app::data::v1::_AddTagsToBinaryDataByFileIDsRequest_default_instance_._instance,
  &::viam::app::data::v1::_AddTagsToBinaryDataByFileIDsResponse_default_instance_._instance,
  &::viam::app::data::v1::_AddTagsToBinaryDataByFilterRequest_default_instance_._instance,
  &::viam::app::data::v1::_AddTagsToBinaryDataByFilterResponse_default_instance_._instance,
  &::viam::app::data::v1::_RemoveTagsFromBinaryDataByFileIDsRequest_default_instance_._instance,
  &::viam::app::data::v1::_RemoveTagsFromBinaryDataByFileIDsResponse_default_instance_._instance,
  &::viam::app::data::v1::_RemoveTagsFromBinaryDataByFilterRequest_default_instance_._instance,
  &::viam::app::data::v1::_RemoveTagsFromBinaryDataByFilterResponse_default_instance_._instance,
};

const char descriptor_table_protodef_app_2fdata_2fv1_2fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026app/data/v1/data.proto\022\020viam.app.data."
  "v1\032\031google/protobuf/any.proto\032\034google/pr"
  "otobuf/struct.proto\032\037google/protobuf/tim"
  "estamp.proto\"T\n\006Result\0220\n\006status\030\001 \001(\0162\030"
  ".viam.app.data.v1.StatusR\006status\022\030\n\007mess"
  "age\030\002 \001(\tR\007message\"\241\001\n\013DataRequest\0220\n\006fi"
  "lter\030\001 \001(\0132\030.viam.app.data.v1.FilterR\006fi"
  "lter\022\024\n\005limit\030\002 \001(\004R\005limit\022\022\n\004last\030\003 \001(\t"
  "R\004last\0226\n\nsort_order\030\004 \001(\0162\027.viam.app.da"
  "ta.v1.OrderR\tsortOrder\"\263\003\n\006Filter\022%\n\016com"
  "ponent_name\030\001 \001(\tR\rcomponentName\022%\n\016comp"
  "onent_type\030\002 \001(\tR\rcomponentType\022\'\n\017compo"
  "nent_model\030\003 \001(\tR\016componentModel\022\026\n\006meth"
  "od\030\004 \001(\tR\006method\022\022\n\004tags\030\005 \003(\tR\004tags\022\035\n\n"
  "robot_name\030\006 \001(\tR\trobotName\022\031\n\010robot_id\030"
  "\007 \001(\tR\007robotId\022\033\n\tpart_name\030\010 \001(\tR\010partN"
  "ame\022\027\n\007part_id\030\t \001(\tR\006partId\022!\n\014location"
  "_ids\030\n \003(\tR\013locationIds\022\027\n\007org_ids\030\013 \003(\t"
  "R\006orgIds\022\033\n\tmime_type\030\014 \003(\tR\010mimeType\022=\n"
  "\010interval\030\r \001(\0132!.viam.app.data.v1.Captu"
  "reIntervalR\010interval\"\303\004\n\017CaptureMetadata"
  "\022\025\n\006org_id\030\001 \001(\tR\005orgId\022\037\n\013location_id\030\002"
  " \001(\tR\nlocationId\022\035\n\nrobot_name\030\003 \001(\tR\tro"
  "botName\022\031\n\010robot_id\030\004 \001(\tR\007robotId\022\033\n\tpa"
  "rt_name\030\005 \001(\tR\010partName\022\027\n\007part_id\030\006 \001(\t"
  "R\006partId\022%\n\016component_type\030\007 \001(\tR\rcompon"
  "entType\022\'\n\017component_model\030\010 \001(\tR\016compon"
  "entModel\022%\n\016component_name\030\t \001(\tR\rcompon"
  "entName\022\037\n\013method_name\030\n \001(\tR\nmethodName"
  "\022d\n\021method_parameters\030\013 \003(\01327.viam.app.d"
  "ata.v1.CaptureMetadata.MethodParametersE"
  "ntryR\020methodParameters\022\022\n\004tags\030\014 \003(\tR\004ta"
  "gs\022\033\n\tmime_type\030\r \001(\tR\010mimeType\032Y\n\025Metho"
  "dParametersEntry\022\020\n\003key\030\001 \001(\tR\003key\022*\n\005va"
  "lue\030\002 \001(\0132\024.google.protobuf.AnyR\005value:\002"
  "8\001\"q\n\017CaptureInterval\0220\n\005start\030\001 \001(\0132\032.g"
  "oogle.protobuf.TimestampR\005start\022,\n\003end\030\002"
  " \001(\0132\032.google.protobuf.TimestampR\003end\"}\n"
  "\032TabularDataByFilterRequest\022@\n\014data_requ"
  "est\030\001 \001(\0132\035.viam.app.data.v1.DataRequest"
  "R\013dataRequest\022\035\n\ncount_only\030\002 \001(\010R\tcount"
  "Only\"\271\001\n\033TabularDataByFilterResponse\022=\n\010"
  "metadata\030\001 \003(\0132!.viam.app.data.v1.Captur"
  "eMetadataR\010metadata\0221\n\004data\030\002 \003(\0132\035.viam"
  ".app.data.v1.TabularDataR\004data\022\024\n\005count\030"
  "\003 \001(\003R\005count\022\022\n\004last\030\004 \001(\tR\004last\"\345\001\n\013Tab"
  "ularData\022+\n\004data\030\001 \001(\0132\027.google.protobuf"
  ".StructR\004data\022%\n\016metadata_index\030\002 \001(\005R\rm"
  "etadataIndex\022A\n\016time_requested\030\003 \001(\0132\032.g"
  "oogle.protobuf.TimestampR\rtimeRequested\022"
  "\?\n\rtime_received\030\004 \001(\0132\032.google.protobuf"
  ".TimestampR\014timeReceived\"b\n\nBinaryData\022\026"
  "\n\006binary\030\001 \001(\014R\006binary\022<\n\010metadata\030\002 \001(\013"
  "2 .viam.app.data.v1.BinaryMetadataR\010meta"
  "data\"\243\001\n\031BinaryDataByFilterRequest\022@\n\014da"
  "ta_request\030\001 \001(\0132\035.viam.app.data.v1.Data"
  "RequestR\013dataRequest\022%\n\016include_binary\030\002"
  " \001(\010R\rincludeBinary\022\035\n\ncount_only\030\003 \001(\010R"
  "\tcountOnly\"x\n\032BinaryDataByFilterResponse"
  "\0220\n\004data\030\001 \003(\0132\034.viam.app.data.v1.Binary"
  "DataR\004data\022\024\n\005count\030\002 \001(\004R\005count\022\022\n\004last"
  "\030\003 \001(\tR\004last\"Z\n\026BinaryDataByIDsRequest\022\031"
  "\n\010file_ids\030\001 \003(\tR\007fileIds\022%\n\016include_bin"
  "ary\030\002 \001(\010R\rincludeBinary\"u\n\027BinaryDataBy"
  "IDsResponse\0220\n\004data\030\001 \003(\0132\034.viam.app.dat"
  "a.v1.BinaryDataR\004data\022\024\n\005count\030\002 \001(\004R\005co"
  "unt\022\022\n\004last\030\003 \001(\tR\004last\"\274\002\n\016BinaryMetada"
  "ta\022\016\n\002id\030\001 \001(\tR\002id\022L\n\020capture_metadata\030\002"
  " \001(\0132!.viam.app.data.v1.CaptureMetadataR"
  "\017captureMetadata\022A\n\016time_requested\030\003 \001(\013"
  "2\032.google.protobuf.TimestampR\rtimeReques"
  "ted\022\?\n\rtime_received\030\004 \001(\0132\032.google.prot"
  "obuf.TimestampR\014timeReceived\022\033\n\tfile_nam"
  "e\030\005 \001(\tR\010fileName\022\031\n\010file_ext\030\006 \001(\tR\007fil"
  "eExt\022\020\n\003uri\030\007 \001(\tR\003uri\"T\n DeleteTabularD"
  "ataByFilterRequest\0220\n\006filter\030\001 \001(\0132\030.via"
  "m.app.data.v1.FilterR\006filter\"z\n!DeleteTa"
  "bularDataByFilterResponse\022#\n\rdeleted_cou"
  "nt\030\001 \001(\004R\014deletedCount\0220\n\006result\030\002 \001(\0132\030"
  ".viam.app.data.v1.ResultR\006result\"S\n\037Dele"
  "teBinaryDataByFilterRequest\0220\n\006filter\030\001 "
  "\001(\0132\030.viam.app.data.v1.FilterR\006filter\"y\n"
  " DeleteBinaryDataByFilterResponse\022#\n\rdel"
  "eted_count\030\001 \001(\004R\014deletedCount\0220\n\006result"
  "\030\002 \001(\0132\030.viam.app.data.v1.ResultR\006result"
  "\"9\n\034DeleteBinaryDataByIDsRequest\022\031\n\010file"
  "_ids\030\001 \003(\tR\007fileIds\"v\n\035DeleteBinaryDataB"
  "yIDsResponse\022#\n\rdeleted_count\030\001 \001(\004R\014del"
  "etedCount\0220\n\006result\030\002 \001(\0132\030.viam.app.dat"
  "a.v1.ResultR\006result\"T\n#AddTagsToBinaryDa"
  "taByFileIDsRequest\022\031\n\010file_ids\030\001 \003(\tR\007fi"
  "leIds\022\022\n\004tags\030\002 \003(\tR\004tags\"&\n$AddTagsToBi"
  "naryDataByFileIDsResponse\"j\n\"AddTagsToBi"
  "naryDataByFilterRequest\0220\n\006filter\030\001 \001(\0132"
  "\030.viam.app.data.v1.FilterR\006filter\022\022\n\004tag"
  "s\030\002 \003(\tR\004tags\"%\n#AddTagsToBinaryDataByFi"
  "lterResponse\"Y\n(RemoveTagsFromBinaryData"
  "ByFileIDsRequest\022\031\n\010file_ids\030\001 \003(\tR\007file"
  "Ids\022\022\n\004tags\030\002 \003(\tR\004tags\"P\n)RemoveTagsFro"
  "mBinaryDataByFileIDsResponse\022#\n\rdeleted_"
  "count\030\001 \001(\004R\014deletedCount\"o\n\'RemoveTagsF"
  "romBinaryDataByFilterRequest\0220\n\006filter\030\001"
  " \001(\0132\030.viam.app.data.v1.FilterR\006filter\022\022"
  "\n\004tags\030\002 \003(\tR\004tags\"O\n(RemoveTagsFromBina"
  "ryDataByFilterResponse\022#\n\rdeleted_count\030"
  "\001 \001(\004R\014deletedCount*I\n\005Order\022\025\n\021ORDER_UN"
  "SPECIFIED\020\000\022\024\n\020ORDER_DESCENDING\020\001\022\023\n\017ORD"
  "ER_ASCENDING\020\002*P\n\006Status\022\026\n\022STATUS_UNSPE"
  "CIFIED\020\000\022\032\n\026STATUS_PARTIAL_SUCCESS\020\001\022\022\n\016"
  "STATUS_SUCCESS\020\0022\267\n\n\013DataService\022r\n\023Tabu"
  "larDataByFilter\022,.viam.app.data.v1.Tabul"
  "arDataByFilterRequest\032-.viam.app.data.v1"
  ".TabularDataByFilterResponse\022o\n\022BinaryDa"
  "taByFilter\022+.viam.app.data.v1.BinaryData"
  "ByFilterRequest\032,.viam.app.data.v1.Binar"
  "yDataByFilterResponse\022f\n\017BinaryDataByIDs"
  "\022(.viam.app.data.v1.BinaryDataByIDsReque"
  "st\032).viam.app.data.v1.BinaryDataByIDsRes"
  "ponse\022\204\001\n\031DeleteTabularDataByFilter\0222.vi"
  "am.app.data.v1.DeleteTabularDataByFilter"
  "Request\0323.viam.app.data.v1.DeleteTabular"
  "DataByFilterResponse\022\201\001\n\030DeleteBinaryDat"
  "aByFilter\0221.viam.app.data.v1.DeleteBinar"
  "yDataByFilterRequest\0322.viam.app.data.v1."
  "DeleteBinaryDataByFilterResponse\022x\n\025Dele"
  "teBinaryDataByIDs\022..viam.app.data.v1.Del"
  "eteBinaryDataByIDsRequest\032/.viam.app.dat"
  "a.v1.DeleteBinaryDataByIDsResponse\022\215\001\n\034A"
  "ddTagsToBinaryDataByFileIDs\0225.viam.app.d"
  "ata.v1.AddTagsToBinaryDataByFileIDsReque"
  "st\0326.viam.app.data.v1.AddTagsToBinaryDat"
  "aByFileIDsResponse\022\212\001\n\033AddTagsToBinaryDa"
  "taByFilter\0224.viam.app.data.v1.AddTagsToB"
  "inaryDataByFilterRequest\0325.viam.app.data"
  ".v1.AddTagsToBinaryDataByFilterResponse\022"
  "\234\001\n!RemoveTagsFromBinaryDataByFileIDs\022:."
  "viam.app.data.v1.RemoveTagsFromBinaryDat"
  "aByFileIDsRequest\032;.viam.app.data.v1.Rem"
  "oveTagsFromBinaryDataByFileIDsResponse\022\231"
  "\001\n RemoveTagsFromBinaryDataByFilter\0229.vi"
  "am.app.data.v1.RemoveTagsFromBinaryDataB"
  "yFilterRequest\032:.viam.app.data.v1.Remove"
  "TagsFromBinaryDataByFilterResponseB\035Z\033go"
  ".viam.com/api/app/data/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_app_2fdata_2fv1_2fdata_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fdata_2fv1_2fdata_2eproto = {
    false, false, 5753, descriptor_table_protodef_app_2fdata_2fv1_2fdata_2eproto,
    "app/data/v1/data.proto",
    &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once, descriptor_table_app_2fdata_2fv1_2fdata_2eproto_deps, 3, 29,
    schemas, file_default_instances, TableStruct_app_2fdata_2fv1_2fdata_2eproto::offsets,
    file_level_metadata_app_2fdata_2fv1_2fdata_2eproto, file_level_enum_descriptors_app_2fdata_2fv1_2fdata_2eproto,
    file_level_service_descriptors_app_2fdata_2fv1_2fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter() {
  return &descriptor_table_app_2fdata_2fv1_2fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fdata_2fv1_2fdata_2eproto(&descriptor_table_app_2fdata_2fv1_2fdata_2eproto);
namespace viam {
namespace app {
namespace data {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_app_2fdata_2fv1_2fdata_2eproto);
  return file_level_enum_descriptors_app_2fdata_2fv1_2fdata_2eproto[0];
}
bool Order_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_app_2fdata_2fv1_2fdata_2eproto);
  return file_level_enum_descriptors_app_2fdata_2fv1_2fdata_2eproto[1];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.Result)
}

inline void Result::SharedCtor() {
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 0;
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.Destroy();
}

void Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.data.v1.Status status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::viam::app::data::v1::Status>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2 [json_name = "message"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Result.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.data.v1.Status status = 1 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Result.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .viam.app.data.v1.Status status = 1 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }

void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Result *>(to)->MergeFrom(
      static_cast<const Result &>(from));
}


void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.Result)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[0]);
}

// ===================================================================

class DataRequest::_Internal {
 public:
  static const ::viam::app::data::v1::Filter& filter(const DataRequest* msg);
};

const ::viam::app::data::v1::Filter&
DataRequest::_Internal::filter(const DataRequest* msg) {
  return *msg->filter_;
}
DataRequest::DataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.DataRequest)
}
DataRequest::DataRequest(const DataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last().empty()) {
    last_.Set(from._internal_last(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_filter()) {
    filter_ = new ::viam::app::data::v1::Filter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  ::memcpy(&limit_, &from.limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&sort_order_) -
    reinterpret_cast<char*>(&limit_)) + sizeof(sort_order_));
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.DataRequest)
}

inline void DataRequest::SharedCtor() {
last_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&filter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sort_order_) -
    reinterpret_cast<char*>(&filter_)) + sizeof(sort_order_));
}

DataRequest::~DataRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.DataRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  last_.Destroy();
  if (this != internal_default_instance()) delete filter_;
}

void DataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.DataRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  ::memset(&limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sort_order_) -
      reinterpret_cast<char*>(&limit_)) + sizeof(sort_order_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 limit = 2 [json_name = "limit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string last = 3 [json_name = "last"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_last();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.DataRequest.last"));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.data.v1.Order sort_order = 4 [json_name = "sortOrder"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sort_order(static_cast<::viam::app::data::v1::Order>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.DataRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // uint64 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_limit(), target);
  }

  // string last = 3 [json_name = "last"];
  if (!this->_internal_last().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last().data(), static_cast<int>(this->_internal_last().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.DataRequest.last");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last(), target);
  }

  // .viam.app.data.v1.Order sort_order = 4 [json_name = "sortOrder"];
  if (this->_internal_sort_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_sort_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.DataRequest)
  return target;
}

size_t DataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.DataRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string last = 3 [json_name = "last"];
  if (!this->_internal_last().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last());
  }

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // uint64 limit = 2 [json_name = "limit"];
  if (this->_internal_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_limit());
  }

  // .viam.app.data.v1.Order sort_order = 4 [json_name = "sortOrder"];
  if (this->_internal_sort_order() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sort_order());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DataRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataRequest::GetClassData() const { return &_class_data_; }

void DataRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DataRequest *>(to)->MergeFrom(
      static_cast<const DataRequest &>(from));
}


void DataRequest::MergeFrom(const DataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.DataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_last().empty()) {
    _internal_set_last(from._internal_last());
  }
  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::viam::app::data::v1::Filter::MergeFrom(from._internal_filter());
  }
  if (from._internal_limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from._internal_sort_order() != 0) {
    _internal_set_sort_order(from._internal_sort_order());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataRequest::CopyFrom(const DataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.DataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRequest::IsInitialized() const {
  return true;
}

void DataRequest::InternalSwap(DataRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_, lhs_arena,
      &other->last_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataRequest, sort_order_)
      + sizeof(DataRequest::sort_order_)
      - PROTOBUF_FIELD_OFFSET(DataRequest, filter_)>(
          reinterpret_cast<char*>(&filter_),
          reinterpret_cast<char*>(&other->filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DataRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[1]);
}

// ===================================================================

class Filter::_Internal {
 public:
  static const ::viam::app::data::v1::CaptureInterval& interval(const Filter* msg);
};

const ::viam::app::data::v1::CaptureInterval&
Filter::_Internal::interval(const Filter* msg) {
  return *msg->interval_;
}
Filter::Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena),
  location_ids_(arena),
  org_ids_(arena),
  mime_type_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.Filter)
}
Filter::Filter(const Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_),
      location_ids_(from.location_ids_),
      org_ids_(from.org_ids_),
      mime_type_(from.mime_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_name().empty()) {
    component_name_.Set(from._internal_component_name(), 
      GetArenaForAllocation());
  }
  component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_type().empty()) {
    component_type_.Set(from._internal_component_type(), 
      GetArenaForAllocation());
  }
  component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_model().empty()) {
    component_model_.Set(from._internal_component_model(), 
      GetArenaForAllocation());
  }
  method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    method_.Set(from._internal_method(), 
      GetArenaForAllocation());
  }
  robot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    robot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_name().empty()) {
    robot_name_.Set(from._internal_robot_name(), 
      GetArenaForAllocation());
  }
  robot_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    robot_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(from._internal_robot_id(), 
      GetArenaForAllocation());
  }
  part_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    part_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part_name().empty()) {
    part_name_.Set(from._internal_part_name(), 
      GetArenaForAllocation());
  }
  part_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    part_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part_id().empty()) {
    part_id_.Set(from._internal_part_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_interval()) {
    interval_ = new ::viam::app::data::v1::CaptureInterval(*from.interval_);
  } else {
    interval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.Filter)
}

inline void Filter::SharedCtor() {
component_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  component_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
component_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  component_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
component_model_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  component_model_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
method_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
robot_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  robot_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
robot_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  robot_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
part_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  part_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
part_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  part_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
interval_ = nullptr;
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.Filter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  component_name_.Destroy();
  component_type_.Destroy();
  component_model_.Destroy();
  method_.Destroy();
  robot_name_.Destroy();
  robot_id_.Destroy();
  part_name_.Destroy();
  part_id_.Destroy();
  if (this != internal_default_instance()) delete interval_;
}

void Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.Filter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  location_ids_.Clear();
  org_ids_.Clear();
  mime_type_.Clear();
  component_name_.ClearToEmpty();
  component_type_.ClearToEmpty();
  component_model_.ClearToEmpty();
  method_.ClearToEmpty();
  robot_name_.ClearToEmpty();
  robot_id_.ClearToEmpty();
  part_name_.ClearToEmpty();
  part_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Filter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string component_name = 1 [json_name = "componentName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_component_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.component_name"));
        } else
          goto handle_unusual;
        continue;
      // string component_type = 2 [json_name = "componentType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_component_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.component_type"));
        } else
          goto handle_unusual;
        continue;
      // string component_model = 3 [json_name = "componentModel"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_component_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.component_model"));
        } else
          goto handle_unusual;
        continue;
      // string method = 4 [json_name = "method"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.method"));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 5 [json_name = "tags"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string robot_name = 6 [json_name = "robotName"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_robot_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.robot_name"));
        } else
          goto handle_unusual;
        continue;
      // string robot_id = 7 [json_name = "robotId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.robot_id"));
        } else
          goto handle_unusual;
        continue;
      // string part_name = 8 [json_name = "partName"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_part_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.part_name"));
        } else
          goto handle_unusual;
        continue;
      // string part_id = 9 [json_name = "partId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_part_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.part_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated string location_ids = 10 [json_name = "locationIds"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_location_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.location_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string org_ids = 11 [json_name = "orgIds"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_org_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.org_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string mime_type = 12 [json_name = "mimeType"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_mime_type();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.Filter.mime_type"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.data.v1.CaptureInterval interval = 13 [json_name = "interval"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Filter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.Filter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string component_name = 1 [json_name = "componentName"];
  if (!this->_internal_component_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.component_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_component_name(), target);
  }

  // string component_type = 2 [json_name = "componentType"];
  if (!this->_internal_component_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_type().data(), static_cast<int>(this->_internal_component_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.component_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_component_type(), target);
  }

  // string component_model = 3 [json_name = "componentModel"];
  if (!this->_internal_component_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_model().data(), static_cast<int>(this->_internal_component_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.component_model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_component_model(), target);
  }

  // string method = 4 [json_name = "method"];
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.method");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_method(), target);
  }

  // repeated string tags = 5 [json_name = "tags"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.tags");
    target = stream->WriteString(5, s, target);
  }

  // string robot_name = 6 [json_name = "robotName"];
  if (!this->_internal_robot_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_name().data(), static_cast<int>(this->_internal_robot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.robot_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_robot_name(), target);
  }

  // string robot_id = 7 [json_name = "robotId"];
  if (!this->_internal_robot_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.robot_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_robot_id(), target);
  }

  // string part_name = 8 [json_name = "partName"];
  if (!this->_internal_part_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_part_name().data(), static_cast<int>(this->_internal_part_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.part_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_part_name(), target);
  }

  // string part_id = 9 [json_name = "partId"];
  if (!this->_internal_part_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_part_id().data(), static_cast<int>(this->_internal_part_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.part_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_part_id(), target);
  }

  // repeated string location_ids = 10 [json_name = "locationIds"];
  for (int i = 0, n = this->_internal_location_ids_size(); i < n; i++) {
    const auto& s = this->_internal_location_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.location_ids");
    target = stream->WriteString(10, s, target);
  }

  // repeated string org_ids = 11 [json_name = "orgIds"];
  for (int i = 0, n = this->_internal_org_ids_size(); i < n; i++) {
    const auto& s = this->_internal_org_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.org_ids");
    target = stream->WriteString(11, s, target);
  }

  // repeated string mime_type = 12 [json_name = "mimeType"];
  for (int i = 0, n = this->_internal_mime_type_size(); i < n; i++) {
    const auto& s = this->_internal_mime_type(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.Filter.mime_type");
    target = stream->WriteString(12, s, target);
  }

  // .viam.app.data.v1.CaptureInterval interval = 13 [json_name = "interval"];
  if (this->_internal_has_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::interval(this),
        _Internal::interval(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.Filter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 5 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // repeated string location_ids = 10 [json_name = "locationIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(location_ids_.size());
  for (int i = 0, n = location_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      location_ids_.Get(i));
  }

  // repeated string org_ids = 11 [json_name = "orgIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(org_ids_.size());
  for (int i = 0, n = org_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      org_ids_.Get(i));
  }

  // repeated string mime_type = 12 [json_name = "mimeType"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(mime_type_.size());
  for (int i = 0, n = mime_type_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      mime_type_.Get(i));
  }

  // string component_name = 1 [json_name = "componentName"];
  if (!this->_internal_component_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_name());
  }

  // string component_type = 2 [json_name = "componentType"];
  if (!this->_internal_component_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_type());
  }

  // string component_model = 3 [json_name = "componentModel"];
  if (!this->_internal_component_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_model());
  }

  // string method = 4 [json_name = "method"];
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string robot_name = 6 [json_name = "robotName"];
  if (!this->_internal_robot_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_name());
  }

  // string robot_id = 7 [json_name = "robotId"];
  if (!this->_internal_robot_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string part_name = 8 [json_name = "partName"];
  if (!this->_internal_part_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_part_name());
  }

  // string part_id = 9 [json_name = "partId"];
  if (!this->_internal_part_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_part_id());
  }

  // .viam.app.data.v1.CaptureInterval interval = 13 [json_name = "interval"];
  if (this->_internal_has_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interval_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Filter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Filter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Filter::GetClassData() const { return &_class_data_; }

void Filter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Filter *>(to)->MergeFrom(
      static_cast<const Filter &>(from));
}


void Filter::MergeFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  location_ids_.MergeFrom(from.location_ids_);
  org_ids_.MergeFrom(from.org_ids_);
  mime_type_.MergeFrom(from.mime_type_);
  if (!from._internal_component_name().empty()) {
    _internal_set_component_name(from._internal_component_name());
  }
  if (!from._internal_component_type().empty()) {
    _internal_set_component_type(from._internal_component_type());
  }
  if (!from._internal_component_model().empty()) {
    _internal_set_component_model(from._internal_component_model());
  }
  if (!from._internal_method().empty()) {
    _internal_set_method(from._internal_method());
  }
  if (!from._internal_robot_name().empty()) {
    _internal_set_robot_name(from._internal_robot_name());
  }
  if (!from._internal_robot_id().empty()) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (!from._internal_part_name().empty()) {
    _internal_set_part_name(from._internal_part_name());
  }
  if (!from._internal_part_id().empty()) {
    _internal_set_part_id(from._internal_part_id());
  }
  if (from._internal_has_interval()) {
    _internal_mutable_interval()->::viam::app::data::v1::CaptureInterval::MergeFrom(from._internal_interval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::InternalSwap(Filter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  location_ids_.InternalSwap(&other->location_ids_);
  org_ids_.InternalSwap(&other->org_ids_);
  mime_type_.InternalSwap(&other->mime_type_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &component_name_, lhs_arena,
      &other->component_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &component_type_, lhs_arena,
      &other->component_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &component_model_, lhs_arena,
      &other->component_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &method_, lhs_arena,
      &other->method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &robot_name_, lhs_arena,
      &other->robot_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &robot_id_, lhs_arena,
      &other->robot_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &part_name_, lhs_arena,
      &other->part_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &part_id_, lhs_arena,
      &other->part_id_, rhs_arena
  );
  swap(interval_, other->interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[2]);
}

// ===================================================================

CaptureMetadata_MethodParametersEntry_DoNotUse::CaptureMetadata_MethodParametersEntry_DoNotUse() {}
CaptureMetadata_MethodParametersEntry_DoNotUse::CaptureMetadata_MethodParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CaptureMetadata_MethodParametersEntry_DoNotUse::MergeFrom(const CaptureMetadata_MethodParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CaptureMetadata_MethodParametersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[3]);
}

// ===================================================================

class CaptureMetadata::_Internal {
 public:
};

void CaptureMetadata::clear_method_parameters() {
  method_parameters_.Clear();
}
CaptureMetadata::CaptureMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  method_parameters_(arena),
  tags_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CaptureMetadata::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.CaptureMetadata)
}
CaptureMetadata::CaptureMetadata(const CaptureMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  method_parameters_.MergeFrom(from.method_parameters_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  location_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location_id().empty()) {
    location_id_.Set(from._internal_location_id(), 
      GetArenaForAllocation());
  }
  robot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    robot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_name().empty()) {
    robot_name_.Set(from._internal_robot_name(), 
      GetArenaForAllocation());
  }
  robot_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    robot_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(from._internal_robot_id(), 
      GetArenaForAllocation());
  }
  part_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    part_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part_name().empty()) {
    part_name_.Set(from._internal_part_name(), 
      GetArenaForAllocation());
  }
  part_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    part_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_part_id().empty()) {
    part_id_.Set(from._internal_part_id(), 
      GetArenaForAllocation());
  }
  component_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    component_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_type().empty()) {
    component_type_.Set(from._internal_component_type(), 
      GetArenaForAllocation());
  }
  component_model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    component_model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_model().empty()) {
    component_model_.Set(from._internal_component_model(), 
      GetArenaForAllocation());
  }
  component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_name().empty()) {
    component_name_.Set(from._internal_component_name(), 
      GetArenaForAllocation());
  }
  method_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method_name().empty()) {
    method_name_.Set(from._internal_method_name(), 
      GetArenaForAllocation());
  }
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.CaptureMetadata)
}

inline void CaptureMetadata::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
location_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
robot_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  robot_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
robot_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  robot_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
part_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  part_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
part_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  part_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
component_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  component_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
component_model_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  component_model_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
component_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  component_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
method_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CaptureMetadata::~CaptureMetadata() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.CaptureMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CaptureMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  method_parameters_.Destruct();
  org_id_.Destroy();
  location_id_.Destroy();
  robot_name_.Destroy();
  robot_id_.Destroy();
  part_name_.Destroy();
  part_id_.Destroy();
  component_type_.Destroy();
  component_model_.Destroy();
  component_name_.Destroy();
  method_name_.Destroy();
  mime_type_.Destroy();
}

void CaptureMetadata::ArenaDtor(void* object) {
  CaptureMetadata* _this = reinterpret_cast< CaptureMetadata* >(object);
  _this->method_parameters_.Destruct();
}
void CaptureMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CaptureMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.CaptureMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_parameters_.Clear();
  tags_.Clear();
  org_id_.ClearToEmpty();
  location_id_.ClearToEmpty();
  robot_name_.ClearToEmpty();
  robot_id_.ClearToEmpty();
  part_name_.ClearToEmpty();
  part_id_.ClearToEmpty();
  component_type_.ClearToEmpty();
  component_model_.ClearToEmpty();
  component_name_.ClearToEmpty();
  method_name_.ClearToEmpty();
  mime_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CaptureMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.org_id"));
        } else
          goto handle_unusual;
        continue;
      // string location_id = 2 [json_name = "locationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_location_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.location_id"));
        } else
          goto handle_unusual;
        continue;
      // string robot_name = 3 [json_name = "robotName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_robot_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.robot_name"));
        } else
          goto handle_unusual;
        continue;
      // string robot_id = 4 [json_name = "robotId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.robot_id"));
        } else
          goto handle_unusual;
        continue;
      // string part_name = 5 [json_name = "partName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_part_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.part_name"));
        } else
          goto handle_unusual;
        continue;
      // string part_id = 6 [json_name = "partId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_part_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.part_id"));
        } else
          goto handle_unusual;
        continue;
      // string component_type = 7 [json_name = "componentType"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_component_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.component_type"));
        } else
          goto handle_unusual;
        continue;
      // string component_model = 8 [json_name = "componentModel"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_component_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.component_model"));
        } else
          goto handle_unusual;
        continue;
      // string component_name = 9 [json_name = "componentName"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_component_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.component_name"));
        } else
          goto handle_unusual;
        continue;
      // string method_name = 10 [json_name = "methodName"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_method_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.method_name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&method_parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 12 [json_name = "tags"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 13 [json_name = "mimeType"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.CaptureMetadata.mime_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CaptureMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.CaptureMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  // string location_id = 2 [json_name = "locationId"];
  if (!this->_internal_location_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location_id().data(), static_cast<int>(this->_internal_location_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.location_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_location_id(), target);
  }

  // string robot_name = 3 [json_name = "robotName"];
  if (!this->_internal_robot_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_name().data(), static_cast<int>(this->_internal_robot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.robot_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_robot_name(), target);
  }

  // string robot_id = 4 [json_name = "robotId"];
  if (!this->_internal_robot_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.robot_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_robot_id(), target);
  }

  // string part_name = 5 [json_name = "partName"];
  if (!this->_internal_part_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_part_name().data(), static_cast<int>(this->_internal_part_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.part_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_part_name(), target);
  }

  // string part_id = 6 [json_name = "partId"];
  if (!this->_internal_part_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_part_id().data(), static_cast<int>(this->_internal_part_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.part_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_part_id(), target);
  }

  // string component_type = 7 [json_name = "componentType"];
  if (!this->_internal_component_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_type().data(), static_cast<int>(this->_internal_component_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.component_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_component_type(), target);
  }

  // string component_model = 8 [json_name = "componentModel"];
  if (!this->_internal_component_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_model().data(), static_cast<int>(this->_internal_component_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.component_model");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_component_model(), target);
  }

  // string component_name = 9 [json_name = "componentName"];
  if (!this->_internal_component_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.component_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_component_name(), target);
  }

  // string method_name = 10 [json_name = "methodName"];
  if (!this->_internal_method_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.method_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_method_name(), target);
  }

  // map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters"];
  if (!this->_internal_method_parameters().empty()) {
    using MapType = ::_pb::Map<std::string, ::PROTOBUF_NAMESPACE_ID::Any>;
    using WireHelper = CaptureMetadata_MethodParametersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_method_parameters();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "viam.app.data.v1.CaptureMetadata.MethodParametersEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated string tags = 12 [json_name = "tags"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.tags");
    target = stream->WriteString(12, s, target);
  }

  // string mime_type = 13 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.CaptureMetadata.mime_type");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_mime_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.CaptureMetadata)
  return target;
}

size_t CaptureMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.CaptureMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_method_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >::const_iterator
      it = this->_internal_method_parameters().begin();
      it != this->_internal_method_parameters().end(); ++it) {
    total_size += CaptureMetadata_MethodParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string tags = 12 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  // string location_id = 2 [json_name = "locationId"];
  if (!this->_internal_location_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location_id());
  }

  // string robot_name = 3 [json_name = "robotName"];
  if (!this->_internal_robot_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_name());
  }

  // string robot_id = 4 [json_name = "robotId"];
  if (!this->_internal_robot_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string part_name = 5 [json_name = "partName"];
  if (!this->_internal_part_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_part_name());
  }

  // string part_id = 6 [json_name = "partId"];
  if (!this->_internal_part_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_part_id());
  }

  // string component_type = 7 [json_name = "componentType"];
  if (!this->_internal_component_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_type());
  }

  // string component_model = 8 [json_name = "componentModel"];
  if (!this->_internal_component_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_model());
  }

  // string component_name = 9 [json_name = "componentName"];
  if (!this->_internal_component_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_name());
  }

  // string method_name = 10 [json_name = "methodName"];
  if (!this->_internal_method_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  // string mime_type = 13 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CaptureMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CaptureMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CaptureMetadata::GetClassData() const { return &_class_data_; }

void CaptureMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CaptureMetadata *>(to)->MergeFrom(
      static_cast<const CaptureMetadata &>(from));
}


void CaptureMetadata::MergeFrom(const CaptureMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.CaptureMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  method_parameters_.MergeFrom(from.method_parameters_);
  tags_.MergeFrom(from.tags_);
  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  if (!from._internal_location_id().empty()) {
    _internal_set_location_id(from._internal_location_id());
  }
  if (!from._internal_robot_name().empty()) {
    _internal_set_robot_name(from._internal_robot_name());
  }
  if (!from._internal_robot_id().empty()) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (!from._internal_part_name().empty()) {
    _internal_set_part_name(from._internal_part_name());
  }
  if (!from._internal_part_id().empty()) {
    _internal_set_part_id(from._internal_part_id());
  }
  if (!from._internal_component_type().empty()) {
    _internal_set_component_type(from._internal_component_type());
  }
  if (!from._internal_component_model().empty()) {
    _internal_set_component_model(from._internal_component_model());
  }
  if (!from._internal_component_name().empty()) {
    _internal_set_component_name(from._internal_component_name());
  }
  if (!from._internal_method_name().empty()) {
    _internal_set_method_name(from._internal_method_name());
  }
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CaptureMetadata::CopyFrom(const CaptureMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.CaptureMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureMetadata::IsInitialized() const {
  return true;
}

void CaptureMetadata::InternalSwap(CaptureMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  method_parameters_.InternalSwap(&other->method_parameters_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &location_id_, lhs_arena,
      &other->location_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &robot_name_, lhs_arena,
      &other->robot_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &robot_id_, lhs_arena,
      &other->robot_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &part_name_, lhs_arena,
      &other->part_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &part_id_, lhs_arena,
      &other->part_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &component_type_, lhs_arena,
      &other->component_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &component_model_, lhs_arena,
      &other->component_model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &component_name_, lhs_arena,
      &other->component_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &method_name_, lhs_arena,
      &other->method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CaptureMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[4]);
}

// ===================================================================

class CaptureInterval::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start(const CaptureInterval* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end(const CaptureInterval* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CaptureInterval::_Internal::start(const CaptureInterval* msg) {
  return *msg->start_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CaptureInterval::_Internal::end(const CaptureInterval* msg) {
  return *msg->end_;
}
void CaptureInterval::clear_start() {
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void CaptureInterval::clear_end() {
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
CaptureInterval::CaptureInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.CaptureInterval)
}
CaptureInterval::CaptureInterval(const CaptureInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.CaptureInterval)
}

inline void CaptureInterval::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

CaptureInterval::~CaptureInterval() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.CaptureInterval)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CaptureInterval::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void CaptureInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CaptureInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.CaptureInterval)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CaptureInterval::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start = 1 [json_name = "start"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 2 [json_name = "end"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CaptureInterval::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.CaptureInterval)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1 [json_name = "start"];
  if (this->_internal_has_start()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp end = 2 [json_name = "end"];
  if (this->_internal_has_end()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.CaptureInterval)
  return target;
}

size_t CaptureInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.CaptureInterval)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1 [json_name = "start"];
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .google.protobuf.Timestamp end = 2 [json_name = "end"];
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CaptureInterval::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CaptureInterval::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CaptureInterval::GetClassData() const { return &_class_data_; }

void CaptureInterval::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CaptureInterval *>(to)->MergeFrom(
      static_cast<const CaptureInterval &>(from));
}


void CaptureInterval::MergeFrom(const CaptureInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.CaptureInterval)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _internal_mutable_start()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CaptureInterval::CopyFrom(const CaptureInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.CaptureInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureInterval::IsInitialized() const {
  return true;
}

void CaptureInterval::InternalSwap(CaptureInterval* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaptureInterval, end_)
      + sizeof(CaptureInterval::end_)
      - PROTOBUF_FIELD_OFFSET(CaptureInterval, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CaptureInterval::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[5]);
}

// ===================================================================

class TabularDataByFilterRequest::_Internal {
 public:
  static const ::viam::app::data::v1::DataRequest& data_request(const TabularDataByFilterRequest* msg);
};

const ::viam::app::data::v1::DataRequest&
TabularDataByFilterRequest::_Internal::data_request(const TabularDataByFilterRequest* msg) {
  return *msg->data_request_;
}
TabularDataByFilterRequest::TabularDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.TabularDataByFilterRequest)
}
TabularDataByFilterRequest::TabularDataByFilterRequest(const TabularDataByFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_request()) {
    data_request_ = new ::viam::app::data::v1::DataRequest(*from.data_request_);
  } else {
    data_request_ = nullptr;
  }
  count_only_ = from.count_only_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.TabularDataByFilterRequest)
}

inline void TabularDataByFilterRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_only_) -
    reinterpret_cast<char*>(&data_request_)) + sizeof(count_only_));
}

TabularDataByFilterRequest::~TabularDataByFilterRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.TabularDataByFilterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TabularDataByFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_request_;
}

void TabularDataByFilterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TabularDataByFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.TabularDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_request_ != nullptr) {
    delete data_request_;
  }
  data_request_ = nullptr;
  count_only_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TabularDataByFilterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool count_only = 2 [json_name = "countOnly"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          count_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TabularDataByFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.TabularDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
  if (this->_internal_has_data_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data_request(this),
        _Internal::data_request(this).GetCachedSize(), target, stream);
  }

  // bool count_only = 2 [json_name = "countOnly"];
  if (this->_internal_count_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_count_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.TabularDataByFilterRequest)
  return target;
}

size_t TabularDataByFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.TabularDataByFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
  if (this->_internal_has_data_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_request_);
  }

  // bool count_only = 2 [json_name = "countOnly"];
  if (this->_internal_count_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TabularDataByFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TabularDataByFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TabularDataByFilterRequest::GetClassData() const { return &_class_data_; }

void TabularDataByFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TabularDataByFilterRequest *>(to)->MergeFrom(
      static_cast<const TabularDataByFilterRequest &>(from));
}


void TabularDataByFilterRequest::MergeFrom(const TabularDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.TabularDataByFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_request()) {
    _internal_mutable_data_request()->::viam::app::data::v1::DataRequest::MergeFrom(from._internal_data_request());
  }
  if (from._internal_count_only() != 0) {
    _internal_set_count_only(from._internal_count_only());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TabularDataByFilterRequest::CopyFrom(const TabularDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.TabularDataByFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabularDataByFilterRequest::IsInitialized() const {
  return true;
}

void TabularDataByFilterRequest::InternalSwap(TabularDataByFilterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TabularDataByFilterRequest, count_only_)
      + sizeof(TabularDataByFilterRequest::count_only_)
      - PROTOBUF_FIELD_OFFSET(TabularDataByFilterRequest, data_request_)>(
          reinterpret_cast<char*>(&data_request_),
          reinterpret_cast<char*>(&other->data_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TabularDataByFilterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[6]);
}

// ===================================================================

class TabularDataByFilterResponse::_Internal {
 public:
};

TabularDataByFilterResponse::TabularDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  metadata_(arena),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.TabularDataByFilterResponse)
}
TabularDataByFilterResponse::TabularDataByFilterResponse(const TabularDataByFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      metadata_(from.metadata_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last().empty()) {
    last_.Set(from._internal_last(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.TabularDataByFilterResponse)
}

inline void TabularDataByFilterResponse::SharedCtor() {
last_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
count_ = int64_t{0};
}

TabularDataByFilterResponse::~TabularDataByFilterResponse() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.TabularDataByFilterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TabularDataByFilterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  last_.Destroy();
}

void TabularDataByFilterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TabularDataByFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.TabularDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metadata_.Clear();
  data_.Clear();
  last_.ClearToEmpty();
  count_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TabularDataByFilterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.data.v1.TabularData data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 count = 3 [json_name = "count"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string last = 4 [json_name = "last"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_last();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.TabularDataByFilterResponse.last"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TabularDataByFilterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.TabularDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.app.data.v1.TabularData data = 2 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 count = 3 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_count(), target);
  }

  // string last = 4 [json_name = "last"];
  if (!this->_internal_last().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last().data(), static_cast<int>(this->_internal_last().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.TabularDataByFilterResponse.last");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_last(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.TabularDataByFilterResponse)
  return target;
}

size_t TabularDataByFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.TabularDataByFilterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
  total_size += 1UL * this->_internal_metadata_size();
  for (const auto& msg : this->metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.app.data.v1.TabularData data = 2 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string last = 4 [json_name = "last"];
  if (!this->_internal_last().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last());
  }

  // int64 count = 3 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TabularDataByFilterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TabularDataByFilterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TabularDataByFilterResponse::GetClassData() const { return &_class_data_; }

void TabularDataByFilterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TabularDataByFilterResponse *>(to)->MergeFrom(
      static_cast<const TabularDataByFilterResponse &>(from));
}


void TabularDataByFilterResponse::MergeFrom(const TabularDataByFilterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.TabularDataByFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  metadata_.MergeFrom(from.metadata_);
  data_.MergeFrom(from.data_);
  if (!from._internal_last().empty()) {
    _internal_set_last(from._internal_last());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TabularDataByFilterResponse::CopyFrom(const TabularDataByFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.TabularDataByFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabularDataByFilterResponse::IsInitialized() const {
  return true;
}

void TabularDataByFilterResponse::InternalSwap(TabularDataByFilterResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  metadata_.InternalSwap(&other->metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_, lhs_arena,
      &other->last_, rhs_arena
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TabularDataByFilterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[7]);
}

// ===================================================================

class TabularData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& data(const TabularData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_requested(const TabularData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_received(const TabularData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
TabularData::_Internal::data(const TabularData* msg) {
  return *msg->data_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TabularData::_Internal::time_requested(const TabularData* msg) {
  return *msg->time_requested_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TabularData::_Internal::time_received(const TabularData* msg) {
  return *msg->time_received_;
}
void TabularData::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
void TabularData::clear_time_requested() {
  if (GetArenaForAllocation() == nullptr && time_requested_ != nullptr) {
    delete time_requested_;
  }
  time_requested_ = nullptr;
}
void TabularData::clear_time_received() {
  if (GetArenaForAllocation() == nullptr && time_received_ != nullptr) {
    delete time_received_;
  }
  time_received_ = nullptr;
}
TabularData::TabularData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.TabularData)
}
TabularData::TabularData(const TabularData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.data_);
  } else {
    data_ = nullptr;
  }
  if (from._internal_has_time_requested()) {
    time_requested_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_requested_);
  } else {
    time_requested_ = nullptr;
  }
  if (from._internal_has_time_received()) {
    time_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_received_);
  } else {
    time_received_ = nullptr;
  }
  metadata_index_ = from.metadata_index_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.TabularData)
}

inline void TabularData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metadata_index_) -
    reinterpret_cast<char*>(&data_)) + sizeof(metadata_index_));
}

TabularData::~TabularData() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.TabularData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TabularData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
  if (this != internal_default_instance()) delete time_requested_;
  if (this != internal_default_instance()) delete time_received_;
}

void TabularData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TabularData::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.TabularData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_requested_ != nullptr) {
    delete time_requested_;
  }
  time_requested_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_received_ != nullptr) {
    delete time_received_;
  }
  time_received_ = nullptr;
  metadata_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TabularData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 metadata_index = 2 [json_name = "metadataIndex"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          metadata_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_requested(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TabularData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.TabularData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct data = 1 [json_name = "data"];
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  // int32 metadata_index = 2 [json_name = "metadataIndex"];
  if (this->_internal_metadata_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_metadata_index(), target);
  }

  // .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
  if (this->_internal_has_time_requested()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time_requested(this),
        _Internal::time_requested(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
  if (this->_internal_has_time_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time_received(this),
        _Internal::time_received(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.TabularData)
  return target;
}

size_t TabularData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.TabularData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct data = 1 [json_name = "data"];
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
  if (this->_internal_has_time_requested()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_requested_);
  }

  // .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
  if (this->_internal_has_time_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_received_);
  }

  // int32 metadata_index = 2 [json_name = "metadataIndex"];
  if (this->_internal_metadata_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_metadata_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TabularData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TabularData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TabularData::GetClassData() const { return &_class_data_; }

void TabularData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TabularData *>(to)->MergeFrom(
      static_cast<const TabularData &>(from));
}


void TabularData::MergeFrom(const TabularData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.TabularData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data()) {
    _internal_mutable_data()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_data());
  }
  if (from._internal_has_time_requested()) {
    _internal_mutable_time_requested()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time_requested());
  }
  if (from._internal_has_time_received()) {
    _internal_mutable_time_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time_received());
  }
  if (from._internal_metadata_index() != 0) {
    _internal_set_metadata_index(from._internal_metadata_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TabularData::CopyFrom(const TabularData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.TabularData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TabularData::IsInitialized() const {
  return true;
}

void TabularData::InternalSwap(TabularData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TabularData, metadata_index_)
      + sizeof(TabularData::metadata_index_)
      - PROTOBUF_FIELD_OFFSET(TabularData, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TabularData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[8]);
}

// ===================================================================

class BinaryData::_Internal {
 public:
  static const ::viam::app::data::v1::BinaryMetadata& metadata(const BinaryData* msg);
};

const ::viam::app::data::v1::BinaryMetadata&
BinaryData::_Internal::metadata(const BinaryData* msg) {
  return *msg->metadata_;
}
BinaryData::BinaryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.BinaryData)
}
BinaryData::BinaryData(const BinaryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  binary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    binary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_binary().empty()) {
    binary_.Set(from._internal_binary(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::viam::app::data::v1::BinaryMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.BinaryData)
}

inline void BinaryData::SharedCtor() {
binary_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  binary_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_ = nullptr;
}

BinaryData::~BinaryData() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.BinaryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  binary_.Destroy();
  if (this != internal_default_instance()) delete metadata_;
}

void BinaryData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryData::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.BinaryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  binary_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes binary = 1 [json_name = "binary"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_binary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.data.v1.BinaryMetadata metadata = 2 [json_name = "metadata"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.BinaryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes binary = 1 [json_name = "binary"];
  if (!this->_internal_binary().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_binary(), target);
  }

  // .viam.app.data.v1.BinaryMetadata metadata = 2 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.BinaryData)
  return target;
}

size_t BinaryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.BinaryData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes binary = 1 [json_name = "binary"];
  if (!this->_internal_binary().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_binary());
  }

  // .viam.app.data.v1.BinaryMetadata metadata = 2 [json_name = "metadata"];
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BinaryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryData::GetClassData() const { return &_class_data_; }

void BinaryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BinaryData *>(to)->MergeFrom(
      static_cast<const BinaryData &>(from));
}


void BinaryData::MergeFrom(const BinaryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.BinaryData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_binary().empty()) {
    _internal_set_binary(from._internal_binary());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::viam::app::data::v1::BinaryMetadata::MergeFrom(from._internal_metadata());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryData::CopyFrom(const BinaryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.BinaryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryData::IsInitialized() const {
  return true;
}

void BinaryData::InternalSwap(BinaryData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &binary_, lhs_arena,
      &other->binary_, rhs_arena
  );
  swap(metadata_, other->metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[9]);
}

// ===================================================================

class BinaryDataByFilterRequest::_Internal {
 public:
  static const ::viam::app::data::v1::DataRequest& data_request(const BinaryDataByFilterRequest* msg);
};

const ::viam::app::data::v1::DataRequest&
BinaryDataByFilterRequest::_Internal::data_request(const BinaryDataByFilterRequest* msg) {
  return *msg->data_request_;
}
BinaryDataByFilterRequest::BinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.BinaryDataByFilterRequest)
}
BinaryDataByFilterRequest::BinaryDataByFilterRequest(const BinaryDataByFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_request()) {
    data_request_ = new ::viam::app::data::v1::DataRequest(*from.data_request_);
  } else {
    data_request_ = nullptr;
  }
  ::memcpy(&include_binary_, &from.include_binary_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_only_) -
    reinterpret_cast<char*>(&include_binary_)) + sizeof(count_only_));
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.BinaryDataByFilterRequest)
}

inline void BinaryDataByFilterRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_only_) -
    reinterpret_cast<char*>(&data_request_)) + sizeof(count_only_));
}

BinaryDataByFilterRequest::~BinaryDataByFilterRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.BinaryDataByFilterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryDataByFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_request_;
}

void BinaryDataByFilterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryDataByFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.BinaryDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_request_ != nullptr) {
    delete data_request_;
  }
  data_request_ = nullptr;
  ::memset(&include_binary_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_only_) -
      reinterpret_cast<char*>(&include_binary_)) + sizeof(count_only_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryDataByFilterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool include_binary = 2 [json_name = "includeBinary"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          include_binary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool count_only = 3 [json_name = "countOnly"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          count_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryDataByFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.BinaryDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
  if (this->_internal_has_data_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::data_request(this),
        _Internal::data_request(this).GetCachedSize(), target, stream);
  }

  // bool include_binary = 2 [json_name = "includeBinary"];
  if (this->_internal_include_binary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_include_binary(), target);
  }

  // bool count_only = 3 [json_name = "countOnly"];
  if (this->_internal_count_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_count_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.BinaryDataByFilterRequest)
  return target;
}

size_t BinaryDataByFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.BinaryDataByFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
  if (this->_internal_has_data_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_request_);
  }

  // bool include_binary = 2 [json_name = "includeBinary"];
  if (this->_internal_include_binary() != 0) {
    total_size += 1 + 1;
  }

  // bool count_only = 3 [json_name = "countOnly"];
  if (this->_internal_count_only() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryDataByFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BinaryDataByFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryDataByFilterRequest::GetClassData() const { return &_class_data_; }

void BinaryDataByFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BinaryDataByFilterRequest *>(to)->MergeFrom(
      static_cast<const BinaryDataByFilterRequest &>(from));
}


void BinaryDataByFilterRequest::MergeFrom(const BinaryDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.BinaryDataByFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_data_request()) {
    _internal_mutable_data_request()->::viam::app::data::v1::DataRequest::MergeFrom(from._internal_data_request());
  }
  if (from._internal_include_binary() != 0) {
    _internal_set_include_binary(from._internal_include_binary());
  }
  if (from._internal_count_only() != 0) {
    _internal_set_count_only(from._internal_count_only());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryDataByFilterRequest::CopyFrom(const BinaryDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.BinaryDataByFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryDataByFilterRequest::IsInitialized() const {
  return true;
}

void BinaryDataByFilterRequest::InternalSwap(BinaryDataByFilterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryDataByFilterRequest, count_only_)
      + sizeof(BinaryDataByFilterRequest::count_only_)
      - PROTOBUF_FIELD_OFFSET(BinaryDataByFilterRequest, data_request_)>(
          reinterpret_cast<char*>(&data_request_),
          reinterpret_cast<char*>(&other->data_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryDataByFilterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[10]);
}

// ===================================================================

class BinaryDataByFilterResponse::_Internal {
 public:
};

BinaryDataByFilterResponse::BinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.BinaryDataByFilterResponse)
}
BinaryDataByFilterResponse::BinaryDataByFilterResponse(const BinaryDataByFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last().empty()) {
    last_.Set(from._internal_last(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.BinaryDataByFilterResponse)
}

inline void BinaryDataByFilterResponse::SharedCtor() {
last_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
count_ = uint64_t{0u};
}

BinaryDataByFilterResponse::~BinaryDataByFilterResponse() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.BinaryDataByFilterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryDataByFilterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  last_.Destroy();
}

void BinaryDataByFilterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryDataByFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.BinaryDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  last_.ClearToEmpty();
  count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryDataByFilterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.app.data.v1.BinaryData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 2 [json_name = "count"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string last = 3 [json_name = "last"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_last();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.BinaryDataByFilterResponse.last"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryDataByFilterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.BinaryDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.app.data.v1.BinaryData data = 1 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  // string last = 3 [json_name = "last"];
  if (!this->_internal_last().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last().data(), static_cast<int>(this->_internal_last().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.BinaryDataByFilterResponse.last");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.BinaryDataByFilterResponse)
  return target;
}

size_t BinaryDataByFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.BinaryDataByFilterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.data.v1.BinaryData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string last = 3 [json_name = "last"];
  if (!this->_internal_last().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last());
  }

  // uint64 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryDataByFilterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BinaryDataByFilterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryDataByFilterResponse::GetClassData() const { return &_class_data_; }

void BinaryDataByFilterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BinaryDataByFilterResponse *>(to)->MergeFrom(
      static_cast<const BinaryDataByFilterResponse &>(from));
}


void BinaryDataByFilterResponse::MergeFrom(const BinaryDataByFilterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.BinaryDataByFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (!from._internal_last().empty()) {
    _internal_set_last(from._internal_last());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryDataByFilterResponse::CopyFrom(const BinaryDataByFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.BinaryDataByFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryDataByFilterResponse::IsInitialized() const {
  return true;
}

void BinaryDataByFilterResponse::InternalSwap(BinaryDataByFilterResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_, lhs_arena,
      &other->last_, rhs_arena
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryDataByFilterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[11]);
}

// ===================================================================

class BinaryDataByIDsRequest::_Internal {
 public:
};

BinaryDataByIDsRequest::BinaryDataByIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  file_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.BinaryDataByIDsRequest)
}
BinaryDataByIDsRequest::BinaryDataByIDsRequest(const BinaryDataByIDsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      file_ids_(from.file_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  include_binary_ = from.include_binary_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.BinaryDataByIDsRequest)
}

inline void BinaryDataByIDsRequest::SharedCtor() {
include_binary_ = false;
}

BinaryDataByIDsRequest::~BinaryDataByIDsRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.BinaryDataByIDsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryDataByIDsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinaryDataByIDsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryDataByIDsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.BinaryDataByIDsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_ids_.Clear();
  include_binary_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryDataByIDsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string file_ids = 1 [json_name = "fileIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_file_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.BinaryDataByIDsRequest.file_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool include_binary = 2 [json_name = "includeBinary"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          include_binary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryDataByIDsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.BinaryDataByIDsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string file_ids = 1 [json_name = "fileIds"];
  for (int i = 0, n = this->_internal_file_ids_size(); i < n; i++) {
    const auto& s = this->_internal_file_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.BinaryDataByIDsRequest.file_ids");
    target = stream->WriteString(1, s, target);
  }

  // bool include_binary = 2 [json_name = "includeBinary"];
  if (this->_internal_include_binary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_include_binary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.BinaryDataByIDsRequest)
  return target;
}

size_t BinaryDataByIDsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.BinaryDataByIDsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string file_ids = 1 [json_name = "fileIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(file_ids_.size());
  for (int i = 0, n = file_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      file_ids_.Get(i));
  }

  // bool include_binary = 2 [json_name = "includeBinary"];
  if (this->_internal_include_binary() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryDataByIDsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BinaryDataByIDsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryDataByIDsRequest::GetClassData() const { return &_class_data_; }

void BinaryDataByIDsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BinaryDataByIDsRequest *>(to)->MergeFrom(
      static_cast<const BinaryDataByIDsRequest &>(from));
}


void BinaryDataByIDsRequest::MergeFrom(const BinaryDataByIDsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.BinaryDataByIDsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  file_ids_.MergeFrom(from.file_ids_);
  if (from._internal_include_binary() != 0) {
    _internal_set_include_binary(from._internal_include_binary());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryDataByIDsRequest::CopyFrom(const BinaryDataByIDsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.BinaryDataByIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryDataByIDsRequest::IsInitialized() const {
  return true;
}

void BinaryDataByIDsRequest::InternalSwap(BinaryDataByIDsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  file_ids_.InternalSwap(&other->file_ids_);
  swap(include_binary_, other->include_binary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryDataByIDsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[12]);
}

// ===================================================================

class BinaryDataByIDsResponse::_Internal {
 public:
};

BinaryDataByIDsResponse::BinaryDataByIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.BinaryDataByIDsResponse)
}
BinaryDataByIDsResponse::BinaryDataByIDsResponse(const BinaryDataByIDsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    last_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last().empty()) {
    last_.Set(from._internal_last(), 
      GetArenaForAllocation());
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.BinaryDataByIDsResponse)
}

inline void BinaryDataByIDsResponse::SharedCtor() {
last_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  last_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
count_ = uint64_t{0u};
}

BinaryDataByIDsResponse::~BinaryDataByIDsResponse() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.BinaryDataByIDsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryDataByIDsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  last_.Destroy();
}

void BinaryDataByIDsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryDataByIDsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.BinaryDataByIDsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  last_.ClearToEmpty();
  count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryDataByIDsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.app.data.v1.BinaryData data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 count = 2 [json_name = "count"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string last = 3 [json_name = "last"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_last();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.BinaryDataByIDsResponse.last"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryDataByIDsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.BinaryDataByIDsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.app.data.v1.BinaryData data = 1 [json_name = "data"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_count(), target);
  }

  // string last = 3 [json_name = "last"];
  if (!this->_internal_last().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last().data(), static_cast<int>(this->_internal_last().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.BinaryDataByIDsResponse.last");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_last(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.BinaryDataByIDsResponse)
  return target;
}

size_t BinaryDataByIDsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.BinaryDataByIDsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.data.v1.BinaryData data = 1 [json_name = "data"];
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string last = 3 [json_name = "last"];
  if (!this->_internal_last().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last());
  }

  // uint64 count = 2 [json_name = "count"];
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryDataByIDsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BinaryDataByIDsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryDataByIDsResponse::GetClassData() const { return &_class_data_; }

void BinaryDataByIDsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BinaryDataByIDsResponse *>(to)->MergeFrom(
      static_cast<const BinaryDataByIDsResponse &>(from));
}


void BinaryDataByIDsResponse::MergeFrom(const BinaryDataByIDsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.BinaryDataByIDsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (!from._internal_last().empty()) {
    _internal_set_last(from._internal_last());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryDataByIDsResponse::CopyFrom(const BinaryDataByIDsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.BinaryDataByIDsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryDataByIDsResponse::IsInitialized() const {
  return true;
}

void BinaryDataByIDsResponse::InternalSwap(BinaryDataByIDsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &last_, lhs_arena,
      &other->last_, rhs_arena
  );
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryDataByIDsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[13]);
}

// ===================================================================

class BinaryMetadata::_Internal {
 public:
  static const ::viam::app::data::v1::CaptureMetadata& capture_metadata(const BinaryMetadata* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_requested(const BinaryMetadata* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_received(const BinaryMetadata* msg);
};

const ::viam::app::data::v1::CaptureMetadata&
BinaryMetadata::_Internal::capture_metadata(const BinaryMetadata* msg) {
  return *msg->capture_metadata_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BinaryMetadata::_Internal::time_requested(const BinaryMetadata* msg) {
  return *msg->time_requested_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BinaryMetadata::_Internal::time_received(const BinaryMetadata* msg) {
  return *msg->time_received_;
}
void BinaryMetadata::clear_time_requested() {
  if (GetArenaForAllocation() == nullptr && time_requested_ != nullptr) {
    delete time_requested_;
  }
  time_requested_ = nullptr;
}
void BinaryMetadata::clear_time_received() {
  if (GetArenaForAllocation() == nullptr && time_received_ != nullptr) {
    delete time_received_;
  }
  time_received_ = nullptr;
}
BinaryMetadata::BinaryMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.BinaryMetadata)
}
BinaryMetadata::BinaryMetadata(const BinaryMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  file_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(from._internal_file_name(), 
      GetArenaForAllocation());
  }
  file_ext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_ext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_ext().empty()) {
    file_ext_.Set(from._internal_file_ext(), 
      GetArenaForAllocation());
  }
  uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    uri_.Set(from._internal_uri(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_capture_metadata()) {
    capture_metadata_ = new ::viam::app::data::v1::CaptureMetadata(*from.capture_metadata_);
  } else {
    capture_metadata_ = nullptr;
  }
  if (from._internal_has_time_requested()) {
    time_requested_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_requested_);
  } else {
    time_requested_ = nullptr;
  }
  if (from._internal_has_time_received()) {
    time_received_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_received_);
  } else {
    time_received_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.BinaryMetadata)
}

inline void BinaryMetadata::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_ext_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_ext_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
uri_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uri_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&capture_metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_received_) -
    reinterpret_cast<char*>(&capture_metadata_)) + sizeof(time_received_));
}

BinaryMetadata::~BinaryMetadata() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.BinaryMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinaryMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  file_name_.Destroy();
  file_ext_.Destroy();
  uri_.Destroy();
  if (this != internal_default_instance()) delete capture_metadata_;
  if (this != internal_default_instance()) delete time_requested_;
  if (this != internal_default_instance()) delete time_received_;
}

void BinaryMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BinaryMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.BinaryMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  file_name_.ClearToEmpty();
  file_ext_.ClearToEmpty();
  uri_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && capture_metadata_ != nullptr) {
    delete capture_metadata_;
  }
  capture_metadata_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_requested_ != nullptr) {
    delete time_requested_;
  }
  time_requested_ = nullptr;
  if (GetArenaForAllocation() == nullptr && time_received_ != nullptr) {
    delete time_received_;
  }
  time_received_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinaryMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.BinaryMetadata.id"));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.data.v1.CaptureMetadata capture_metadata = 2 [json_name = "captureMetadata"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_requested(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_received(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 5 [json_name = "fileName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_file_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.BinaryMetadata.file_name"));
        } else
          goto handle_unusual;
        continue;
      // string file_ext = 6 [json_name = "fileExt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_file_ext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.BinaryMetadata.file_ext"));
        } else
          goto handle_unusual;
        continue;
      // string uri = 7 [json_name = "uri"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.BinaryMetadata.uri"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinaryMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.BinaryMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.BinaryMetadata.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .viam.app.data.v1.CaptureMetadata capture_metadata = 2 [json_name = "captureMetadata"];
  if (this->_internal_has_capture_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::capture_metadata(this),
        _Internal::capture_metadata(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
  if (this->_internal_has_time_requested()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::time_requested(this),
        _Internal::time_requested(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
  if (this->_internal_has_time_received()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time_received(this),
        _Internal::time_received(this).GetCachedSize(), target, stream);
  }

  // string file_name = 5 [json_name = "fileName"];
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.BinaryMetadata.file_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_file_name(), target);
  }

  // string file_ext = 6 [json_name = "fileExt"];
  if (!this->_internal_file_ext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_ext().data(), static_cast<int>(this->_internal_file_ext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.BinaryMetadata.file_ext");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_file_ext(), target);
  }

  // string uri = 7 [json_name = "uri"];
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.BinaryMetadata.uri");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.BinaryMetadata)
  return target;
}

size_t BinaryMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.BinaryMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string file_name = 5 [json_name = "fileName"];
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string file_ext = 6 [json_name = "fileExt"];
  if (!this->_internal_file_ext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_ext());
  }

  // string uri = 7 [json_name = "uri"];
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // .viam.app.data.v1.CaptureMetadata capture_metadata = 2 [json_name = "captureMetadata"];
  if (this->_internal_has_capture_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capture_metadata_);
  }

  // .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
  if (this->_internal_has_time_requested()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_requested_);
  }

  // .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
  if (this->_internal_has_time_received()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_received_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinaryMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BinaryMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinaryMetadata::GetClassData() const { return &_class_data_; }

void BinaryMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BinaryMetadata *>(to)->MergeFrom(
      static_cast<const BinaryMetadata &>(from));
}


void BinaryMetadata::MergeFrom(const BinaryMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.BinaryMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_file_ext().empty()) {
    _internal_set_file_ext(from._internal_file_ext());
  }
  if (!from._internal_uri().empty()) {
    _internal_set_uri(from._internal_uri());
  }
  if (from._internal_has_capture_metadata()) {
    _internal_mutable_capture_metadata()->::viam::app::data::v1::CaptureMetadata::MergeFrom(from._internal_capture_metadata());
  }
  if (from._internal_has_time_requested()) {
    _internal_mutable_time_requested()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time_requested());
  }
  if (from._internal_has_time_received()) {
    _internal_mutable_time_received()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time_received());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinaryMetadata::CopyFrom(const BinaryMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.BinaryMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryMetadata::IsInitialized() const {
  return true;
}

void BinaryMetadata::InternalSwap(BinaryMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_ext_, lhs_arena,
      &other->file_ext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &uri_, lhs_arena,
      &other->uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinaryMetadata, time_received_)
      + sizeof(BinaryMetadata::time_received_)
      - PROTOBUF_FIELD_OFFSET(BinaryMetadata, capture_metadata_)>(
          reinterpret_cast<char*>(&capture_metadata_),
          reinterpret_cast<char*>(&other->capture_metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinaryMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[14]);
}

// ===================================================================

class DeleteTabularDataByFilterRequest::_Internal {
 public:
  static const ::viam::app::data::v1::Filter& filter(const DeleteTabularDataByFilterRequest* msg);
};

const ::viam::app::data::v1::Filter&
DeleteTabularDataByFilterRequest::_Internal::filter(const DeleteTabularDataByFilterRequest* msg) {
  return *msg->filter_;
}
DeleteTabularDataByFilterRequest::DeleteTabularDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.DeleteTabularDataByFilterRequest)
}
DeleteTabularDataByFilterRequest::DeleteTabularDataByFilterRequest(const DeleteTabularDataByFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::viam::app::data::v1::Filter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.DeleteTabularDataByFilterRequest)
}

inline void DeleteTabularDataByFilterRequest::SharedCtor() {
filter_ = nullptr;
}

DeleteTabularDataByFilterRequest::~DeleteTabularDataByFilterRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.DeleteTabularDataByFilterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteTabularDataByFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void DeleteTabularDataByFilterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTabularDataByFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.DeleteTabularDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTabularDataByFilterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteTabularDataByFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.DeleteTabularDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.DeleteTabularDataByFilterRequest)
  return target;
}

size_t DeleteTabularDataByFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.DeleteTabularDataByFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTabularDataByFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTabularDataByFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTabularDataByFilterRequest::GetClassData() const { return &_class_data_; }

void DeleteTabularDataByFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteTabularDataByFilterRequest *>(to)->MergeFrom(
      static_cast<const DeleteTabularDataByFilterRequest &>(from));
}


void DeleteTabularDataByFilterRequest::MergeFrom(const DeleteTabularDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.DeleteTabularDataByFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::viam::app::data::v1::Filter::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTabularDataByFilterRequest::CopyFrom(const DeleteTabularDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.DeleteTabularDataByFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTabularDataByFilterRequest::IsInitialized() const {
  return true;
}

void DeleteTabularDataByFilterRequest::InternalSwap(DeleteTabularDataByFilterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTabularDataByFilterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[15]);
}

// ===================================================================

class DeleteTabularDataByFilterResponse::_Internal {
 public:
  static const ::viam::app::data::v1::Result& result(const DeleteTabularDataByFilterResponse* msg);
};

const ::viam::app::data::v1::Result&
DeleteTabularDataByFilterResponse::_Internal::result(const DeleteTabularDataByFilterResponse* msg) {
  return *msg->result_;
}
DeleteTabularDataByFilterResponse::DeleteTabularDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.DeleteTabularDataByFilterResponse)
}
DeleteTabularDataByFilterResponse::DeleteTabularDataByFilterResponse(const DeleteTabularDataByFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::viam::app::data::v1::Result(*from.result_);
  } else {
    result_ = nullptr;
  }
  deleted_count_ = from.deleted_count_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.DeleteTabularDataByFilterResponse)
}

inline void DeleteTabularDataByFilterResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deleted_count_) -
    reinterpret_cast<char*>(&result_)) + sizeof(deleted_count_));
}

DeleteTabularDataByFilterResponse::~DeleteTabularDataByFilterResponse() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.DeleteTabularDataByFilterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteTabularDataByFilterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void DeleteTabularDataByFilterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTabularDataByFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.DeleteTabularDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  deleted_count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTabularDataByFilterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 deleted_count = 1 [json_name = "deletedCount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          deleted_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.data.v1.Result result = 2 [json_name = "result"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteTabularDataByFilterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.DeleteTabularDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  if (this->_internal_deleted_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_deleted_count(), target);
  }

  // .viam.app.data.v1.Result result = 2 [json_name = "result"];
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.DeleteTabularDataByFilterResponse)
  return target;
}

size_t DeleteTabularDataByFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.DeleteTabularDataByFilterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.data.v1.Result result = 2 [json_name = "result"];
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  if (this->_internal_deleted_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_deleted_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTabularDataByFilterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTabularDataByFilterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTabularDataByFilterResponse::GetClassData() const { return &_class_data_; }

void DeleteTabularDataByFilterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteTabularDataByFilterResponse *>(to)->MergeFrom(
      static_cast<const DeleteTabularDataByFilterResponse &>(from));
}


void DeleteTabularDataByFilterResponse::MergeFrom(const DeleteTabularDataByFilterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.DeleteTabularDataByFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::viam::app::data::v1::Result::MergeFrom(from._internal_result());
  }
  if (from._internal_deleted_count() != 0) {
    _internal_set_deleted_count(from._internal_deleted_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTabularDataByFilterResponse::CopyFrom(const DeleteTabularDataByFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.DeleteTabularDataByFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTabularDataByFilterResponse::IsInitialized() const {
  return true;
}

void DeleteTabularDataByFilterResponse::InternalSwap(DeleteTabularDataByFilterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteTabularDataByFilterResponse, deleted_count_)
      + sizeof(DeleteTabularDataByFilterResponse::deleted_count_)
      - PROTOBUF_FIELD_OFFSET(DeleteTabularDataByFilterResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTabularDataByFilterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[16]);
}

// ===================================================================

class DeleteBinaryDataByFilterRequest::_Internal {
 public:
  static const ::viam::app::data::v1::Filter& filter(const DeleteBinaryDataByFilterRequest* msg);
};

const ::viam::app::data::v1::Filter&
DeleteBinaryDataByFilterRequest::_Internal::filter(const DeleteBinaryDataByFilterRequest* msg) {
  return *msg->filter_;
}
DeleteBinaryDataByFilterRequest::DeleteBinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.DeleteBinaryDataByFilterRequest)
}
DeleteBinaryDataByFilterRequest::DeleteBinaryDataByFilterRequest(const DeleteBinaryDataByFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::viam::app::data::v1::Filter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.DeleteBinaryDataByFilterRequest)
}

inline void DeleteBinaryDataByFilterRequest::SharedCtor() {
filter_ = nullptr;
}

DeleteBinaryDataByFilterRequest::~DeleteBinaryDataByFilterRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.DeleteBinaryDataByFilterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteBinaryDataByFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void DeleteBinaryDataByFilterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteBinaryDataByFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.DeleteBinaryDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBinaryDataByFilterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteBinaryDataByFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.DeleteBinaryDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.DeleteBinaryDataByFilterRequest)
  return target;
}

size_t DeleteBinaryDataByFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.DeleteBinaryDataByFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteBinaryDataByFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteBinaryDataByFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteBinaryDataByFilterRequest::GetClassData() const { return &_class_data_; }

void DeleteBinaryDataByFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteBinaryDataByFilterRequest *>(to)->MergeFrom(
      static_cast<const DeleteBinaryDataByFilterRequest &>(from));
}


void DeleteBinaryDataByFilterRequest::MergeFrom(const DeleteBinaryDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.DeleteBinaryDataByFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::viam::app::data::v1::Filter::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteBinaryDataByFilterRequest::CopyFrom(const DeleteBinaryDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.DeleteBinaryDataByFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBinaryDataByFilterRequest::IsInitialized() const {
  return true;
}

void DeleteBinaryDataByFilterRequest::InternalSwap(DeleteBinaryDataByFilterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBinaryDataByFilterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[17]);
}

// ===================================================================

class DeleteBinaryDataByFilterResponse::_Internal {
 public:
  static const ::viam::app::data::v1::Result& result(const DeleteBinaryDataByFilterResponse* msg);
};

const ::viam::app::data::v1::Result&
DeleteBinaryDataByFilterResponse::_Internal::result(const DeleteBinaryDataByFilterResponse* msg) {
  return *msg->result_;
}
DeleteBinaryDataByFilterResponse::DeleteBinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.DeleteBinaryDataByFilterResponse)
}
DeleteBinaryDataByFilterResponse::DeleteBinaryDataByFilterResponse(const DeleteBinaryDataByFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::viam::app::data::v1::Result(*from.result_);
  } else {
    result_ = nullptr;
  }
  deleted_count_ = from.deleted_count_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.DeleteBinaryDataByFilterResponse)
}

inline void DeleteBinaryDataByFilterResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deleted_count_) -
    reinterpret_cast<char*>(&result_)) + sizeof(deleted_count_));
}

DeleteBinaryDataByFilterResponse::~DeleteBinaryDataByFilterResponse() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.DeleteBinaryDataByFilterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteBinaryDataByFilterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void DeleteBinaryDataByFilterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteBinaryDataByFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.DeleteBinaryDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  deleted_count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBinaryDataByFilterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 deleted_count = 1 [json_name = "deletedCount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          deleted_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.data.v1.Result result = 2 [json_name = "result"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteBinaryDataByFilterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.DeleteBinaryDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  if (this->_internal_deleted_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_deleted_count(), target);
  }

  // .viam.app.data.v1.Result result = 2 [json_name = "result"];
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.DeleteBinaryDataByFilterResponse)
  return target;
}

size_t DeleteBinaryDataByFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.DeleteBinaryDataByFilterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.data.v1.Result result = 2 [json_name = "result"];
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  if (this->_internal_deleted_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_deleted_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteBinaryDataByFilterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteBinaryDataByFilterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteBinaryDataByFilterResponse::GetClassData() const { return &_class_data_; }

void DeleteBinaryDataByFilterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteBinaryDataByFilterResponse *>(to)->MergeFrom(
      static_cast<const DeleteBinaryDataByFilterResponse &>(from));
}


void DeleteBinaryDataByFilterResponse::MergeFrom(const DeleteBinaryDataByFilterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.DeleteBinaryDataByFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::viam::app::data::v1::Result::MergeFrom(from._internal_result());
  }
  if (from._internal_deleted_count() != 0) {
    _internal_set_deleted_count(from._internal_deleted_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteBinaryDataByFilterResponse::CopyFrom(const DeleteBinaryDataByFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.DeleteBinaryDataByFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBinaryDataByFilterResponse::IsInitialized() const {
  return true;
}

void DeleteBinaryDataByFilterResponse::InternalSwap(DeleteBinaryDataByFilterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteBinaryDataByFilterResponse, deleted_count_)
      + sizeof(DeleteBinaryDataByFilterResponse::deleted_count_)
      - PROTOBUF_FIELD_OFFSET(DeleteBinaryDataByFilterResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBinaryDataByFilterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[18]);
}

// ===================================================================

class DeleteBinaryDataByIDsRequest::_Internal {
 public:
};

DeleteBinaryDataByIDsRequest::DeleteBinaryDataByIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  file_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.DeleteBinaryDataByIDsRequest)
}
DeleteBinaryDataByIDsRequest::DeleteBinaryDataByIDsRequest(const DeleteBinaryDataByIDsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      file_ids_(from.file_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.DeleteBinaryDataByIDsRequest)
}

inline void DeleteBinaryDataByIDsRequest::SharedCtor() {
}

DeleteBinaryDataByIDsRequest::~DeleteBinaryDataByIDsRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.DeleteBinaryDataByIDsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteBinaryDataByIDsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteBinaryDataByIDsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteBinaryDataByIDsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.DeleteBinaryDataByIDsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBinaryDataByIDsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string file_ids = 1 [json_name = "fileIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_file_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteBinaryDataByIDsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.DeleteBinaryDataByIDsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string file_ids = 1 [json_name = "fileIds"];
  for (int i = 0, n = this->_internal_file_ids_size(); i < n; i++) {
    const auto& s = this->_internal_file_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.DeleteBinaryDataByIDsRequest)
  return target;
}

size_t DeleteBinaryDataByIDsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.DeleteBinaryDataByIDsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string file_ids = 1 [json_name = "fileIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(file_ids_.size());
  for (int i = 0, n = file_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      file_ids_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteBinaryDataByIDsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteBinaryDataByIDsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteBinaryDataByIDsRequest::GetClassData() const { return &_class_data_; }

void DeleteBinaryDataByIDsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteBinaryDataByIDsRequest *>(to)->MergeFrom(
      static_cast<const DeleteBinaryDataByIDsRequest &>(from));
}


void DeleteBinaryDataByIDsRequest::MergeFrom(const DeleteBinaryDataByIDsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.DeleteBinaryDataByIDsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  file_ids_.MergeFrom(from.file_ids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteBinaryDataByIDsRequest::CopyFrom(const DeleteBinaryDataByIDsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.DeleteBinaryDataByIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBinaryDataByIDsRequest::IsInitialized() const {
  return true;
}

void DeleteBinaryDataByIDsRequest::InternalSwap(DeleteBinaryDataByIDsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  file_ids_.InternalSwap(&other->file_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBinaryDataByIDsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[19]);
}

// ===================================================================

class DeleteBinaryDataByIDsResponse::_Internal {
 public:
  static const ::viam::app::data::v1::Result& result(const DeleteBinaryDataByIDsResponse* msg);
};

const ::viam::app::data::v1::Result&
DeleteBinaryDataByIDsResponse::_Internal::result(const DeleteBinaryDataByIDsResponse* msg) {
  return *msg->result_;
}
DeleteBinaryDataByIDsResponse::DeleteBinaryDataByIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.DeleteBinaryDataByIDsResponse)
}
DeleteBinaryDataByIDsResponse::DeleteBinaryDataByIDsResponse(const DeleteBinaryDataByIDsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::viam::app::data::v1::Result(*from.result_);
  } else {
    result_ = nullptr;
  }
  deleted_count_ = from.deleted_count_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.DeleteBinaryDataByIDsResponse)
}

inline void DeleteBinaryDataByIDsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deleted_count_) -
    reinterpret_cast<char*>(&result_)) + sizeof(deleted_count_));
}

DeleteBinaryDataByIDsResponse::~DeleteBinaryDataByIDsResponse() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.DeleteBinaryDataByIDsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteBinaryDataByIDsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void DeleteBinaryDataByIDsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteBinaryDataByIDsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.DeleteBinaryDataByIDsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  deleted_count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteBinaryDataByIDsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 deleted_count = 1 [json_name = "deletedCount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          deleted_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.data.v1.Result result = 2 [json_name = "result"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteBinaryDataByIDsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.DeleteBinaryDataByIDsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  if (this->_internal_deleted_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_deleted_count(), target);
  }

  // .viam.app.data.v1.Result result = 2 [json_name = "result"];
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.DeleteBinaryDataByIDsResponse)
  return target;
}

size_t DeleteBinaryDataByIDsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.DeleteBinaryDataByIDsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.data.v1.Result result = 2 [json_name = "result"];
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  if (this->_internal_deleted_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_deleted_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteBinaryDataByIDsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteBinaryDataByIDsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteBinaryDataByIDsResponse::GetClassData() const { return &_class_data_; }

void DeleteBinaryDataByIDsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteBinaryDataByIDsResponse *>(to)->MergeFrom(
      static_cast<const DeleteBinaryDataByIDsResponse &>(from));
}


void DeleteBinaryDataByIDsResponse::MergeFrom(const DeleteBinaryDataByIDsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.DeleteBinaryDataByIDsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::viam::app::data::v1::Result::MergeFrom(from._internal_result());
  }
  if (from._internal_deleted_count() != 0) {
    _internal_set_deleted_count(from._internal_deleted_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteBinaryDataByIDsResponse::CopyFrom(const DeleteBinaryDataByIDsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.DeleteBinaryDataByIDsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBinaryDataByIDsResponse::IsInitialized() const {
  return true;
}

void DeleteBinaryDataByIDsResponse::InternalSwap(DeleteBinaryDataByIDsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeleteBinaryDataByIDsResponse, deleted_count_)
      + sizeof(DeleteBinaryDataByIDsResponse::deleted_count_)
      - PROTOBUF_FIELD_OFFSET(DeleteBinaryDataByIDsResponse, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteBinaryDataByIDsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[20]);
}

// ===================================================================

class AddTagsToBinaryDataByFileIDsRequest::_Internal {
 public:
};

AddTagsToBinaryDataByFileIDsRequest::AddTagsToBinaryDataByFileIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  file_ids_(arena),
  tags_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest)
}
AddTagsToBinaryDataByFileIDsRequest::AddTagsToBinaryDataByFileIDsRequest(const AddTagsToBinaryDataByFileIDsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      file_ids_(from.file_ids_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest)
}

inline void AddTagsToBinaryDataByFileIDsRequest::SharedCtor() {
}

AddTagsToBinaryDataByFileIDsRequest::~AddTagsToBinaryDataByFileIDsRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddTagsToBinaryDataByFileIDsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddTagsToBinaryDataByFileIDsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddTagsToBinaryDataByFileIDsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_ids_.Clear();
  tags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddTagsToBinaryDataByFileIDsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string file_ids = 1 [json_name = "fileIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_file_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 2 [json_name = "tags"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddTagsToBinaryDataByFileIDsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string file_ids = 1 [json_name = "fileIds"];
  for (int i = 0, n = this->_internal_file_ids_size(); i < n; i++) {
    const auto& s = this->_internal_file_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string tags = 2 [json_name = "tags"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest)
  return target;
}

size_t AddTagsToBinaryDataByFileIDsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string file_ids = 1 [json_name = "fileIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(file_ids_.size());
  for (int i = 0, n = file_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      file_ids_.Get(i));
  }

  // repeated string tags = 2 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddTagsToBinaryDataByFileIDsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddTagsToBinaryDataByFileIDsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddTagsToBinaryDataByFileIDsRequest::GetClassData() const { return &_class_data_; }

void AddTagsToBinaryDataByFileIDsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddTagsToBinaryDataByFileIDsRequest *>(to)->MergeFrom(
      static_cast<const AddTagsToBinaryDataByFileIDsRequest &>(from));
}


void AddTagsToBinaryDataByFileIDsRequest::MergeFrom(const AddTagsToBinaryDataByFileIDsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  file_ids_.MergeFrom(from.file_ids_);
  tags_.MergeFrom(from.tags_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddTagsToBinaryDataByFileIDsRequest::CopyFrom(const AddTagsToBinaryDataByFileIDsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTagsToBinaryDataByFileIDsRequest::IsInitialized() const {
  return true;
}

void AddTagsToBinaryDataByFileIDsRequest::InternalSwap(AddTagsToBinaryDataByFileIDsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  file_ids_.InternalSwap(&other->file_ids_);
  tags_.InternalSwap(&other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTagsToBinaryDataByFileIDsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[21]);
}

// ===================================================================

class AddTagsToBinaryDataByFileIDsResponse::_Internal {
 public:
};

AddTagsToBinaryDataByFileIDsResponse::AddTagsToBinaryDataByFileIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.AddTagsToBinaryDataByFileIDsResponse)
}
AddTagsToBinaryDataByFileIDsResponse::AddTagsToBinaryDataByFileIDsResponse(const AddTagsToBinaryDataByFileIDsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.AddTagsToBinaryDataByFileIDsResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddTagsToBinaryDataByFileIDsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddTagsToBinaryDataByFileIDsResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddTagsToBinaryDataByFileIDsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[22]);
}

// ===================================================================

class AddTagsToBinaryDataByFilterRequest::_Internal {
 public:
  static const ::viam::app::data::v1::Filter& filter(const AddTagsToBinaryDataByFilterRequest* msg);
};

const ::viam::app::data::v1::Filter&
AddTagsToBinaryDataByFilterRequest::_Internal::filter(const AddTagsToBinaryDataByFilterRequest* msg) {
  return *msg->filter_;
}
AddTagsToBinaryDataByFilterRequest::AddTagsToBinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest)
}
AddTagsToBinaryDataByFilterRequest::AddTagsToBinaryDataByFilterRequest(const AddTagsToBinaryDataByFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::viam::app::data::v1::Filter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest)
}

inline void AddTagsToBinaryDataByFilterRequest::SharedCtor() {
filter_ = nullptr;
}

AddTagsToBinaryDataByFilterRequest::~AddTagsToBinaryDataByFilterRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddTagsToBinaryDataByFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void AddTagsToBinaryDataByFilterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddTagsToBinaryDataByFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddTagsToBinaryDataByFilterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 2 [json_name = "tags"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddTagsToBinaryDataByFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // repeated string tags = 2 [json_name = "tags"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest)
  return target;
}

size_t AddTagsToBinaryDataByFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 2 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddTagsToBinaryDataByFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddTagsToBinaryDataByFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddTagsToBinaryDataByFilterRequest::GetClassData() const { return &_class_data_; }

void AddTagsToBinaryDataByFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddTagsToBinaryDataByFilterRequest *>(to)->MergeFrom(
      static_cast<const AddTagsToBinaryDataByFilterRequest &>(from));
}


void AddTagsToBinaryDataByFilterRequest::MergeFrom(const AddTagsToBinaryDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::viam::app::data::v1::Filter::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddTagsToBinaryDataByFilterRequest::CopyFrom(const AddTagsToBinaryDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTagsToBinaryDataByFilterRequest::IsInitialized() const {
  return true;
}

void AddTagsToBinaryDataByFilterRequest::InternalSwap(AddTagsToBinaryDataByFilterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTagsToBinaryDataByFilterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[23]);
}

// ===================================================================

class AddTagsToBinaryDataByFilterResponse::_Internal {
 public:
};

AddTagsToBinaryDataByFilterResponse::AddTagsToBinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.AddTagsToBinaryDataByFilterResponse)
}
AddTagsToBinaryDataByFilterResponse::AddTagsToBinaryDataByFilterResponse(const AddTagsToBinaryDataByFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.AddTagsToBinaryDataByFilterResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddTagsToBinaryDataByFilterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddTagsToBinaryDataByFilterResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata AddTagsToBinaryDataByFilterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[24]);
}

// ===================================================================

class RemoveTagsFromBinaryDataByFileIDsRequest::_Internal {
 public:
};

RemoveTagsFromBinaryDataByFileIDsRequest::RemoveTagsFromBinaryDataByFileIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  file_ids_(arena),
  tags_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest)
}
RemoveTagsFromBinaryDataByFileIDsRequest::RemoveTagsFromBinaryDataByFileIDsRequest(const RemoveTagsFromBinaryDataByFileIDsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      file_ids_(from.file_ids_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest)
}

inline void RemoveTagsFromBinaryDataByFileIDsRequest::SharedCtor() {
}

RemoveTagsFromBinaryDataByFileIDsRequest::~RemoveTagsFromBinaryDataByFileIDsRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveTagsFromBinaryDataByFileIDsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveTagsFromBinaryDataByFileIDsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveTagsFromBinaryDataByFileIDsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_ids_.Clear();
  tags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveTagsFromBinaryDataByFileIDsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string file_ids = 1 [json_name = "fileIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_file_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 2 [json_name = "tags"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveTagsFromBinaryDataByFileIDsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string file_ids = 1 [json_name = "fileIds"];
  for (int i = 0, n = this->_internal_file_ids_size(); i < n; i++) {
    const auto& s = this->_internal_file_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids");
    target = stream->WriteString(1, s, target);
  }

  // repeated string tags = 2 [json_name = "tags"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest)
  return target;
}

size_t RemoveTagsFromBinaryDataByFileIDsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string file_ids = 1 [json_name = "fileIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(file_ids_.size());
  for (int i = 0, n = file_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      file_ids_.Get(i));
  }

  // repeated string tags = 2 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveTagsFromBinaryDataByFileIDsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveTagsFromBinaryDataByFileIDsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveTagsFromBinaryDataByFileIDsRequest::GetClassData() const { return &_class_data_; }

void RemoveTagsFromBinaryDataByFileIDsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveTagsFromBinaryDataByFileIDsRequest *>(to)->MergeFrom(
      static_cast<const RemoveTagsFromBinaryDataByFileIDsRequest &>(from));
}


void RemoveTagsFromBinaryDataByFileIDsRequest::MergeFrom(const RemoveTagsFromBinaryDataByFileIDsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  file_ids_.MergeFrom(from.file_ids_);
  tags_.MergeFrom(from.tags_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveTagsFromBinaryDataByFileIDsRequest::CopyFrom(const RemoveTagsFromBinaryDataByFileIDsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveTagsFromBinaryDataByFileIDsRequest::IsInitialized() const {
  return true;
}

void RemoveTagsFromBinaryDataByFileIDsRequest::InternalSwap(RemoveTagsFromBinaryDataByFileIDsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  file_ids_.InternalSwap(&other->file_ids_);
  tags_.InternalSwap(&other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveTagsFromBinaryDataByFileIDsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[25]);
}

// ===================================================================

class RemoveTagsFromBinaryDataByFileIDsResponse::_Internal {
 public:
};

RemoveTagsFromBinaryDataByFileIDsResponse::RemoveTagsFromBinaryDataByFileIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse)
}
RemoveTagsFromBinaryDataByFileIDsResponse::RemoveTagsFromBinaryDataByFileIDsResponse(const RemoveTagsFromBinaryDataByFileIDsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deleted_count_ = from.deleted_count_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse)
}

inline void RemoveTagsFromBinaryDataByFileIDsResponse::SharedCtor() {
deleted_count_ = uint64_t{0u};
}

RemoveTagsFromBinaryDataByFileIDsResponse::~RemoveTagsFromBinaryDataByFileIDsResponse() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveTagsFromBinaryDataByFileIDsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveTagsFromBinaryDataByFileIDsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveTagsFromBinaryDataByFileIDsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deleted_count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveTagsFromBinaryDataByFileIDsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 deleted_count = 1 [json_name = "deletedCount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          deleted_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveTagsFromBinaryDataByFileIDsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  if (this->_internal_deleted_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_deleted_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse)
  return target;
}

size_t RemoveTagsFromBinaryDataByFileIDsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  if (this->_internal_deleted_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_deleted_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveTagsFromBinaryDataByFileIDsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveTagsFromBinaryDataByFileIDsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveTagsFromBinaryDataByFileIDsResponse::GetClassData() const { return &_class_data_; }

void RemoveTagsFromBinaryDataByFileIDsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveTagsFromBinaryDataByFileIDsResponse *>(to)->MergeFrom(
      static_cast<const RemoveTagsFromBinaryDataByFileIDsResponse &>(from));
}


void RemoveTagsFromBinaryDataByFileIDsResponse::MergeFrom(const RemoveTagsFromBinaryDataByFileIDsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_deleted_count() != 0) {
    _internal_set_deleted_count(from._internal_deleted_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveTagsFromBinaryDataByFileIDsResponse::CopyFrom(const RemoveTagsFromBinaryDataByFileIDsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveTagsFromBinaryDataByFileIDsResponse::IsInitialized() const {
  return true;
}

void RemoveTagsFromBinaryDataByFileIDsResponse::InternalSwap(RemoveTagsFromBinaryDataByFileIDsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(deleted_count_, other->deleted_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveTagsFromBinaryDataByFileIDsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[26]);
}

// ===================================================================

class RemoveTagsFromBinaryDataByFilterRequest::_Internal {
 public:
  static const ::viam::app::data::v1::Filter& filter(const RemoveTagsFromBinaryDataByFilterRequest* msg);
};

const ::viam::app::data::v1::Filter&
RemoveTagsFromBinaryDataByFilterRequest::_Internal::filter(const RemoveTagsFromBinaryDataByFilterRequest* msg) {
  return *msg->filter_;
}
RemoveTagsFromBinaryDataByFilterRequest::RemoveTagsFromBinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest)
}
RemoveTagsFromBinaryDataByFilterRequest::RemoveTagsFromBinaryDataByFilterRequest(const RemoveTagsFromBinaryDataByFilterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::viam::app::data::v1::Filter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest)
}

inline void RemoveTagsFromBinaryDataByFilterRequest::SharedCtor() {
filter_ = nullptr;
}

RemoveTagsFromBinaryDataByFilterRequest::~RemoveTagsFromBinaryDataByFilterRequest() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveTagsFromBinaryDataByFilterRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete filter_;
}

void RemoveTagsFromBinaryDataByFilterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveTagsFromBinaryDataByFilterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveTagsFromBinaryDataByFilterRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 2 [json_name = "tags"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveTagsFromBinaryDataByFilterRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // repeated string tags = 2 [json_name = "tags"];
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest)
  return target;
}

size_t RemoveTagsFromBinaryDataByFilterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 2 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveTagsFromBinaryDataByFilterRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveTagsFromBinaryDataByFilterRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveTagsFromBinaryDataByFilterRequest::GetClassData() const { return &_class_data_; }

void RemoveTagsFromBinaryDataByFilterRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveTagsFromBinaryDataByFilterRequest *>(to)->MergeFrom(
      static_cast<const RemoveTagsFromBinaryDataByFilterRequest &>(from));
}


void RemoveTagsFromBinaryDataByFilterRequest::MergeFrom(const RemoveTagsFromBinaryDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from._internal_has_filter()) {
    _internal_mutable_filter()->::viam::app::data::v1::Filter::MergeFrom(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveTagsFromBinaryDataByFilterRequest::CopyFrom(const RemoveTagsFromBinaryDataByFilterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveTagsFromBinaryDataByFilterRequest::IsInitialized() const {
  return true;
}

void RemoveTagsFromBinaryDataByFilterRequest::InternalSwap(RemoveTagsFromBinaryDataByFilterRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveTagsFromBinaryDataByFilterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[27]);
}

// ===================================================================

class RemoveTagsFromBinaryDataByFilterResponse::_Internal {
 public:
};

RemoveTagsFromBinaryDataByFilterResponse::RemoveTagsFromBinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse)
}
RemoveTagsFromBinaryDataByFilterResponse::RemoveTagsFromBinaryDataByFilterResponse(const RemoveTagsFromBinaryDataByFilterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  deleted_count_ = from.deleted_count_;
  // @@protoc_insertion_point(copy_constructor:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse)
}

inline void RemoveTagsFromBinaryDataByFilterResponse::SharedCtor() {
deleted_count_ = uint64_t{0u};
}

RemoveTagsFromBinaryDataByFilterResponse::~RemoveTagsFromBinaryDataByFilterResponse() {
  // @@protoc_insertion_point(destructor:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveTagsFromBinaryDataByFilterResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveTagsFromBinaryDataByFilterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoveTagsFromBinaryDataByFilterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deleted_count_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveTagsFromBinaryDataByFilterResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 deleted_count = 1 [json_name = "deletedCount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          deleted_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveTagsFromBinaryDataByFilterResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  if (this->_internal_deleted_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_deleted_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse)
  return target;
}

size_t RemoveTagsFromBinaryDataByFilterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  if (this->_internal_deleted_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_deleted_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveTagsFromBinaryDataByFilterResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoveTagsFromBinaryDataByFilterResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveTagsFromBinaryDataByFilterResponse::GetClassData() const { return &_class_data_; }

void RemoveTagsFromBinaryDataByFilterResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoveTagsFromBinaryDataByFilterResponse *>(to)->MergeFrom(
      static_cast<const RemoveTagsFromBinaryDataByFilterResponse &>(from));
}


void RemoveTagsFromBinaryDataByFilterResponse::MergeFrom(const RemoveTagsFromBinaryDataByFilterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_deleted_count() != 0) {
    _internal_set_deleted_count(from._internal_deleted_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveTagsFromBinaryDataByFilterResponse::CopyFrom(const RemoveTagsFromBinaryDataByFilterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveTagsFromBinaryDataByFilterResponse::IsInitialized() const {
  return true;
}

void RemoveTagsFromBinaryDataByFilterResponse::InternalSwap(RemoveTagsFromBinaryDataByFilterResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(deleted_count_, other->deleted_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveTagsFromBinaryDataByFilterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_getter, &descriptor_table_app_2fdata_2fv1_2fdata_2eproto_once,
      file_level_metadata_app_2fdata_2fv1_2fdata_2eproto[28]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace data
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::Result*
Arena::CreateMaybeMessage< ::viam::app::data::v1::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::DataRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::DataRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::DataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::Filter*
Arena::CreateMaybeMessage< ::viam::app::data::v1::Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::CaptureMetadata*
Arena::CreateMaybeMessage< ::viam::app::data::v1::CaptureMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::CaptureMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::CaptureInterval*
Arena::CreateMaybeMessage< ::viam::app::data::v1::CaptureInterval >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::CaptureInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::TabularDataByFilterRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::TabularDataByFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::TabularDataByFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::TabularDataByFilterResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::TabularDataByFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::TabularDataByFilterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::TabularData*
Arena::CreateMaybeMessage< ::viam::app::data::v1::TabularData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::TabularData >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::BinaryData*
Arena::CreateMaybeMessage< ::viam::app::data::v1::BinaryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::BinaryData >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::BinaryDataByFilterRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::BinaryDataByFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::BinaryDataByFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::BinaryDataByFilterResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::BinaryDataByFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::BinaryDataByFilterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::BinaryDataByIDsRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::BinaryDataByIDsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::BinaryDataByIDsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::BinaryDataByIDsResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::BinaryDataByIDsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::BinaryDataByIDsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::BinaryMetadata*
Arena::CreateMaybeMessage< ::viam::app::data::v1::BinaryMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::BinaryMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::DeleteTabularDataByFilterRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::DeleteTabularDataByFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::DeleteTabularDataByFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::DeleteTabularDataByFilterResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::DeleteTabularDataByFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::DeleteTabularDataByFilterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::DeleteBinaryDataByFilterRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::DeleteBinaryDataByFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::DeleteBinaryDataByFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::DeleteBinaryDataByFilterResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::DeleteBinaryDataByFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::DeleteBinaryDataByFilterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::DeleteBinaryDataByIDsRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::DeleteBinaryDataByIDsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::DeleteBinaryDataByIDsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::DeleteBinaryDataByIDsResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::DeleteBinaryDataByIDsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::DeleteBinaryDataByIDsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::AddTagsToBinaryDataByFileIDsRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::AddTagsToBinaryDataByFileIDsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::AddTagsToBinaryDataByFileIDsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::AddTagsToBinaryDataByFileIDsResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::AddTagsToBinaryDataByFileIDsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::AddTagsToBinaryDataByFileIDsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::AddTagsToBinaryDataByFilterRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::AddTagsToBinaryDataByFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::AddTagsToBinaryDataByFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::AddTagsToBinaryDataByFilterResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::AddTagsToBinaryDataByFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::AddTagsToBinaryDataByFilterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterRequest*
Arena::CreateMaybeMessage< ::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterResponse*
Arena::CreateMaybeMessage< ::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
