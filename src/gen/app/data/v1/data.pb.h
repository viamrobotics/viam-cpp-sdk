// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/data/v1/data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fdata_2fv1_2fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_2fdata_2fv1_2fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_2fdata_2fv1_2fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fdata_2fv1_2fdata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_app_2fdata_2fv1_2fdata_2eproto;
namespace viam {
namespace app {
namespace data {
namespace v1 {
class AddTagsToBinaryDataByFileIDsRequest;
struct AddTagsToBinaryDataByFileIDsRequestDefaultTypeInternal;
extern AddTagsToBinaryDataByFileIDsRequestDefaultTypeInternal _AddTagsToBinaryDataByFileIDsRequest_default_instance_;
class AddTagsToBinaryDataByFileIDsResponse;
struct AddTagsToBinaryDataByFileIDsResponseDefaultTypeInternal;
extern AddTagsToBinaryDataByFileIDsResponseDefaultTypeInternal _AddTagsToBinaryDataByFileIDsResponse_default_instance_;
class AddTagsToBinaryDataByFilterRequest;
struct AddTagsToBinaryDataByFilterRequestDefaultTypeInternal;
extern AddTagsToBinaryDataByFilterRequestDefaultTypeInternal _AddTagsToBinaryDataByFilterRequest_default_instance_;
class AddTagsToBinaryDataByFilterResponse;
struct AddTagsToBinaryDataByFilterResponseDefaultTypeInternal;
extern AddTagsToBinaryDataByFilterResponseDefaultTypeInternal _AddTagsToBinaryDataByFilterResponse_default_instance_;
class BinaryData;
struct BinaryDataDefaultTypeInternal;
extern BinaryDataDefaultTypeInternal _BinaryData_default_instance_;
class BinaryDataByFilterRequest;
struct BinaryDataByFilterRequestDefaultTypeInternal;
extern BinaryDataByFilterRequestDefaultTypeInternal _BinaryDataByFilterRequest_default_instance_;
class BinaryDataByFilterResponse;
struct BinaryDataByFilterResponseDefaultTypeInternal;
extern BinaryDataByFilterResponseDefaultTypeInternal _BinaryDataByFilterResponse_default_instance_;
class BinaryDataByIDsRequest;
struct BinaryDataByIDsRequestDefaultTypeInternal;
extern BinaryDataByIDsRequestDefaultTypeInternal _BinaryDataByIDsRequest_default_instance_;
class BinaryDataByIDsResponse;
struct BinaryDataByIDsResponseDefaultTypeInternal;
extern BinaryDataByIDsResponseDefaultTypeInternal _BinaryDataByIDsResponse_default_instance_;
class BinaryMetadata;
struct BinaryMetadataDefaultTypeInternal;
extern BinaryMetadataDefaultTypeInternal _BinaryMetadata_default_instance_;
class CaptureInterval;
struct CaptureIntervalDefaultTypeInternal;
extern CaptureIntervalDefaultTypeInternal _CaptureInterval_default_instance_;
class CaptureMetadata;
struct CaptureMetadataDefaultTypeInternal;
extern CaptureMetadataDefaultTypeInternal _CaptureMetadata_default_instance_;
class CaptureMetadata_MethodParametersEntry_DoNotUse;
struct CaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal;
extern CaptureMetadata_MethodParametersEntry_DoNotUseDefaultTypeInternal _CaptureMetadata_MethodParametersEntry_DoNotUse_default_instance_;
class DataRequest;
struct DataRequestDefaultTypeInternal;
extern DataRequestDefaultTypeInternal _DataRequest_default_instance_;
class DeleteBinaryDataByFilterRequest;
struct DeleteBinaryDataByFilterRequestDefaultTypeInternal;
extern DeleteBinaryDataByFilterRequestDefaultTypeInternal _DeleteBinaryDataByFilterRequest_default_instance_;
class DeleteBinaryDataByFilterResponse;
struct DeleteBinaryDataByFilterResponseDefaultTypeInternal;
extern DeleteBinaryDataByFilterResponseDefaultTypeInternal _DeleteBinaryDataByFilterResponse_default_instance_;
class DeleteBinaryDataByIDsRequest;
struct DeleteBinaryDataByIDsRequestDefaultTypeInternal;
extern DeleteBinaryDataByIDsRequestDefaultTypeInternal _DeleteBinaryDataByIDsRequest_default_instance_;
class DeleteBinaryDataByIDsResponse;
struct DeleteBinaryDataByIDsResponseDefaultTypeInternal;
extern DeleteBinaryDataByIDsResponseDefaultTypeInternal _DeleteBinaryDataByIDsResponse_default_instance_;
class DeleteTabularDataByFilterRequest;
struct DeleteTabularDataByFilterRequestDefaultTypeInternal;
extern DeleteTabularDataByFilterRequestDefaultTypeInternal _DeleteTabularDataByFilterRequest_default_instance_;
class DeleteTabularDataByFilterResponse;
struct DeleteTabularDataByFilterResponseDefaultTypeInternal;
extern DeleteTabularDataByFilterResponseDefaultTypeInternal _DeleteTabularDataByFilterResponse_default_instance_;
class Filter;
struct FilterDefaultTypeInternal;
extern FilterDefaultTypeInternal _Filter_default_instance_;
class RemoveTagsFromBinaryDataByFileIDsRequest;
struct RemoveTagsFromBinaryDataByFileIDsRequestDefaultTypeInternal;
extern RemoveTagsFromBinaryDataByFileIDsRequestDefaultTypeInternal _RemoveTagsFromBinaryDataByFileIDsRequest_default_instance_;
class RemoveTagsFromBinaryDataByFileIDsResponse;
struct RemoveTagsFromBinaryDataByFileIDsResponseDefaultTypeInternal;
extern RemoveTagsFromBinaryDataByFileIDsResponseDefaultTypeInternal _RemoveTagsFromBinaryDataByFileIDsResponse_default_instance_;
class RemoveTagsFromBinaryDataByFilterRequest;
struct RemoveTagsFromBinaryDataByFilterRequestDefaultTypeInternal;
extern RemoveTagsFromBinaryDataByFilterRequestDefaultTypeInternal _RemoveTagsFromBinaryDataByFilterRequest_default_instance_;
class RemoveTagsFromBinaryDataByFilterResponse;
struct RemoveTagsFromBinaryDataByFilterResponseDefaultTypeInternal;
extern RemoveTagsFromBinaryDataByFilterResponseDefaultTypeInternal _RemoveTagsFromBinaryDataByFilterResponse_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class TabularData;
struct TabularDataDefaultTypeInternal;
extern TabularDataDefaultTypeInternal _TabularData_default_instance_;
class TabularDataByFilterRequest;
struct TabularDataByFilterRequestDefaultTypeInternal;
extern TabularDataByFilterRequestDefaultTypeInternal _TabularDataByFilterRequest_default_instance_;
class TabularDataByFilterResponse;
struct TabularDataByFilterResponseDefaultTypeInternal;
extern TabularDataByFilterResponseDefaultTypeInternal _TabularDataByFilterResponse_default_instance_;
class TagsFilter;
struct TagsFilterDefaultTypeInternal;
extern TagsFilterDefaultTypeInternal _TagsFilter_default_instance_;
}  // namespace v1
}  // namespace data
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::app::data::v1::AddTagsToBinaryDataByFileIDsRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::AddTagsToBinaryDataByFileIDsRequest>(Arena*);
template<> ::viam::app::data::v1::AddTagsToBinaryDataByFileIDsResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::AddTagsToBinaryDataByFileIDsResponse>(Arena*);
template<> ::viam::app::data::v1::AddTagsToBinaryDataByFilterRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::AddTagsToBinaryDataByFilterRequest>(Arena*);
template<> ::viam::app::data::v1::AddTagsToBinaryDataByFilterResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::AddTagsToBinaryDataByFilterResponse>(Arena*);
template<> ::viam::app::data::v1::BinaryData* Arena::CreateMaybeMessage<::viam::app::data::v1::BinaryData>(Arena*);
template<> ::viam::app::data::v1::BinaryDataByFilterRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::BinaryDataByFilterRequest>(Arena*);
template<> ::viam::app::data::v1::BinaryDataByFilterResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::BinaryDataByFilterResponse>(Arena*);
template<> ::viam::app::data::v1::BinaryDataByIDsRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::BinaryDataByIDsRequest>(Arena*);
template<> ::viam::app::data::v1::BinaryDataByIDsResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::BinaryDataByIDsResponse>(Arena*);
template<> ::viam::app::data::v1::BinaryMetadata* Arena::CreateMaybeMessage<::viam::app::data::v1::BinaryMetadata>(Arena*);
template<> ::viam::app::data::v1::CaptureInterval* Arena::CreateMaybeMessage<::viam::app::data::v1::CaptureInterval>(Arena*);
template<> ::viam::app::data::v1::CaptureMetadata* Arena::CreateMaybeMessage<::viam::app::data::v1::CaptureMetadata>(Arena*);
template<> ::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::viam::app::data::v1::CaptureMetadata_MethodParametersEntry_DoNotUse>(Arena*);
template<> ::viam::app::data::v1::DataRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::DataRequest>(Arena*);
template<> ::viam::app::data::v1::DeleteBinaryDataByFilterRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::DeleteBinaryDataByFilterRequest>(Arena*);
template<> ::viam::app::data::v1::DeleteBinaryDataByFilterResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::DeleteBinaryDataByFilterResponse>(Arena*);
template<> ::viam::app::data::v1::DeleteBinaryDataByIDsRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::DeleteBinaryDataByIDsRequest>(Arena*);
template<> ::viam::app::data::v1::DeleteBinaryDataByIDsResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::DeleteBinaryDataByIDsResponse>(Arena*);
template<> ::viam::app::data::v1::DeleteTabularDataByFilterRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::DeleteTabularDataByFilterRequest>(Arena*);
template<> ::viam::app::data::v1::DeleteTabularDataByFilterResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::DeleteTabularDataByFilterResponse>(Arena*);
template<> ::viam::app::data::v1::Filter* Arena::CreateMaybeMessage<::viam::app::data::v1::Filter>(Arena*);
template<> ::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsRequest>(Arena*);
template<> ::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::RemoveTagsFromBinaryDataByFileIDsResponse>(Arena*);
template<> ::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterRequest>(Arena*);
template<> ::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::RemoveTagsFromBinaryDataByFilterResponse>(Arena*);
template<> ::viam::app::data::v1::Result* Arena::CreateMaybeMessage<::viam::app::data::v1::Result>(Arena*);
template<> ::viam::app::data::v1::TabularData* Arena::CreateMaybeMessage<::viam::app::data::v1::TabularData>(Arena*);
template<> ::viam::app::data::v1::TabularDataByFilterRequest* Arena::CreateMaybeMessage<::viam::app::data::v1::TabularDataByFilterRequest>(Arena*);
template<> ::viam::app::data::v1::TabularDataByFilterResponse* Arena::CreateMaybeMessage<::viam::app::data::v1::TabularDataByFilterResponse>(Arena*);
template<> ::viam::app::data::v1::TagsFilter* Arena::CreateMaybeMessage<::viam::app::data::v1::TagsFilter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace app {
namespace data {
namespace v1 {

enum Order : int {
  ORDER_UNSPECIFIED = 0,
  ORDER_DESCENDING = 1,
  ORDER_ASCENDING = 2,
  Order_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Order_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Order_IsValid(int value);
constexpr Order Order_MIN = ORDER_UNSPECIFIED;
constexpr Order Order_MAX = ORDER_ASCENDING;
constexpr int Order_ARRAYSIZE = Order_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_descriptor();
template<typename T>
inline const std::string& Order_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Order>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Order_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Order_descriptor(), enum_t_value);
}
inline bool Order_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Order* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Order>(
    Order_descriptor(), name, value);
}
enum Status : int {
  STATUS_UNSPECIFIED = 0,
  STATUS_PARTIAL_SUCCESS = 1,
  STATUS_SUCCESS = 2,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = STATUS_UNSPECIFIED;
constexpr Status Status_MAX = STATUS_SUCCESS;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
enum TagsFilterType : int {
  TAGS_FILTER_TYPE_UNSPECIFIED = 0,
  TAGS_FILTER_TYPE_MATCH_BY_OR = 1,
  TAGS_FILTER_TYPE_TAGGED = 2,
  TAGS_FILTER_TYPE_UNTAGGED = 3,
  TagsFilterType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TagsFilterType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TagsFilterType_IsValid(int value);
constexpr TagsFilterType TagsFilterType_MIN = TAGS_FILTER_TYPE_UNSPECIFIED;
constexpr TagsFilterType TagsFilterType_MAX = TAGS_FILTER_TYPE_UNTAGGED;
constexpr int TagsFilterType_ARRAYSIZE = TagsFilterType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TagsFilterType_descriptor();
template<typename T>
inline const std::string& TagsFilterType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TagsFilterType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TagsFilterType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TagsFilterType_descriptor(), enum_t_value);
}
inline bool TagsFilterType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TagsFilterType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TagsFilterType>(
    TagsFilterType_descriptor(), name, value);
}
// ===================================================================

class Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() override;
  explicit PROTOBUF_CONSTEXPR Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .viam.app.data.v1.Status status = 1 [json_name = "status"];
  void clear_status();
  ::viam::app::data::v1::Status status() const;
  void set_status(::viam::app::data::v1::Status value);
  private:
  ::viam::app::data::v1::Status _internal_status() const;
  void _internal_set_status(::viam::app::data::v1::Status value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.DataRequest) */ {
 public:
  inline DataRequest() : DataRequest(nullptr) {}
  ~DataRequest() override;
  explicit PROTOBUF_CONSTEXPR DataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataRequest(const DataRequest& from);
  DataRequest(DataRequest&& from) noexcept
    : DataRequest() {
    *this = ::std::move(from);
  }

  inline DataRequest& operator=(const DataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRequest& operator=(DataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataRequest* internal_default_instance() {
    return reinterpret_cast<const DataRequest*>(
               &_DataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataRequest& a, DataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.DataRequest";
  }
  protected:
  explicit DataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastFieldNumber = 3,
    kFilterFieldNumber = 1,
    kLimitFieldNumber = 2,
    kSortOrderFieldNumber = 4,
  };
  // string last = 3 [json_name = "last"];
  void clear_last();
  const std::string& last() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last();
  PROTOBUF_NODISCARD std::string* release_last();
  void set_allocated_last(std::string* last);
  private:
  const std::string& _internal_last() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last(const std::string& value);
  std::string* _internal_mutable_last();
  public:

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::viam::app::data::v1::Filter& filter() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::Filter* release_filter();
  ::viam::app::data::v1::Filter* mutable_filter();
  void set_allocated_filter(::viam::app::data::v1::Filter* filter);
  private:
  const ::viam::app::data::v1::Filter& _internal_filter() const;
  ::viam::app::data::v1::Filter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::viam::app::data::v1::Filter* filter);
  ::viam::app::data::v1::Filter* unsafe_arena_release_filter();

  // uint64 limit = 2 [json_name = "limit"];
  void clear_limit();
  uint64_t limit() const;
  void set_limit(uint64_t value);
  private:
  uint64_t _internal_limit() const;
  void _internal_set_limit(uint64_t value);
  public:

  // .viam.app.data.v1.Order sort_order = 4 [json_name = "sortOrder"];
  void clear_sort_order();
  ::viam::app::data::v1::Order sort_order() const;
  void set_sort_order(::viam::app::data::v1::Order value);
  private:
  ::viam::app::data::v1::Order _internal_sort_order() const;
  void _internal_set_sort_order(::viam::app::data::v1::Order value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.DataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_;
  ::viam::app::data::v1::Filter* filter_;
  uint64_t limit_;
  int sort_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class Filter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.Filter) */ {
 public:
  inline Filter() : Filter(nullptr) {}
  ~Filter() override;
  explicit PROTOBUF_CONSTEXPR Filter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Filter(const Filter& from);
  Filter(Filter&& from) noexcept
    : Filter() {
    *this = ::std::move(from);
  }

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filter& operator=(Filter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Filter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Filter* internal_default_instance() {
    return reinterpret_cast<const Filter*>(
               &_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Filter& a, Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Filter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Filter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Filter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Filter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.Filter";
  }
  protected:
  explicit Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 5,
    kLocationIdsFieldNumber = 10,
    kOrgIdsFieldNumber = 11,
    kMimeTypeFieldNumber = 12,
    kComponentNameFieldNumber = 1,
    kComponentTypeFieldNumber = 2,
    kComponentModelFieldNumber = 3,
    kMethodFieldNumber = 4,
    kRobotNameFieldNumber = 6,
    kRobotIdFieldNumber = 7,
    kPartNameFieldNumber = 8,
    kPartIdFieldNumber = 9,
    kIntervalFieldNumber = 13,
    kTagsFilterFieldNumber = 14,
  };
  // repeated string tags = 5 [json_name = "tags", deprecated = true];
  PROTOBUF_DEPRECATED int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_tags();
  PROTOBUF_DEPRECATED const std::string& tags(int index) const;
  PROTOBUF_DEPRECATED std::string* mutable_tags(int index);
  PROTOBUF_DEPRECATED void set_tags(int index, const std::string& value);
  PROTOBUF_DEPRECATED void set_tags(int index, std::string&& value);
  PROTOBUF_DEPRECATED void set_tags(int index, const char* value);
  PROTOBUF_DEPRECATED void set_tags(int index, const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* add_tags();
  PROTOBUF_DEPRECATED void add_tags(const std::string& value);
  PROTOBUF_DEPRECATED void add_tags(std::string&& value);
  PROTOBUF_DEPRECATED void add_tags(const char* value);
  PROTOBUF_DEPRECATED void add_tags(const char* value, size_t size);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated string location_ids = 10 [json_name = "locationIds"];
  int location_ids_size() const;
  private:
  int _internal_location_ids_size() const;
  public:
  void clear_location_ids();
  const std::string& location_ids(int index) const;
  std::string* mutable_location_ids(int index);
  void set_location_ids(int index, const std::string& value);
  void set_location_ids(int index, std::string&& value);
  void set_location_ids(int index, const char* value);
  void set_location_ids(int index, const char* value, size_t size);
  std::string* add_location_ids();
  void add_location_ids(const std::string& value);
  void add_location_ids(std::string&& value);
  void add_location_ids(const char* value);
  void add_location_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& location_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_location_ids();
  private:
  const std::string& _internal_location_ids(int index) const;
  std::string* _internal_add_location_ids();
  public:

  // repeated string org_ids = 11 [json_name = "orgIds"];
  int org_ids_size() const;
  private:
  int _internal_org_ids_size() const;
  public:
  void clear_org_ids();
  const std::string& org_ids(int index) const;
  std::string* mutable_org_ids(int index);
  void set_org_ids(int index, const std::string& value);
  void set_org_ids(int index, std::string&& value);
  void set_org_ids(int index, const char* value);
  void set_org_ids(int index, const char* value, size_t size);
  std::string* add_org_ids();
  void add_org_ids(const std::string& value);
  void add_org_ids(std::string&& value);
  void add_org_ids(const char* value);
  void add_org_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& org_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_org_ids();
  private:
  const std::string& _internal_org_ids(int index) const;
  std::string* _internal_add_org_ids();
  public:

  // repeated string mime_type = 12 [json_name = "mimeType"];
  int mime_type_size() const;
  private:
  int _internal_mime_type_size() const;
  public:
  void clear_mime_type();
  const std::string& mime_type(int index) const;
  std::string* mutable_mime_type(int index);
  void set_mime_type(int index, const std::string& value);
  void set_mime_type(int index, std::string&& value);
  void set_mime_type(int index, const char* value);
  void set_mime_type(int index, const char* value, size_t size);
  std::string* add_mime_type();
  void add_mime_type(const std::string& value);
  void add_mime_type(std::string&& value);
  void add_mime_type(const char* value);
  void add_mime_type(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mime_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mime_type();
  private:
  const std::string& _internal_mime_type(int index) const;
  std::string* _internal_add_mime_type();
  public:

  // string component_name = 1 [json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_name();
  PROTOBUF_NODISCARD std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // string component_type = 2 [json_name = "componentType"];
  void clear_component_type();
  const std::string& component_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_type();
  PROTOBUF_NODISCARD std::string* release_component_type();
  void set_allocated_component_type(std::string* component_type);
  private:
  const std::string& _internal_component_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_type(const std::string& value);
  std::string* _internal_mutable_component_type();
  public:

  // string component_model = 3 [json_name = "componentModel"];
  void clear_component_model();
  const std::string& component_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_model();
  PROTOBUF_NODISCARD std::string* release_component_model();
  void set_allocated_component_model(std::string* component_model);
  private:
  const std::string& _internal_component_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_model(const std::string& value);
  std::string* _internal_mutable_component_model();
  public:

  // string method = 4 [json_name = "method"];
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string robot_name = 6 [json_name = "robotName"];
  void clear_robot_name();
  const std::string& robot_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_name();
  PROTOBUF_NODISCARD std::string* release_robot_name();
  void set_allocated_robot_name(std::string* robot_name);
  private:
  const std::string& _internal_robot_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_name(const std::string& value);
  std::string* _internal_mutable_robot_name();
  public:

  // string robot_id = 7 [json_name = "robotId"];
  void clear_robot_id();
  const std::string& robot_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_id();
  PROTOBUF_NODISCARD std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string part_name = 8 [json_name = "partName"];
  void clear_part_name();
  const std::string& part_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_part_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_part_name();
  PROTOBUF_NODISCARD std::string* release_part_name();
  void set_allocated_part_name(std::string* part_name);
  private:
  const std::string& _internal_part_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_part_name(const std::string& value);
  std::string* _internal_mutable_part_name();
  public:

  // string part_id = 9 [json_name = "partId"];
  void clear_part_id();
  const std::string& part_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_part_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_part_id();
  PROTOBUF_NODISCARD std::string* release_part_id();
  void set_allocated_part_id(std::string* part_id);
  private:
  const std::string& _internal_part_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_part_id(const std::string& value);
  std::string* _internal_mutable_part_id();
  public:

  // .viam.app.data.v1.CaptureInterval interval = 13 [json_name = "interval"];
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;
  public:
  void clear_interval();
  const ::viam::app::data::v1::CaptureInterval& interval() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::CaptureInterval* release_interval();
  ::viam::app::data::v1::CaptureInterval* mutable_interval();
  void set_allocated_interval(::viam::app::data::v1::CaptureInterval* interval);
  private:
  const ::viam::app::data::v1::CaptureInterval& _internal_interval() const;
  ::viam::app::data::v1::CaptureInterval* _internal_mutable_interval();
  public:
  void unsafe_arena_set_allocated_interval(
      ::viam::app::data::v1::CaptureInterval* interval);
  ::viam::app::data::v1::CaptureInterval* unsafe_arena_release_interval();

  // .viam.app.data.v1.TagsFilter tags_filter = 14 [json_name = "tagsFilter"];
  bool has_tags_filter() const;
  private:
  bool _internal_has_tags_filter() const;
  public:
  void clear_tags_filter();
  const ::viam::app::data::v1::TagsFilter& tags_filter() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::TagsFilter* release_tags_filter();
  ::viam::app::data::v1::TagsFilter* mutable_tags_filter();
  void set_allocated_tags_filter(::viam::app::data::v1::TagsFilter* tags_filter);
  private:
  const ::viam::app::data::v1::TagsFilter& _internal_tags_filter() const;
  ::viam::app::data::v1::TagsFilter* _internal_mutable_tags_filter();
  public:
  void unsafe_arena_set_allocated_tags_filter(
      ::viam::app::data::v1::TagsFilter* tags_filter);
  ::viam::app::data::v1::TagsFilter* unsafe_arena_release_tags_filter();

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> location_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> org_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mime_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr part_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr part_id_;
  ::viam::app::data::v1::CaptureInterval* interval_;
  ::viam::app::data::v1::TagsFilter* tags_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class TagsFilter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.TagsFilter) */ {
 public:
  inline TagsFilter() : TagsFilter(nullptr) {}
  ~TagsFilter() override;
  explicit PROTOBUF_CONSTEXPR TagsFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TagsFilter(const TagsFilter& from);
  TagsFilter(TagsFilter&& from) noexcept
    : TagsFilter() {
    *this = ::std::move(from);
  }

  inline TagsFilter& operator=(const TagsFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagsFilter& operator=(TagsFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TagsFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TagsFilter* internal_default_instance() {
    return reinterpret_cast<const TagsFilter*>(
               &_TagsFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TagsFilter& a, TagsFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(TagsFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TagsFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TagsFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TagsFilter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TagsFilter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TagsFilter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagsFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.TagsFilter";
  }
  protected:
  explicit TagsFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated string tags = 2 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // .viam.app.data.v1.TagsFilterType type = 1 [json_name = "type"];
  void clear_type();
  ::viam::app::data::v1::TagsFilterType type() const;
  void set_type(::viam::app::data::v1::TagsFilterType value);
  private:
  ::viam::app::data::v1::TagsFilterType _internal_type() const;
  void _internal_set_type(::viam::app::data::v1::TagsFilterType value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.TagsFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class CaptureMetadata_MethodParametersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CaptureMetadata_MethodParametersEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CaptureMetadata_MethodParametersEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  CaptureMetadata_MethodParametersEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CaptureMetadata_MethodParametersEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CaptureMetadata_MethodParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CaptureMetadata_MethodParametersEntry_DoNotUse& other);
  static const CaptureMetadata_MethodParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CaptureMetadata_MethodParametersEntry_DoNotUse*>(&_CaptureMetadata_MethodParametersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "viam.app.data.v1.CaptureMetadata.MethodParametersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};

// -------------------------------------------------------------------

class CaptureMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.CaptureMetadata) */ {
 public:
  inline CaptureMetadata() : CaptureMetadata(nullptr) {}
  ~CaptureMetadata() override;
  explicit PROTOBUF_CONSTEXPR CaptureMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptureMetadata(const CaptureMetadata& from);
  CaptureMetadata(CaptureMetadata&& from) noexcept
    : CaptureMetadata() {
    *this = ::std::move(from);
  }

  inline CaptureMetadata& operator=(const CaptureMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureMetadata& operator=(CaptureMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaptureMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptureMetadata* internal_default_instance() {
    return reinterpret_cast<const CaptureMetadata*>(
               &_CaptureMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CaptureMetadata& a, CaptureMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptureMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptureMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CaptureMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CaptureMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptureMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.CaptureMetadata";
  }
  protected:
  explicit CaptureMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMethodParametersFieldNumber = 11,
    kTagsFieldNumber = 12,
    kOrgIdFieldNumber = 1,
    kLocationIdFieldNumber = 2,
    kRobotNameFieldNumber = 3,
    kRobotIdFieldNumber = 4,
    kPartNameFieldNumber = 5,
    kPartIdFieldNumber = 6,
    kComponentTypeFieldNumber = 7,
    kComponentModelFieldNumber = 8,
    kComponentNameFieldNumber = 9,
    kMethodNameFieldNumber = 10,
    kMimeTypeFieldNumber = 13,
  };
  // map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters"];
  int method_parameters_size() const;
  private:
  int _internal_method_parameters_size() const;
  public:
  void clear_method_parameters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
      _internal_method_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
      _internal_mutable_method_parameters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
      method_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_method_parameters();

  // repeated string tags = 12 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string location_id = 2 [json_name = "locationId"];
  void clear_location_id();
  const std::string& location_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location_id();
  PROTOBUF_NODISCARD std::string* release_location_id();
  void set_allocated_location_id(std::string* location_id);
  private:
  const std::string& _internal_location_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location_id(const std::string& value);
  std::string* _internal_mutable_location_id();
  public:

  // string robot_name = 3 [json_name = "robotName"];
  void clear_robot_name();
  const std::string& robot_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_name();
  PROTOBUF_NODISCARD std::string* release_robot_name();
  void set_allocated_robot_name(std::string* robot_name);
  private:
  const std::string& _internal_robot_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_name(const std::string& value);
  std::string* _internal_mutable_robot_name();
  public:

  // string robot_id = 4 [json_name = "robotId"];
  void clear_robot_id();
  const std::string& robot_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_id();
  PROTOBUF_NODISCARD std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string part_name = 5 [json_name = "partName"];
  void clear_part_name();
  const std::string& part_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_part_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_part_name();
  PROTOBUF_NODISCARD std::string* release_part_name();
  void set_allocated_part_name(std::string* part_name);
  private:
  const std::string& _internal_part_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_part_name(const std::string& value);
  std::string* _internal_mutable_part_name();
  public:

  // string part_id = 6 [json_name = "partId"];
  void clear_part_id();
  const std::string& part_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_part_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_part_id();
  PROTOBUF_NODISCARD std::string* release_part_id();
  void set_allocated_part_id(std::string* part_id);
  private:
  const std::string& _internal_part_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_part_id(const std::string& value);
  std::string* _internal_mutable_part_id();
  public:

  // string component_type = 7 [json_name = "componentType"];
  void clear_component_type();
  const std::string& component_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_type();
  PROTOBUF_NODISCARD std::string* release_component_type();
  void set_allocated_component_type(std::string* component_type);
  private:
  const std::string& _internal_component_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_type(const std::string& value);
  std::string* _internal_mutable_component_type();
  public:

  // string component_model = 8 [json_name = "componentModel"];
  void clear_component_model();
  const std::string& component_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_model();
  PROTOBUF_NODISCARD std::string* release_component_model();
  void set_allocated_component_model(std::string* component_model);
  private:
  const std::string& _internal_component_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_model(const std::string& value);
  std::string* _internal_mutable_component_model();
  public:

  // string component_name = 9 [json_name = "componentName"];
  void clear_component_name();
  const std::string& component_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_component_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_component_name();
  PROTOBUF_NODISCARD std::string* release_component_name();
  void set_allocated_component_name(std::string* component_name);
  private:
  const std::string& _internal_component_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_component_name(const std::string& value);
  std::string* _internal_mutable_component_name();
  public:

  // string method_name = 10 [json_name = "methodName"];
  void clear_method_name();
  const std::string& method_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method_name();
  PROTOBUF_NODISCARD std::string* release_method_name();
  void set_allocated_method_name(std::string* method_name);
  private:
  const std::string& _internal_method_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method_name(const std::string& value);
  std::string* _internal_mutable_method_name();
  public:

  // string mime_type = 13 [json_name = "mimeType"];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.CaptureMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CaptureMetadata_MethodParametersEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::Any,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> method_parameters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr part_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr part_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr component_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class CaptureInterval final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.CaptureInterval) */ {
 public:
  inline CaptureInterval() : CaptureInterval(nullptr) {}
  ~CaptureInterval() override;
  explicit PROTOBUF_CONSTEXPR CaptureInterval(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptureInterval(const CaptureInterval& from);
  CaptureInterval(CaptureInterval&& from) noexcept
    : CaptureInterval() {
    *this = ::std::move(from);
  }

  inline CaptureInterval& operator=(const CaptureInterval& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureInterval& operator=(CaptureInterval&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaptureInterval& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptureInterval* internal_default_instance() {
    return reinterpret_cast<const CaptureInterval*>(
               &_CaptureInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CaptureInterval& a, CaptureInterval& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureInterval* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureInterval* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptureInterval* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptureInterval>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CaptureInterval& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CaptureInterval& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptureInterval* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.CaptureInterval";
  }
  protected:
  explicit CaptureInterval(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start = 1 [json_name = "start"];
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start();
  void set_allocated_start(::PROTOBUF_NAMESPACE_ID::Timestamp* start);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start();

  // .google.protobuf.Timestamp end = 2 [json_name = "end"];
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end();
  void set_allocated_end(::PROTOBUF_NAMESPACE_ID::Timestamp* end);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.CaptureInterval)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* start_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class TabularDataByFilterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.TabularDataByFilterRequest) */ {
 public:
  inline TabularDataByFilterRequest() : TabularDataByFilterRequest(nullptr) {}
  ~TabularDataByFilterRequest() override;
  explicit PROTOBUF_CONSTEXPR TabularDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TabularDataByFilterRequest(const TabularDataByFilterRequest& from);
  TabularDataByFilterRequest(TabularDataByFilterRequest&& from) noexcept
    : TabularDataByFilterRequest() {
    *this = ::std::move(from);
  }

  inline TabularDataByFilterRequest& operator=(const TabularDataByFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TabularDataByFilterRequest& operator=(TabularDataByFilterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TabularDataByFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TabularDataByFilterRequest* internal_default_instance() {
    return reinterpret_cast<const TabularDataByFilterRequest*>(
               &_TabularDataByFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TabularDataByFilterRequest& a, TabularDataByFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TabularDataByFilterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TabularDataByFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TabularDataByFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TabularDataByFilterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TabularDataByFilterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TabularDataByFilterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TabularDataByFilterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.TabularDataByFilterRequest";
  }
  protected:
  explicit TabularDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataRequestFieldNumber = 1,
    kCountOnlyFieldNumber = 2,
  };
  // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
  bool has_data_request() const;
  private:
  bool _internal_has_data_request() const;
  public:
  void clear_data_request();
  const ::viam::app::data::v1::DataRequest& data_request() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::DataRequest* release_data_request();
  ::viam::app::data::v1::DataRequest* mutable_data_request();
  void set_allocated_data_request(::viam::app::data::v1::DataRequest* data_request);
  private:
  const ::viam::app::data::v1::DataRequest& _internal_data_request() const;
  ::viam::app::data::v1::DataRequest* _internal_mutable_data_request();
  public:
  void unsafe_arena_set_allocated_data_request(
      ::viam::app::data::v1::DataRequest* data_request);
  ::viam::app::data::v1::DataRequest* unsafe_arena_release_data_request();

  // bool count_only = 2 [json_name = "countOnly"];
  void clear_count_only();
  bool count_only() const;
  void set_count_only(bool value);
  private:
  bool _internal_count_only() const;
  void _internal_set_count_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.TabularDataByFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::app::data::v1::DataRequest* data_request_;
  bool count_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class TabularDataByFilterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.TabularDataByFilterResponse) */ {
 public:
  inline TabularDataByFilterResponse() : TabularDataByFilterResponse(nullptr) {}
  ~TabularDataByFilterResponse() override;
  explicit PROTOBUF_CONSTEXPR TabularDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TabularDataByFilterResponse(const TabularDataByFilterResponse& from);
  TabularDataByFilterResponse(TabularDataByFilterResponse&& from) noexcept
    : TabularDataByFilterResponse() {
    *this = ::std::move(from);
  }

  inline TabularDataByFilterResponse& operator=(const TabularDataByFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TabularDataByFilterResponse& operator=(TabularDataByFilterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TabularDataByFilterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TabularDataByFilterResponse* internal_default_instance() {
    return reinterpret_cast<const TabularDataByFilterResponse*>(
               &_TabularDataByFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TabularDataByFilterResponse& a, TabularDataByFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TabularDataByFilterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TabularDataByFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TabularDataByFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TabularDataByFilterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TabularDataByFilterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TabularDataByFilterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TabularDataByFilterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.TabularDataByFilterResponse";
  }
  protected:
  explicit TabularDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kDataFieldNumber = 2,
    kLastFieldNumber = 4,
    kCountFieldNumber = 3,
  };
  // repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::viam::app::data::v1::CaptureMetadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >*
      mutable_metadata();
  private:
  const ::viam::app::data::v1::CaptureMetadata& _internal_metadata(int index) const;
  ::viam::app::data::v1::CaptureMetadata* _internal_add_metadata();
  public:
  const ::viam::app::data::v1::CaptureMetadata& metadata(int index) const;
  ::viam::app::data::v1::CaptureMetadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >&
      metadata() const;

  // repeated .viam.app.data.v1.TabularData data = 2 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::viam::app::data::v1::TabularData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::TabularData >*
      mutable_data();
  private:
  const ::viam::app::data::v1::TabularData& _internal_data(int index) const;
  ::viam::app::data::v1::TabularData* _internal_add_data();
  public:
  const ::viam::app::data::v1::TabularData& data(int index) const;
  ::viam::app::data::v1::TabularData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::TabularData >&
      data() const;

  // string last = 4 [json_name = "last"];
  void clear_last();
  const std::string& last() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last();
  PROTOBUF_NODISCARD std::string* release_last();
  void set_allocated_last(std::string* last);
  private:
  const std::string& _internal_last() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last(const std::string& value);
  std::string* _internal_mutable_last();
  public:

  // int64 count = 3 [json_name = "count"];
  void clear_count();
  int64_t count() const;
  void set_count(int64_t value);
  private:
  int64_t _internal_count() const;
  void _internal_set_count(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.TabularDataByFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata > metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::TabularData > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_;
  int64_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class TabularData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.TabularData) */ {
 public:
  inline TabularData() : TabularData(nullptr) {}
  ~TabularData() override;
  explicit PROTOBUF_CONSTEXPR TabularData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TabularData(const TabularData& from);
  TabularData(TabularData&& from) noexcept
    : TabularData() {
    *this = ::std::move(from);
  }

  inline TabularData& operator=(const TabularData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TabularData& operator=(TabularData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TabularData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TabularData* internal_default_instance() {
    return reinterpret_cast<const TabularData*>(
               &_TabularData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TabularData& a, TabularData& b) {
    a.Swap(&b);
  }
  inline void Swap(TabularData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TabularData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TabularData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TabularData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TabularData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TabularData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TabularData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.TabularData";
  }
  protected:
  explicit TabularData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kTimeRequestedFieldNumber = 3,
    kTimeReceivedFieldNumber = 4,
    kMetadataIndexFieldNumber = 2,
  };
  // .google.protobuf.Struct data = 1 [json_name = "data"];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::PROTOBUF_NAMESPACE_ID::Struct& data() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_data();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_data();
  void set_allocated_data(::PROTOBUF_NAMESPACE_ID::Struct* data);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_data() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::PROTOBUF_NAMESPACE_ID::Struct* data);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_data();

  // .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
  bool has_time_requested() const;
  private:
  bool _internal_has_time_requested() const;
  public:
  void clear_time_requested();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_requested() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time_requested();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_requested();
  void set_allocated_time_requested(::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_requested() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_requested();
  public:
  void unsafe_arena_set_allocated_time_requested(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_requested();

  // .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
  bool has_time_received() const;
  private:
  bool _internal_has_time_received() const;
  public:
  void clear_time_received();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_received() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time_received();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_received();
  void set_allocated_time_received(::PROTOBUF_NAMESPACE_ID::Timestamp* time_received);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_received() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_received();
  public:
  void unsafe_arena_set_allocated_time_received(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time_received);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_received();

  // int32 metadata_index = 2 [json_name = "metadataIndex"];
  void clear_metadata_index();
  int32_t metadata_index() const;
  void set_metadata_index(int32_t value);
  private:
  int32_t _internal_metadata_index() const;
  void _internal_set_metadata_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.TabularData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Struct* data_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* time_received_;
  int32_t metadata_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class BinaryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.BinaryData) */ {
 public:
  inline BinaryData() : BinaryData(nullptr) {}
  ~BinaryData() override;
  explicit PROTOBUF_CONSTEXPR BinaryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryData(const BinaryData& from);
  BinaryData(BinaryData&& from) noexcept
    : BinaryData() {
    *this = ::std::move(from);
  }

  inline BinaryData& operator=(const BinaryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryData& operator=(BinaryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryData* internal_default_instance() {
    return reinterpret_cast<const BinaryData*>(
               &_BinaryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BinaryData& a, BinaryData& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BinaryData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.BinaryData";
  }
  protected:
  explicit BinaryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinaryFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // bytes binary = 1 [json_name = "binary"];
  void clear_binary();
  const std::string& binary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_binary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_binary();
  PROTOBUF_NODISCARD std::string* release_binary();
  void set_allocated_binary(std::string* binary);
  private:
  const std::string& _internal_binary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary(const std::string& value);
  std::string* _internal_mutable_binary();
  public:

  // .viam.app.data.v1.BinaryMetadata metadata = 2 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::viam::app::data::v1::BinaryMetadata& metadata() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::BinaryMetadata* release_metadata();
  ::viam::app::data::v1::BinaryMetadata* mutable_metadata();
  void set_allocated_metadata(::viam::app::data::v1::BinaryMetadata* metadata);
  private:
  const ::viam::app::data::v1::BinaryMetadata& _internal_metadata() const;
  ::viam::app::data::v1::BinaryMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::viam::app::data::v1::BinaryMetadata* metadata);
  ::viam::app::data::v1::BinaryMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.BinaryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_;
  ::viam::app::data::v1::BinaryMetadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class BinaryDataByFilterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.BinaryDataByFilterRequest) */ {
 public:
  inline BinaryDataByFilterRequest() : BinaryDataByFilterRequest(nullptr) {}
  ~BinaryDataByFilterRequest() override;
  explicit PROTOBUF_CONSTEXPR BinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryDataByFilterRequest(const BinaryDataByFilterRequest& from);
  BinaryDataByFilterRequest(BinaryDataByFilterRequest&& from) noexcept
    : BinaryDataByFilterRequest() {
    *this = ::std::move(from);
  }

  inline BinaryDataByFilterRequest& operator=(const BinaryDataByFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryDataByFilterRequest& operator=(BinaryDataByFilterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryDataByFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryDataByFilterRequest* internal_default_instance() {
    return reinterpret_cast<const BinaryDataByFilterRequest*>(
               &_BinaryDataByFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BinaryDataByFilterRequest& a, BinaryDataByFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryDataByFilterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryDataByFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryDataByFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryDataByFilterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryDataByFilterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BinaryDataByFilterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryDataByFilterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.BinaryDataByFilterRequest";
  }
  protected:
  explicit BinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataRequestFieldNumber = 1,
    kIncludeBinaryFieldNumber = 2,
    kCountOnlyFieldNumber = 3,
  };
  // .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
  bool has_data_request() const;
  private:
  bool _internal_has_data_request() const;
  public:
  void clear_data_request();
  const ::viam::app::data::v1::DataRequest& data_request() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::DataRequest* release_data_request();
  ::viam::app::data::v1::DataRequest* mutable_data_request();
  void set_allocated_data_request(::viam::app::data::v1::DataRequest* data_request);
  private:
  const ::viam::app::data::v1::DataRequest& _internal_data_request() const;
  ::viam::app::data::v1::DataRequest* _internal_mutable_data_request();
  public:
  void unsafe_arena_set_allocated_data_request(
      ::viam::app::data::v1::DataRequest* data_request);
  ::viam::app::data::v1::DataRequest* unsafe_arena_release_data_request();

  // bool include_binary = 2 [json_name = "includeBinary"];
  void clear_include_binary();
  bool include_binary() const;
  void set_include_binary(bool value);
  private:
  bool _internal_include_binary() const;
  void _internal_set_include_binary(bool value);
  public:

  // bool count_only = 3 [json_name = "countOnly"];
  void clear_count_only();
  bool count_only() const;
  void set_count_only(bool value);
  private:
  bool _internal_count_only() const;
  void _internal_set_count_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.BinaryDataByFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::app::data::v1::DataRequest* data_request_;
  bool include_binary_;
  bool count_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class BinaryDataByFilterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.BinaryDataByFilterResponse) */ {
 public:
  inline BinaryDataByFilterResponse() : BinaryDataByFilterResponse(nullptr) {}
  ~BinaryDataByFilterResponse() override;
  explicit PROTOBUF_CONSTEXPR BinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryDataByFilterResponse(const BinaryDataByFilterResponse& from);
  BinaryDataByFilterResponse(BinaryDataByFilterResponse&& from) noexcept
    : BinaryDataByFilterResponse() {
    *this = ::std::move(from);
  }

  inline BinaryDataByFilterResponse& operator=(const BinaryDataByFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryDataByFilterResponse& operator=(BinaryDataByFilterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryDataByFilterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryDataByFilterResponse* internal_default_instance() {
    return reinterpret_cast<const BinaryDataByFilterResponse*>(
               &_BinaryDataByFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BinaryDataByFilterResponse& a, BinaryDataByFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryDataByFilterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryDataByFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryDataByFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryDataByFilterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryDataByFilterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BinaryDataByFilterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryDataByFilterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.BinaryDataByFilterResponse";
  }
  protected:
  explicit BinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kLastFieldNumber = 3,
    kCountFieldNumber = 2,
  };
  // repeated .viam.app.data.v1.BinaryData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::viam::app::data::v1::BinaryData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >*
      mutable_data();
  private:
  const ::viam::app::data::v1::BinaryData& _internal_data(int index) const;
  ::viam::app::data::v1::BinaryData* _internal_add_data();
  public:
  const ::viam::app::data::v1::BinaryData& data(int index) const;
  ::viam::app::data::v1::BinaryData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >&
      data() const;

  // string last = 3 [json_name = "last"];
  void clear_last();
  const std::string& last() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last();
  PROTOBUF_NODISCARD std::string* release_last();
  void set_allocated_last(std::string* last);
  private:
  const std::string& _internal_last() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last(const std::string& value);
  std::string* _internal_mutable_last();
  public:

  // uint64 count = 2 [json_name = "count"];
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.BinaryDataByFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_;
  uint64_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class BinaryDataByIDsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.BinaryDataByIDsRequest) */ {
 public:
  inline BinaryDataByIDsRequest() : BinaryDataByIDsRequest(nullptr) {}
  ~BinaryDataByIDsRequest() override;
  explicit PROTOBUF_CONSTEXPR BinaryDataByIDsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryDataByIDsRequest(const BinaryDataByIDsRequest& from);
  BinaryDataByIDsRequest(BinaryDataByIDsRequest&& from) noexcept
    : BinaryDataByIDsRequest() {
    *this = ::std::move(from);
  }

  inline BinaryDataByIDsRequest& operator=(const BinaryDataByIDsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryDataByIDsRequest& operator=(BinaryDataByIDsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryDataByIDsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryDataByIDsRequest* internal_default_instance() {
    return reinterpret_cast<const BinaryDataByIDsRequest*>(
               &_BinaryDataByIDsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BinaryDataByIDsRequest& a, BinaryDataByIDsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryDataByIDsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryDataByIDsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryDataByIDsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryDataByIDsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryDataByIDsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BinaryDataByIDsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryDataByIDsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.BinaryDataByIDsRequest";
  }
  protected:
  explicit BinaryDataByIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdsFieldNumber = 1,
    kIncludeBinaryFieldNumber = 2,
  };
  // repeated string file_ids = 1 [json_name = "fileIds"];
  int file_ids_size() const;
  private:
  int _internal_file_ids_size() const;
  public:
  void clear_file_ids();
  const std::string& file_ids(int index) const;
  std::string* mutable_file_ids(int index);
  void set_file_ids(int index, const std::string& value);
  void set_file_ids(int index, std::string&& value);
  void set_file_ids(int index, const char* value);
  void set_file_ids(int index, const char* value, size_t size);
  std::string* add_file_ids();
  void add_file_ids(const std::string& value);
  void add_file_ids(std::string&& value);
  void add_file_ids(const char* value);
  void add_file_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_ids();
  private:
  const std::string& _internal_file_ids(int index) const;
  std::string* _internal_add_file_ids();
  public:

  // bool include_binary = 2 [json_name = "includeBinary"];
  void clear_include_binary();
  bool include_binary() const;
  void set_include_binary(bool value);
  private:
  bool _internal_include_binary() const;
  void _internal_set_include_binary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.BinaryDataByIDsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_ids_;
  bool include_binary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class BinaryDataByIDsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.BinaryDataByIDsResponse) */ {
 public:
  inline BinaryDataByIDsResponse() : BinaryDataByIDsResponse(nullptr) {}
  ~BinaryDataByIDsResponse() override;
  explicit PROTOBUF_CONSTEXPR BinaryDataByIDsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryDataByIDsResponse(const BinaryDataByIDsResponse& from);
  BinaryDataByIDsResponse(BinaryDataByIDsResponse&& from) noexcept
    : BinaryDataByIDsResponse() {
    *this = ::std::move(from);
  }

  inline BinaryDataByIDsResponse& operator=(const BinaryDataByIDsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryDataByIDsResponse& operator=(BinaryDataByIDsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryDataByIDsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryDataByIDsResponse* internal_default_instance() {
    return reinterpret_cast<const BinaryDataByIDsResponse*>(
               &_BinaryDataByIDsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BinaryDataByIDsResponse& a, BinaryDataByIDsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryDataByIDsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryDataByIDsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryDataByIDsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryDataByIDsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryDataByIDsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BinaryDataByIDsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryDataByIDsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.BinaryDataByIDsResponse";
  }
  protected:
  explicit BinaryDataByIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kLastFieldNumber = 3,
    kCountFieldNumber = 2,
  };
  // repeated .viam.app.data.v1.BinaryData data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::viam::app::data::v1::BinaryData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >*
      mutable_data();
  private:
  const ::viam::app::data::v1::BinaryData& _internal_data(int index) const;
  ::viam::app::data::v1::BinaryData* _internal_add_data();
  public:
  const ::viam::app::data::v1::BinaryData& data(int index) const;
  ::viam::app::data::v1::BinaryData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >&
      data() const;

  // string last = 3 [json_name = "last"];
  void clear_last();
  const std::string& last() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last();
  PROTOBUF_NODISCARD std::string* release_last();
  void set_allocated_last(std::string* last);
  private:
  const std::string& _internal_last() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last(const std::string& value);
  std::string* _internal_mutable_last();
  public:

  // uint64 count = 2 [json_name = "count"];
  void clear_count();
  uint64_t count() const;
  void set_count(uint64_t value);
  private:
  uint64_t _internal_count() const;
  void _internal_set_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.BinaryDataByIDsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData > data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_;
  uint64_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class BinaryMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.BinaryMetadata) */ {
 public:
  inline BinaryMetadata() : BinaryMetadata(nullptr) {}
  ~BinaryMetadata() override;
  explicit PROTOBUF_CONSTEXPR BinaryMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryMetadata(const BinaryMetadata& from);
  BinaryMetadata(BinaryMetadata&& from) noexcept
    : BinaryMetadata() {
    *this = ::std::move(from);
  }

  inline BinaryMetadata& operator=(const BinaryMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryMetadata& operator=(BinaryMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryMetadata* internal_default_instance() {
    return reinterpret_cast<const BinaryMetadata*>(
               &_BinaryMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BinaryMetadata& a, BinaryMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BinaryMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.BinaryMetadata";
  }
  protected:
  explicit BinaryMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kFileNameFieldNumber = 5,
    kFileExtFieldNumber = 6,
    kUriFieldNumber = 7,
    kCaptureMetadataFieldNumber = 2,
    kTimeRequestedFieldNumber = 3,
    kTimeReceivedFieldNumber = 4,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string file_name = 5 [json_name = "fileName"];
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string file_ext = 6 [json_name = "fileExt"];
  void clear_file_ext();
  const std::string& file_ext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_ext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_ext();
  PROTOBUF_NODISCARD std::string* release_file_ext();
  void set_allocated_file_ext(std::string* file_ext);
  private:
  const std::string& _internal_file_ext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_ext(const std::string& value);
  std::string* _internal_mutable_file_ext();
  public:

  // string uri = 7 [json_name = "uri"];
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // .viam.app.data.v1.CaptureMetadata capture_metadata = 2 [json_name = "captureMetadata"];
  bool has_capture_metadata() const;
  private:
  bool _internal_has_capture_metadata() const;
  public:
  void clear_capture_metadata();
  const ::viam::app::data::v1::CaptureMetadata& capture_metadata() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::CaptureMetadata* release_capture_metadata();
  ::viam::app::data::v1::CaptureMetadata* mutable_capture_metadata();
  void set_allocated_capture_metadata(::viam::app::data::v1::CaptureMetadata* capture_metadata);
  private:
  const ::viam::app::data::v1::CaptureMetadata& _internal_capture_metadata() const;
  ::viam::app::data::v1::CaptureMetadata* _internal_mutable_capture_metadata();
  public:
  void unsafe_arena_set_allocated_capture_metadata(
      ::viam::app::data::v1::CaptureMetadata* capture_metadata);
  ::viam::app::data::v1::CaptureMetadata* unsafe_arena_release_capture_metadata();

  // .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
  bool has_time_requested() const;
  private:
  bool _internal_has_time_requested() const;
  public:
  void clear_time_requested();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_requested() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time_requested();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_requested();
  void set_allocated_time_requested(::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_requested() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_requested();
  public:
  void unsafe_arena_set_allocated_time_requested(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_requested();

  // .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
  bool has_time_received() const;
  private:
  bool _internal_has_time_received() const;
  public:
  void clear_time_received();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_received() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time_received();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_received();
  void set_allocated_time_received(::PROTOBUF_NAMESPACE_ID::Timestamp* time_received);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_received() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_received();
  public:
  void unsafe_arena_set_allocated_time_received(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time_received);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_received();

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.BinaryMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_ext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::viam::app::data::v1::CaptureMetadata* capture_metadata_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* time_received_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DeleteTabularDataByFilterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.DeleteTabularDataByFilterRequest) */ {
 public:
  inline DeleteTabularDataByFilterRequest() : DeleteTabularDataByFilterRequest(nullptr) {}
  ~DeleteTabularDataByFilterRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteTabularDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTabularDataByFilterRequest(const DeleteTabularDataByFilterRequest& from);
  DeleteTabularDataByFilterRequest(DeleteTabularDataByFilterRequest&& from) noexcept
    : DeleteTabularDataByFilterRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTabularDataByFilterRequest& operator=(const DeleteTabularDataByFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTabularDataByFilterRequest& operator=(DeleteTabularDataByFilterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTabularDataByFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTabularDataByFilterRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTabularDataByFilterRequest*>(
               &_DeleteTabularDataByFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeleteTabularDataByFilterRequest& a, DeleteTabularDataByFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTabularDataByFilterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTabularDataByFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteTabularDataByFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteTabularDataByFilterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTabularDataByFilterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteTabularDataByFilterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTabularDataByFilterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.DeleteTabularDataByFilterRequest";
  }
  protected:
  explicit DeleteTabularDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
  };
  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::viam::app::data::v1::Filter& filter() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::Filter* release_filter();
  ::viam::app::data::v1::Filter* mutable_filter();
  void set_allocated_filter(::viam::app::data::v1::Filter* filter);
  private:
  const ::viam::app::data::v1::Filter& _internal_filter() const;
  ::viam::app::data::v1::Filter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::viam::app::data::v1::Filter* filter);
  ::viam::app::data::v1::Filter* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.DeleteTabularDataByFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::app::data::v1::Filter* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DeleteTabularDataByFilterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.DeleteTabularDataByFilterResponse) */ {
 public:
  inline DeleteTabularDataByFilterResponse() : DeleteTabularDataByFilterResponse(nullptr) {}
  ~DeleteTabularDataByFilterResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteTabularDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTabularDataByFilterResponse(const DeleteTabularDataByFilterResponse& from);
  DeleteTabularDataByFilterResponse(DeleteTabularDataByFilterResponse&& from) noexcept
    : DeleteTabularDataByFilterResponse() {
    *this = ::std::move(from);
  }

  inline DeleteTabularDataByFilterResponse& operator=(const DeleteTabularDataByFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTabularDataByFilterResponse& operator=(DeleteTabularDataByFilterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTabularDataByFilterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTabularDataByFilterResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteTabularDataByFilterResponse*>(
               &_DeleteTabularDataByFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeleteTabularDataByFilterResponse& a, DeleteTabularDataByFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTabularDataByFilterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTabularDataByFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteTabularDataByFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteTabularDataByFilterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTabularDataByFilterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteTabularDataByFilterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTabularDataByFilterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.DeleteTabularDataByFilterResponse";
  }
  protected:
  explicit DeleteTabularDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kDeletedCountFieldNumber = 1,
  };
  // .viam.app.data.v1.Result result = 2 [json_name = "result"];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::viam::app::data::v1::Result& result() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::Result* release_result();
  ::viam::app::data::v1::Result* mutable_result();
  void set_allocated_result(::viam::app::data::v1::Result* result);
  private:
  const ::viam::app::data::v1::Result& _internal_result() const;
  ::viam::app::data::v1::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::viam::app::data::v1::Result* result);
  ::viam::app::data::v1::Result* unsafe_arena_release_result();

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  void clear_deleted_count();
  uint64_t deleted_count() const;
  void set_deleted_count(uint64_t value);
  private:
  uint64_t _internal_deleted_count() const;
  void _internal_set_deleted_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.DeleteTabularDataByFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::app::data::v1::Result* result_;
  uint64_t deleted_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DeleteBinaryDataByFilterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.DeleteBinaryDataByFilterRequest) */ {
 public:
  inline DeleteBinaryDataByFilterRequest() : DeleteBinaryDataByFilterRequest(nullptr) {}
  ~DeleteBinaryDataByFilterRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteBinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteBinaryDataByFilterRequest(const DeleteBinaryDataByFilterRequest& from);
  DeleteBinaryDataByFilterRequest(DeleteBinaryDataByFilterRequest&& from) noexcept
    : DeleteBinaryDataByFilterRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBinaryDataByFilterRequest& operator=(const DeleteBinaryDataByFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBinaryDataByFilterRequest& operator=(DeleteBinaryDataByFilterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteBinaryDataByFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteBinaryDataByFilterRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBinaryDataByFilterRequest*>(
               &_DeleteBinaryDataByFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteBinaryDataByFilterRequest& a, DeleteBinaryDataByFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBinaryDataByFilterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBinaryDataByFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteBinaryDataByFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteBinaryDataByFilterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteBinaryDataByFilterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteBinaryDataByFilterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBinaryDataByFilterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.DeleteBinaryDataByFilterRequest";
  }
  protected:
  explicit DeleteBinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
  };
  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::viam::app::data::v1::Filter& filter() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::Filter* release_filter();
  ::viam::app::data::v1::Filter* mutable_filter();
  void set_allocated_filter(::viam::app::data::v1::Filter* filter);
  private:
  const ::viam::app::data::v1::Filter& _internal_filter() const;
  ::viam::app::data::v1::Filter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::viam::app::data::v1::Filter* filter);
  ::viam::app::data::v1::Filter* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.DeleteBinaryDataByFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::app::data::v1::Filter* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DeleteBinaryDataByFilterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.DeleteBinaryDataByFilterResponse) */ {
 public:
  inline DeleteBinaryDataByFilterResponse() : DeleteBinaryDataByFilterResponse(nullptr) {}
  ~DeleteBinaryDataByFilterResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteBinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteBinaryDataByFilterResponse(const DeleteBinaryDataByFilterResponse& from);
  DeleteBinaryDataByFilterResponse(DeleteBinaryDataByFilterResponse&& from) noexcept
    : DeleteBinaryDataByFilterResponse() {
    *this = ::std::move(from);
  }

  inline DeleteBinaryDataByFilterResponse& operator=(const DeleteBinaryDataByFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBinaryDataByFilterResponse& operator=(DeleteBinaryDataByFilterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteBinaryDataByFilterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteBinaryDataByFilterResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteBinaryDataByFilterResponse*>(
               &_DeleteBinaryDataByFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DeleteBinaryDataByFilterResponse& a, DeleteBinaryDataByFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBinaryDataByFilterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBinaryDataByFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteBinaryDataByFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteBinaryDataByFilterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteBinaryDataByFilterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteBinaryDataByFilterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBinaryDataByFilterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.DeleteBinaryDataByFilterResponse";
  }
  protected:
  explicit DeleteBinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kDeletedCountFieldNumber = 1,
  };
  // .viam.app.data.v1.Result result = 2 [json_name = "result"];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::viam::app::data::v1::Result& result() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::Result* release_result();
  ::viam::app::data::v1::Result* mutable_result();
  void set_allocated_result(::viam::app::data::v1::Result* result);
  private:
  const ::viam::app::data::v1::Result& _internal_result() const;
  ::viam::app::data::v1::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::viam::app::data::v1::Result* result);
  ::viam::app::data::v1::Result* unsafe_arena_release_result();

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  void clear_deleted_count();
  uint64_t deleted_count() const;
  void set_deleted_count(uint64_t value);
  private:
  uint64_t _internal_deleted_count() const;
  void _internal_set_deleted_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.DeleteBinaryDataByFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::app::data::v1::Result* result_;
  uint64_t deleted_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DeleteBinaryDataByIDsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.DeleteBinaryDataByIDsRequest) */ {
 public:
  inline DeleteBinaryDataByIDsRequest() : DeleteBinaryDataByIDsRequest(nullptr) {}
  ~DeleteBinaryDataByIDsRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteBinaryDataByIDsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteBinaryDataByIDsRequest(const DeleteBinaryDataByIDsRequest& from);
  DeleteBinaryDataByIDsRequest(DeleteBinaryDataByIDsRequest&& from) noexcept
    : DeleteBinaryDataByIDsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteBinaryDataByIDsRequest& operator=(const DeleteBinaryDataByIDsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBinaryDataByIDsRequest& operator=(DeleteBinaryDataByIDsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteBinaryDataByIDsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteBinaryDataByIDsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteBinaryDataByIDsRequest*>(
               &_DeleteBinaryDataByIDsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DeleteBinaryDataByIDsRequest& a, DeleteBinaryDataByIDsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBinaryDataByIDsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBinaryDataByIDsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteBinaryDataByIDsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteBinaryDataByIDsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteBinaryDataByIDsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteBinaryDataByIDsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBinaryDataByIDsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.DeleteBinaryDataByIDsRequest";
  }
  protected:
  explicit DeleteBinaryDataByIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdsFieldNumber = 1,
  };
  // repeated string file_ids = 1 [json_name = "fileIds"];
  int file_ids_size() const;
  private:
  int _internal_file_ids_size() const;
  public:
  void clear_file_ids();
  const std::string& file_ids(int index) const;
  std::string* mutable_file_ids(int index);
  void set_file_ids(int index, const std::string& value);
  void set_file_ids(int index, std::string&& value);
  void set_file_ids(int index, const char* value);
  void set_file_ids(int index, const char* value, size_t size);
  std::string* add_file_ids();
  void add_file_ids(const std::string& value);
  void add_file_ids(std::string&& value);
  void add_file_ids(const char* value);
  void add_file_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_ids();
  private:
  const std::string& _internal_file_ids(int index) const;
  std::string* _internal_add_file_ids();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.DeleteBinaryDataByIDsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class DeleteBinaryDataByIDsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.DeleteBinaryDataByIDsResponse) */ {
 public:
  inline DeleteBinaryDataByIDsResponse() : DeleteBinaryDataByIDsResponse(nullptr) {}
  ~DeleteBinaryDataByIDsResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteBinaryDataByIDsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteBinaryDataByIDsResponse(const DeleteBinaryDataByIDsResponse& from);
  DeleteBinaryDataByIDsResponse(DeleteBinaryDataByIDsResponse&& from) noexcept
    : DeleteBinaryDataByIDsResponse() {
    *this = ::std::move(from);
  }

  inline DeleteBinaryDataByIDsResponse& operator=(const DeleteBinaryDataByIDsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteBinaryDataByIDsResponse& operator=(DeleteBinaryDataByIDsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteBinaryDataByIDsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteBinaryDataByIDsResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteBinaryDataByIDsResponse*>(
               &_DeleteBinaryDataByIDsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DeleteBinaryDataByIDsResponse& a, DeleteBinaryDataByIDsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteBinaryDataByIDsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteBinaryDataByIDsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteBinaryDataByIDsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteBinaryDataByIDsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteBinaryDataByIDsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteBinaryDataByIDsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteBinaryDataByIDsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.DeleteBinaryDataByIDsResponse";
  }
  protected:
  explicit DeleteBinaryDataByIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kDeletedCountFieldNumber = 1,
  };
  // .viam.app.data.v1.Result result = 2 [json_name = "result"];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::viam::app::data::v1::Result& result() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::Result* release_result();
  ::viam::app::data::v1::Result* mutable_result();
  void set_allocated_result(::viam::app::data::v1::Result* result);
  private:
  const ::viam::app::data::v1::Result& _internal_result() const;
  ::viam::app::data::v1::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::viam::app::data::v1::Result* result);
  ::viam::app::data::v1::Result* unsafe_arena_release_result();

  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  void clear_deleted_count();
  uint64_t deleted_count() const;
  void set_deleted_count(uint64_t value);
  private:
  uint64_t _internal_deleted_count() const;
  void _internal_set_deleted_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.DeleteBinaryDataByIDsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::app::data::v1::Result* result_;
  uint64_t deleted_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class AddTagsToBinaryDataByFileIDsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest) */ {
 public:
  inline AddTagsToBinaryDataByFileIDsRequest() : AddTagsToBinaryDataByFileIDsRequest(nullptr) {}
  ~AddTagsToBinaryDataByFileIDsRequest() override;
  explicit PROTOBUF_CONSTEXPR AddTagsToBinaryDataByFileIDsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddTagsToBinaryDataByFileIDsRequest(const AddTagsToBinaryDataByFileIDsRequest& from);
  AddTagsToBinaryDataByFileIDsRequest(AddTagsToBinaryDataByFileIDsRequest&& from) noexcept
    : AddTagsToBinaryDataByFileIDsRequest() {
    *this = ::std::move(from);
  }

  inline AddTagsToBinaryDataByFileIDsRequest& operator=(const AddTagsToBinaryDataByFileIDsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTagsToBinaryDataByFileIDsRequest& operator=(AddTagsToBinaryDataByFileIDsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddTagsToBinaryDataByFileIDsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddTagsToBinaryDataByFileIDsRequest* internal_default_instance() {
    return reinterpret_cast<const AddTagsToBinaryDataByFileIDsRequest*>(
               &_AddTagsToBinaryDataByFileIDsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AddTagsToBinaryDataByFileIDsRequest& a, AddTagsToBinaryDataByFileIDsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTagsToBinaryDataByFileIDsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTagsToBinaryDataByFileIDsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddTagsToBinaryDataByFileIDsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddTagsToBinaryDataByFileIDsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddTagsToBinaryDataByFileIDsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddTagsToBinaryDataByFileIDsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTagsToBinaryDataByFileIDsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest";
  }
  protected:
  explicit AddTagsToBinaryDataByFileIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdsFieldNumber = 1,
    kTagsFieldNumber = 2,
  };
  // repeated string file_ids = 1 [json_name = "fileIds"];
  int file_ids_size() const;
  private:
  int _internal_file_ids_size() const;
  public:
  void clear_file_ids();
  const std::string& file_ids(int index) const;
  std::string* mutable_file_ids(int index);
  void set_file_ids(int index, const std::string& value);
  void set_file_ids(int index, std::string&& value);
  void set_file_ids(int index, const char* value);
  void set_file_ids(int index, const char* value, size_t size);
  std::string* add_file_ids();
  void add_file_ids(const std::string& value);
  void add_file_ids(std::string&& value);
  void add_file_ids(const char* value);
  void add_file_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_ids();
  private:
  const std::string& _internal_file_ids(int index) const;
  std::string* _internal_add_file_ids();
  public:

  // repeated string tags = 2 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class AddTagsToBinaryDataByFileIDsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.data.v1.AddTagsToBinaryDataByFileIDsResponse) */ {
 public:
  inline AddTagsToBinaryDataByFileIDsResponse() : AddTagsToBinaryDataByFileIDsResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddTagsToBinaryDataByFileIDsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddTagsToBinaryDataByFileIDsResponse(const AddTagsToBinaryDataByFileIDsResponse& from);
  AddTagsToBinaryDataByFileIDsResponse(AddTagsToBinaryDataByFileIDsResponse&& from) noexcept
    : AddTagsToBinaryDataByFileIDsResponse() {
    *this = ::std::move(from);
  }

  inline AddTagsToBinaryDataByFileIDsResponse& operator=(const AddTagsToBinaryDataByFileIDsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTagsToBinaryDataByFileIDsResponse& operator=(AddTagsToBinaryDataByFileIDsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddTagsToBinaryDataByFileIDsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddTagsToBinaryDataByFileIDsResponse* internal_default_instance() {
    return reinterpret_cast<const AddTagsToBinaryDataByFileIDsResponse*>(
               &_AddTagsToBinaryDataByFileIDsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AddTagsToBinaryDataByFileIDsResponse& a, AddTagsToBinaryDataByFileIDsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTagsToBinaryDataByFileIDsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTagsToBinaryDataByFileIDsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddTagsToBinaryDataByFileIDsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddTagsToBinaryDataByFileIDsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddTagsToBinaryDataByFileIDsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddTagsToBinaryDataByFileIDsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.AddTagsToBinaryDataByFileIDsResponse";
  }
  protected:
  explicit AddTagsToBinaryDataByFileIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.AddTagsToBinaryDataByFileIDsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class AddTagsToBinaryDataByFilterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest) */ {
 public:
  inline AddTagsToBinaryDataByFilterRequest() : AddTagsToBinaryDataByFilterRequest(nullptr) {}
  ~AddTagsToBinaryDataByFilterRequest() override;
  explicit PROTOBUF_CONSTEXPR AddTagsToBinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddTagsToBinaryDataByFilterRequest(const AddTagsToBinaryDataByFilterRequest& from);
  AddTagsToBinaryDataByFilterRequest(AddTagsToBinaryDataByFilterRequest&& from) noexcept
    : AddTagsToBinaryDataByFilterRequest() {
    *this = ::std::move(from);
  }

  inline AddTagsToBinaryDataByFilterRequest& operator=(const AddTagsToBinaryDataByFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTagsToBinaryDataByFilterRequest& operator=(AddTagsToBinaryDataByFilterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddTagsToBinaryDataByFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddTagsToBinaryDataByFilterRequest* internal_default_instance() {
    return reinterpret_cast<const AddTagsToBinaryDataByFilterRequest*>(
               &_AddTagsToBinaryDataByFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(AddTagsToBinaryDataByFilterRequest& a, AddTagsToBinaryDataByFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTagsToBinaryDataByFilterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTagsToBinaryDataByFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddTagsToBinaryDataByFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddTagsToBinaryDataByFilterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddTagsToBinaryDataByFilterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddTagsToBinaryDataByFilterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTagsToBinaryDataByFilterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.AddTagsToBinaryDataByFilterRequest";
  }
  protected:
  explicit AddTagsToBinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kFilterFieldNumber = 1,
  };
  // repeated string tags = 2 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::viam::app::data::v1::Filter& filter() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::Filter* release_filter();
  ::viam::app::data::v1::Filter* mutable_filter();
  void set_allocated_filter(::viam::app::data::v1::Filter* filter);
  private:
  const ::viam::app::data::v1::Filter& _internal_filter() const;
  ::viam::app::data::v1::Filter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::viam::app::data::v1::Filter* filter);
  ::viam::app::data::v1::Filter* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::viam::app::data::v1::Filter* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class AddTagsToBinaryDataByFilterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.app.data.v1.AddTagsToBinaryDataByFilterResponse) */ {
 public:
  inline AddTagsToBinaryDataByFilterResponse() : AddTagsToBinaryDataByFilterResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR AddTagsToBinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddTagsToBinaryDataByFilterResponse(const AddTagsToBinaryDataByFilterResponse& from);
  AddTagsToBinaryDataByFilterResponse(AddTagsToBinaryDataByFilterResponse&& from) noexcept
    : AddTagsToBinaryDataByFilterResponse() {
    *this = ::std::move(from);
  }

  inline AddTagsToBinaryDataByFilterResponse& operator=(const AddTagsToBinaryDataByFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTagsToBinaryDataByFilterResponse& operator=(AddTagsToBinaryDataByFilterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddTagsToBinaryDataByFilterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddTagsToBinaryDataByFilterResponse* internal_default_instance() {
    return reinterpret_cast<const AddTagsToBinaryDataByFilterResponse*>(
               &_AddTagsToBinaryDataByFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(AddTagsToBinaryDataByFilterResponse& a, AddTagsToBinaryDataByFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTagsToBinaryDataByFilterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddTagsToBinaryDataByFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddTagsToBinaryDataByFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddTagsToBinaryDataByFilterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AddTagsToBinaryDataByFilterResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AddTagsToBinaryDataByFilterResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.AddTagsToBinaryDataByFilterResponse";
  }
  protected:
  explicit AddTagsToBinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.AddTagsToBinaryDataByFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class RemoveTagsFromBinaryDataByFileIDsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest) */ {
 public:
  inline RemoveTagsFromBinaryDataByFileIDsRequest() : RemoveTagsFromBinaryDataByFileIDsRequest(nullptr) {}
  ~RemoveTagsFromBinaryDataByFileIDsRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveTagsFromBinaryDataByFileIDsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveTagsFromBinaryDataByFileIDsRequest(const RemoveTagsFromBinaryDataByFileIDsRequest& from);
  RemoveTagsFromBinaryDataByFileIDsRequest(RemoveTagsFromBinaryDataByFileIDsRequest&& from) noexcept
    : RemoveTagsFromBinaryDataByFileIDsRequest() {
    *this = ::std::move(from);
  }

  inline RemoveTagsFromBinaryDataByFileIDsRequest& operator=(const RemoveTagsFromBinaryDataByFileIDsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveTagsFromBinaryDataByFileIDsRequest& operator=(RemoveTagsFromBinaryDataByFileIDsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveTagsFromBinaryDataByFileIDsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveTagsFromBinaryDataByFileIDsRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveTagsFromBinaryDataByFileIDsRequest*>(
               &_RemoveTagsFromBinaryDataByFileIDsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(RemoveTagsFromBinaryDataByFileIDsRequest& a, RemoveTagsFromBinaryDataByFileIDsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveTagsFromBinaryDataByFileIDsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveTagsFromBinaryDataByFileIDsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveTagsFromBinaryDataByFileIDsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveTagsFromBinaryDataByFileIDsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveTagsFromBinaryDataByFileIDsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveTagsFromBinaryDataByFileIDsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveTagsFromBinaryDataByFileIDsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest";
  }
  protected:
  explicit RemoveTagsFromBinaryDataByFileIDsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileIdsFieldNumber = 1,
    kTagsFieldNumber = 2,
  };
  // repeated string file_ids = 1 [json_name = "fileIds"];
  int file_ids_size() const;
  private:
  int _internal_file_ids_size() const;
  public:
  void clear_file_ids();
  const std::string& file_ids(int index) const;
  std::string* mutable_file_ids(int index);
  void set_file_ids(int index, const std::string& value);
  void set_file_ids(int index, std::string&& value);
  void set_file_ids(int index, const char* value);
  void set_file_ids(int index, const char* value, size_t size);
  std::string* add_file_ids();
  void add_file_ids(const std::string& value);
  void add_file_ids(std::string&& value);
  void add_file_ids(const char* value);
  void add_file_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& file_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_file_ids();
  private:
  const std::string& _internal_file_ids(int index) const;
  std::string* _internal_add_file_ids();
  public:

  // repeated string tags = 2 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> file_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class RemoveTagsFromBinaryDataByFileIDsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse) */ {
 public:
  inline RemoveTagsFromBinaryDataByFileIDsResponse() : RemoveTagsFromBinaryDataByFileIDsResponse(nullptr) {}
  ~RemoveTagsFromBinaryDataByFileIDsResponse() override;
  explicit PROTOBUF_CONSTEXPR RemoveTagsFromBinaryDataByFileIDsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveTagsFromBinaryDataByFileIDsResponse(const RemoveTagsFromBinaryDataByFileIDsResponse& from);
  RemoveTagsFromBinaryDataByFileIDsResponse(RemoveTagsFromBinaryDataByFileIDsResponse&& from) noexcept
    : RemoveTagsFromBinaryDataByFileIDsResponse() {
    *this = ::std::move(from);
  }

  inline RemoveTagsFromBinaryDataByFileIDsResponse& operator=(const RemoveTagsFromBinaryDataByFileIDsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveTagsFromBinaryDataByFileIDsResponse& operator=(RemoveTagsFromBinaryDataByFileIDsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveTagsFromBinaryDataByFileIDsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveTagsFromBinaryDataByFileIDsResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveTagsFromBinaryDataByFileIDsResponse*>(
               &_RemoveTagsFromBinaryDataByFileIDsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(RemoveTagsFromBinaryDataByFileIDsResponse& a, RemoveTagsFromBinaryDataByFileIDsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveTagsFromBinaryDataByFileIDsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveTagsFromBinaryDataByFileIDsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveTagsFromBinaryDataByFileIDsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveTagsFromBinaryDataByFileIDsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveTagsFromBinaryDataByFileIDsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveTagsFromBinaryDataByFileIDsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveTagsFromBinaryDataByFileIDsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse";
  }
  protected:
  explicit RemoveTagsFromBinaryDataByFileIDsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedCountFieldNumber = 1,
  };
  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  void clear_deleted_count();
  uint64_t deleted_count() const;
  void set_deleted_count(uint64_t value);
  private:
  uint64_t _internal_deleted_count() const;
  void _internal_set_deleted_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t deleted_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class RemoveTagsFromBinaryDataByFilterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest) */ {
 public:
  inline RemoveTagsFromBinaryDataByFilterRequest() : RemoveTagsFromBinaryDataByFilterRequest(nullptr) {}
  ~RemoveTagsFromBinaryDataByFilterRequest() override;
  explicit PROTOBUF_CONSTEXPR RemoveTagsFromBinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveTagsFromBinaryDataByFilterRequest(const RemoveTagsFromBinaryDataByFilterRequest& from);
  RemoveTagsFromBinaryDataByFilterRequest(RemoveTagsFromBinaryDataByFilterRequest&& from) noexcept
    : RemoveTagsFromBinaryDataByFilterRequest() {
    *this = ::std::move(from);
  }

  inline RemoveTagsFromBinaryDataByFilterRequest& operator=(const RemoveTagsFromBinaryDataByFilterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveTagsFromBinaryDataByFilterRequest& operator=(RemoveTagsFromBinaryDataByFilterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveTagsFromBinaryDataByFilterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveTagsFromBinaryDataByFilterRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveTagsFromBinaryDataByFilterRequest*>(
               &_RemoveTagsFromBinaryDataByFilterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RemoveTagsFromBinaryDataByFilterRequest& a, RemoveTagsFromBinaryDataByFilterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveTagsFromBinaryDataByFilterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveTagsFromBinaryDataByFilterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveTagsFromBinaryDataByFilterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveTagsFromBinaryDataByFilterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveTagsFromBinaryDataByFilterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveTagsFromBinaryDataByFilterRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveTagsFromBinaryDataByFilterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest";
  }
  protected:
  explicit RemoveTagsFromBinaryDataByFilterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kFilterFieldNumber = 1,
  };
  // repeated string tags = 2 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::viam::app::data::v1::Filter& filter() const;
  PROTOBUF_NODISCARD ::viam::app::data::v1::Filter* release_filter();
  ::viam::app::data::v1::Filter* mutable_filter();
  void set_allocated_filter(::viam::app::data::v1::Filter* filter);
  private:
  const ::viam::app::data::v1::Filter& _internal_filter() const;
  ::viam::app::data::v1::Filter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::viam::app::data::v1::Filter* filter);
  ::viam::app::data::v1::Filter* unsafe_arena_release_filter();

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::viam::app::data::v1::Filter* filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// -------------------------------------------------------------------

class RemoveTagsFromBinaryDataByFilterResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse) */ {
 public:
  inline RemoveTagsFromBinaryDataByFilterResponse() : RemoveTagsFromBinaryDataByFilterResponse(nullptr) {}
  ~RemoveTagsFromBinaryDataByFilterResponse() override;
  explicit PROTOBUF_CONSTEXPR RemoveTagsFromBinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveTagsFromBinaryDataByFilterResponse(const RemoveTagsFromBinaryDataByFilterResponse& from);
  RemoveTagsFromBinaryDataByFilterResponse(RemoveTagsFromBinaryDataByFilterResponse&& from) noexcept
    : RemoveTagsFromBinaryDataByFilterResponse() {
    *this = ::std::move(from);
  }

  inline RemoveTagsFromBinaryDataByFilterResponse& operator=(const RemoveTagsFromBinaryDataByFilterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveTagsFromBinaryDataByFilterResponse& operator=(RemoveTagsFromBinaryDataByFilterResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoveTagsFromBinaryDataByFilterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveTagsFromBinaryDataByFilterResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveTagsFromBinaryDataByFilterResponse*>(
               &_RemoveTagsFromBinaryDataByFilterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(RemoveTagsFromBinaryDataByFilterResponse& a, RemoveTagsFromBinaryDataByFilterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveTagsFromBinaryDataByFilterResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveTagsFromBinaryDataByFilterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveTagsFromBinaryDataByFilterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveTagsFromBinaryDataByFilterResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoveTagsFromBinaryDataByFilterResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RemoveTagsFromBinaryDataByFilterResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveTagsFromBinaryDataByFilterResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse";
  }
  protected:
  explicit RemoveTagsFromBinaryDataByFilterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedCountFieldNumber = 1,
  };
  // uint64 deleted_count = 1 [json_name = "deletedCount"];
  void clear_deleted_count();
  uint64_t deleted_count() const;
  void set_deleted_count(uint64_t value);
  private:
  uint64_t _internal_deleted_count() const;
  void _internal_set_deleted_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t deleted_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fdata_2fv1_2fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Result

// .viam.app.data.v1.Status status = 1 [json_name = "status"];
inline void Result::clear_status() {
  status_ = 0;
}
inline ::viam::app::data::v1::Status Result::_internal_status() const {
  return static_cast< ::viam::app::data::v1::Status >(status_);
}
inline ::viam::app::data::v1::Status Result::status() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Result.status)
  return _internal_status();
}
inline void Result::_internal_set_status(::viam::app::data::v1::Status value) {
  
  status_ = value;
}
inline void Result::set_status(::viam::app::data::v1::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Result.status)
}

// string message = 2 [json_name = "message"];
inline void Result::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Result::message() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Result.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Result::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Result.message)
}
inline std::string* Result::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Result.message)
  return _s;
}
inline const std::string& Result::_internal_message() const {
  return message_.Get();
}
inline void Result::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* Result::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* Result::release_message() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Result.message)
  return message_.Release();
}
inline void Result::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Result.message)
}

// -------------------------------------------------------------------

// DataRequest

// .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
inline bool DataRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool DataRequest::has_filter() const {
  return _internal_has_filter();
}
inline void DataRequest::clear_filter() {
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::viam::app::data::v1::Filter& DataRequest::_internal_filter() const {
  const ::viam::app::data::v1::Filter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::Filter&>(
      ::viam::app::data::v1::_Filter_default_instance_);
}
inline const ::viam::app::data::v1::Filter& DataRequest::filter() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DataRequest.filter)
  return _internal_filter();
}
inline void DataRequest::unsafe_arena_set_allocated_filter(
    ::viam::app::data::v1::Filter* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.DataRequest.filter)
}
inline ::viam::app::data::v1::Filter* DataRequest::release_filter() {
  
  ::viam::app::data::v1::Filter* temp = filter_;
  filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::Filter* DataRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.DataRequest.filter)
  
  ::viam::app::data::v1::Filter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::Filter* DataRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::Filter>(GetArenaForAllocation());
    filter_ = p;
  }
  return filter_;
}
inline ::viam::app::data::v1::Filter* DataRequest::mutable_filter() {
  ::viam::app::data::v1::Filter* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.DataRequest.filter)
  return _msg;
}
inline void DataRequest::set_allocated_filter(::viam::app::data::v1::Filter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.DataRequest.filter)
}

// uint64 limit = 2 [json_name = "limit"];
inline void DataRequest::clear_limit() {
  limit_ = uint64_t{0u};
}
inline uint64_t DataRequest::_internal_limit() const {
  return limit_;
}
inline uint64_t DataRequest::limit() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DataRequest.limit)
  return _internal_limit();
}
inline void DataRequest::_internal_set_limit(uint64_t value) {
  
  limit_ = value;
}
inline void DataRequest::set_limit(uint64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.DataRequest.limit)
}

// string last = 3 [json_name = "last"];
inline void DataRequest::clear_last() {
  last_.ClearToEmpty();
}
inline const std::string& DataRequest::last() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DataRequest.last)
  return _internal_last();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataRequest::set_last(ArgT0&& arg0, ArgT... args) {
 
 last_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.DataRequest.last)
}
inline std::string* DataRequest::mutable_last() {
  std::string* _s = _internal_mutable_last();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.DataRequest.last)
  return _s;
}
inline const std::string& DataRequest::_internal_last() const {
  return last_.Get();
}
inline void DataRequest::_internal_set_last(const std::string& value) {
  
  last_.Set(value, GetArenaForAllocation());
}
inline std::string* DataRequest::_internal_mutable_last() {
  
  return last_.Mutable(GetArenaForAllocation());
}
inline std::string* DataRequest::release_last() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.DataRequest.last)
  return last_.Release();
}
inline void DataRequest::set_allocated_last(std::string* last) {
  if (last != nullptr) {
    
  } else {
    
  }
  last_.SetAllocated(last, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_.IsDefault()) {
    last_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.DataRequest.last)
}

// .viam.app.data.v1.Order sort_order = 4 [json_name = "sortOrder"];
inline void DataRequest::clear_sort_order() {
  sort_order_ = 0;
}
inline ::viam::app::data::v1::Order DataRequest::_internal_sort_order() const {
  return static_cast< ::viam::app::data::v1::Order >(sort_order_);
}
inline ::viam::app::data::v1::Order DataRequest::sort_order() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DataRequest.sort_order)
  return _internal_sort_order();
}
inline void DataRequest::_internal_set_sort_order(::viam::app::data::v1::Order value) {
  
  sort_order_ = value;
}
inline void DataRequest::set_sort_order(::viam::app::data::v1::Order value) {
  _internal_set_sort_order(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.DataRequest.sort_order)
}

// -------------------------------------------------------------------

// Filter

// string component_name = 1 [json_name = "componentName"];
inline void Filter::clear_component_name() {
  component_name_.ClearToEmpty();
}
inline const std::string& Filter::component_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.component_name)
  return _internal_component_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_component_name(ArgT0&& arg0, ArgT... args) {
 
 component_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.component_name)
}
inline std::string* Filter::mutable_component_name() {
  std::string* _s = _internal_mutable_component_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.component_name)
  return _s;
}
inline const std::string& Filter::_internal_component_name() const {
  return component_name_.Get();
}
inline void Filter::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_component_name() {
  
  return component_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_component_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.component_name)
  return component_name_.Release();
}
inline void Filter::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(component_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_name_.IsDefault()) {
    component_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.component_name)
}

// string component_type = 2 [json_name = "componentType"];
inline void Filter::clear_component_type() {
  component_type_.ClearToEmpty();
}
inline const std::string& Filter::component_type() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.component_type)
  return _internal_component_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_component_type(ArgT0&& arg0, ArgT... args) {
 
 component_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.component_type)
}
inline std::string* Filter::mutable_component_type() {
  std::string* _s = _internal_mutable_component_type();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.component_type)
  return _s;
}
inline const std::string& Filter::_internal_component_type() const {
  return component_type_.Get();
}
inline void Filter::_internal_set_component_type(const std::string& value) {
  
  component_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_component_type() {
  
  return component_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_component_type() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.component_type)
  return component_type_.Release();
}
inline void Filter::set_allocated_component_type(std::string* component_type) {
  if (component_type != nullptr) {
    
  } else {
    
  }
  component_type_.SetAllocated(component_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_type_.IsDefault()) {
    component_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.component_type)
}

// string component_model = 3 [json_name = "componentModel"];
inline void Filter::clear_component_model() {
  component_model_.ClearToEmpty();
}
inline const std::string& Filter::component_model() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.component_model)
  return _internal_component_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_component_model(ArgT0&& arg0, ArgT... args) {
 
 component_model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.component_model)
}
inline std::string* Filter::mutable_component_model() {
  std::string* _s = _internal_mutable_component_model();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.component_model)
  return _s;
}
inline const std::string& Filter::_internal_component_model() const {
  return component_model_.Get();
}
inline void Filter::_internal_set_component_model(const std::string& value) {
  
  component_model_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_component_model() {
  
  return component_model_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_component_model() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.component_model)
  return component_model_.Release();
}
inline void Filter::set_allocated_component_model(std::string* component_model) {
  if (component_model != nullptr) {
    
  } else {
    
  }
  component_model_.SetAllocated(component_model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_model_.IsDefault()) {
    component_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.component_model)
}

// string method = 4 [json_name = "method"];
inline void Filter::clear_method() {
  method_.ClearToEmpty();
}
inline const std::string& Filter::method() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_method(ArgT0&& arg0, ArgT... args) {
 
 method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.method)
}
inline std::string* Filter::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.method)
  return _s;
}
inline const std::string& Filter::_internal_method() const {
  return method_.Get();
}
inline void Filter::_internal_set_method(const std::string& value) {
  
  method_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_method() {
  
  return method_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_method() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.method)
  return method_.Release();
}
inline void Filter::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.method)
}

// string robot_name = 6 [json_name = "robotName"];
inline void Filter::clear_robot_name() {
  robot_name_.ClearToEmpty();
}
inline const std::string& Filter::robot_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.robot_name)
  return _internal_robot_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_robot_name(ArgT0&& arg0, ArgT... args) {
 
 robot_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.robot_name)
}
inline std::string* Filter::mutable_robot_name() {
  std::string* _s = _internal_mutable_robot_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.robot_name)
  return _s;
}
inline const std::string& Filter::_internal_robot_name() const {
  return robot_name_.Get();
}
inline void Filter::_internal_set_robot_name(const std::string& value) {
  
  robot_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_robot_name() {
  
  return robot_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_robot_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.robot_name)
  return robot_name_.Release();
}
inline void Filter::set_allocated_robot_name(std::string* robot_name) {
  if (robot_name != nullptr) {
    
  } else {
    
  }
  robot_name_.SetAllocated(robot_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_name_.IsDefault()) {
    robot_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.robot_name)
}

// string robot_id = 7 [json_name = "robotId"];
inline void Filter::clear_robot_id() {
  robot_id_.ClearToEmpty();
}
inline const std::string& Filter::robot_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.robot_id)
  return _internal_robot_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_robot_id(ArgT0&& arg0, ArgT... args) {
 
 robot_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.robot_id)
}
inline std::string* Filter::mutable_robot_id() {
  std::string* _s = _internal_mutable_robot_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.robot_id)
  return _s;
}
inline const std::string& Filter::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void Filter::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_robot_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.robot_id)
  return robot_id_.Release();
}
inline void Filter::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(robot_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_id_.IsDefault()) {
    robot_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.robot_id)
}

// string part_name = 8 [json_name = "partName"];
inline void Filter::clear_part_name() {
  part_name_.ClearToEmpty();
}
inline const std::string& Filter::part_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.part_name)
  return _internal_part_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_part_name(ArgT0&& arg0, ArgT... args) {
 
 part_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.part_name)
}
inline std::string* Filter::mutable_part_name() {
  std::string* _s = _internal_mutable_part_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.part_name)
  return _s;
}
inline const std::string& Filter::_internal_part_name() const {
  return part_name_.Get();
}
inline void Filter::_internal_set_part_name(const std::string& value) {
  
  part_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_part_name() {
  
  return part_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_part_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.part_name)
  return part_name_.Release();
}
inline void Filter::set_allocated_part_name(std::string* part_name) {
  if (part_name != nullptr) {
    
  } else {
    
  }
  part_name_.SetAllocated(part_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (part_name_.IsDefault()) {
    part_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.part_name)
}

// string part_id = 9 [json_name = "partId"];
inline void Filter::clear_part_id() {
  part_id_.ClearToEmpty();
}
inline const std::string& Filter::part_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.part_id)
  return _internal_part_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Filter::set_part_id(ArgT0&& arg0, ArgT... args) {
 
 part_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.part_id)
}
inline std::string* Filter::mutable_part_id() {
  std::string* _s = _internal_mutable_part_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.part_id)
  return _s;
}
inline const std::string& Filter::_internal_part_id() const {
  return part_id_.Get();
}
inline void Filter::_internal_set_part_id(const std::string& value) {
  
  part_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Filter::_internal_mutable_part_id() {
  
  return part_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Filter::release_part_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.part_id)
  return part_id_.Release();
}
inline void Filter::set_allocated_part_id(std::string* part_id) {
  if (part_id != nullptr) {
    
  } else {
    
  }
  part_id_.SetAllocated(part_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (part_id_.IsDefault()) {
    part_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.part_id)
}

// repeated string location_ids = 10 [json_name = "locationIds"];
inline int Filter::_internal_location_ids_size() const {
  return location_ids_.size();
}
inline int Filter::location_ids_size() const {
  return _internal_location_ids_size();
}
inline void Filter::clear_location_ids() {
  location_ids_.Clear();
}
inline std::string* Filter::add_location_ids() {
  std::string* _s = _internal_add_location_ids();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.Filter.location_ids)
  return _s;
}
inline const std::string& Filter::_internal_location_ids(int index) const {
  return location_ids_.Get(index);
}
inline const std::string& Filter::location_ids(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.location_ids)
  return _internal_location_ids(index);
}
inline std::string* Filter::mutable_location_ids(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.location_ids)
  return location_ids_.Mutable(index);
}
inline void Filter::set_location_ids(int index, const std::string& value) {
  location_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.location_ids)
}
inline void Filter::set_location_ids(int index, std::string&& value) {
  location_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.location_ids)
}
inline void Filter::set_location_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  location_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.Filter.location_ids)
}
inline void Filter::set_location_ids(int index, const char* value, size_t size) {
  location_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.Filter.location_ids)
}
inline std::string* Filter::_internal_add_location_ids() {
  return location_ids_.Add();
}
inline void Filter::add_location_ids(const std::string& value) {
  location_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.location_ids)
}
inline void Filter::add_location_ids(std::string&& value) {
  location_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.location_ids)
}
inline void Filter::add_location_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  location_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.Filter.location_ids)
}
inline void Filter::add_location_ids(const char* value, size_t size) {
  location_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.Filter.location_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::location_ids() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.Filter.location_ids)
  return location_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_location_ids() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.Filter.location_ids)
  return &location_ids_;
}

// repeated string org_ids = 11 [json_name = "orgIds"];
inline int Filter::_internal_org_ids_size() const {
  return org_ids_.size();
}
inline int Filter::org_ids_size() const {
  return _internal_org_ids_size();
}
inline void Filter::clear_org_ids() {
  org_ids_.Clear();
}
inline std::string* Filter::add_org_ids() {
  std::string* _s = _internal_add_org_ids();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.Filter.org_ids)
  return _s;
}
inline const std::string& Filter::_internal_org_ids(int index) const {
  return org_ids_.Get(index);
}
inline const std::string& Filter::org_ids(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.org_ids)
  return _internal_org_ids(index);
}
inline std::string* Filter::mutable_org_ids(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.org_ids)
  return org_ids_.Mutable(index);
}
inline void Filter::set_org_ids(int index, const std::string& value) {
  org_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.org_ids)
}
inline void Filter::set_org_ids(int index, std::string&& value) {
  org_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.org_ids)
}
inline void Filter::set_org_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  org_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.Filter.org_ids)
}
inline void Filter::set_org_ids(int index, const char* value, size_t size) {
  org_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.Filter.org_ids)
}
inline std::string* Filter::_internal_add_org_ids() {
  return org_ids_.Add();
}
inline void Filter::add_org_ids(const std::string& value) {
  org_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.org_ids)
}
inline void Filter::add_org_ids(std::string&& value) {
  org_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.org_ids)
}
inline void Filter::add_org_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  org_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.Filter.org_ids)
}
inline void Filter::add_org_ids(const char* value, size_t size) {
  org_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.Filter.org_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::org_ids() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.Filter.org_ids)
  return org_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_org_ids() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.Filter.org_ids)
  return &org_ids_;
}

// repeated string mime_type = 12 [json_name = "mimeType"];
inline int Filter::_internal_mime_type_size() const {
  return mime_type_.size();
}
inline int Filter::mime_type_size() const {
  return _internal_mime_type_size();
}
inline void Filter::clear_mime_type() {
  mime_type_.Clear();
}
inline std::string* Filter::add_mime_type() {
  std::string* _s = _internal_add_mime_type();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.Filter.mime_type)
  return _s;
}
inline const std::string& Filter::_internal_mime_type(int index) const {
  return mime_type_.Get(index);
}
inline const std::string& Filter::mime_type(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.mime_type)
  return _internal_mime_type(index);
}
inline std::string* Filter::mutable_mime_type(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.mime_type)
  return mime_type_.Mutable(index);
}
inline void Filter::set_mime_type(int index, const std::string& value) {
  mime_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.mime_type)
}
inline void Filter::set_mime_type(int index, std::string&& value) {
  mime_type_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.mime_type)
}
inline void Filter::set_mime_type(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mime_type_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.Filter.mime_type)
}
inline void Filter::set_mime_type(int index, const char* value, size_t size) {
  mime_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.Filter.mime_type)
}
inline std::string* Filter::_internal_add_mime_type() {
  return mime_type_.Add();
}
inline void Filter::add_mime_type(const std::string& value) {
  mime_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.mime_type)
}
inline void Filter::add_mime_type(std::string&& value) {
  mime_type_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.mime_type)
}
inline void Filter::add_mime_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mime_type_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.Filter.mime_type)
}
inline void Filter::add_mime_type(const char* value, size_t size) {
  mime_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.Filter.mime_type)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::mime_type() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.Filter.mime_type)
  return mime_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_mime_type() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.Filter.mime_type)
  return &mime_type_;
}

// .viam.app.data.v1.CaptureInterval interval = 13 [json_name = "interval"];
inline bool Filter::_internal_has_interval() const {
  return this != internal_default_instance() && interval_ != nullptr;
}
inline bool Filter::has_interval() const {
  return _internal_has_interval();
}
inline void Filter::clear_interval() {
  if (GetArenaForAllocation() == nullptr && interval_ != nullptr) {
    delete interval_;
  }
  interval_ = nullptr;
}
inline const ::viam::app::data::v1::CaptureInterval& Filter::_internal_interval() const {
  const ::viam::app::data::v1::CaptureInterval* p = interval_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::CaptureInterval&>(
      ::viam::app::data::v1::_CaptureInterval_default_instance_);
}
inline const ::viam::app::data::v1::CaptureInterval& Filter::interval() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.interval)
  return _internal_interval();
}
inline void Filter::unsafe_arena_set_allocated_interval(
    ::viam::app::data::v1::CaptureInterval* interval) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(interval_);
  }
  interval_ = interval;
  if (interval) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.Filter.interval)
}
inline ::viam::app::data::v1::CaptureInterval* Filter::release_interval() {
  
  ::viam::app::data::v1::CaptureInterval* temp = interval_;
  interval_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::CaptureInterval* Filter::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.interval)
  
  ::viam::app::data::v1::CaptureInterval* temp = interval_;
  interval_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::CaptureInterval* Filter::_internal_mutable_interval() {
  
  if (interval_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::CaptureInterval>(GetArenaForAllocation());
    interval_ = p;
  }
  return interval_;
}
inline ::viam::app::data::v1::CaptureInterval* Filter::mutable_interval() {
  ::viam::app::data::v1::CaptureInterval* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.interval)
  return _msg;
}
inline void Filter::set_allocated_interval(::viam::app::data::v1::CaptureInterval* interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete interval_;
  }
  if (interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(interval);
    if (message_arena != submessage_arena) {
      interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, interval, submessage_arena);
    }
    
  } else {
    
  }
  interval_ = interval;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.interval)
}

// .viam.app.data.v1.TagsFilter tags_filter = 14 [json_name = "tagsFilter"];
inline bool Filter::_internal_has_tags_filter() const {
  return this != internal_default_instance() && tags_filter_ != nullptr;
}
inline bool Filter::has_tags_filter() const {
  return _internal_has_tags_filter();
}
inline void Filter::clear_tags_filter() {
  if (GetArenaForAllocation() == nullptr && tags_filter_ != nullptr) {
    delete tags_filter_;
  }
  tags_filter_ = nullptr;
}
inline const ::viam::app::data::v1::TagsFilter& Filter::_internal_tags_filter() const {
  const ::viam::app::data::v1::TagsFilter* p = tags_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::TagsFilter&>(
      ::viam::app::data::v1::_TagsFilter_default_instance_);
}
inline const ::viam::app::data::v1::TagsFilter& Filter::tags_filter() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.tags_filter)
  return _internal_tags_filter();
}
inline void Filter::unsafe_arena_set_allocated_tags_filter(
    ::viam::app::data::v1::TagsFilter* tags_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tags_filter_);
  }
  tags_filter_ = tags_filter;
  if (tags_filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.Filter.tags_filter)
}
inline ::viam::app::data::v1::TagsFilter* Filter::release_tags_filter() {
  
  ::viam::app::data::v1::TagsFilter* temp = tags_filter_;
  tags_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::TagsFilter* Filter::unsafe_arena_release_tags_filter() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.Filter.tags_filter)
  
  ::viam::app::data::v1::TagsFilter* temp = tags_filter_;
  tags_filter_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::TagsFilter* Filter::_internal_mutable_tags_filter() {
  
  if (tags_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::TagsFilter>(GetArenaForAllocation());
    tags_filter_ = p;
  }
  return tags_filter_;
}
inline ::viam::app::data::v1::TagsFilter* Filter::mutable_tags_filter() {
  ::viam::app::data::v1::TagsFilter* _msg = _internal_mutable_tags_filter();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.tags_filter)
  return _msg;
}
inline void Filter::set_allocated_tags_filter(::viam::app::data::v1::TagsFilter* tags_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete tags_filter_;
  }
  if (tags_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tags_filter);
    if (message_arena != submessage_arena) {
      tags_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tags_filter, submessage_arena);
    }
    
  } else {
    
  }
  tags_filter_ = tags_filter;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.Filter.tags_filter)
}

// repeated string tags = 5 [json_name = "tags", deprecated = true];
inline int Filter::_internal_tags_size() const {
  return tags_.size();
}
inline int Filter::tags_size() const {
  return _internal_tags_size();
}
inline void Filter::clear_tags() {
  tags_.Clear();
}
inline std::string* Filter::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.Filter.tags)
  return _s;
}
inline const std::string& Filter::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& Filter::tags(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.Filter.tags)
  return _internal_tags(index);
}
inline std::string* Filter::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.Filter.tags)
  return tags_.Mutable(index);
}
inline void Filter::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.tags)
}
inline void Filter::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.Filter.tags)
}
inline void Filter::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.Filter.tags)
}
inline void Filter::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.Filter.tags)
}
inline std::string* Filter::_internal_add_tags() {
  return tags_.Add();
}
inline void Filter::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.tags)
}
inline void Filter::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.Filter.tags)
}
inline void Filter::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.Filter.tags)
}
inline void Filter::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.Filter.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::tags() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.Filter.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.Filter.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// TagsFilter

// .viam.app.data.v1.TagsFilterType type = 1 [json_name = "type"];
inline void TagsFilter::clear_type() {
  type_ = 0;
}
inline ::viam::app::data::v1::TagsFilterType TagsFilter::_internal_type() const {
  return static_cast< ::viam::app::data::v1::TagsFilterType >(type_);
}
inline ::viam::app::data::v1::TagsFilterType TagsFilter::type() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TagsFilter.type)
  return _internal_type();
}
inline void TagsFilter::_internal_set_type(::viam::app::data::v1::TagsFilterType value) {
  
  type_ = value;
}
inline void TagsFilter::set_type(::viam::app::data::v1::TagsFilterType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.TagsFilter.type)
}

// repeated string tags = 2 [json_name = "tags"];
inline int TagsFilter::_internal_tags_size() const {
  return tags_.size();
}
inline int TagsFilter::tags_size() const {
  return _internal_tags_size();
}
inline void TagsFilter::clear_tags() {
  tags_.Clear();
}
inline std::string* TagsFilter::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.TagsFilter.tags)
  return _s;
}
inline const std::string& TagsFilter::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& TagsFilter::tags(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TagsFilter.tags)
  return _internal_tags(index);
}
inline std::string* TagsFilter::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TagsFilter.tags)
  return tags_.Mutable(index);
}
inline void TagsFilter::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.TagsFilter.tags)
}
inline void TagsFilter::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.TagsFilter.tags)
}
inline void TagsFilter::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.TagsFilter.tags)
}
inline void TagsFilter::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.TagsFilter.tags)
}
inline std::string* TagsFilter::_internal_add_tags() {
  return tags_.Add();
}
inline void TagsFilter::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.TagsFilter.tags)
}
inline void TagsFilter::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.TagsFilter.tags)
}
inline void TagsFilter::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.TagsFilter.tags)
}
inline void TagsFilter::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.TagsFilter.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TagsFilter::tags() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.TagsFilter.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TagsFilter::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.TagsFilter.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CaptureMetadata

// string org_id = 1 [json_name = "orgId"];
inline void CaptureMetadata::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.org_id)
}
inline std::string* CaptureMetadata::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.org_id)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_org_id() const {
  return org_id_.Get();
}
inline void CaptureMetadata::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_org_id() {
  
  return org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.org_id)
  return org_id_.Release();
}
inline void CaptureMetadata::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (org_id_.IsDefault()) {
    org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.org_id)
}

// string location_id = 2 [json_name = "locationId"];
inline void CaptureMetadata::clear_location_id() {
  location_id_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::location_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.location_id)
  return _internal_location_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_location_id(ArgT0&& arg0, ArgT... args) {
 
 location_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.location_id)
}
inline std::string* CaptureMetadata::mutable_location_id() {
  std::string* _s = _internal_mutable_location_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.location_id)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_location_id() const {
  return location_id_.Get();
}
inline void CaptureMetadata::_internal_set_location_id(const std::string& value) {
  
  location_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_location_id() {
  
  return location_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_location_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.location_id)
  return location_id_.Release();
}
inline void CaptureMetadata::set_allocated_location_id(std::string* location_id) {
  if (location_id != nullptr) {
    
  } else {
    
  }
  location_id_.SetAllocated(location_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (location_id_.IsDefault()) {
    location_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.location_id)
}

// string robot_name = 3 [json_name = "robotName"];
inline void CaptureMetadata::clear_robot_name() {
  robot_name_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::robot_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.robot_name)
  return _internal_robot_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_robot_name(ArgT0&& arg0, ArgT... args) {
 
 robot_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.robot_name)
}
inline std::string* CaptureMetadata::mutable_robot_name() {
  std::string* _s = _internal_mutable_robot_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.robot_name)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_robot_name() const {
  return robot_name_.Get();
}
inline void CaptureMetadata::_internal_set_robot_name(const std::string& value) {
  
  robot_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_robot_name() {
  
  return robot_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_robot_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.robot_name)
  return robot_name_.Release();
}
inline void CaptureMetadata::set_allocated_robot_name(std::string* robot_name) {
  if (robot_name != nullptr) {
    
  } else {
    
  }
  robot_name_.SetAllocated(robot_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_name_.IsDefault()) {
    robot_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.robot_name)
}

// string robot_id = 4 [json_name = "robotId"];
inline void CaptureMetadata::clear_robot_id() {
  robot_id_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::robot_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.robot_id)
  return _internal_robot_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_robot_id(ArgT0&& arg0, ArgT... args) {
 
 robot_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.robot_id)
}
inline std::string* CaptureMetadata::mutable_robot_id() {
  std::string* _s = _internal_mutable_robot_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.robot_id)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void CaptureMetadata::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_robot_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.robot_id)
  return robot_id_.Release();
}
inline void CaptureMetadata::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(robot_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_id_.IsDefault()) {
    robot_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.robot_id)
}

// string part_name = 5 [json_name = "partName"];
inline void CaptureMetadata::clear_part_name() {
  part_name_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::part_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.part_name)
  return _internal_part_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_part_name(ArgT0&& arg0, ArgT... args) {
 
 part_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.part_name)
}
inline std::string* CaptureMetadata::mutable_part_name() {
  std::string* _s = _internal_mutable_part_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.part_name)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_part_name() const {
  return part_name_.Get();
}
inline void CaptureMetadata::_internal_set_part_name(const std::string& value) {
  
  part_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_part_name() {
  
  return part_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_part_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.part_name)
  return part_name_.Release();
}
inline void CaptureMetadata::set_allocated_part_name(std::string* part_name) {
  if (part_name != nullptr) {
    
  } else {
    
  }
  part_name_.SetAllocated(part_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (part_name_.IsDefault()) {
    part_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.part_name)
}

// string part_id = 6 [json_name = "partId"];
inline void CaptureMetadata::clear_part_id() {
  part_id_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::part_id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.part_id)
  return _internal_part_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_part_id(ArgT0&& arg0, ArgT... args) {
 
 part_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.part_id)
}
inline std::string* CaptureMetadata::mutable_part_id() {
  std::string* _s = _internal_mutable_part_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.part_id)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_part_id() const {
  return part_id_.Get();
}
inline void CaptureMetadata::_internal_set_part_id(const std::string& value) {
  
  part_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_part_id() {
  
  return part_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_part_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.part_id)
  return part_id_.Release();
}
inline void CaptureMetadata::set_allocated_part_id(std::string* part_id) {
  if (part_id != nullptr) {
    
  } else {
    
  }
  part_id_.SetAllocated(part_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (part_id_.IsDefault()) {
    part_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.part_id)
}

// string component_type = 7 [json_name = "componentType"];
inline void CaptureMetadata::clear_component_type() {
  component_type_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::component_type() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.component_type)
  return _internal_component_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_component_type(ArgT0&& arg0, ArgT... args) {
 
 component_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.component_type)
}
inline std::string* CaptureMetadata::mutable_component_type() {
  std::string* _s = _internal_mutable_component_type();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.component_type)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_component_type() const {
  return component_type_.Get();
}
inline void CaptureMetadata::_internal_set_component_type(const std::string& value) {
  
  component_type_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_component_type() {
  
  return component_type_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_component_type() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.component_type)
  return component_type_.Release();
}
inline void CaptureMetadata::set_allocated_component_type(std::string* component_type) {
  if (component_type != nullptr) {
    
  } else {
    
  }
  component_type_.SetAllocated(component_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_type_.IsDefault()) {
    component_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.component_type)
}

// string component_model = 8 [json_name = "componentModel"];
inline void CaptureMetadata::clear_component_model() {
  component_model_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::component_model() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.component_model)
  return _internal_component_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_component_model(ArgT0&& arg0, ArgT... args) {
 
 component_model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.component_model)
}
inline std::string* CaptureMetadata::mutable_component_model() {
  std::string* _s = _internal_mutable_component_model();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.component_model)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_component_model() const {
  return component_model_.Get();
}
inline void CaptureMetadata::_internal_set_component_model(const std::string& value) {
  
  component_model_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_component_model() {
  
  return component_model_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_component_model() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.component_model)
  return component_model_.Release();
}
inline void CaptureMetadata::set_allocated_component_model(std::string* component_model) {
  if (component_model != nullptr) {
    
  } else {
    
  }
  component_model_.SetAllocated(component_model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_model_.IsDefault()) {
    component_model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.component_model)
}

// string component_name = 9 [json_name = "componentName"];
inline void CaptureMetadata::clear_component_name() {
  component_name_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::component_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.component_name)
  return _internal_component_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_component_name(ArgT0&& arg0, ArgT... args) {
 
 component_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.component_name)
}
inline std::string* CaptureMetadata::mutable_component_name() {
  std::string* _s = _internal_mutable_component_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.component_name)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_component_name() const {
  return component_name_.Get();
}
inline void CaptureMetadata::_internal_set_component_name(const std::string& value) {
  
  component_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_component_name() {
  
  return component_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_component_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.component_name)
  return component_name_.Release();
}
inline void CaptureMetadata::set_allocated_component_name(std::string* component_name) {
  if (component_name != nullptr) {
    
  } else {
    
  }
  component_name_.SetAllocated(component_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (component_name_.IsDefault()) {
    component_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.component_name)
}

// string method_name = 10 [json_name = "methodName"];
inline void CaptureMetadata::clear_method_name() {
  method_name_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::method_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.method_name)
  return _internal_method_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_method_name(ArgT0&& arg0, ArgT... args) {
 
 method_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.method_name)
}
inline std::string* CaptureMetadata::mutable_method_name() {
  std::string* _s = _internal_mutable_method_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.method_name)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_method_name() const {
  return method_name_.Get();
}
inline void CaptureMetadata::_internal_set_method_name(const std::string& value) {
  
  method_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_method_name() {
  
  return method_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_method_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.method_name)
  return method_name_.Release();
}
inline void CaptureMetadata::set_allocated_method_name(std::string* method_name) {
  if (method_name != nullptr) {
    
  } else {
    
  }
  method_name_.SetAllocated(method_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_name_.IsDefault()) {
    method_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.method_name)
}

// map<string, .google.protobuf.Any> method_parameters = 11 [json_name = "methodParameters"];
inline int CaptureMetadata::_internal_method_parameters_size() const {
  return method_parameters_.size();
}
inline int CaptureMetadata::method_parameters_size() const {
  return _internal_method_parameters_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
CaptureMetadata::_internal_method_parameters() const {
  return method_parameters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
CaptureMetadata::method_parameters() const {
  // @@protoc_insertion_point(field_map:viam.app.data.v1.CaptureMetadata.method_parameters)
  return _internal_method_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
CaptureMetadata::_internal_mutable_method_parameters() {
  return method_parameters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
CaptureMetadata::mutable_method_parameters() {
  // @@protoc_insertion_point(field_mutable_map:viam.app.data.v1.CaptureMetadata.method_parameters)
  return _internal_mutable_method_parameters();
}

// repeated string tags = 12 [json_name = "tags"];
inline int CaptureMetadata::_internal_tags_size() const {
  return tags_.size();
}
inline int CaptureMetadata::tags_size() const {
  return _internal_tags_size();
}
inline void CaptureMetadata::clear_tags() {
  tags_.Clear();
}
inline std::string* CaptureMetadata::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.CaptureMetadata.tags)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& CaptureMetadata::tags(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.tags)
  return _internal_tags(index);
}
inline std::string* CaptureMetadata::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.tags)
  return tags_.Mutable(index);
}
inline void CaptureMetadata::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.tags)
}
inline void CaptureMetadata::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.tags)
}
inline void CaptureMetadata::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.CaptureMetadata.tags)
}
inline void CaptureMetadata::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.CaptureMetadata.tags)
}
inline std::string* CaptureMetadata::_internal_add_tags() {
  return tags_.Add();
}
inline void CaptureMetadata::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.CaptureMetadata.tags)
}
inline void CaptureMetadata::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.CaptureMetadata.tags)
}
inline void CaptureMetadata::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.CaptureMetadata.tags)
}
inline void CaptureMetadata::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.CaptureMetadata.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CaptureMetadata::tags() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.CaptureMetadata.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CaptureMetadata::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.CaptureMetadata.tags)
  return &tags_;
}

// string mime_type = 13 [json_name = "mimeType"];
inline void CaptureMetadata::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& CaptureMetadata::mime_type() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureMetadata.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CaptureMetadata::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.CaptureMetadata.mime_type)
}
inline std::string* CaptureMetadata::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureMetadata.mime_type)
  return _s;
}
inline const std::string& CaptureMetadata::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void CaptureMetadata::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* CaptureMetadata::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* CaptureMetadata::release_mime_type() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureMetadata.mime_type)
  return mime_type_.Release();
}
inline void CaptureMetadata::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureMetadata.mime_type)
}

// -------------------------------------------------------------------

// CaptureInterval

// .google.protobuf.Timestamp start = 1 [json_name = "start"];
inline bool CaptureInterval::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool CaptureInterval::has_start() const {
  return _internal_has_start();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CaptureInterval::_internal_start() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CaptureInterval::start() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureInterval.start)
  return _internal_start();
}
inline void CaptureInterval::unsafe_arena_set_allocated_start(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.CaptureInterval.start)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::release_start() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_;
  start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureInterval.start)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    start_ = p;
  }
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::mutable_start() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureInterval.start)
  return _msg;
}
inline void CaptureInterval::set_allocated_start(::PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start));
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureInterval.start)
}

// .google.protobuf.Timestamp end = 2 [json_name = "end"];
inline bool CaptureInterval::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool CaptureInterval::has_end() const {
  return _internal_has_end();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CaptureInterval::_internal_end() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CaptureInterval::end() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.CaptureInterval.end)
  return _internal_end();
}
inline void CaptureInterval::unsafe_arena_set_allocated_end(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.CaptureInterval.end)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::release_end() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.CaptureInterval.end)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    end_ = p;
  }
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CaptureInterval::mutable_end() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.CaptureInterval.end)
  return _msg;
}
inline void CaptureInterval::set_allocated_end(::PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end));
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.CaptureInterval.end)
}

// -------------------------------------------------------------------

// TabularDataByFilterRequest

// .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
inline bool TabularDataByFilterRequest::_internal_has_data_request() const {
  return this != internal_default_instance() && data_request_ != nullptr;
}
inline bool TabularDataByFilterRequest::has_data_request() const {
  return _internal_has_data_request();
}
inline void TabularDataByFilterRequest::clear_data_request() {
  if (GetArenaForAllocation() == nullptr && data_request_ != nullptr) {
    delete data_request_;
  }
  data_request_ = nullptr;
}
inline const ::viam::app::data::v1::DataRequest& TabularDataByFilterRequest::_internal_data_request() const {
  const ::viam::app::data::v1::DataRequest* p = data_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::DataRequest&>(
      ::viam::app::data::v1::_DataRequest_default_instance_);
}
inline const ::viam::app::data::v1::DataRequest& TabularDataByFilterRequest::data_request() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularDataByFilterRequest.data_request)
  return _internal_data_request();
}
inline void TabularDataByFilterRequest::unsafe_arena_set_allocated_data_request(
    ::viam::app::data::v1::DataRequest* data_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_request_);
  }
  data_request_ = data_request;
  if (data_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.TabularDataByFilterRequest.data_request)
}
inline ::viam::app::data::v1::DataRequest* TabularDataByFilterRequest::release_data_request() {
  
  ::viam::app::data::v1::DataRequest* temp = data_request_;
  data_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::DataRequest* TabularDataByFilterRequest::unsafe_arena_release_data_request() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.TabularDataByFilterRequest.data_request)
  
  ::viam::app::data::v1::DataRequest* temp = data_request_;
  data_request_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::DataRequest* TabularDataByFilterRequest::_internal_mutable_data_request() {
  
  if (data_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::DataRequest>(GetArenaForAllocation());
    data_request_ = p;
  }
  return data_request_;
}
inline ::viam::app::data::v1::DataRequest* TabularDataByFilterRequest::mutable_data_request() {
  ::viam::app::data::v1::DataRequest* _msg = _internal_mutable_data_request();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularDataByFilterRequest.data_request)
  return _msg;
}
inline void TabularDataByFilterRequest::set_allocated_data_request(::viam::app::data::v1::DataRequest* data_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_request_;
  }
  if (data_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_request);
    if (message_arena != submessage_arena) {
      data_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_request, submessage_arena);
    }
    
  } else {
    
  }
  data_request_ = data_request;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.TabularDataByFilterRequest.data_request)
}

// bool count_only = 2 [json_name = "countOnly"];
inline void TabularDataByFilterRequest::clear_count_only() {
  count_only_ = false;
}
inline bool TabularDataByFilterRequest::_internal_count_only() const {
  return count_only_;
}
inline bool TabularDataByFilterRequest::count_only() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularDataByFilterRequest.count_only)
  return _internal_count_only();
}
inline void TabularDataByFilterRequest::_internal_set_count_only(bool value) {
  
  count_only_ = value;
}
inline void TabularDataByFilterRequest::set_count_only(bool value) {
  _internal_set_count_only(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.TabularDataByFilterRequest.count_only)
}

// -------------------------------------------------------------------

// TabularDataByFilterResponse

// repeated .viam.app.data.v1.CaptureMetadata metadata = 1 [json_name = "metadata"];
inline int TabularDataByFilterResponse::_internal_metadata_size() const {
  return metadata_.size();
}
inline int TabularDataByFilterResponse::metadata_size() const {
  return _internal_metadata_size();
}
inline void TabularDataByFilterResponse::clear_metadata() {
  metadata_.Clear();
}
inline ::viam::app::data::v1::CaptureMetadata* TabularDataByFilterResponse::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularDataByFilterResponse.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >*
TabularDataByFilterResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.TabularDataByFilterResponse.metadata)
  return &metadata_;
}
inline const ::viam::app::data::v1::CaptureMetadata& TabularDataByFilterResponse::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::viam::app::data::v1::CaptureMetadata& TabularDataByFilterResponse::metadata(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularDataByFilterResponse.metadata)
  return _internal_metadata(index);
}
inline ::viam::app::data::v1::CaptureMetadata* TabularDataByFilterResponse::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::viam::app::data::v1::CaptureMetadata* TabularDataByFilterResponse::add_metadata() {
  ::viam::app::data::v1::CaptureMetadata* _add = _internal_add_metadata();
  // @@protoc_insertion_point(field_add:viam.app.data.v1.TabularDataByFilterResponse.metadata)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::CaptureMetadata >&
TabularDataByFilterResponse::metadata() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.TabularDataByFilterResponse.metadata)
  return metadata_;
}

// repeated .viam.app.data.v1.TabularData data = 2 [json_name = "data"];
inline int TabularDataByFilterResponse::_internal_data_size() const {
  return data_.size();
}
inline int TabularDataByFilterResponse::data_size() const {
  return _internal_data_size();
}
inline void TabularDataByFilterResponse::clear_data() {
  data_.Clear();
}
inline ::viam::app::data::v1::TabularData* TabularDataByFilterResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularDataByFilterResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::TabularData >*
TabularDataByFilterResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.TabularDataByFilterResponse.data)
  return &data_;
}
inline const ::viam::app::data::v1::TabularData& TabularDataByFilterResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::viam::app::data::v1::TabularData& TabularDataByFilterResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularDataByFilterResponse.data)
  return _internal_data(index);
}
inline ::viam::app::data::v1::TabularData* TabularDataByFilterResponse::_internal_add_data() {
  return data_.Add();
}
inline ::viam::app::data::v1::TabularData* TabularDataByFilterResponse::add_data() {
  ::viam::app::data::v1::TabularData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:viam.app.data.v1.TabularDataByFilterResponse.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::TabularData >&
TabularDataByFilterResponse::data() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.TabularDataByFilterResponse.data)
  return data_;
}

// int64 count = 3 [json_name = "count"];
inline void TabularDataByFilterResponse::clear_count() {
  count_ = int64_t{0};
}
inline int64_t TabularDataByFilterResponse::_internal_count() const {
  return count_;
}
inline int64_t TabularDataByFilterResponse::count() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularDataByFilterResponse.count)
  return _internal_count();
}
inline void TabularDataByFilterResponse::_internal_set_count(int64_t value) {
  
  count_ = value;
}
inline void TabularDataByFilterResponse::set_count(int64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.TabularDataByFilterResponse.count)
}

// string last = 4 [json_name = "last"];
inline void TabularDataByFilterResponse::clear_last() {
  last_.ClearToEmpty();
}
inline const std::string& TabularDataByFilterResponse::last() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularDataByFilterResponse.last)
  return _internal_last();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TabularDataByFilterResponse::set_last(ArgT0&& arg0, ArgT... args) {
 
 last_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.TabularDataByFilterResponse.last)
}
inline std::string* TabularDataByFilterResponse::mutable_last() {
  std::string* _s = _internal_mutable_last();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularDataByFilterResponse.last)
  return _s;
}
inline const std::string& TabularDataByFilterResponse::_internal_last() const {
  return last_.Get();
}
inline void TabularDataByFilterResponse::_internal_set_last(const std::string& value) {
  
  last_.Set(value, GetArenaForAllocation());
}
inline std::string* TabularDataByFilterResponse::_internal_mutable_last() {
  
  return last_.Mutable(GetArenaForAllocation());
}
inline std::string* TabularDataByFilterResponse::release_last() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.TabularDataByFilterResponse.last)
  return last_.Release();
}
inline void TabularDataByFilterResponse::set_allocated_last(std::string* last) {
  if (last != nullptr) {
    
  } else {
    
  }
  last_.SetAllocated(last, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_.IsDefault()) {
    last_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.TabularDataByFilterResponse.last)
}

// -------------------------------------------------------------------

// TabularData

// .google.protobuf.Struct data = 1 [json_name = "data"];
inline bool TabularData::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool TabularData::has_data() const {
  return _internal_has_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TabularData::_internal_data() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TabularData::data() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularData.data)
  return _internal_data();
}
inline void TabularData::unsafe_arena_set_allocated_data(
    ::PROTOBUF_NAMESPACE_ID::Struct* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.TabularData.data)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TabularData::release_data() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = data_;
  data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TabularData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.TabularData.data)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TabularData::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TabularData::mutable_data() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularData.data)
  return _msg;
}
inline void TabularData::set_allocated_data(::PROTOBUF_NAMESPACE_ID::Struct* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data));
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.TabularData.data)
}

// int32 metadata_index = 2 [json_name = "metadataIndex"];
inline void TabularData::clear_metadata_index() {
  metadata_index_ = 0;
}
inline int32_t TabularData::_internal_metadata_index() const {
  return metadata_index_;
}
inline int32_t TabularData::metadata_index() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularData.metadata_index)
  return _internal_metadata_index();
}
inline void TabularData::_internal_set_metadata_index(int32_t value) {
  
  metadata_index_ = value;
}
inline void TabularData::set_metadata_index(int32_t value) {
  _internal_set_metadata_index(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.TabularData.metadata_index)
}

// .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
inline bool TabularData::_internal_has_time_requested() const {
  return this != internal_default_instance() && time_requested_ != nullptr;
}
inline bool TabularData::has_time_requested() const {
  return _internal_has_time_requested();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TabularData::_internal_time_requested() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = time_requested_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TabularData::time_requested() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularData.time_requested)
  return _internal_time_requested();
}
inline void TabularData::unsafe_arena_set_allocated_time_requested(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_requested_);
  }
  time_requested_ = time_requested;
  if (time_requested) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.TabularData.time_requested)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::release_time_requested() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_requested_;
  time_requested_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::unsafe_arena_release_time_requested() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.TabularData.time_requested)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_requested_;
  time_requested_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::_internal_mutable_time_requested() {
  
  if (time_requested_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    time_requested_ = p;
  }
  return time_requested_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::mutable_time_requested() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time_requested();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularData.time_requested)
  return _msg;
}
inline void TabularData::set_allocated_time_requested(::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_requested_);
  }
  if (time_requested) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_requested));
    if (message_arena != submessage_arena) {
      time_requested = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_requested, submessage_arena);
    }
    
  } else {
    
  }
  time_requested_ = time_requested;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.TabularData.time_requested)
}

// .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
inline bool TabularData::_internal_has_time_received() const {
  return this != internal_default_instance() && time_received_ != nullptr;
}
inline bool TabularData::has_time_received() const {
  return _internal_has_time_received();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TabularData::_internal_time_received() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = time_received_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TabularData::time_received() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.TabularData.time_received)
  return _internal_time_received();
}
inline void TabularData::unsafe_arena_set_allocated_time_received(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_received) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_received_);
  }
  time_received_ = time_received;
  if (time_received) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.TabularData.time_received)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::release_time_received() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_received_;
  time_received_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::unsafe_arena_release_time_received() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.TabularData.time_received)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_received_;
  time_received_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::_internal_mutable_time_received() {
  
  if (time_received_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    time_received_ = p;
  }
  return time_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TabularData::mutable_time_received() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time_received();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.TabularData.time_received)
  return _msg;
}
inline void TabularData::set_allocated_time_received(::PROTOBUF_NAMESPACE_ID::Timestamp* time_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_received_);
  }
  if (time_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_received));
    if (message_arena != submessage_arena) {
      time_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_received, submessage_arena);
    }
    
  } else {
    
  }
  time_received_ = time_received;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.TabularData.time_received)
}

// -------------------------------------------------------------------

// BinaryData

// bytes binary = 1 [json_name = "binary"];
inline void BinaryData::clear_binary() {
  binary_.ClearToEmpty();
}
inline const std::string& BinaryData::binary() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryData.binary)
  return _internal_binary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryData::set_binary(ArgT0&& arg0, ArgT... args) {
 
 binary_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryData.binary)
}
inline std::string* BinaryData::mutable_binary() {
  std::string* _s = _internal_mutable_binary();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryData.binary)
  return _s;
}
inline const std::string& BinaryData::_internal_binary() const {
  return binary_.Get();
}
inline void BinaryData::_internal_set_binary(const std::string& value) {
  
  binary_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryData::_internal_mutable_binary() {
  
  return binary_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryData::release_binary() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryData.binary)
  return binary_.Release();
}
inline void BinaryData::set_allocated_binary(std::string* binary) {
  if (binary != nullptr) {
    
  } else {
    
  }
  binary_.SetAllocated(binary, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (binary_.IsDefault()) {
    binary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryData.binary)
}

// .viam.app.data.v1.BinaryMetadata metadata = 2 [json_name = "metadata"];
inline bool BinaryData::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool BinaryData::has_metadata() const {
  return _internal_has_metadata();
}
inline void BinaryData::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::viam::app::data::v1::BinaryMetadata& BinaryData::_internal_metadata() const {
  const ::viam::app::data::v1::BinaryMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::BinaryMetadata&>(
      ::viam::app::data::v1::_BinaryMetadata_default_instance_);
}
inline const ::viam::app::data::v1::BinaryMetadata& BinaryData::metadata() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryData.metadata)
  return _internal_metadata();
}
inline void BinaryData::unsafe_arena_set_allocated_metadata(
    ::viam::app::data::v1::BinaryMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.BinaryData.metadata)
}
inline ::viam::app::data::v1::BinaryMetadata* BinaryData::release_metadata() {
  
  ::viam::app::data::v1::BinaryMetadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::BinaryMetadata* BinaryData::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryData.metadata)
  
  ::viam::app::data::v1::BinaryMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::BinaryMetadata* BinaryData::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::BinaryMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::viam::app::data::v1::BinaryMetadata* BinaryData::mutable_metadata() {
  ::viam::app::data::v1::BinaryMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryData.metadata)
  return _msg;
}
inline void BinaryData::set_allocated_metadata(::viam::app::data::v1::BinaryMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryData.metadata)
}

// -------------------------------------------------------------------

// BinaryDataByFilterRequest

// .viam.app.data.v1.DataRequest data_request = 1 [json_name = "dataRequest"];
inline bool BinaryDataByFilterRequest::_internal_has_data_request() const {
  return this != internal_default_instance() && data_request_ != nullptr;
}
inline bool BinaryDataByFilterRequest::has_data_request() const {
  return _internal_has_data_request();
}
inline void BinaryDataByFilterRequest::clear_data_request() {
  if (GetArenaForAllocation() == nullptr && data_request_ != nullptr) {
    delete data_request_;
  }
  data_request_ = nullptr;
}
inline const ::viam::app::data::v1::DataRequest& BinaryDataByFilterRequest::_internal_data_request() const {
  const ::viam::app::data::v1::DataRequest* p = data_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::DataRequest&>(
      ::viam::app::data::v1::_DataRequest_default_instance_);
}
inline const ::viam::app::data::v1::DataRequest& BinaryDataByFilterRequest::data_request() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByFilterRequest.data_request)
  return _internal_data_request();
}
inline void BinaryDataByFilterRequest::unsafe_arena_set_allocated_data_request(
    ::viam::app::data::v1::DataRequest* data_request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_request_);
  }
  data_request_ = data_request;
  if (data_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.BinaryDataByFilterRequest.data_request)
}
inline ::viam::app::data::v1::DataRequest* BinaryDataByFilterRequest::release_data_request() {
  
  ::viam::app::data::v1::DataRequest* temp = data_request_;
  data_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::DataRequest* BinaryDataByFilterRequest::unsafe_arena_release_data_request() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryDataByFilterRequest.data_request)
  
  ::viam::app::data::v1::DataRequest* temp = data_request_;
  data_request_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::DataRequest* BinaryDataByFilterRequest::_internal_mutable_data_request() {
  
  if (data_request_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::DataRequest>(GetArenaForAllocation());
    data_request_ = p;
  }
  return data_request_;
}
inline ::viam::app::data::v1::DataRequest* BinaryDataByFilterRequest::mutable_data_request() {
  ::viam::app::data::v1::DataRequest* _msg = _internal_mutable_data_request();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryDataByFilterRequest.data_request)
  return _msg;
}
inline void BinaryDataByFilterRequest::set_allocated_data_request(::viam::app::data::v1::DataRequest* data_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_request_;
  }
  if (data_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(data_request);
    if (message_arena != submessage_arena) {
      data_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_request, submessage_arena);
    }
    
  } else {
    
  }
  data_request_ = data_request;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryDataByFilterRequest.data_request)
}

// bool include_binary = 2 [json_name = "includeBinary"];
inline void BinaryDataByFilterRequest::clear_include_binary() {
  include_binary_ = false;
}
inline bool BinaryDataByFilterRequest::_internal_include_binary() const {
  return include_binary_;
}
inline bool BinaryDataByFilterRequest::include_binary() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByFilterRequest.include_binary)
  return _internal_include_binary();
}
inline void BinaryDataByFilterRequest::_internal_set_include_binary(bool value) {
  
  include_binary_ = value;
}
inline void BinaryDataByFilterRequest::set_include_binary(bool value) {
  _internal_set_include_binary(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByFilterRequest.include_binary)
}

// bool count_only = 3 [json_name = "countOnly"];
inline void BinaryDataByFilterRequest::clear_count_only() {
  count_only_ = false;
}
inline bool BinaryDataByFilterRequest::_internal_count_only() const {
  return count_only_;
}
inline bool BinaryDataByFilterRequest::count_only() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByFilterRequest.count_only)
  return _internal_count_only();
}
inline void BinaryDataByFilterRequest::_internal_set_count_only(bool value) {
  
  count_only_ = value;
}
inline void BinaryDataByFilterRequest::set_count_only(bool value) {
  _internal_set_count_only(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByFilterRequest.count_only)
}

// -------------------------------------------------------------------

// BinaryDataByFilterResponse

// repeated .viam.app.data.v1.BinaryData data = 1 [json_name = "data"];
inline int BinaryDataByFilterResponse::_internal_data_size() const {
  return data_.size();
}
inline int BinaryDataByFilterResponse::data_size() const {
  return _internal_data_size();
}
inline void BinaryDataByFilterResponse::clear_data() {
  data_.Clear();
}
inline ::viam::app::data::v1::BinaryData* BinaryDataByFilterResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryDataByFilterResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >*
BinaryDataByFilterResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.BinaryDataByFilterResponse.data)
  return &data_;
}
inline const ::viam::app::data::v1::BinaryData& BinaryDataByFilterResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::viam::app::data::v1::BinaryData& BinaryDataByFilterResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByFilterResponse.data)
  return _internal_data(index);
}
inline ::viam::app::data::v1::BinaryData* BinaryDataByFilterResponse::_internal_add_data() {
  return data_.Add();
}
inline ::viam::app::data::v1::BinaryData* BinaryDataByFilterResponse::add_data() {
  ::viam::app::data::v1::BinaryData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:viam.app.data.v1.BinaryDataByFilterResponse.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >&
BinaryDataByFilterResponse::data() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.BinaryDataByFilterResponse.data)
  return data_;
}

// uint64 count = 2 [json_name = "count"];
inline void BinaryDataByFilterResponse::clear_count() {
  count_ = uint64_t{0u};
}
inline uint64_t BinaryDataByFilterResponse::_internal_count() const {
  return count_;
}
inline uint64_t BinaryDataByFilterResponse::count() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByFilterResponse.count)
  return _internal_count();
}
inline void BinaryDataByFilterResponse::_internal_set_count(uint64_t value) {
  
  count_ = value;
}
inline void BinaryDataByFilterResponse::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByFilterResponse.count)
}

// string last = 3 [json_name = "last"];
inline void BinaryDataByFilterResponse::clear_last() {
  last_.ClearToEmpty();
}
inline const std::string& BinaryDataByFilterResponse::last() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByFilterResponse.last)
  return _internal_last();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryDataByFilterResponse::set_last(ArgT0&& arg0, ArgT... args) {
 
 last_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByFilterResponse.last)
}
inline std::string* BinaryDataByFilterResponse::mutable_last() {
  std::string* _s = _internal_mutable_last();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryDataByFilterResponse.last)
  return _s;
}
inline const std::string& BinaryDataByFilterResponse::_internal_last() const {
  return last_.Get();
}
inline void BinaryDataByFilterResponse::_internal_set_last(const std::string& value) {
  
  last_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryDataByFilterResponse::_internal_mutable_last() {
  
  return last_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryDataByFilterResponse::release_last() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryDataByFilterResponse.last)
  return last_.Release();
}
inline void BinaryDataByFilterResponse::set_allocated_last(std::string* last) {
  if (last != nullptr) {
    
  } else {
    
  }
  last_.SetAllocated(last, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_.IsDefault()) {
    last_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryDataByFilterResponse.last)
}

// -------------------------------------------------------------------

// BinaryDataByIDsRequest

// repeated string file_ids = 1 [json_name = "fileIds"];
inline int BinaryDataByIDsRequest::_internal_file_ids_size() const {
  return file_ids_.size();
}
inline int BinaryDataByIDsRequest::file_ids_size() const {
  return _internal_file_ids_size();
}
inline void BinaryDataByIDsRequest::clear_file_ids() {
  file_ids_.Clear();
}
inline std::string* BinaryDataByIDsRequest::add_file_ids() {
  std::string* _s = _internal_add_file_ids();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
  return _s;
}
inline const std::string& BinaryDataByIDsRequest::_internal_file_ids(int index) const {
  return file_ids_.Get(index);
}
inline const std::string& BinaryDataByIDsRequest::file_ids(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
  return _internal_file_ids(index);
}
inline std::string* BinaryDataByIDsRequest::mutable_file_ids(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
  return file_ids_.Mutable(index);
}
inline void BinaryDataByIDsRequest::set_file_ids(int index, const std::string& value) {
  file_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline void BinaryDataByIDsRequest::set_file_ids(int index, std::string&& value) {
  file_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline void BinaryDataByIDsRequest::set_file_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline void BinaryDataByIDsRequest::set_file_ids(int index, const char* value, size_t size) {
  file_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline std::string* BinaryDataByIDsRequest::_internal_add_file_ids() {
  return file_ids_.Add();
}
inline void BinaryDataByIDsRequest::add_file_ids(const std::string& value) {
  file_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline void BinaryDataByIDsRequest::add_file_ids(std::string&& value) {
  file_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline void BinaryDataByIDsRequest::add_file_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline void BinaryDataByIDsRequest::add_file_ids(const char* value, size_t size) {
  file_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BinaryDataByIDsRequest::file_ids() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
  return file_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BinaryDataByIDsRequest::mutable_file_ids() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.BinaryDataByIDsRequest.file_ids)
  return &file_ids_;
}

// bool include_binary = 2 [json_name = "includeBinary"];
inline void BinaryDataByIDsRequest::clear_include_binary() {
  include_binary_ = false;
}
inline bool BinaryDataByIDsRequest::_internal_include_binary() const {
  return include_binary_;
}
inline bool BinaryDataByIDsRequest::include_binary() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByIDsRequest.include_binary)
  return _internal_include_binary();
}
inline void BinaryDataByIDsRequest::_internal_set_include_binary(bool value) {
  
  include_binary_ = value;
}
inline void BinaryDataByIDsRequest::set_include_binary(bool value) {
  _internal_set_include_binary(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByIDsRequest.include_binary)
}

// -------------------------------------------------------------------

// BinaryDataByIDsResponse

// repeated .viam.app.data.v1.BinaryData data = 1 [json_name = "data"];
inline int BinaryDataByIDsResponse::_internal_data_size() const {
  return data_.size();
}
inline int BinaryDataByIDsResponse::data_size() const {
  return _internal_data_size();
}
inline void BinaryDataByIDsResponse::clear_data() {
  data_.Clear();
}
inline ::viam::app::data::v1::BinaryData* BinaryDataByIDsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryDataByIDsResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >*
BinaryDataByIDsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.BinaryDataByIDsResponse.data)
  return &data_;
}
inline const ::viam::app::data::v1::BinaryData& BinaryDataByIDsResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::viam::app::data::v1::BinaryData& BinaryDataByIDsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByIDsResponse.data)
  return _internal_data(index);
}
inline ::viam::app::data::v1::BinaryData* BinaryDataByIDsResponse::_internal_add_data() {
  return data_.Add();
}
inline ::viam::app::data::v1::BinaryData* BinaryDataByIDsResponse::add_data() {
  ::viam::app::data::v1::BinaryData* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:viam.app.data.v1.BinaryDataByIDsResponse.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::data::v1::BinaryData >&
BinaryDataByIDsResponse::data() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.BinaryDataByIDsResponse.data)
  return data_;
}

// uint64 count = 2 [json_name = "count"];
inline void BinaryDataByIDsResponse::clear_count() {
  count_ = uint64_t{0u};
}
inline uint64_t BinaryDataByIDsResponse::_internal_count() const {
  return count_;
}
inline uint64_t BinaryDataByIDsResponse::count() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByIDsResponse.count)
  return _internal_count();
}
inline void BinaryDataByIDsResponse::_internal_set_count(uint64_t value) {
  
  count_ = value;
}
inline void BinaryDataByIDsResponse::set_count(uint64_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByIDsResponse.count)
}

// string last = 3 [json_name = "last"];
inline void BinaryDataByIDsResponse::clear_last() {
  last_.ClearToEmpty();
}
inline const std::string& BinaryDataByIDsResponse::last() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryDataByIDsResponse.last)
  return _internal_last();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryDataByIDsResponse::set_last(ArgT0&& arg0, ArgT... args) {
 
 last_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryDataByIDsResponse.last)
}
inline std::string* BinaryDataByIDsResponse::mutable_last() {
  std::string* _s = _internal_mutable_last();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryDataByIDsResponse.last)
  return _s;
}
inline const std::string& BinaryDataByIDsResponse::_internal_last() const {
  return last_.Get();
}
inline void BinaryDataByIDsResponse::_internal_set_last(const std::string& value) {
  
  last_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryDataByIDsResponse::_internal_mutable_last() {
  
  return last_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryDataByIDsResponse::release_last() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryDataByIDsResponse.last)
  return last_.Release();
}
inline void BinaryDataByIDsResponse::set_allocated_last(std::string* last) {
  if (last != nullptr) {
    
  } else {
    
  }
  last_.SetAllocated(last, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (last_.IsDefault()) {
    last_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryDataByIDsResponse.last)
}

// -------------------------------------------------------------------

// BinaryMetadata

// string id = 1 [json_name = "id"];
inline void BinaryMetadata::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& BinaryMetadata::id() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryMetadata.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryMetadata::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryMetadata.id)
}
inline std::string* BinaryMetadata::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryMetadata.id)
  return _s;
}
inline const std::string& BinaryMetadata::_internal_id() const {
  return id_.Get();
}
inline void BinaryMetadata::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryMetadata::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryMetadata::release_id() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryMetadata.id)
  return id_.Release();
}
inline void BinaryMetadata::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryMetadata.id)
}

// .viam.app.data.v1.CaptureMetadata capture_metadata = 2 [json_name = "captureMetadata"];
inline bool BinaryMetadata::_internal_has_capture_metadata() const {
  return this != internal_default_instance() && capture_metadata_ != nullptr;
}
inline bool BinaryMetadata::has_capture_metadata() const {
  return _internal_has_capture_metadata();
}
inline void BinaryMetadata::clear_capture_metadata() {
  if (GetArenaForAllocation() == nullptr && capture_metadata_ != nullptr) {
    delete capture_metadata_;
  }
  capture_metadata_ = nullptr;
}
inline const ::viam::app::data::v1::CaptureMetadata& BinaryMetadata::_internal_capture_metadata() const {
  const ::viam::app::data::v1::CaptureMetadata* p = capture_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::CaptureMetadata&>(
      ::viam::app::data::v1::_CaptureMetadata_default_instance_);
}
inline const ::viam::app::data::v1::CaptureMetadata& BinaryMetadata::capture_metadata() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryMetadata.capture_metadata)
  return _internal_capture_metadata();
}
inline void BinaryMetadata::unsafe_arena_set_allocated_capture_metadata(
    ::viam::app::data::v1::CaptureMetadata* capture_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capture_metadata_);
  }
  capture_metadata_ = capture_metadata;
  if (capture_metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.BinaryMetadata.capture_metadata)
}
inline ::viam::app::data::v1::CaptureMetadata* BinaryMetadata::release_capture_metadata() {
  
  ::viam::app::data::v1::CaptureMetadata* temp = capture_metadata_;
  capture_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::CaptureMetadata* BinaryMetadata::unsafe_arena_release_capture_metadata() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryMetadata.capture_metadata)
  
  ::viam::app::data::v1::CaptureMetadata* temp = capture_metadata_;
  capture_metadata_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::CaptureMetadata* BinaryMetadata::_internal_mutable_capture_metadata() {
  
  if (capture_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::CaptureMetadata>(GetArenaForAllocation());
    capture_metadata_ = p;
  }
  return capture_metadata_;
}
inline ::viam::app::data::v1::CaptureMetadata* BinaryMetadata::mutable_capture_metadata() {
  ::viam::app::data::v1::CaptureMetadata* _msg = _internal_mutable_capture_metadata();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryMetadata.capture_metadata)
  return _msg;
}
inline void BinaryMetadata::set_allocated_capture_metadata(::viam::app::data::v1::CaptureMetadata* capture_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete capture_metadata_;
  }
  if (capture_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capture_metadata);
    if (message_arena != submessage_arena) {
      capture_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_metadata, submessage_arena);
    }
    
  } else {
    
  }
  capture_metadata_ = capture_metadata;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryMetadata.capture_metadata)
}

// .google.protobuf.Timestamp time_requested = 3 [json_name = "timeRequested"];
inline bool BinaryMetadata::_internal_has_time_requested() const {
  return this != internal_default_instance() && time_requested_ != nullptr;
}
inline bool BinaryMetadata::has_time_requested() const {
  return _internal_has_time_requested();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BinaryMetadata::_internal_time_requested() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = time_requested_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BinaryMetadata::time_requested() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryMetadata.time_requested)
  return _internal_time_requested();
}
inline void BinaryMetadata::unsafe_arena_set_allocated_time_requested(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_requested_);
  }
  time_requested_ = time_requested;
  if (time_requested) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.BinaryMetadata.time_requested)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryMetadata::release_time_requested() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_requested_;
  time_requested_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryMetadata::unsafe_arena_release_time_requested() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryMetadata.time_requested)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_requested_;
  time_requested_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryMetadata::_internal_mutable_time_requested() {
  
  if (time_requested_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    time_requested_ = p;
  }
  return time_requested_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryMetadata::mutable_time_requested() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time_requested();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryMetadata.time_requested)
  return _msg;
}
inline void BinaryMetadata::set_allocated_time_requested(::PROTOBUF_NAMESPACE_ID::Timestamp* time_requested) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_requested_);
  }
  if (time_requested) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_requested));
    if (message_arena != submessage_arena) {
      time_requested = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_requested, submessage_arena);
    }
    
  } else {
    
  }
  time_requested_ = time_requested;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryMetadata.time_requested)
}

// .google.protobuf.Timestamp time_received = 4 [json_name = "timeReceived"];
inline bool BinaryMetadata::_internal_has_time_received() const {
  return this != internal_default_instance() && time_received_ != nullptr;
}
inline bool BinaryMetadata::has_time_received() const {
  return _internal_has_time_received();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BinaryMetadata::_internal_time_received() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = time_received_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BinaryMetadata::time_received() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryMetadata.time_received)
  return _internal_time_received();
}
inline void BinaryMetadata::unsafe_arena_set_allocated_time_received(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_received) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_received_);
  }
  time_received_ = time_received;
  if (time_received) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.BinaryMetadata.time_received)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryMetadata::release_time_received() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_received_;
  time_received_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryMetadata::unsafe_arena_release_time_received() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryMetadata.time_received)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_received_;
  time_received_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryMetadata::_internal_mutable_time_received() {
  
  if (time_received_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    time_received_ = p;
  }
  return time_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BinaryMetadata::mutable_time_received() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time_received();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryMetadata.time_received)
  return _msg;
}
inline void BinaryMetadata::set_allocated_time_received(::PROTOBUF_NAMESPACE_ID::Timestamp* time_received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_received_);
  }
  if (time_received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_received));
    if (message_arena != submessage_arena) {
      time_received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_received, submessage_arena);
    }
    
  } else {
    
  }
  time_received_ = time_received;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryMetadata.time_received)
}

// string file_name = 5 [json_name = "fileName"];
inline void BinaryMetadata::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& BinaryMetadata::file_name() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryMetadata.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryMetadata::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryMetadata.file_name)
}
inline std::string* BinaryMetadata::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryMetadata.file_name)
  return _s;
}
inline const std::string& BinaryMetadata::_internal_file_name() const {
  return file_name_.Get();
}
inline void BinaryMetadata::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryMetadata::_internal_mutable_file_name() {
  
  return file_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryMetadata::release_file_name() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryMetadata.file_name)
  return file_name_.Release();
}
inline void BinaryMetadata::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(file_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault()) {
    file_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryMetadata.file_name)
}

// string file_ext = 6 [json_name = "fileExt"];
inline void BinaryMetadata::clear_file_ext() {
  file_ext_.ClearToEmpty();
}
inline const std::string& BinaryMetadata::file_ext() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryMetadata.file_ext)
  return _internal_file_ext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryMetadata::set_file_ext(ArgT0&& arg0, ArgT... args) {
 
 file_ext_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryMetadata.file_ext)
}
inline std::string* BinaryMetadata::mutable_file_ext() {
  std::string* _s = _internal_mutable_file_ext();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryMetadata.file_ext)
  return _s;
}
inline const std::string& BinaryMetadata::_internal_file_ext() const {
  return file_ext_.Get();
}
inline void BinaryMetadata::_internal_set_file_ext(const std::string& value) {
  
  file_ext_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryMetadata::_internal_mutable_file_ext() {
  
  return file_ext_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryMetadata::release_file_ext() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryMetadata.file_ext)
  return file_ext_.Release();
}
inline void BinaryMetadata::set_allocated_file_ext(std::string* file_ext) {
  if (file_ext != nullptr) {
    
  } else {
    
  }
  file_ext_.SetAllocated(file_ext, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_ext_.IsDefault()) {
    file_ext_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryMetadata.file_ext)
}

// string uri = 7 [json_name = "uri"];
inline void BinaryMetadata::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& BinaryMetadata::uri() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.BinaryMetadata.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryMetadata::set_uri(ArgT0&& arg0, ArgT... args) {
 
 uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.data.v1.BinaryMetadata.uri)
}
inline std::string* BinaryMetadata::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.BinaryMetadata.uri)
  return _s;
}
inline const std::string& BinaryMetadata::_internal_uri() const {
  return uri_.Get();
}
inline void BinaryMetadata::_internal_set_uri(const std::string& value) {
  
  uri_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryMetadata::_internal_mutable_uri() {
  
  return uri_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryMetadata::release_uri() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.BinaryMetadata.uri)
  return uri_.Release();
}
inline void BinaryMetadata::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault()) {
    uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.BinaryMetadata.uri)
}

// -------------------------------------------------------------------

// DeleteTabularDataByFilterRequest

// .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
inline bool DeleteTabularDataByFilterRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool DeleteTabularDataByFilterRequest::has_filter() const {
  return _internal_has_filter();
}
inline void DeleteTabularDataByFilterRequest::clear_filter() {
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::viam::app::data::v1::Filter& DeleteTabularDataByFilterRequest::_internal_filter() const {
  const ::viam::app::data::v1::Filter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::Filter&>(
      ::viam::app::data::v1::_Filter_default_instance_);
}
inline const ::viam::app::data::v1::Filter& DeleteTabularDataByFilterRequest::filter() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DeleteTabularDataByFilterRequest.filter)
  return _internal_filter();
}
inline void DeleteTabularDataByFilterRequest::unsafe_arena_set_allocated_filter(
    ::viam::app::data::v1::Filter* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.DeleteTabularDataByFilterRequest.filter)
}
inline ::viam::app::data::v1::Filter* DeleteTabularDataByFilterRequest::release_filter() {
  
  ::viam::app::data::v1::Filter* temp = filter_;
  filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::Filter* DeleteTabularDataByFilterRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.DeleteTabularDataByFilterRequest.filter)
  
  ::viam::app::data::v1::Filter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::Filter* DeleteTabularDataByFilterRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::Filter>(GetArenaForAllocation());
    filter_ = p;
  }
  return filter_;
}
inline ::viam::app::data::v1::Filter* DeleteTabularDataByFilterRequest::mutable_filter() {
  ::viam::app::data::v1::Filter* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.DeleteTabularDataByFilterRequest.filter)
  return _msg;
}
inline void DeleteTabularDataByFilterRequest::set_allocated_filter(::viam::app::data::v1::Filter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.DeleteTabularDataByFilterRequest.filter)
}

// -------------------------------------------------------------------

// DeleteTabularDataByFilterResponse

// uint64 deleted_count = 1 [json_name = "deletedCount"];
inline void DeleteTabularDataByFilterResponse::clear_deleted_count() {
  deleted_count_ = uint64_t{0u};
}
inline uint64_t DeleteTabularDataByFilterResponse::_internal_deleted_count() const {
  return deleted_count_;
}
inline uint64_t DeleteTabularDataByFilterResponse::deleted_count() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DeleteTabularDataByFilterResponse.deleted_count)
  return _internal_deleted_count();
}
inline void DeleteTabularDataByFilterResponse::_internal_set_deleted_count(uint64_t value) {
  
  deleted_count_ = value;
}
inline void DeleteTabularDataByFilterResponse::set_deleted_count(uint64_t value) {
  _internal_set_deleted_count(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.DeleteTabularDataByFilterResponse.deleted_count)
}

// .viam.app.data.v1.Result result = 2 [json_name = "result"];
inline bool DeleteTabularDataByFilterResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool DeleteTabularDataByFilterResponse::has_result() const {
  return _internal_has_result();
}
inline void DeleteTabularDataByFilterResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::viam::app::data::v1::Result& DeleteTabularDataByFilterResponse::_internal_result() const {
  const ::viam::app::data::v1::Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::Result&>(
      ::viam::app::data::v1::_Result_default_instance_);
}
inline const ::viam::app::data::v1::Result& DeleteTabularDataByFilterResponse::result() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DeleteTabularDataByFilterResponse.result)
  return _internal_result();
}
inline void DeleteTabularDataByFilterResponse::unsafe_arena_set_allocated_result(
    ::viam::app::data::v1::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.DeleteTabularDataByFilterResponse.result)
}
inline ::viam::app::data::v1::Result* DeleteTabularDataByFilterResponse::release_result() {
  
  ::viam::app::data::v1::Result* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::Result* DeleteTabularDataByFilterResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.DeleteTabularDataByFilterResponse.result)
  
  ::viam::app::data::v1::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::Result* DeleteTabularDataByFilterResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::Result>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::viam::app::data::v1::Result* DeleteTabularDataByFilterResponse::mutable_result() {
  ::viam::app::data::v1::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.DeleteTabularDataByFilterResponse.result)
  return _msg;
}
inline void DeleteTabularDataByFilterResponse::set_allocated_result(::viam::app::data::v1::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.DeleteTabularDataByFilterResponse.result)
}

// -------------------------------------------------------------------

// DeleteBinaryDataByFilterRequest

// .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
inline bool DeleteBinaryDataByFilterRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool DeleteBinaryDataByFilterRequest::has_filter() const {
  return _internal_has_filter();
}
inline void DeleteBinaryDataByFilterRequest::clear_filter() {
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::viam::app::data::v1::Filter& DeleteBinaryDataByFilterRequest::_internal_filter() const {
  const ::viam::app::data::v1::Filter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::Filter&>(
      ::viam::app::data::v1::_Filter_default_instance_);
}
inline const ::viam::app::data::v1::Filter& DeleteBinaryDataByFilterRequest::filter() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DeleteBinaryDataByFilterRequest.filter)
  return _internal_filter();
}
inline void DeleteBinaryDataByFilterRequest::unsafe_arena_set_allocated_filter(
    ::viam::app::data::v1::Filter* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.DeleteBinaryDataByFilterRequest.filter)
}
inline ::viam::app::data::v1::Filter* DeleteBinaryDataByFilterRequest::release_filter() {
  
  ::viam::app::data::v1::Filter* temp = filter_;
  filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::Filter* DeleteBinaryDataByFilterRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.DeleteBinaryDataByFilterRequest.filter)
  
  ::viam::app::data::v1::Filter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::Filter* DeleteBinaryDataByFilterRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::Filter>(GetArenaForAllocation());
    filter_ = p;
  }
  return filter_;
}
inline ::viam::app::data::v1::Filter* DeleteBinaryDataByFilterRequest::mutable_filter() {
  ::viam::app::data::v1::Filter* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.DeleteBinaryDataByFilterRequest.filter)
  return _msg;
}
inline void DeleteBinaryDataByFilterRequest::set_allocated_filter(::viam::app::data::v1::Filter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.DeleteBinaryDataByFilterRequest.filter)
}

// -------------------------------------------------------------------

// DeleteBinaryDataByFilterResponse

// uint64 deleted_count = 1 [json_name = "deletedCount"];
inline void DeleteBinaryDataByFilterResponse::clear_deleted_count() {
  deleted_count_ = uint64_t{0u};
}
inline uint64_t DeleteBinaryDataByFilterResponse::_internal_deleted_count() const {
  return deleted_count_;
}
inline uint64_t DeleteBinaryDataByFilterResponse::deleted_count() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DeleteBinaryDataByFilterResponse.deleted_count)
  return _internal_deleted_count();
}
inline void DeleteBinaryDataByFilterResponse::_internal_set_deleted_count(uint64_t value) {
  
  deleted_count_ = value;
}
inline void DeleteBinaryDataByFilterResponse::set_deleted_count(uint64_t value) {
  _internal_set_deleted_count(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.DeleteBinaryDataByFilterResponse.deleted_count)
}

// .viam.app.data.v1.Result result = 2 [json_name = "result"];
inline bool DeleteBinaryDataByFilterResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool DeleteBinaryDataByFilterResponse::has_result() const {
  return _internal_has_result();
}
inline void DeleteBinaryDataByFilterResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::viam::app::data::v1::Result& DeleteBinaryDataByFilterResponse::_internal_result() const {
  const ::viam::app::data::v1::Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::Result&>(
      ::viam::app::data::v1::_Result_default_instance_);
}
inline const ::viam::app::data::v1::Result& DeleteBinaryDataByFilterResponse::result() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DeleteBinaryDataByFilterResponse.result)
  return _internal_result();
}
inline void DeleteBinaryDataByFilterResponse::unsafe_arena_set_allocated_result(
    ::viam::app::data::v1::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.DeleteBinaryDataByFilterResponse.result)
}
inline ::viam::app::data::v1::Result* DeleteBinaryDataByFilterResponse::release_result() {
  
  ::viam::app::data::v1::Result* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::Result* DeleteBinaryDataByFilterResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.DeleteBinaryDataByFilterResponse.result)
  
  ::viam::app::data::v1::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::Result* DeleteBinaryDataByFilterResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::Result>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::viam::app::data::v1::Result* DeleteBinaryDataByFilterResponse::mutable_result() {
  ::viam::app::data::v1::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.DeleteBinaryDataByFilterResponse.result)
  return _msg;
}
inline void DeleteBinaryDataByFilterResponse::set_allocated_result(::viam::app::data::v1::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.DeleteBinaryDataByFilterResponse.result)
}

// -------------------------------------------------------------------

// DeleteBinaryDataByIDsRequest

// repeated string file_ids = 1 [json_name = "fileIds"];
inline int DeleteBinaryDataByIDsRequest::_internal_file_ids_size() const {
  return file_ids_.size();
}
inline int DeleteBinaryDataByIDsRequest::file_ids_size() const {
  return _internal_file_ids_size();
}
inline void DeleteBinaryDataByIDsRequest::clear_file_ids() {
  file_ids_.Clear();
}
inline std::string* DeleteBinaryDataByIDsRequest::add_file_ids() {
  std::string* _s = _internal_add_file_ids();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
  return _s;
}
inline const std::string& DeleteBinaryDataByIDsRequest::_internal_file_ids(int index) const {
  return file_ids_.Get(index);
}
inline const std::string& DeleteBinaryDataByIDsRequest::file_ids(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
  return _internal_file_ids(index);
}
inline std::string* DeleteBinaryDataByIDsRequest::mutable_file_ids(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
  return file_ids_.Mutable(index);
}
inline void DeleteBinaryDataByIDsRequest::set_file_ids(int index, const std::string& value) {
  file_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
}
inline void DeleteBinaryDataByIDsRequest::set_file_ids(int index, std::string&& value) {
  file_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
}
inline void DeleteBinaryDataByIDsRequest::set_file_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
}
inline void DeleteBinaryDataByIDsRequest::set_file_ids(int index, const char* value, size_t size) {
  file_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
}
inline std::string* DeleteBinaryDataByIDsRequest::_internal_add_file_ids() {
  return file_ids_.Add();
}
inline void DeleteBinaryDataByIDsRequest::add_file_ids(const std::string& value) {
  file_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
}
inline void DeleteBinaryDataByIDsRequest::add_file_ids(std::string&& value) {
  file_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
}
inline void DeleteBinaryDataByIDsRequest::add_file_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
}
inline void DeleteBinaryDataByIDsRequest::add_file_ids(const char* value, size_t size) {
  file_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteBinaryDataByIDsRequest::file_ids() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
  return file_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteBinaryDataByIDsRequest::mutable_file_ids() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.DeleteBinaryDataByIDsRequest.file_ids)
  return &file_ids_;
}

// -------------------------------------------------------------------

// DeleteBinaryDataByIDsResponse

// uint64 deleted_count = 1 [json_name = "deletedCount"];
inline void DeleteBinaryDataByIDsResponse::clear_deleted_count() {
  deleted_count_ = uint64_t{0u};
}
inline uint64_t DeleteBinaryDataByIDsResponse::_internal_deleted_count() const {
  return deleted_count_;
}
inline uint64_t DeleteBinaryDataByIDsResponse::deleted_count() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DeleteBinaryDataByIDsResponse.deleted_count)
  return _internal_deleted_count();
}
inline void DeleteBinaryDataByIDsResponse::_internal_set_deleted_count(uint64_t value) {
  
  deleted_count_ = value;
}
inline void DeleteBinaryDataByIDsResponse::set_deleted_count(uint64_t value) {
  _internal_set_deleted_count(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.DeleteBinaryDataByIDsResponse.deleted_count)
}

// .viam.app.data.v1.Result result = 2 [json_name = "result"];
inline bool DeleteBinaryDataByIDsResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool DeleteBinaryDataByIDsResponse::has_result() const {
  return _internal_has_result();
}
inline void DeleteBinaryDataByIDsResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::viam::app::data::v1::Result& DeleteBinaryDataByIDsResponse::_internal_result() const {
  const ::viam::app::data::v1::Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::Result&>(
      ::viam::app::data::v1::_Result_default_instance_);
}
inline const ::viam::app::data::v1::Result& DeleteBinaryDataByIDsResponse::result() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.DeleteBinaryDataByIDsResponse.result)
  return _internal_result();
}
inline void DeleteBinaryDataByIDsResponse::unsafe_arena_set_allocated_result(
    ::viam::app::data::v1::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.DeleteBinaryDataByIDsResponse.result)
}
inline ::viam::app::data::v1::Result* DeleteBinaryDataByIDsResponse::release_result() {
  
  ::viam::app::data::v1::Result* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::Result* DeleteBinaryDataByIDsResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.DeleteBinaryDataByIDsResponse.result)
  
  ::viam::app::data::v1::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::Result* DeleteBinaryDataByIDsResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::Result>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::viam::app::data::v1::Result* DeleteBinaryDataByIDsResponse::mutable_result() {
  ::viam::app::data::v1::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.DeleteBinaryDataByIDsResponse.result)
  return _msg;
}
inline void DeleteBinaryDataByIDsResponse::set_allocated_result(::viam::app::data::v1::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.DeleteBinaryDataByIDsResponse.result)
}

// -------------------------------------------------------------------

// AddTagsToBinaryDataByFileIDsRequest

// repeated string file_ids = 1 [json_name = "fileIds"];
inline int AddTagsToBinaryDataByFileIDsRequest::_internal_file_ids_size() const {
  return file_ids_.size();
}
inline int AddTagsToBinaryDataByFileIDsRequest::file_ids_size() const {
  return _internal_file_ids_size();
}
inline void AddTagsToBinaryDataByFileIDsRequest::clear_file_ids() {
  file_ids_.Clear();
}
inline std::string* AddTagsToBinaryDataByFileIDsRequest::add_file_ids() {
  std::string* _s = _internal_add_file_ids();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
  return _s;
}
inline const std::string& AddTagsToBinaryDataByFileIDsRequest::_internal_file_ids(int index) const {
  return file_ids_.Get(index);
}
inline const std::string& AddTagsToBinaryDataByFileIDsRequest::file_ids(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
  return _internal_file_ids(index);
}
inline std::string* AddTagsToBinaryDataByFileIDsRequest::mutable_file_ids(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
  return file_ids_.Mutable(index);
}
inline void AddTagsToBinaryDataByFileIDsRequest::set_file_ids(int index, const std::string& value) {
  file_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
}
inline void AddTagsToBinaryDataByFileIDsRequest::set_file_ids(int index, std::string&& value) {
  file_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
}
inline void AddTagsToBinaryDataByFileIDsRequest::set_file_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
}
inline void AddTagsToBinaryDataByFileIDsRequest::set_file_ids(int index, const char* value, size_t size) {
  file_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
}
inline std::string* AddTagsToBinaryDataByFileIDsRequest::_internal_add_file_ids() {
  return file_ids_.Add();
}
inline void AddTagsToBinaryDataByFileIDsRequest::add_file_ids(const std::string& value) {
  file_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
}
inline void AddTagsToBinaryDataByFileIDsRequest::add_file_ids(std::string&& value) {
  file_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
}
inline void AddTagsToBinaryDataByFileIDsRequest::add_file_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
}
inline void AddTagsToBinaryDataByFileIDsRequest::add_file_ids(const char* value, size_t size) {
  file_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddTagsToBinaryDataByFileIDsRequest::file_ids() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
  return file_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddTagsToBinaryDataByFileIDsRequest::mutable_file_ids() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.file_ids)
  return &file_ids_;
}

// repeated string tags = 2 [json_name = "tags"];
inline int AddTagsToBinaryDataByFileIDsRequest::_internal_tags_size() const {
  return tags_.size();
}
inline int AddTagsToBinaryDataByFileIDsRequest::tags_size() const {
  return _internal_tags_size();
}
inline void AddTagsToBinaryDataByFileIDsRequest::clear_tags() {
  tags_.Clear();
}
inline std::string* AddTagsToBinaryDataByFileIDsRequest::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
  return _s;
}
inline const std::string& AddTagsToBinaryDataByFileIDsRequest::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& AddTagsToBinaryDataByFileIDsRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
  return _internal_tags(index);
}
inline std::string* AddTagsToBinaryDataByFileIDsRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
  return tags_.Mutable(index);
}
inline void AddTagsToBinaryDataByFileIDsRequest::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
}
inline void AddTagsToBinaryDataByFileIDsRequest::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
}
inline void AddTagsToBinaryDataByFileIDsRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
}
inline void AddTagsToBinaryDataByFileIDsRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
}
inline std::string* AddTagsToBinaryDataByFileIDsRequest::_internal_add_tags() {
  return tags_.Add();
}
inline void AddTagsToBinaryDataByFileIDsRequest::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
}
inline void AddTagsToBinaryDataByFileIDsRequest::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
}
inline void AddTagsToBinaryDataByFileIDsRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
}
inline void AddTagsToBinaryDataByFileIDsRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddTagsToBinaryDataByFileIDsRequest::tags() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddTagsToBinaryDataByFileIDsRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.AddTagsToBinaryDataByFileIDsRequest.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// AddTagsToBinaryDataByFileIDsResponse

// -------------------------------------------------------------------

// AddTagsToBinaryDataByFilterRequest

// .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
inline bool AddTagsToBinaryDataByFilterRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool AddTagsToBinaryDataByFilterRequest::has_filter() const {
  return _internal_has_filter();
}
inline void AddTagsToBinaryDataByFilterRequest::clear_filter() {
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::viam::app::data::v1::Filter& AddTagsToBinaryDataByFilterRequest::_internal_filter() const {
  const ::viam::app::data::v1::Filter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::Filter&>(
      ::viam::app::data::v1::_Filter_default_instance_);
}
inline const ::viam::app::data::v1::Filter& AddTagsToBinaryDataByFilterRequest::filter() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.filter)
  return _internal_filter();
}
inline void AddTagsToBinaryDataByFilterRequest::unsafe_arena_set_allocated_filter(
    ::viam::app::data::v1::Filter* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.filter)
}
inline ::viam::app::data::v1::Filter* AddTagsToBinaryDataByFilterRequest::release_filter() {
  
  ::viam::app::data::v1::Filter* temp = filter_;
  filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::Filter* AddTagsToBinaryDataByFilterRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.filter)
  
  ::viam::app::data::v1::Filter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::Filter* AddTagsToBinaryDataByFilterRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::Filter>(GetArenaForAllocation());
    filter_ = p;
  }
  return filter_;
}
inline ::viam::app::data::v1::Filter* AddTagsToBinaryDataByFilterRequest::mutable_filter() {
  ::viam::app::data::v1::Filter* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.filter)
  return _msg;
}
inline void AddTagsToBinaryDataByFilterRequest::set_allocated_filter(::viam::app::data::v1::Filter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.filter)
}

// repeated string tags = 2 [json_name = "tags"];
inline int AddTagsToBinaryDataByFilterRequest::_internal_tags_size() const {
  return tags_.size();
}
inline int AddTagsToBinaryDataByFilterRequest::tags_size() const {
  return _internal_tags_size();
}
inline void AddTagsToBinaryDataByFilterRequest::clear_tags() {
  tags_.Clear();
}
inline std::string* AddTagsToBinaryDataByFilterRequest::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
  return _s;
}
inline const std::string& AddTagsToBinaryDataByFilterRequest::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& AddTagsToBinaryDataByFilterRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
  return _internal_tags(index);
}
inline std::string* AddTagsToBinaryDataByFilterRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
  return tags_.Mutable(index);
}
inline void AddTagsToBinaryDataByFilterRequest::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
}
inline void AddTagsToBinaryDataByFilterRequest::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
}
inline void AddTagsToBinaryDataByFilterRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
}
inline void AddTagsToBinaryDataByFilterRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
}
inline std::string* AddTagsToBinaryDataByFilterRequest::_internal_add_tags() {
  return tags_.Add();
}
inline void AddTagsToBinaryDataByFilterRequest::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
}
inline void AddTagsToBinaryDataByFilterRequest::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
}
inline void AddTagsToBinaryDataByFilterRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
}
inline void AddTagsToBinaryDataByFilterRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AddTagsToBinaryDataByFilterRequest::tags() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AddTagsToBinaryDataByFilterRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.AddTagsToBinaryDataByFilterRequest.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// AddTagsToBinaryDataByFilterResponse

// -------------------------------------------------------------------

// RemoveTagsFromBinaryDataByFileIDsRequest

// repeated string file_ids = 1 [json_name = "fileIds"];
inline int RemoveTagsFromBinaryDataByFileIDsRequest::_internal_file_ids_size() const {
  return file_ids_.size();
}
inline int RemoveTagsFromBinaryDataByFileIDsRequest::file_ids_size() const {
  return _internal_file_ids_size();
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::clear_file_ids() {
  file_ids_.Clear();
}
inline std::string* RemoveTagsFromBinaryDataByFileIDsRequest::add_file_ids() {
  std::string* _s = _internal_add_file_ids();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
  return _s;
}
inline const std::string& RemoveTagsFromBinaryDataByFileIDsRequest::_internal_file_ids(int index) const {
  return file_ids_.Get(index);
}
inline const std::string& RemoveTagsFromBinaryDataByFileIDsRequest::file_ids(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
  return _internal_file_ids(index);
}
inline std::string* RemoveTagsFromBinaryDataByFileIDsRequest::mutable_file_ids(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
  return file_ids_.Mutable(index);
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::set_file_ids(int index, const std::string& value) {
  file_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::set_file_ids(int index, std::string&& value) {
  file_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::set_file_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::set_file_ids(int index, const char* value, size_t size) {
  file_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
}
inline std::string* RemoveTagsFromBinaryDataByFileIDsRequest::_internal_add_file_ids() {
  return file_ids_.Add();
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::add_file_ids(const std::string& value) {
  file_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::add_file_ids(std::string&& value) {
  file_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::add_file_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  file_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::add_file_ids(const char* value, size_t size) {
  file_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RemoveTagsFromBinaryDataByFileIDsRequest::file_ids() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
  return file_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RemoveTagsFromBinaryDataByFileIDsRequest::mutable_file_ids() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.file_ids)
  return &file_ids_;
}

// repeated string tags = 2 [json_name = "tags"];
inline int RemoveTagsFromBinaryDataByFileIDsRequest::_internal_tags_size() const {
  return tags_.size();
}
inline int RemoveTagsFromBinaryDataByFileIDsRequest::tags_size() const {
  return _internal_tags_size();
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::clear_tags() {
  tags_.Clear();
}
inline std::string* RemoveTagsFromBinaryDataByFileIDsRequest::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
  return _s;
}
inline const std::string& RemoveTagsFromBinaryDataByFileIDsRequest::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& RemoveTagsFromBinaryDataByFileIDsRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
  return _internal_tags(index);
}
inline std::string* RemoveTagsFromBinaryDataByFileIDsRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
  return tags_.Mutable(index);
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
}
inline std::string* RemoveTagsFromBinaryDataByFileIDsRequest::_internal_add_tags() {
  return tags_.Add();
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
}
inline void RemoveTagsFromBinaryDataByFileIDsRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RemoveTagsFromBinaryDataByFileIDsRequest::tags() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RemoveTagsFromBinaryDataByFileIDsRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsRequest.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// RemoveTagsFromBinaryDataByFileIDsResponse

// uint64 deleted_count = 1 [json_name = "deletedCount"];
inline void RemoveTagsFromBinaryDataByFileIDsResponse::clear_deleted_count() {
  deleted_count_ = uint64_t{0u};
}
inline uint64_t RemoveTagsFromBinaryDataByFileIDsResponse::_internal_deleted_count() const {
  return deleted_count_;
}
inline uint64_t RemoveTagsFromBinaryDataByFileIDsResponse::deleted_count() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse.deleted_count)
  return _internal_deleted_count();
}
inline void RemoveTagsFromBinaryDataByFileIDsResponse::_internal_set_deleted_count(uint64_t value) {
  
  deleted_count_ = value;
}
inline void RemoveTagsFromBinaryDataByFileIDsResponse::set_deleted_count(uint64_t value) {
  _internal_set_deleted_count(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.RemoveTagsFromBinaryDataByFileIDsResponse.deleted_count)
}

// -------------------------------------------------------------------

// RemoveTagsFromBinaryDataByFilterRequest

// .viam.app.data.v1.Filter filter = 1 [json_name = "filter"];
inline bool RemoveTagsFromBinaryDataByFilterRequest::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool RemoveTagsFromBinaryDataByFilterRequest::has_filter() const {
  return _internal_has_filter();
}
inline void RemoveTagsFromBinaryDataByFilterRequest::clear_filter() {
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::viam::app::data::v1::Filter& RemoveTagsFromBinaryDataByFilterRequest::_internal_filter() const {
  const ::viam::app::data::v1::Filter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::app::data::v1::Filter&>(
      ::viam::app::data::v1::_Filter_default_instance_);
}
inline const ::viam::app::data::v1::Filter& RemoveTagsFromBinaryDataByFilterRequest::filter() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.filter)
  return _internal_filter();
}
inline void RemoveTagsFromBinaryDataByFilterRequest::unsafe_arena_set_allocated_filter(
    ::viam::app::data::v1::Filter* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.filter)
}
inline ::viam::app::data::v1::Filter* RemoveTagsFromBinaryDataByFilterRequest::release_filter() {
  
  ::viam::app::data::v1::Filter* temp = filter_;
  filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::app::data::v1::Filter* RemoveTagsFromBinaryDataByFilterRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.filter)
  
  ::viam::app::data::v1::Filter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::viam::app::data::v1::Filter* RemoveTagsFromBinaryDataByFilterRequest::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::app::data::v1::Filter>(GetArenaForAllocation());
    filter_ = p;
  }
  return filter_;
}
inline ::viam::app::data::v1::Filter* RemoveTagsFromBinaryDataByFilterRequest::mutable_filter() {
  ::viam::app::data::v1::Filter* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.filter)
  return _msg;
}
inline void RemoveTagsFromBinaryDataByFilterRequest::set_allocated_filter(::viam::app::data::v1::Filter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.filter)
}

// repeated string tags = 2 [json_name = "tags"];
inline int RemoveTagsFromBinaryDataByFilterRequest::_internal_tags_size() const {
  return tags_.size();
}
inline int RemoveTagsFromBinaryDataByFilterRequest::tags_size() const {
  return _internal_tags_size();
}
inline void RemoveTagsFromBinaryDataByFilterRequest::clear_tags() {
  tags_.Clear();
}
inline std::string* RemoveTagsFromBinaryDataByFilterRequest::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
  return _s;
}
inline const std::string& RemoveTagsFromBinaryDataByFilterRequest::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& RemoveTagsFromBinaryDataByFilterRequest::tags(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
  return _internal_tags(index);
}
inline std::string* RemoveTagsFromBinaryDataByFilterRequest::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
  return tags_.Mutable(index);
}
inline void RemoveTagsFromBinaryDataByFilterRequest::set_tags(int index, const std::string& value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
}
inline void RemoveTagsFromBinaryDataByFilterRequest::set_tags(int index, std::string&& value) {
  tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
}
inline void RemoveTagsFromBinaryDataByFilterRequest::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
}
inline void RemoveTagsFromBinaryDataByFilterRequest::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
}
inline std::string* RemoveTagsFromBinaryDataByFilterRequest::_internal_add_tags() {
  return tags_.Add();
}
inline void RemoveTagsFromBinaryDataByFilterRequest::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
}
inline void RemoveTagsFromBinaryDataByFilterRequest::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
}
inline void RemoveTagsFromBinaryDataByFilterRequest::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
}
inline void RemoveTagsFromBinaryDataByFilterRequest::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RemoveTagsFromBinaryDataByFilterRequest::tags() const {
  // @@protoc_insertion_point(field_list:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RemoveTagsFromBinaryDataByFilterRequest::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterRequest.tags)
  return &tags_;
}

// -------------------------------------------------------------------

// RemoveTagsFromBinaryDataByFilterResponse

// uint64 deleted_count = 1 [json_name = "deletedCount"];
inline void RemoveTagsFromBinaryDataByFilterResponse::clear_deleted_count() {
  deleted_count_ = uint64_t{0u};
}
inline uint64_t RemoveTagsFromBinaryDataByFilterResponse::_internal_deleted_count() const {
  return deleted_count_;
}
inline uint64_t RemoveTagsFromBinaryDataByFilterResponse::deleted_count() const {
  // @@protoc_insertion_point(field_get:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse.deleted_count)
  return _internal_deleted_count();
}
inline void RemoveTagsFromBinaryDataByFilterResponse::_internal_set_deleted_count(uint64_t value) {
  
  deleted_count_ = value;
}
inline void RemoveTagsFromBinaryDataByFilterResponse::set_deleted_count(uint64_t value) {
  _internal_set_deleted_count(value);
  // @@protoc_insertion_point(field_set:viam.app.data.v1.RemoveTagsFromBinaryDataByFilterResponse.deleted_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace data
}  // namespace app
}  // namespace viam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::viam::app::data::v1::Order> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::app::data::v1::Order>() {
  return ::viam::app::data::v1::Order_descriptor();
}
template <> struct is_proto_enum< ::viam::app::data::v1::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::app::data::v1::Status>() {
  return ::viam::app::data::v1::Status_descriptor();
}
template <> struct is_proto_enum< ::viam::app::data::v1::TagsFilterType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::app::data::v1::TagsFilterType>() {
  return ::viam::app::data::v1::TagsFilterType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_2fdata_2fv1_2fdata_2eproto
