// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/v1/app.proto
#ifndef GRPC_app_2fv1_2fapp_2eproto__INCLUDED
#define GRPC_app_2fv1_2fapp_2eproto__INCLUDED

#include "app/v1/app.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace viam {
namespace app {
namespace v1 {

class AppService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.app.v1.AppService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a new organization
    virtual ::grpc::Status CreateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest& request, ::viam::app::v1::CreateOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateOrganizationResponse>> AsyncCreateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateOrganizationResponse>>(AsyncCreateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateOrganizationResponse>> PrepareAsyncCreateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateOrganizationResponse>>(PrepareAsyncCreateOrganizationRaw(context, request, cq));
    }
    // List organizations
    virtual ::grpc::Status ListOrganizations(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest& request, ::viam::app::v1::ListOrganizationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListOrganizationsResponse>> AsyncListOrganizations(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListOrganizationsResponse>>(AsyncListOrganizationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListOrganizationsResponse>> PrepareAsyncListOrganizations(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListOrganizationsResponse>>(PrepareAsyncListOrganizationsRaw(context, request, cq));
    }
    // Get an organization
    virtual ::grpc::Status GetOrganization(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest& request, ::viam::app::v1::GetOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetOrganizationResponse>> AsyncGetOrganization(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetOrganizationResponse>>(AsyncGetOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetOrganizationResponse>> PrepareAsyncGetOrganization(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetOrganizationResponse>>(PrepareAsyncGetOrganizationRaw(context, request, cq));
    }
    // Update an organization
    virtual ::grpc::Status UpdateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest& request, ::viam::app::v1::UpdateOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateOrganizationResponse>> AsyncUpdateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateOrganizationResponse>>(AsyncUpdateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateOrganizationResponse>> PrepareAsyncUpdateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateOrganizationResponse>>(PrepareAsyncUpdateOrganizationRaw(context, request, cq));
    }
    // Delete an organization
    virtual ::grpc::Status DeleteOrganization(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest& request, ::viam::app::v1::DeleteOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationResponse>> AsyncDeleteOrganization(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationResponse>>(AsyncDeleteOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationResponse>> PrepareAsyncDeleteOrganization(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationResponse>>(PrepareAsyncDeleteOrganizationRaw(context, request, cq));
    }
    // List all members of an organization and all invited members to the organization.
    virtual ::grpc::Status ListOrganizationMembers(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest& request, ::viam::app::v1::ListOrganizationMembersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListOrganizationMembersResponse>> AsyncListOrganizationMembers(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListOrganizationMembersResponse>>(AsyncListOrganizationMembersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListOrganizationMembersResponse>> PrepareAsyncListOrganizationMembers(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListOrganizationMembersResponse>>(PrepareAsyncListOrganizationMembersRaw(context, request, cq));
    }
    // Create an organization invite to an organization
    virtual ::grpc::Status CreateOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest& request, ::viam::app::v1::CreateOrganizationInviteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateOrganizationInviteResponse>> AsyncCreateOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateOrganizationInviteResponse>>(AsyncCreateOrganizationInviteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateOrganizationInviteResponse>> PrepareAsyncCreateOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateOrganizationInviteResponse>>(PrepareAsyncCreateOrganizationInviteRaw(context, request, cq));
    }
    // Delete an organization member from an organization
    virtual ::grpc::Status DeleteOrganizationMember(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest& request, ::viam::app::v1::DeleteOrganizationMemberResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationMemberResponse>> AsyncDeleteOrganizationMember(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationMemberResponse>>(AsyncDeleteOrganizationMemberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationMemberResponse>> PrepareAsyncDeleteOrganizationMember(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationMemberResponse>>(PrepareAsyncDeleteOrganizationMemberRaw(context, request, cq));
    }
    // Delete an organization invite
    virtual ::grpc::Status DeleteOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest& request, ::viam::app::v1::DeleteOrganizationInviteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationInviteResponse>> AsyncDeleteOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationInviteResponse>>(AsyncDeleteOrganizationInviteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationInviteResponse>> PrepareAsyncDeleteOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationInviteResponse>>(PrepareAsyncDeleteOrganizationInviteRaw(context, request, cq));
    }
    // Resend an organization invite
    virtual ::grpc::Status ResendOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest& request, ::viam::app::v1::ResendOrganizationInviteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ResendOrganizationInviteResponse>> AsyncResendOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ResendOrganizationInviteResponse>>(AsyncResendOrganizationInviteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ResendOrganizationInviteResponse>> PrepareAsyncResendOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ResendOrganizationInviteResponse>>(PrepareAsyncResendOrganizationInviteRaw(context, request, cq));
    }
    // Location
    //
    // Create a location
    virtual ::grpc::Status CreateLocation(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest& request, ::viam::app::v1::CreateLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateLocationResponse>> AsyncCreateLocation(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateLocationResponse>>(AsyncCreateLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateLocationResponse>> PrepareAsyncCreateLocation(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateLocationResponse>>(PrepareAsyncCreateLocationRaw(context, request, cq));
    }
    // Get a location
    virtual ::grpc::Status GetLocation(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest& request, ::viam::app::v1::GetLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetLocationResponse>> AsyncGetLocation(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetLocationResponse>>(AsyncGetLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetLocationResponse>> PrepareAsyncGetLocation(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetLocationResponse>>(PrepareAsyncGetLocationRaw(context, request, cq));
    }
    // Update a location
    virtual ::grpc::Status UpdateLocation(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest& request, ::viam::app::v1::UpdateLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateLocationResponse>> AsyncUpdateLocation(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateLocationResponse>>(AsyncUpdateLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateLocationResponse>> PrepareAsyncUpdateLocation(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateLocationResponse>>(PrepareAsyncUpdateLocationRaw(context, request, cq));
    }
    // Delete a location
    virtual ::grpc::Status DeleteLocation(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest& request, ::viam::app::v1::DeleteLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteLocationResponse>> AsyncDeleteLocation(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteLocationResponse>>(AsyncDeleteLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteLocationResponse>> PrepareAsyncDeleteLocation(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteLocationResponse>>(PrepareAsyncDeleteLocationRaw(context, request, cq));
    }
    // Get a list of locations
    virtual ::grpc::Status ListLocations(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest& request, ::viam::app::v1::ListLocationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListLocationsResponse>> AsyncListLocations(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListLocationsResponse>>(AsyncListLocationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListLocationsResponse>> PrepareAsyncListLocations(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListLocationsResponse>>(PrepareAsyncListLocationsRaw(context, request, cq));
    }
    // Share a location with an organization
    virtual ::grpc::Status ShareLocation(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest& request, ::viam::app::v1::ShareLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ShareLocationResponse>> AsyncShareLocation(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ShareLocationResponse>>(AsyncShareLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ShareLocationResponse>> PrepareAsyncShareLocation(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ShareLocationResponse>>(PrepareAsyncShareLocationRaw(context, request, cq));
    }
    // Stop sharing a location with an organization
    virtual ::grpc::Status UnshareLocation(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest& request, ::viam::app::v1::UnshareLocationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UnshareLocationResponse>> AsyncUnshareLocation(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UnshareLocationResponse>>(AsyncUnshareLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UnshareLocationResponse>> PrepareAsyncUnshareLocation(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UnshareLocationResponse>>(PrepareAsyncUnshareLocationRaw(context, request, cq));
    }
    // Get a location's authorization secrets
    virtual ::grpc::Status LocationAuth(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest& request, ::viam::app::v1::LocationAuthResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::LocationAuthResponse>> AsyncLocationAuth(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::LocationAuthResponse>>(AsyncLocationAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::LocationAuthResponse>> PrepareAsyncLocationAuth(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::LocationAuthResponse>>(PrepareAsyncLocationAuthRaw(context, request, cq));
    }
    // Create a new generated Secret in the Location.
    //  - Succeeds if there are no more than 2 active secrets after creation.
    virtual ::grpc::Status CreateLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest& request, ::viam::app::v1::CreateLocationSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateLocationSecretResponse>> AsyncCreateLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateLocationSecretResponse>>(AsyncCreateLocationSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateLocationSecretResponse>> PrepareAsyncCreateLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateLocationSecretResponse>>(PrepareAsyncCreateLocationSecretRaw(context, request, cq));
    }
    // Delete a Secret from the Location.
    virtual ::grpc::Status DeleteLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest& request, ::viam::app::v1::DeleteLocationSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteLocationSecretResponse>> AsyncDeleteLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteLocationSecretResponse>>(AsyncDeleteLocationSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteLocationSecretResponse>> PrepareAsyncDeleteLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteLocationSecretResponse>>(PrepareAsyncDeleteLocationSecretRaw(context, request, cq));
    }
    // Get a specific robot by ID
    virtual ::grpc::Status GetRobot(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest& request, ::viam::app::v1::GetRobotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotResponse>> AsyncGetRobot(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotResponse>>(AsyncGetRobotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotResponse>> PrepareAsyncGetRobot(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotResponse>>(PrepareAsyncGetRobotRaw(context, request, cq));
    }
    // Get Rover Rental Location Robots
    virtual ::grpc::Status GetRoverRentalRobots(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest& request, ::viam::app::v1::GetRoverRentalRobotsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRoverRentalRobotsResponse>> AsyncGetRoverRentalRobots(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRoverRentalRobotsResponse>>(AsyncGetRoverRentalRobotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRoverRentalRobotsResponse>> PrepareAsyncGetRoverRentalRobots(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRoverRentalRobotsResponse>>(PrepareAsyncGetRoverRentalRobotsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRobotParts(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest& request, ::viam::app::v1::GetRobotPartsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartsResponse>> AsyncGetRobotParts(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartsResponse>>(AsyncGetRobotPartsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartsResponse>> PrepareAsyncGetRobotParts(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartsResponse>>(PrepareAsyncGetRobotPartsRaw(context, request, cq));
    }
    // Get a specific robot part by ID
    virtual ::grpc::Status GetRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest& request, ::viam::app::v1::GetRobotPartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartResponse>> AsyncGetRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartResponse>>(AsyncGetRobotPartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartResponse>> PrepareAsyncGetRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartResponse>>(PrepareAsyncGetRobotPartRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest& request, ::viam::app::v1::GetRobotPartLogsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartLogsResponse>> AsyncGetRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartLogsResponse>>(AsyncGetRobotPartLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartLogsResponse>> PrepareAsyncGetRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartLogsResponse>>(PrepareAsyncGetRobotPartLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::viam::app::v1::TailRobotPartLogsResponse>> TailRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::viam::app::v1::TailRobotPartLogsResponse>>(TailRobotPartLogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::app::v1::TailRobotPartLogsResponse>> AsyncTailRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::app::v1::TailRobotPartLogsResponse>>(AsyncTailRobotPartLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::app::v1::TailRobotPartLogsResponse>> PrepareAsyncTailRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::app::v1::TailRobotPartLogsResponse>>(PrepareAsyncTailRobotPartLogsRaw(context, request, cq));
    }
    // Get a specific robot part histy by ID
    virtual ::grpc::Status GetRobotPartHistory(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest& request, ::viam::app::v1::GetRobotPartHistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartHistoryResponse>> AsyncGetRobotPartHistory(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartHistoryResponse>>(AsyncGetRobotPartHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartHistoryResponse>> PrepareAsyncGetRobotPartHistory(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartHistoryResponse>>(PrepareAsyncGetRobotPartHistoryRaw(context, request, cq));
    }
    // Update a robot
    virtual ::grpc::Status UpdateRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest& request, ::viam::app::v1::UpdateRobotPartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateRobotPartResponse>> AsyncUpdateRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateRobotPartResponse>>(AsyncUpdateRobotPartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateRobotPartResponse>> PrepareAsyncUpdateRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateRobotPartResponse>>(PrepareAsyncUpdateRobotPartRaw(context, request, cq));
    }
    // Create a new robot part
    virtual ::grpc::Status NewRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest& request, ::viam::app::v1::NewRobotPartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NewRobotPartResponse>> AsyncNewRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NewRobotPartResponse>>(AsyncNewRobotPartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NewRobotPartResponse>> PrepareAsyncNewRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NewRobotPartResponse>>(PrepareAsyncNewRobotPartRaw(context, request, cq));
    }
    // Delete a robot part
    virtual ::grpc::Status DeleteRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest& request, ::viam::app::v1::DeleteRobotPartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotPartResponse>> AsyncDeleteRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotPartResponse>>(AsyncDeleteRobotPartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotPartResponse>> PrepareAsyncDeleteRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotPartResponse>>(PrepareAsyncDeleteRobotPartRaw(context, request, cq));
    }
    // Marks the given part as the main part, and all the others as not
    virtual ::grpc::Status MarkPartAsMain(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest& request, ::viam::app::v1::MarkPartAsMainResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::MarkPartAsMainResponse>> AsyncMarkPartAsMain(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::MarkPartAsMainResponse>>(AsyncMarkPartAsMainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::MarkPartAsMainResponse>> PrepareAsyncMarkPartAsMain(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::MarkPartAsMainResponse>>(PrepareAsyncMarkPartAsMainRaw(context, request, cq));
    }
    // Marks part for restart. Once the robot part checks-in with the app the flag
    // is reset on the robot part. Calling this multiple times before a robot part
    // checks-in has no affect.
    // Note: This API may be removed in the near future.
    // TODO(APP-388): Remove
    virtual ::grpc::Status MarkPartForRestart(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest& request, ::viam::app::v1::MarkPartForRestartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::MarkPartForRestartResponse>> AsyncMarkPartForRestart(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::MarkPartForRestartResponse>>(AsyncMarkPartForRestartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::MarkPartForRestartResponse>> PrepareAsyncMarkPartForRestart(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::MarkPartForRestartResponse>>(PrepareAsyncMarkPartForRestartRaw(context, request, cq));
    }
    // Create a new generated Secret in the Robot Part.
    //  - Succeeds if there are no more than 2 active secrets after creation.
    virtual ::grpc::Status CreateRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest& request, ::viam::app::v1::CreateRobotPartSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateRobotPartSecretResponse>> AsyncCreateRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateRobotPartSecretResponse>>(AsyncCreateRobotPartSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateRobotPartSecretResponse>> PrepareAsyncCreateRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateRobotPartSecretResponse>>(PrepareAsyncCreateRobotPartSecretRaw(context, request, cq));
    }
    // Delete a Secret from the RobotPart.
    virtual ::grpc::Status DeleteRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest& request, ::viam::app::v1::DeleteRobotPartSecretResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotPartSecretResponse>> AsyncDeleteRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotPartSecretResponse>>(AsyncDeleteRobotPartSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotPartSecretResponse>> PrepareAsyncDeleteRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotPartSecretResponse>>(PrepareAsyncDeleteRobotPartSecretRaw(context, request, cq));
    }
    // Get a list of robots
    virtual ::grpc::Status ListRobots(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest& request, ::viam::app::v1::ListRobotsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListRobotsResponse>> AsyncListRobots(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListRobotsResponse>>(AsyncListRobotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListRobotsResponse>> PrepareAsyncListRobots(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListRobotsResponse>>(PrepareAsyncListRobotsRaw(context, request, cq));
    }
    // NewRobot creates a new robot
    virtual ::grpc::Status NewRobot(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest& request, ::viam::app::v1::NewRobotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NewRobotResponse>> AsyncNewRobot(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NewRobotResponse>>(AsyncNewRobotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NewRobotResponse>> PrepareAsyncNewRobot(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NewRobotResponse>>(PrepareAsyncNewRobotRaw(context, request, cq));
    }
    // UpdateRobot updates a robot
    virtual ::grpc::Status UpdateRobot(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest& request, ::viam::app::v1::UpdateRobotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateRobotResponse>> AsyncUpdateRobot(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateRobotResponse>>(AsyncUpdateRobotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateRobotResponse>> PrepareAsyncUpdateRobot(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateRobotResponse>>(PrepareAsyncUpdateRobotRaw(context, request, cq));
    }
    // DeleteRobot deletes a robot
    virtual ::grpc::Status DeleteRobot(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest& request, ::viam::app::v1::DeleteRobotResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotResponse>> AsyncDeleteRobot(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotResponse>>(AsyncDeleteRobotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotResponse>> PrepareAsyncDeleteRobot(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotResponse>>(PrepareAsyncDeleteRobotRaw(context, request, cq));
    }
    // Fragments
    //
    // Gets a list of fragments
    virtual ::grpc::Status ListFragments(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest& request, ::viam::app::v1::ListFragmentsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListFragmentsResponse>> AsyncListFragments(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListFragmentsResponse>>(AsyncListFragmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListFragmentsResponse>> PrepareAsyncListFragments(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListFragmentsResponse>>(PrepareAsyncListFragmentsRaw(context, request, cq));
    }
    // Gets a single fragment
    virtual ::grpc::Status GetFragment(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest& request, ::viam::app::v1::GetFragmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetFragmentResponse>> AsyncGetFragment(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetFragmentResponse>>(AsyncGetFragmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetFragmentResponse>> PrepareAsyncGetFragment(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetFragmentResponse>>(PrepareAsyncGetFragmentRaw(context, request, cq));
    }
    // Creates a fragment
    virtual ::grpc::Status CreateFragment(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest& request, ::viam::app::v1::CreateFragmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateFragmentResponse>> AsyncCreateFragment(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateFragmentResponse>>(AsyncCreateFragmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateFragmentResponse>> PrepareAsyncCreateFragment(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateFragmentResponse>>(PrepareAsyncCreateFragmentRaw(context, request, cq));
    }
    // Updates a fragment
    virtual ::grpc::Status UpdateFragment(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest& request, ::viam::app::v1::UpdateFragmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateFragmentResponse>> AsyncUpdateFragment(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateFragmentResponse>>(AsyncUpdateFragmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateFragmentResponse>> PrepareAsyncUpdateFragment(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateFragmentResponse>>(PrepareAsyncUpdateFragmentRaw(context, request, cq));
    }
    // Deletes a fragment
    virtual ::grpc::Status DeleteFragment(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest& request, ::viam::app::v1::DeleteFragmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteFragmentResponse>> AsyncDeleteFragment(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteFragmentResponse>>(AsyncDeleteFragmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteFragmentResponse>> PrepareAsyncDeleteFragment(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteFragmentResponse>>(PrepareAsyncDeleteFragmentRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Create a new organization
      virtual void CreateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest* request, ::viam::app::v1::CreateOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest* request, ::viam::app::v1::CreateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List organizations
      virtual void ListOrganizations(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest* request, ::viam::app::v1::ListOrganizationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListOrganizations(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest* request, ::viam::app::v1::ListOrganizationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get an organization
      virtual void GetOrganization(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest* request, ::viam::app::v1::GetOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrganization(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest* request, ::viam::app::v1::GetOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update an organization
      virtual void UpdateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest* request, ::viam::app::v1::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest* request, ::viam::app::v1::UpdateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete an organization
      virtual void DeleteOrganization(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest* request, ::viam::app::v1::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteOrganization(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest* request, ::viam::app::v1::DeleteOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // List all members of an organization and all invited members to the organization.
      virtual void ListOrganizationMembers(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest* request, ::viam::app::v1::ListOrganizationMembersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListOrganizationMembers(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest* request, ::viam::app::v1::ListOrganizationMembersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Create an organization invite to an organization
      virtual void CreateOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest* request, ::viam::app::v1::CreateOrganizationInviteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest* request, ::viam::app::v1::CreateOrganizationInviteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete an organization member from an organization
      virtual void DeleteOrganizationMember(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest* request, ::viam::app::v1::DeleteOrganizationMemberResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteOrganizationMember(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest* request, ::viam::app::v1::DeleteOrganizationMemberResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete an organization invite
      virtual void DeleteOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest* request, ::viam::app::v1::DeleteOrganizationInviteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest* request, ::viam::app::v1::DeleteOrganizationInviteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Resend an organization invite
      virtual void ResendOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest* request, ::viam::app::v1::ResendOrganizationInviteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResendOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest* request, ::viam::app::v1::ResendOrganizationInviteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Location
      //
      // Create a location
      virtual void CreateLocation(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest* request, ::viam::app::v1::CreateLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateLocation(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest* request, ::viam::app::v1::CreateLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a location
      virtual void GetLocation(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest* request, ::viam::app::v1::GetLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLocation(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest* request, ::viam::app::v1::GetLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update a location
      virtual void UpdateLocation(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest* request, ::viam::app::v1::UpdateLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateLocation(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest* request, ::viam::app::v1::UpdateLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a location
      virtual void DeleteLocation(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest* request, ::viam::app::v1::DeleteLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLocation(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest* request, ::viam::app::v1::DeleteLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a list of locations
      virtual void ListLocations(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest* request, ::viam::app::v1::ListLocationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListLocations(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest* request, ::viam::app::v1::ListLocationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Share a location with an organization
      virtual void ShareLocation(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest* request, ::viam::app::v1::ShareLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShareLocation(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest* request, ::viam::app::v1::ShareLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stop sharing a location with an organization
      virtual void UnshareLocation(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest* request, ::viam::app::v1::UnshareLocationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnshareLocation(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest* request, ::viam::app::v1::UnshareLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a location's authorization secrets
      virtual void LocationAuth(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest* request, ::viam::app::v1::LocationAuthResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LocationAuth(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest* request, ::viam::app::v1::LocationAuthResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Create a new generated Secret in the Location.
      //  - Succeeds if there are no more than 2 active secrets after creation.
      virtual void CreateLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest* request, ::viam::app::v1::CreateLocationSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest* request, ::viam::app::v1::CreateLocationSecretResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a Secret from the Location.
      virtual void DeleteLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest* request, ::viam::app::v1::DeleteLocationSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest* request, ::viam::app::v1::DeleteLocationSecretResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific robot by ID
      virtual void GetRobot(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest* request, ::viam::app::v1::GetRobotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRobot(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest* request, ::viam::app::v1::GetRobotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get Rover Rental Location Robots
      virtual void GetRoverRentalRobots(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest* request, ::viam::app::v1::GetRoverRentalRobotsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRoverRentalRobots(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest* request, ::viam::app::v1::GetRoverRentalRobotsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRobotParts(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest* request, ::viam::app::v1::GetRobotPartsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRobotParts(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest* request, ::viam::app::v1::GetRobotPartsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific robot part by ID
      virtual void GetRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest* request, ::viam::app::v1::GetRobotPartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest* request, ::viam::app::v1::GetRobotPartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest* request, ::viam::app::v1::GetRobotPartLogsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest* request, ::viam::app::v1::GetRobotPartLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TailRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest* request, ::grpc::ClientReadReactor< ::viam::app::v1::TailRobotPartLogsResponse>* reactor) = 0;
      // Get a specific robot part histy by ID
      virtual void GetRobotPartHistory(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest* request, ::viam::app::v1::GetRobotPartHistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRobotPartHistory(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest* request, ::viam::app::v1::GetRobotPartHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Update a robot
      virtual void UpdateRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest* request, ::viam::app::v1::UpdateRobotPartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest* request, ::viam::app::v1::UpdateRobotPartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Create a new robot part
      virtual void NewRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest* request, ::viam::app::v1::NewRobotPartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest* request, ::viam::app::v1::NewRobotPartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a robot part
      virtual void DeleteRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest* request, ::viam::app::v1::DeleteRobotPartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest* request, ::viam::app::v1::DeleteRobotPartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Marks the given part as the main part, and all the others as not
      virtual void MarkPartAsMain(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest* request, ::viam::app::v1::MarkPartAsMainResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MarkPartAsMain(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest* request, ::viam::app::v1::MarkPartAsMainResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Marks part for restart. Once the robot part checks-in with the app the flag
      // is reset on the robot part. Calling this multiple times before a robot part
      // checks-in has no affect.
      // Note: This API may be removed in the near future.
      // TODO(APP-388): Remove
      virtual void MarkPartForRestart(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest* request, ::viam::app::v1::MarkPartForRestartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MarkPartForRestart(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest* request, ::viam::app::v1::MarkPartForRestartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Create a new generated Secret in the Robot Part.
      //  - Succeeds if there are no more than 2 active secrets after creation.
      virtual void CreateRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest* request, ::viam::app::v1::CreateRobotPartSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest* request, ::viam::app::v1::CreateRobotPartSecretResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Delete a Secret from the RobotPart.
      virtual void DeleteRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest* request, ::viam::app::v1::DeleteRobotPartSecretResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest* request, ::viam::app::v1::DeleteRobotPartSecretResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a list of robots
      virtual void ListRobots(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest* request, ::viam::app::v1::ListRobotsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListRobots(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest* request, ::viam::app::v1::ListRobotsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // NewRobot creates a new robot
      virtual void NewRobot(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest* request, ::viam::app::v1::NewRobotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NewRobot(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest* request, ::viam::app::v1::NewRobotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateRobot updates a robot
      virtual void UpdateRobot(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest* request, ::viam::app::v1::UpdateRobotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRobot(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest* request, ::viam::app::v1::UpdateRobotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DeleteRobot deletes a robot
      virtual void DeleteRobot(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest* request, ::viam::app::v1::DeleteRobotResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteRobot(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest* request, ::viam::app::v1::DeleteRobotResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Fragments
      //
      // Gets a list of fragments
      virtual void ListFragments(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest* request, ::viam::app::v1::ListFragmentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListFragments(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest* request, ::viam::app::v1::ListFragmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets a single fragment
      virtual void GetFragment(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest* request, ::viam::app::v1::GetFragmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFragment(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest* request, ::viam::app::v1::GetFragmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a fragment
      virtual void CreateFragment(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest* request, ::viam::app::v1::CreateFragmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateFragment(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest* request, ::viam::app::v1::CreateFragmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates a fragment
      virtual void UpdateFragment(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest* request, ::viam::app::v1::UpdateFragmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateFragment(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest* request, ::viam::app::v1::UpdateFragmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes a fragment
      virtual void DeleteFragment(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest* request, ::viam::app::v1::DeleteFragmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteFragment(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest* request, ::viam::app::v1::DeleteFragmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateOrganizationResponse>* AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateOrganizationResponse>* PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListOrganizationsResponse>* AsyncListOrganizationsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListOrganizationsResponse>* PrepareAsyncListOrganizationsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetOrganizationResponse>* AsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetOrganizationResponse>* PrepareAsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateOrganizationResponse>* AsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateOrganizationResponse>* PrepareAsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationResponse>* AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationResponse>* PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListOrganizationMembersResponse>* AsyncListOrganizationMembersRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListOrganizationMembersResponse>* PrepareAsyncListOrganizationMembersRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateOrganizationInviteResponse>* AsyncCreateOrganizationInviteRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateOrganizationInviteResponse>* PrepareAsyncCreateOrganizationInviteRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationMemberResponse>* AsyncDeleteOrganizationMemberRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationMemberResponse>* PrepareAsyncDeleteOrganizationMemberRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationInviteResponse>* AsyncDeleteOrganizationInviteRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteOrganizationInviteResponse>* PrepareAsyncDeleteOrganizationInviteRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ResendOrganizationInviteResponse>* AsyncResendOrganizationInviteRaw(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ResendOrganizationInviteResponse>* PrepareAsyncResendOrganizationInviteRaw(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateLocationResponse>* AsyncCreateLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateLocationResponse>* PrepareAsyncCreateLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetLocationResponse>* AsyncGetLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetLocationResponse>* PrepareAsyncGetLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateLocationResponse>* AsyncUpdateLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateLocationResponse>* PrepareAsyncUpdateLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteLocationResponse>* AsyncDeleteLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteLocationResponse>* PrepareAsyncDeleteLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListLocationsResponse>* AsyncListLocationsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListLocationsResponse>* PrepareAsyncListLocationsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ShareLocationResponse>* AsyncShareLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ShareLocationResponse>* PrepareAsyncShareLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UnshareLocationResponse>* AsyncUnshareLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UnshareLocationResponse>* PrepareAsyncUnshareLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::LocationAuthResponse>* AsyncLocationAuthRaw(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::LocationAuthResponse>* PrepareAsyncLocationAuthRaw(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateLocationSecretResponse>* AsyncCreateLocationSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateLocationSecretResponse>* PrepareAsyncCreateLocationSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteLocationSecretResponse>* AsyncDeleteLocationSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteLocationSecretResponse>* PrepareAsyncDeleteLocationSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotResponse>* AsyncGetRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotResponse>* PrepareAsyncGetRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRoverRentalRobotsResponse>* AsyncGetRoverRentalRobotsRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRoverRentalRobotsResponse>* PrepareAsyncGetRoverRentalRobotsRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartsResponse>* AsyncGetRobotPartsRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartsResponse>* PrepareAsyncGetRobotPartsRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartResponse>* AsyncGetRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartResponse>* PrepareAsyncGetRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartLogsResponse>* AsyncGetRobotPartLogsRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartLogsResponse>* PrepareAsyncGetRobotPartLogsRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::viam::app::v1::TailRobotPartLogsResponse>* TailRobotPartLogsRaw(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::viam::app::v1::TailRobotPartLogsResponse>* AsyncTailRobotPartLogsRaw(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::viam::app::v1::TailRobotPartLogsResponse>* PrepareAsyncTailRobotPartLogsRaw(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartHistoryResponse>* AsyncGetRobotPartHistoryRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetRobotPartHistoryResponse>* PrepareAsyncGetRobotPartHistoryRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateRobotPartResponse>* AsyncUpdateRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateRobotPartResponse>* PrepareAsyncUpdateRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NewRobotPartResponse>* AsyncNewRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NewRobotPartResponse>* PrepareAsyncNewRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotPartResponse>* AsyncDeleteRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotPartResponse>* PrepareAsyncDeleteRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::MarkPartAsMainResponse>* AsyncMarkPartAsMainRaw(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::MarkPartAsMainResponse>* PrepareAsyncMarkPartAsMainRaw(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::MarkPartForRestartResponse>* AsyncMarkPartForRestartRaw(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::MarkPartForRestartResponse>* PrepareAsyncMarkPartForRestartRaw(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateRobotPartSecretResponse>* AsyncCreateRobotPartSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateRobotPartSecretResponse>* PrepareAsyncCreateRobotPartSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotPartSecretResponse>* AsyncDeleteRobotPartSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotPartSecretResponse>* PrepareAsyncDeleteRobotPartSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListRobotsResponse>* AsyncListRobotsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListRobotsResponse>* PrepareAsyncListRobotsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NewRobotResponse>* AsyncNewRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NewRobotResponse>* PrepareAsyncNewRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateRobotResponse>* AsyncUpdateRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateRobotResponse>* PrepareAsyncUpdateRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotResponse>* AsyncDeleteRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteRobotResponse>* PrepareAsyncDeleteRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListFragmentsResponse>* AsyncListFragmentsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ListFragmentsResponse>* PrepareAsyncListFragmentsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetFragmentResponse>* AsyncGetFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::GetFragmentResponse>* PrepareAsyncGetFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateFragmentResponse>* AsyncCreateFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CreateFragmentResponse>* PrepareAsyncCreateFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateFragmentResponse>* AsyncUpdateFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::UpdateFragmentResponse>* PrepareAsyncUpdateFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteFragmentResponse>* AsyncDeleteFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::DeleteFragmentResponse>* PrepareAsyncDeleteFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest& request, ::viam::app::v1::CreateOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateOrganizationResponse>> AsyncCreateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateOrganizationResponse>>(AsyncCreateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateOrganizationResponse>> PrepareAsyncCreateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateOrganizationResponse>>(PrepareAsyncCreateOrganizationRaw(context, request, cq));
    }
    ::grpc::Status ListOrganizations(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest& request, ::viam::app::v1::ListOrganizationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListOrganizationsResponse>> AsyncListOrganizations(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListOrganizationsResponse>>(AsyncListOrganizationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListOrganizationsResponse>> PrepareAsyncListOrganizations(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListOrganizationsResponse>>(PrepareAsyncListOrganizationsRaw(context, request, cq));
    }
    ::grpc::Status GetOrganization(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest& request, ::viam::app::v1::GetOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetOrganizationResponse>> AsyncGetOrganization(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetOrganizationResponse>>(AsyncGetOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetOrganizationResponse>> PrepareAsyncGetOrganization(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetOrganizationResponse>>(PrepareAsyncGetOrganizationRaw(context, request, cq));
    }
    ::grpc::Status UpdateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest& request, ::viam::app::v1::UpdateOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateOrganizationResponse>> AsyncUpdateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateOrganizationResponse>>(AsyncUpdateOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateOrganizationResponse>> PrepareAsyncUpdateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateOrganizationResponse>>(PrepareAsyncUpdateOrganizationRaw(context, request, cq));
    }
    ::grpc::Status DeleteOrganization(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest& request, ::viam::app::v1::DeleteOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationResponse>> AsyncDeleteOrganization(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationResponse>>(AsyncDeleteOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationResponse>> PrepareAsyncDeleteOrganization(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationResponse>>(PrepareAsyncDeleteOrganizationRaw(context, request, cq));
    }
    ::grpc::Status ListOrganizationMembers(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest& request, ::viam::app::v1::ListOrganizationMembersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListOrganizationMembersResponse>> AsyncListOrganizationMembers(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListOrganizationMembersResponse>>(AsyncListOrganizationMembersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListOrganizationMembersResponse>> PrepareAsyncListOrganizationMembers(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListOrganizationMembersResponse>>(PrepareAsyncListOrganizationMembersRaw(context, request, cq));
    }
    ::grpc::Status CreateOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest& request, ::viam::app::v1::CreateOrganizationInviteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateOrganizationInviteResponse>> AsyncCreateOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateOrganizationInviteResponse>>(AsyncCreateOrganizationInviteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateOrganizationInviteResponse>> PrepareAsyncCreateOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateOrganizationInviteResponse>>(PrepareAsyncCreateOrganizationInviteRaw(context, request, cq));
    }
    ::grpc::Status DeleteOrganizationMember(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest& request, ::viam::app::v1::DeleteOrganizationMemberResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationMemberResponse>> AsyncDeleteOrganizationMember(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationMemberResponse>>(AsyncDeleteOrganizationMemberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationMemberResponse>> PrepareAsyncDeleteOrganizationMember(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationMemberResponse>>(PrepareAsyncDeleteOrganizationMemberRaw(context, request, cq));
    }
    ::grpc::Status DeleteOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest& request, ::viam::app::v1::DeleteOrganizationInviteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationInviteResponse>> AsyncDeleteOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationInviteResponse>>(AsyncDeleteOrganizationInviteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationInviteResponse>> PrepareAsyncDeleteOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationInviteResponse>>(PrepareAsyncDeleteOrganizationInviteRaw(context, request, cq));
    }
    ::grpc::Status ResendOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest& request, ::viam::app::v1::ResendOrganizationInviteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ResendOrganizationInviteResponse>> AsyncResendOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ResendOrganizationInviteResponse>>(AsyncResendOrganizationInviteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ResendOrganizationInviteResponse>> PrepareAsyncResendOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ResendOrganizationInviteResponse>>(PrepareAsyncResendOrganizationInviteRaw(context, request, cq));
    }
    ::grpc::Status CreateLocation(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest& request, ::viam::app::v1::CreateLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateLocationResponse>> AsyncCreateLocation(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateLocationResponse>>(AsyncCreateLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateLocationResponse>> PrepareAsyncCreateLocation(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateLocationResponse>>(PrepareAsyncCreateLocationRaw(context, request, cq));
    }
    ::grpc::Status GetLocation(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest& request, ::viam::app::v1::GetLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetLocationResponse>> AsyncGetLocation(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetLocationResponse>>(AsyncGetLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetLocationResponse>> PrepareAsyncGetLocation(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetLocationResponse>>(PrepareAsyncGetLocationRaw(context, request, cq));
    }
    ::grpc::Status UpdateLocation(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest& request, ::viam::app::v1::UpdateLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateLocationResponse>> AsyncUpdateLocation(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateLocationResponse>>(AsyncUpdateLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateLocationResponse>> PrepareAsyncUpdateLocation(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateLocationResponse>>(PrepareAsyncUpdateLocationRaw(context, request, cq));
    }
    ::grpc::Status DeleteLocation(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest& request, ::viam::app::v1::DeleteLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteLocationResponse>> AsyncDeleteLocation(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteLocationResponse>>(AsyncDeleteLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteLocationResponse>> PrepareAsyncDeleteLocation(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteLocationResponse>>(PrepareAsyncDeleteLocationRaw(context, request, cq));
    }
    ::grpc::Status ListLocations(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest& request, ::viam::app::v1::ListLocationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListLocationsResponse>> AsyncListLocations(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListLocationsResponse>>(AsyncListLocationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListLocationsResponse>> PrepareAsyncListLocations(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListLocationsResponse>>(PrepareAsyncListLocationsRaw(context, request, cq));
    }
    ::grpc::Status ShareLocation(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest& request, ::viam::app::v1::ShareLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ShareLocationResponse>> AsyncShareLocation(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ShareLocationResponse>>(AsyncShareLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ShareLocationResponse>> PrepareAsyncShareLocation(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ShareLocationResponse>>(PrepareAsyncShareLocationRaw(context, request, cq));
    }
    ::grpc::Status UnshareLocation(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest& request, ::viam::app::v1::UnshareLocationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UnshareLocationResponse>> AsyncUnshareLocation(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UnshareLocationResponse>>(AsyncUnshareLocationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UnshareLocationResponse>> PrepareAsyncUnshareLocation(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UnshareLocationResponse>>(PrepareAsyncUnshareLocationRaw(context, request, cq));
    }
    ::grpc::Status LocationAuth(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest& request, ::viam::app::v1::LocationAuthResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::LocationAuthResponse>> AsyncLocationAuth(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::LocationAuthResponse>>(AsyncLocationAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::LocationAuthResponse>> PrepareAsyncLocationAuth(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::LocationAuthResponse>>(PrepareAsyncLocationAuthRaw(context, request, cq));
    }
    ::grpc::Status CreateLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest& request, ::viam::app::v1::CreateLocationSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateLocationSecretResponse>> AsyncCreateLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateLocationSecretResponse>>(AsyncCreateLocationSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateLocationSecretResponse>> PrepareAsyncCreateLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateLocationSecretResponse>>(PrepareAsyncCreateLocationSecretRaw(context, request, cq));
    }
    ::grpc::Status DeleteLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest& request, ::viam::app::v1::DeleteLocationSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteLocationSecretResponse>> AsyncDeleteLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteLocationSecretResponse>>(AsyncDeleteLocationSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteLocationSecretResponse>> PrepareAsyncDeleteLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteLocationSecretResponse>>(PrepareAsyncDeleteLocationSecretRaw(context, request, cq));
    }
    ::grpc::Status GetRobot(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest& request, ::viam::app::v1::GetRobotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotResponse>> AsyncGetRobot(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotResponse>>(AsyncGetRobotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotResponse>> PrepareAsyncGetRobot(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotResponse>>(PrepareAsyncGetRobotRaw(context, request, cq));
    }
    ::grpc::Status GetRoverRentalRobots(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest& request, ::viam::app::v1::GetRoverRentalRobotsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRoverRentalRobotsResponse>> AsyncGetRoverRentalRobots(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRoverRentalRobotsResponse>>(AsyncGetRoverRentalRobotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRoverRentalRobotsResponse>> PrepareAsyncGetRoverRentalRobots(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRoverRentalRobotsResponse>>(PrepareAsyncGetRoverRentalRobotsRaw(context, request, cq));
    }
    ::grpc::Status GetRobotParts(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest& request, ::viam::app::v1::GetRobotPartsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartsResponse>> AsyncGetRobotParts(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartsResponse>>(AsyncGetRobotPartsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartsResponse>> PrepareAsyncGetRobotParts(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartsResponse>>(PrepareAsyncGetRobotPartsRaw(context, request, cq));
    }
    ::grpc::Status GetRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest& request, ::viam::app::v1::GetRobotPartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartResponse>> AsyncGetRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartResponse>>(AsyncGetRobotPartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartResponse>> PrepareAsyncGetRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartResponse>>(PrepareAsyncGetRobotPartRaw(context, request, cq));
    }
    ::grpc::Status GetRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest& request, ::viam::app::v1::GetRobotPartLogsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartLogsResponse>> AsyncGetRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartLogsResponse>>(AsyncGetRobotPartLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartLogsResponse>> PrepareAsyncGetRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartLogsResponse>>(PrepareAsyncGetRobotPartLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::viam::app::v1::TailRobotPartLogsResponse>> TailRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::viam::app::v1::TailRobotPartLogsResponse>>(TailRobotPartLogsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::app::v1::TailRobotPartLogsResponse>> AsyncTailRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::app::v1::TailRobotPartLogsResponse>>(AsyncTailRobotPartLogsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::app::v1::TailRobotPartLogsResponse>> PrepareAsyncTailRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::app::v1::TailRobotPartLogsResponse>>(PrepareAsyncTailRobotPartLogsRaw(context, request, cq));
    }
    ::grpc::Status GetRobotPartHistory(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest& request, ::viam::app::v1::GetRobotPartHistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartHistoryResponse>> AsyncGetRobotPartHistory(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartHistoryResponse>>(AsyncGetRobotPartHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartHistoryResponse>> PrepareAsyncGetRobotPartHistory(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartHistoryResponse>>(PrepareAsyncGetRobotPartHistoryRaw(context, request, cq));
    }
    ::grpc::Status UpdateRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest& request, ::viam::app::v1::UpdateRobotPartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateRobotPartResponse>> AsyncUpdateRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateRobotPartResponse>>(AsyncUpdateRobotPartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateRobotPartResponse>> PrepareAsyncUpdateRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateRobotPartResponse>>(PrepareAsyncUpdateRobotPartRaw(context, request, cq));
    }
    ::grpc::Status NewRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest& request, ::viam::app::v1::NewRobotPartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NewRobotPartResponse>> AsyncNewRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NewRobotPartResponse>>(AsyncNewRobotPartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NewRobotPartResponse>> PrepareAsyncNewRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NewRobotPartResponse>>(PrepareAsyncNewRobotPartRaw(context, request, cq));
    }
    ::grpc::Status DeleteRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest& request, ::viam::app::v1::DeleteRobotPartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotPartResponse>> AsyncDeleteRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotPartResponse>>(AsyncDeleteRobotPartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotPartResponse>> PrepareAsyncDeleteRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotPartResponse>>(PrepareAsyncDeleteRobotPartRaw(context, request, cq));
    }
    ::grpc::Status MarkPartAsMain(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest& request, ::viam::app::v1::MarkPartAsMainResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::MarkPartAsMainResponse>> AsyncMarkPartAsMain(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::MarkPartAsMainResponse>>(AsyncMarkPartAsMainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::MarkPartAsMainResponse>> PrepareAsyncMarkPartAsMain(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::MarkPartAsMainResponse>>(PrepareAsyncMarkPartAsMainRaw(context, request, cq));
    }
    ::grpc::Status MarkPartForRestart(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest& request, ::viam::app::v1::MarkPartForRestartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::MarkPartForRestartResponse>> AsyncMarkPartForRestart(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::MarkPartForRestartResponse>>(AsyncMarkPartForRestartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::MarkPartForRestartResponse>> PrepareAsyncMarkPartForRestart(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::MarkPartForRestartResponse>>(PrepareAsyncMarkPartForRestartRaw(context, request, cq));
    }
    ::grpc::Status CreateRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest& request, ::viam::app::v1::CreateRobotPartSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateRobotPartSecretResponse>> AsyncCreateRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateRobotPartSecretResponse>>(AsyncCreateRobotPartSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateRobotPartSecretResponse>> PrepareAsyncCreateRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateRobotPartSecretResponse>>(PrepareAsyncCreateRobotPartSecretRaw(context, request, cq));
    }
    ::grpc::Status DeleteRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest& request, ::viam::app::v1::DeleteRobotPartSecretResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotPartSecretResponse>> AsyncDeleteRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotPartSecretResponse>>(AsyncDeleteRobotPartSecretRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotPartSecretResponse>> PrepareAsyncDeleteRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotPartSecretResponse>>(PrepareAsyncDeleteRobotPartSecretRaw(context, request, cq));
    }
    ::grpc::Status ListRobots(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest& request, ::viam::app::v1::ListRobotsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListRobotsResponse>> AsyncListRobots(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListRobotsResponse>>(AsyncListRobotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListRobotsResponse>> PrepareAsyncListRobots(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListRobotsResponse>>(PrepareAsyncListRobotsRaw(context, request, cq));
    }
    ::grpc::Status NewRobot(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest& request, ::viam::app::v1::NewRobotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NewRobotResponse>> AsyncNewRobot(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NewRobotResponse>>(AsyncNewRobotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NewRobotResponse>> PrepareAsyncNewRobot(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NewRobotResponse>>(PrepareAsyncNewRobotRaw(context, request, cq));
    }
    ::grpc::Status UpdateRobot(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest& request, ::viam::app::v1::UpdateRobotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateRobotResponse>> AsyncUpdateRobot(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateRobotResponse>>(AsyncUpdateRobotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateRobotResponse>> PrepareAsyncUpdateRobot(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateRobotResponse>>(PrepareAsyncUpdateRobotRaw(context, request, cq));
    }
    ::grpc::Status DeleteRobot(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest& request, ::viam::app::v1::DeleteRobotResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotResponse>> AsyncDeleteRobot(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotResponse>>(AsyncDeleteRobotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotResponse>> PrepareAsyncDeleteRobot(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotResponse>>(PrepareAsyncDeleteRobotRaw(context, request, cq));
    }
    ::grpc::Status ListFragments(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest& request, ::viam::app::v1::ListFragmentsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListFragmentsResponse>> AsyncListFragments(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListFragmentsResponse>>(AsyncListFragmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListFragmentsResponse>> PrepareAsyncListFragments(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListFragmentsResponse>>(PrepareAsyncListFragmentsRaw(context, request, cq));
    }
    ::grpc::Status GetFragment(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest& request, ::viam::app::v1::GetFragmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetFragmentResponse>> AsyncGetFragment(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetFragmentResponse>>(AsyncGetFragmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetFragmentResponse>> PrepareAsyncGetFragment(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetFragmentResponse>>(PrepareAsyncGetFragmentRaw(context, request, cq));
    }
    ::grpc::Status CreateFragment(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest& request, ::viam::app::v1::CreateFragmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateFragmentResponse>> AsyncCreateFragment(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateFragmentResponse>>(AsyncCreateFragmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateFragmentResponse>> PrepareAsyncCreateFragment(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateFragmentResponse>>(PrepareAsyncCreateFragmentRaw(context, request, cq));
    }
    ::grpc::Status UpdateFragment(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest& request, ::viam::app::v1::UpdateFragmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateFragmentResponse>> AsyncUpdateFragment(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateFragmentResponse>>(AsyncUpdateFragmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateFragmentResponse>> PrepareAsyncUpdateFragment(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateFragmentResponse>>(PrepareAsyncUpdateFragmentRaw(context, request, cq));
    }
    ::grpc::Status DeleteFragment(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest& request, ::viam::app::v1::DeleteFragmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteFragmentResponse>> AsyncDeleteFragment(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteFragmentResponse>>(AsyncDeleteFragmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteFragmentResponse>> PrepareAsyncDeleteFragment(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteFragmentResponse>>(PrepareAsyncDeleteFragmentRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest* request, ::viam::app::v1::CreateOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest* request, ::viam::app::v1::CreateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListOrganizations(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest* request, ::viam::app::v1::ListOrganizationsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListOrganizations(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest* request, ::viam::app::v1::ListOrganizationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetOrganization(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest* request, ::viam::app::v1::GetOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOrganization(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest* request, ::viam::app::v1::GetOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest* request, ::viam::app::v1::UpdateOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateOrganization(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest* request, ::viam::app::v1::UpdateOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteOrganization(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest* request, ::viam::app::v1::DeleteOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteOrganization(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest* request, ::viam::app::v1::DeleteOrganizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListOrganizationMembers(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest* request, ::viam::app::v1::ListOrganizationMembersResponse* response, std::function<void(::grpc::Status)>) override;
      void ListOrganizationMembers(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest* request, ::viam::app::v1::ListOrganizationMembersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest* request, ::viam::app::v1::CreateOrganizationInviteResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest* request, ::viam::app::v1::CreateOrganizationInviteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteOrganizationMember(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest* request, ::viam::app::v1::DeleteOrganizationMemberResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteOrganizationMember(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest* request, ::viam::app::v1::DeleteOrganizationMemberResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest* request, ::viam::app::v1::DeleteOrganizationInviteResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest* request, ::viam::app::v1::DeleteOrganizationInviteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ResendOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest* request, ::viam::app::v1::ResendOrganizationInviteResponse* response, std::function<void(::grpc::Status)>) override;
      void ResendOrganizationInvite(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest* request, ::viam::app::v1::ResendOrganizationInviteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateLocation(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest* request, ::viam::app::v1::CreateLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateLocation(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest* request, ::viam::app::v1::CreateLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLocation(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest* request, ::viam::app::v1::GetLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLocation(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest* request, ::viam::app::v1::GetLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateLocation(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest* request, ::viam::app::v1::UpdateLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateLocation(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest* request, ::viam::app::v1::UpdateLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteLocation(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest* request, ::viam::app::v1::DeleteLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteLocation(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest* request, ::viam::app::v1::DeleteLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListLocations(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest* request, ::viam::app::v1::ListLocationsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListLocations(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest* request, ::viam::app::v1::ListLocationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ShareLocation(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest* request, ::viam::app::v1::ShareLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void ShareLocation(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest* request, ::viam::app::v1::ShareLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnshareLocation(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest* request, ::viam::app::v1::UnshareLocationResponse* response, std::function<void(::grpc::Status)>) override;
      void UnshareLocation(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest* request, ::viam::app::v1::UnshareLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LocationAuth(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest* request, ::viam::app::v1::LocationAuthResponse* response, std::function<void(::grpc::Status)>) override;
      void LocationAuth(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest* request, ::viam::app::v1::LocationAuthResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest* request, ::viam::app::v1::CreateLocationSecretResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest* request, ::viam::app::v1::CreateLocationSecretResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest* request, ::viam::app::v1::DeleteLocationSecretResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteLocationSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest* request, ::viam::app::v1::DeleteLocationSecretResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRobot(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest* request, ::viam::app::v1::GetRobotResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRobot(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest* request, ::viam::app::v1::GetRobotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRoverRentalRobots(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest* request, ::viam::app::v1::GetRoverRentalRobotsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRoverRentalRobots(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest* request, ::viam::app::v1::GetRoverRentalRobotsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRobotParts(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest* request, ::viam::app::v1::GetRobotPartsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRobotParts(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest* request, ::viam::app::v1::GetRobotPartsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest* request, ::viam::app::v1::GetRobotPartResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest* request, ::viam::app::v1::GetRobotPartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest* request, ::viam::app::v1::GetRobotPartLogsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest* request, ::viam::app::v1::GetRobotPartLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TailRobotPartLogs(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest* request, ::grpc::ClientReadReactor< ::viam::app::v1::TailRobotPartLogsResponse>* reactor) override;
      void GetRobotPartHistory(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest* request, ::viam::app::v1::GetRobotPartHistoryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRobotPartHistory(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest* request, ::viam::app::v1::GetRobotPartHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest* request, ::viam::app::v1::UpdateRobotPartResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest* request, ::viam::app::v1::UpdateRobotPartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NewRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest* request, ::viam::app::v1::NewRobotPartResponse* response, std::function<void(::grpc::Status)>) override;
      void NewRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest* request, ::viam::app::v1::NewRobotPartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest* request, ::viam::app::v1::DeleteRobotPartResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteRobotPart(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest* request, ::viam::app::v1::DeleteRobotPartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MarkPartAsMain(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest* request, ::viam::app::v1::MarkPartAsMainResponse* response, std::function<void(::grpc::Status)>) override;
      void MarkPartAsMain(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest* request, ::viam::app::v1::MarkPartAsMainResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MarkPartForRestart(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest* request, ::viam::app::v1::MarkPartForRestartResponse* response, std::function<void(::grpc::Status)>) override;
      void MarkPartForRestart(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest* request, ::viam::app::v1::MarkPartForRestartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest* request, ::viam::app::v1::CreateRobotPartSecretResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest* request, ::viam::app::v1::CreateRobotPartSecretResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest* request, ::viam::app::v1::DeleteRobotPartSecretResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteRobotPartSecret(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest* request, ::viam::app::v1::DeleteRobotPartSecretResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListRobots(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest* request, ::viam::app::v1::ListRobotsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListRobots(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest* request, ::viam::app::v1::ListRobotsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NewRobot(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest* request, ::viam::app::v1::NewRobotResponse* response, std::function<void(::grpc::Status)>) override;
      void NewRobot(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest* request, ::viam::app::v1::NewRobotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateRobot(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest* request, ::viam::app::v1::UpdateRobotResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateRobot(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest* request, ::viam::app::v1::UpdateRobotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteRobot(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest* request, ::viam::app::v1::DeleteRobotResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteRobot(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest* request, ::viam::app::v1::DeleteRobotResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListFragments(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest* request, ::viam::app::v1::ListFragmentsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListFragments(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest* request, ::viam::app::v1::ListFragmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetFragment(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest* request, ::viam::app::v1::GetFragmentResponse* response, std::function<void(::grpc::Status)>) override;
      void GetFragment(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest* request, ::viam::app::v1::GetFragmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateFragment(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest* request, ::viam::app::v1::CreateFragmentResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateFragment(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest* request, ::viam::app::v1::CreateFragmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateFragment(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest* request, ::viam::app::v1::UpdateFragmentResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateFragment(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest* request, ::viam::app::v1::UpdateFragmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteFragment(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest* request, ::viam::app::v1::DeleteFragmentResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteFragment(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest* request, ::viam::app::v1::DeleteFragmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateOrganizationResponse>* AsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateOrganizationResponse>* PrepareAsyncCreateOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListOrganizationsResponse>* AsyncListOrganizationsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListOrganizationsResponse>* PrepareAsyncListOrganizationsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetOrganizationResponse>* AsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetOrganizationResponse>* PrepareAsyncGetOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateOrganizationResponse>* AsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateOrganizationResponse>* PrepareAsyncUpdateOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationResponse>* AsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationResponse>* PrepareAsyncDeleteOrganizationRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListOrganizationMembersResponse>* AsyncListOrganizationMembersRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListOrganizationMembersResponse>* PrepareAsyncListOrganizationMembersRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListOrganizationMembersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateOrganizationInviteResponse>* AsyncCreateOrganizationInviteRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateOrganizationInviteResponse>* PrepareAsyncCreateOrganizationInviteRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationMemberResponse>* AsyncDeleteOrganizationMemberRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationMemberResponse>* PrepareAsyncDeleteOrganizationMemberRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationInviteResponse>* AsyncDeleteOrganizationInviteRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteOrganizationInviteResponse>* PrepareAsyncDeleteOrganizationInviteRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ResendOrganizationInviteResponse>* AsyncResendOrganizationInviteRaw(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ResendOrganizationInviteResponse>* PrepareAsyncResendOrganizationInviteRaw(::grpc::ClientContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateLocationResponse>* AsyncCreateLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateLocationResponse>* PrepareAsyncCreateLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetLocationResponse>* AsyncGetLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetLocationResponse>* PrepareAsyncGetLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateLocationResponse>* AsyncUpdateLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateLocationResponse>* PrepareAsyncUpdateLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteLocationResponse>* AsyncDeleteLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteLocationResponse>* PrepareAsyncDeleteLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListLocationsResponse>* AsyncListLocationsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListLocationsResponse>* PrepareAsyncListLocationsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListLocationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ShareLocationResponse>* AsyncShareLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ShareLocationResponse>* PrepareAsyncShareLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::ShareLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UnshareLocationResponse>* AsyncUnshareLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UnshareLocationResponse>* PrepareAsyncUnshareLocationRaw(::grpc::ClientContext* context, const ::viam::app::v1::UnshareLocationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::LocationAuthResponse>* AsyncLocationAuthRaw(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::LocationAuthResponse>* PrepareAsyncLocationAuthRaw(::grpc::ClientContext* context, const ::viam::app::v1::LocationAuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateLocationSecretResponse>* AsyncCreateLocationSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateLocationSecretResponse>* PrepareAsyncCreateLocationSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateLocationSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteLocationSecretResponse>* AsyncDeleteLocationSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteLocationSecretResponse>* PrepareAsyncDeleteLocationSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteLocationSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotResponse>* AsyncGetRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotResponse>* PrepareAsyncGetRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRoverRentalRobotsResponse>* AsyncGetRoverRentalRobotsRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRoverRentalRobotsResponse>* PrepareAsyncGetRoverRentalRobotsRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartsResponse>* AsyncGetRobotPartsRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartsResponse>* PrepareAsyncGetRobotPartsRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartResponse>* AsyncGetRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartResponse>* PrepareAsyncGetRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartLogsResponse>* AsyncGetRobotPartLogsRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartLogsResponse>* PrepareAsyncGetRobotPartLogsRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::viam::app::v1::TailRobotPartLogsResponse>* TailRobotPartLogsRaw(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest& request) override;
    ::grpc::ClientAsyncReader< ::viam::app::v1::TailRobotPartLogsResponse>* AsyncTailRobotPartLogsRaw(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::viam::app::v1::TailRobotPartLogsResponse>* PrepareAsyncTailRobotPartLogsRaw(::grpc::ClientContext* context, const ::viam::app::v1::TailRobotPartLogsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartHistoryResponse>* AsyncGetRobotPartHistoryRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetRobotPartHistoryResponse>* PrepareAsyncGetRobotPartHistoryRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateRobotPartResponse>* AsyncUpdateRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateRobotPartResponse>* PrepareAsyncUpdateRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotPartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NewRobotPartResponse>* AsyncNewRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NewRobotPartResponse>* PrepareAsyncNewRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotPartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotPartResponse>* AsyncDeleteRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotPartResponse>* PrepareAsyncDeleteRobotPartRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::MarkPartAsMainResponse>* AsyncMarkPartAsMainRaw(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::MarkPartAsMainResponse>* PrepareAsyncMarkPartAsMainRaw(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartAsMainRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::MarkPartForRestartResponse>* AsyncMarkPartForRestartRaw(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::MarkPartForRestartResponse>* PrepareAsyncMarkPartForRestartRaw(::grpc::ClientContext* context, const ::viam::app::v1::MarkPartForRestartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateRobotPartSecretResponse>* AsyncCreateRobotPartSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateRobotPartSecretResponse>* PrepareAsyncCreateRobotPartSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotPartSecretResponse>* AsyncDeleteRobotPartSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotPartSecretResponse>* PrepareAsyncDeleteRobotPartSecretRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListRobotsResponse>* AsyncListRobotsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListRobotsResponse>* PrepareAsyncListRobotsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListRobotsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NewRobotResponse>* AsyncNewRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NewRobotResponse>* PrepareAsyncNewRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::NewRobotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateRobotResponse>* AsyncUpdateRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateRobotResponse>* PrepareAsyncUpdateRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateRobotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotResponse>* AsyncDeleteRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteRobotResponse>* PrepareAsyncDeleteRobotRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteRobotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListFragmentsResponse>* AsyncListFragmentsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ListFragmentsResponse>* PrepareAsyncListFragmentsRaw(::grpc::ClientContext* context, const ::viam::app::v1::ListFragmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetFragmentResponse>* AsyncGetFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::GetFragmentResponse>* PrepareAsyncGetFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::GetFragmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateFragmentResponse>* AsyncCreateFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CreateFragmentResponse>* PrepareAsyncCreateFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::CreateFragmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateFragmentResponse>* AsyncUpdateFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::UpdateFragmentResponse>* PrepareAsyncUpdateFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::UpdateFragmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteFragmentResponse>* AsyncDeleteFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::DeleteFragmentResponse>* PrepareAsyncDeleteFragmentRaw(::grpc::ClientContext* context, const ::viam::app::v1::DeleteFragmentRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_ListOrganizations_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_ListOrganizationMembers_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateOrganizationInvite_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOrganizationMember_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteOrganizationInvite_;
    const ::grpc::internal::RpcMethod rpcmethod_ResendOrganizationInvite_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_ListLocations_;
    const ::grpc::internal::RpcMethod rpcmethod_ShareLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_UnshareLocation_;
    const ::grpc::internal::RpcMethod rpcmethod_LocationAuth_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateLocationSecret_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteLocationSecret_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRobot_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRoverRentalRobots_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRobotParts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRobotPart_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRobotPartLogs_;
    const ::grpc::internal::RpcMethod rpcmethod_TailRobotPartLogs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRobotPartHistory_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRobotPart_;
    const ::grpc::internal::RpcMethod rpcmethod_NewRobotPart_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRobotPart_;
    const ::grpc::internal::RpcMethod rpcmethod_MarkPartAsMain_;
    const ::grpc::internal::RpcMethod rpcmethod_MarkPartForRestart_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRobotPartSecret_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRobotPartSecret_;
    const ::grpc::internal::RpcMethod rpcmethod_ListRobots_;
    const ::grpc::internal::RpcMethod rpcmethod_NewRobot_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRobot_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteRobot_;
    const ::grpc::internal::RpcMethod rpcmethod_ListFragments_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFragment_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateFragment_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateFragment_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFragment_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a new organization
    virtual ::grpc::Status CreateOrganization(::grpc::ServerContext* context, const ::viam::app::v1::CreateOrganizationRequest* request, ::viam::app::v1::CreateOrganizationResponse* response);
    // List organizations
    virtual ::grpc::Status ListOrganizations(::grpc::ServerContext* context, const ::viam::app::v1::ListOrganizationsRequest* request, ::viam::app::v1::ListOrganizationsResponse* response);
    // Get an organization
    virtual ::grpc::Status GetOrganization(::grpc::ServerContext* context, const ::viam::app::v1::GetOrganizationRequest* request, ::viam::app::v1::GetOrganizationResponse* response);
    // Update an organization
    virtual ::grpc::Status UpdateOrganization(::grpc::ServerContext* context, const ::viam::app::v1::UpdateOrganizationRequest* request, ::viam::app::v1::UpdateOrganizationResponse* response);
    // Delete an organization
    virtual ::grpc::Status DeleteOrganization(::grpc::ServerContext* context, const ::viam::app::v1::DeleteOrganizationRequest* request, ::viam::app::v1::DeleteOrganizationResponse* response);
    // List all members of an organization and all invited members to the organization.
    virtual ::grpc::Status ListOrganizationMembers(::grpc::ServerContext* context, const ::viam::app::v1::ListOrganizationMembersRequest* request, ::viam::app::v1::ListOrganizationMembersResponse* response);
    // Create an organization invite to an organization
    virtual ::grpc::Status CreateOrganizationInvite(::grpc::ServerContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest* request, ::viam::app::v1::CreateOrganizationInviteResponse* response);
    // Delete an organization member from an organization
    virtual ::grpc::Status DeleteOrganizationMember(::grpc::ServerContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest* request, ::viam::app::v1::DeleteOrganizationMemberResponse* response);
    // Delete an organization invite
    virtual ::grpc::Status DeleteOrganizationInvite(::grpc::ServerContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest* request, ::viam::app::v1::DeleteOrganizationInviteResponse* response);
    // Resend an organization invite
    virtual ::grpc::Status ResendOrganizationInvite(::grpc::ServerContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest* request, ::viam::app::v1::ResendOrganizationInviteResponse* response);
    // Location
    //
    // Create a location
    virtual ::grpc::Status CreateLocation(::grpc::ServerContext* context, const ::viam::app::v1::CreateLocationRequest* request, ::viam::app::v1::CreateLocationResponse* response);
    // Get a location
    virtual ::grpc::Status GetLocation(::grpc::ServerContext* context, const ::viam::app::v1::GetLocationRequest* request, ::viam::app::v1::GetLocationResponse* response);
    // Update a location
    virtual ::grpc::Status UpdateLocation(::grpc::ServerContext* context, const ::viam::app::v1::UpdateLocationRequest* request, ::viam::app::v1::UpdateLocationResponse* response);
    // Delete a location
    virtual ::grpc::Status DeleteLocation(::grpc::ServerContext* context, const ::viam::app::v1::DeleteLocationRequest* request, ::viam::app::v1::DeleteLocationResponse* response);
    // Get a list of locations
    virtual ::grpc::Status ListLocations(::grpc::ServerContext* context, const ::viam::app::v1::ListLocationsRequest* request, ::viam::app::v1::ListLocationsResponse* response);
    // Share a location with an organization
    virtual ::grpc::Status ShareLocation(::grpc::ServerContext* context, const ::viam::app::v1::ShareLocationRequest* request, ::viam::app::v1::ShareLocationResponse* response);
    // Stop sharing a location with an organization
    virtual ::grpc::Status UnshareLocation(::grpc::ServerContext* context, const ::viam::app::v1::UnshareLocationRequest* request, ::viam::app::v1::UnshareLocationResponse* response);
    // Get a location's authorization secrets
    virtual ::grpc::Status LocationAuth(::grpc::ServerContext* context, const ::viam::app::v1::LocationAuthRequest* request, ::viam::app::v1::LocationAuthResponse* response);
    // Create a new generated Secret in the Location.
    //  - Succeeds if there are no more than 2 active secrets after creation.
    virtual ::grpc::Status CreateLocationSecret(::grpc::ServerContext* context, const ::viam::app::v1::CreateLocationSecretRequest* request, ::viam::app::v1::CreateLocationSecretResponse* response);
    // Delete a Secret from the Location.
    virtual ::grpc::Status DeleteLocationSecret(::grpc::ServerContext* context, const ::viam::app::v1::DeleteLocationSecretRequest* request, ::viam::app::v1::DeleteLocationSecretResponse* response);
    // Get a specific robot by ID
    virtual ::grpc::Status GetRobot(::grpc::ServerContext* context, const ::viam::app::v1::GetRobotRequest* request, ::viam::app::v1::GetRobotResponse* response);
    // Get Rover Rental Location Robots
    virtual ::grpc::Status GetRoverRentalRobots(::grpc::ServerContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest* request, ::viam::app::v1::GetRoverRentalRobotsResponse* response);
    virtual ::grpc::Status GetRobotParts(::grpc::ServerContext* context, const ::viam::app::v1::GetRobotPartsRequest* request, ::viam::app::v1::GetRobotPartsResponse* response);
    // Get a specific robot part by ID
    virtual ::grpc::Status GetRobotPart(::grpc::ServerContext* context, const ::viam::app::v1::GetRobotPartRequest* request, ::viam::app::v1::GetRobotPartResponse* response);
    virtual ::grpc::Status GetRobotPartLogs(::grpc::ServerContext* context, const ::viam::app::v1::GetRobotPartLogsRequest* request, ::viam::app::v1::GetRobotPartLogsResponse* response);
    virtual ::grpc::Status TailRobotPartLogs(::grpc::ServerContext* context, const ::viam::app::v1::TailRobotPartLogsRequest* request, ::grpc::ServerWriter< ::viam::app::v1::TailRobotPartLogsResponse>* writer);
    // Get a specific robot part histy by ID
    virtual ::grpc::Status GetRobotPartHistory(::grpc::ServerContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest* request, ::viam::app::v1::GetRobotPartHistoryResponse* response);
    // Update a robot
    virtual ::grpc::Status UpdateRobotPart(::grpc::ServerContext* context, const ::viam::app::v1::UpdateRobotPartRequest* request, ::viam::app::v1::UpdateRobotPartResponse* response);
    // Create a new robot part
    virtual ::grpc::Status NewRobotPart(::grpc::ServerContext* context, const ::viam::app::v1::NewRobotPartRequest* request, ::viam::app::v1::NewRobotPartResponse* response);
    // Delete a robot part
    virtual ::grpc::Status DeleteRobotPart(::grpc::ServerContext* context, const ::viam::app::v1::DeleteRobotPartRequest* request, ::viam::app::v1::DeleteRobotPartResponse* response);
    // Marks the given part as the main part, and all the others as not
    virtual ::grpc::Status MarkPartAsMain(::grpc::ServerContext* context, const ::viam::app::v1::MarkPartAsMainRequest* request, ::viam::app::v1::MarkPartAsMainResponse* response);
    // Marks part for restart. Once the robot part checks-in with the app the flag
    // is reset on the robot part. Calling this multiple times before a robot part
    // checks-in has no affect.
    // Note: This API may be removed in the near future.
    // TODO(APP-388): Remove
    virtual ::grpc::Status MarkPartForRestart(::grpc::ServerContext* context, const ::viam::app::v1::MarkPartForRestartRequest* request, ::viam::app::v1::MarkPartForRestartResponse* response);
    // Create a new generated Secret in the Robot Part.
    //  - Succeeds if there are no more than 2 active secrets after creation.
    virtual ::grpc::Status CreateRobotPartSecret(::grpc::ServerContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest* request, ::viam::app::v1::CreateRobotPartSecretResponse* response);
    // Delete a Secret from the RobotPart.
    virtual ::grpc::Status DeleteRobotPartSecret(::grpc::ServerContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest* request, ::viam::app::v1::DeleteRobotPartSecretResponse* response);
    // Get a list of robots
    virtual ::grpc::Status ListRobots(::grpc::ServerContext* context, const ::viam::app::v1::ListRobotsRequest* request, ::viam::app::v1::ListRobotsResponse* response);
    // NewRobot creates a new robot
    virtual ::grpc::Status NewRobot(::grpc::ServerContext* context, const ::viam::app::v1::NewRobotRequest* request, ::viam::app::v1::NewRobotResponse* response);
    // UpdateRobot updates a robot
    virtual ::grpc::Status UpdateRobot(::grpc::ServerContext* context, const ::viam::app::v1::UpdateRobotRequest* request, ::viam::app::v1::UpdateRobotResponse* response);
    // DeleteRobot deletes a robot
    virtual ::grpc::Status DeleteRobot(::grpc::ServerContext* context, const ::viam::app::v1::DeleteRobotRequest* request, ::viam::app::v1::DeleteRobotResponse* response);
    // Fragments
    //
    // Gets a list of fragments
    virtual ::grpc::Status ListFragments(::grpc::ServerContext* context, const ::viam::app::v1::ListFragmentsRequest* request, ::viam::app::v1::ListFragmentsResponse* response);
    // Gets a single fragment
    virtual ::grpc::Status GetFragment(::grpc::ServerContext* context, const ::viam::app::v1::GetFragmentRequest* request, ::viam::app::v1::GetFragmentResponse* response);
    // Creates a fragment
    virtual ::grpc::Status CreateFragment(::grpc::ServerContext* context, const ::viam::app::v1::CreateFragmentRequest* request, ::viam::app::v1::CreateFragmentResponse* response);
    // Updates a fragment
    virtual ::grpc::Status UpdateFragment(::grpc::ServerContext* context, const ::viam::app::v1::UpdateFragmentRequest* request, ::viam::app::v1::UpdateFragmentResponse* response);
    // Deletes a fragment
    virtual ::grpc::Status DeleteFragment(::grpc::ServerContext* context, const ::viam::app::v1::DeleteFragmentRequest* request, ::viam::app::v1::DeleteFragmentResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationRequest* /*request*/, ::viam::app::v1::CreateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrganization(::grpc::ServerContext* context, ::viam::app::v1::CreateOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::CreateOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListOrganizations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListOrganizations() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListOrganizations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganizations(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListOrganizationsRequest* /*request*/, ::viam::app::v1::ListOrganizationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrganizations(::grpc::ServerContext* context, ::viam::app::v1::ListOrganizationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::ListOrganizationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOrganization() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetOrganizationRequest* /*request*/, ::viam::app::v1::GetOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrganization(::grpc::ServerContext* context, ::viam::app::v1::GetOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationRequest* /*request*/, ::viam::app::v1::UpdateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrganization(::grpc::ServerContext* context, ::viam::app::v1::UpdateOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::UpdateOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationRequest* /*request*/, ::viam::app::v1::DeleteOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrganization(::grpc::ServerContext* context, ::viam::app::v1::DeleteOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::DeleteOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListOrganizationMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListOrganizationMembers() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListOrganizationMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganizationMembers(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListOrganizationMembersRequest* /*request*/, ::viam::app::v1::ListOrganizationMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrganizationMembers(::grpc::ServerContext* context, ::viam::app::v1::ListOrganizationMembersRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::ListOrganizationMembersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateOrganizationInvite() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CreateOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationInviteRequest* /*request*/, ::viam::app::v1::CreateOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrganizationInvite(::grpc::ServerContext* context, ::viam::app::v1::CreateOrganizationInviteRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::CreateOrganizationInviteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOrganizationMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteOrganizationMember() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeleteOrganizationMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganizationMember(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationMemberRequest* /*request*/, ::viam::app::v1::DeleteOrganizationMemberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrganizationMember(::grpc::ServerContext* context, ::viam::app::v1::DeleteOrganizationMemberRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::DeleteOrganizationMemberResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteOrganizationInvite() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DeleteOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationInviteRequest* /*request*/, ::viam::app::v1::DeleteOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrganizationInvite(::grpc::ServerContext* context, ::viam::app::v1::DeleteOrganizationInviteRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::DeleteOrganizationInviteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResendOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResendOrganizationInvite() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_ResendOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResendOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ResendOrganizationInviteRequest* /*request*/, ::viam::app::v1::ResendOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResendOrganizationInvite(::grpc::ServerContext* context, ::viam::app::v1::ResendOrganizationInviteRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::ResendOrganizationInviteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateLocation() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_CreateLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateLocationRequest* /*request*/, ::viam::app::v1::CreateLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLocation(::grpc::ServerContext* context, ::viam::app::v1::CreateLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::CreateLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLocation() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetLocationRequest* /*request*/, ::viam::app::v1::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLocation(::grpc::ServerContext* context, ::viam::app::v1::GetLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateLocation() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_UpdateLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateLocationRequest* /*request*/, ::viam::app::v1::UpdateLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateLocation(::grpc::ServerContext* context, ::viam::app::v1::UpdateLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::UpdateLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteLocation() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_DeleteLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteLocationRequest* /*request*/, ::viam::app::v1::DeleteLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLocation(::grpc::ServerContext* context, ::viam::app::v1::DeleteLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::DeleteLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListLocations() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_ListLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLocations(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListLocationsRequest* /*request*/, ::viam::app::v1::ListLocationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLocations(::grpc::ServerContext* context, ::viam::app::v1::ListLocationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::ListLocationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShareLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShareLocation() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_ShareLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ShareLocationRequest* /*request*/, ::viam::app::v1::ShareLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShareLocation(::grpc::ServerContext* context, ::viam::app::v1::ShareLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::ShareLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnshareLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnshareLocation() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_UnshareLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnshareLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UnshareLocationRequest* /*request*/, ::viam::app::v1::UnshareLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnshareLocation(::grpc::ServerContext* context, ::viam::app::v1::UnshareLocationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::UnshareLocationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LocationAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LocationAuth() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_LocationAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LocationAuth(::grpc::ServerContext* /*context*/, const ::viam::app::v1::LocationAuthRequest* /*request*/, ::viam::app::v1::LocationAuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLocationAuth(::grpc::ServerContext* context, ::viam::app::v1::LocationAuthRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::LocationAuthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateLocationSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateLocationSecret() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_CreateLocationSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLocationSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateLocationSecretRequest* /*request*/, ::viam::app::v1::CreateLocationSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLocationSecret(::grpc::ServerContext* context, ::viam::app::v1::CreateLocationSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::CreateLocationSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLocationSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteLocationSecret() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_DeleteLocationSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLocationSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteLocationSecretRequest* /*request*/, ::viam::app::v1::DeleteLocationSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLocationSecret(::grpc::ServerContext* context, ::viam::app::v1::DeleteLocationSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::DeleteLocationSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRobot() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_GetRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotRequest* /*request*/, ::viam::app::v1::GetRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRobot(::grpc::ServerContext* context, ::viam::app::v1::GetRobotRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetRobotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRoverRentalRobots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRoverRentalRobots() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_GetRoverRentalRobots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoverRentalRobots(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRoverRentalRobotsRequest* /*request*/, ::viam::app::v1::GetRoverRentalRobotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoverRentalRobots(::grpc::ServerContext* context, ::viam::app::v1::GetRoverRentalRobotsRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetRoverRentalRobotsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRobotParts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRobotParts() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_GetRobotParts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotParts(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartsRequest* /*request*/, ::viam::app::v1::GetRobotPartsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRobotParts(::grpc::ServerContext* context, ::viam::app::v1::GetRobotPartsRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetRobotPartsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRobotPart() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_GetRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartRequest* /*request*/, ::viam::app::v1::GetRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRobotPart(::grpc::ServerContext* context, ::viam::app::v1::GetRobotPartRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetRobotPartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRobotPartLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRobotPartLogs() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_GetRobotPartLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPartLogs(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartLogsRequest* /*request*/, ::viam::app::v1::GetRobotPartLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRobotPartLogs(::grpc::ServerContext* context, ::viam::app::v1::GetRobotPartLogsRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetRobotPartLogsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TailRobotPartLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TailRobotPartLogs() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_TailRobotPartLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TailRobotPartLogs(::grpc::ServerContext* /*context*/, const ::viam::app::v1::TailRobotPartLogsRequest* /*request*/, ::grpc::ServerWriter< ::viam::app::v1::TailRobotPartLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTailRobotPartLogs(::grpc::ServerContext* context, ::viam::app::v1::TailRobotPartLogsRequest* request, ::grpc::ServerAsyncWriter< ::viam::app::v1::TailRobotPartLogsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(25, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRobotPartHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRobotPartHistory() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_GetRobotPartHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPartHistory(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartHistoryRequest* /*request*/, ::viam::app::v1::GetRobotPartHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRobotPartHistory(::grpc::ServerContext* context, ::viam::app::v1::GetRobotPartHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetRobotPartHistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateRobotPart() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_UpdateRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateRobotPartRequest* /*request*/, ::viam::app::v1::UpdateRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRobotPart(::grpc::ServerContext* context, ::viam::app::v1::UpdateRobotPartRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::UpdateRobotPartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewRobotPart() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_NewRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NewRobotPartRequest* /*request*/, ::viam::app::v1::NewRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewRobotPart(::grpc::ServerContext* context, ::viam::app::v1::NewRobotPartRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::NewRobotPartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRobotPart() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_DeleteRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartRequest* /*request*/, ::viam::app::v1::DeleteRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRobotPart(::grpc::ServerContext* context, ::viam::app::v1::DeleteRobotPartRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::DeleteRobotPartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MarkPartAsMain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MarkPartAsMain() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_MarkPartAsMain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkPartAsMain(::grpc::ServerContext* /*context*/, const ::viam::app::v1::MarkPartAsMainRequest* /*request*/, ::viam::app::v1::MarkPartAsMainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkPartAsMain(::grpc::ServerContext* context, ::viam::app::v1::MarkPartAsMainRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::MarkPartAsMainResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MarkPartForRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MarkPartForRestart() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_MarkPartForRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkPartForRestart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::MarkPartForRestartRequest* /*request*/, ::viam::app::v1::MarkPartForRestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkPartForRestart(::grpc::ServerContext* context, ::viam::app::v1::MarkPartForRestartRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::MarkPartForRestartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRobotPartSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRobotPartSecret() {
      ::grpc::Service::MarkMethodAsync(32);
    }
    ~WithAsyncMethod_CreateRobotPartSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRobotPartSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateRobotPartSecretRequest* /*request*/, ::viam::app::v1::CreateRobotPartSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRobotPartSecret(::grpc::ServerContext* context, ::viam::app::v1::CreateRobotPartSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::CreateRobotPartSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRobotPartSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRobotPartSecret() {
      ::grpc::Service::MarkMethodAsync(33);
    }
    ~WithAsyncMethod_DeleteRobotPartSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobotPartSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartSecretRequest* /*request*/, ::viam::app::v1::DeleteRobotPartSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRobotPartSecret(::grpc::ServerContext* context, ::viam::app::v1::DeleteRobotPartSecretRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::DeleteRobotPartSecretResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListRobots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListRobots() {
      ::grpc::Service::MarkMethodAsync(34);
    }
    ~WithAsyncMethod_ListRobots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRobots(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListRobotsRequest* /*request*/, ::viam::app::v1::ListRobotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListRobots(::grpc::ServerContext* context, ::viam::app::v1::ListRobotsRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::ListRobotsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NewRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NewRobot() {
      ::grpc::Service::MarkMethodAsync(35);
    }
    ~WithAsyncMethod_NewRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NewRobotRequest* /*request*/, ::viam::app::v1::NewRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewRobot(::grpc::ServerContext* context, ::viam::app::v1::NewRobotRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::NewRobotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateRobot() {
      ::grpc::Service::MarkMethodAsync(36);
    }
    ~WithAsyncMethod_UpdateRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateRobotRequest* /*request*/, ::viam::app::v1::UpdateRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRobot(::grpc::ServerContext* context, ::viam::app::v1::UpdateRobotRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::UpdateRobotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteRobot() {
      ::grpc::Service::MarkMethodAsync(37);
    }
    ~WithAsyncMethod_DeleteRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotRequest* /*request*/, ::viam::app::v1::DeleteRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRobot(::grpc::ServerContext* context, ::viam::app::v1::DeleteRobotRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::DeleteRobotResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFragments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListFragments() {
      ::grpc::Service::MarkMethodAsync(38);
    }
    ~WithAsyncMethod_ListFragments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFragments(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListFragmentsRequest* /*request*/, ::viam::app::v1::ListFragmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFragments(::grpc::ServerContext* context, ::viam::app::v1::ListFragmentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::ListFragmentsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFragment() {
      ::grpc::Service::MarkMethodAsync(39);
    }
    ~WithAsyncMethod_GetFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetFragmentRequest* /*request*/, ::viam::app::v1::GetFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFragment(::grpc::ServerContext* context, ::viam::app::v1::GetFragmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::GetFragmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateFragment() {
      ::grpc::Service::MarkMethodAsync(40);
    }
    ~WithAsyncMethod_CreateFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateFragmentRequest* /*request*/, ::viam::app::v1::CreateFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFragment(::grpc::ServerContext* context, ::viam::app::v1::CreateFragmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::CreateFragmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateFragment() {
      ::grpc::Service::MarkMethodAsync(41);
    }
    ~WithAsyncMethod_UpdateFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateFragmentRequest* /*request*/, ::viam::app::v1::UpdateFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFragment(::grpc::ServerContext* context, ::viam::app::v1::UpdateFragmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::UpdateFragmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteFragment() {
      ::grpc::Service::MarkMethodAsync(42);
    }
    ~WithAsyncMethod_DeleteFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteFragmentRequest* /*request*/, ::viam::app::v1::DeleteFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFragment(::grpc::ServerContext* context, ::viam::app::v1::DeleteFragmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::DeleteFragmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateOrganization<WithAsyncMethod_ListOrganizations<WithAsyncMethod_GetOrganization<WithAsyncMethod_UpdateOrganization<WithAsyncMethod_DeleteOrganization<WithAsyncMethod_ListOrganizationMembers<WithAsyncMethod_CreateOrganizationInvite<WithAsyncMethod_DeleteOrganizationMember<WithAsyncMethod_DeleteOrganizationInvite<WithAsyncMethod_ResendOrganizationInvite<WithAsyncMethod_CreateLocation<WithAsyncMethod_GetLocation<WithAsyncMethod_UpdateLocation<WithAsyncMethod_DeleteLocation<WithAsyncMethod_ListLocations<WithAsyncMethod_ShareLocation<WithAsyncMethod_UnshareLocation<WithAsyncMethod_LocationAuth<WithAsyncMethod_CreateLocationSecret<WithAsyncMethod_DeleteLocationSecret<WithAsyncMethod_GetRobot<WithAsyncMethod_GetRoverRentalRobots<WithAsyncMethod_GetRobotParts<WithAsyncMethod_GetRobotPart<WithAsyncMethod_GetRobotPartLogs<WithAsyncMethod_TailRobotPartLogs<WithAsyncMethod_GetRobotPartHistory<WithAsyncMethod_UpdateRobotPart<WithAsyncMethod_NewRobotPart<WithAsyncMethod_DeleteRobotPart<WithAsyncMethod_MarkPartAsMain<WithAsyncMethod_MarkPartForRestart<WithAsyncMethod_CreateRobotPartSecret<WithAsyncMethod_DeleteRobotPartSecret<WithAsyncMethod_ListRobots<WithAsyncMethod_NewRobot<WithAsyncMethod_UpdateRobot<WithAsyncMethod_DeleteRobot<WithAsyncMethod_ListFragments<WithAsyncMethod_GetFragment<WithAsyncMethod_CreateFragment<WithAsyncMethod_UpdateFragment<WithAsyncMethod_DeleteFragment<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CreateOrganizationRequest, ::viam::app::v1::CreateOrganizationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::CreateOrganizationRequest* request, ::viam::app::v1::CreateOrganizationResponse* response) { return this->CreateOrganization(context, request, response); }));}
    void SetMessageAllocatorFor_CreateOrganization(
        ::grpc::MessageAllocator< ::viam::app::v1::CreateOrganizationRequest, ::viam::app::v1::CreateOrganizationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CreateOrganizationRequest, ::viam::app::v1::CreateOrganizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationRequest* /*request*/, ::viam::app::v1::CreateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationRequest* /*request*/, ::viam::app::v1::CreateOrganizationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListOrganizations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListOrganizations() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ListOrganizationsRequest, ::viam::app::v1::ListOrganizationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::ListOrganizationsRequest* request, ::viam::app::v1::ListOrganizationsResponse* response) { return this->ListOrganizations(context, request, response); }));}
    void SetMessageAllocatorFor_ListOrganizations(
        ::grpc::MessageAllocator< ::viam::app::v1::ListOrganizationsRequest, ::viam::app::v1::ListOrganizationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ListOrganizationsRequest, ::viam::app::v1::ListOrganizationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListOrganizations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganizations(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListOrganizationsRequest* /*request*/, ::viam::app::v1::ListOrganizationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListOrganizations(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::ListOrganizationsRequest* /*request*/, ::viam::app::v1::ListOrganizationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOrganization() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetOrganizationRequest, ::viam::app::v1::GetOrganizationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::GetOrganizationRequest* request, ::viam::app::v1::GetOrganizationResponse* response) { return this->GetOrganization(context, request, response); }));}
    void SetMessageAllocatorFor_GetOrganization(
        ::grpc::MessageAllocator< ::viam::app::v1::GetOrganizationRequest, ::viam::app::v1::GetOrganizationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetOrganizationRequest, ::viam::app::v1::GetOrganizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetOrganizationRequest* /*request*/, ::viam::app::v1::GetOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetOrganizationRequest* /*request*/, ::viam::app::v1::GetOrganizationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateOrganizationRequest, ::viam::app::v1::UpdateOrganizationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::UpdateOrganizationRequest* request, ::viam::app::v1::UpdateOrganizationResponse* response) { return this->UpdateOrganization(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateOrganization(
        ::grpc::MessageAllocator< ::viam::app::v1::UpdateOrganizationRequest, ::viam::app::v1::UpdateOrganizationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateOrganizationRequest, ::viam::app::v1::UpdateOrganizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationRequest* /*request*/, ::viam::app::v1::UpdateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationRequest* /*request*/, ::viam::app::v1::UpdateOrganizationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteOrganizationRequest, ::viam::app::v1::DeleteOrganizationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::DeleteOrganizationRequest* request, ::viam::app::v1::DeleteOrganizationResponse* response) { return this->DeleteOrganization(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteOrganization(
        ::grpc::MessageAllocator< ::viam::app::v1::DeleteOrganizationRequest, ::viam::app::v1::DeleteOrganizationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteOrganizationRequest, ::viam::app::v1::DeleteOrganizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationRequest* /*request*/, ::viam::app::v1::DeleteOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationRequest* /*request*/, ::viam::app::v1::DeleteOrganizationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListOrganizationMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListOrganizationMembers() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ListOrganizationMembersRequest, ::viam::app::v1::ListOrganizationMembersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::ListOrganizationMembersRequest* request, ::viam::app::v1::ListOrganizationMembersResponse* response) { return this->ListOrganizationMembers(context, request, response); }));}
    void SetMessageAllocatorFor_ListOrganizationMembers(
        ::grpc::MessageAllocator< ::viam::app::v1::ListOrganizationMembersRequest, ::viam::app::v1::ListOrganizationMembersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ListOrganizationMembersRequest, ::viam::app::v1::ListOrganizationMembersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListOrganizationMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganizationMembers(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListOrganizationMembersRequest* /*request*/, ::viam::app::v1::ListOrganizationMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListOrganizationMembers(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::ListOrganizationMembersRequest* /*request*/, ::viam::app::v1::ListOrganizationMembersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateOrganizationInvite() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CreateOrganizationInviteRequest, ::viam::app::v1::CreateOrganizationInviteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::CreateOrganizationInviteRequest* request, ::viam::app::v1::CreateOrganizationInviteResponse* response) { return this->CreateOrganizationInvite(context, request, response); }));}
    void SetMessageAllocatorFor_CreateOrganizationInvite(
        ::grpc::MessageAllocator< ::viam::app::v1::CreateOrganizationInviteRequest, ::viam::app::v1::CreateOrganizationInviteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CreateOrganizationInviteRequest, ::viam::app::v1::CreateOrganizationInviteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationInviteRequest* /*request*/, ::viam::app::v1::CreateOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateOrganizationInvite(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationInviteRequest* /*request*/, ::viam::app::v1::CreateOrganizationInviteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteOrganizationMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteOrganizationMember() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteOrganizationMemberRequest, ::viam::app::v1::DeleteOrganizationMemberResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::DeleteOrganizationMemberRequest* request, ::viam::app::v1::DeleteOrganizationMemberResponse* response) { return this->DeleteOrganizationMember(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteOrganizationMember(
        ::grpc::MessageAllocator< ::viam::app::v1::DeleteOrganizationMemberRequest, ::viam::app::v1::DeleteOrganizationMemberResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteOrganizationMemberRequest, ::viam::app::v1::DeleteOrganizationMemberResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteOrganizationMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganizationMember(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationMemberRequest* /*request*/, ::viam::app::v1::DeleteOrganizationMemberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteOrganizationMember(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationMemberRequest* /*request*/, ::viam::app::v1::DeleteOrganizationMemberResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteOrganizationInvite() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteOrganizationInviteRequest, ::viam::app::v1::DeleteOrganizationInviteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::DeleteOrganizationInviteRequest* request, ::viam::app::v1::DeleteOrganizationInviteResponse* response) { return this->DeleteOrganizationInvite(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteOrganizationInvite(
        ::grpc::MessageAllocator< ::viam::app::v1::DeleteOrganizationInviteRequest, ::viam::app::v1::DeleteOrganizationInviteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteOrganizationInviteRequest, ::viam::app::v1::DeleteOrganizationInviteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationInviteRequest* /*request*/, ::viam::app::v1::DeleteOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteOrganizationInvite(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationInviteRequest* /*request*/, ::viam::app::v1::DeleteOrganizationInviteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ResendOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResendOrganizationInvite() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ResendOrganizationInviteRequest, ::viam::app::v1::ResendOrganizationInviteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::ResendOrganizationInviteRequest* request, ::viam::app::v1::ResendOrganizationInviteResponse* response) { return this->ResendOrganizationInvite(context, request, response); }));}
    void SetMessageAllocatorFor_ResendOrganizationInvite(
        ::grpc::MessageAllocator< ::viam::app::v1::ResendOrganizationInviteRequest, ::viam::app::v1::ResendOrganizationInviteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ResendOrganizationInviteRequest, ::viam::app::v1::ResendOrganizationInviteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResendOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResendOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ResendOrganizationInviteRequest* /*request*/, ::viam::app::v1::ResendOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResendOrganizationInvite(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::ResendOrganizationInviteRequest* /*request*/, ::viam::app::v1::ResendOrganizationInviteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateLocation() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CreateLocationRequest, ::viam::app::v1::CreateLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::CreateLocationRequest* request, ::viam::app::v1::CreateLocationResponse* response) { return this->CreateLocation(context, request, response); }));}
    void SetMessageAllocatorFor_CreateLocation(
        ::grpc::MessageAllocator< ::viam::app::v1::CreateLocationRequest, ::viam::app::v1::CreateLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CreateLocationRequest, ::viam::app::v1::CreateLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateLocationRequest* /*request*/, ::viam::app::v1::CreateLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::CreateLocationRequest* /*request*/, ::viam::app::v1::CreateLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLocation() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetLocationRequest, ::viam::app::v1::GetLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::GetLocationRequest* request, ::viam::app::v1::GetLocationResponse* response) { return this->GetLocation(context, request, response); }));}
    void SetMessageAllocatorFor_GetLocation(
        ::grpc::MessageAllocator< ::viam::app::v1::GetLocationRequest, ::viam::app::v1::GetLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetLocationRequest, ::viam::app::v1::GetLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetLocationRequest* /*request*/, ::viam::app::v1::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetLocationRequest* /*request*/, ::viam::app::v1::GetLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateLocation() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateLocationRequest, ::viam::app::v1::UpdateLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::UpdateLocationRequest* request, ::viam::app::v1::UpdateLocationResponse* response) { return this->UpdateLocation(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateLocation(
        ::grpc::MessageAllocator< ::viam::app::v1::UpdateLocationRequest, ::viam::app::v1::UpdateLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateLocationRequest, ::viam::app::v1::UpdateLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateLocationRequest* /*request*/, ::viam::app::v1::UpdateLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::UpdateLocationRequest* /*request*/, ::viam::app::v1::UpdateLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteLocation() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteLocationRequest, ::viam::app::v1::DeleteLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::DeleteLocationRequest* request, ::viam::app::v1::DeleteLocationResponse* response) { return this->DeleteLocation(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteLocation(
        ::grpc::MessageAllocator< ::viam::app::v1::DeleteLocationRequest, ::viam::app::v1::DeleteLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteLocationRequest, ::viam::app::v1::DeleteLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteLocationRequest* /*request*/, ::viam::app::v1::DeleteLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::DeleteLocationRequest* /*request*/, ::viam::app::v1::DeleteLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListLocations() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ListLocationsRequest, ::viam::app::v1::ListLocationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::ListLocationsRequest* request, ::viam::app::v1::ListLocationsResponse* response) { return this->ListLocations(context, request, response); }));}
    void SetMessageAllocatorFor_ListLocations(
        ::grpc::MessageAllocator< ::viam::app::v1::ListLocationsRequest, ::viam::app::v1::ListLocationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ListLocationsRequest, ::viam::app::v1::ListLocationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLocations(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListLocationsRequest* /*request*/, ::viam::app::v1::ListLocationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListLocations(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::ListLocationsRequest* /*request*/, ::viam::app::v1::ListLocationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ShareLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ShareLocation() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ShareLocationRequest, ::viam::app::v1::ShareLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::ShareLocationRequest* request, ::viam::app::v1::ShareLocationResponse* response) { return this->ShareLocation(context, request, response); }));}
    void SetMessageAllocatorFor_ShareLocation(
        ::grpc::MessageAllocator< ::viam::app::v1::ShareLocationRequest, ::viam::app::v1::ShareLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ShareLocationRequest, ::viam::app::v1::ShareLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShareLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ShareLocationRequest* /*request*/, ::viam::app::v1::ShareLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShareLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::ShareLocationRequest* /*request*/, ::viam::app::v1::ShareLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnshareLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnshareLocation() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::UnshareLocationRequest, ::viam::app::v1::UnshareLocationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::UnshareLocationRequest* request, ::viam::app::v1::UnshareLocationResponse* response) { return this->UnshareLocation(context, request, response); }));}
    void SetMessageAllocatorFor_UnshareLocation(
        ::grpc::MessageAllocator< ::viam::app::v1::UnshareLocationRequest, ::viam::app::v1::UnshareLocationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::UnshareLocationRequest, ::viam::app::v1::UnshareLocationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnshareLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnshareLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UnshareLocationRequest* /*request*/, ::viam::app::v1::UnshareLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnshareLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::UnshareLocationRequest* /*request*/, ::viam::app::v1::UnshareLocationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LocationAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LocationAuth() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::LocationAuthRequest, ::viam::app::v1::LocationAuthResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::LocationAuthRequest* request, ::viam::app::v1::LocationAuthResponse* response) { return this->LocationAuth(context, request, response); }));}
    void SetMessageAllocatorFor_LocationAuth(
        ::grpc::MessageAllocator< ::viam::app::v1::LocationAuthRequest, ::viam::app::v1::LocationAuthResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::LocationAuthRequest, ::viam::app::v1::LocationAuthResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LocationAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LocationAuth(::grpc::ServerContext* /*context*/, const ::viam::app::v1::LocationAuthRequest* /*request*/, ::viam::app::v1::LocationAuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LocationAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::LocationAuthRequest* /*request*/, ::viam::app::v1::LocationAuthResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateLocationSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateLocationSecret() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CreateLocationSecretRequest, ::viam::app::v1::CreateLocationSecretResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::CreateLocationSecretRequest* request, ::viam::app::v1::CreateLocationSecretResponse* response) { return this->CreateLocationSecret(context, request, response); }));}
    void SetMessageAllocatorFor_CreateLocationSecret(
        ::grpc::MessageAllocator< ::viam::app::v1::CreateLocationSecretRequest, ::viam::app::v1::CreateLocationSecretResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CreateLocationSecretRequest, ::viam::app::v1::CreateLocationSecretResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateLocationSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLocationSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateLocationSecretRequest* /*request*/, ::viam::app::v1::CreateLocationSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateLocationSecret(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::CreateLocationSecretRequest* /*request*/, ::viam::app::v1::CreateLocationSecretResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteLocationSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteLocationSecret() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteLocationSecretRequest, ::viam::app::v1::DeleteLocationSecretResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::DeleteLocationSecretRequest* request, ::viam::app::v1::DeleteLocationSecretResponse* response) { return this->DeleteLocationSecret(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteLocationSecret(
        ::grpc::MessageAllocator< ::viam::app::v1::DeleteLocationSecretRequest, ::viam::app::v1::DeleteLocationSecretResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteLocationSecretRequest, ::viam::app::v1::DeleteLocationSecretResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteLocationSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLocationSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteLocationSecretRequest* /*request*/, ::viam::app::v1::DeleteLocationSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteLocationSecret(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::DeleteLocationSecretRequest* /*request*/, ::viam::app::v1::DeleteLocationSecretResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRobot() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetRobotRequest, ::viam::app::v1::GetRobotResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::GetRobotRequest* request, ::viam::app::v1::GetRobotResponse* response) { return this->GetRobot(context, request, response); }));}
    void SetMessageAllocatorFor_GetRobot(
        ::grpc::MessageAllocator< ::viam::app::v1::GetRobotRequest, ::viam::app::v1::GetRobotResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetRobotRequest, ::viam::app::v1::GetRobotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotRequest* /*request*/, ::viam::app::v1::GetRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRobot(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetRobotRequest* /*request*/, ::viam::app::v1::GetRobotResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRoverRentalRobots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRoverRentalRobots() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetRoverRentalRobotsRequest, ::viam::app::v1::GetRoverRentalRobotsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::GetRoverRentalRobotsRequest* request, ::viam::app::v1::GetRoverRentalRobotsResponse* response) { return this->GetRoverRentalRobots(context, request, response); }));}
    void SetMessageAllocatorFor_GetRoverRentalRobots(
        ::grpc::MessageAllocator< ::viam::app::v1::GetRoverRentalRobotsRequest, ::viam::app::v1::GetRoverRentalRobotsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetRoverRentalRobotsRequest, ::viam::app::v1::GetRoverRentalRobotsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRoverRentalRobots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoverRentalRobots(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRoverRentalRobotsRequest* /*request*/, ::viam::app::v1::GetRoverRentalRobotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRoverRentalRobots(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetRoverRentalRobotsRequest* /*request*/, ::viam::app::v1::GetRoverRentalRobotsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRobotParts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRobotParts() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetRobotPartsRequest, ::viam::app::v1::GetRobotPartsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::GetRobotPartsRequest* request, ::viam::app::v1::GetRobotPartsResponse* response) { return this->GetRobotParts(context, request, response); }));}
    void SetMessageAllocatorFor_GetRobotParts(
        ::grpc::MessageAllocator< ::viam::app::v1::GetRobotPartsRequest, ::viam::app::v1::GetRobotPartsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetRobotPartsRequest, ::viam::app::v1::GetRobotPartsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRobotParts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotParts(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartsRequest* /*request*/, ::viam::app::v1::GetRobotPartsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRobotParts(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetRobotPartsRequest* /*request*/, ::viam::app::v1::GetRobotPartsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRobotPart() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetRobotPartRequest, ::viam::app::v1::GetRobotPartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::GetRobotPartRequest* request, ::viam::app::v1::GetRobotPartResponse* response) { return this->GetRobotPart(context, request, response); }));}
    void SetMessageAllocatorFor_GetRobotPart(
        ::grpc::MessageAllocator< ::viam::app::v1::GetRobotPartRequest, ::viam::app::v1::GetRobotPartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetRobotPartRequest, ::viam::app::v1::GetRobotPartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartRequest* /*request*/, ::viam::app::v1::GetRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRobotPart(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetRobotPartRequest* /*request*/, ::viam::app::v1::GetRobotPartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRobotPartLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRobotPartLogs() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetRobotPartLogsRequest, ::viam::app::v1::GetRobotPartLogsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::GetRobotPartLogsRequest* request, ::viam::app::v1::GetRobotPartLogsResponse* response) { return this->GetRobotPartLogs(context, request, response); }));}
    void SetMessageAllocatorFor_GetRobotPartLogs(
        ::grpc::MessageAllocator< ::viam::app::v1::GetRobotPartLogsRequest, ::viam::app::v1::GetRobotPartLogsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetRobotPartLogsRequest, ::viam::app::v1::GetRobotPartLogsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRobotPartLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPartLogs(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartLogsRequest* /*request*/, ::viam::app::v1::GetRobotPartLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRobotPartLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetRobotPartLogsRequest* /*request*/, ::viam::app::v1::GetRobotPartLogsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TailRobotPartLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TailRobotPartLogs() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackServerStreamingHandler< ::viam::app::v1::TailRobotPartLogsRequest, ::viam::app::v1::TailRobotPartLogsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::TailRobotPartLogsRequest* request) { return this->TailRobotPartLogs(context, request); }));
    }
    ~WithCallbackMethod_TailRobotPartLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TailRobotPartLogs(::grpc::ServerContext* /*context*/, const ::viam::app::v1::TailRobotPartLogsRequest* /*request*/, ::grpc::ServerWriter< ::viam::app::v1::TailRobotPartLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::viam::app::v1::TailRobotPartLogsResponse>* TailRobotPartLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::TailRobotPartLogsRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRobotPartHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRobotPartHistory() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetRobotPartHistoryRequest, ::viam::app::v1::GetRobotPartHistoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::GetRobotPartHistoryRequest* request, ::viam::app::v1::GetRobotPartHistoryResponse* response) { return this->GetRobotPartHistory(context, request, response); }));}
    void SetMessageAllocatorFor_GetRobotPartHistory(
        ::grpc::MessageAllocator< ::viam::app::v1::GetRobotPartHistoryRequest, ::viam::app::v1::GetRobotPartHistoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetRobotPartHistoryRequest, ::viam::app::v1::GetRobotPartHistoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRobotPartHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPartHistory(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartHistoryRequest* /*request*/, ::viam::app::v1::GetRobotPartHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRobotPartHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetRobotPartHistoryRequest* /*request*/, ::viam::app::v1::GetRobotPartHistoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateRobotPart() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateRobotPartRequest, ::viam::app::v1::UpdateRobotPartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::UpdateRobotPartRequest* request, ::viam::app::v1::UpdateRobotPartResponse* response) { return this->UpdateRobotPart(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateRobotPart(
        ::grpc::MessageAllocator< ::viam::app::v1::UpdateRobotPartRequest, ::viam::app::v1::UpdateRobotPartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateRobotPartRequest, ::viam::app::v1::UpdateRobotPartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateRobotPartRequest* /*request*/, ::viam::app::v1::UpdateRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRobotPart(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::UpdateRobotPartRequest* /*request*/, ::viam::app::v1::UpdateRobotPartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NewRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewRobotPart() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::NewRobotPartRequest, ::viam::app::v1::NewRobotPartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::NewRobotPartRequest* request, ::viam::app::v1::NewRobotPartResponse* response) { return this->NewRobotPart(context, request, response); }));}
    void SetMessageAllocatorFor_NewRobotPart(
        ::grpc::MessageAllocator< ::viam::app::v1::NewRobotPartRequest, ::viam::app::v1::NewRobotPartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::NewRobotPartRequest, ::viam::app::v1::NewRobotPartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NewRobotPartRequest* /*request*/, ::viam::app::v1::NewRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewRobotPart(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::NewRobotPartRequest* /*request*/, ::viam::app::v1::NewRobotPartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRobotPart() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteRobotPartRequest, ::viam::app::v1::DeleteRobotPartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::DeleteRobotPartRequest* request, ::viam::app::v1::DeleteRobotPartResponse* response) { return this->DeleteRobotPart(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRobotPart(
        ::grpc::MessageAllocator< ::viam::app::v1::DeleteRobotPartRequest, ::viam::app::v1::DeleteRobotPartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteRobotPartRequest, ::viam::app::v1::DeleteRobotPartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartRequest* /*request*/, ::viam::app::v1::DeleteRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRobotPart(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartRequest* /*request*/, ::viam::app::v1::DeleteRobotPartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MarkPartAsMain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MarkPartAsMain() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::MarkPartAsMainRequest, ::viam::app::v1::MarkPartAsMainResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::MarkPartAsMainRequest* request, ::viam::app::v1::MarkPartAsMainResponse* response) { return this->MarkPartAsMain(context, request, response); }));}
    void SetMessageAllocatorFor_MarkPartAsMain(
        ::grpc::MessageAllocator< ::viam::app::v1::MarkPartAsMainRequest, ::viam::app::v1::MarkPartAsMainResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::MarkPartAsMainRequest, ::viam::app::v1::MarkPartAsMainResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MarkPartAsMain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkPartAsMain(::grpc::ServerContext* /*context*/, const ::viam::app::v1::MarkPartAsMainRequest* /*request*/, ::viam::app::v1::MarkPartAsMainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarkPartAsMain(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::MarkPartAsMainRequest* /*request*/, ::viam::app::v1::MarkPartAsMainResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MarkPartForRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MarkPartForRestart() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::MarkPartForRestartRequest, ::viam::app::v1::MarkPartForRestartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::MarkPartForRestartRequest* request, ::viam::app::v1::MarkPartForRestartResponse* response) { return this->MarkPartForRestart(context, request, response); }));}
    void SetMessageAllocatorFor_MarkPartForRestart(
        ::grpc::MessageAllocator< ::viam::app::v1::MarkPartForRestartRequest, ::viam::app::v1::MarkPartForRestartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::MarkPartForRestartRequest, ::viam::app::v1::MarkPartForRestartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MarkPartForRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkPartForRestart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::MarkPartForRestartRequest* /*request*/, ::viam::app::v1::MarkPartForRestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarkPartForRestart(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::MarkPartForRestartRequest* /*request*/, ::viam::app::v1::MarkPartForRestartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateRobotPartSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateRobotPartSecret() {
      ::grpc::Service::MarkMethodCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CreateRobotPartSecretRequest, ::viam::app::v1::CreateRobotPartSecretResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::CreateRobotPartSecretRequest* request, ::viam::app::v1::CreateRobotPartSecretResponse* response) { return this->CreateRobotPartSecret(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRobotPartSecret(
        ::grpc::MessageAllocator< ::viam::app::v1::CreateRobotPartSecretRequest, ::viam::app::v1::CreateRobotPartSecretResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(32);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CreateRobotPartSecretRequest, ::viam::app::v1::CreateRobotPartSecretResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateRobotPartSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRobotPartSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateRobotPartSecretRequest* /*request*/, ::viam::app::v1::CreateRobotPartSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRobotPartSecret(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::CreateRobotPartSecretRequest* /*request*/, ::viam::app::v1::CreateRobotPartSecretResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRobotPartSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRobotPartSecret() {
      ::grpc::Service::MarkMethodCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteRobotPartSecretRequest, ::viam::app::v1::DeleteRobotPartSecretResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::DeleteRobotPartSecretRequest* request, ::viam::app::v1::DeleteRobotPartSecretResponse* response) { return this->DeleteRobotPartSecret(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRobotPartSecret(
        ::grpc::MessageAllocator< ::viam::app::v1::DeleteRobotPartSecretRequest, ::viam::app::v1::DeleteRobotPartSecretResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(33);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteRobotPartSecretRequest, ::viam::app::v1::DeleteRobotPartSecretResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRobotPartSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobotPartSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartSecretRequest* /*request*/, ::viam::app::v1::DeleteRobotPartSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRobotPartSecret(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartSecretRequest* /*request*/, ::viam::app::v1::DeleteRobotPartSecretResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListRobots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListRobots() {
      ::grpc::Service::MarkMethodCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ListRobotsRequest, ::viam::app::v1::ListRobotsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::ListRobotsRequest* request, ::viam::app::v1::ListRobotsResponse* response) { return this->ListRobots(context, request, response); }));}
    void SetMessageAllocatorFor_ListRobots(
        ::grpc::MessageAllocator< ::viam::app::v1::ListRobotsRequest, ::viam::app::v1::ListRobotsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(34);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ListRobotsRequest, ::viam::app::v1::ListRobotsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListRobots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRobots(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListRobotsRequest* /*request*/, ::viam::app::v1::ListRobotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListRobots(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::ListRobotsRequest* /*request*/, ::viam::app::v1::ListRobotsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NewRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NewRobot() {
      ::grpc::Service::MarkMethodCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::NewRobotRequest, ::viam::app::v1::NewRobotResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::NewRobotRequest* request, ::viam::app::v1::NewRobotResponse* response) { return this->NewRobot(context, request, response); }));}
    void SetMessageAllocatorFor_NewRobot(
        ::grpc::MessageAllocator< ::viam::app::v1::NewRobotRequest, ::viam::app::v1::NewRobotResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(35);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::NewRobotRequest, ::viam::app::v1::NewRobotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NewRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NewRobotRequest* /*request*/, ::viam::app::v1::NewRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewRobot(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::NewRobotRequest* /*request*/, ::viam::app::v1::NewRobotResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateRobot() {
      ::grpc::Service::MarkMethodCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateRobotRequest, ::viam::app::v1::UpdateRobotResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::UpdateRobotRequest* request, ::viam::app::v1::UpdateRobotResponse* response) { return this->UpdateRobot(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateRobot(
        ::grpc::MessageAllocator< ::viam::app::v1::UpdateRobotRequest, ::viam::app::v1::UpdateRobotResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(36);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateRobotRequest, ::viam::app::v1::UpdateRobotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateRobotRequest* /*request*/, ::viam::app::v1::UpdateRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRobot(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::UpdateRobotRequest* /*request*/, ::viam::app::v1::UpdateRobotResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteRobot() {
      ::grpc::Service::MarkMethodCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteRobotRequest, ::viam::app::v1::DeleteRobotResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::DeleteRobotRequest* request, ::viam::app::v1::DeleteRobotResponse* response) { return this->DeleteRobot(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteRobot(
        ::grpc::MessageAllocator< ::viam::app::v1::DeleteRobotRequest, ::viam::app::v1::DeleteRobotResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(37);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteRobotRequest, ::viam::app::v1::DeleteRobotResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotRequest* /*request*/, ::viam::app::v1::DeleteRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRobot(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::DeleteRobotRequest* /*request*/, ::viam::app::v1::DeleteRobotResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListFragments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListFragments() {
      ::grpc::Service::MarkMethodCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ListFragmentsRequest, ::viam::app::v1::ListFragmentsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::ListFragmentsRequest* request, ::viam::app::v1::ListFragmentsResponse* response) { return this->ListFragments(context, request, response); }));}
    void SetMessageAllocatorFor_ListFragments(
        ::grpc::MessageAllocator< ::viam::app::v1::ListFragmentsRequest, ::viam::app::v1::ListFragmentsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(38);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ListFragmentsRequest, ::viam::app::v1::ListFragmentsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListFragments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFragments(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListFragmentsRequest* /*request*/, ::viam::app::v1::ListFragmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListFragments(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::ListFragmentsRequest* /*request*/, ::viam::app::v1::ListFragmentsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFragment() {
      ::grpc::Service::MarkMethodCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetFragmentRequest, ::viam::app::v1::GetFragmentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::GetFragmentRequest* request, ::viam::app::v1::GetFragmentResponse* response) { return this->GetFragment(context, request, response); }));}
    void SetMessageAllocatorFor_GetFragment(
        ::grpc::MessageAllocator< ::viam::app::v1::GetFragmentRequest, ::viam::app::v1::GetFragmentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(39);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::GetFragmentRequest, ::viam::app::v1::GetFragmentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetFragmentRequest* /*request*/, ::viam::app::v1::GetFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFragment(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::GetFragmentRequest* /*request*/, ::viam::app::v1::GetFragmentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateFragment() {
      ::grpc::Service::MarkMethodCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CreateFragmentRequest, ::viam::app::v1::CreateFragmentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::CreateFragmentRequest* request, ::viam::app::v1::CreateFragmentResponse* response) { return this->CreateFragment(context, request, response); }));}
    void SetMessageAllocatorFor_CreateFragment(
        ::grpc::MessageAllocator< ::viam::app::v1::CreateFragmentRequest, ::viam::app::v1::CreateFragmentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(40);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CreateFragmentRequest, ::viam::app::v1::CreateFragmentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateFragmentRequest* /*request*/, ::viam::app::v1::CreateFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFragment(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::CreateFragmentRequest* /*request*/, ::viam::app::v1::CreateFragmentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateFragment() {
      ::grpc::Service::MarkMethodCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateFragmentRequest, ::viam::app::v1::UpdateFragmentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::UpdateFragmentRequest* request, ::viam::app::v1::UpdateFragmentResponse* response) { return this->UpdateFragment(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateFragment(
        ::grpc::MessageAllocator< ::viam::app::v1::UpdateFragmentRequest, ::viam::app::v1::UpdateFragmentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(41);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::UpdateFragmentRequest, ::viam::app::v1::UpdateFragmentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateFragmentRequest* /*request*/, ::viam::app::v1::UpdateFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateFragment(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::UpdateFragmentRequest* /*request*/, ::viam::app::v1::UpdateFragmentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteFragment() {
      ::grpc::Service::MarkMethodCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteFragmentRequest, ::viam::app::v1::DeleteFragmentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::DeleteFragmentRequest* request, ::viam::app::v1::DeleteFragmentResponse* response) { return this->DeleteFragment(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteFragment(
        ::grpc::MessageAllocator< ::viam::app::v1::DeleteFragmentRequest, ::viam::app::v1::DeleteFragmentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(42);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::DeleteFragmentRequest, ::viam::app::v1::DeleteFragmentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteFragmentRequest* /*request*/, ::viam::app::v1::DeleteFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteFragment(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::DeleteFragmentRequest* /*request*/, ::viam::app::v1::DeleteFragmentResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateOrganization<WithCallbackMethod_ListOrganizations<WithCallbackMethod_GetOrganization<WithCallbackMethod_UpdateOrganization<WithCallbackMethod_DeleteOrganization<WithCallbackMethod_ListOrganizationMembers<WithCallbackMethod_CreateOrganizationInvite<WithCallbackMethod_DeleteOrganizationMember<WithCallbackMethod_DeleteOrganizationInvite<WithCallbackMethod_ResendOrganizationInvite<WithCallbackMethod_CreateLocation<WithCallbackMethod_GetLocation<WithCallbackMethod_UpdateLocation<WithCallbackMethod_DeleteLocation<WithCallbackMethod_ListLocations<WithCallbackMethod_ShareLocation<WithCallbackMethod_UnshareLocation<WithCallbackMethod_LocationAuth<WithCallbackMethod_CreateLocationSecret<WithCallbackMethod_DeleteLocationSecret<WithCallbackMethod_GetRobot<WithCallbackMethod_GetRoverRentalRobots<WithCallbackMethod_GetRobotParts<WithCallbackMethod_GetRobotPart<WithCallbackMethod_GetRobotPartLogs<WithCallbackMethod_TailRobotPartLogs<WithCallbackMethod_GetRobotPartHistory<WithCallbackMethod_UpdateRobotPart<WithCallbackMethod_NewRobotPart<WithCallbackMethod_DeleteRobotPart<WithCallbackMethod_MarkPartAsMain<WithCallbackMethod_MarkPartForRestart<WithCallbackMethod_CreateRobotPartSecret<WithCallbackMethod_DeleteRobotPartSecret<WithCallbackMethod_ListRobots<WithCallbackMethod_NewRobot<WithCallbackMethod_UpdateRobot<WithCallbackMethod_DeleteRobot<WithCallbackMethod_ListFragments<WithCallbackMethod_GetFragment<WithCallbackMethod_CreateFragment<WithCallbackMethod_UpdateFragment<WithCallbackMethod_DeleteFragment<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationRequest* /*request*/, ::viam::app::v1::CreateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListOrganizations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListOrganizations() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListOrganizations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganizations(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListOrganizationsRequest* /*request*/, ::viam::app::v1::ListOrganizationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOrganization() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetOrganizationRequest* /*request*/, ::viam::app::v1::GetOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationRequest* /*request*/, ::viam::app::v1::UpdateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationRequest* /*request*/, ::viam::app::v1::DeleteOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListOrganizationMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListOrganizationMembers() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListOrganizationMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganizationMembers(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListOrganizationMembersRequest* /*request*/, ::viam::app::v1::ListOrganizationMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateOrganizationInvite() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CreateOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationInviteRequest* /*request*/, ::viam::app::v1::CreateOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOrganizationMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteOrganizationMember() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeleteOrganizationMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganizationMember(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationMemberRequest* /*request*/, ::viam::app::v1::DeleteOrganizationMemberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteOrganizationInvite() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DeleteOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationInviteRequest* /*request*/, ::viam::app::v1::DeleteOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResendOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResendOrganizationInvite() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_ResendOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResendOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ResendOrganizationInviteRequest* /*request*/, ::viam::app::v1::ResendOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateLocation() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_CreateLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateLocationRequest* /*request*/, ::viam::app::v1::CreateLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLocation() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetLocationRequest* /*request*/, ::viam::app::v1::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateLocation() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_UpdateLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateLocationRequest* /*request*/, ::viam::app::v1::UpdateLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteLocation() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_DeleteLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteLocationRequest* /*request*/, ::viam::app::v1::DeleteLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListLocations() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_ListLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLocations(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListLocationsRequest* /*request*/, ::viam::app::v1::ListLocationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShareLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShareLocation() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_ShareLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ShareLocationRequest* /*request*/, ::viam::app::v1::ShareLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnshareLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnshareLocation() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_UnshareLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnshareLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UnshareLocationRequest* /*request*/, ::viam::app::v1::UnshareLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LocationAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LocationAuth() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_LocationAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LocationAuth(::grpc::ServerContext* /*context*/, const ::viam::app::v1::LocationAuthRequest* /*request*/, ::viam::app::v1::LocationAuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateLocationSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateLocationSecret() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_CreateLocationSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLocationSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateLocationSecretRequest* /*request*/, ::viam::app::v1::CreateLocationSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteLocationSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteLocationSecret() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_DeleteLocationSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLocationSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteLocationSecretRequest* /*request*/, ::viam::app::v1::DeleteLocationSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRobot() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_GetRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotRequest* /*request*/, ::viam::app::v1::GetRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRoverRentalRobots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRoverRentalRobots() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_GetRoverRentalRobots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoverRentalRobots(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRoverRentalRobotsRequest* /*request*/, ::viam::app::v1::GetRoverRentalRobotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRobotParts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRobotParts() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_GetRobotParts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotParts(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartsRequest* /*request*/, ::viam::app::v1::GetRobotPartsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRobotPart() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_GetRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartRequest* /*request*/, ::viam::app::v1::GetRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRobotPartLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRobotPartLogs() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_GetRobotPartLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPartLogs(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartLogsRequest* /*request*/, ::viam::app::v1::GetRobotPartLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TailRobotPartLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TailRobotPartLogs() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_TailRobotPartLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TailRobotPartLogs(::grpc::ServerContext* /*context*/, const ::viam::app::v1::TailRobotPartLogsRequest* /*request*/, ::grpc::ServerWriter< ::viam::app::v1::TailRobotPartLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRobotPartHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRobotPartHistory() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_GetRobotPartHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPartHistory(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartHistoryRequest* /*request*/, ::viam::app::v1::GetRobotPartHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateRobotPart() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_UpdateRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateRobotPartRequest* /*request*/, ::viam::app::v1::UpdateRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewRobotPart() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_NewRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NewRobotPartRequest* /*request*/, ::viam::app::v1::NewRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRobotPart() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_DeleteRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartRequest* /*request*/, ::viam::app::v1::DeleteRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MarkPartAsMain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MarkPartAsMain() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_MarkPartAsMain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkPartAsMain(::grpc::ServerContext* /*context*/, const ::viam::app::v1::MarkPartAsMainRequest* /*request*/, ::viam::app::v1::MarkPartAsMainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MarkPartForRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MarkPartForRestart() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_MarkPartForRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkPartForRestart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::MarkPartForRestartRequest* /*request*/, ::viam::app::v1::MarkPartForRestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRobotPartSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRobotPartSecret() {
      ::grpc::Service::MarkMethodGeneric(32);
    }
    ~WithGenericMethod_CreateRobotPartSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRobotPartSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateRobotPartSecretRequest* /*request*/, ::viam::app::v1::CreateRobotPartSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRobotPartSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRobotPartSecret() {
      ::grpc::Service::MarkMethodGeneric(33);
    }
    ~WithGenericMethod_DeleteRobotPartSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobotPartSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartSecretRequest* /*request*/, ::viam::app::v1::DeleteRobotPartSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListRobots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListRobots() {
      ::grpc::Service::MarkMethodGeneric(34);
    }
    ~WithGenericMethod_ListRobots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRobots(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListRobotsRequest* /*request*/, ::viam::app::v1::ListRobotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NewRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NewRobot() {
      ::grpc::Service::MarkMethodGeneric(35);
    }
    ~WithGenericMethod_NewRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NewRobotRequest* /*request*/, ::viam::app::v1::NewRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateRobot() {
      ::grpc::Service::MarkMethodGeneric(36);
    }
    ~WithGenericMethod_UpdateRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateRobotRequest* /*request*/, ::viam::app::v1::UpdateRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteRobot() {
      ::grpc::Service::MarkMethodGeneric(37);
    }
    ~WithGenericMethod_DeleteRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotRequest* /*request*/, ::viam::app::v1::DeleteRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListFragments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListFragments() {
      ::grpc::Service::MarkMethodGeneric(38);
    }
    ~WithGenericMethod_ListFragments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFragments(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListFragmentsRequest* /*request*/, ::viam::app::v1::ListFragmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFragment() {
      ::grpc::Service::MarkMethodGeneric(39);
    }
    ~WithGenericMethod_GetFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetFragmentRequest* /*request*/, ::viam::app::v1::GetFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateFragment() {
      ::grpc::Service::MarkMethodGeneric(40);
    }
    ~WithGenericMethod_CreateFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateFragmentRequest* /*request*/, ::viam::app::v1::CreateFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateFragment() {
      ::grpc::Service::MarkMethodGeneric(41);
    }
    ~WithGenericMethod_UpdateFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateFragmentRequest* /*request*/, ::viam::app::v1::UpdateFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteFragment() {
      ::grpc::Service::MarkMethodGeneric(42);
    }
    ~WithGenericMethod_DeleteFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteFragmentRequest* /*request*/, ::viam::app::v1::DeleteFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationRequest* /*request*/, ::viam::app::v1::CreateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListOrganizations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListOrganizations() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListOrganizations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganizations(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListOrganizationsRequest* /*request*/, ::viam::app::v1::ListOrganizationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrganizations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOrganization() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetOrganizationRequest* /*request*/, ::viam::app::v1::GetOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationRequest* /*request*/, ::viam::app::v1::UpdateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationRequest* /*request*/, ::viam::app::v1::DeleteOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListOrganizationMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListOrganizationMembers() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ListOrganizationMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganizationMembers(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListOrganizationMembersRequest* /*request*/, ::viam::app::v1::ListOrganizationMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOrganizationMembers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateOrganizationInvite() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CreateOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationInviteRequest* /*request*/, ::viam::app::v1::CreateOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateOrganizationInvite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteOrganizationMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteOrganizationMember() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DeleteOrganizationMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganizationMember(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationMemberRequest* /*request*/, ::viam::app::v1::DeleteOrganizationMemberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrganizationMember(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteOrganizationInvite() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DeleteOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationInviteRequest* /*request*/, ::viam::app::v1::DeleteOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteOrganizationInvite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResendOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResendOrganizationInvite() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_ResendOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResendOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ResendOrganizationInviteRequest* /*request*/, ::viam::app::v1::ResendOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResendOrganizationInvite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateLocation() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_CreateLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateLocationRequest* /*request*/, ::viam::app::v1::CreateLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLocation() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetLocationRequest* /*request*/, ::viam::app::v1::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateLocation() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_UpdateLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateLocationRequest* /*request*/, ::viam::app::v1::UpdateLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteLocation() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_DeleteLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteLocationRequest* /*request*/, ::viam::app::v1::DeleteLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListLocations() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_ListLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLocations(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListLocationsRequest* /*request*/, ::viam::app::v1::ListLocationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLocations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShareLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShareLocation() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_ShareLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ShareLocationRequest* /*request*/, ::viam::app::v1::ShareLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShareLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnshareLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnshareLocation() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_UnshareLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnshareLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UnshareLocationRequest* /*request*/, ::viam::app::v1::UnshareLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnshareLocation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LocationAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LocationAuth() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_LocationAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LocationAuth(::grpc::ServerContext* /*context*/, const ::viam::app::v1::LocationAuthRequest* /*request*/, ::viam::app::v1::LocationAuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLocationAuth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateLocationSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateLocationSecret() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_CreateLocationSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLocationSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateLocationSecretRequest* /*request*/, ::viam::app::v1::CreateLocationSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLocationSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteLocationSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteLocationSecret() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_DeleteLocationSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLocationSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteLocationSecretRequest* /*request*/, ::viam::app::v1::DeleteLocationSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLocationSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRobot() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_GetRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotRequest* /*request*/, ::viam::app::v1::GetRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRobot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRoverRentalRobots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRoverRentalRobots() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_GetRoverRentalRobots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoverRentalRobots(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRoverRentalRobotsRequest* /*request*/, ::viam::app::v1::GetRoverRentalRobotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoverRentalRobots(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRobotParts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRobotParts() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_GetRobotParts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotParts(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartsRequest* /*request*/, ::viam::app::v1::GetRobotPartsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRobotParts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRobotPart() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_GetRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartRequest* /*request*/, ::viam::app::v1::GetRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRobotPart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRobotPartLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRobotPartLogs() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_GetRobotPartLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPartLogs(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartLogsRequest* /*request*/, ::viam::app::v1::GetRobotPartLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRobotPartLogs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TailRobotPartLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TailRobotPartLogs() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_TailRobotPartLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TailRobotPartLogs(::grpc::ServerContext* /*context*/, const ::viam::app::v1::TailRobotPartLogsRequest* /*request*/, ::grpc::ServerWriter< ::viam::app::v1::TailRobotPartLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTailRobotPartLogs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(25, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRobotPartHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRobotPartHistory() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_GetRobotPartHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPartHistory(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartHistoryRequest* /*request*/, ::viam::app::v1::GetRobotPartHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRobotPartHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateRobotPart() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_UpdateRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateRobotPartRequest* /*request*/, ::viam::app::v1::UpdateRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRobotPart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewRobotPart() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_NewRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NewRobotPartRequest* /*request*/, ::viam::app::v1::NewRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewRobotPart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRobotPart() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_DeleteRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartRequest* /*request*/, ::viam::app::v1::DeleteRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRobotPart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarkPartAsMain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MarkPartAsMain() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_MarkPartAsMain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkPartAsMain(::grpc::ServerContext* /*context*/, const ::viam::app::v1::MarkPartAsMainRequest* /*request*/, ::viam::app::v1::MarkPartAsMainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkPartAsMain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MarkPartForRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MarkPartForRestart() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_MarkPartForRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkPartForRestart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::MarkPartForRestartRequest* /*request*/, ::viam::app::v1::MarkPartForRestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMarkPartForRestart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRobotPartSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRobotPartSecret() {
      ::grpc::Service::MarkMethodRaw(32);
    }
    ~WithRawMethod_CreateRobotPartSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRobotPartSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateRobotPartSecretRequest* /*request*/, ::viam::app::v1::CreateRobotPartSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRobotPartSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(32, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRobotPartSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRobotPartSecret() {
      ::grpc::Service::MarkMethodRaw(33);
    }
    ~WithRawMethod_DeleteRobotPartSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobotPartSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartSecretRequest* /*request*/, ::viam::app::v1::DeleteRobotPartSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRobotPartSecret(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(33, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListRobots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListRobots() {
      ::grpc::Service::MarkMethodRaw(34);
    }
    ~WithRawMethod_ListRobots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRobots(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListRobotsRequest* /*request*/, ::viam::app::v1::ListRobotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListRobots(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(34, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NewRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NewRobot() {
      ::grpc::Service::MarkMethodRaw(35);
    }
    ~WithRawMethod_NewRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NewRobotRequest* /*request*/, ::viam::app::v1::NewRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNewRobot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(35, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateRobot() {
      ::grpc::Service::MarkMethodRaw(36);
    }
    ~WithRawMethod_UpdateRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateRobotRequest* /*request*/, ::viam::app::v1::UpdateRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRobot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(36, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteRobot() {
      ::grpc::Service::MarkMethodRaw(37);
    }
    ~WithRawMethod_DeleteRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotRequest* /*request*/, ::viam::app::v1::DeleteRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteRobot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(37, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListFragments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListFragments() {
      ::grpc::Service::MarkMethodRaw(38);
    }
    ~WithRawMethod_ListFragments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFragments(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListFragmentsRequest* /*request*/, ::viam::app::v1::ListFragmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFragments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(38, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFragment() {
      ::grpc::Service::MarkMethodRaw(39);
    }
    ~WithRawMethod_GetFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetFragmentRequest* /*request*/, ::viam::app::v1::GetFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFragment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(39, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateFragment() {
      ::grpc::Service::MarkMethodRaw(40);
    }
    ~WithRawMethod_CreateFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateFragmentRequest* /*request*/, ::viam::app::v1::CreateFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateFragment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(40, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateFragment() {
      ::grpc::Service::MarkMethodRaw(41);
    }
    ~WithRawMethod_UpdateFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateFragmentRequest* /*request*/, ::viam::app::v1::UpdateFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateFragment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(41, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteFragment() {
      ::grpc::Service::MarkMethodRaw(42);
    }
    ~WithRawMethod_DeleteFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteFragmentRequest* /*request*/, ::viam::app::v1::DeleteFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFragment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(42, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateOrganization(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationRequest* /*request*/, ::viam::app::v1::CreateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListOrganizations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListOrganizations() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListOrganizations(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListOrganizations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganizations(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListOrganizationsRequest* /*request*/, ::viam::app::v1::ListOrganizationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListOrganizations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOrganization() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOrganization(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetOrganizationRequest* /*request*/, ::viam::app::v1::GetOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateOrganization(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationRequest* /*request*/, ::viam::app::v1::UpdateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteOrganization(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationRequest* /*request*/, ::viam::app::v1::DeleteOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteOrganization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListOrganizationMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListOrganizationMembers() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListOrganizationMembers(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListOrganizationMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOrganizationMembers(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListOrganizationMembersRequest* /*request*/, ::viam::app::v1::ListOrganizationMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListOrganizationMembers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateOrganizationInvite() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateOrganizationInvite(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationInviteRequest* /*request*/, ::viam::app::v1::CreateOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateOrganizationInvite(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteOrganizationMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteOrganizationMember() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteOrganizationMember(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteOrganizationMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganizationMember(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationMemberRequest* /*request*/, ::viam::app::v1::DeleteOrganizationMemberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteOrganizationMember(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteOrganizationInvite() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteOrganizationInvite(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationInviteRequest* /*request*/, ::viam::app::v1::DeleteOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteOrganizationInvite(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResendOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResendOrganizationInvite() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResendOrganizationInvite(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResendOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResendOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ResendOrganizationInviteRequest* /*request*/, ::viam::app::v1::ResendOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResendOrganizationInvite(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateLocation() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateLocationRequest* /*request*/, ::viam::app::v1::CreateLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLocation() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetLocationRequest* /*request*/, ::viam::app::v1::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateLocation() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateLocationRequest* /*request*/, ::viam::app::v1::UpdateLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteLocation() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteLocationRequest* /*request*/, ::viam::app::v1::DeleteLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListLocations() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListLocations(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLocations(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListLocationsRequest* /*request*/, ::viam::app::v1::ListLocationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListLocations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShareLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ShareLocation() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShareLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_ShareLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ShareLocationRequest* /*request*/, ::viam::app::v1::ShareLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShareLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnshareLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnshareLocation() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnshareLocation(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnshareLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnshareLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UnshareLocationRequest* /*request*/, ::viam::app::v1::UnshareLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnshareLocation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LocationAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LocationAuth() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LocationAuth(context, request, response); }));
    }
    ~WithRawCallbackMethod_LocationAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LocationAuth(::grpc::ServerContext* /*context*/, const ::viam::app::v1::LocationAuthRequest* /*request*/, ::viam::app::v1::LocationAuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LocationAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateLocationSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateLocationSecret() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateLocationSecret(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateLocationSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLocationSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateLocationSecretRequest* /*request*/, ::viam::app::v1::CreateLocationSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateLocationSecret(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteLocationSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteLocationSecret() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteLocationSecret(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteLocationSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLocationSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteLocationSecretRequest* /*request*/, ::viam::app::v1::DeleteLocationSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteLocationSecret(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRobot() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRobot(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotRequest* /*request*/, ::viam::app::v1::GetRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRobot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRoverRentalRobots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRoverRentalRobots() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRoverRentalRobots(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRoverRentalRobots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoverRentalRobots(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRoverRentalRobotsRequest* /*request*/, ::viam::app::v1::GetRoverRentalRobotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRoverRentalRobots(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRobotParts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRobotParts() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRobotParts(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRobotParts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotParts(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartsRequest* /*request*/, ::viam::app::v1::GetRobotPartsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRobotParts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRobotPart() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRobotPart(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartRequest* /*request*/, ::viam::app::v1::GetRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRobotPart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRobotPartLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRobotPartLogs() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRobotPartLogs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRobotPartLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPartLogs(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartLogsRequest* /*request*/, ::viam::app::v1::GetRobotPartLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRobotPartLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TailRobotPartLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TailRobotPartLogs() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->TailRobotPartLogs(context, request); }));
    }
    ~WithRawCallbackMethod_TailRobotPartLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TailRobotPartLogs(::grpc::ServerContext* /*context*/, const ::viam::app::v1::TailRobotPartLogsRequest* /*request*/, ::grpc::ServerWriter< ::viam::app::v1::TailRobotPartLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* TailRobotPartLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRobotPartHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRobotPartHistory() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRobotPartHistory(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRobotPartHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRobotPartHistory(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartHistoryRequest* /*request*/, ::viam::app::v1::GetRobotPartHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRobotPartHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateRobotPart() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateRobotPart(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateRobotPartRequest* /*request*/, ::viam::app::v1::UpdateRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRobotPart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewRobotPart() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewRobotPart(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NewRobotPartRequest* /*request*/, ::viam::app::v1::NewRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewRobotPart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRobotPart() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRobotPart(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartRequest* /*request*/, ::viam::app::v1::DeleteRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRobotPart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MarkPartAsMain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MarkPartAsMain() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MarkPartAsMain(context, request, response); }));
    }
    ~WithRawCallbackMethod_MarkPartAsMain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkPartAsMain(::grpc::ServerContext* /*context*/, const ::viam::app::v1::MarkPartAsMainRequest* /*request*/, ::viam::app::v1::MarkPartAsMainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarkPartAsMain(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MarkPartForRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MarkPartForRestart() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MarkPartForRestart(context, request, response); }));
    }
    ~WithRawCallbackMethod_MarkPartForRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MarkPartForRestart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::MarkPartForRestartRequest* /*request*/, ::viam::app::v1::MarkPartForRestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MarkPartForRestart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateRobotPartSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateRobotPartSecret() {
      ::grpc::Service::MarkMethodRawCallback(32,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRobotPartSecret(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateRobotPartSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRobotPartSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateRobotPartSecretRequest* /*request*/, ::viam::app::v1::CreateRobotPartSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRobotPartSecret(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRobotPartSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRobotPartSecret() {
      ::grpc::Service::MarkMethodRawCallback(33,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRobotPartSecret(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRobotPartSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobotPartSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartSecretRequest* /*request*/, ::viam::app::v1::DeleteRobotPartSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRobotPartSecret(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListRobots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListRobots() {
      ::grpc::Service::MarkMethodRawCallback(34,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListRobots(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListRobots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRobots(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListRobotsRequest* /*request*/, ::viam::app::v1::ListRobotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListRobots(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NewRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NewRobot() {
      ::grpc::Service::MarkMethodRawCallback(35,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NewRobot(context, request, response); }));
    }
    ~WithRawCallbackMethod_NewRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NewRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NewRobotRequest* /*request*/, ::viam::app::v1::NewRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NewRobot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateRobot() {
      ::grpc::Service::MarkMethodRawCallback(36,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateRobot(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateRobotRequest* /*request*/, ::viam::app::v1::UpdateRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateRobot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteRobot() {
      ::grpc::Service::MarkMethodRawCallback(37,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteRobot(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotRequest* /*request*/, ::viam::app::v1::DeleteRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteRobot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListFragments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListFragments() {
      ::grpc::Service::MarkMethodRawCallback(38,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListFragments(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListFragments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFragments(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListFragmentsRequest* /*request*/, ::viam::app::v1::ListFragmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListFragments(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFragment() {
      ::grpc::Service::MarkMethodRawCallback(39,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFragment(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetFragmentRequest* /*request*/, ::viam::app::v1::GetFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFragment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateFragment() {
      ::grpc::Service::MarkMethodRawCallback(40,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateFragment(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateFragmentRequest* /*request*/, ::viam::app::v1::CreateFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateFragment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateFragment() {
      ::grpc::Service::MarkMethodRawCallback(41,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateFragment(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateFragmentRequest* /*request*/, ::viam::app::v1::UpdateFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateFragment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteFragment() {
      ::grpc::Service::MarkMethodRawCallback(42,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteFragment(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteFragmentRequest* /*request*/, ::viam::app::v1::DeleteFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteFragment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateOrganization() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::CreateOrganizationRequest, ::viam::app::v1::CreateOrganizationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::CreateOrganizationRequest, ::viam::app::v1::CreateOrganizationResponse>* streamer) {
                       return this->StreamedCreateOrganization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationRequest* /*request*/, ::viam::app::v1::CreateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::CreateOrganizationRequest,::viam::app::v1::CreateOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListOrganizations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListOrganizations() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::ListOrganizationsRequest, ::viam::app::v1::ListOrganizationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::ListOrganizationsRequest, ::viam::app::v1::ListOrganizationsResponse>* streamer) {
                       return this->StreamedListOrganizations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListOrganizations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListOrganizations(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListOrganizationsRequest* /*request*/, ::viam::app::v1::ListOrganizationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListOrganizations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::ListOrganizationsRequest,::viam::app::v1::ListOrganizationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOrganization() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetOrganizationRequest, ::viam::app::v1::GetOrganizationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::GetOrganizationRequest, ::viam::app::v1::GetOrganizationResponse>* streamer) {
                       return this->StreamedGetOrganization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetOrganizationRequest* /*request*/, ::viam::app::v1::GetOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetOrganizationRequest,::viam::app::v1::GetOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateOrganization() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::UpdateOrganizationRequest, ::viam::app::v1::UpdateOrganizationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::UpdateOrganizationRequest, ::viam::app::v1::UpdateOrganizationResponse>* streamer) {
                       return this->StreamedUpdateOrganization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateOrganizationRequest* /*request*/, ::viam::app::v1::UpdateOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::UpdateOrganizationRequest,::viam::app::v1::UpdateOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteOrganization() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::DeleteOrganizationRequest, ::viam::app::v1::DeleteOrganizationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::DeleteOrganizationRequest, ::viam::app::v1::DeleteOrganizationResponse>* streamer) {
                       return this->StreamedDeleteOrganization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOrganization(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationRequest* /*request*/, ::viam::app::v1::DeleteOrganizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::DeleteOrganizationRequest,::viam::app::v1::DeleteOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListOrganizationMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListOrganizationMembers() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::ListOrganizationMembersRequest, ::viam::app::v1::ListOrganizationMembersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::ListOrganizationMembersRequest, ::viam::app::v1::ListOrganizationMembersResponse>* streamer) {
                       return this->StreamedListOrganizationMembers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListOrganizationMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListOrganizationMembers(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListOrganizationMembersRequest* /*request*/, ::viam::app::v1::ListOrganizationMembersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListOrganizationMembers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::ListOrganizationMembersRequest,::viam::app::v1::ListOrganizationMembersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateOrganizationInvite() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::CreateOrganizationInviteRequest, ::viam::app::v1::CreateOrganizationInviteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::CreateOrganizationInviteRequest, ::viam::app::v1::CreateOrganizationInviteResponse>* streamer) {
                       return this->StreamedCreateOrganizationInvite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateOrganizationInviteRequest* /*request*/, ::viam::app::v1::CreateOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateOrganizationInvite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::CreateOrganizationInviteRequest,::viam::app::v1::CreateOrganizationInviteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOrganizationMember : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteOrganizationMember() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::DeleteOrganizationMemberRequest, ::viam::app::v1::DeleteOrganizationMemberResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::DeleteOrganizationMemberRequest, ::viam::app::v1::DeleteOrganizationMemberResponse>* streamer) {
                       return this->StreamedDeleteOrganizationMember(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteOrganizationMember() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOrganizationMember(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationMemberRequest* /*request*/, ::viam::app::v1::DeleteOrganizationMemberResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOrganizationMember(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::DeleteOrganizationMemberRequest,::viam::app::v1::DeleteOrganizationMemberResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteOrganizationInvite() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::DeleteOrganizationInviteRequest, ::viam::app::v1::DeleteOrganizationInviteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::DeleteOrganizationInviteRequest, ::viam::app::v1::DeleteOrganizationInviteResponse>* streamer) {
                       return this->StreamedDeleteOrganizationInvite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteOrganizationInviteRequest* /*request*/, ::viam::app::v1::DeleteOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteOrganizationInvite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::DeleteOrganizationInviteRequest,::viam::app::v1::DeleteOrganizationInviteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResendOrganizationInvite : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResendOrganizationInvite() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::ResendOrganizationInviteRequest, ::viam::app::v1::ResendOrganizationInviteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::ResendOrganizationInviteRequest, ::viam::app::v1::ResendOrganizationInviteResponse>* streamer) {
                       return this->StreamedResendOrganizationInvite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResendOrganizationInvite() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResendOrganizationInvite(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ResendOrganizationInviteRequest* /*request*/, ::viam::app::v1::ResendOrganizationInviteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResendOrganizationInvite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::ResendOrganizationInviteRequest,::viam::app::v1::ResendOrganizationInviteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateLocation() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::CreateLocationRequest, ::viam::app::v1::CreateLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::CreateLocationRequest, ::viam::app::v1::CreateLocationResponse>* streamer) {
                       return this->StreamedCreateLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateLocationRequest* /*request*/, ::viam::app::v1::CreateLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::CreateLocationRequest,::viam::app::v1::CreateLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLocation() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetLocationRequest, ::viam::app::v1::GetLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::GetLocationRequest, ::viam::app::v1::GetLocationResponse>* streamer) {
                       return this->StreamedGetLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetLocationRequest* /*request*/, ::viam::app::v1::GetLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetLocationRequest,::viam::app::v1::GetLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateLocation() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::UpdateLocationRequest, ::viam::app::v1::UpdateLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::UpdateLocationRequest, ::viam::app::v1::UpdateLocationResponse>* streamer) {
                       return this->StreamedUpdateLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateLocationRequest* /*request*/, ::viam::app::v1::UpdateLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::UpdateLocationRequest,::viam::app::v1::UpdateLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteLocation() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::DeleteLocationRequest, ::viam::app::v1::DeleteLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::DeleteLocationRequest, ::viam::app::v1::DeleteLocationResponse>* streamer) {
                       return this->StreamedDeleteLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteLocationRequest* /*request*/, ::viam::app::v1::DeleteLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::DeleteLocationRequest,::viam::app::v1::DeleteLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListLocations() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::ListLocationsRequest, ::viam::app::v1::ListLocationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::ListLocationsRequest, ::viam::app::v1::ListLocationsResponse>* streamer) {
                       return this->StreamedListLocations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListLocations(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListLocationsRequest* /*request*/, ::viam::app::v1::ListLocationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListLocations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::ListLocationsRequest,::viam::app::v1::ListLocationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShareLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShareLocation() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::ShareLocationRequest, ::viam::app::v1::ShareLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::ShareLocationRequest, ::viam::app::v1::ShareLocationResponse>* streamer) {
                       return this->StreamedShareLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShareLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShareLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ShareLocationRequest* /*request*/, ::viam::app::v1::ShareLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShareLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::ShareLocationRequest,::viam::app::v1::ShareLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnshareLocation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnshareLocation() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::UnshareLocationRequest, ::viam::app::v1::UnshareLocationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::UnshareLocationRequest, ::viam::app::v1::UnshareLocationResponse>* streamer) {
                       return this->StreamedUnshareLocation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnshareLocation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnshareLocation(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UnshareLocationRequest* /*request*/, ::viam::app::v1::UnshareLocationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnshareLocation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::UnshareLocationRequest,::viam::app::v1::UnshareLocationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LocationAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LocationAuth() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::LocationAuthRequest, ::viam::app::v1::LocationAuthResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::LocationAuthRequest, ::viam::app::v1::LocationAuthResponse>* streamer) {
                       return this->StreamedLocationAuth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LocationAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LocationAuth(::grpc::ServerContext* /*context*/, const ::viam::app::v1::LocationAuthRequest* /*request*/, ::viam::app::v1::LocationAuthResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLocationAuth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::LocationAuthRequest,::viam::app::v1::LocationAuthResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateLocationSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateLocationSecret() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::CreateLocationSecretRequest, ::viam::app::v1::CreateLocationSecretResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::CreateLocationSecretRequest, ::viam::app::v1::CreateLocationSecretResponse>* streamer) {
                       return this->StreamedCreateLocationSecret(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateLocationSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateLocationSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateLocationSecretRequest* /*request*/, ::viam::app::v1::CreateLocationSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateLocationSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::CreateLocationSecretRequest,::viam::app::v1::CreateLocationSecretResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteLocationSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteLocationSecret() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::DeleteLocationSecretRequest, ::viam::app::v1::DeleteLocationSecretResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::DeleteLocationSecretRequest, ::viam::app::v1::DeleteLocationSecretResponse>* streamer) {
                       return this->StreamedDeleteLocationSecret(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteLocationSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteLocationSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteLocationSecretRequest* /*request*/, ::viam::app::v1::DeleteLocationSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteLocationSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::DeleteLocationSecretRequest,::viam::app::v1::DeleteLocationSecretResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRobot() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetRobotRequest, ::viam::app::v1::GetRobotResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::GetRobotRequest, ::viam::app::v1::GetRobotResponse>* streamer) {
                       return this->StreamedGetRobot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotRequest* /*request*/, ::viam::app::v1::GetRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRobot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetRobotRequest,::viam::app::v1::GetRobotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRoverRentalRobots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRoverRentalRobots() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetRoverRentalRobotsRequest, ::viam::app::v1::GetRoverRentalRobotsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::GetRoverRentalRobotsRequest, ::viam::app::v1::GetRoverRentalRobotsResponse>* streamer) {
                       return this->StreamedGetRoverRentalRobots(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRoverRentalRobots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRoverRentalRobots(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRoverRentalRobotsRequest* /*request*/, ::viam::app::v1::GetRoverRentalRobotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRoverRentalRobots(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetRoverRentalRobotsRequest,::viam::app::v1::GetRoverRentalRobotsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRobotParts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRobotParts() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetRobotPartsRequest, ::viam::app::v1::GetRobotPartsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::GetRobotPartsRequest, ::viam::app::v1::GetRobotPartsResponse>* streamer) {
                       return this->StreamedGetRobotParts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRobotParts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRobotParts(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartsRequest* /*request*/, ::viam::app::v1::GetRobotPartsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRobotParts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetRobotPartsRequest,::viam::app::v1::GetRobotPartsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRobotPart() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetRobotPartRequest, ::viam::app::v1::GetRobotPartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::GetRobotPartRequest, ::viam::app::v1::GetRobotPartResponse>* streamer) {
                       return this->StreamedGetRobotPart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartRequest* /*request*/, ::viam::app::v1::GetRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRobotPart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetRobotPartRequest,::viam::app::v1::GetRobotPartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRobotPartLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRobotPartLogs() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetRobotPartLogsRequest, ::viam::app::v1::GetRobotPartLogsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::GetRobotPartLogsRequest, ::viam::app::v1::GetRobotPartLogsResponse>* streamer) {
                       return this->StreamedGetRobotPartLogs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRobotPartLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRobotPartLogs(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartLogsRequest* /*request*/, ::viam::app::v1::GetRobotPartLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRobotPartLogs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetRobotPartLogsRequest,::viam::app::v1::GetRobotPartLogsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRobotPartHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRobotPartHistory() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetRobotPartHistoryRequest, ::viam::app::v1::GetRobotPartHistoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::GetRobotPartHistoryRequest, ::viam::app::v1::GetRobotPartHistoryResponse>* streamer) {
                       return this->StreamedGetRobotPartHistory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRobotPartHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRobotPartHistory(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetRobotPartHistoryRequest* /*request*/, ::viam::app::v1::GetRobotPartHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRobotPartHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetRobotPartHistoryRequest,::viam::app::v1::GetRobotPartHistoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateRobotPart() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::UpdateRobotPartRequest, ::viam::app::v1::UpdateRobotPartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::UpdateRobotPartRequest, ::viam::app::v1::UpdateRobotPartResponse>* streamer) {
                       return this->StreamedUpdateRobotPart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateRobotPartRequest* /*request*/, ::viam::app::v1::UpdateRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRobotPart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::UpdateRobotPartRequest,::viam::app::v1::UpdateRobotPartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewRobotPart() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::NewRobotPartRequest, ::viam::app::v1::NewRobotPartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::NewRobotPartRequest, ::viam::app::v1::NewRobotPartResponse>* streamer) {
                       return this->StreamedNewRobotPart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NewRobotPartRequest* /*request*/, ::viam::app::v1::NewRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewRobotPart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::NewRobotPartRequest,::viam::app::v1::NewRobotPartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRobotPart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRobotPart() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::DeleteRobotPartRequest, ::viam::app::v1::DeleteRobotPartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::DeleteRobotPartRequest, ::viam::app::v1::DeleteRobotPartResponse>* streamer) {
                       return this->StreamedDeleteRobotPart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRobotPart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRobotPart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartRequest* /*request*/, ::viam::app::v1::DeleteRobotPartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRobotPart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::DeleteRobotPartRequest,::viam::app::v1::DeleteRobotPartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MarkPartAsMain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MarkPartAsMain() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::MarkPartAsMainRequest, ::viam::app::v1::MarkPartAsMainResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::MarkPartAsMainRequest, ::viam::app::v1::MarkPartAsMainResponse>* streamer) {
                       return this->StreamedMarkPartAsMain(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MarkPartAsMain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MarkPartAsMain(::grpc::ServerContext* /*context*/, const ::viam::app::v1::MarkPartAsMainRequest* /*request*/, ::viam::app::v1::MarkPartAsMainResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMarkPartAsMain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::MarkPartAsMainRequest,::viam::app::v1::MarkPartAsMainResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MarkPartForRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MarkPartForRestart() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::MarkPartForRestartRequest, ::viam::app::v1::MarkPartForRestartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::MarkPartForRestartRequest, ::viam::app::v1::MarkPartForRestartResponse>* streamer) {
                       return this->StreamedMarkPartForRestart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MarkPartForRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MarkPartForRestart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::MarkPartForRestartRequest* /*request*/, ::viam::app::v1::MarkPartForRestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMarkPartForRestart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::MarkPartForRestartRequest,::viam::app::v1::MarkPartForRestartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRobotPartSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRobotPartSecret() {
      ::grpc::Service::MarkMethodStreamed(32,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::CreateRobotPartSecretRequest, ::viam::app::v1::CreateRobotPartSecretResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::CreateRobotPartSecretRequest, ::viam::app::v1::CreateRobotPartSecretResponse>* streamer) {
                       return this->StreamedCreateRobotPartSecret(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRobotPartSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRobotPartSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateRobotPartSecretRequest* /*request*/, ::viam::app::v1::CreateRobotPartSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRobotPartSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::CreateRobotPartSecretRequest,::viam::app::v1::CreateRobotPartSecretResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRobotPartSecret : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRobotPartSecret() {
      ::grpc::Service::MarkMethodStreamed(33,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::DeleteRobotPartSecretRequest, ::viam::app::v1::DeleteRobotPartSecretResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::DeleteRobotPartSecretRequest, ::viam::app::v1::DeleteRobotPartSecretResponse>* streamer) {
                       return this->StreamedDeleteRobotPartSecret(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRobotPartSecret() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRobotPartSecret(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotPartSecretRequest* /*request*/, ::viam::app::v1::DeleteRobotPartSecretResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRobotPartSecret(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::DeleteRobotPartSecretRequest,::viam::app::v1::DeleteRobotPartSecretResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListRobots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListRobots() {
      ::grpc::Service::MarkMethodStreamed(34,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::ListRobotsRequest, ::viam::app::v1::ListRobotsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::ListRobotsRequest, ::viam::app::v1::ListRobotsResponse>* streamer) {
                       return this->StreamedListRobots(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListRobots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListRobots(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListRobotsRequest* /*request*/, ::viam::app::v1::ListRobotsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListRobots(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::ListRobotsRequest,::viam::app::v1::ListRobotsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NewRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NewRobot() {
      ::grpc::Service::MarkMethodStreamed(35,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::NewRobotRequest, ::viam::app::v1::NewRobotResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::NewRobotRequest, ::viam::app::v1::NewRobotResponse>* streamer) {
                       return this->StreamedNewRobot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NewRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NewRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NewRobotRequest* /*request*/, ::viam::app::v1::NewRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNewRobot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::NewRobotRequest,::viam::app::v1::NewRobotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateRobot() {
      ::grpc::Service::MarkMethodStreamed(36,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::UpdateRobotRequest, ::viam::app::v1::UpdateRobotResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::UpdateRobotRequest, ::viam::app::v1::UpdateRobotResponse>* streamer) {
                       return this->StreamedUpdateRobot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateRobotRequest* /*request*/, ::viam::app::v1::UpdateRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRobot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::UpdateRobotRequest,::viam::app::v1::UpdateRobotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteRobot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteRobot() {
      ::grpc::Service::MarkMethodStreamed(37,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::DeleteRobotRequest, ::viam::app::v1::DeleteRobotResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::DeleteRobotRequest, ::viam::app::v1::DeleteRobotResponse>* streamer) {
                       return this->StreamedDeleteRobot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteRobot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteRobot(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteRobotRequest* /*request*/, ::viam::app::v1::DeleteRobotResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteRobot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::DeleteRobotRequest,::viam::app::v1::DeleteRobotResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListFragments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListFragments() {
      ::grpc::Service::MarkMethodStreamed(38,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::ListFragmentsRequest, ::viam::app::v1::ListFragmentsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::ListFragmentsRequest, ::viam::app::v1::ListFragmentsResponse>* streamer) {
                       return this->StreamedListFragments(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListFragments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFragments(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ListFragmentsRequest* /*request*/, ::viam::app::v1::ListFragmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListFragments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::ListFragmentsRequest,::viam::app::v1::ListFragmentsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFragment() {
      ::grpc::Service::MarkMethodStreamed(39,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::GetFragmentRequest, ::viam::app::v1::GetFragmentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::GetFragmentRequest, ::viam::app::v1::GetFragmentResponse>* streamer) {
                       return this->StreamedGetFragment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::GetFragmentRequest* /*request*/, ::viam::app::v1::GetFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFragment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::GetFragmentRequest,::viam::app::v1::GetFragmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateFragment() {
      ::grpc::Service::MarkMethodStreamed(40,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::CreateFragmentRequest, ::viam::app::v1::CreateFragmentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::CreateFragmentRequest, ::viam::app::v1::CreateFragmentResponse>* streamer) {
                       return this->StreamedCreateFragment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CreateFragmentRequest* /*request*/, ::viam::app::v1::CreateFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateFragment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::CreateFragmentRequest,::viam::app::v1::CreateFragmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateFragment() {
      ::grpc::Service::MarkMethodStreamed(41,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::UpdateFragmentRequest, ::viam::app::v1::UpdateFragmentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::UpdateFragmentRequest, ::viam::app::v1::UpdateFragmentResponse>* streamer) {
                       return this->StreamedUpdateFragment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::UpdateFragmentRequest* /*request*/, ::viam::app::v1::UpdateFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateFragment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::UpdateFragmentRequest,::viam::app::v1::UpdateFragmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFragment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteFragment() {
      ::grpc::Service::MarkMethodStreamed(42,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::DeleteFragmentRequest, ::viam::app::v1::DeleteFragmentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::DeleteFragmentRequest, ::viam::app::v1::DeleteFragmentResponse>* streamer) {
                       return this->StreamedDeleteFragment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteFragment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFragment(::grpc::ServerContext* /*context*/, const ::viam::app::v1::DeleteFragmentRequest* /*request*/, ::viam::app::v1::DeleteFragmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFragment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::DeleteFragmentRequest,::viam::app::v1::DeleteFragmentResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateOrganization<WithStreamedUnaryMethod_ListOrganizations<WithStreamedUnaryMethod_GetOrganization<WithStreamedUnaryMethod_UpdateOrganization<WithStreamedUnaryMethod_DeleteOrganization<WithStreamedUnaryMethod_ListOrganizationMembers<WithStreamedUnaryMethod_CreateOrganizationInvite<WithStreamedUnaryMethod_DeleteOrganizationMember<WithStreamedUnaryMethod_DeleteOrganizationInvite<WithStreamedUnaryMethod_ResendOrganizationInvite<WithStreamedUnaryMethod_CreateLocation<WithStreamedUnaryMethod_GetLocation<WithStreamedUnaryMethod_UpdateLocation<WithStreamedUnaryMethod_DeleteLocation<WithStreamedUnaryMethod_ListLocations<WithStreamedUnaryMethod_ShareLocation<WithStreamedUnaryMethod_UnshareLocation<WithStreamedUnaryMethod_LocationAuth<WithStreamedUnaryMethod_CreateLocationSecret<WithStreamedUnaryMethod_DeleteLocationSecret<WithStreamedUnaryMethod_GetRobot<WithStreamedUnaryMethod_GetRoverRentalRobots<WithStreamedUnaryMethod_GetRobotParts<WithStreamedUnaryMethod_GetRobotPart<WithStreamedUnaryMethod_GetRobotPartLogs<WithStreamedUnaryMethod_GetRobotPartHistory<WithStreamedUnaryMethod_UpdateRobotPart<WithStreamedUnaryMethod_NewRobotPart<WithStreamedUnaryMethod_DeleteRobotPart<WithStreamedUnaryMethod_MarkPartAsMain<WithStreamedUnaryMethod_MarkPartForRestart<WithStreamedUnaryMethod_CreateRobotPartSecret<WithStreamedUnaryMethod_DeleteRobotPartSecret<WithStreamedUnaryMethod_ListRobots<WithStreamedUnaryMethod_NewRobot<WithStreamedUnaryMethod_UpdateRobot<WithStreamedUnaryMethod_DeleteRobot<WithStreamedUnaryMethod_ListFragments<WithStreamedUnaryMethod_GetFragment<WithStreamedUnaryMethod_CreateFragment<WithStreamedUnaryMethod_UpdateFragment<WithStreamedUnaryMethod_DeleteFragment<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_TailRobotPartLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_TailRobotPartLogs() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::viam::app::v1::TailRobotPartLogsRequest, ::viam::app::v1::TailRobotPartLogsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::viam::app::v1::TailRobotPartLogsRequest, ::viam::app::v1::TailRobotPartLogsResponse>* streamer) {
                       return this->StreamedTailRobotPartLogs(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_TailRobotPartLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TailRobotPartLogs(::grpc::ServerContext* /*context*/, const ::viam::app::v1::TailRobotPartLogsRequest* /*request*/, ::grpc::ServerWriter< ::viam::app::v1::TailRobotPartLogsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedTailRobotPartLogs(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::viam::app::v1::TailRobotPartLogsRequest,::viam::app::v1::TailRobotPartLogsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_TailRobotPartLogs<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateOrganization<WithStreamedUnaryMethod_ListOrganizations<WithStreamedUnaryMethod_GetOrganization<WithStreamedUnaryMethod_UpdateOrganization<WithStreamedUnaryMethod_DeleteOrganization<WithStreamedUnaryMethod_ListOrganizationMembers<WithStreamedUnaryMethod_CreateOrganizationInvite<WithStreamedUnaryMethod_DeleteOrganizationMember<WithStreamedUnaryMethod_DeleteOrganizationInvite<WithStreamedUnaryMethod_ResendOrganizationInvite<WithStreamedUnaryMethod_CreateLocation<WithStreamedUnaryMethod_GetLocation<WithStreamedUnaryMethod_UpdateLocation<WithStreamedUnaryMethod_DeleteLocation<WithStreamedUnaryMethod_ListLocations<WithStreamedUnaryMethod_ShareLocation<WithStreamedUnaryMethod_UnshareLocation<WithStreamedUnaryMethod_LocationAuth<WithStreamedUnaryMethod_CreateLocationSecret<WithStreamedUnaryMethod_DeleteLocationSecret<WithStreamedUnaryMethod_GetRobot<WithStreamedUnaryMethod_GetRoverRentalRobots<WithStreamedUnaryMethod_GetRobotParts<WithStreamedUnaryMethod_GetRobotPart<WithStreamedUnaryMethod_GetRobotPartLogs<WithSplitStreamingMethod_TailRobotPartLogs<WithStreamedUnaryMethod_GetRobotPartHistory<WithStreamedUnaryMethod_UpdateRobotPart<WithStreamedUnaryMethod_NewRobotPart<WithStreamedUnaryMethod_DeleteRobotPart<WithStreamedUnaryMethod_MarkPartAsMain<WithStreamedUnaryMethod_MarkPartForRestart<WithStreamedUnaryMethod_CreateRobotPartSecret<WithStreamedUnaryMethod_DeleteRobotPartSecret<WithStreamedUnaryMethod_ListRobots<WithStreamedUnaryMethod_NewRobot<WithStreamedUnaryMethod_UpdateRobot<WithStreamedUnaryMethod_DeleteRobot<WithStreamedUnaryMethod_ListFragments<WithStreamedUnaryMethod_GetFragment<WithStreamedUnaryMethod_CreateFragment<WithStreamedUnaryMethod_UpdateFragment<WithStreamedUnaryMethod_DeleteFragment<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};
// Organizations

}  // namespace v1
}  // namespace app
}  // namespace viam


#endif  // GRPC_app_2fv1_2fapp_2eproto__INCLUDED
