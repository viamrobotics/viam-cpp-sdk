// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/v1/robot.proto

#include "app/v1/robot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace app {
namespace v1 {
PROTOBUF_CONSTEXPR RobotConfig::RobotConfig(
    ::_pbi::ConstantInitialized)
  : remotes_()
  , components_()
  , processes_()
  , services_()
  , modules_()
  , packages_()
  , cloud_(nullptr)
  , network_(nullptr)
  , auth_(nullptr)
  , debug_(false)
  , disable_partial_start_(false){}
struct RobotConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotConfigDefaultTypeInternal() {}
  union {
    RobotConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotConfigDefaultTypeInternal _RobotConfig_default_instance_;
PROTOBUF_CONSTEXPR LocationSecret::LocationSecret(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secret_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct LocationSecretDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationSecretDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationSecretDefaultTypeInternal() {}
  union {
    LocationSecret _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationSecretDefaultTypeInternal _LocationSecret_default_instance_;
PROTOBUF_CONSTEXPR CloudConfig::CloudConfig(
    ::_pbi::ConstantInitialized)
  : location_secrets_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , fqdn_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , local_fqdn_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , managed_by_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , signaling_address_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , location_secret_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secret_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , signaling_insecure_(false){}
struct CloudConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloudConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloudConfigDefaultTypeInternal() {}
  union {
    CloudConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloudConfigDefaultTypeInternal _CloudConfig_default_instance_;
PROTOBUF_CONSTEXPR ComponentConfig::ComponentConfig(
    ::_pbi::ConstantInitialized)
  : depends_on_()
  , service_configs_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , namespace__(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , model_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , api_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , frame_(nullptr)
  , attributes_(nullptr){}
struct ComponentConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComponentConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComponentConfigDefaultTypeInternal() {}
  union {
    ComponentConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComponentConfigDefaultTypeInternal _ComponentConfig_default_instance_;
PROTOBUF_CONSTEXPR ResourceLevelServiceConfig::ResourceLevelServiceConfig(
    ::_pbi::ConstantInitialized)
  : type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , attributes_(nullptr){}
struct ResourceLevelServiceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceLevelServiceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceLevelServiceConfigDefaultTypeInternal() {}
  union {
    ResourceLevelServiceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceLevelServiceConfigDefaultTypeInternal _ResourceLevelServiceConfig_default_instance_;
PROTOBUF_CONSTEXPR ProcessConfig::ProcessConfig(
    ::_pbi::ConstantInitialized)
  : args_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cwd_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , stop_timeout_(nullptr)
  , one_shot_(false)
  , log_(false)
  , stop_signal_(0){}
struct ProcessConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessConfigDefaultTypeInternal() {}
  union {
    ProcessConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessConfigDefaultTypeInternal _ProcessConfig_default_instance_;
PROTOBUF_CONSTEXPR ServiceConfig::ServiceConfig(
    ::_pbi::ConstantInitialized)
  : depends_on_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , namespace__(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , model_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , attributes_(nullptr){}
struct ServiceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServiceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServiceConfigDefaultTypeInternal() {}
  union {
    ServiceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServiceConfigDefaultTypeInternal _ServiceConfig_default_instance_;
PROTOBUF_CONSTEXPR NetworkConfig::NetworkConfig(
    ::_pbi::ConstantInitialized)
  : fqdn_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bind_address_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tls_cert_file_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tls_key_file_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct NetworkConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkConfigDefaultTypeInternal() {}
  union {
    NetworkConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkConfigDefaultTypeInternal _NetworkConfig_default_instance_;
PROTOBUF_CONSTEXPR AuthConfig::AuthConfig(
    ::_pbi::ConstantInitialized)
  : handlers_()
  , tls_auth_entities_()
  , external_auth_config_(nullptr){}
struct AuthConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthConfigDefaultTypeInternal() {}
  union {
    AuthConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthConfigDefaultTypeInternal _AuthConfig_default_instance_;
PROTOBUF_CONSTEXPR JWKSFile::JWKSFile(
    ::_pbi::ConstantInitialized)
  : json_(nullptr){}
struct JWKSFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JWKSFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JWKSFileDefaultTypeInternal() {}
  union {
    JWKSFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JWKSFileDefaultTypeInternal _JWKSFile_default_instance_;
PROTOBUF_CONSTEXPR AuthHandlerWebOauthConfig::AuthHandlerWebOauthConfig(
    ::_pbi::ConstantInitialized)
  : allowed_audiences_()
  , jwks_(nullptr){}
struct AuthHandlerWebOauthConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthHandlerWebOauthConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthHandlerWebOauthConfigDefaultTypeInternal() {}
  union {
    AuthHandlerWebOauthConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthHandlerWebOauthConfigDefaultTypeInternal _AuthHandlerWebOauthConfig_default_instance_;
PROTOBUF_CONSTEXPR ExternalAuthConfig::ExternalAuthConfig(
    ::_pbi::ConstantInitialized)
  : jwks_(nullptr){}
struct ExternalAuthConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExternalAuthConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExternalAuthConfigDefaultTypeInternal() {}
  union {
    ExternalAuthConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExternalAuthConfigDefaultTypeInternal _ExternalAuthConfig_default_instance_;
PROTOBUF_CONSTEXPR AuthHandlerConfig::AuthHandlerConfig(
    ::_pbi::ConstantInitialized)
  : config_(nullptr)
  , web_oauth_config_(nullptr)
  , type_(0)
{}
struct AuthHandlerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthHandlerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthHandlerConfigDefaultTypeInternal() {}
  union {
    AuthHandlerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthHandlerConfigDefaultTypeInternal _AuthHandlerConfig_default_instance_;
PROTOBUF_CONSTEXPR Frame::Frame(
    ::_pbi::ConstantInitialized)
  : parent_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , translation_(nullptr)
  , orientation_(nullptr)
  , geometry_(nullptr){}
struct FrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameDefaultTypeInternal() {}
  union {
    Frame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameDefaultTypeInternal _Frame_default_instance_;
PROTOBUF_CONSTEXPR Translation::Translation(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct TranslationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranslationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranslationDefaultTypeInternal() {}
  union {
    Translation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranslationDefaultTypeInternal _Translation_default_instance_;
PROTOBUF_CONSTEXPR Orientation_NoOrientation::Orientation_NoOrientation(
    ::_pbi::ConstantInitialized){}
struct Orientation_NoOrientationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Orientation_NoOrientationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Orientation_NoOrientationDefaultTypeInternal() {}
  union {
    Orientation_NoOrientation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Orientation_NoOrientationDefaultTypeInternal _Orientation_NoOrientation_default_instance_;
PROTOBUF_CONSTEXPR Orientation_OrientationVectorRadians::Orientation_OrientationVectorRadians(
    ::_pbi::ConstantInitialized)
  : theta_(0)
  , x_(0)
  , y_(0)
  , z_(0){}
struct Orientation_OrientationVectorRadiansDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Orientation_OrientationVectorRadiansDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Orientation_OrientationVectorRadiansDefaultTypeInternal() {}
  union {
    Orientation_OrientationVectorRadians _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Orientation_OrientationVectorRadiansDefaultTypeInternal _Orientation_OrientationVectorRadians_default_instance_;
PROTOBUF_CONSTEXPR Orientation_OrientationVectorDegrees::Orientation_OrientationVectorDegrees(
    ::_pbi::ConstantInitialized)
  : theta_(0)
  , x_(0)
  , y_(0)
  , z_(0){}
struct Orientation_OrientationVectorDegreesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Orientation_OrientationVectorDegreesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Orientation_OrientationVectorDegreesDefaultTypeInternal() {}
  union {
    Orientation_OrientationVectorDegrees _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Orientation_OrientationVectorDegreesDefaultTypeInternal _Orientation_OrientationVectorDegrees_default_instance_;
PROTOBUF_CONSTEXPR Orientation_EulerAngles::Orientation_EulerAngles(
    ::_pbi::ConstantInitialized)
  : roll_(0)
  , pitch_(0)
  , yaw_(0){}
struct Orientation_EulerAnglesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Orientation_EulerAnglesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Orientation_EulerAnglesDefaultTypeInternal() {}
  union {
    Orientation_EulerAngles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Orientation_EulerAnglesDefaultTypeInternal _Orientation_EulerAngles_default_instance_;
PROTOBUF_CONSTEXPR Orientation_AxisAngles::Orientation_AxisAngles(
    ::_pbi::ConstantInitialized)
  : theta_(0)
  , x_(0)
  , y_(0)
  , z_(0){}
struct Orientation_AxisAnglesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Orientation_AxisAnglesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Orientation_AxisAnglesDefaultTypeInternal() {}
  union {
    Orientation_AxisAngles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Orientation_AxisAnglesDefaultTypeInternal _Orientation_AxisAngles_default_instance_;
PROTOBUF_CONSTEXPR Orientation_Quaternion::Orientation_Quaternion(
    ::_pbi::ConstantInitialized)
  : w_(0)
  , x_(0)
  , y_(0)
  , z_(0){}
struct Orientation_QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Orientation_QuaternionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Orientation_QuaternionDefaultTypeInternal() {}
  union {
    Orientation_Quaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Orientation_QuaternionDefaultTypeInternal _Orientation_Quaternion_default_instance_;
PROTOBUF_CONSTEXPR Orientation::Orientation(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct OrientationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrientationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrientationDefaultTypeInternal() {}
  union {
    Orientation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrientationDefaultTypeInternal _Orientation_default_instance_;
PROTOBUF_CONSTEXPR RemoteConfig::RemoteConfig(
    ::_pbi::ConstantInitialized)
  : service_configs_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , address_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , managed_by_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , secret_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , frame_(nullptr)
  , auth_(nullptr)
  , connection_check_interval_(nullptr)
  , reconnect_interval_(nullptr)
  , insecure_(false){}
struct RemoteConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteConfigDefaultTypeInternal() {}
  union {
    RemoteConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteConfigDefaultTypeInternal _RemoteConfig_default_instance_;
PROTOBUF_CONSTEXPR RemoteAuth_Credentials::RemoteAuth_Credentials(
    ::_pbi::ConstantInitialized)
  : payload_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0)
{}
struct RemoteAuth_CredentialsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteAuth_CredentialsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteAuth_CredentialsDefaultTypeInternal() {}
  union {
    RemoteAuth_Credentials _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteAuth_CredentialsDefaultTypeInternal _RemoteAuth_Credentials_default_instance_;
PROTOBUF_CONSTEXPR RemoteAuth::RemoteAuth(
    ::_pbi::ConstantInitialized)
  : entity_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , credentials_(nullptr){}
struct RemoteAuthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteAuthDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteAuthDefaultTypeInternal() {}
  union {
    RemoteAuth _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteAuthDefaultTypeInternal _RemoteAuth_default_instance_;
PROTOBUF_CONSTEXPR AgentInfo::AgentInfo(
    ::_pbi::ConstantInitialized)
  : ips_()
  , host_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , os_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , git_revision_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AgentInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentInfoDefaultTypeInternal() {}
  union {
    AgentInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentInfoDefaultTypeInternal _AgentInfo_default_instance_;
PROTOBUF_CONSTEXPR ConfigRequest::ConfigRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , agent_info_(nullptr){}
struct ConfigRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigRequestDefaultTypeInternal() {}
  union {
    ConfigRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigRequestDefaultTypeInternal _ConfigRequest_default_instance_;
PROTOBUF_CONSTEXPR ConfigResponse::ConfigResponse(
    ::_pbi::ConstantInitialized)
  : config_(nullptr){}
struct ConfigResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigResponseDefaultTypeInternal() {}
  union {
    ConfigResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigResponseDefaultTypeInternal _ConfigResponse_default_instance_;
PROTOBUF_CONSTEXPR CertificateRequest::CertificateRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CertificateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CertificateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CertificateRequestDefaultTypeInternal() {}
  union {
    CertificateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CertificateRequestDefaultTypeInternal _CertificateRequest_default_instance_;
PROTOBUF_CONSTEXPR CertificateResponse::CertificateResponse(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tls_certificate_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tls_private_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct CertificateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CertificateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CertificateResponseDefaultTypeInternal() {}
  union {
    CertificateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CertificateResponseDefaultTypeInternal _CertificateResponse_default_instance_;
PROTOBUF_CONSTEXPR LogRequest::LogRequest(
    ::_pbi::ConstantInitialized)
  : logs_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct LogRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogRequestDefaultTypeInternal() {}
  union {
    LogRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogRequestDefaultTypeInternal _LogRequest_default_instance_;
PROTOBUF_CONSTEXPR LogResponse::LogResponse(
    ::_pbi::ConstantInitialized){}
struct LogResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogResponseDefaultTypeInternal() {}
  union {
    LogResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogResponseDefaultTypeInternal _LogResponse_default_instance_;
PROTOBUF_CONSTEXPR NeedsRestartRequest::NeedsRestartRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct NeedsRestartRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NeedsRestartRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NeedsRestartRequestDefaultTypeInternal() {}
  union {
    NeedsRestartRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NeedsRestartRequestDefaultTypeInternal _NeedsRestartRequest_default_instance_;
PROTOBUF_CONSTEXPR NeedsRestartResponse::NeedsRestartResponse(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , restart_check_interval_(nullptr)
  , must_restart_(false){}
struct NeedsRestartResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NeedsRestartResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NeedsRestartResponseDefaultTypeInternal() {}
  union {
    NeedsRestartResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NeedsRestartResponseDefaultTypeInternal _NeedsRestartResponse_default_instance_;
PROTOBUF_CONSTEXPR ModuleConfig::ModuleConfig(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ModuleConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModuleConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModuleConfigDefaultTypeInternal() {}
  union {
    ModuleConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModuleConfigDefaultTypeInternal _ModuleConfig_default_instance_;
PROTOBUF_CONSTEXPR PackageConfig::PackageConfig(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , package_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PackageConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PackageConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PackageConfigDefaultTypeInternal() {}
  union {
    PackageConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PackageConfigDefaultTypeInternal _PackageConfig_default_instance_;
}  // namespace v1
}  // namespace app
}  // namespace viam
static ::_pb::Metadata file_level_metadata_app_2fv1_2frobot_2eproto[36];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_app_2fv1_2frobot_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_app_2fv1_2frobot_2eproto = nullptr;

const uint32_t TableStruct_app_2fv1_2frobot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, cloud_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, remotes_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, components_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, processes_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, services_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, network_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, auth_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, debug_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, modules_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, disable_partial_start_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RobotConfig, packages_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::LocationSecret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::LocationSecret, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::LocationSecret, secret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CloudConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CloudConfig, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CloudConfig, fqdn_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CloudConfig, local_fqdn_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CloudConfig, managed_by_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CloudConfig, signaling_address_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CloudConfig, signaling_insecure_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CloudConfig, location_secret_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CloudConfig, secret_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CloudConfig, location_secrets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ComponentConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ComponentConfig, name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ComponentConfig, namespace__),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ComponentConfig, type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ComponentConfig, model_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ComponentConfig, frame_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ComponentConfig, depends_on_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ComponentConfig, service_configs_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ComponentConfig, attributes_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ComponentConfig, api_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ResourceLevelServiceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ResourceLevelServiceConfig, type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ResourceLevelServiceConfig, attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ProcessConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ProcessConfig, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ProcessConfig, name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ProcessConfig, args_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ProcessConfig, cwd_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ProcessConfig, one_shot_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ProcessConfig, log_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ProcessConfig, stop_signal_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ProcessConfig, stop_timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ServiceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ServiceConfig, name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ServiceConfig, namespace__),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ServiceConfig, type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ServiceConfig, attributes_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ServiceConfig, depends_on_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ServiceConfig, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::NetworkConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::NetworkConfig, fqdn_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::NetworkConfig, bind_address_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::NetworkConfig, tls_cert_file_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::NetworkConfig, tls_key_file_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthConfig, handlers_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthConfig, tls_auth_entities_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthConfig, external_auth_config_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::JWKSFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::JWKSFile, json_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthHandlerWebOauthConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthHandlerWebOauthConfig, allowed_audiences_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthHandlerWebOauthConfig, jwks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ExternalAuthConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ExternalAuthConfig, jwks_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthHandlerConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthHandlerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthHandlerConfig, type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthHandlerConfig, config_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AuthHandlerConfig, web_oauth_config_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Frame, parent_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Frame, translation_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Frame, orientation_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Frame, geometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Translation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Translation, x_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Translation, y_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Translation, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_NoOrientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_OrientationVectorRadians, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_OrientationVectorRadians, theta_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_OrientationVectorRadians, x_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_OrientationVectorRadians, y_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_OrientationVectorRadians, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_OrientationVectorDegrees, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_OrientationVectorDegrees, theta_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_OrientationVectorDegrees, x_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_OrientationVectorDegrees, y_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_OrientationVectorDegrees, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_EulerAngles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_EulerAngles, roll_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_EulerAngles, pitch_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_EulerAngles, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_AxisAngles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_AxisAngles, theta_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_AxisAngles, x_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_AxisAngles, y_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_AxisAngles, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_Quaternion, w_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation_Quaternion, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Orientation, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteConfig, name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteConfig, address_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteConfig, frame_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteConfig, auth_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteConfig, managed_by_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteConfig, insecure_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteConfig, connection_check_interval_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteConfig, reconnect_interval_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteConfig, service_configs_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteConfig, secret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteAuth_Credentials, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteAuth_Credentials, type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteAuth_Credentials, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteAuth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteAuth, credentials_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::RemoteAuth, entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AgentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AgentInfo, host_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AgentInfo, os_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AgentInfo, ips_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AgentInfo, version_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::AgentInfo, git_revision_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ConfigRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ConfigRequest, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ConfigRequest, agent_info_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ConfigResponse, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CertificateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CertificateRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CertificateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CertificateResponse, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CertificateResponse, tls_certificate_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CertificateResponse, tls_private_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::LogRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::LogRequest, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::LogRequest, logs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::LogResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::NeedsRestartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::NeedsRestartRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::NeedsRestartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::NeedsRestartResponse, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::NeedsRestartResponse, must_restart_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::NeedsRestartResponse, restart_check_interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ModuleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ModuleConfig, name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::ModuleConfig, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::PackageConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::PackageConfig, name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::PackageConfig, package_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::PackageConfig, version_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, -1, sizeof(::viam::app::v1::RobotConfig)},
  { 28, -1, -1, sizeof(::viam::app::v1::LocationSecret)},
  { 36, -1, -1, sizeof(::viam::app::v1::CloudConfig)},
  { 51, -1, -1, sizeof(::viam::app::v1::ComponentConfig)},
  { 66, -1, -1, sizeof(::viam::app::v1::ResourceLevelServiceConfig)},
  { 74, -1, -1, sizeof(::viam::app::v1::ProcessConfig)},
  { 88, -1, -1, sizeof(::viam::app::v1::ServiceConfig)},
  { 100, -1, -1, sizeof(::viam::app::v1::NetworkConfig)},
  { 110, 119, -1, sizeof(::viam::app::v1::AuthConfig)},
  { 122, -1, -1, sizeof(::viam::app::v1::JWKSFile)},
  { 129, -1, -1, sizeof(::viam::app::v1::AuthHandlerWebOauthConfig)},
  { 137, -1, -1, sizeof(::viam::app::v1::ExternalAuthConfig)},
  { 144, 153, -1, sizeof(::viam::app::v1::AuthHandlerConfig)},
  { 156, -1, -1, sizeof(::viam::app::v1::Frame)},
  { 166, -1, -1, sizeof(::viam::app::v1::Translation)},
  { 175, -1, -1, sizeof(::viam::app::v1::Orientation_NoOrientation)},
  { 181, -1, -1, sizeof(::viam::app::v1::Orientation_OrientationVectorRadians)},
  { 191, -1, -1, sizeof(::viam::app::v1::Orientation_OrientationVectorDegrees)},
  { 201, -1, -1, sizeof(::viam::app::v1::Orientation_EulerAngles)},
  { 210, -1, -1, sizeof(::viam::app::v1::Orientation_AxisAngles)},
  { 220, -1, -1, sizeof(::viam::app::v1::Orientation_Quaternion)},
  { 230, -1, -1, sizeof(::viam::app::v1::Orientation)},
  { 243, -1, -1, sizeof(::viam::app::v1::RemoteConfig)},
  { 259, -1, -1, sizeof(::viam::app::v1::RemoteAuth_Credentials)},
  { 267, -1, -1, sizeof(::viam::app::v1::RemoteAuth)},
  { 275, -1, -1, sizeof(::viam::app::v1::AgentInfo)},
  { 286, 294, -1, sizeof(::viam::app::v1::ConfigRequest)},
  { 296, -1, -1, sizeof(::viam::app::v1::ConfigResponse)},
  { 303, -1, -1, sizeof(::viam::app::v1::CertificateRequest)},
  { 310, -1, -1, sizeof(::viam::app::v1::CertificateResponse)},
  { 319, -1, -1, sizeof(::viam::app::v1::LogRequest)},
  { 327, -1, -1, sizeof(::viam::app::v1::LogResponse)},
  { 333, -1, -1, sizeof(::viam::app::v1::NeedsRestartRequest)},
  { 340, -1, -1, sizeof(::viam::app::v1::NeedsRestartResponse)},
  { 349, -1, -1, sizeof(::viam::app::v1::ModuleConfig)},
  { 357, -1, -1, sizeof(::viam::app::v1::PackageConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::app::v1::_RobotConfig_default_instance_._instance,
  &::viam::app::v1::_LocationSecret_default_instance_._instance,
  &::viam::app::v1::_CloudConfig_default_instance_._instance,
  &::viam::app::v1::_ComponentConfig_default_instance_._instance,
  &::viam::app::v1::_ResourceLevelServiceConfig_default_instance_._instance,
  &::viam::app::v1::_ProcessConfig_default_instance_._instance,
  &::viam::app::v1::_ServiceConfig_default_instance_._instance,
  &::viam::app::v1::_NetworkConfig_default_instance_._instance,
  &::viam::app::v1::_AuthConfig_default_instance_._instance,
  &::viam::app::v1::_JWKSFile_default_instance_._instance,
  &::viam::app::v1::_AuthHandlerWebOauthConfig_default_instance_._instance,
  &::viam::app::v1::_ExternalAuthConfig_default_instance_._instance,
  &::viam::app::v1::_AuthHandlerConfig_default_instance_._instance,
  &::viam::app::v1::_Frame_default_instance_._instance,
  &::viam::app::v1::_Translation_default_instance_._instance,
  &::viam::app::v1::_Orientation_NoOrientation_default_instance_._instance,
  &::viam::app::v1::_Orientation_OrientationVectorRadians_default_instance_._instance,
  &::viam::app::v1::_Orientation_OrientationVectorDegrees_default_instance_._instance,
  &::viam::app::v1::_Orientation_EulerAngles_default_instance_._instance,
  &::viam::app::v1::_Orientation_AxisAngles_default_instance_._instance,
  &::viam::app::v1::_Orientation_Quaternion_default_instance_._instance,
  &::viam::app::v1::_Orientation_default_instance_._instance,
  &::viam::app::v1::_RemoteConfig_default_instance_._instance,
  &::viam::app::v1::_RemoteAuth_Credentials_default_instance_._instance,
  &::viam::app::v1::_RemoteAuth_default_instance_._instance,
  &::viam::app::v1::_AgentInfo_default_instance_._instance,
  &::viam::app::v1::_ConfigRequest_default_instance_._instance,
  &::viam::app::v1::_ConfigResponse_default_instance_._instance,
  &::viam::app::v1::_CertificateRequest_default_instance_._instance,
  &::viam::app::v1::_CertificateResponse_default_instance_._instance,
  &::viam::app::v1::_LogRequest_default_instance_._instance,
  &::viam::app::v1::_LogResponse_default_instance_._instance,
  &::viam::app::v1::_NeedsRestartRequest_default_instance_._instance,
  &::viam::app::v1::_NeedsRestartResponse_default_instance_._instance,
  &::viam::app::v1::_ModuleConfig_default_instance_._instance,
  &::viam::app::v1::_PackageConfig_default_instance_._instance,
};

const char descriptor_table_protodef_app_2fv1_2frobot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022app/v1/robot.proto\022\013viam.app.v1\032\020app/v"
  "1/app.proto\032\026common/v1/common.proto\032\036goo"
  "gle/protobuf/duration.proto\032\034google/prot"
  "obuf/struct.proto\032\026tagger/v1/tagger.prot"
  "o\"\211\005\n\013RobotConfig\022.\n\005cloud\030\001 \001(\0132\030.viam."
  "app.v1.CloudConfigR\005cloud\0223\n\007remotes\030\002 \003"
  "(\0132\031.viam.app.v1.RemoteConfigR\007remotes\022<"
  "\n\ncomponents\030\003 \003(\0132\034.viam.app.v1.Compone"
  "ntConfigR\ncomponents\0228\n\tprocesses\030\004 \003(\0132"
  "\032.viam.app.v1.ProcessConfigR\tprocesses\0226"
  "\n\010services\030\005 \003(\0132\032.viam.app.v1.ServiceCo"
  "nfigR\010services\0229\n\007network\030\006 \001(\0132\032.viam.a"
  "pp.v1.NetworkConfigH\000R\007network\210\001\001\0220\n\004aut"
  "h\030\007 \001(\0132\027.viam.app.v1.AuthConfigH\001R\004auth"
  "\210\001\001\022\031\n\005debug\030\010 \001(\010H\002R\005debug\210\001\001\0223\n\007module"
  "s\030\t \003(\0132\031.viam.app.v1.ModuleConfigR\007modu"
  "les\0227\n\025disable_partial_start\030\n \001(\010H\003R\023di"
  "sablePartialStart\210\001\001\0226\n\010packages\030\013 \003(\0132\032"
  ".viam.app.v1.PackageConfigR\010packagesB\n\n\010"
  "_networkB\007\n\005_authB\010\n\006_debugB\030\n\026_disable_"
  "partial_start\"8\n\016LocationSecret\022\016\n\002id\030\001 "
  "\001(\tR\002id\022\026\n\006secret\030\002 \001(\tR\006secret\"\330\002\n\013Clou"
  "dConfig\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004fqdn\030\002 \001(\tR\004f"
  "qdn\022\035\n\nlocal_fqdn\030\003 \001(\tR\tlocalFqdn\022\035\n\nma"
  "naged_by\030\004 \001(\tR\tmanagedBy\022+\n\021signaling_a"
  "ddress\030\005 \001(\tR\020signalingAddress\022-\n\022signal"
  "ing_insecure\030\006 \001(\010R\021signalingInsecure\022+\n"
  "\017location_secret\030\007 \001(\tB\002\030\001R\016locationSecr"
  "et\022\026\n\006secret\030\010 \001(\tR\006secret\022F\n\020location_s"
  "ecrets\030\t \003(\0132\033.viam.app.v1.LocationSecre"
  "tR\017locationSecrets\"\357\002\n\017ComponentConfig\022\022"
  "\n\004name\030\001 \001(\tR\004name\022\034\n\tnamespace\030\002 \001(\tR\tn"
  "amespace\022\022\n\004type\030\003 \001(\tR\004type\022\024\n\005model\030\004 "
  "\001(\tR\005model\022(\n\005frame\030\005 \001(\0132\022.viam.app.v1."
  "FrameR\005frame\022\035\n\ndepends_on\030\006 \003(\tR\tdepend"
  "sOn\022l\n\017service_configs\030\007 \003(\0132\'.viam.app."
  "v1.ResourceLevelServiceConfigB\032\232\204\236\003\025json"
  ":\"service_config\"R\016serviceConfigs\0227\n\natt"
  "ributes\030\010 \001(\0132\027.google.protobuf.StructR\n"
  "attributes\022\020\n\003api\030\t \001(\tR\003api\"i\n\032Resource"
  "LevelServiceConfig\022\022\n\004type\030\001 \001(\tR\004type\0227"
  "\n\nattributes\030\002 \001(\0132\027.google.protobuf.Str"
  "uctR\nattributes\"\345\001\n\rProcessConfig\022\016\n\002id\030"
  "\001 \001(\tR\002id\022\022\n\004name\030\002 \001(\tR\004name\022\022\n\004args\030\003 "
  "\003(\tR\004args\022\020\n\003cwd\030\004 \001(\tR\003cwd\022\031\n\010one_shot\030"
  "\005 \001(\010R\007oneShot\022\020\n\003log\030\006 \001(\010R\003log\022\037\n\013stop"
  "_signal\030\007 \001(\005R\nstopSignal\022<\n\014stop_timeou"
  "t\030\010 \001(\0132\031.google.protobuf.DurationR\013stop"
  "Timeout\"\303\001\n\rServiceConfig\022\022\n\004name\030\001 \001(\tR"
  "\004name\022\034\n\tnamespace\030\002 \001(\tR\tnamespace\022\022\n\004t"
  "ype\030\003 \001(\tR\004type\0227\n\nattributes\030\004 \001(\0132\027.go"
  "ogle.protobuf.StructR\nattributes\022\035\n\ndepe"
  "nds_on\030\005 \003(\tR\tdependsOn\022\024\n\005model\030\006 \001(\tR\005"
  "model\"\214\001\n\rNetworkConfig\022\022\n\004fqdn\030\001 \001(\tR\004f"
  "qdn\022!\n\014bind_address\030\002 \001(\tR\013bindAddress\022\""
  "\n\rtls_cert_file\030\003 \001(\tR\013tlsCertFile\022 \n\014tl"
  "s_key_file\030\004 \001(\tR\ntlsKeyFile\"\345\001\n\nAuthCon"
  "fig\022:\n\010handlers\030\001 \003(\0132\036.viam.app.v1.Auth"
  "HandlerConfigR\010handlers\022*\n\021tls_auth_enti"
  "ties\030\002 \003(\tR\017tlsAuthEntities\022V\n\024external_"
  "auth_config\030\003 \001(\0132\037.viam.app.v1.External"
  "AuthConfigH\000R\022externalAuthConfig\210\001\001B\027\n\025_"
  "external_auth_config\"7\n\010JWKSFile\022+\n\004json"
  "\030\001 \001(\0132\027.google.protobuf.StructR\004json\"s\n"
  "\031AuthHandlerWebOauthConfig\022+\n\021allowed_au"
  "diences\030\001 \003(\tR\020allowedAudiences\022)\n\004jwks\030"
  "\002 \001(\0132\025.viam.app.v1.JWKSFileR\004jwks\"\?\n\022Ex"
  "ternalAuthConfig\022)\n\004jwks\030\001 \001(\0132\025.viam.ap"
  "p.v1.JWKSFileR\004jwks\"\342\001\n\021AuthHandlerConfi"
  "g\0220\n\004type\030\001 \001(\0162\034.viam.app.v1.Credential"
  "sTypeR\004type\022/\n\006config\030\005 \001(\0132\027.google.pro"
  "tobuf.StructR\006config\022U\n\020web_oauth_config"
  "\030\006 \001(\0132&.viam.app.v1.AuthHandlerWebOauth"
  "ConfigH\000R\016webOauthConfig\210\001\001B\023\n\021_web_oaut"
  "h_config\"\315\001\n\005Frame\022\026\n\006parent\030\001 \001(\tR\006pare"
  "nt\022:\n\013translation\030\002 \001(\0132\030.viam.app.v1.Tr"
  "anslationR\013translation\022:\n\013orientation\030\003 "
  "\001(\0132\030.viam.app.v1.OrientationR\013orientati"
  "on\0224\n\010geometry\030\004 \001(\0132\030.viam.common.v1.Ge"
  "ometryR\010geometry\"7\n\013Translation\022\014\n\001x\030\001 \001"
  "(\001R\001x\022\014\n\001y\030\002 \001(\001R\001y\022\014\n\001z\030\003 \001(\001R\001z\"\320\007\n\013Or"
  "ientation\022O\n\016no_orientation\030\001 \001(\0132&.viam"
  ".app.v1.Orientation.NoOrientationH\000R\rnoO"
  "rientation\022Z\n\016vector_radians\030\002 \001(\01321.via"
  "m.app.v1.Orientation.OrientationVectorRa"
  "diansH\000R\rvectorRadians\022Z\n\016vector_degrees"
  "\030\003 \001(\01321.viam.app.v1.Orientation.Orienta"
  "tionVectorDegreesH\000R\rvectorDegrees\022I\n\014eu"
  "ler_angles\030\004 \001(\0132$.viam.app.v1.Orientati"
  "on.EulerAnglesH\000R\013eulerAngles\022F\n\013axis_an"
  "gles\030\005 \001(\0132#.viam.app.v1.Orientation.Axi"
  "sAnglesH\000R\naxisAngles\022E\n\nquaternion\030\006 \001("
  "\0132#.viam.app.v1.Orientation.QuaternionH\000"
  "R\nquaternion\032\017\n\rNoOrientation\032j\n\030Orienta"
  "tionVectorRadians\022$\n\005theta\030\001 \001(\001B\016\232\204\236\003\tj"
  "son:\"th\"R\005theta\022\014\n\001x\030\002 \001(\001R\001x\022\014\n\001y\030\003 \001(\001"
  "R\001y\022\014\n\001z\030\004 \001(\001R\001z\032j\n\030OrientationVectorDe"
  "grees\022$\n\005theta\030\001 \001(\001B\016\232\204\236\003\tjson:\"th\"R\005th"
  "eta\022\014\n\001x\030\002 \001(\001R\001x\022\014\n\001y\030\003 \001(\001R\001y\022\014\n\001z\030\004 \001"
  "(\001R\001z\032I\n\013EulerAngles\022\022\n\004roll\030\001 \001(\001R\004roll"
  "\022\024\n\005pitch\030\002 \001(\001R\005pitch\022\020\n\003yaw\030\003 \001(\001R\003yaw"
  "\032\\\n\nAxisAngles\022$\n\005theta\030\001 \001(\001B\016\232\204\236\003\tjson"
  ":\"th\"R\005theta\022\014\n\001x\030\002 \001(\001R\001x\022\014\n\001y\030\003 \001(\001R\001y"
  "\022\014\n\001z\030\004 \001(\001R\001z\032D\n\nQuaternion\022\014\n\001w\030\001 \001(\001R"
  "\001w\022\014\n\001x\030\002 \001(\001R\001x\022\014\n\001y\030\003 \001(\001R\001y\022\014\n\001z\030\004 \001("
  "\001R\001zB\006\n\004type\"\365\003\n\014RemoteConfig\022\022\n\004name\030\001 "
  "\001(\tR\004name\022\030\n\007address\030\002 \001(\tR\007address\022(\n\005f"
  "rame\030\003 \001(\0132\022.viam.app.v1.FrameR\005frame\022+\n"
  "\004auth\030\004 \001(\0132\027.viam.app.v1.RemoteAuthR\004au"
  "th\022\035\n\nmanaged_by\030\005 \001(\tR\tmanagedBy\022\032\n\010ins"
  "ecure\030\006 \001(\010R\010insecure\022U\n\031connection_chec"
  "k_interval\030\007 \001(\0132\031.google.protobuf.Durat"
  "ionR\027connectionCheckInterval\022H\n\022reconnec"
  "t_interval\030\010 \001(\0132\031.google.protobuf.Durat"
  "ionR\021reconnectInterval\022l\n\017service_config"
  "s\030\t \003(\0132\'.viam.app.v1.ResourceLevelServi"
  "ceConfigB\032\232\204\236\003\025json:\"service_config\"R\016se"
  "rviceConfigs\022\026\n\006secret\030\n \001(\tR\006secret\"\306\001\n"
  "\nRemoteAuth\022E\n\013credentials\030\001 \001(\0132#.viam."
  "app.v1.RemoteAuth.CredentialsR\013credentia"
  "ls\022\026\n\006entity\030\002 \001(\tR\006entity\032Y\n\013Credential"
  "s\0220\n\004type\030\001 \001(\0162\034.viam.app.v1.Credential"
  "sTypeR\004type\022\030\n\007payload\030\002 \001(\tR\007payload\"~\n"
  "\tAgentInfo\022\022\n\004host\030\001 \001(\tR\004host\022\016\n\002os\030\002 \001"
  "(\tR\002os\022\020\n\003ips\030\003 \003(\tR\003ips\022\030\n\007version\030\004 \001("
  "\tR\007version\022!\n\014git_revision\030\005 \001(\tR\013gitRev"
  "ision\"j\n\rConfigRequest\022\016\n\002id\030\001 \001(\tR\002id\022:"
  "\n\nagent_info\030\002 \001(\0132\026.viam.app.v1.AgentIn"
  "foH\000R\tagentInfo\210\001\001B\r\n\013_agent_info\"B\n\016Con"
  "figResponse\0220\n\006config\030\001 \001(\0132\030.viam.app.v"
  "1.RobotConfigR\006config\"$\n\022CertificateRequ"
  "est\022\016\n\002id\030\001 \001(\tR\002id\"v\n\023CertificateRespon"
  "se\022\016\n\002id\030\001 \001(\tR\002id\022\'\n\017tls_certificate\030\002 "
  "\001(\tR\016tlsCertificate\022&\n\017tls_private_key\030\003"
  " \001(\tR\rtlsPrivateKey\"G\n\nLogRequest\022\016\n\002id\030"
  "\001 \001(\tR\002id\022)\n\004logs\030\002 \003(\0132\025.viam.app.v1.Lo"
  "gEntryR\004logs\"\r\n\013LogResponse\"%\n\023NeedsRest"
  "artRequest\022\016\n\002id\030\001 \001(\tR\002id\"\232\001\n\024NeedsRest"
  "artResponse\022\016\n\002id\030\001 \001(\tR\002id\022!\n\014must_rest"
  "art\030\002 \001(\010R\013mustRestart\022O\n\026restart_check_"
  "interval\030\003 \001(\0132\031.google.protobuf.Duratio"
  "nR\024restartCheckInterval\"6\n\014ModuleConfig\022"
  "\022\n\004name\030\001 \001(\tR\004name\022\022\n\004path\030\002 \001(\tR\004path\""
  "W\n\rPackageConfig\022\022\n\004name\030\001 \001(\tR\004name\022\030\n\007"
  "package\030\002 \001(\tR\007package\022\030\n\007version\030\003 \001(\tR"
  "\007version*\337\001\n\017CredentialsType\022 \n\034CREDENTI"
  "ALS_TYPE_UNSPECIFIED\020\000\022\035\n\031CREDENTIALS_TY"
  "PE_INTERNAL\020\001\022\034\n\030CREDENTIALS_TYPE_API_KE"
  "Y\020\002\022!\n\035CREDENTIALS_TYPE_ROBOT_SECRET\020\003\022*"
  "\n&CREDENTIALS_TYPE_ROBOT_LOCATION_SECRET"
  "\020\004\022\036\n\032CREDENTIALS_TYPE_WEB_OAUTH\020\0052\262\002\n\014R"
  "obotService\022A\n\006Config\022\032.viam.app.v1.Conf"
  "igRequest\032\033.viam.app.v1.ConfigResponse\022P"
  "\n\013Certificate\022\037.viam.app.v1.CertificateR"
  "equest\032 .viam.app.v1.CertificateResponse"
  "\0228\n\003Log\022\027.viam.app.v1.LogRequest\032\030.viam."
  "app.v1.LogResponse\022S\n\014NeedsRestart\022 .via"
  "m.app.v1.NeedsRestartRequest\032!.viam.app."
  "v1.NeedsRestartResponseB\030Z\026go.viam.com/a"
  "pi/app/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_app_2fv1_2frobot_2eproto_deps[5] = {
  &::descriptor_table_app_2fv1_2fapp_2eproto,
  &::descriptor_table_common_2fv1_2fcommon_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_tagger_2fv1_2ftagger_2eproto,
};
static ::_pbi::once_flag descriptor_table_app_2fv1_2frobot_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fv1_2frobot_2eproto = {
    false, false, 6377, descriptor_table_protodef_app_2fv1_2frobot_2eproto,
    "app/v1/robot.proto",
    &descriptor_table_app_2fv1_2frobot_2eproto_once, descriptor_table_app_2fv1_2frobot_2eproto_deps, 5, 36,
    schemas, file_default_instances, TableStruct_app_2fv1_2frobot_2eproto::offsets,
    file_level_metadata_app_2fv1_2frobot_2eproto, file_level_enum_descriptors_app_2fv1_2frobot_2eproto,
    file_level_service_descriptors_app_2fv1_2frobot_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fv1_2frobot_2eproto_getter() {
  return &descriptor_table_app_2fv1_2frobot_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fv1_2frobot_2eproto(&descriptor_table_app_2fv1_2frobot_2eproto);
namespace viam {
namespace app {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CredentialsType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_app_2fv1_2frobot_2eproto);
  return file_level_enum_descriptors_app_2fv1_2frobot_2eproto[0];
}
bool CredentialsType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RobotConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotConfig>()._has_bits_);
  static const ::viam::app::v1::CloudConfig& cloud(const RobotConfig* msg);
  static const ::viam::app::v1::NetworkConfig& network(const RobotConfig* msg);
  static void set_has_network(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::viam::app::v1::AuthConfig& auth(const RobotConfig* msg);
  static void set_has_auth(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_debug(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_disable_partial_start(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::viam::app::v1::CloudConfig&
RobotConfig::_Internal::cloud(const RobotConfig* msg) {
  return *msg->cloud_;
}
const ::viam::app::v1::NetworkConfig&
RobotConfig::_Internal::network(const RobotConfig* msg) {
  return *msg->network_;
}
const ::viam::app::v1::AuthConfig&
RobotConfig::_Internal::auth(const RobotConfig* msg) {
  return *msg->auth_;
}
RobotConfig::RobotConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  remotes_(arena),
  components_(arena),
  processes_(arena),
  services_(arena),
  modules_(arena),
  packages_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.RobotConfig)
}
RobotConfig::RobotConfig(const RobotConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      remotes_(from.remotes_),
      components_(from.components_),
      processes_(from.processes_),
      services_(from.services_),
      modules_(from.modules_),
      packages_(from.packages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cloud()) {
    cloud_ = new ::viam::app::v1::CloudConfig(*from.cloud_);
  } else {
    cloud_ = nullptr;
  }
  if (from._internal_has_network()) {
    network_ = new ::viam::app::v1::NetworkConfig(*from.network_);
  } else {
    network_ = nullptr;
  }
  if (from._internal_has_auth()) {
    auth_ = new ::viam::app::v1::AuthConfig(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  ::memcpy(&debug_, &from.debug_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_partial_start_) -
    reinterpret_cast<char*>(&debug_)) + sizeof(disable_partial_start_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.RobotConfig)
}

inline void RobotConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cloud_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disable_partial_start_) -
    reinterpret_cast<char*>(&cloud_)) + sizeof(disable_partial_start_));
}

RobotConfig::~RobotConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.RobotConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cloud_;
  if (this != internal_default_instance()) delete network_;
  if (this != internal_default_instance()) delete auth_;
}

void RobotConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RobotConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.RobotConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remotes_.Clear();
  components_.Clear();
  processes_.Clear();
  services_.Clear();
  modules_.Clear();
  packages_.Clear();
  if (GetArenaForAllocation() == nullptr && cloud_ != nullptr) {
    delete cloud_;
  }
  cloud_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(network_ != nullptr);
      network_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(auth_ != nullptr);
      auth_->Clear();
    }
  }
  ::memset(&debug_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_partial_start_) -
      reinterpret_cast<char*>(&debug_)) + sizeof(disable_partial_start_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.v1.CloudConfig cloud = 1 [json_name = "cloud"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloud(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.RemoteConfig remotes = 2 [json_name = "remotes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remotes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.ComponentConfig components = 3 [json_name = "components"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.ProcessConfig processes = 4 [json_name = "processes"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_processes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.ServiceConfig services = 5 [json_name = "services"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_services(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .viam.app.v1.NetworkConfig network = 6 [json_name = "network"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_network(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .viam.app.v1.AuthConfig auth = 7 [json_name = "auth"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool debug = 8 [json_name = "debug"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_debug(&has_bits);
          debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.ModuleConfig modules = 9 [json_name = "modules"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool disable_partial_start = 10 [json_name = "disablePartialStart"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_disable_partial_start(&has_bits);
          disable_partial_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.PackageConfig packages = 11 [json_name = "packages"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.RobotConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.v1.CloudConfig cloud = 1 [json_name = "cloud"];
  if (this->_internal_has_cloud()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cloud(this),
        _Internal::cloud(this).GetCachedSize(), target, stream);
  }

  // repeated .viam.app.v1.RemoteConfig remotes = 2 [json_name = "remotes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remotes_size()); i < n; i++) {
    const auto& repfield = this->_internal_remotes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.app.v1.ComponentConfig components = 3 [json_name = "components"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_components_size()); i < n; i++) {
    const auto& repfield = this->_internal_components(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.app.v1.ProcessConfig processes = 4 [json_name = "processes"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_processes_size()); i < n; i++) {
    const auto& repfield = this->_internal_processes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.app.v1.ServiceConfig services = 5 [json_name = "services"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_services_size()); i < n; i++) {
    const auto& repfield = this->_internal_services(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .viam.app.v1.NetworkConfig network = 6 [json_name = "network"];
  if (_internal_has_network()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::network(this),
        _Internal::network(this).GetCachedSize(), target, stream);
  }

  // optional .viam.app.v1.AuthConfig auth = 7 [json_name = "auth"];
  if (_internal_has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::auth(this),
        _Internal::auth(this).GetCachedSize(), target, stream);
  }

  // optional bool debug = 8 [json_name = "debug"];
  if (_internal_has_debug()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_debug(), target);
  }

  // repeated .viam.app.v1.ModuleConfig modules = 9 [json_name = "modules"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_modules_size()); i < n; i++) {
    const auto& repfield = this->_internal_modules(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool disable_partial_start = 10 [json_name = "disablePartialStart"];
  if (_internal_has_disable_partial_start()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_disable_partial_start(), target);
  }

  // repeated .viam.app.v1.PackageConfig packages = 11 [json_name = "packages"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_packages_size()); i < n; i++) {
    const auto& repfield = this->_internal_packages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.RobotConfig)
  return target;
}

size_t RobotConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.RobotConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.v1.RemoteConfig remotes = 2 [json_name = "remotes"];
  total_size += 1UL * this->_internal_remotes_size();
  for (const auto& msg : this->remotes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.app.v1.ComponentConfig components = 3 [json_name = "components"];
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.app.v1.ProcessConfig processes = 4 [json_name = "processes"];
  total_size += 1UL * this->_internal_processes_size();
  for (const auto& msg : this->processes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.app.v1.ServiceConfig services = 5 [json_name = "services"];
  total_size += 1UL * this->_internal_services_size();
  for (const auto& msg : this->services_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.app.v1.ModuleConfig modules = 9 [json_name = "modules"];
  total_size += 1UL * this->_internal_modules_size();
  for (const auto& msg : this->modules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.app.v1.PackageConfig packages = 11 [json_name = "packages"];
  total_size += 1UL * this->_internal_packages_size();
  for (const auto& msg : this->packages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .viam.app.v1.CloudConfig cloud = 1 [json_name = "cloud"];
  if (this->_internal_has_cloud()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cloud_);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .viam.app.v1.NetworkConfig network = 6 [json_name = "network"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *network_);
    }

    // optional .viam.app.v1.AuthConfig auth = 7 [json_name = "auth"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *auth_);
    }

    // optional bool debug = 8 [json_name = "debug"];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool disable_partial_start = 10 [json_name = "disablePartialStart"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RobotConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotConfig::GetClassData() const { return &_class_data_; }

void RobotConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RobotConfig *>(to)->MergeFrom(
      static_cast<const RobotConfig &>(from));
}


void RobotConfig::MergeFrom(const RobotConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.RobotConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  remotes_.MergeFrom(from.remotes_);
  components_.MergeFrom(from.components_);
  processes_.MergeFrom(from.processes_);
  services_.MergeFrom(from.services_);
  modules_.MergeFrom(from.modules_);
  packages_.MergeFrom(from.packages_);
  if (from._internal_has_cloud()) {
    _internal_mutable_cloud()->::viam::app::v1::CloudConfig::MergeFrom(from._internal_cloud());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_network()->::viam::app::v1::NetworkConfig::MergeFrom(from._internal_network());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_auth()->::viam::app::v1::AuthConfig::MergeFrom(from._internal_auth());
    }
    if (cached_has_bits & 0x00000004u) {
      debug_ = from.debug_;
    }
    if (cached_has_bits & 0x00000008u) {
      disable_partial_start_ = from.disable_partial_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotConfig::CopyFrom(const RobotConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.RobotConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotConfig::IsInitialized() const {
  return true;
}

void RobotConfig::InternalSwap(RobotConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  remotes_.InternalSwap(&other->remotes_);
  components_.InternalSwap(&other->components_);
  processes_.InternalSwap(&other->processes_);
  services_.InternalSwap(&other->services_);
  modules_.InternalSwap(&other->modules_);
  packages_.InternalSwap(&other->packages_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotConfig, disable_partial_start_)
      + sizeof(RobotConfig::disable_partial_start_)
      - PROTOBUF_FIELD_OFFSET(RobotConfig, cloud_)>(
          reinterpret_cast<char*>(&cloud_),
          reinterpret_cast<char*>(&other->cloud_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[0]);
}

// ===================================================================

class LocationSecret::_Internal {
 public:
};

LocationSecret::LocationSecret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.LocationSecret)
}
LocationSecret::LocationSecret(const LocationSecret& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    secret_.Set(from._internal_secret(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.LocationSecret)
}

inline void LocationSecret::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secret_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocationSecret::~LocationSecret() {
  // @@protoc_insertion_point(destructor:viam.app.v1.LocationSecret)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocationSecret::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  secret_.Destroy();
}

void LocationSecret::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocationSecret::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.LocationSecret)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  secret_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationSecret::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.LocationSecret.id"));
        } else
          goto handle_unusual;
        continue;
      // string secret = 2 [json_name = "secret"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.LocationSecret.secret"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocationSecret::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.LocationSecret)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.LocationSecret.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string secret = 2 [json_name = "secret"];
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.LocationSecret.secret");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.LocationSecret)
  return target;
}

size_t LocationSecret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.LocationSecret)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string secret = 2 [json_name = "secret"];
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocationSecret::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocationSecret::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocationSecret::GetClassData() const { return &_class_data_; }

void LocationSecret::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocationSecret *>(to)->MergeFrom(
      static_cast<const LocationSecret &>(from));
}


void LocationSecret::MergeFrom(const LocationSecret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.LocationSecret)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_secret().empty()) {
    _internal_set_secret(from._internal_secret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocationSecret::CopyFrom(const LocationSecret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.LocationSecret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationSecret::IsInitialized() const {
  return true;
}

void LocationSecret::InternalSwap(LocationSecret* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secret_, lhs_arena,
      &other->secret_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationSecret::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[1]);
}

// ===================================================================

class CloudConfig::_Internal {
 public:
};

CloudConfig::CloudConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  location_secrets_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.CloudConfig)
}
CloudConfig::CloudConfig(const CloudConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      location_secrets_(from.location_secrets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  fqdn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fqdn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fqdn().empty()) {
    fqdn_.Set(from._internal_fqdn(), 
      GetArenaForAllocation());
  }
  local_fqdn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    local_fqdn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_fqdn().empty()) {
    local_fqdn_.Set(from._internal_local_fqdn(), 
      GetArenaForAllocation());
  }
  managed_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    managed_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_managed_by().empty()) {
    managed_by_.Set(from._internal_managed_by(), 
      GetArenaForAllocation());
  }
  signaling_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    signaling_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signaling_address().empty()) {
    signaling_address_.Set(from._internal_signaling_address(), 
      GetArenaForAllocation());
  }
  location_secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    location_secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location_secret().empty()) {
    location_secret_.Set(from._internal_location_secret(), 
      GetArenaForAllocation());
  }
  secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    secret_.Set(from._internal_secret(), 
      GetArenaForAllocation());
  }
  signaling_insecure_ = from.signaling_insecure_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.CloudConfig)
}

inline void CloudConfig::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
fqdn_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fqdn_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
local_fqdn_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  local_fqdn_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
managed_by_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  managed_by_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signaling_address_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  signaling_address_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
location_secret_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  location_secret_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secret_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
signaling_insecure_ = false;
}

CloudConfig::~CloudConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.CloudConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloudConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  fqdn_.Destroy();
  local_fqdn_.Destroy();
  managed_by_.Destroy();
  signaling_address_.Destroy();
  location_secret_.Destroy();
  secret_.Destroy();
}

void CloudConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloudConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.CloudConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  location_secrets_.Clear();
  id_.ClearToEmpty();
  fqdn_.ClearToEmpty();
  local_fqdn_.ClearToEmpty();
  managed_by_.ClearToEmpty();
  signaling_address_.ClearToEmpty();
  location_secret_.ClearToEmpty();
  secret_.ClearToEmpty();
  signaling_insecure_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloudConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.CloudConfig.id"));
        } else
          goto handle_unusual;
        continue;
      // string fqdn = 2 [json_name = "fqdn"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_fqdn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.CloudConfig.fqdn"));
        } else
          goto handle_unusual;
        continue;
      // string local_fqdn = 3 [json_name = "localFqdn"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_local_fqdn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.CloudConfig.local_fqdn"));
        } else
          goto handle_unusual;
        continue;
      // string managed_by = 4 [json_name = "managedBy"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_managed_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.CloudConfig.managed_by"));
        } else
          goto handle_unusual;
        continue;
      // string signaling_address = 5 [json_name = "signalingAddress"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_signaling_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.CloudConfig.signaling_address"));
        } else
          goto handle_unusual;
        continue;
      // bool signaling_insecure = 6 [json_name = "signalingInsecure"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          signaling_insecure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string location_secret = 7 [json_name = "locationSecret", deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_location_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.CloudConfig.location_secret"));
        } else
          goto handle_unusual;
        continue;
      // string secret = 8 [json_name = "secret"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.CloudConfig.secret"));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.LocationSecret location_secrets = 9 [json_name = "locationSecrets"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_location_secrets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloudConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.CloudConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.CloudConfig.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string fqdn = 2 [json_name = "fqdn"];
  if (!this->_internal_fqdn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fqdn().data(), static_cast<int>(this->_internal_fqdn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.CloudConfig.fqdn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_fqdn(), target);
  }

  // string local_fqdn = 3 [json_name = "localFqdn"];
  if (!this->_internal_local_fqdn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_fqdn().data(), static_cast<int>(this->_internal_local_fqdn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.CloudConfig.local_fqdn");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_local_fqdn(), target);
  }

  // string managed_by = 4 [json_name = "managedBy"];
  if (!this->_internal_managed_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_managed_by().data(), static_cast<int>(this->_internal_managed_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.CloudConfig.managed_by");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_managed_by(), target);
  }

  // string signaling_address = 5 [json_name = "signalingAddress"];
  if (!this->_internal_signaling_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signaling_address().data(), static_cast<int>(this->_internal_signaling_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.CloudConfig.signaling_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_signaling_address(), target);
  }

  // bool signaling_insecure = 6 [json_name = "signalingInsecure"];
  if (this->_internal_signaling_insecure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_signaling_insecure(), target);
  }

  // string location_secret = 7 [json_name = "locationSecret", deprecated = true];
  if (!this->_internal_location_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location_secret().data(), static_cast<int>(this->_internal_location_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.CloudConfig.location_secret");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_location_secret(), target);
  }

  // string secret = 8 [json_name = "secret"];
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.CloudConfig.secret");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_secret(), target);
  }

  // repeated .viam.app.v1.LocationSecret location_secrets = 9 [json_name = "locationSecrets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_location_secrets_size()); i < n; i++) {
    const auto& repfield = this->_internal_location_secrets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.CloudConfig)
  return target;
}

size_t CloudConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.CloudConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.v1.LocationSecret location_secrets = 9 [json_name = "locationSecrets"];
  total_size += 1UL * this->_internal_location_secrets_size();
  for (const auto& msg : this->location_secrets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string fqdn = 2 [json_name = "fqdn"];
  if (!this->_internal_fqdn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fqdn());
  }

  // string local_fqdn = 3 [json_name = "localFqdn"];
  if (!this->_internal_local_fqdn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_fqdn());
  }

  // string managed_by = 4 [json_name = "managedBy"];
  if (!this->_internal_managed_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_managed_by());
  }

  // string signaling_address = 5 [json_name = "signalingAddress"];
  if (!this->_internal_signaling_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signaling_address());
  }

  // string location_secret = 7 [json_name = "locationSecret", deprecated = true];
  if (!this->_internal_location_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location_secret());
  }

  // string secret = 8 [json_name = "secret"];
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // bool signaling_insecure = 6 [json_name = "signalingInsecure"];
  if (this->_internal_signaling_insecure() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloudConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloudConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloudConfig::GetClassData() const { return &_class_data_; }

void CloudConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloudConfig *>(to)->MergeFrom(
      static_cast<const CloudConfig &>(from));
}


void CloudConfig::MergeFrom(const CloudConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.CloudConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  location_secrets_.MergeFrom(from.location_secrets_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_fqdn().empty()) {
    _internal_set_fqdn(from._internal_fqdn());
  }
  if (!from._internal_local_fqdn().empty()) {
    _internal_set_local_fqdn(from._internal_local_fqdn());
  }
  if (!from._internal_managed_by().empty()) {
    _internal_set_managed_by(from._internal_managed_by());
  }
  if (!from._internal_signaling_address().empty()) {
    _internal_set_signaling_address(from._internal_signaling_address());
  }
  if (!from._internal_location_secret().empty()) {
    _internal_set_location_secret(from._internal_location_secret());
  }
  if (!from._internal_secret().empty()) {
    _internal_set_secret(from._internal_secret());
  }
  if (from._internal_signaling_insecure() != 0) {
    _internal_set_signaling_insecure(from._internal_signaling_insecure());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloudConfig::CopyFrom(const CloudConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.CloudConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudConfig::IsInitialized() const {
  return true;
}

void CloudConfig::InternalSwap(CloudConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  location_secrets_.InternalSwap(&other->location_secrets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fqdn_, lhs_arena,
      &other->fqdn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &local_fqdn_, lhs_arena,
      &other->local_fqdn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &managed_by_, lhs_arena,
      &other->managed_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &signaling_address_, lhs_arena,
      &other->signaling_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &location_secret_, lhs_arena,
      &other->location_secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secret_, lhs_arena,
      &other->secret_, rhs_arena
  );
  swap(signaling_insecure_, other->signaling_insecure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[2]);
}

// ===================================================================

class ComponentConfig::_Internal {
 public:
  static const ::viam::app::v1::Frame& frame(const ComponentConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& attributes(const ComponentConfig* msg);
};

const ::viam::app::v1::Frame&
ComponentConfig::_Internal::frame(const ComponentConfig* msg) {
  return *msg->frame_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
ComponentConfig::_Internal::attributes(const ComponentConfig* msg) {
  return *msg->attributes_;
}
void ComponentConfig::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
ComponentConfig::ComponentConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  depends_on_(arena),
  service_configs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.ComponentConfig)
}
ComponentConfig::ComponentConfig(const ComponentConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      depends_on_(from.depends_on_),
      service_configs_(from.service_configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    model_.Set(from._internal_model(), 
      GetArenaForAllocation());
  }
  api_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    api_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_api().empty()) {
    api_.Set(from._internal_api(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_frame()) {
    frame_ = new ::viam::app::v1::Frame(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.ComponentConfig)
}

inline void ComponentConfig::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
namespace__.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  namespace__.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
api_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  api_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&attributes_) -
    reinterpret_cast<char*>(&frame_)) + sizeof(attributes_));
}

ComponentConfig::~ComponentConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.ComponentConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ComponentConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  namespace__.Destroy();
  type_.Destroy();
  model_.Destroy();
  api_.Destroy();
  if (this != internal_default_instance()) delete frame_;
  if (this != internal_default_instance()) delete attributes_;
}

void ComponentConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComponentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.ComponentConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depends_on_.Clear();
  service_configs_.Clear();
  name_.ClearToEmpty();
  namespace__.ClearToEmpty();
  type_.ClearToEmpty();
  model_.ClearToEmpty();
  api_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && frame_ != nullptr) {
    delete frame_;
  }
  frame_ = nullptr;
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComponentConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ComponentConfig.name"));
        } else
          goto handle_unusual;
        continue;
      // string namespace = 2 [json_name = "namespace"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ComponentConfig.namespace"));
        } else
          goto handle_unusual;
        continue;
      // string type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ComponentConfig.type"));
        } else
          goto handle_unusual;
        continue;
      // string model = 4 [json_name = "model"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ComponentConfig.model"));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.v1.Frame frame = 5 [json_name = "frame"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string depends_on = 6 [json_name = "dependsOn"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_depends_on();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ComponentConfig.depends_on"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.ResourceLevelServiceConfig service_configs = 7 [json_name = "serviceConfigs", (.tagger.v1.tags) = "json:\"service_config\""];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct attributes = 8 [json_name = "attributes"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string api = 9 [json_name = "api"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_api();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ComponentConfig.api"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComponentConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.ComponentConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ComponentConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string namespace = 2 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ComponentConfig.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ComponentConfig.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // string model = 4 [json_name = "model"];
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ComponentConfig.model");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_model(), target);
  }

  // .viam.app.v1.Frame frame = 5 [json_name = "frame"];
  if (this->_internal_has_frame()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::frame(this),
        _Internal::frame(this).GetCachedSize(), target, stream);
  }

  // repeated string depends_on = 6 [json_name = "dependsOn"];
  for (int i = 0, n = this->_internal_depends_on_size(); i < n; i++) {
    const auto& s = this->_internal_depends_on(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ComponentConfig.depends_on");
    target = stream->WriteString(6, s, target);
  }

  // repeated .viam.app.v1.ResourceLevelServiceConfig service_configs = 7 [json_name = "serviceConfigs", (.tagger.v1.tags) = "json:\"service_config\""];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_service_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_service_configs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct attributes = 8 [json_name = "attributes"];
  if (this->_internal_has_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  // string api = 9 [json_name = "api"];
  if (!this->_internal_api().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_api().data(), static_cast<int>(this->_internal_api().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ComponentConfig.api");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_api(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.ComponentConfig)
  return target;
}

size_t ComponentConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.ComponentConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string depends_on = 6 [json_name = "dependsOn"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(depends_on_.size());
  for (int i = 0, n = depends_on_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      depends_on_.Get(i));
  }

  // repeated .viam.app.v1.ResourceLevelServiceConfig service_configs = 7 [json_name = "serviceConfigs", (.tagger.v1.tags) = "json:\"service_config\""];
  total_size += 1UL * this->_internal_service_configs_size();
  for (const auto& msg : this->service_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string namespace = 2 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string model = 4 [json_name = "model"];
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string api = 9 [json_name = "api"];
  if (!this->_internal_api().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_api());
  }

  // .viam.app.v1.Frame frame = 5 [json_name = "frame"];
  if (this->_internal_has_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_);
  }

  // .google.protobuf.Struct attributes = 8 [json_name = "attributes"];
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComponentConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ComponentConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComponentConfig::GetClassData() const { return &_class_data_; }

void ComponentConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ComponentConfig *>(to)->MergeFrom(
      static_cast<const ComponentConfig &>(from));
}


void ComponentConfig::MergeFrom(const ComponentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.ComponentConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  depends_on_.MergeFrom(from.depends_on_);
  service_configs_.MergeFrom(from.service_configs_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_model().empty()) {
    _internal_set_model(from._internal_model());
  }
  if (!from._internal_api().empty()) {
    _internal_set_api(from._internal_api());
  }
  if (from._internal_has_frame()) {
    _internal_mutable_frame()->::viam::app::v1::Frame::MergeFrom(from._internal_frame());
  }
  if (from._internal_has_attributes()) {
    _internal_mutable_attributes()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_attributes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComponentConfig::CopyFrom(const ComponentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.ComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentConfig::IsInitialized() const {
  return true;
}

void ComponentConfig::InternalSwap(ComponentConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  depends_on_.InternalSwap(&other->depends_on_);
  service_configs_.InternalSwap(&other->service_configs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &namespace__, lhs_arena,
      &other->namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &api_, lhs_arena,
      &other->api_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComponentConfig, attributes_)
      + sizeof(ComponentConfig::attributes_)
      - PROTOBUF_FIELD_OFFSET(ComponentConfig, frame_)>(
          reinterpret_cast<char*>(&frame_),
          reinterpret_cast<char*>(&other->frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ComponentConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[3]);
}

// ===================================================================

class ResourceLevelServiceConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& attributes(const ResourceLevelServiceConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ResourceLevelServiceConfig::_Internal::attributes(const ResourceLevelServiceConfig* msg) {
  return *msg->attributes_;
}
void ResourceLevelServiceConfig::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
ResourceLevelServiceConfig::ResourceLevelServiceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.ResourceLevelServiceConfig)
}
ResourceLevelServiceConfig::ResourceLevelServiceConfig(const ResourceLevelServiceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.ResourceLevelServiceConfig)
}

inline void ResourceLevelServiceConfig::SharedCtor() {
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attributes_ = nullptr;
}

ResourceLevelServiceConfig::~ResourceLevelServiceConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.ResourceLevelServiceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceLevelServiceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.Destroy();
  if (this != internal_default_instance()) delete attributes_;
}

void ResourceLevelServiceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceLevelServiceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.ResourceLevelServiceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceLevelServiceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ResourceLevelServiceConfig.type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct attributes = 2 [json_name = "attributes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceLevelServiceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.ResourceLevelServiceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ResourceLevelServiceConfig.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // .google.protobuf.Struct attributes = 2 [json_name = "attributes"];
  if (this->_internal_has_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.ResourceLevelServiceConfig)
  return target;
}

size_t ResourceLevelServiceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.ResourceLevelServiceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .google.protobuf.Struct attributes = 2 [json_name = "attributes"];
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceLevelServiceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceLevelServiceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceLevelServiceConfig::GetClassData() const { return &_class_data_; }

void ResourceLevelServiceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResourceLevelServiceConfig *>(to)->MergeFrom(
      static_cast<const ResourceLevelServiceConfig &>(from));
}


void ResourceLevelServiceConfig::MergeFrom(const ResourceLevelServiceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.ResourceLevelServiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_has_attributes()) {
    _internal_mutable_attributes()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_attributes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceLevelServiceConfig::CopyFrom(const ResourceLevelServiceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.ResourceLevelServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceLevelServiceConfig::IsInitialized() const {
  return true;
}

void ResourceLevelServiceConfig::InternalSwap(ResourceLevelServiceConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  swap(attributes_, other->attributes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceLevelServiceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[4]);
}

// ===================================================================

class ProcessConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& stop_timeout(const ProcessConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
ProcessConfig::_Internal::stop_timeout(const ProcessConfig* msg) {
  return *msg->stop_timeout_;
}
void ProcessConfig::clear_stop_timeout() {
  if (GetArenaForAllocation() == nullptr && stop_timeout_ != nullptr) {
    delete stop_timeout_;
  }
  stop_timeout_ = nullptr;
}
ProcessConfig::ProcessConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  args_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.ProcessConfig)
}
ProcessConfig::ProcessConfig(const ProcessConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      args_(from.args_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  cwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cwd().empty()) {
    cwd_.Set(from._internal_cwd(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_stop_timeout()) {
    stop_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.stop_timeout_);
  } else {
    stop_timeout_ = nullptr;
  }
  ::memcpy(&one_shot_, &from.one_shot_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_signal_) -
    reinterpret_cast<char*>(&one_shot_)) + sizeof(stop_signal_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.ProcessConfig)
}

inline void ProcessConfig::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cwd_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cwd_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stop_timeout_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stop_signal_) -
    reinterpret_cast<char*>(&stop_timeout_)) + sizeof(stop_signal_));
}

ProcessConfig::~ProcessConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.ProcessConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  name_.Destroy();
  cwd_.Destroy();
  if (this != internal_default_instance()) delete stop_timeout_;
}

void ProcessConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProcessConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.ProcessConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  cwd_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && stop_timeout_ != nullptr) {
    delete stop_timeout_;
  }
  stop_timeout_ = nullptr;
  ::memset(&one_shot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_signal_) -
      reinterpret_cast<char*>(&one_shot_)) + sizeof(stop_signal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ProcessConfig.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ProcessConfig.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string args = 3 [json_name = "args"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_args();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ProcessConfig.args"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string cwd = 4 [json_name = "cwd"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ProcessConfig.cwd"));
        } else
          goto handle_unusual;
        continue;
      // bool one_shot = 5 [json_name = "oneShot"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          one_shot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool log = 6 [json_name = "log"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          log_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stop_signal = 7 [json_name = "stopSignal"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          stop_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration stop_timeout = 8 [json_name = "stopTimeout"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.ProcessConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ProcessConfig.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ProcessConfig.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated string args = 3 [json_name = "args"];
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ProcessConfig.args");
    target = stream->WriteString(3, s, target);
  }

  // string cwd = 4 [json_name = "cwd"];
  if (!this->_internal_cwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cwd().data(), static_cast<int>(this->_internal_cwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ProcessConfig.cwd");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cwd(), target);
  }

  // bool one_shot = 5 [json_name = "oneShot"];
  if (this->_internal_one_shot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_one_shot(), target);
  }

  // bool log = 6 [json_name = "log"];
  if (this->_internal_log() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_log(), target);
  }

  // int32 stop_signal = 7 [json_name = "stopSignal"];
  if (this->_internal_stop_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_stop_signal(), target);
  }

  // .google.protobuf.Duration stop_timeout = 8 [json_name = "stopTimeout"];
  if (this->_internal_has_stop_timeout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::stop_timeout(this),
        _Internal::stop_timeout(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.ProcessConfig)
  return target;
}

size_t ProcessConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.ProcessConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string args = 3 [json_name = "args"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(args_.size());
  for (int i = 0, n = args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      args_.Get(i));
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string cwd = 4 [json_name = "cwd"];
  if (!this->_internal_cwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cwd());
  }

  // .google.protobuf.Duration stop_timeout = 8 [json_name = "stopTimeout"];
  if (this->_internal_has_stop_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_timeout_);
  }

  // bool one_shot = 5 [json_name = "oneShot"];
  if (this->_internal_one_shot() != 0) {
    total_size += 1 + 1;
  }

  // bool log = 6 [json_name = "log"];
  if (this->_internal_log() != 0) {
    total_size += 1 + 1;
  }

  // int32 stop_signal = 7 [json_name = "stopSignal"];
  if (this->_internal_stop_signal() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stop_signal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProcessConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessConfig::GetClassData() const { return &_class_data_; }

void ProcessConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProcessConfig *>(to)->MergeFrom(
      static_cast<const ProcessConfig &>(from));
}


void ProcessConfig::MergeFrom(const ProcessConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.ProcessConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_cwd().empty()) {
    _internal_set_cwd(from._internal_cwd());
  }
  if (from._internal_has_stop_timeout()) {
    _internal_mutable_stop_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_stop_timeout());
  }
  if (from._internal_one_shot() != 0) {
    _internal_set_one_shot(from._internal_one_shot());
  }
  if (from._internal_log() != 0) {
    _internal_set_log(from._internal_log());
  }
  if (from._internal_stop_signal() != 0) {
    _internal_set_stop_signal(from._internal_stop_signal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessConfig::CopyFrom(const ProcessConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.ProcessConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessConfig::IsInitialized() const {
  return true;
}

void ProcessConfig::InternalSwap(ProcessConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  args_.InternalSwap(&other->args_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cwd_, lhs_arena,
      &other->cwd_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProcessConfig, stop_signal_)
      + sizeof(ProcessConfig::stop_signal_)
      - PROTOBUF_FIELD_OFFSET(ProcessConfig, stop_timeout_)>(
          reinterpret_cast<char*>(&stop_timeout_),
          reinterpret_cast<char*>(&other->stop_timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[5]);
}

// ===================================================================

class ServiceConfig::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& attributes(const ServiceConfig* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
ServiceConfig::_Internal::attributes(const ServiceConfig* msg) {
  return *msg->attributes_;
}
void ServiceConfig::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
ServiceConfig::ServiceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  depends_on_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.ServiceConfig)
}
ServiceConfig::ServiceConfig(const ServiceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      depends_on_(from.depends_on_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    model_.Set(from._internal_model(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_attributes()) {
    attributes_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.attributes_);
  } else {
    attributes_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.ServiceConfig)
}

inline void ServiceConfig::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
namespace__.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  namespace__.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attributes_ = nullptr;
}

ServiceConfig::~ServiceConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.ServiceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServiceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  namespace__.Destroy();
  type_.Destroy();
  model_.Destroy();
  if (this != internal_default_instance()) delete attributes_;
}

void ServiceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.ServiceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  depends_on_.Clear();
  name_.ClearToEmpty();
  namespace__.ClearToEmpty();
  type_.ClearToEmpty();
  model_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ServiceConfig.name"));
        } else
          goto handle_unusual;
        continue;
      // string namespace = 2 [json_name = "namespace"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ServiceConfig.namespace"));
        } else
          goto handle_unusual;
        continue;
      // string type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ServiceConfig.type"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct attributes = 4 [json_name = "attributes"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string depends_on = 5 [json_name = "dependsOn"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_depends_on();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ServiceConfig.depends_on"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string model = 6 [json_name = "model"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ServiceConfig.model"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.ServiceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ServiceConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string namespace = 2 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ServiceConfig.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ServiceConfig.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // .google.protobuf.Struct attributes = 4 [json_name = "attributes"];
  if (this->_internal_has_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  // repeated string depends_on = 5 [json_name = "dependsOn"];
  for (int i = 0, n = this->_internal_depends_on_size(); i < n; i++) {
    const auto& s = this->_internal_depends_on(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ServiceConfig.depends_on");
    target = stream->WriteString(5, s, target);
  }

  // string model = 6 [json_name = "model"];
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ServiceConfig.model");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_model(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.ServiceConfig)
  return target;
}

size_t ServiceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.ServiceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string depends_on = 5 [json_name = "dependsOn"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(depends_on_.size());
  for (int i = 0, n = depends_on_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      depends_on_.Get(i));
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string namespace = 2 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string type = 3 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string model = 6 [json_name = "model"];
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // .google.protobuf.Struct attributes = 4 [json_name = "attributes"];
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *attributes_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceConfig::GetClassData() const { return &_class_data_; }

void ServiceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceConfig *>(to)->MergeFrom(
      static_cast<const ServiceConfig &>(from));
}


void ServiceConfig::MergeFrom(const ServiceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.ServiceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  depends_on_.MergeFrom(from.depends_on_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_model().empty()) {
    _internal_set_model(from._internal_model());
  }
  if (from._internal_has_attributes()) {
    _internal_mutable_attributes()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_attributes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceConfig::CopyFrom(const ServiceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.ServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceConfig::IsInitialized() const {
  return true;
}

void ServiceConfig::InternalSwap(ServiceConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  depends_on_.InternalSwap(&other->depends_on_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &namespace__, lhs_arena,
      &other->namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
  swap(attributes_, other->attributes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[6]);
}

// ===================================================================

class NetworkConfig::_Internal {
 public:
};

NetworkConfig::NetworkConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.NetworkConfig)
}
NetworkConfig::NetworkConfig(const NetworkConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fqdn_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fqdn_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fqdn().empty()) {
    fqdn_.Set(from._internal_fqdn(), 
      GetArenaForAllocation());
  }
  bind_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bind_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bind_address().empty()) {
    bind_address_.Set(from._internal_bind_address(), 
      GetArenaForAllocation());
  }
  tls_cert_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tls_cert_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tls_cert_file().empty()) {
    tls_cert_file_.Set(from._internal_tls_cert_file(), 
      GetArenaForAllocation());
  }
  tls_key_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tls_key_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tls_key_file().empty()) {
    tls_key_file_.Set(from._internal_tls_key_file(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.NetworkConfig)
}

inline void NetworkConfig::SharedCtor() {
fqdn_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fqdn_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bind_address_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bind_address_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tls_cert_file_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tls_cert_file_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tls_key_file_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tls_key_file_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetworkConfig::~NetworkConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.NetworkConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fqdn_.Destroy();
  bind_address_.Destroy();
  tls_cert_file_.Destroy();
  tls_key_file_.Destroy();
}

void NetworkConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetworkConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.NetworkConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fqdn_.ClearToEmpty();
  bind_address_.ClearToEmpty();
  tls_cert_file_.ClearToEmpty();
  tls_key_file_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fqdn = 1 [json_name = "fqdn"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fqdn();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.NetworkConfig.fqdn"));
        } else
          goto handle_unusual;
        continue;
      // string bind_address = 2 [json_name = "bindAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bind_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.NetworkConfig.bind_address"));
        } else
          goto handle_unusual;
        continue;
      // string tls_cert_file = 3 [json_name = "tlsCertFile"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tls_cert_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.NetworkConfig.tls_cert_file"));
        } else
          goto handle_unusual;
        continue;
      // string tls_key_file = 4 [json_name = "tlsKeyFile"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tls_key_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.NetworkConfig.tls_key_file"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.NetworkConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fqdn = 1 [json_name = "fqdn"];
  if (!this->_internal_fqdn().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fqdn().data(), static_cast<int>(this->_internal_fqdn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.NetworkConfig.fqdn");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fqdn(), target);
  }

  // string bind_address = 2 [json_name = "bindAddress"];
  if (!this->_internal_bind_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bind_address().data(), static_cast<int>(this->_internal_bind_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.NetworkConfig.bind_address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_bind_address(), target);
  }

  // string tls_cert_file = 3 [json_name = "tlsCertFile"];
  if (!this->_internal_tls_cert_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tls_cert_file().data(), static_cast<int>(this->_internal_tls_cert_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.NetworkConfig.tls_cert_file");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tls_cert_file(), target);
  }

  // string tls_key_file = 4 [json_name = "tlsKeyFile"];
  if (!this->_internal_tls_key_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tls_key_file().data(), static_cast<int>(this->_internal_tls_key_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.NetworkConfig.tls_key_file");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tls_key_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.NetworkConfig)
  return target;
}

size_t NetworkConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.NetworkConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fqdn = 1 [json_name = "fqdn"];
  if (!this->_internal_fqdn().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fqdn());
  }

  // string bind_address = 2 [json_name = "bindAddress"];
  if (!this->_internal_bind_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bind_address());
  }

  // string tls_cert_file = 3 [json_name = "tlsCertFile"];
  if (!this->_internal_tls_cert_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tls_cert_file());
  }

  // string tls_key_file = 4 [json_name = "tlsKeyFile"];
  if (!this->_internal_tls_key_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tls_key_file());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NetworkConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkConfig::GetClassData() const { return &_class_data_; }

void NetworkConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NetworkConfig *>(to)->MergeFrom(
      static_cast<const NetworkConfig &>(from));
}


void NetworkConfig::MergeFrom(const NetworkConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.NetworkConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fqdn().empty()) {
    _internal_set_fqdn(from._internal_fqdn());
  }
  if (!from._internal_bind_address().empty()) {
    _internal_set_bind_address(from._internal_bind_address());
  }
  if (!from._internal_tls_cert_file().empty()) {
    _internal_set_tls_cert_file(from._internal_tls_cert_file());
  }
  if (!from._internal_tls_key_file().empty()) {
    _internal_set_tls_key_file(from._internal_tls_key_file());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkConfig::CopyFrom(const NetworkConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.NetworkConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkConfig::IsInitialized() const {
  return true;
}

void NetworkConfig::InternalSwap(NetworkConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &fqdn_, lhs_arena,
      &other->fqdn_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bind_address_, lhs_arena,
      &other->bind_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tls_cert_file_, lhs_arena,
      &other->tls_cert_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tls_key_file_, lhs_arena,
      &other->tls_key_file_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[7]);
}

// ===================================================================

class AuthConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthConfig>()._has_bits_);
  static const ::viam::app::v1::ExternalAuthConfig& external_auth_config(const AuthConfig* msg);
  static void set_has_external_auth_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::viam::app::v1::ExternalAuthConfig&
AuthConfig::_Internal::external_auth_config(const AuthConfig* msg) {
  return *msg->external_auth_config_;
}
AuthConfig::AuthConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  handlers_(arena),
  tls_auth_entities_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.AuthConfig)
}
AuthConfig::AuthConfig(const AuthConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      handlers_(from.handlers_),
      tls_auth_entities_(from.tls_auth_entities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_external_auth_config()) {
    external_auth_config_ = new ::viam::app::v1::ExternalAuthConfig(*from.external_auth_config_);
  } else {
    external_auth_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.AuthConfig)
}

inline void AuthConfig::SharedCtor() {
external_auth_config_ = nullptr;
}

AuthConfig::~AuthConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.AuthConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete external_auth_config_;
}

void AuthConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.AuthConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  handlers_.Clear();
  tls_auth_entities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(external_auth_config_ != nullptr);
    external_auth_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.app.v1.AuthHandlerConfig handlers = 1 [json_name = "handlers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_handlers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string tls_auth_entities = 2 [json_name = "tlsAuthEntities"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tls_auth_entities();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.AuthConfig.tls_auth_entities"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .viam.app.v1.ExternalAuthConfig external_auth_config = 3 [json_name = "externalAuthConfig"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_auth_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.AuthConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.app.v1.AuthHandlerConfig handlers = 1 [json_name = "handlers"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_handlers_size()); i < n; i++) {
    const auto& repfield = this->_internal_handlers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string tls_auth_entities = 2 [json_name = "tlsAuthEntities"];
  for (int i = 0, n = this->_internal_tls_auth_entities_size(); i < n; i++) {
    const auto& s = this->_internal_tls_auth_entities(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.AuthConfig.tls_auth_entities");
    target = stream->WriteString(2, s, target);
  }

  // optional .viam.app.v1.ExternalAuthConfig external_auth_config = 3 [json_name = "externalAuthConfig"];
  if (_internal_has_external_auth_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::external_auth_config(this),
        _Internal::external_auth_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.AuthConfig)
  return target;
}

size_t AuthConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.AuthConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.v1.AuthHandlerConfig handlers = 1 [json_name = "handlers"];
  total_size += 1UL * this->_internal_handlers_size();
  for (const auto& msg : this->handlers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tls_auth_entities = 2 [json_name = "tlsAuthEntities"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tls_auth_entities_.size());
  for (int i = 0, n = tls_auth_entities_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tls_auth_entities_.Get(i));
  }

  // optional .viam.app.v1.ExternalAuthConfig external_auth_config = 3 [json_name = "externalAuthConfig"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *external_auth_config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthConfig::GetClassData() const { return &_class_data_; }

void AuthConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthConfig *>(to)->MergeFrom(
      static_cast<const AuthConfig &>(from));
}


void AuthConfig::MergeFrom(const AuthConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.AuthConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  handlers_.MergeFrom(from.handlers_);
  tls_auth_entities_.MergeFrom(from.tls_auth_entities_);
  if (from._internal_has_external_auth_config()) {
    _internal_mutable_external_auth_config()->::viam::app::v1::ExternalAuthConfig::MergeFrom(from._internal_external_auth_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthConfig::CopyFrom(const AuthConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.AuthConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthConfig::IsInitialized() const {
  return true;
}

void AuthConfig::InternalSwap(AuthConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  handlers_.InternalSwap(&other->handlers_);
  tls_auth_entities_.InternalSwap(&other->tls_auth_entities_);
  swap(external_auth_config_, other->external_auth_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[8]);
}

// ===================================================================

class JWKSFile::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& json(const JWKSFile* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
JWKSFile::_Internal::json(const JWKSFile* msg) {
  return *msg->json_;
}
void JWKSFile::clear_json() {
  if (GetArenaForAllocation() == nullptr && json_ != nullptr) {
    delete json_;
  }
  json_ = nullptr;
}
JWKSFile::JWKSFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.JWKSFile)
}
JWKSFile::JWKSFile(const JWKSFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_json()) {
    json_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.json_);
  } else {
    json_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.JWKSFile)
}

inline void JWKSFile::SharedCtor() {
json_ = nullptr;
}

JWKSFile::~JWKSFile() {
  // @@protoc_insertion_point(destructor:viam.app.v1.JWKSFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JWKSFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete json_;
}

void JWKSFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JWKSFile::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.JWKSFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && json_ != nullptr) {
    delete json_;
  }
  json_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JWKSFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct json = 1 [json_name = "json"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_json(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JWKSFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.JWKSFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct json = 1 [json_name = "json"];
  if (this->_internal_has_json()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::json(this),
        _Internal::json(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.JWKSFile)
  return target;
}

size_t JWKSFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.JWKSFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct json = 1 [json_name = "json"];
  if (this->_internal_has_json()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *json_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JWKSFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JWKSFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JWKSFile::GetClassData() const { return &_class_data_; }

void JWKSFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JWKSFile *>(to)->MergeFrom(
      static_cast<const JWKSFile &>(from));
}


void JWKSFile::MergeFrom(const JWKSFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.JWKSFile)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_json()) {
    _internal_mutable_json()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_json());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JWKSFile::CopyFrom(const JWKSFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.JWKSFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JWKSFile::IsInitialized() const {
  return true;
}

void JWKSFile::InternalSwap(JWKSFile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(json_, other->json_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JWKSFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[9]);
}

// ===================================================================

class AuthHandlerWebOauthConfig::_Internal {
 public:
  static const ::viam::app::v1::JWKSFile& jwks(const AuthHandlerWebOauthConfig* msg);
};

const ::viam::app::v1::JWKSFile&
AuthHandlerWebOauthConfig::_Internal::jwks(const AuthHandlerWebOauthConfig* msg) {
  return *msg->jwks_;
}
AuthHandlerWebOauthConfig::AuthHandlerWebOauthConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  allowed_audiences_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.AuthHandlerWebOauthConfig)
}
AuthHandlerWebOauthConfig::AuthHandlerWebOauthConfig(const AuthHandlerWebOauthConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      allowed_audiences_(from.allowed_audiences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_jwks()) {
    jwks_ = new ::viam::app::v1::JWKSFile(*from.jwks_);
  } else {
    jwks_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.AuthHandlerWebOauthConfig)
}

inline void AuthHandlerWebOauthConfig::SharedCtor() {
jwks_ = nullptr;
}

AuthHandlerWebOauthConfig::~AuthHandlerWebOauthConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.AuthHandlerWebOauthConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthHandlerWebOauthConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete jwks_;
}

void AuthHandlerWebOauthConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthHandlerWebOauthConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.AuthHandlerWebOauthConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_audiences_.Clear();
  if (GetArenaForAllocation() == nullptr && jwks_ != nullptr) {
    delete jwks_;
  }
  jwks_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthHandlerWebOauthConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string allowed_audiences = 1 [json_name = "allowedAudiences"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_audiences();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.AuthHandlerWebOauthConfig.allowed_audiences"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.v1.JWKSFile jwks = 2 [json_name = "jwks"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_jwks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthHandlerWebOauthConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.AuthHandlerWebOauthConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string allowed_audiences = 1 [json_name = "allowedAudiences"];
  for (int i = 0, n = this->_internal_allowed_audiences_size(); i < n; i++) {
    const auto& s = this->_internal_allowed_audiences(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.AuthHandlerWebOauthConfig.allowed_audiences");
    target = stream->WriteString(1, s, target);
  }

  // .viam.app.v1.JWKSFile jwks = 2 [json_name = "jwks"];
  if (this->_internal_has_jwks()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::jwks(this),
        _Internal::jwks(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.AuthHandlerWebOauthConfig)
  return target;
}

size_t AuthHandlerWebOauthConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.AuthHandlerWebOauthConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string allowed_audiences = 1 [json_name = "allowedAudiences"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(allowed_audiences_.size());
  for (int i = 0, n = allowed_audiences_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      allowed_audiences_.Get(i));
  }

  // .viam.app.v1.JWKSFile jwks = 2 [json_name = "jwks"];
  if (this->_internal_has_jwks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *jwks_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthHandlerWebOauthConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthHandlerWebOauthConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthHandlerWebOauthConfig::GetClassData() const { return &_class_data_; }

void AuthHandlerWebOauthConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthHandlerWebOauthConfig *>(to)->MergeFrom(
      static_cast<const AuthHandlerWebOauthConfig &>(from));
}


void AuthHandlerWebOauthConfig::MergeFrom(const AuthHandlerWebOauthConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.AuthHandlerWebOauthConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_audiences_.MergeFrom(from.allowed_audiences_);
  if (from._internal_has_jwks()) {
    _internal_mutable_jwks()->::viam::app::v1::JWKSFile::MergeFrom(from._internal_jwks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthHandlerWebOauthConfig::CopyFrom(const AuthHandlerWebOauthConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.AuthHandlerWebOauthConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthHandlerWebOauthConfig::IsInitialized() const {
  return true;
}

void AuthHandlerWebOauthConfig::InternalSwap(AuthHandlerWebOauthConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  allowed_audiences_.InternalSwap(&other->allowed_audiences_);
  swap(jwks_, other->jwks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthHandlerWebOauthConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[10]);
}

// ===================================================================

class ExternalAuthConfig::_Internal {
 public:
  static const ::viam::app::v1::JWKSFile& jwks(const ExternalAuthConfig* msg);
};

const ::viam::app::v1::JWKSFile&
ExternalAuthConfig::_Internal::jwks(const ExternalAuthConfig* msg) {
  return *msg->jwks_;
}
ExternalAuthConfig::ExternalAuthConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.ExternalAuthConfig)
}
ExternalAuthConfig::ExternalAuthConfig(const ExternalAuthConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_jwks()) {
    jwks_ = new ::viam::app::v1::JWKSFile(*from.jwks_);
  } else {
    jwks_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.ExternalAuthConfig)
}

inline void ExternalAuthConfig::SharedCtor() {
jwks_ = nullptr;
}

ExternalAuthConfig::~ExternalAuthConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.ExternalAuthConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExternalAuthConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete jwks_;
}

void ExternalAuthConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExternalAuthConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.ExternalAuthConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && jwks_ != nullptr) {
    delete jwks_;
  }
  jwks_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExternalAuthConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.v1.JWKSFile jwks = 1 [json_name = "jwks"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_jwks(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExternalAuthConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.ExternalAuthConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.v1.JWKSFile jwks = 1 [json_name = "jwks"];
  if (this->_internal_has_jwks()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::jwks(this),
        _Internal::jwks(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.ExternalAuthConfig)
  return target;
}

size_t ExternalAuthConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.ExternalAuthConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.v1.JWKSFile jwks = 1 [json_name = "jwks"];
  if (this->_internal_has_jwks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *jwks_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExternalAuthConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExternalAuthConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExternalAuthConfig::GetClassData() const { return &_class_data_; }

void ExternalAuthConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExternalAuthConfig *>(to)->MergeFrom(
      static_cast<const ExternalAuthConfig &>(from));
}


void ExternalAuthConfig::MergeFrom(const ExternalAuthConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.ExternalAuthConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_jwks()) {
    _internal_mutable_jwks()->::viam::app::v1::JWKSFile::MergeFrom(from._internal_jwks());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExternalAuthConfig::CopyFrom(const ExternalAuthConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.ExternalAuthConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalAuthConfig::IsInitialized() const {
  return true;
}

void ExternalAuthConfig::InternalSwap(ExternalAuthConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(jwks_, other->jwks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExternalAuthConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[11]);
}

// ===================================================================

class AuthHandlerConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthHandlerConfig>()._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& config(const AuthHandlerConfig* msg);
  static const ::viam::app::v1::AuthHandlerWebOauthConfig& web_oauth_config(const AuthHandlerConfig* msg);
  static void set_has_web_oauth_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
AuthHandlerConfig::_Internal::config(const AuthHandlerConfig* msg) {
  return *msg->config_;
}
const ::viam::app::v1::AuthHandlerWebOauthConfig&
AuthHandlerConfig::_Internal::web_oauth_config(const AuthHandlerConfig* msg) {
  return *msg->web_oauth_config_;
}
void AuthHandlerConfig::clear_config() {
  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
AuthHandlerConfig::AuthHandlerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.AuthHandlerConfig)
}
AuthHandlerConfig::AuthHandlerConfig(const AuthHandlerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.config_);
  } else {
    config_ = nullptr;
  }
  if (from._internal_has_web_oauth_config()) {
    web_oauth_config_ = new ::viam::app::v1::AuthHandlerWebOauthConfig(*from.web_oauth_config_);
  } else {
    web_oauth_config_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.AuthHandlerConfig)
}

inline void AuthHandlerConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&config_)) + sizeof(type_));
}

AuthHandlerConfig::~AuthHandlerConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.AuthHandlerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthHandlerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
  if (this != internal_default_instance()) delete web_oauth_config_;
}

void AuthHandlerConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AuthHandlerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.AuthHandlerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(web_oauth_config_ != nullptr);
    web_oauth_config_->Clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthHandlerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.v1.CredentialsType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::viam::app::v1::CredentialsType>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct config = 5 [json_name = "config"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .viam.app.v1.AuthHandlerWebOauthConfig web_oauth_config = 6 [json_name = "webOauthConfig"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_oauth_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AuthHandlerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.AuthHandlerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.v1.CredentialsType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Struct config = 5 [json_name = "config"];
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // optional .viam.app.v1.AuthHandlerWebOauthConfig web_oauth_config = 6 [json_name = "webOauthConfig"];
  if (_internal_has_web_oauth_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::web_oauth_config(this),
        _Internal::web_oauth_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.AuthHandlerConfig)
  return target;
}

size_t AuthHandlerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.AuthHandlerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct config = 5 [json_name = "config"];
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // optional .viam.app.v1.AuthHandlerWebOauthConfig web_oauth_config = 6 [json_name = "webOauthConfig"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *web_oauth_config_);
  }

  // .viam.app.v1.CredentialsType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthHandlerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AuthHandlerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthHandlerConfig::GetClassData() const { return &_class_data_; }

void AuthHandlerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AuthHandlerConfig *>(to)->MergeFrom(
      static_cast<const AuthHandlerConfig &>(from));
}


void AuthHandlerConfig::MergeFrom(const AuthHandlerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.AuthHandlerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_config());
  }
  if (from._internal_has_web_oauth_config()) {
    _internal_mutable_web_oauth_config()->::viam::app::v1::AuthHandlerWebOauthConfig::MergeFrom(from._internal_web_oauth_config());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthHandlerConfig::CopyFrom(const AuthHandlerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.AuthHandlerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthHandlerConfig::IsInitialized() const {
  return true;
}

void AuthHandlerConfig::InternalSwap(AuthHandlerConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AuthHandlerConfig, type_)
      + sizeof(AuthHandlerConfig::type_)
      - PROTOBUF_FIELD_OFFSET(AuthHandlerConfig, config_)>(
          reinterpret_cast<char*>(&config_),
          reinterpret_cast<char*>(&other->config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthHandlerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[12]);
}

// ===================================================================

class Frame::_Internal {
 public:
  static const ::viam::app::v1::Translation& translation(const Frame* msg);
  static const ::viam::app::v1::Orientation& orientation(const Frame* msg);
  static const ::viam::common::v1::Geometry& geometry(const Frame* msg);
};

const ::viam::app::v1::Translation&
Frame::_Internal::translation(const Frame* msg) {
  return *msg->translation_;
}
const ::viam::app::v1::Orientation&
Frame::_Internal::orientation(const Frame* msg) {
  return *msg->orientation_;
}
const ::viam::common::v1::Geometry&
Frame::_Internal::geometry(const Frame* msg) {
  return *msg->geometry_;
}
void Frame::clear_geometry() {
  if (GetArenaForAllocation() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
}
Frame::Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.Frame)
}
Frame::Frame(const Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    parent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    parent_.Set(from._internal_parent(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_translation()) {
    translation_ = new ::viam::app::v1::Translation(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::viam::app::v1::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_geometry()) {
    geometry_ = new ::viam::common::v1::Geometry(*from.geometry_);
  } else {
    geometry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.Frame)
}

inline void Frame::SharedCtor() {
parent_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  parent_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&translation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&geometry_) -
    reinterpret_cast<char*>(&translation_)) + sizeof(geometry_));
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:viam.app.v1.Frame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  parent_.Destroy();
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete geometry_;
}

void Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.Frame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && geometry_ != nullptr) {
    delete geometry_;
  }
  geometry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Frame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1 [json_name = "parent"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.Frame.parent"));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.v1.Translation translation = 2 [json_name = "translation"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.v1.Orientation orientation = 3 [json_name = "orientation"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.Geometry geometry = 4 [json_name = "geometry"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Frame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.Frame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1 [json_name = "parent"];
  if (!this->_internal_parent().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.Frame.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // .viam.app.v1.Translation translation = 2 [json_name = "translation"];
  if (this->_internal_has_translation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::translation(this),
        _Internal::translation(this).GetCachedSize(), target, stream);
  }

  // .viam.app.v1.Orientation orientation = 3 [json_name = "orientation"];
  if (this->_internal_has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::orientation(this),
        _Internal::orientation(this).GetCachedSize(), target, stream);
  }

  // .viam.common.v1.Geometry geometry = 4 [json_name = "geometry"];
  if (this->_internal_has_geometry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::geometry(this),
        _Internal::geometry(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.Frame)
  return target;
}

size_t Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.Frame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1 [json_name = "parent"];
  if (!this->_internal_parent().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // .viam.app.v1.Translation translation = 2 [json_name = "translation"];
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  // .viam.app.v1.Orientation orientation = 3 [json_name = "orientation"];
  if (this->_internal_has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .viam.common.v1.Geometry geometry = 4 [json_name = "geometry"];
  if (this->_internal_has_geometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geometry_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Frame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Frame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Frame::GetClassData() const { return &_class_data_; }

void Frame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Frame *>(to)->MergeFrom(
      static_cast<const Frame &>(from));
}


void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_parent().empty()) {
    _internal_set_parent(from._internal_parent());
  }
  if (from._internal_has_translation()) {
    _internal_mutable_translation()->::viam::app::v1::Translation::MergeFrom(from._internal_translation());
  }
  if (from._internal_has_orientation()) {
    _internal_mutable_orientation()->::viam::app::v1::Orientation::MergeFrom(from._internal_orientation());
  }
  if (from._internal_has_geometry()) {
    _internal_mutable_geometry()->::viam::common::v1::Geometry::MergeFrom(from._internal_geometry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {
  return true;
}

void Frame::InternalSwap(Frame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &parent_, lhs_arena,
      &other->parent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Frame, geometry_)
      + sizeof(Frame::geometry_)
      - PROTOBUF_FIELD_OFFSET(Frame, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Frame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[13]);
}

// ===================================================================

class Translation::_Internal {
 public:
};

Translation::Translation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.Translation)
}
Translation::Translation(const Translation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.Translation)
}

inline void Translation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Translation::~Translation() {
  // @@protoc_insertion_point(destructor:viam.app.v1.Translation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Translation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Translation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.Translation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Translation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1 [json_name = "x"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2 [json_name = "y"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3 [json_name = "z"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Translation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.Translation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.Translation)
  return target;
}

size_t Translation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.Translation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Translation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Translation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Translation::GetClassData() const { return &_class_data_; }

void Translation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Translation *>(to)->MergeFrom(
      static_cast<const Translation &>(from));
}


void Translation::MergeFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Translation::CopyFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Translation::IsInitialized() const {
  return true;
}

void Translation::InternalSwap(Translation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Translation, z_)
      + sizeof(Translation::z_)
      - PROTOBUF_FIELD_OFFSET(Translation, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Translation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[14]);
}

// ===================================================================

class Orientation_NoOrientation::_Internal {
 public:
};

Orientation_NoOrientation::Orientation_NoOrientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.Orientation.NoOrientation)
}
Orientation_NoOrientation::Orientation_NoOrientation(const Orientation_NoOrientation& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.Orientation.NoOrientation)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation_NoOrientation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation_NoOrientation::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Orientation_NoOrientation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[15]);
}

// ===================================================================

class Orientation_OrientationVectorRadians::_Internal {
 public:
};

Orientation_OrientationVectorRadians::Orientation_OrientationVectorRadians(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.Orientation.OrientationVectorRadians)
}
Orientation_OrientationVectorRadians::Orientation_OrientationVectorRadians(const Orientation_OrientationVectorRadians& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.Orientation.OrientationVectorRadians)
}

inline void Orientation_OrientationVectorRadians::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&theta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(z_));
}

Orientation_OrientationVectorRadians::~Orientation_OrientationVectorRadians() {
  // @@protoc_insertion_point(destructor:viam.app.v1.Orientation.OrientationVectorRadians)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Orientation_OrientationVectorRadians::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Orientation_OrientationVectorRadians::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation_OrientationVectorRadians::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.Orientation.OrientationVectorRadians)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&theta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&theta_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation_OrientationVectorRadians::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double theta = 1 [json_name = "theta", (.tagger.v1.tags) = "json:\"th\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double x = 2 [json_name = "x"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 3 [json_name = "y"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 4 [json_name = "z"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Orientation_OrientationVectorRadians::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.Orientation.OrientationVectorRadians)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double theta = 1 [json_name = "theta", (.tagger.v1.tags) = "json:\"th\""];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_theta(), target);
  }

  // double x = 2 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double z = 4 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.Orientation.OrientationVectorRadians)
  return target;
}

size_t Orientation_OrientationVectorRadians::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.Orientation.OrientationVectorRadians)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double theta = 1 [json_name = "theta", (.tagger.v1.tags) = "json:\"th\""];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    total_size += 1 + 8;
  }

  // double x = 2 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 3 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 4 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation_OrientationVectorRadians::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Orientation_OrientationVectorRadians::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation_OrientationVectorRadians::GetClassData() const { return &_class_data_; }

void Orientation_OrientationVectorRadians::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Orientation_OrientationVectorRadians *>(to)->MergeFrom(
      static_cast<const Orientation_OrientationVectorRadians &>(from));
}


void Orientation_OrientationVectorRadians::MergeFrom(const Orientation_OrientationVectorRadians& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.Orientation.OrientationVectorRadians)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = from._internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    _internal_set_theta(from._internal_theta());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation_OrientationVectorRadians::CopyFrom(const Orientation_OrientationVectorRadians& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.Orientation.OrientationVectorRadians)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation_OrientationVectorRadians::IsInitialized() const {
  return true;
}

void Orientation_OrientationVectorRadians::InternalSwap(Orientation_OrientationVectorRadians* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Orientation_OrientationVectorRadians, z_)
      + sizeof(Orientation_OrientationVectorRadians::z_)
      - PROTOBUF_FIELD_OFFSET(Orientation_OrientationVectorRadians, theta_)>(
          reinterpret_cast<char*>(&theta_),
          reinterpret_cast<char*>(&other->theta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation_OrientationVectorRadians::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[16]);
}

// ===================================================================

class Orientation_OrientationVectorDegrees::_Internal {
 public:
};

Orientation_OrientationVectorDegrees::Orientation_OrientationVectorDegrees(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.Orientation.OrientationVectorDegrees)
}
Orientation_OrientationVectorDegrees::Orientation_OrientationVectorDegrees(const Orientation_OrientationVectorDegrees& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.Orientation.OrientationVectorDegrees)
}

inline void Orientation_OrientationVectorDegrees::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&theta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(z_));
}

Orientation_OrientationVectorDegrees::~Orientation_OrientationVectorDegrees() {
  // @@protoc_insertion_point(destructor:viam.app.v1.Orientation.OrientationVectorDegrees)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Orientation_OrientationVectorDegrees::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Orientation_OrientationVectorDegrees::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation_OrientationVectorDegrees::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.Orientation.OrientationVectorDegrees)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&theta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&theta_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation_OrientationVectorDegrees::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double theta = 1 [json_name = "theta", (.tagger.v1.tags) = "json:\"th\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double x = 2 [json_name = "x"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 3 [json_name = "y"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 4 [json_name = "z"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Orientation_OrientationVectorDegrees::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.Orientation.OrientationVectorDegrees)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double theta = 1 [json_name = "theta", (.tagger.v1.tags) = "json:\"th\""];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_theta(), target);
  }

  // double x = 2 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double z = 4 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.Orientation.OrientationVectorDegrees)
  return target;
}

size_t Orientation_OrientationVectorDegrees::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.Orientation.OrientationVectorDegrees)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double theta = 1 [json_name = "theta", (.tagger.v1.tags) = "json:\"th\""];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    total_size += 1 + 8;
  }

  // double x = 2 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 3 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 4 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation_OrientationVectorDegrees::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Orientation_OrientationVectorDegrees::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation_OrientationVectorDegrees::GetClassData() const { return &_class_data_; }

void Orientation_OrientationVectorDegrees::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Orientation_OrientationVectorDegrees *>(to)->MergeFrom(
      static_cast<const Orientation_OrientationVectorDegrees &>(from));
}


void Orientation_OrientationVectorDegrees::MergeFrom(const Orientation_OrientationVectorDegrees& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.Orientation.OrientationVectorDegrees)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = from._internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    _internal_set_theta(from._internal_theta());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation_OrientationVectorDegrees::CopyFrom(const Orientation_OrientationVectorDegrees& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.Orientation.OrientationVectorDegrees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation_OrientationVectorDegrees::IsInitialized() const {
  return true;
}

void Orientation_OrientationVectorDegrees::InternalSwap(Orientation_OrientationVectorDegrees* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Orientation_OrientationVectorDegrees, z_)
      + sizeof(Orientation_OrientationVectorDegrees::z_)
      - PROTOBUF_FIELD_OFFSET(Orientation_OrientationVectorDegrees, theta_)>(
          reinterpret_cast<char*>(&theta_),
          reinterpret_cast<char*>(&other->theta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation_OrientationVectorDegrees::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[17]);
}

// ===================================================================

class Orientation_EulerAngles::_Internal {
 public:
};

Orientation_EulerAngles::Orientation_EulerAngles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.Orientation.EulerAngles)
}
Orientation_EulerAngles::Orientation_EulerAngles(const Orientation_EulerAngles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roll_, &from.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.Orientation.EulerAngles)
}

inline void Orientation_EulerAngles::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roll_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
}

Orientation_EulerAngles::~Orientation_EulerAngles() {
  // @@protoc_insertion_point(destructor:viam.app.v1.Orientation.EulerAngles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Orientation_EulerAngles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Orientation_EulerAngles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation_EulerAngles::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.Orientation.EulerAngles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation_EulerAngles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double roll = 1 [json_name = "roll"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pitch = 2 [json_name = "pitch"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double yaw = 3 [json_name = "yaw"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Orientation_EulerAngles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.Orientation.EulerAngles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double roll = 1 [json_name = "roll"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll = this->_internal_roll();
  uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_roll(), target);
  }

  // double pitch = 2 [json_name = "pitch"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch = this->_internal_pitch();
  uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_pitch(), target);
  }

  // double yaw = 3 [json_name = "yaw"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.Orientation.EulerAngles)
  return target;
}

size_t Orientation_EulerAngles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.Orientation.EulerAngles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double roll = 1 [json_name = "roll"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll = this->_internal_roll();
  uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 8;
  }

  // double pitch = 2 [json_name = "pitch"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch = this->_internal_pitch();
  uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 3 [json_name = "yaw"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation_EulerAngles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Orientation_EulerAngles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation_EulerAngles::GetClassData() const { return &_class_data_; }

void Orientation_EulerAngles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Orientation_EulerAngles *>(to)->MergeFrom(
      static_cast<const Orientation_EulerAngles &>(from));
}


void Orientation_EulerAngles::MergeFrom(const Orientation_EulerAngles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.Orientation.EulerAngles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll = from._internal_roll();
  uint64_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch = from._internal_pitch();
  uint64_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = from._internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _internal_set_yaw(from._internal_yaw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation_EulerAngles::CopyFrom(const Orientation_EulerAngles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.Orientation.EulerAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation_EulerAngles::IsInitialized() const {
  return true;
}

void Orientation_EulerAngles::InternalSwap(Orientation_EulerAngles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Orientation_EulerAngles, yaw_)
      + sizeof(Orientation_EulerAngles::yaw_)
      - PROTOBUF_FIELD_OFFSET(Orientation_EulerAngles, roll_)>(
          reinterpret_cast<char*>(&roll_),
          reinterpret_cast<char*>(&other->roll_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation_EulerAngles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[18]);
}

// ===================================================================

class Orientation_AxisAngles::_Internal {
 public:
};

Orientation_AxisAngles::Orientation_AxisAngles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.Orientation.AxisAngles)
}
Orientation_AxisAngles::Orientation_AxisAngles(const Orientation_AxisAngles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&theta_, &from.theta_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.Orientation.AxisAngles)
}

inline void Orientation_AxisAngles::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&theta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&theta_)) + sizeof(z_));
}

Orientation_AxisAngles::~Orientation_AxisAngles() {
  // @@protoc_insertion_point(destructor:viam.app.v1.Orientation.AxisAngles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Orientation_AxisAngles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Orientation_AxisAngles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation_AxisAngles::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.Orientation.AxisAngles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&theta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&theta_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation_AxisAngles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double theta = 1 [json_name = "theta", (.tagger.v1.tags) = "json:\"th\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double x = 2 [json_name = "x"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 3 [json_name = "y"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 4 [json_name = "z"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Orientation_AxisAngles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.Orientation.AxisAngles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double theta = 1 [json_name = "theta", (.tagger.v1.tags) = "json:\"th\""];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_theta(), target);
  }

  // double x = 2 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double z = 4 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.Orientation.AxisAngles)
  return target;
}

size_t Orientation_AxisAngles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.Orientation.AxisAngles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double theta = 1 [json_name = "theta", (.tagger.v1.tags) = "json:\"th\""];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    total_size += 1 + 8;
  }

  // double x = 2 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 3 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 4 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation_AxisAngles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Orientation_AxisAngles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation_AxisAngles::GetClassData() const { return &_class_data_; }

void Orientation_AxisAngles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Orientation_AxisAngles *>(to)->MergeFrom(
      static_cast<const Orientation_AxisAngles &>(from));
}


void Orientation_AxisAngles::MergeFrom(const Orientation_AxisAngles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.Orientation.AxisAngles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = from._internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    _internal_set_theta(from._internal_theta());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation_AxisAngles::CopyFrom(const Orientation_AxisAngles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.Orientation.AxisAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation_AxisAngles::IsInitialized() const {
  return true;
}

void Orientation_AxisAngles::InternalSwap(Orientation_AxisAngles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Orientation_AxisAngles, z_)
      + sizeof(Orientation_AxisAngles::z_)
      - PROTOBUF_FIELD_OFFSET(Orientation_AxisAngles, theta_)>(
          reinterpret_cast<char*>(&theta_),
          reinterpret_cast<char*>(&other->theta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation_AxisAngles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[19]);
}

// ===================================================================

class Orientation_Quaternion::_Internal {
 public:
};

Orientation_Quaternion::Orientation_Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.Orientation.Quaternion)
}
Orientation_Quaternion::Orientation_Quaternion(const Orientation_Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.Orientation.Quaternion)
}

inline void Orientation_Quaternion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Orientation_Quaternion::~Orientation_Quaternion() {
  // @@protoc_insertion_point(destructor:viam.app.v1.Orientation.Quaternion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Orientation_Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Orientation_Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation_Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.Orientation.Quaternion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation_Quaternion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double w = 1 [json_name = "w"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double x = 2 [json_name = "x"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 3 [json_name = "y"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 4 [json_name = "z"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Orientation_Quaternion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.Orientation.Quaternion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double w = 1 [json_name = "w"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_w = this->_internal_w();
  uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_w(), target);
  }

  // double x = 2 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double z = 4 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.Orientation.Quaternion)
  return target;
}

size_t Orientation_Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.Orientation.Quaternion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double w = 1 [json_name = "w"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_w = this->_internal_w();
  uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 8;
  }

  // double x = 2 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 3 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 4 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation_Quaternion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Orientation_Quaternion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation_Quaternion::GetClassData() const { return &_class_data_; }

void Orientation_Quaternion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Orientation_Quaternion *>(to)->MergeFrom(
      static_cast<const Orientation_Quaternion &>(from));
}


void Orientation_Quaternion::MergeFrom(const Orientation_Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.Orientation.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_w = from._internal_w();
  uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _internal_set_w(from._internal_w());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation_Quaternion::CopyFrom(const Orientation_Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.Orientation.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation_Quaternion::IsInitialized() const {
  return true;
}

void Orientation_Quaternion::InternalSwap(Orientation_Quaternion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Orientation_Quaternion, z_)
      + sizeof(Orientation_Quaternion::z_)
      - PROTOBUF_FIELD_OFFSET(Orientation_Quaternion, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation_Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[20]);
}

// ===================================================================

class Orientation::_Internal {
 public:
  static const ::viam::app::v1::Orientation_NoOrientation& no_orientation(const Orientation* msg);
  static const ::viam::app::v1::Orientation_OrientationVectorRadians& vector_radians(const Orientation* msg);
  static const ::viam::app::v1::Orientation_OrientationVectorDegrees& vector_degrees(const Orientation* msg);
  static const ::viam::app::v1::Orientation_EulerAngles& euler_angles(const Orientation* msg);
  static const ::viam::app::v1::Orientation_AxisAngles& axis_angles(const Orientation* msg);
  static const ::viam::app::v1::Orientation_Quaternion& quaternion(const Orientation* msg);
};

const ::viam::app::v1::Orientation_NoOrientation&
Orientation::_Internal::no_orientation(const Orientation* msg) {
  return *msg->type_.no_orientation_;
}
const ::viam::app::v1::Orientation_OrientationVectorRadians&
Orientation::_Internal::vector_radians(const Orientation* msg) {
  return *msg->type_.vector_radians_;
}
const ::viam::app::v1::Orientation_OrientationVectorDegrees&
Orientation::_Internal::vector_degrees(const Orientation* msg) {
  return *msg->type_.vector_degrees_;
}
const ::viam::app::v1::Orientation_EulerAngles&
Orientation::_Internal::euler_angles(const Orientation* msg) {
  return *msg->type_.euler_angles_;
}
const ::viam::app::v1::Orientation_AxisAngles&
Orientation::_Internal::axis_angles(const Orientation* msg) {
  return *msg->type_.axis_angles_;
}
const ::viam::app::v1::Orientation_Quaternion&
Orientation::_Internal::quaternion(const Orientation* msg) {
  return *msg->type_.quaternion_;
}
void Orientation::set_allocated_no_orientation(::viam::app::v1::Orientation_NoOrientation* no_orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (no_orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(no_orientation);
    if (message_arena != submessage_arena) {
      no_orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_orientation, submessage_arena);
    }
    set_has_no_orientation();
    type_.no_orientation_ = no_orientation;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.Orientation.no_orientation)
}
void Orientation::set_allocated_vector_radians(::viam::app::v1::Orientation_OrientationVectorRadians* vector_radians) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (vector_radians) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vector_radians);
    if (message_arena != submessage_arena) {
      vector_radians = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector_radians, submessage_arena);
    }
    set_has_vector_radians();
    type_.vector_radians_ = vector_radians;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.Orientation.vector_radians)
}
void Orientation::set_allocated_vector_degrees(::viam::app::v1::Orientation_OrientationVectorDegrees* vector_degrees) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (vector_degrees) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vector_degrees);
    if (message_arena != submessage_arena) {
      vector_degrees = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector_degrees, submessage_arena);
    }
    set_has_vector_degrees();
    type_.vector_degrees_ = vector_degrees;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.Orientation.vector_degrees)
}
void Orientation::set_allocated_euler_angles(::viam::app::v1::Orientation_EulerAngles* euler_angles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (euler_angles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(euler_angles);
    if (message_arena != submessage_arena) {
      euler_angles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler_angles, submessage_arena);
    }
    set_has_euler_angles();
    type_.euler_angles_ = euler_angles;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.Orientation.euler_angles)
}
void Orientation::set_allocated_axis_angles(::viam::app::v1::Orientation_AxisAngles* axis_angles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (axis_angles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(axis_angles);
    if (message_arena != submessage_arena) {
      axis_angles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis_angles, submessage_arena);
    }
    set_has_axis_angles();
    type_.axis_angles_ = axis_angles;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.Orientation.axis_angles)
}
void Orientation::set_allocated_quaternion(::viam::app::v1::Orientation_Quaternion* quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(quaternion);
    if (message_arena != submessage_arena) {
      quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion, submessage_arena);
    }
    set_has_quaternion();
    type_.quaternion_ = quaternion;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.v1.Orientation.quaternion)
}
Orientation::Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kNoOrientation: {
      _internal_mutable_no_orientation()->::viam::app::v1::Orientation_NoOrientation::MergeFrom(from._internal_no_orientation());
      break;
    }
    case kVectorRadians: {
      _internal_mutable_vector_radians()->::viam::app::v1::Orientation_OrientationVectorRadians::MergeFrom(from._internal_vector_radians());
      break;
    }
    case kVectorDegrees: {
      _internal_mutable_vector_degrees()->::viam::app::v1::Orientation_OrientationVectorDegrees::MergeFrom(from._internal_vector_degrees());
      break;
    }
    case kEulerAngles: {
      _internal_mutable_euler_angles()->::viam::app::v1::Orientation_EulerAngles::MergeFrom(from._internal_euler_angles());
      break;
    }
    case kAxisAngles: {
      _internal_mutable_axis_angles()->::viam::app::v1::Orientation_AxisAngles::MergeFrom(from._internal_axis_angles());
      break;
    }
    case kQuaternion: {
      _internal_mutable_quaternion()->::viam::app::v1::Orientation_Quaternion::MergeFrom(from._internal_quaternion());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.Orientation)
}

inline void Orientation::SharedCtor() {
clear_has_type();
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:viam.app.v1.Orientation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Orientation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void Orientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:viam.app.v1.Orientation)
  switch (type_case()) {
    case kNoOrientation: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.no_orientation_;
      }
      break;
    }
    case kVectorRadians: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.vector_radians_;
      }
      break;
    }
    case kVectorDegrees: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.vector_degrees_;
      }
      break;
    }
    case kEulerAngles: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.euler_angles_;
      }
      break;
    }
    case kAxisAngles: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.axis_angles_;
      }
      break;
    }
    case kQuaternion: {
      if (GetArenaForAllocation() == nullptr) {
        delete type_.quaternion_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.Orientation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.v1.Orientation.NoOrientation no_orientation = 1 [json_name = "noOrientation"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.v1.Orientation.OrientationVectorRadians vector_radians = 2 [json_name = "vectorRadians"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector_radians(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.v1.Orientation.OrientationVectorDegrees vector_degrees = 3 [json_name = "vectorDegrees"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector_degrees(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.v1.Orientation.EulerAngles euler_angles = 4 [json_name = "eulerAngles"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_euler_angles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.v1.Orientation.AxisAngles axis_angles = 5 [json_name = "axisAngles"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_axis_angles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.v1.Orientation.Quaternion quaternion = 6 [json_name = "quaternion"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_quaternion(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Orientation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.Orientation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.v1.Orientation.NoOrientation no_orientation = 1 [json_name = "noOrientation"];
  if (_internal_has_no_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::no_orientation(this),
        _Internal::no_orientation(this).GetCachedSize(), target, stream);
  }

  // .viam.app.v1.Orientation.OrientationVectorRadians vector_radians = 2 [json_name = "vectorRadians"];
  if (_internal_has_vector_radians()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vector_radians(this),
        _Internal::vector_radians(this).GetCachedSize(), target, stream);
  }

  // .viam.app.v1.Orientation.OrientationVectorDegrees vector_degrees = 3 [json_name = "vectorDegrees"];
  if (_internal_has_vector_degrees()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::vector_degrees(this),
        _Internal::vector_degrees(this).GetCachedSize(), target, stream);
  }

  // .viam.app.v1.Orientation.EulerAngles euler_angles = 4 [json_name = "eulerAngles"];
  if (_internal_has_euler_angles()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::euler_angles(this),
        _Internal::euler_angles(this).GetCachedSize(), target, stream);
  }

  // .viam.app.v1.Orientation.AxisAngles axis_angles = 5 [json_name = "axisAngles"];
  if (_internal_has_axis_angles()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::axis_angles(this),
        _Internal::axis_angles(this).GetCachedSize(), target, stream);
  }

  // .viam.app.v1.Orientation.Quaternion quaternion = 6 [json_name = "quaternion"];
  if (_internal_has_quaternion()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::quaternion(this),
        _Internal::quaternion(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.Orientation)
  return target;
}

size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.Orientation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .viam.app.v1.Orientation.NoOrientation no_orientation = 1 [json_name = "noOrientation"];
    case kNoOrientation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.no_orientation_);
      break;
    }
    // .viam.app.v1.Orientation.OrientationVectorRadians vector_radians = 2 [json_name = "vectorRadians"];
    case kVectorRadians: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.vector_radians_);
      break;
    }
    // .viam.app.v1.Orientation.OrientationVectorDegrees vector_degrees = 3 [json_name = "vectorDegrees"];
    case kVectorDegrees: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.vector_degrees_);
      break;
    }
    // .viam.app.v1.Orientation.EulerAngles euler_angles = 4 [json_name = "eulerAngles"];
    case kEulerAngles: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.euler_angles_);
      break;
    }
    // .viam.app.v1.Orientation.AxisAngles axis_angles = 5 [json_name = "axisAngles"];
    case kAxisAngles: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.axis_angles_);
      break;
    }
    // .viam.app.v1.Orientation.Quaternion quaternion = 6 [json_name = "quaternion"];
    case kQuaternion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.quaternion_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Orientation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation::GetClassData() const { return &_class_data_; }

void Orientation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Orientation *>(to)->MergeFrom(
      static_cast<const Orientation &>(from));
}


void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kNoOrientation: {
      _internal_mutable_no_orientation()->::viam::app::v1::Orientation_NoOrientation::MergeFrom(from._internal_no_orientation());
      break;
    }
    case kVectorRadians: {
      _internal_mutable_vector_radians()->::viam::app::v1::Orientation_OrientationVectorRadians::MergeFrom(from._internal_vector_radians());
      break;
    }
    case kVectorDegrees: {
      _internal_mutable_vector_degrees()->::viam::app::v1::Orientation_OrientationVectorDegrees::MergeFrom(from._internal_vector_degrees());
      break;
    }
    case kEulerAngles: {
      _internal_mutable_euler_angles()->::viam::app::v1::Orientation_EulerAngles::MergeFrom(from._internal_euler_angles());
      break;
    }
    case kAxisAngles: {
      _internal_mutable_axis_angles()->::viam::app::v1::Orientation_AxisAngles::MergeFrom(from._internal_axis_angles());
      break;
    }
    case kQuaternion: {
      _internal_mutable_quaternion()->::viam::app::v1::Orientation_Quaternion::MergeFrom(from._internal_quaternion());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  return true;
}

void Orientation::InternalSwap(Orientation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[21]);
}

// ===================================================================

class RemoteConfig::_Internal {
 public:
  static const ::viam::app::v1::Frame& frame(const RemoteConfig* msg);
  static const ::viam::app::v1::RemoteAuth& auth(const RemoteConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& connection_check_interval(const RemoteConfig* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& reconnect_interval(const RemoteConfig* msg);
};

const ::viam::app::v1::Frame&
RemoteConfig::_Internal::frame(const RemoteConfig* msg) {
  return *msg->frame_;
}
const ::viam::app::v1::RemoteAuth&
RemoteConfig::_Internal::auth(const RemoteConfig* msg) {
  return *msg->auth_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
RemoteConfig::_Internal::connection_check_interval(const RemoteConfig* msg) {
  return *msg->connection_check_interval_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
RemoteConfig::_Internal::reconnect_interval(const RemoteConfig* msg) {
  return *msg->reconnect_interval_;
}
void RemoteConfig::clear_connection_check_interval() {
  if (GetArenaForAllocation() == nullptr && connection_check_interval_ != nullptr) {
    delete connection_check_interval_;
  }
  connection_check_interval_ = nullptr;
}
void RemoteConfig::clear_reconnect_interval() {
  if (GetArenaForAllocation() == nullptr && reconnect_interval_ != nullptr) {
    delete reconnect_interval_;
  }
  reconnect_interval_ = nullptr;
}
RemoteConfig::RemoteConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  service_configs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.RemoteConfig)
}
RemoteConfig::RemoteConfig(const RemoteConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      service_configs_(from.service_configs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(from._internal_address(), 
      GetArenaForAllocation());
  }
  managed_by_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    managed_by_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_managed_by().empty()) {
    managed_by_.Set(from._internal_managed_by(), 
      GetArenaForAllocation());
  }
  secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret().empty()) {
    secret_.Set(from._internal_secret(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_frame()) {
    frame_ = new ::viam::app::v1::Frame(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  if (from._internal_has_auth()) {
    auth_ = new ::viam::app::v1::RemoteAuth(*from.auth_);
  } else {
    auth_ = nullptr;
  }
  if (from._internal_has_connection_check_interval()) {
    connection_check_interval_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.connection_check_interval_);
  } else {
    connection_check_interval_ = nullptr;
  }
  if (from._internal_has_reconnect_interval()) {
    reconnect_interval_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.reconnect_interval_);
  } else {
    reconnect_interval_ = nullptr;
  }
  insecure_ = from.insecure_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.RemoteConfig)
}

inline void RemoteConfig::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
managed_by_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  managed_by_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
secret_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  secret_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frame_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&insecure_) -
    reinterpret_cast<char*>(&frame_)) + sizeof(insecure_));
}

RemoteConfig::~RemoteConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.RemoteConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  address_.Destroy();
  managed_by_.Destroy();
  secret_.Destroy();
  if (this != internal_default_instance()) delete frame_;
  if (this != internal_default_instance()) delete auth_;
  if (this != internal_default_instance()) delete connection_check_interval_;
  if (this != internal_default_instance()) delete reconnect_interval_;
}

void RemoteConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoteConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.RemoteConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_configs_.Clear();
  name_.ClearToEmpty();
  address_.ClearToEmpty();
  managed_by_.ClearToEmpty();
  secret_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && frame_ != nullptr) {
    delete frame_;
  }
  frame_ = nullptr;
  if (GetArenaForAllocation() == nullptr && auth_ != nullptr) {
    delete auth_;
  }
  auth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && connection_check_interval_ != nullptr) {
    delete connection_check_interval_;
  }
  connection_check_interval_ = nullptr;
  if (GetArenaForAllocation() == nullptr && reconnect_interval_ != nullptr) {
    delete reconnect_interval_;
  }
  reconnect_interval_ = nullptr;
  insecure_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.RemoteConfig.name"));
        } else
          goto handle_unusual;
        continue;
      // string address = 2 [json_name = "address"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.RemoteConfig.address"));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.v1.Frame frame = 3 [json_name = "frame"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.v1.RemoteAuth auth = 4 [json_name = "auth"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string managed_by = 5 [json_name = "managedBy"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_managed_by();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.RemoteConfig.managed_by"));
        } else
          goto handle_unusual;
        continue;
      // bool insecure = 6 [json_name = "insecure"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          insecure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration connection_check_interval = 7 [json_name = "connectionCheckInterval"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_check_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration reconnect_interval = 8 [json_name = "reconnectInterval"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_reconnect_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.ResourceLevelServiceConfig service_configs = 9 [json_name = "serviceConfigs", (.tagger.v1.tags) = "json:\"service_config\""];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_service_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string secret = 10 [json_name = "secret"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.RemoteConfig.secret"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.RemoteConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.RemoteConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.RemoteConfig.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // .viam.app.v1.Frame frame = 3 [json_name = "frame"];
  if (this->_internal_has_frame()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::frame(this),
        _Internal::frame(this).GetCachedSize(), target, stream);
  }

  // .viam.app.v1.RemoteAuth auth = 4 [json_name = "auth"];
  if (this->_internal_has_auth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::auth(this),
        _Internal::auth(this).GetCachedSize(), target, stream);
  }

  // string managed_by = 5 [json_name = "managedBy"];
  if (!this->_internal_managed_by().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_managed_by().data(), static_cast<int>(this->_internal_managed_by().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.RemoteConfig.managed_by");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_managed_by(), target);
  }

  // bool insecure = 6 [json_name = "insecure"];
  if (this->_internal_insecure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_insecure(), target);
  }

  // .google.protobuf.Duration connection_check_interval = 7 [json_name = "connectionCheckInterval"];
  if (this->_internal_has_connection_check_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::connection_check_interval(this),
        _Internal::connection_check_interval(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration reconnect_interval = 8 [json_name = "reconnectInterval"];
  if (this->_internal_has_reconnect_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::reconnect_interval(this),
        _Internal::reconnect_interval(this).GetCachedSize(), target, stream);
  }

  // repeated .viam.app.v1.ResourceLevelServiceConfig service_configs = 9 [json_name = "serviceConfigs", (.tagger.v1.tags) = "json:\"service_config\""];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_service_configs_size()); i < n; i++) {
    const auto& repfield = this->_internal_service_configs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string secret = 10 [json_name = "secret"];
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.RemoteConfig.secret");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.RemoteConfig)
  return target;
}

size_t RemoteConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.RemoteConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.v1.ResourceLevelServiceConfig service_configs = 9 [json_name = "serviceConfigs", (.tagger.v1.tags) = "json:\"service_config\""];
  total_size += 1UL * this->_internal_service_configs_size();
  for (const auto& msg : this->service_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string address = 2 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string managed_by = 5 [json_name = "managedBy"];
  if (!this->_internal_managed_by().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_managed_by());
  }

  // string secret = 10 [json_name = "secret"];
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // .viam.app.v1.Frame frame = 3 [json_name = "frame"];
  if (this->_internal_has_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frame_);
  }

  // .viam.app.v1.RemoteAuth auth = 4 [json_name = "auth"];
  if (this->_internal_has_auth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_);
  }

  // .google.protobuf.Duration connection_check_interval = 7 [json_name = "connectionCheckInterval"];
  if (this->_internal_has_connection_check_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *connection_check_interval_);
  }

  // .google.protobuf.Duration reconnect_interval = 8 [json_name = "reconnectInterval"];
  if (this->_internal_has_reconnect_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reconnect_interval_);
  }

  // bool insecure = 6 [json_name = "insecure"];
  if (this->_internal_insecure() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoteConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteConfig::GetClassData() const { return &_class_data_; }

void RemoteConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoteConfig *>(to)->MergeFrom(
      static_cast<const RemoteConfig &>(from));
}


void RemoteConfig::MergeFrom(const RemoteConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.RemoteConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  service_configs_.MergeFrom(from.service_configs_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_managed_by().empty()) {
    _internal_set_managed_by(from._internal_managed_by());
  }
  if (!from._internal_secret().empty()) {
    _internal_set_secret(from._internal_secret());
  }
  if (from._internal_has_frame()) {
    _internal_mutable_frame()->::viam::app::v1::Frame::MergeFrom(from._internal_frame());
  }
  if (from._internal_has_auth()) {
    _internal_mutable_auth()->::viam::app::v1::RemoteAuth::MergeFrom(from._internal_auth());
  }
  if (from._internal_has_connection_check_interval()) {
    _internal_mutable_connection_check_interval()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_connection_check_interval());
  }
  if (from._internal_has_reconnect_interval()) {
    _internal_mutable_reconnect_interval()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_reconnect_interval());
  }
  if (from._internal_insecure() != 0) {
    _internal_set_insecure(from._internal_insecure());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteConfig::CopyFrom(const RemoteConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.RemoteConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteConfig::IsInitialized() const {
  return true;
}

void RemoteConfig::InternalSwap(RemoteConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  service_configs_.InternalSwap(&other->service_configs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &managed_by_, lhs_arena,
      &other->managed_by_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &secret_, lhs_arena,
      &other->secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteConfig, insecure_)
      + sizeof(RemoteConfig::insecure_)
      - PROTOBUF_FIELD_OFFSET(RemoteConfig, frame_)>(
          reinterpret_cast<char*>(&frame_),
          reinterpret_cast<char*>(&other->frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[22]);
}

// ===================================================================

class RemoteAuth_Credentials::_Internal {
 public:
};

RemoteAuth_Credentials::RemoteAuth_Credentials(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.RemoteAuth.Credentials)
}
RemoteAuth_Credentials::RemoteAuth_Credentials(const RemoteAuth_Credentials& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    payload_.Set(from._internal_payload(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.RemoteAuth.Credentials)
}

inline void RemoteAuth_Credentials::SharedCtor() {
payload_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

RemoteAuth_Credentials::~RemoteAuth_Credentials() {
  // @@protoc_insertion_point(destructor:viam.app.v1.RemoteAuth.Credentials)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteAuth_Credentials::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.Destroy();
}

void RemoteAuth_Credentials::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoteAuth_Credentials::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.RemoteAuth.Credentials)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteAuth_Credentials::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.v1.CredentialsType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::viam::app::v1::CredentialsType>(val));
        } else
          goto handle_unusual;
        continue;
      // string payload = 2 [json_name = "payload"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.RemoteAuth.Credentials.payload"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteAuth_Credentials::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.RemoteAuth.Credentials)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.v1.CredentialsType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string payload = 2 [json_name = "payload"];
  if (!this->_internal_payload().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payload().data(), static_cast<int>(this->_internal_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.RemoteAuth.Credentials.payload");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.RemoteAuth.Credentials)
  return target;
}

size_t RemoteAuth_Credentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.RemoteAuth.Credentials)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payload = 2 [json_name = "payload"];
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payload());
  }

  // .viam.app.v1.CredentialsType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteAuth_Credentials::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoteAuth_Credentials::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteAuth_Credentials::GetClassData() const { return &_class_data_; }

void RemoteAuth_Credentials::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoteAuth_Credentials *>(to)->MergeFrom(
      static_cast<const RemoteAuth_Credentials &>(from));
}


void RemoteAuth_Credentials::MergeFrom(const RemoteAuth_Credentials& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.RemoteAuth.Credentials)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteAuth_Credentials::CopyFrom(const RemoteAuth_Credentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.RemoteAuth.Credentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteAuth_Credentials::IsInitialized() const {
  return true;
}

void RemoteAuth_Credentials::InternalSwap(RemoteAuth_Credentials* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteAuth_Credentials::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[23]);
}

// ===================================================================

class RemoteAuth::_Internal {
 public:
  static const ::viam::app::v1::RemoteAuth_Credentials& credentials(const RemoteAuth* msg);
};

const ::viam::app::v1::RemoteAuth_Credentials&
RemoteAuth::_Internal::credentials(const RemoteAuth* msg) {
  return *msg->credentials_;
}
RemoteAuth::RemoteAuth(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.RemoteAuth)
}
RemoteAuth::RemoteAuth(const RemoteAuth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    entity_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_entity().empty()) {
    entity_.Set(from._internal_entity(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_credentials()) {
    credentials_ = new ::viam::app::v1::RemoteAuth_Credentials(*from.credentials_);
  } else {
    credentials_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.RemoteAuth)
}

inline void RemoteAuth::SharedCtor() {
entity_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  entity_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
credentials_ = nullptr;
}

RemoteAuth::~RemoteAuth() {
  // @@protoc_insertion_point(destructor:viam.app.v1.RemoteAuth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteAuth::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  entity_.Destroy();
  if (this != internal_default_instance()) delete credentials_;
}

void RemoteAuth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoteAuth::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.RemoteAuth)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && credentials_ != nullptr) {
    delete credentials_;
  }
  credentials_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteAuth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.v1.RemoteAuth.Credentials credentials = 1 [json_name = "credentials"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_credentials(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string entity = 2 [json_name = "entity"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_entity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.RemoteAuth.entity"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteAuth::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.RemoteAuth)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.v1.RemoteAuth.Credentials credentials = 1 [json_name = "credentials"];
  if (this->_internal_has_credentials()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::credentials(this),
        _Internal::credentials(this).GetCachedSize(), target, stream);
  }

  // string entity = 2 [json_name = "entity"];
  if (!this->_internal_entity().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity().data(), static_cast<int>(this->_internal_entity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.RemoteAuth.entity");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.RemoteAuth)
  return target;
}

size_t RemoteAuth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.RemoteAuth)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity = 2 [json_name = "entity"];
  if (!this->_internal_entity().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity());
  }

  // .viam.app.v1.RemoteAuth.Credentials credentials = 1 [json_name = "credentials"];
  if (this->_internal_has_credentials()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *credentials_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteAuth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoteAuth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteAuth::GetClassData() const { return &_class_data_; }

void RemoteAuth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoteAuth *>(to)->MergeFrom(
      static_cast<const RemoteAuth &>(from));
}


void RemoteAuth::MergeFrom(const RemoteAuth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.RemoteAuth)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity().empty()) {
    _internal_set_entity(from._internal_entity());
  }
  if (from._internal_has_credentials()) {
    _internal_mutable_credentials()->::viam::app::v1::RemoteAuth_Credentials::MergeFrom(from._internal_credentials());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteAuth::CopyFrom(const RemoteAuth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.RemoteAuth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteAuth::IsInitialized() const {
  return true;
}

void RemoteAuth::InternalSwap(RemoteAuth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &entity_, lhs_arena,
      &other->entity_, rhs_arena
  );
  swap(credentials_, other->credentials_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteAuth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[24]);
}

// ===================================================================

class AgentInfo::_Internal {
 public:
};

AgentInfo::AgentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ips_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.AgentInfo)
}
AgentInfo::AgentInfo(const AgentInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ips_(from.ips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    host_.Set(from._internal_host(), 
      GetArenaForAllocation());
  }
  os_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    os_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_os().empty()) {
    os_.Set(from._internal_os(), 
      GetArenaForAllocation());
  }
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  git_revision_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    git_revision_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_git_revision().empty()) {
    git_revision_.Set(from._internal_git_revision(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.AgentInfo)
}

inline void AgentInfo::SharedCtor() {
host_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
os_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  os_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
git_revision_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  git_revision_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AgentInfo::~AgentInfo() {
  // @@protoc_insertion_point(destructor:viam.app.v1.AgentInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_.Destroy();
  os_.Destroy();
  version_.Destroy();
  git_revision_.Destroy();
}

void AgentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.AgentInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ips_.Clear();
  host_.ClearToEmpty();
  os_.ClearToEmpty();
  version_.ClearToEmpty();
  git_revision_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1 [json_name = "host"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.AgentInfo.host"));
        } else
          goto handle_unusual;
        continue;
      // string os = 2 [json_name = "os"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_os();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.AgentInfo.os"));
        } else
          goto handle_unusual;
        continue;
      // repeated string ips = 3 [json_name = "ips"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ips();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.AgentInfo.ips"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string version = 4 [json_name = "version"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.AgentInfo.version"));
        } else
          goto handle_unusual;
        continue;
      // string git_revision = 5 [json_name = "gitRevision"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_git_revision();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.AgentInfo.git_revision"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.AgentInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1 [json_name = "host"];
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.AgentInfo.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // string os = 2 [json_name = "os"];
  if (!this->_internal_os().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.AgentInfo.os");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_os(), target);
  }

  // repeated string ips = 3 [json_name = "ips"];
  for (int i = 0, n = this->_internal_ips_size(); i < n; i++) {
    const auto& s = this->_internal_ips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.AgentInfo.ips");
    target = stream->WriteString(3, s, target);
  }

  // string version = 4 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.AgentInfo.version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version(), target);
  }

  // string git_revision = 5 [json_name = "gitRevision"];
  if (!this->_internal_git_revision().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_git_revision().data(), static_cast<int>(this->_internal_git_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.AgentInfo.git_revision");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_git_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.AgentInfo)
  return target;
}

size_t AgentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.AgentInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ips = 3 [json_name = "ips"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ips_.size());
  for (int i = 0, n = ips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ips_.Get(i));
  }

  // string host = 1 [json_name = "host"];
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string os = 2 [json_name = "os"];
  if (!this->_internal_os().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  // string version = 4 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string git_revision = 5 [json_name = "gitRevision"];
  if (!this->_internal_git_revision().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_git_revision());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AgentInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentInfo::GetClassData() const { return &_class_data_; }

void AgentInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AgentInfo *>(to)->MergeFrom(
      static_cast<const AgentInfo &>(from));
}


void AgentInfo::MergeFrom(const AgentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.AgentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ips_.MergeFrom(from.ips_);
  if (!from._internal_host().empty()) {
    _internal_set_host(from._internal_host());
  }
  if (!from._internal_os().empty()) {
    _internal_set_os(from._internal_os());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_git_revision().empty()) {
    _internal_set_git_revision(from._internal_git_revision());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentInfo::CopyFrom(const AgentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.AgentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentInfo::IsInitialized() const {
  return true;
}

void AgentInfo::InternalSwap(AgentInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ips_.InternalSwap(&other->ips_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &host_, lhs_arena,
      &other->host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &os_, lhs_arena,
      &other->os_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &git_revision_, lhs_arena,
      &other->git_revision_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[25]);
}

// ===================================================================

class ConfigRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigRequest>()._has_bits_);
  static const ::viam::app::v1::AgentInfo& agent_info(const ConfigRequest* msg);
  static void set_has_agent_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::viam::app::v1::AgentInfo&
ConfigRequest::_Internal::agent_info(const ConfigRequest* msg) {
  return *msg->agent_info_;
}
ConfigRequest::ConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.ConfigRequest)
}
ConfigRequest::ConfigRequest(const ConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_agent_info()) {
    agent_info_ = new ::viam::app::v1::AgentInfo(*from.agent_info_);
  } else {
    agent_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.ConfigRequest)
}

inline void ConfigRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
agent_info_ = nullptr;
}

ConfigRequest::~ConfigRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.ConfigRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  if (this != internal_default_instance()) delete agent_info_;
}

void ConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.ConfigRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(agent_info_ != nullptr);
    agent_info_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ConfigRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // optional .viam.app.v1.AgentInfo agent_info = 2 [json_name = "agentInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.ConfigRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ConfigRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional .viam.app.v1.AgentInfo agent_info = 2 [json_name = "agentInfo"];
  if (_internal_has_agent_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::agent_info(this),
        _Internal::agent_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.ConfigRequest)
  return target;
}

size_t ConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.ConfigRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // optional .viam.app.v1.AgentInfo agent_info = 2 [json_name = "agentInfo"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigRequest::GetClassData() const { return &_class_data_; }

void ConfigRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigRequest *>(to)->MergeFrom(
      static_cast<const ConfigRequest &>(from));
}


void ConfigRequest::MergeFrom(const ConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.ConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_agent_info()) {
    _internal_mutable_agent_info()->::viam::app::v1::AgentInfo::MergeFrom(from._internal_agent_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigRequest::CopyFrom(const ConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.ConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRequest::IsInitialized() const {
  return true;
}

void ConfigRequest::InternalSwap(ConfigRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(agent_info_, other->agent_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[26]);
}

// ===================================================================

class ConfigResponse::_Internal {
 public:
  static const ::viam::app::v1::RobotConfig& config(const ConfigResponse* msg);
};

const ::viam::app::v1::RobotConfig&
ConfigResponse::_Internal::config(const ConfigResponse* msg) {
  return *msg->config_;
}
ConfigResponse::ConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.ConfigResponse)
}
ConfigResponse::ConfigResponse(const ConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_config()) {
    config_ = new ::viam::app::v1::RobotConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.ConfigResponse)
}

inline void ConfigResponse::SharedCtor() {
config_ = nullptr;
}

ConfigResponse::~ConfigResponse() {
  // @@protoc_insertion_point(destructor:viam.app.v1.ConfigResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete config_;
}

void ConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.ConfigResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.v1.RobotConfig config = 1 [json_name = "config"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConfigResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.ConfigResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.v1.RobotConfig config = 1 [json_name = "config"];
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.ConfigResponse)
  return target;
}

size_t ConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.ConfigResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.v1.RobotConfig config = 1 [json_name = "config"];
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigResponse::GetClassData() const { return &_class_data_; }

void ConfigResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConfigResponse *>(to)->MergeFrom(
      static_cast<const ConfigResponse &>(from));
}


void ConfigResponse::MergeFrom(const ConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.ConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_config()) {
    _internal_mutable_config()->::viam::app::v1::RobotConfig::MergeFrom(from._internal_config());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigResponse::CopyFrom(const ConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.ConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigResponse::IsInitialized() const {
  return true;
}

void ConfigResponse::InternalSwap(ConfigResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[27]);
}

// ===================================================================

class CertificateRequest::_Internal {
 public:
};

CertificateRequest::CertificateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.CertificateRequest)
}
CertificateRequest::CertificateRequest(const CertificateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.CertificateRequest)
}

inline void CertificateRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CertificateRequest::~CertificateRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.CertificateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CertificateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void CertificateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CertificateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.CertificateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CertificateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.CertificateRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CertificateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.CertificateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.CertificateRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.CertificateRequest)
  return target;
}

size_t CertificateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.CertificateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CertificateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CertificateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CertificateRequest::GetClassData() const { return &_class_data_; }

void CertificateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CertificateRequest *>(to)->MergeFrom(
      static_cast<const CertificateRequest &>(from));
}


void CertificateRequest::MergeFrom(const CertificateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.CertificateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CertificateRequest::CopyFrom(const CertificateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.CertificateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateRequest::IsInitialized() const {
  return true;
}

void CertificateRequest::InternalSwap(CertificateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CertificateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[28]);
}

// ===================================================================

class CertificateResponse::_Internal {
 public:
};

CertificateResponse::CertificateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.CertificateResponse)
}
CertificateResponse::CertificateResponse(const CertificateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  tls_certificate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tls_certificate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tls_certificate().empty()) {
    tls_certificate_.Set(from._internal_tls_certificate(), 
      GetArenaForAllocation());
  }
  tls_private_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tls_private_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tls_private_key().empty()) {
    tls_private_key_.Set(from._internal_tls_private_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.CertificateResponse)
}

inline void CertificateResponse::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tls_certificate_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tls_certificate_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tls_private_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tls_private_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CertificateResponse::~CertificateResponse() {
  // @@protoc_insertion_point(destructor:viam.app.v1.CertificateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CertificateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  tls_certificate_.Destroy();
  tls_private_key_.Destroy();
}

void CertificateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CertificateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.CertificateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  tls_certificate_.ClearToEmpty();
  tls_private_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CertificateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.CertificateResponse.id"));
        } else
          goto handle_unusual;
        continue;
      // string tls_certificate = 2 [json_name = "tlsCertificate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tls_certificate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.CertificateResponse.tls_certificate"));
        } else
          goto handle_unusual;
        continue;
      // string tls_private_key = 3 [json_name = "tlsPrivateKey"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tls_private_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.CertificateResponse.tls_private_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CertificateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.CertificateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.CertificateResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string tls_certificate = 2 [json_name = "tlsCertificate"];
  if (!this->_internal_tls_certificate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tls_certificate().data(), static_cast<int>(this->_internal_tls_certificate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.CertificateResponse.tls_certificate");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tls_certificate(), target);
  }

  // string tls_private_key = 3 [json_name = "tlsPrivateKey"];
  if (!this->_internal_tls_private_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tls_private_key().data(), static_cast<int>(this->_internal_tls_private_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.CertificateResponse.tls_private_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tls_private_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.CertificateResponse)
  return target;
}

size_t CertificateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.CertificateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string tls_certificate = 2 [json_name = "tlsCertificate"];
  if (!this->_internal_tls_certificate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tls_certificate());
  }

  // string tls_private_key = 3 [json_name = "tlsPrivateKey"];
  if (!this->_internal_tls_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tls_private_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CertificateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CertificateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CertificateResponse::GetClassData() const { return &_class_data_; }

void CertificateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CertificateResponse *>(to)->MergeFrom(
      static_cast<const CertificateResponse &>(from));
}


void CertificateResponse::MergeFrom(const CertificateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.CertificateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_tls_certificate().empty()) {
    _internal_set_tls_certificate(from._internal_tls_certificate());
  }
  if (!from._internal_tls_private_key().empty()) {
    _internal_set_tls_private_key(from._internal_tls_private_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CertificateResponse::CopyFrom(const CertificateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.CertificateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CertificateResponse::IsInitialized() const {
  return true;
}

void CertificateResponse::InternalSwap(CertificateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tls_certificate_, lhs_arena,
      &other->tls_certificate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tls_private_key_, lhs_arena,
      &other->tls_private_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CertificateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[29]);
}

// ===================================================================

class LogRequest::_Internal {
 public:
};

void LogRequest::clear_logs() {
  logs_.Clear();
}
LogRequest::LogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  logs_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.LogRequest)
}
LogRequest::LogRequest(const LogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      logs_(from.logs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.LogRequest)
}

inline void LogRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogRequest::~LogRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.LogRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void LogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.LogRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logs_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.LogRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.LogEntry logs = 2 [json_name = "logs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.LogRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.LogRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .viam.app.v1.LogEntry logs = 2 [json_name = "logs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_logs_size()); i < n; i++) {
    const auto& repfield = this->_internal_logs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.LogRequest)
  return target;
}

size_t LogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.LogRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.v1.LogEntry logs = 2 [json_name = "logs"];
  total_size += 1UL * this->_internal_logs_size();
  for (const auto& msg : this->logs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogRequest::GetClassData() const { return &_class_data_; }

void LogRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogRequest *>(to)->MergeFrom(
      static_cast<const LogRequest &>(from));
}


void LogRequest::MergeFrom(const LogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.LogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  logs_.MergeFrom(from.logs_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogRequest::CopyFrom(const LogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.LogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRequest::IsInitialized() const {
  return true;
}

void LogRequest::InternalSwap(LogRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  logs_.InternalSwap(&other->logs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LogRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[30]);
}

// ===================================================================

class LogResponse::_Internal {
 public:
};

LogResponse::LogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.LogResponse)
}
LogResponse::LogResponse(const LogResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.LogResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LogResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[31]);
}

// ===================================================================

class NeedsRestartRequest::_Internal {
 public:
};

NeedsRestartRequest::NeedsRestartRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.NeedsRestartRequest)
}
NeedsRestartRequest::NeedsRestartRequest(const NeedsRestartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.NeedsRestartRequest)
}

inline void NeedsRestartRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NeedsRestartRequest::~NeedsRestartRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.NeedsRestartRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NeedsRestartRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void NeedsRestartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NeedsRestartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.NeedsRestartRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NeedsRestartRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.NeedsRestartRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NeedsRestartRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.NeedsRestartRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.NeedsRestartRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.NeedsRestartRequest)
  return target;
}

size_t NeedsRestartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.NeedsRestartRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NeedsRestartRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NeedsRestartRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NeedsRestartRequest::GetClassData() const { return &_class_data_; }

void NeedsRestartRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NeedsRestartRequest *>(to)->MergeFrom(
      static_cast<const NeedsRestartRequest &>(from));
}


void NeedsRestartRequest::MergeFrom(const NeedsRestartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.NeedsRestartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NeedsRestartRequest::CopyFrom(const NeedsRestartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.NeedsRestartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeedsRestartRequest::IsInitialized() const {
  return true;
}

void NeedsRestartRequest::InternalSwap(NeedsRestartRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NeedsRestartRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[32]);
}

// ===================================================================

class NeedsRestartResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& restart_check_interval(const NeedsRestartResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
NeedsRestartResponse::_Internal::restart_check_interval(const NeedsRestartResponse* msg) {
  return *msg->restart_check_interval_;
}
void NeedsRestartResponse::clear_restart_check_interval() {
  if (GetArenaForAllocation() == nullptr && restart_check_interval_ != nullptr) {
    delete restart_check_interval_;
  }
  restart_check_interval_ = nullptr;
}
NeedsRestartResponse::NeedsRestartResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.NeedsRestartResponse)
}
NeedsRestartResponse::NeedsRestartResponse(const NeedsRestartResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_restart_check_interval()) {
    restart_check_interval_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.restart_check_interval_);
  } else {
    restart_check_interval_ = nullptr;
  }
  must_restart_ = from.must_restart_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.NeedsRestartResponse)
}

inline void NeedsRestartResponse::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&restart_check_interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&must_restart_) -
    reinterpret_cast<char*>(&restart_check_interval_)) + sizeof(must_restart_));
}

NeedsRestartResponse::~NeedsRestartResponse() {
  // @@protoc_insertion_point(destructor:viam.app.v1.NeedsRestartResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NeedsRestartResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  if (this != internal_default_instance()) delete restart_check_interval_;
}

void NeedsRestartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NeedsRestartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.NeedsRestartResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && restart_check_interval_ != nullptr) {
    delete restart_check_interval_;
  }
  restart_check_interval_ = nullptr;
  must_restart_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NeedsRestartResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.NeedsRestartResponse.id"));
        } else
          goto handle_unusual;
        continue;
      // bool must_restart = 2 [json_name = "mustRestart"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          must_restart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration restart_check_interval = 3 [json_name = "restartCheckInterval"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_restart_check_interval(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NeedsRestartResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.NeedsRestartResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.NeedsRestartResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bool must_restart = 2 [json_name = "mustRestart"];
  if (this->_internal_must_restart() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_must_restart(), target);
  }

  // .google.protobuf.Duration restart_check_interval = 3 [json_name = "restartCheckInterval"];
  if (this->_internal_has_restart_check_interval()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::restart_check_interval(this),
        _Internal::restart_check_interval(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.NeedsRestartResponse)
  return target;
}

size_t NeedsRestartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.NeedsRestartResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.Duration restart_check_interval = 3 [json_name = "restartCheckInterval"];
  if (this->_internal_has_restart_check_interval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *restart_check_interval_);
  }

  // bool must_restart = 2 [json_name = "mustRestart"];
  if (this->_internal_must_restart() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NeedsRestartResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NeedsRestartResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NeedsRestartResponse::GetClassData() const { return &_class_data_; }

void NeedsRestartResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NeedsRestartResponse *>(to)->MergeFrom(
      static_cast<const NeedsRestartResponse &>(from));
}


void NeedsRestartResponse::MergeFrom(const NeedsRestartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.NeedsRestartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_restart_check_interval()) {
    _internal_mutable_restart_check_interval()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_restart_check_interval());
  }
  if (from._internal_must_restart() != 0) {
    _internal_set_must_restart(from._internal_must_restart());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NeedsRestartResponse::CopyFrom(const NeedsRestartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.NeedsRestartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeedsRestartResponse::IsInitialized() const {
  return true;
}

void NeedsRestartResponse::InternalSwap(NeedsRestartResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NeedsRestartResponse, must_restart_)
      + sizeof(NeedsRestartResponse::must_restart_)
      - PROTOBUF_FIELD_OFFSET(NeedsRestartResponse, restart_check_interval_)>(
          reinterpret_cast<char*>(&restart_check_interval_),
          reinterpret_cast<char*>(&other->restart_check_interval_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NeedsRestartResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[33]);
}

// ===================================================================

class ModuleConfig::_Internal {
 public:
};

ModuleConfig::ModuleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.ModuleConfig)
}
ModuleConfig::ModuleConfig(const ModuleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.ModuleConfig)
}

inline void ModuleConfig::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ModuleConfig::~ModuleConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.ModuleConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ModuleConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  path_.Destroy();
}

void ModuleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModuleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.ModuleConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModuleConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ModuleConfig.name"));
        } else
          goto handle_unusual;
        continue;
      // string path = 2 [json_name = "path"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.ModuleConfig.path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModuleConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.ModuleConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ModuleConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string path = 2 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.ModuleConfig.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.ModuleConfig)
  return target;
}

size_t ModuleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.ModuleConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 2 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModuleConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModuleConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModuleConfig::GetClassData() const { return &_class_data_; }

void ModuleConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModuleConfig *>(to)->MergeFrom(
      static_cast<const ModuleConfig &>(from));
}


void ModuleConfig::MergeFrom(const ModuleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.ModuleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModuleConfig::CopyFrom(const ModuleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.ModuleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleConfig::IsInitialized() const {
  return true;
}

void ModuleConfig::InternalSwap(ModuleConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ModuleConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[34]);
}

// ===================================================================

class PackageConfig::_Internal {
 public:
};

PackageConfig::PackageConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.PackageConfig)
}
PackageConfig::PackageConfig(const PackageConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  package_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    package_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_package().empty()) {
    package_.Set(from._internal_package(), 
      GetArenaForAllocation());
  }
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.PackageConfig)
}

inline void PackageConfig::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
package_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  package_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PackageConfig::~PackageConfig() {
  // @@protoc_insertion_point(destructor:viam.app.v1.PackageConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PackageConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  package_.Destroy();
  version_.Destroy();
}

void PackageConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PackageConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.PackageConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  package_.ClearToEmpty();
  version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PackageConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.PackageConfig.name"));
        } else
          goto handle_unusual;
        continue;
      // string package = 2 [json_name = "package"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_package();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.PackageConfig.package"));
        } else
          goto handle_unusual;
        continue;
      // string version = 3 [json_name = "version"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.PackageConfig.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PackageConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.PackageConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.PackageConfig.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string package = 2 [json_name = "package"];
  if (!this->_internal_package().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_package().data(), static_cast<int>(this->_internal_package().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.PackageConfig.package");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_package(), target);
  }

  // string version = 3 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.PackageConfig.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.PackageConfig)
  return target;
}

size_t PackageConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.PackageConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string package = 2 [json_name = "package"];
  if (!this->_internal_package().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_package());
  }

  // string version = 3 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PackageConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PackageConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PackageConfig::GetClassData() const { return &_class_data_; }

void PackageConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PackageConfig *>(to)->MergeFrom(
      static_cast<const PackageConfig &>(from));
}


void PackageConfig::MergeFrom(const PackageConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.PackageConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_package().empty()) {
    _internal_set_package(from._internal_package());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PackageConfig::CopyFrom(const PackageConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.PackageConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageConfig::IsInitialized() const {
  return true;
}

void PackageConfig::InternalSwap(PackageConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &package_, lhs_arena,
      &other->package_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PackageConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2frobot_2eproto_getter, &descriptor_table_app_2fv1_2frobot_2eproto_once,
      file_level_metadata_app_2fv1_2frobot_2eproto[35]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::app::v1::RobotConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::RobotConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::RobotConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::LocationSecret*
Arena::CreateMaybeMessage< ::viam::app::v1::LocationSecret >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::LocationSecret >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::CloudConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::CloudConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::CloudConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::ComponentConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::ComponentConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::ComponentConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::ResourceLevelServiceConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::ResourceLevelServiceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::ResourceLevelServiceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::ProcessConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::ProcessConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::ProcessConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::ServiceConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::ServiceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::ServiceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::NetworkConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::NetworkConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::NetworkConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::AuthConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::AuthConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::AuthConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::JWKSFile*
Arena::CreateMaybeMessage< ::viam::app::v1::JWKSFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::JWKSFile >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::AuthHandlerWebOauthConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::AuthHandlerWebOauthConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::AuthHandlerWebOauthConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::ExternalAuthConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::ExternalAuthConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::ExternalAuthConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::AuthHandlerConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::AuthHandlerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::AuthHandlerConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::Frame*
Arena::CreateMaybeMessage< ::viam::app::v1::Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::Translation*
Arena::CreateMaybeMessage< ::viam::app::v1::Translation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::Translation >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::Orientation_NoOrientation*
Arena::CreateMaybeMessage< ::viam::app::v1::Orientation_NoOrientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::Orientation_NoOrientation >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::Orientation_OrientationVectorRadians*
Arena::CreateMaybeMessage< ::viam::app::v1::Orientation_OrientationVectorRadians >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::Orientation_OrientationVectorRadians >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::Orientation_OrientationVectorDegrees*
Arena::CreateMaybeMessage< ::viam::app::v1::Orientation_OrientationVectorDegrees >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::Orientation_OrientationVectorDegrees >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::Orientation_EulerAngles*
Arena::CreateMaybeMessage< ::viam::app::v1::Orientation_EulerAngles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::Orientation_EulerAngles >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::Orientation_AxisAngles*
Arena::CreateMaybeMessage< ::viam::app::v1::Orientation_AxisAngles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::Orientation_AxisAngles >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::Orientation_Quaternion*
Arena::CreateMaybeMessage< ::viam::app::v1::Orientation_Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::Orientation_Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::Orientation*
Arena::CreateMaybeMessage< ::viam::app::v1::Orientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::Orientation >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::RemoteConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::RemoteConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::RemoteConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::RemoteAuth_Credentials*
Arena::CreateMaybeMessage< ::viam::app::v1::RemoteAuth_Credentials >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::RemoteAuth_Credentials >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::RemoteAuth*
Arena::CreateMaybeMessage< ::viam::app::v1::RemoteAuth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::RemoteAuth >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::AgentInfo*
Arena::CreateMaybeMessage< ::viam::app::v1::AgentInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::AgentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::ConfigRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::ConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::ConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::ConfigResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::ConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::ConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::CertificateRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::CertificateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::CertificateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::CertificateResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::CertificateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::CertificateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::LogRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::LogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::LogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::LogResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::LogResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::LogResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::NeedsRestartRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::NeedsRestartRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::NeedsRestartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::NeedsRestartResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::NeedsRestartResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::NeedsRestartResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::ModuleConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::ModuleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::ModuleConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::PackageConfig*
Arena::CreateMaybeMessage< ::viam::app::v1::PackageConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::PackageConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
