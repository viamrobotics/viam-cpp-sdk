// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/v1/robot.proto
#ifndef GRPC_app_2fv1_2frobot_2eproto__INCLUDED
#define GRPC_app_2fv1_2frobot_2eproto__INCLUDED

#include "app/v1/robot.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace viam {
namespace app {
namespace v1 {

// RobotService is used by robots to retrieve configs, report logs, etc...
class RobotService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.app.v1.RobotService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Config requests the current robot config
    virtual ::grpc::Status Config(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest& request, ::viam::app::v1::ConfigResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ConfigResponse>> AsyncConfig(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ConfigResponse>>(AsyncConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ConfigResponse>> PrepareAsyncConfig(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ConfigResponse>>(PrepareAsyncConfigRaw(context, request, cq));
    }
    // Certificate requests the current robot certificate
    virtual ::grpc::Status Certificate(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest& request, ::viam::app::v1::CertificateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CertificateResponse>> AsyncCertificate(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CertificateResponse>>(AsyncCertificateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CertificateResponse>> PrepareAsyncCertificate(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CertificateResponse>>(PrepareAsyncCertificateRaw(context, request, cq));
    }
    // Log insert log entries associated with the robot. Allows up to 1000 entries to be added in one request.
    virtual ::grpc::Status Log(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest& request, ::viam::app::v1::LogResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::LogResponse>> AsyncLog(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::LogResponse>>(AsyncLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::LogResponse>> PrepareAsyncLog(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::LogResponse>>(PrepareAsyncLogRaw(context, request, cq));
    }
    // NeedsRestart returns if the robot should restart and the interval it should check to restart.
    virtual ::grpc::Status NeedsRestart(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest& request, ::viam::app::v1::NeedsRestartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NeedsRestartResponse>> AsyncNeedsRestart(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NeedsRestartResponse>>(AsyncNeedsRestartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NeedsRestartResponse>> PrepareAsyncNeedsRestart(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NeedsRestartResponse>>(PrepareAsyncNeedsRestartRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Config requests the current robot config
      virtual void Config(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest* request, ::viam::app::v1::ConfigResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Config(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest* request, ::viam::app::v1::ConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Certificate requests the current robot certificate
      virtual void Certificate(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest* request, ::viam::app::v1::CertificateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Certificate(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest* request, ::viam::app::v1::CertificateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Log insert log entries associated with the robot. Allows up to 1000 entries to be added in one request.
      virtual void Log(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest* request, ::viam::app::v1::LogResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Log(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest* request, ::viam::app::v1::LogResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // NeedsRestart returns if the robot should restart and the interval it should check to restart.
      virtual void NeedsRestart(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest* request, ::viam::app::v1::NeedsRestartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NeedsRestart(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest* request, ::viam::app::v1::NeedsRestartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ConfigResponse>* AsyncConfigRaw(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::ConfigResponse>* PrepareAsyncConfigRaw(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CertificateResponse>* AsyncCertificateRaw(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::CertificateResponse>* PrepareAsyncCertificateRaw(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::LogResponse>* AsyncLogRaw(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::LogResponse>* PrepareAsyncLogRaw(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NeedsRestartResponse>* AsyncNeedsRestartRaw(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::v1::NeedsRestartResponse>* PrepareAsyncNeedsRestartRaw(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Config(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest& request, ::viam::app::v1::ConfigResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ConfigResponse>> AsyncConfig(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ConfigResponse>>(AsyncConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ConfigResponse>> PrepareAsyncConfig(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ConfigResponse>>(PrepareAsyncConfigRaw(context, request, cq));
    }
    ::grpc::Status Certificate(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest& request, ::viam::app::v1::CertificateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CertificateResponse>> AsyncCertificate(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CertificateResponse>>(AsyncCertificateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CertificateResponse>> PrepareAsyncCertificate(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CertificateResponse>>(PrepareAsyncCertificateRaw(context, request, cq));
    }
    ::grpc::Status Log(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest& request, ::viam::app::v1::LogResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::LogResponse>> AsyncLog(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::LogResponse>>(AsyncLogRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::LogResponse>> PrepareAsyncLog(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::LogResponse>>(PrepareAsyncLogRaw(context, request, cq));
    }
    ::grpc::Status NeedsRestart(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest& request, ::viam::app::v1::NeedsRestartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NeedsRestartResponse>> AsyncNeedsRestart(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NeedsRestartResponse>>(AsyncNeedsRestartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NeedsRestartResponse>> PrepareAsyncNeedsRestart(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NeedsRestartResponse>>(PrepareAsyncNeedsRestartRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Config(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest* request, ::viam::app::v1::ConfigResponse* response, std::function<void(::grpc::Status)>) override;
      void Config(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest* request, ::viam::app::v1::ConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Certificate(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest* request, ::viam::app::v1::CertificateResponse* response, std::function<void(::grpc::Status)>) override;
      void Certificate(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest* request, ::viam::app::v1::CertificateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Log(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest* request, ::viam::app::v1::LogResponse* response, std::function<void(::grpc::Status)>) override;
      void Log(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest* request, ::viam::app::v1::LogResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NeedsRestart(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest* request, ::viam::app::v1::NeedsRestartResponse* response, std::function<void(::grpc::Status)>) override;
      void NeedsRestart(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest* request, ::viam::app::v1::NeedsRestartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ConfigResponse>* AsyncConfigRaw(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::ConfigResponse>* PrepareAsyncConfigRaw(::grpc::ClientContext* context, const ::viam::app::v1::ConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CertificateResponse>* AsyncCertificateRaw(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::CertificateResponse>* PrepareAsyncCertificateRaw(::grpc::ClientContext* context, const ::viam::app::v1::CertificateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::LogResponse>* AsyncLogRaw(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::LogResponse>* PrepareAsyncLogRaw(::grpc::ClientContext* context, const ::viam::app::v1::LogRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NeedsRestartResponse>* AsyncNeedsRestartRaw(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::v1::NeedsRestartResponse>* PrepareAsyncNeedsRestartRaw(::grpc::ClientContext* context, const ::viam::app::v1::NeedsRestartRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Config_;
    const ::grpc::internal::RpcMethod rpcmethod_Certificate_;
    const ::grpc::internal::RpcMethod rpcmethod_Log_;
    const ::grpc::internal::RpcMethod rpcmethod_NeedsRestart_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Config requests the current robot config
    virtual ::grpc::Status Config(::grpc::ServerContext* context, const ::viam::app::v1::ConfigRequest* request, ::viam::app::v1::ConfigResponse* response);
    // Certificate requests the current robot certificate
    virtual ::grpc::Status Certificate(::grpc::ServerContext* context, const ::viam::app::v1::CertificateRequest* request, ::viam::app::v1::CertificateResponse* response);
    // Log insert log entries associated with the robot. Allows up to 1000 entries to be added in one request.
    virtual ::grpc::Status Log(::grpc::ServerContext* context, const ::viam::app::v1::LogRequest* request, ::viam::app::v1::LogResponse* response);
    // NeedsRestart returns if the robot should restart and the interval it should check to restart.
    virtual ::grpc::Status NeedsRestart(::grpc::ServerContext* context, const ::viam::app::v1::NeedsRestartRequest* request, ::viam::app::v1::NeedsRestartResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Config() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Config(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ConfigRequest* /*request*/, ::viam::app::v1::ConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfig(::grpc::ServerContext* context, ::viam::app::v1::ConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::ConfigResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Certificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Certificate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Certificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Certificate(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CertificateRequest* /*request*/, ::viam::app::v1::CertificateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCertificate(::grpc::ServerContext* context, ::viam::app::v1::CertificateRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::CertificateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Log() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::viam::app::v1::LogRequest* /*request*/, ::viam::app::v1::LogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLog(::grpc::ServerContext* context, ::viam::app::v1::LogRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::LogResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NeedsRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NeedsRestart() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_NeedsRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NeedsRestart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NeedsRestartRequest* /*request*/, ::viam::app::v1::NeedsRestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNeedsRestart(::grpc::ServerContext* context, ::viam::app::v1::NeedsRestartRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::v1::NeedsRestartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Config<WithAsyncMethod_Certificate<WithAsyncMethod_Log<WithAsyncMethod_NeedsRestart<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Config() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ConfigRequest, ::viam::app::v1::ConfigResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::ConfigRequest* request, ::viam::app::v1::ConfigResponse* response) { return this->Config(context, request, response); }));}
    void SetMessageAllocatorFor_Config(
        ::grpc::MessageAllocator< ::viam::app::v1::ConfigRequest, ::viam::app::v1::ConfigResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::ConfigRequest, ::viam::app::v1::ConfigResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Config(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ConfigRequest* /*request*/, ::viam::app::v1::ConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Config(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::ConfigRequest* /*request*/, ::viam::app::v1::ConfigResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Certificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Certificate() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CertificateRequest, ::viam::app::v1::CertificateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::CertificateRequest* request, ::viam::app::v1::CertificateResponse* response) { return this->Certificate(context, request, response); }));}
    void SetMessageAllocatorFor_Certificate(
        ::grpc::MessageAllocator< ::viam::app::v1::CertificateRequest, ::viam::app::v1::CertificateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::CertificateRequest, ::viam::app::v1::CertificateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Certificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Certificate(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CertificateRequest* /*request*/, ::viam::app::v1::CertificateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Certificate(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::CertificateRequest* /*request*/, ::viam::app::v1::CertificateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Log() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::LogRequest, ::viam::app::v1::LogResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::LogRequest* request, ::viam::app::v1::LogResponse* response) { return this->Log(context, request, response); }));}
    void SetMessageAllocatorFor_Log(
        ::grpc::MessageAllocator< ::viam::app::v1::LogRequest, ::viam::app::v1::LogResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::LogRequest, ::viam::app::v1::LogResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::viam::app::v1::LogRequest* /*request*/, ::viam::app::v1::LogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Log(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::LogRequest* /*request*/, ::viam::app::v1::LogResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NeedsRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NeedsRestart() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::NeedsRestartRequest, ::viam::app::v1::NeedsRestartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::v1::NeedsRestartRequest* request, ::viam::app::v1::NeedsRestartResponse* response) { return this->NeedsRestart(context, request, response); }));}
    void SetMessageAllocatorFor_NeedsRestart(
        ::grpc::MessageAllocator< ::viam::app::v1::NeedsRestartRequest, ::viam::app::v1::NeedsRestartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::v1::NeedsRestartRequest, ::viam::app::v1::NeedsRestartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NeedsRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NeedsRestart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NeedsRestartRequest* /*request*/, ::viam::app::v1::NeedsRestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NeedsRestart(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::v1::NeedsRestartRequest* /*request*/, ::viam::app::v1::NeedsRestartResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Config<WithCallbackMethod_Certificate<WithCallbackMethod_Log<WithCallbackMethod_NeedsRestart<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Config() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Config(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ConfigRequest* /*request*/, ::viam::app::v1::ConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Certificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Certificate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Certificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Certificate(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CertificateRequest* /*request*/, ::viam::app::v1::CertificateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Log() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::viam::app::v1::LogRequest* /*request*/, ::viam::app::v1::LogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NeedsRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NeedsRestart() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_NeedsRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NeedsRestart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NeedsRestartRequest* /*request*/, ::viam::app::v1::NeedsRestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Config() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Config(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ConfigRequest* /*request*/, ::viam::app::v1::ConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Certificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Certificate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Certificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Certificate(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CertificateRequest* /*request*/, ::viam::app::v1::CertificateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCertificate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Log() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::viam::app::v1::LogRequest* /*request*/, ::viam::app::v1::LogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLog(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NeedsRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NeedsRestart() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_NeedsRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NeedsRestart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NeedsRestartRequest* /*request*/, ::viam::app::v1::NeedsRestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNeedsRestart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Config() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Config(context, request, response); }));
    }
    ~WithRawCallbackMethod_Config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Config(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ConfigRequest* /*request*/, ::viam::app::v1::ConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Config(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Certificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Certificate() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Certificate(context, request, response); }));
    }
    ~WithRawCallbackMethod_Certificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Certificate(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CertificateRequest* /*request*/, ::viam::app::v1::CertificateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Certificate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Log() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Log(context, request, response); }));
    }
    ~WithRawCallbackMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::viam::app::v1::LogRequest* /*request*/, ::viam::app::v1::LogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Log(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NeedsRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NeedsRestart() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NeedsRestart(context, request, response); }));
    }
    ~WithRawCallbackMethod_NeedsRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NeedsRestart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NeedsRestartRequest* /*request*/, ::viam::app::v1::NeedsRestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NeedsRestart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Config : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Config() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::ConfigRequest, ::viam::app::v1::ConfigResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::ConfigRequest, ::viam::app::v1::ConfigResponse>* streamer) {
                       return this->StreamedConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Config() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Config(::grpc::ServerContext* /*context*/, const ::viam::app::v1::ConfigRequest* /*request*/, ::viam::app::v1::ConfigResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::ConfigRequest,::viam::app::v1::ConfigResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Certificate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Certificate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::CertificateRequest, ::viam::app::v1::CertificateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::CertificateRequest, ::viam::app::v1::CertificateResponse>* streamer) {
                       return this->StreamedCertificate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Certificate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Certificate(::grpc::ServerContext* /*context*/, const ::viam::app::v1::CertificateRequest* /*request*/, ::viam::app::v1::CertificateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCertificate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::CertificateRequest,::viam::app::v1::CertificateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Log : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Log() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::LogRequest, ::viam::app::v1::LogResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::LogRequest, ::viam::app::v1::LogResponse>* streamer) {
                       return this->StreamedLog(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Log() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Log(::grpc::ServerContext* /*context*/, const ::viam::app::v1::LogRequest* /*request*/, ::viam::app::v1::LogResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLog(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::LogRequest,::viam::app::v1::LogResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NeedsRestart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NeedsRestart() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::v1::NeedsRestartRequest, ::viam::app::v1::NeedsRestartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::v1::NeedsRestartRequest, ::viam::app::v1::NeedsRestartResponse>* streamer) {
                       return this->StreamedNeedsRestart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NeedsRestart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NeedsRestart(::grpc::ServerContext* /*context*/, const ::viam::app::v1::NeedsRestartRequest* /*request*/, ::viam::app::v1::NeedsRestartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNeedsRestart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::v1::NeedsRestartRequest,::viam::app::v1::NeedsRestartResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Config<WithStreamedUnaryMethod_Certificate<WithStreamedUnaryMethod_Log<WithStreamedUnaryMethod_NeedsRestart<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Config<WithStreamedUnaryMethod_Certificate<WithStreamedUnaryMethod_Log<WithStreamedUnaryMethod_NeedsRestart<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace app
}  // namespace viam


#endif  // GRPC_app_2fv1_2frobot_2eproto__INCLUDED
