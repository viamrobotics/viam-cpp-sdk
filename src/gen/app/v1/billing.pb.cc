// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/v1/billing.proto

#include "app/v1/billing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace app {
namespace v1 {
PROTOBUF_CONSTEXPR CurrentMonthUsageSummary::CurrentMonthUsageSummary(
    ::_pbi::ConstantInitialized)
  : cloud_storage_usage_(0)
  , cloud_storage_usage_cost_(0)
  , data_upload_usage_cost_(0)
  , data_upload_usage_quantity_(0)
  , data_egres_usage_cost_(0)
  , data_egres_usage_quantity_(0)
  , standard_compute_usage_cost_(0)
  , standard_compute_usage_quantity_(0)
  , total_usage_quantity_(0)
  , total_usage_with_discount_(0)
  , total_usage_without_discount_(0){}
struct CurrentMonthUsageSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrentMonthUsageSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrentMonthUsageSummaryDefaultTypeInternal() {}
  union {
    CurrentMonthUsageSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrentMonthUsageSummaryDefaultTypeInternal _CurrentMonthUsageSummary_default_instance_;
PROTOBUF_CONSTEXPR InvoiceSummary::InvoiceSummary(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , invoice_date_(nullptr)
  , due_date_(nullptr)
  , invoice_amount_(0){}
struct InvoiceSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvoiceSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvoiceSummaryDefaultTypeInternal() {}
  union {
    InvoiceSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvoiceSummaryDefaultTypeInternal _InvoiceSummary_default_instance_;
PROTOBUF_CONSTEXPR BillableResourceEvent::BillableResourceEvent(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , usage_quantity_unit_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , usage_cost_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , occurred_at_(nullptr)
  , usage_quantity_(0){}
struct BillableResourceEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BillableResourceEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BillableResourceEventDefaultTypeInternal() {}
  union {
    BillableResourceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BillableResourceEventDefaultTypeInternal _BillableResourceEvent_default_instance_;
PROTOBUF_CONSTEXPR Invoice::Invoice(
    ::_pbi::ConstantInitialized)
  : items_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , emailed_to_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , invoice_date_(nullptr)
  , due_date_(nullptr)
  , invoice_amount_(0){}
struct InvoiceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvoiceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvoiceDefaultTypeInternal() {}
  union {
    Invoice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvoiceDefaultTypeInternal _Invoice_default_instance_;
PROTOBUF_CONSTEXPR GetCurrentMonthUsageSummaryRequest::GetCurrentMonthUsageSummaryRequest(
    ::_pbi::ConstantInitialized)
  : org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetCurrentMonthUsageSummaryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCurrentMonthUsageSummaryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCurrentMonthUsageSummaryRequestDefaultTypeInternal() {}
  union {
    GetCurrentMonthUsageSummaryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCurrentMonthUsageSummaryRequestDefaultTypeInternal _GetCurrentMonthUsageSummaryRequest_default_instance_;
PROTOBUF_CONSTEXPR GetCurrentMonthUsageSummaryResponse::GetCurrentMonthUsageSummaryResponse(
    ::_pbi::ConstantInitialized)
  : cloud_storage_usage_(0)
  , cloud_storage_usage_cost_(0)
  , data_upload_usage_cost_(0)
  , data_upload_usage_quantity_(0)
  , data_egres_usage_cost_(0)
  , data_egres_usage_quantity_(0)
  , standard_compute_usage_cost_(0)
  , standard_compute_usage_quantity_(0)
  , total_usage_quantity_(0)
  , total_usage_with_discount_(0)
  , total_usage_without_discount_(0){}
struct GetCurrentMonthUsageSummaryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCurrentMonthUsageSummaryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCurrentMonthUsageSummaryResponseDefaultTypeInternal() {}
  union {
    GetCurrentMonthUsageSummaryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCurrentMonthUsageSummaryResponseDefaultTypeInternal _GetCurrentMonthUsageSummaryResponse_default_instance_;
PROTOBUF_CONSTEXPR GetUnpaidBalanceRequest::GetUnpaidBalanceRequest(
    ::_pbi::ConstantInitialized)
  : org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetUnpaidBalanceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUnpaidBalanceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUnpaidBalanceRequestDefaultTypeInternal() {}
  union {
    GetUnpaidBalanceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUnpaidBalanceRequestDefaultTypeInternal _GetUnpaidBalanceRequest_default_instance_;
PROTOBUF_CONSTEXPR GetUnpaidBalanceResponse::GetUnpaidBalanceResponse(
    ::_pbi::ConstantInitialized)
  : unpaid_balance_due_date_(nullptr)
  , unpaid_balance_(0){}
struct GetUnpaidBalanceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetUnpaidBalanceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetUnpaidBalanceResponseDefaultTypeInternal() {}
  union {
    GetUnpaidBalanceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetUnpaidBalanceResponseDefaultTypeInternal _GetUnpaidBalanceResponse_default_instance_;
PROTOBUF_CONSTEXPR GetInvoiceHistoryRequest::GetInvoiceHistoryRequest(
    ::_pbi::ConstantInitialized)
  : org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetInvoiceHistoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInvoiceHistoryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInvoiceHistoryRequestDefaultTypeInternal() {}
  union {
    GetInvoiceHistoryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInvoiceHistoryRequestDefaultTypeInternal _GetInvoiceHistoryRequest_default_instance_;
PROTOBUF_CONSTEXPR GetInvoiceHistoryResponse::GetInvoiceHistoryResponse(
    ::_pbi::ConstantInitialized)
  : invoices_(){}
struct GetInvoiceHistoryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetInvoiceHistoryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetInvoiceHistoryResponseDefaultTypeInternal() {}
  union {
    GetInvoiceHistoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetInvoiceHistoryResponseDefaultTypeInternal _GetInvoiceHistoryResponse_default_instance_;
PROTOBUF_CONSTEXPR GetItemizedInvoiceRequest::GetItemizedInvoiceRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetItemizedInvoiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetItemizedInvoiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetItemizedInvoiceRequestDefaultTypeInternal() {}
  union {
    GetItemizedInvoiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetItemizedInvoiceRequestDefaultTypeInternal _GetItemizedInvoiceRequest_default_instance_;
PROTOBUF_CONSTEXPR GetItemizedInvoiceResponse::GetItemizedInvoiceResponse(
    ::_pbi::ConstantInitialized)
  : invoice_(nullptr){}
struct GetItemizedInvoiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetItemizedInvoiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetItemizedInvoiceResponseDefaultTypeInternal() {}
  union {
    GetItemizedInvoiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetItemizedInvoiceResponseDefaultTypeInternal _GetItemizedInvoiceResponse_default_instance_;
PROTOBUF_CONSTEXPR GetBillingSummaryRequest::GetBillingSummaryRequest(
    ::_pbi::ConstantInitialized)
  : org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetBillingSummaryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBillingSummaryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBillingSummaryRequestDefaultTypeInternal() {}
  union {
    GetBillingSummaryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBillingSummaryRequestDefaultTypeInternal _GetBillingSummaryRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBillingSummaryResponse::GetBillingSummaryResponse(
    ::_pbi::ConstantInitialized)
  : invoices_()
  , invoice_email_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , usage_summary_(nullptr)
  , current_month_due_date_(nullptr)
  , statement_balance_(0)
  , current_balance_(0)
  , current_month_balance_(0){}
struct GetBillingSummaryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBillingSummaryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBillingSummaryResponseDefaultTypeInternal() {}
  union {
    GetBillingSummaryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBillingSummaryResponseDefaultTypeInternal _GetBillingSummaryResponse_default_instance_;
}  // namespace v1
}  // namespace app
}  // namespace viam
static ::_pb::Metadata file_level_metadata_app_2fv1_2fbilling_2eproto[14];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_app_2fv1_2fbilling_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_app_2fv1_2fbilling_2eproto = nullptr;

const uint32_t TableStruct_app_2fv1_2fbilling_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CurrentMonthUsageSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CurrentMonthUsageSummary, cloud_storage_usage_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CurrentMonthUsageSummary, cloud_storage_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CurrentMonthUsageSummary, data_upload_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CurrentMonthUsageSummary, data_upload_usage_quantity_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CurrentMonthUsageSummary, data_egres_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CurrentMonthUsageSummary, data_egres_usage_quantity_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CurrentMonthUsageSummary, standard_compute_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CurrentMonthUsageSummary, standard_compute_usage_quantity_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CurrentMonthUsageSummary, total_usage_quantity_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CurrentMonthUsageSummary, total_usage_with_discount_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::CurrentMonthUsageSummary, total_usage_without_discount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, invoice_date_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, invoice_amount_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, status_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::InvoiceSummary, due_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::BillableResourceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::BillableResourceEvent, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::BillableResourceEvent, type_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::BillableResourceEvent, usage_quantity_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::BillableResourceEvent, usage_quantity_unit_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::BillableResourceEvent, usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::BillableResourceEvent, occurred_at_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::BillableResourceEvent, user_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Invoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Invoice, id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Invoice, invoice_date_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Invoice, invoice_amount_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Invoice, status_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Invoice, due_date_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Invoice, items_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::Invoice, emailed_to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryRequest, org_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryResponse, cloud_storage_usage_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryResponse, cloud_storage_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryResponse, data_upload_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryResponse, data_upload_usage_quantity_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryResponse, data_egres_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryResponse, data_egres_usage_quantity_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryResponse, standard_compute_usage_cost_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryResponse, standard_compute_usage_quantity_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryResponse, total_usage_quantity_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryResponse, total_usage_with_discount_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetCurrentMonthUsageSummaryResponse, total_usage_without_discount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetUnpaidBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetUnpaidBalanceRequest, org_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetUnpaidBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetUnpaidBalanceResponse, unpaid_balance_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetUnpaidBalanceResponse, unpaid_balance_due_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoiceHistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoiceHistoryRequest, org_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoiceHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetInvoiceHistoryResponse, invoices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetItemizedInvoiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetItemizedInvoiceRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetItemizedInvoiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetItemizedInvoiceResponse, invoice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetBillingSummaryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetBillingSummaryRequest, org_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetBillingSummaryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetBillingSummaryResponse, usage_summary_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetBillingSummaryResponse, invoices_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetBillingSummaryResponse, statement_balance_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetBillingSummaryResponse, current_balance_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetBillingSummaryResponse, current_month_balance_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetBillingSummaryResponse, current_month_due_date_),
  PROTOBUF_FIELD_OFFSET(::viam::app::v1::GetBillingSummaryResponse, invoice_email_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::app::v1::CurrentMonthUsageSummary)},
  { 17, -1, -1, sizeof(::viam::app::v1::InvoiceSummary)},
  { 28, -1, -1, sizeof(::viam::app::v1::BillableResourceEvent)},
  { 41, -1, -1, sizeof(::viam::app::v1::Invoice)},
  { 54, -1, -1, sizeof(::viam::app::v1::GetCurrentMonthUsageSummaryRequest)},
  { 61, -1, -1, sizeof(::viam::app::v1::GetCurrentMonthUsageSummaryResponse)},
  { 78, -1, -1, sizeof(::viam::app::v1::GetUnpaidBalanceRequest)},
  { 85, -1, -1, sizeof(::viam::app::v1::GetUnpaidBalanceResponse)},
  { 93, -1, -1, sizeof(::viam::app::v1::GetInvoiceHistoryRequest)},
  { 100, -1, -1, sizeof(::viam::app::v1::GetInvoiceHistoryResponse)},
  { 107, -1, -1, sizeof(::viam::app::v1::GetItemizedInvoiceRequest)},
  { 114, -1, -1, sizeof(::viam::app::v1::GetItemizedInvoiceResponse)},
  { 121, -1, -1, sizeof(::viam::app::v1::GetBillingSummaryRequest)},
  { 128, -1, -1, sizeof(::viam::app::v1::GetBillingSummaryResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::app::v1::_CurrentMonthUsageSummary_default_instance_._instance,
  &::viam::app::v1::_InvoiceSummary_default_instance_._instance,
  &::viam::app::v1::_BillableResourceEvent_default_instance_._instance,
  &::viam::app::v1::_Invoice_default_instance_._instance,
  &::viam::app::v1::_GetCurrentMonthUsageSummaryRequest_default_instance_._instance,
  &::viam::app::v1::_GetCurrentMonthUsageSummaryResponse_default_instance_._instance,
  &::viam::app::v1::_GetUnpaidBalanceRequest_default_instance_._instance,
  &::viam::app::v1::_GetUnpaidBalanceResponse_default_instance_._instance,
  &::viam::app::v1::_GetInvoiceHistoryRequest_default_instance_._instance,
  &::viam::app::v1::_GetInvoiceHistoryResponse_default_instance_._instance,
  &::viam::app::v1::_GetItemizedInvoiceRequest_default_instance_._instance,
  &::viam::app::v1::_GetItemizedInvoiceResponse_default_instance_._instance,
  &::viam::app::v1::_GetBillingSummaryRequest_default_instance_._instance,
  &::viam::app::v1::_GetBillingSummaryResponse_default_instance_._instance,
};

const char descriptor_table_protodef_app_2fv1_2fbilling_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024app/v1/billing.proto\022\013viam.app.v1\032\037goo"
  "gle/protobuf/timestamp.proto\"\227\005\n\030Current"
  "MonthUsageSummary\022.\n\023cloud_storage_usage"
  "\030\001 \001(\001R\021cloudStorageUsage\0227\n\030cloud_stora"
  "ge_usage_cost\030\002 \001(\001R\025cloudStorageUsageCo"
  "st\0223\n\026data_upload_usage_cost\030\003 \001(\001R\023data"
  "UploadUsageCost\022;\n\032data_upload_usage_qua"
  "ntity\030\004 \001(\001R\027dataUploadUsageQuantity\0221\n\025"
  "data_egres_usage_cost\030\005 \001(\001R\022dataEgresUs"
  "ageCost\0229\n\031data_egres_usage_quantity\030\006 \001"
  "(\001R\026dataEgresUsageQuantity\022=\n\033standard_c"
  "ompute_usage_cost\030\007 \001(\001R\030standardCompute"
  "UsageCost\022E\n\037standard_compute_usage_quan"
  "tity\030\010 \001(\001R\034standardComputeUsageQuantity"
  "\0220\n\024total_usage_quantity\030\t \001(\001R\022totalUsa"
  "geQuantity\0229\n\031total_usage_with_discount\030"
  "\n \001(\001R\026totalUsageWithDiscount\022\?\n\034total_u"
  "sage_without_discount\030\013 \001(\001R\031totalUsageW"
  "ithoutDiscount\"\325\001\n\016InvoiceSummary\022\016\n\002id\030"
  "\001 \001(\tR\002id\022=\n\014invoice_date\030\002 \001(\0132\032.google"
  ".protobuf.TimestampR\013invoiceDate\022%\n\016invo"
  "ice_amount\030\003 \001(\001R\rinvoiceAmount\022\026\n\006statu"
  "s\030\004 \001(\tR\006status\0225\n\010due_date\030\005 \001(\0132\032.goog"
  "le.protobuf.TimestampR\007dueDate\"\213\002\n\025Billa"
  "bleResourceEvent\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004type"
  "\030\002 \001(\tR\004type\022%\n\016usage_quantity\030\003 \001(\001R\rus"
  "ageQuantity\022.\n\023usage_quantity_unit\030\004 \001(\t"
  "R\021usageQuantityUnit\022\035\n\nusage_cost\030\005 \001(\tR"
  "\tusageCost\022;\n\013occurred_at\030\006 \001(\0132\032.google"
  ".protobuf.TimestampR\noccurredAt\022\033\n\tuser_"
  "name\030\007 \001(\tR\010userName\"\247\002\n\007Invoice\022\016\n\002id\030\001"
  " \001(\tR\002id\022=\n\014invoice_date\030\002 \001(\0132\032.google."
  "protobuf.TimestampR\013invoiceDate\022%\n\016invoi"
  "ce_amount\030\003 \001(\001R\rinvoiceAmount\022\026\n\006status"
  "\030\004 \001(\tR\006status\0225\n\010due_date\030\005 \001(\0132\032.googl"
  "e.protobuf.TimestampR\007dueDate\0228\n\005items\030\006"
  " \003(\0132\".viam.app.v1.BillableResourceEvent"
  "R\005items\022\035\n\nemailed_to\030\007 \001(\tR\temailedTo\";"
  "\n\"GetCurrentMonthUsageSummaryRequest\022\025\n\006"
  "org_id\030\001 \001(\tR\005orgId\"\242\005\n#GetCurrentMonthU"
  "sageSummaryResponse\022.\n\023cloud_storage_usa"
  "ge\030\001 \001(\001R\021cloudStorageUsage\0227\n\030cloud_sto"
  "rage_usage_cost\030\002 \001(\001R\025cloudStorageUsage"
  "Cost\0223\n\026data_upload_usage_cost\030\003 \001(\001R\023da"
  "taUploadUsageCost\022;\n\032data_upload_usage_q"
  "uantity\030\004 \001(\001R\027dataUploadUsageQuantity\0221"
  "\n\025data_egres_usage_cost\030\005 \001(\001R\022dataEgres"
  "UsageCost\0229\n\031data_egres_usage_quantity\030\006"
  " \001(\001R\026dataEgresUsageQuantity\022=\n\033standard"
  "_compute_usage_cost\030\007 \001(\001R\030standardCompu"
  "teUsageCost\022E\n\037standard_compute_usage_qu"
  "antity\030\010 \001(\001R\034standardComputeUsageQuanti"
  "ty\0220\n\024total_usage_quantity\030\t \001(\001R\022totalU"
  "sageQuantity\0229\n\031total_usage_with_discoun"
  "t\030\n \001(\001R\026totalUsageWithDiscount\022\?\n\034total"
  "_usage_without_discount\030\013 \001(\001R\031totalUsag"
  "eWithoutDiscount\"0\n\027GetUnpaidBalanceRequ"
  "est\022\025\n\006org_id\030\001 \001(\tR\005orgId\"\224\001\n\030GetUnpaid"
  "BalanceResponse\022%\n\016unpaid_balance\030\001 \001(\001R"
  "\runpaidBalance\022Q\n\027unpaid_balance_due_dat"
  "e\030\002 \001(\0132\032.google.protobuf.TimestampR\024unp"
  "aidBalanceDueDate\"1\n\030GetInvoiceHistoryRe"
  "quest\022\025\n\006org_id\030\001 \001(\tR\005orgId\"T\n\031GetInvoi"
  "ceHistoryResponse\0227\n\010invoices\030\001 \003(\0132\033.vi"
  "am.app.v1.InvoiceSummaryR\010invoices\"+\n\031Ge"
  "tItemizedInvoiceRequest\022\016\n\002id\030\001 \001(\tR\002id\""
  "L\n\032GetItemizedInvoiceResponse\022.\n\007invoice"
  "\030\001 \001(\0132\024.viam.app.v1.InvoiceR\007invoice\"1\n"
  "\030GetBillingSummaryRequest\022\025\n\006org_id\030\001 \001("
  "\tR\005orgId\"\240\003\n\031GetBillingSummaryResponse\022J"
  "\n\rusage_summary\030\001 \001(\0132%.viam.app.v1.Curr"
  "entMonthUsageSummaryR\014usageSummary\0227\n\010in"
  "voices\030\002 \003(\0132\033.viam.app.v1.InvoiceSummar"
  "yR\010invoices\022+\n\021statement_balance\030\003 \001(\001R\020"
  "statementBalance\022\'\n\017current_balance\030\004 \001("
  "\001R\016currentBalance\0222\n\025current_month_balan"
  "ce\030\005 \001(\001R\023currentMonthBalance\022O\n\026current"
  "_month_due_date\030\007 \001(\0132\032.google.protobuf."
  "TimestampR\023currentMonthDueDate\022#\n\rinvoic"
  "e_email\030\010 \001(\tR\014invoiceEmail2\243\004\n\016BillingS"
  "ervice\022\200\001\n\033GetCurrentMonthUsageSummary\022/"
  ".viam.app.v1.GetCurrentMonthUsageSummary"
  "Request\0320.viam.app.v1.GetCurrentMonthUsa"
  "geSummaryResponse\022_\n\020GetUnpaidBalance\022$."
  "viam.app.v1.GetUnpaidBalanceRequest\032%.vi"
  "am.app.v1.GetUnpaidBalanceResponse\022b\n\021Ge"
  "tInvoiceHistory\022%.viam.app.v1.GetInvoice"
  "HistoryRequest\032&.viam.app.v1.GetInvoiceH"
  "istoryResponse\022e\n\022GetItemizedInvoice\022&.v"
  "iam.app.v1.GetItemizedInvoiceRequest\032\'.v"
  "iam.app.v1.GetItemizedInvoiceResponse\022b\n"
  "\021GetBillingSummary\022%.viam.app.v1.GetBill"
  "ingSummaryRequest\032&.viam.app.v1.GetBilli"
  "ngSummaryResponseB\030Z\026go.viam.com/api/app"
  "/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_app_2fv1_2fbilling_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_app_2fv1_2fbilling_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fv1_2fbilling_2eproto = {
    false, false, 3771, descriptor_table_protodef_app_2fv1_2fbilling_2eproto,
    "app/v1/billing.proto",
    &descriptor_table_app_2fv1_2fbilling_2eproto_once, descriptor_table_app_2fv1_2fbilling_2eproto_deps, 1, 14,
    schemas, file_default_instances, TableStruct_app_2fv1_2fbilling_2eproto::offsets,
    file_level_metadata_app_2fv1_2fbilling_2eproto, file_level_enum_descriptors_app_2fv1_2fbilling_2eproto,
    file_level_service_descriptors_app_2fv1_2fbilling_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fv1_2fbilling_2eproto_getter() {
  return &descriptor_table_app_2fv1_2fbilling_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fv1_2fbilling_2eproto(&descriptor_table_app_2fv1_2fbilling_2eproto);
namespace viam {
namespace app {
namespace v1 {

// ===================================================================

class CurrentMonthUsageSummary::_Internal {
 public:
};

CurrentMonthUsageSummary::CurrentMonthUsageSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.CurrentMonthUsageSummary)
}
CurrentMonthUsageSummary::CurrentMonthUsageSummary(const CurrentMonthUsageSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cloud_storage_usage_, &from.cloud_storage_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_usage_without_discount_) -
    reinterpret_cast<char*>(&cloud_storage_usage_)) + sizeof(total_usage_without_discount_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.CurrentMonthUsageSummary)
}

inline void CurrentMonthUsageSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cloud_storage_usage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_usage_without_discount_) -
    reinterpret_cast<char*>(&cloud_storage_usage_)) + sizeof(total_usage_without_discount_));
}

CurrentMonthUsageSummary::~CurrentMonthUsageSummary() {
  // @@protoc_insertion_point(destructor:viam.app.v1.CurrentMonthUsageSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CurrentMonthUsageSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CurrentMonthUsageSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CurrentMonthUsageSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.CurrentMonthUsageSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cloud_storage_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_usage_without_discount_) -
      reinterpret_cast<char*>(&cloud_storage_usage_)) + sizeof(total_usage_without_discount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CurrentMonthUsageSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double cloud_storage_usage = 1 [json_name = "cloudStorageUsage"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          cloud_storage_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cloud_storage_usage_cost = 2 [json_name = "cloudStorageUsageCost"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          cloud_storage_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_upload_usage_cost = 3 [json_name = "dataUploadUsageCost"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          data_upload_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_upload_usage_quantity = 4 [json_name = "dataUploadUsageQuantity"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          data_upload_usage_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_egres_usage_cost = 5 [json_name = "dataEgresUsageCost"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          data_egres_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_egres_usage_quantity = 6 [json_name = "dataEgresUsageQuantity"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          data_egres_usage_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double standard_compute_usage_cost = 7 [json_name = "standardComputeUsageCost"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          standard_compute_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double standard_compute_usage_quantity = 8 [json_name = "standardComputeUsageQuantity"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          standard_compute_usage_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_usage_quantity = 9 [json_name = "totalUsageQuantity"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          total_usage_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_usage_with_discount = 10 [json_name = "totalUsageWithDiscount"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          total_usage_with_discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_usage_without_discount = 11 [json_name = "totalUsageWithoutDiscount"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          total_usage_without_discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CurrentMonthUsageSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.CurrentMonthUsageSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double cloud_storage_usage = 1 [json_name = "cloudStorageUsage"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage = this->_internal_cloud_storage_usage();
  uint64_t raw_cloud_storage_usage;
  memcpy(&raw_cloud_storage_usage, &tmp_cloud_storage_usage, sizeof(tmp_cloud_storage_usage));
  if (raw_cloud_storage_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_cloud_storage_usage(), target);
  }

  // double cloud_storage_usage_cost = 2 [json_name = "cloudStorageUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage_cost = this->_internal_cloud_storage_usage_cost();
  uint64_t raw_cloud_storage_usage_cost;
  memcpy(&raw_cloud_storage_usage_cost, &tmp_cloud_storage_usage_cost, sizeof(tmp_cloud_storage_usage_cost));
  if (raw_cloud_storage_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_cloud_storage_usage_cost(), target);
  }

  // double data_upload_usage_cost = 3 [json_name = "dataUploadUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_cost = this->_internal_data_upload_usage_cost();
  uint64_t raw_data_upload_usage_cost;
  memcpy(&raw_data_upload_usage_cost, &tmp_data_upload_usage_cost, sizeof(tmp_data_upload_usage_cost));
  if (raw_data_upload_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_data_upload_usage_cost(), target);
  }

  // double data_upload_usage_quantity = 4 [json_name = "dataUploadUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_quantity = this->_internal_data_upload_usage_quantity();
  uint64_t raw_data_upload_usage_quantity;
  memcpy(&raw_data_upload_usage_quantity, &tmp_data_upload_usage_quantity, sizeof(tmp_data_upload_usage_quantity));
  if (raw_data_upload_usage_quantity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_data_upload_usage_quantity(), target);
  }

  // double data_egres_usage_cost = 5 [json_name = "dataEgresUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_cost = this->_internal_data_egres_usage_cost();
  uint64_t raw_data_egres_usage_cost;
  memcpy(&raw_data_egres_usage_cost, &tmp_data_egres_usage_cost, sizeof(tmp_data_egres_usage_cost));
  if (raw_data_egres_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_data_egres_usage_cost(), target);
  }

  // double data_egres_usage_quantity = 6 [json_name = "dataEgresUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_quantity = this->_internal_data_egres_usage_quantity();
  uint64_t raw_data_egres_usage_quantity;
  memcpy(&raw_data_egres_usage_quantity, &tmp_data_egres_usage_quantity, sizeof(tmp_data_egres_usage_quantity));
  if (raw_data_egres_usage_quantity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_data_egres_usage_quantity(), target);
  }

  // double standard_compute_usage_cost = 7 [json_name = "standardComputeUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_cost = this->_internal_standard_compute_usage_cost();
  uint64_t raw_standard_compute_usage_cost;
  memcpy(&raw_standard_compute_usage_cost, &tmp_standard_compute_usage_cost, sizeof(tmp_standard_compute_usage_cost));
  if (raw_standard_compute_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_standard_compute_usage_cost(), target);
  }

  // double standard_compute_usage_quantity = 8 [json_name = "standardComputeUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_quantity = this->_internal_standard_compute_usage_quantity();
  uint64_t raw_standard_compute_usage_quantity;
  memcpy(&raw_standard_compute_usage_quantity, &tmp_standard_compute_usage_quantity, sizeof(tmp_standard_compute_usage_quantity));
  if (raw_standard_compute_usage_quantity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_standard_compute_usage_quantity(), target);
  }

  // double total_usage_quantity = 9 [json_name = "totalUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_quantity = this->_internal_total_usage_quantity();
  uint64_t raw_total_usage_quantity;
  memcpy(&raw_total_usage_quantity, &tmp_total_usage_quantity, sizeof(tmp_total_usage_quantity));
  if (raw_total_usage_quantity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_total_usage_quantity(), target);
  }

  // double total_usage_with_discount = 10 [json_name = "totalUsageWithDiscount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_with_discount = this->_internal_total_usage_with_discount();
  uint64_t raw_total_usage_with_discount;
  memcpy(&raw_total_usage_with_discount, &tmp_total_usage_with_discount, sizeof(tmp_total_usage_with_discount));
  if (raw_total_usage_with_discount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_total_usage_with_discount(), target);
  }

  // double total_usage_without_discount = 11 [json_name = "totalUsageWithoutDiscount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_without_discount = this->_internal_total_usage_without_discount();
  uint64_t raw_total_usage_without_discount;
  memcpy(&raw_total_usage_without_discount, &tmp_total_usage_without_discount, sizeof(tmp_total_usage_without_discount));
  if (raw_total_usage_without_discount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_total_usage_without_discount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.CurrentMonthUsageSummary)
  return target;
}

size_t CurrentMonthUsageSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.CurrentMonthUsageSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double cloud_storage_usage = 1 [json_name = "cloudStorageUsage"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage = this->_internal_cloud_storage_usage();
  uint64_t raw_cloud_storage_usage;
  memcpy(&raw_cloud_storage_usage, &tmp_cloud_storage_usage, sizeof(tmp_cloud_storage_usage));
  if (raw_cloud_storage_usage != 0) {
    total_size += 1 + 8;
  }

  // double cloud_storage_usage_cost = 2 [json_name = "cloudStorageUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage_cost = this->_internal_cloud_storage_usage_cost();
  uint64_t raw_cloud_storage_usage_cost;
  memcpy(&raw_cloud_storage_usage_cost, &tmp_cloud_storage_usage_cost, sizeof(tmp_cloud_storage_usage_cost));
  if (raw_cloud_storage_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double data_upload_usage_cost = 3 [json_name = "dataUploadUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_cost = this->_internal_data_upload_usage_cost();
  uint64_t raw_data_upload_usage_cost;
  memcpy(&raw_data_upload_usage_cost, &tmp_data_upload_usage_cost, sizeof(tmp_data_upload_usage_cost));
  if (raw_data_upload_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double data_upload_usage_quantity = 4 [json_name = "dataUploadUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_quantity = this->_internal_data_upload_usage_quantity();
  uint64_t raw_data_upload_usage_quantity;
  memcpy(&raw_data_upload_usage_quantity, &tmp_data_upload_usage_quantity, sizeof(tmp_data_upload_usage_quantity));
  if (raw_data_upload_usage_quantity != 0) {
    total_size += 1 + 8;
  }

  // double data_egres_usage_cost = 5 [json_name = "dataEgresUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_cost = this->_internal_data_egres_usage_cost();
  uint64_t raw_data_egres_usage_cost;
  memcpy(&raw_data_egres_usage_cost, &tmp_data_egres_usage_cost, sizeof(tmp_data_egres_usage_cost));
  if (raw_data_egres_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double data_egres_usage_quantity = 6 [json_name = "dataEgresUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_quantity = this->_internal_data_egres_usage_quantity();
  uint64_t raw_data_egres_usage_quantity;
  memcpy(&raw_data_egres_usage_quantity, &tmp_data_egres_usage_quantity, sizeof(tmp_data_egres_usage_quantity));
  if (raw_data_egres_usage_quantity != 0) {
    total_size += 1 + 8;
  }

  // double standard_compute_usage_cost = 7 [json_name = "standardComputeUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_cost = this->_internal_standard_compute_usage_cost();
  uint64_t raw_standard_compute_usage_cost;
  memcpy(&raw_standard_compute_usage_cost, &tmp_standard_compute_usage_cost, sizeof(tmp_standard_compute_usage_cost));
  if (raw_standard_compute_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double standard_compute_usage_quantity = 8 [json_name = "standardComputeUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_quantity = this->_internal_standard_compute_usage_quantity();
  uint64_t raw_standard_compute_usage_quantity;
  memcpy(&raw_standard_compute_usage_quantity, &tmp_standard_compute_usage_quantity, sizeof(tmp_standard_compute_usage_quantity));
  if (raw_standard_compute_usage_quantity != 0) {
    total_size += 1 + 8;
  }

  // double total_usage_quantity = 9 [json_name = "totalUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_quantity = this->_internal_total_usage_quantity();
  uint64_t raw_total_usage_quantity;
  memcpy(&raw_total_usage_quantity, &tmp_total_usage_quantity, sizeof(tmp_total_usage_quantity));
  if (raw_total_usage_quantity != 0) {
    total_size += 1 + 8;
  }

  // double total_usage_with_discount = 10 [json_name = "totalUsageWithDiscount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_with_discount = this->_internal_total_usage_with_discount();
  uint64_t raw_total_usage_with_discount;
  memcpy(&raw_total_usage_with_discount, &tmp_total_usage_with_discount, sizeof(tmp_total_usage_with_discount));
  if (raw_total_usage_with_discount != 0) {
    total_size += 1 + 8;
  }

  // double total_usage_without_discount = 11 [json_name = "totalUsageWithoutDiscount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_without_discount = this->_internal_total_usage_without_discount();
  uint64_t raw_total_usage_without_discount;
  memcpy(&raw_total_usage_without_discount, &tmp_total_usage_without_discount, sizeof(tmp_total_usage_without_discount));
  if (raw_total_usage_without_discount != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CurrentMonthUsageSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CurrentMonthUsageSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CurrentMonthUsageSummary::GetClassData() const { return &_class_data_; }

void CurrentMonthUsageSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CurrentMonthUsageSummary *>(to)->MergeFrom(
      static_cast<const CurrentMonthUsageSummary &>(from));
}


void CurrentMonthUsageSummary::MergeFrom(const CurrentMonthUsageSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.CurrentMonthUsageSummary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage = from._internal_cloud_storage_usage();
  uint64_t raw_cloud_storage_usage;
  memcpy(&raw_cloud_storage_usage, &tmp_cloud_storage_usage, sizeof(tmp_cloud_storage_usage));
  if (raw_cloud_storage_usage != 0) {
    _internal_set_cloud_storage_usage(from._internal_cloud_storage_usage());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage_cost = from._internal_cloud_storage_usage_cost();
  uint64_t raw_cloud_storage_usage_cost;
  memcpy(&raw_cloud_storage_usage_cost, &tmp_cloud_storage_usage_cost, sizeof(tmp_cloud_storage_usage_cost));
  if (raw_cloud_storage_usage_cost != 0) {
    _internal_set_cloud_storage_usage_cost(from._internal_cloud_storage_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_cost = from._internal_data_upload_usage_cost();
  uint64_t raw_data_upload_usage_cost;
  memcpy(&raw_data_upload_usage_cost, &tmp_data_upload_usage_cost, sizeof(tmp_data_upload_usage_cost));
  if (raw_data_upload_usage_cost != 0) {
    _internal_set_data_upload_usage_cost(from._internal_data_upload_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_quantity = from._internal_data_upload_usage_quantity();
  uint64_t raw_data_upload_usage_quantity;
  memcpy(&raw_data_upload_usage_quantity, &tmp_data_upload_usage_quantity, sizeof(tmp_data_upload_usage_quantity));
  if (raw_data_upload_usage_quantity != 0) {
    _internal_set_data_upload_usage_quantity(from._internal_data_upload_usage_quantity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_cost = from._internal_data_egres_usage_cost();
  uint64_t raw_data_egres_usage_cost;
  memcpy(&raw_data_egres_usage_cost, &tmp_data_egres_usage_cost, sizeof(tmp_data_egres_usage_cost));
  if (raw_data_egres_usage_cost != 0) {
    _internal_set_data_egres_usage_cost(from._internal_data_egres_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_quantity = from._internal_data_egres_usage_quantity();
  uint64_t raw_data_egres_usage_quantity;
  memcpy(&raw_data_egres_usage_quantity, &tmp_data_egres_usage_quantity, sizeof(tmp_data_egres_usage_quantity));
  if (raw_data_egres_usage_quantity != 0) {
    _internal_set_data_egres_usage_quantity(from._internal_data_egres_usage_quantity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_cost = from._internal_standard_compute_usage_cost();
  uint64_t raw_standard_compute_usage_cost;
  memcpy(&raw_standard_compute_usage_cost, &tmp_standard_compute_usage_cost, sizeof(tmp_standard_compute_usage_cost));
  if (raw_standard_compute_usage_cost != 0) {
    _internal_set_standard_compute_usage_cost(from._internal_standard_compute_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_quantity = from._internal_standard_compute_usage_quantity();
  uint64_t raw_standard_compute_usage_quantity;
  memcpy(&raw_standard_compute_usage_quantity, &tmp_standard_compute_usage_quantity, sizeof(tmp_standard_compute_usage_quantity));
  if (raw_standard_compute_usage_quantity != 0) {
    _internal_set_standard_compute_usage_quantity(from._internal_standard_compute_usage_quantity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_quantity = from._internal_total_usage_quantity();
  uint64_t raw_total_usage_quantity;
  memcpy(&raw_total_usage_quantity, &tmp_total_usage_quantity, sizeof(tmp_total_usage_quantity));
  if (raw_total_usage_quantity != 0) {
    _internal_set_total_usage_quantity(from._internal_total_usage_quantity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_with_discount = from._internal_total_usage_with_discount();
  uint64_t raw_total_usage_with_discount;
  memcpy(&raw_total_usage_with_discount, &tmp_total_usage_with_discount, sizeof(tmp_total_usage_with_discount));
  if (raw_total_usage_with_discount != 0) {
    _internal_set_total_usage_with_discount(from._internal_total_usage_with_discount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_without_discount = from._internal_total_usage_without_discount();
  uint64_t raw_total_usage_without_discount;
  memcpy(&raw_total_usage_without_discount, &tmp_total_usage_without_discount, sizeof(tmp_total_usage_without_discount));
  if (raw_total_usage_without_discount != 0) {
    _internal_set_total_usage_without_discount(from._internal_total_usage_without_discount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CurrentMonthUsageSummary::CopyFrom(const CurrentMonthUsageSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.CurrentMonthUsageSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrentMonthUsageSummary::IsInitialized() const {
  return true;
}

void CurrentMonthUsageSummary::InternalSwap(CurrentMonthUsageSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CurrentMonthUsageSummary, total_usage_without_discount_)
      + sizeof(CurrentMonthUsageSummary::total_usage_without_discount_)
      - PROTOBUF_FIELD_OFFSET(CurrentMonthUsageSummary, cloud_storage_usage_)>(
          reinterpret_cast<char*>(&cloud_storage_usage_),
          reinterpret_cast<char*>(&other->cloud_storage_usage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CurrentMonthUsageSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[0]);
}

// ===================================================================

class InvoiceSummary::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& invoice_date(const InvoiceSummary* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& due_date(const InvoiceSummary* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InvoiceSummary::_Internal::invoice_date(const InvoiceSummary* msg) {
  return *msg->invoice_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
InvoiceSummary::_Internal::due_date(const InvoiceSummary* msg) {
  return *msg->due_date_;
}
void InvoiceSummary::clear_invoice_date() {
  if (GetArenaForAllocation() == nullptr && invoice_date_ != nullptr) {
    delete invoice_date_;
  }
  invoice_date_ = nullptr;
}
void InvoiceSummary::clear_due_date() {
  if (GetArenaForAllocation() == nullptr && due_date_ != nullptr) {
    delete due_date_;
  }
  due_date_ = nullptr;
}
InvoiceSummary::InvoiceSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.InvoiceSummary)
}
InvoiceSummary::InvoiceSummary(const InvoiceSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_invoice_date()) {
    invoice_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.invoice_date_);
  } else {
    invoice_date_ = nullptr;
  }
  if (from._internal_has_due_date()) {
    due_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.due_date_);
  } else {
    due_date_ = nullptr;
  }
  invoice_amount_ = from.invoice_amount_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.InvoiceSummary)
}

inline void InvoiceSummary::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&invoice_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&invoice_amount_) -
    reinterpret_cast<char*>(&invoice_date_)) + sizeof(invoice_amount_));
}

InvoiceSummary::~InvoiceSummary() {
  // @@protoc_insertion_point(destructor:viam.app.v1.InvoiceSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvoiceSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  status_.Destroy();
  if (this != internal_default_instance()) delete invoice_date_;
  if (this != internal_default_instance()) delete due_date_;
}

void InvoiceSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InvoiceSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.InvoiceSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && invoice_date_ != nullptr) {
    delete invoice_date_;
  }
  invoice_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && due_date_ != nullptr) {
    delete due_date_;
  }
  due_date_ = nullptr;
  invoice_amount_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InvoiceSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.InvoiceSummary.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp invoice_date = 2 [json_name = "invoiceDate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoice_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double invoice_amount = 3 [json_name = "invoiceAmount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          invoice_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string status = 4 [json_name = "status"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.InvoiceSummary.status"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp due_date = 5 [json_name = "dueDate"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_due_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InvoiceSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.InvoiceSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.InvoiceSummary.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp invoice_date = 2 [json_name = "invoiceDate"];
  if (this->_internal_has_invoice_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::invoice_date(this),
        _Internal::invoice_date(this).GetCachedSize(), target, stream);
  }

  // double invoice_amount = 3 [json_name = "invoiceAmount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_invoice_amount = this->_internal_invoice_amount();
  uint64_t raw_invoice_amount;
  memcpy(&raw_invoice_amount, &tmp_invoice_amount, sizeof(tmp_invoice_amount));
  if (raw_invoice_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_invoice_amount(), target);
  }

  // string status = 4 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.InvoiceSummary.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp due_date = 5 [json_name = "dueDate"];
  if (this->_internal_has_due_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::due_date(this),
        _Internal::due_date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.InvoiceSummary)
  return target;
}

size_t InvoiceSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.InvoiceSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string status = 4 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .google.protobuf.Timestamp invoice_date = 2 [json_name = "invoiceDate"];
  if (this->_internal_has_invoice_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invoice_date_);
  }

  // .google.protobuf.Timestamp due_date = 5 [json_name = "dueDate"];
  if (this->_internal_has_due_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *due_date_);
  }

  // double invoice_amount = 3 [json_name = "invoiceAmount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_invoice_amount = this->_internal_invoice_amount();
  uint64_t raw_invoice_amount;
  memcpy(&raw_invoice_amount, &tmp_invoice_amount, sizeof(tmp_invoice_amount));
  if (raw_invoice_amount != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InvoiceSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InvoiceSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InvoiceSummary::GetClassData() const { return &_class_data_; }

void InvoiceSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InvoiceSummary *>(to)->MergeFrom(
      static_cast<const InvoiceSummary &>(from));
}


void InvoiceSummary::MergeFrom(const InvoiceSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.InvoiceSummary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_invoice_date()) {
    _internal_mutable_invoice_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_invoice_date());
  }
  if (from._internal_has_due_date()) {
    _internal_mutable_due_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_due_date());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_invoice_amount = from._internal_invoice_amount();
  uint64_t raw_invoice_amount;
  memcpy(&raw_invoice_amount, &tmp_invoice_amount, sizeof(tmp_invoice_amount));
  if (raw_invoice_amount != 0) {
    _internal_set_invoice_amount(from._internal_invoice_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InvoiceSummary::CopyFrom(const InvoiceSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.InvoiceSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceSummary::IsInitialized() const {
  return true;
}

void InvoiceSummary::InternalSwap(InvoiceSummary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvoiceSummary, invoice_amount_)
      + sizeof(InvoiceSummary::invoice_amount_)
      - PROTOBUF_FIELD_OFFSET(InvoiceSummary, invoice_date_)>(
          reinterpret_cast<char*>(&invoice_date_),
          reinterpret_cast<char*>(&other->invoice_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InvoiceSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[1]);
}

// ===================================================================

class BillableResourceEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& occurred_at(const BillableResourceEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
BillableResourceEvent::_Internal::occurred_at(const BillableResourceEvent* msg) {
  return *msg->occurred_at_;
}
void BillableResourceEvent::clear_occurred_at() {
  if (GetArenaForAllocation() == nullptr && occurred_at_ != nullptr) {
    delete occurred_at_;
  }
  occurred_at_ = nullptr;
}
BillableResourceEvent::BillableResourceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.BillableResourceEvent)
}
BillableResourceEvent::BillableResourceEvent(const BillableResourceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  usage_quantity_unit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    usage_quantity_unit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usage_quantity_unit().empty()) {
    usage_quantity_unit_.Set(from._internal_usage_quantity_unit(), 
      GetArenaForAllocation());
  }
  usage_cost_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    usage_cost_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usage_cost().empty()) {
    usage_cost_.Set(from._internal_usage_cost(), 
      GetArenaForAllocation());
  }
  user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    user_name_.Set(from._internal_user_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_occurred_at()) {
    occurred_at_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.occurred_at_);
  } else {
    occurred_at_ = nullptr;
  }
  usage_quantity_ = from.usage_quantity_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.BillableResourceEvent)
}

inline void BillableResourceEvent::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
usage_quantity_unit_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  usage_quantity_unit_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
usage_cost_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  usage_cost_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&occurred_at_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&usage_quantity_) -
    reinterpret_cast<char*>(&occurred_at_)) + sizeof(usage_quantity_));
}

BillableResourceEvent::~BillableResourceEvent() {
  // @@protoc_insertion_point(destructor:viam.app.v1.BillableResourceEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BillableResourceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  type_.Destroy();
  usage_quantity_unit_.Destroy();
  usage_cost_.Destroy();
  user_name_.Destroy();
  if (this != internal_default_instance()) delete occurred_at_;
}

void BillableResourceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BillableResourceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.BillableResourceEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  type_.ClearToEmpty();
  usage_quantity_unit_.ClearToEmpty();
  usage_cost_.ClearToEmpty();
  user_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && occurred_at_ != nullptr) {
    delete occurred_at_;
  }
  occurred_at_ = nullptr;
  usage_quantity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BillableResourceEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.BillableResourceEvent.id"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.BillableResourceEvent.type"));
        } else
          goto handle_unusual;
        continue;
      // double usage_quantity = 3 [json_name = "usageQuantity"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          usage_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string usage_quantity_unit = 4 [json_name = "usageQuantityUnit"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_usage_quantity_unit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.BillableResourceEvent.usage_quantity_unit"));
        } else
          goto handle_unusual;
        continue;
      // string usage_cost = 5 [json_name = "usageCost"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_usage_cost();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.BillableResourceEvent.usage_cost"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp occurred_at = 6 [json_name = "occurredAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_occurred_at(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string user_name = 7 [json_name = "userName"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.BillableResourceEvent.user_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BillableResourceEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.BillableResourceEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.BillableResourceEvent.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.BillableResourceEvent.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // double usage_quantity = 3 [json_name = "usageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_usage_quantity = this->_internal_usage_quantity();
  uint64_t raw_usage_quantity;
  memcpy(&raw_usage_quantity, &tmp_usage_quantity, sizeof(tmp_usage_quantity));
  if (raw_usage_quantity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_usage_quantity(), target);
  }

  // string usage_quantity_unit = 4 [json_name = "usageQuantityUnit"];
  if (!this->_internal_usage_quantity_unit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usage_quantity_unit().data(), static_cast<int>(this->_internal_usage_quantity_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.BillableResourceEvent.usage_quantity_unit");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_usage_quantity_unit(), target);
  }

  // string usage_cost = 5 [json_name = "usageCost"];
  if (!this->_internal_usage_cost().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usage_cost().data(), static_cast<int>(this->_internal_usage_cost().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.BillableResourceEvent.usage_cost");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_usage_cost(), target);
  }

  // .google.protobuf.Timestamp occurred_at = 6 [json_name = "occurredAt"];
  if (this->_internal_has_occurred_at()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::occurred_at(this),
        _Internal::occurred_at(this).GetCachedSize(), target, stream);
  }

  // string user_name = 7 [json_name = "userName"];
  if (!this->_internal_user_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.BillableResourceEvent.user_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_user_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.BillableResourceEvent)
  return target;
}

size_t BillableResourceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.BillableResourceEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string usage_quantity_unit = 4 [json_name = "usageQuantityUnit"];
  if (!this->_internal_usage_quantity_unit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usage_quantity_unit());
  }

  // string usage_cost = 5 [json_name = "usageCost"];
  if (!this->_internal_usage_cost().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usage_cost());
  }

  // string user_name = 7 [json_name = "userName"];
  if (!this->_internal_user_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_name());
  }

  // .google.protobuf.Timestamp occurred_at = 6 [json_name = "occurredAt"];
  if (this->_internal_has_occurred_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *occurred_at_);
  }

  // double usage_quantity = 3 [json_name = "usageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_usage_quantity = this->_internal_usage_quantity();
  uint64_t raw_usage_quantity;
  memcpy(&raw_usage_quantity, &tmp_usage_quantity, sizeof(tmp_usage_quantity));
  if (raw_usage_quantity != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BillableResourceEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BillableResourceEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BillableResourceEvent::GetClassData() const { return &_class_data_; }

void BillableResourceEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BillableResourceEvent *>(to)->MergeFrom(
      static_cast<const BillableResourceEvent &>(from));
}


void BillableResourceEvent::MergeFrom(const BillableResourceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.BillableResourceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_usage_quantity_unit().empty()) {
    _internal_set_usage_quantity_unit(from._internal_usage_quantity_unit());
  }
  if (!from._internal_usage_cost().empty()) {
    _internal_set_usage_cost(from._internal_usage_cost());
  }
  if (!from._internal_user_name().empty()) {
    _internal_set_user_name(from._internal_user_name());
  }
  if (from._internal_has_occurred_at()) {
    _internal_mutable_occurred_at()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_occurred_at());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_usage_quantity = from._internal_usage_quantity();
  uint64_t raw_usage_quantity;
  memcpy(&raw_usage_quantity, &tmp_usage_quantity, sizeof(tmp_usage_quantity));
  if (raw_usage_quantity != 0) {
    _internal_set_usage_quantity(from._internal_usage_quantity());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BillableResourceEvent::CopyFrom(const BillableResourceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.BillableResourceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillableResourceEvent::IsInitialized() const {
  return true;
}

void BillableResourceEvent::InternalSwap(BillableResourceEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &usage_quantity_unit_, lhs_arena,
      &other->usage_quantity_unit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &usage_cost_, lhs_arena,
      &other->usage_cost_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_name_, lhs_arena,
      &other->user_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BillableResourceEvent, usage_quantity_)
      + sizeof(BillableResourceEvent::usage_quantity_)
      - PROTOBUF_FIELD_OFFSET(BillableResourceEvent, occurred_at_)>(
          reinterpret_cast<char*>(&occurred_at_),
          reinterpret_cast<char*>(&other->occurred_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BillableResourceEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[2]);
}

// ===================================================================

class Invoice::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& invoice_date(const Invoice* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& due_date(const Invoice* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Invoice::_Internal::invoice_date(const Invoice* msg) {
  return *msg->invoice_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Invoice::_Internal::due_date(const Invoice* msg) {
  return *msg->due_date_;
}
void Invoice::clear_invoice_date() {
  if (GetArenaForAllocation() == nullptr && invoice_date_ != nullptr) {
    delete invoice_date_;
  }
  invoice_date_ = nullptr;
}
void Invoice::clear_due_date() {
  if (GetArenaForAllocation() == nullptr && due_date_ != nullptr) {
    delete due_date_;
  }
  due_date_ = nullptr;
}
Invoice::Invoice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.Invoice)
}
Invoice::Invoice(const Invoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(from._internal_status(), 
      GetArenaForAllocation());
  }
  emailed_to_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    emailed_to_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_emailed_to().empty()) {
    emailed_to_.Set(from._internal_emailed_to(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_invoice_date()) {
    invoice_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.invoice_date_);
  } else {
    invoice_date_ = nullptr;
  }
  if (from._internal_has_due_date()) {
    due_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.due_date_);
  } else {
    due_date_ = nullptr;
  }
  invoice_amount_ = from.invoice_amount_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.Invoice)
}

inline void Invoice::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
emailed_to_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  emailed_to_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&invoice_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&invoice_amount_) -
    reinterpret_cast<char*>(&invoice_date_)) + sizeof(invoice_amount_));
}

Invoice::~Invoice() {
  // @@protoc_insertion_point(destructor:viam.app.v1.Invoice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Invoice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  status_.Destroy();
  emailed_to_.Destroy();
  if (this != internal_default_instance()) delete invoice_date_;
  if (this != internal_default_instance()) delete due_date_;
}

void Invoice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Invoice::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.Invoice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  id_.ClearToEmpty();
  status_.ClearToEmpty();
  emailed_to_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && invoice_date_ != nullptr) {
    delete invoice_date_;
  }
  invoice_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && due_date_ != nullptr) {
    delete due_date_;
  }
  due_date_ = nullptr;
  invoice_amount_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Invoice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.Invoice.id"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp invoice_date = 2 [json_name = "invoiceDate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoice_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double invoice_amount = 3 [json_name = "invoiceAmount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          invoice_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string status = 4 [json_name = "status"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.Invoice.status"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp due_date = 5 [json_name = "dueDate"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_due_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.BillableResourceEvent items = 6 [json_name = "items"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string emailed_to = 7 [json_name = "emailedTo"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_emailed_to();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.Invoice.emailed_to"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Invoice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.Invoice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.Invoice.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp invoice_date = 2 [json_name = "invoiceDate"];
  if (this->_internal_has_invoice_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::invoice_date(this),
        _Internal::invoice_date(this).GetCachedSize(), target, stream);
  }

  // double invoice_amount = 3 [json_name = "invoiceAmount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_invoice_amount = this->_internal_invoice_amount();
  uint64_t raw_invoice_amount;
  memcpy(&raw_invoice_amount, &tmp_invoice_amount, sizeof(tmp_invoice_amount));
  if (raw_invoice_amount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_invoice_amount(), target);
  }

  // string status = 4 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.Invoice.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp due_date = 5 [json_name = "dueDate"];
  if (this->_internal_has_due_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::due_date(this),
        _Internal::due_date(this).GetCachedSize(), target, stream);
  }

  // repeated .viam.app.v1.BillableResourceEvent items = 6 [json_name = "items"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string emailed_to = 7 [json_name = "emailedTo"];
  if (!this->_internal_emailed_to().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_emailed_to().data(), static_cast<int>(this->_internal_emailed_to().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.Invoice.emailed_to");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_emailed_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.Invoice)
  return target;
}

size_t Invoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.Invoice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.v1.BillableResourceEvent items = 6 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string status = 4 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string emailed_to = 7 [json_name = "emailedTo"];
  if (!this->_internal_emailed_to().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_emailed_to());
  }

  // .google.protobuf.Timestamp invoice_date = 2 [json_name = "invoiceDate"];
  if (this->_internal_has_invoice_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invoice_date_);
  }

  // .google.protobuf.Timestamp due_date = 5 [json_name = "dueDate"];
  if (this->_internal_has_due_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *due_date_);
  }

  // double invoice_amount = 3 [json_name = "invoiceAmount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_invoice_amount = this->_internal_invoice_amount();
  uint64_t raw_invoice_amount;
  memcpy(&raw_invoice_amount, &tmp_invoice_amount, sizeof(tmp_invoice_amount));
  if (raw_invoice_amount != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Invoice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Invoice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Invoice::GetClassData() const { return &_class_data_; }

void Invoice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Invoice *>(to)->MergeFrom(
      static_cast<const Invoice &>(from));
}


void Invoice::MergeFrom(const Invoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.Invoice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (!from._internal_emailed_to().empty()) {
    _internal_set_emailed_to(from._internal_emailed_to());
  }
  if (from._internal_has_invoice_date()) {
    _internal_mutable_invoice_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_invoice_date());
  }
  if (from._internal_has_due_date()) {
    _internal_mutable_due_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_due_date());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_invoice_amount = from._internal_invoice_amount();
  uint64_t raw_invoice_amount;
  memcpy(&raw_invoice_amount, &tmp_invoice_amount, sizeof(tmp_invoice_amount));
  if (raw_invoice_amount != 0) {
    _internal_set_invoice_amount(from._internal_invoice_amount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Invoice::CopyFrom(const Invoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.Invoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invoice::IsInitialized() const {
  return true;
}

void Invoice::InternalSwap(Invoice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &emailed_to_, lhs_arena,
      &other->emailed_to_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Invoice, invoice_amount_)
      + sizeof(Invoice::invoice_amount_)
      - PROTOBUF_FIELD_OFFSET(Invoice, invoice_date_)>(
          reinterpret_cast<char*>(&invoice_date_),
          reinterpret_cast<char*>(&other->invoice_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Invoice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[3]);
}

// ===================================================================

class GetCurrentMonthUsageSummaryRequest::_Internal {
 public:
};

GetCurrentMonthUsageSummaryRequest::GetCurrentMonthUsageSummaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetCurrentMonthUsageSummaryRequest)
}
GetCurrentMonthUsageSummaryRequest::GetCurrentMonthUsageSummaryRequest(const GetCurrentMonthUsageSummaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetCurrentMonthUsageSummaryRequest)
}

inline void GetCurrentMonthUsageSummaryRequest::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetCurrentMonthUsageSummaryRequest::~GetCurrentMonthUsageSummaryRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetCurrentMonthUsageSummaryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCurrentMonthUsageSummaryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  org_id_.Destroy();
}

void GetCurrentMonthUsageSummaryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCurrentMonthUsageSummaryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetCurrentMonthUsageSummaryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCurrentMonthUsageSummaryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetCurrentMonthUsageSummaryRequest.org_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCurrentMonthUsageSummaryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetCurrentMonthUsageSummaryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetCurrentMonthUsageSummaryRequest.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetCurrentMonthUsageSummaryRequest)
  return target;
}

size_t GetCurrentMonthUsageSummaryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetCurrentMonthUsageSummaryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCurrentMonthUsageSummaryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCurrentMonthUsageSummaryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCurrentMonthUsageSummaryRequest::GetClassData() const { return &_class_data_; }

void GetCurrentMonthUsageSummaryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCurrentMonthUsageSummaryRequest *>(to)->MergeFrom(
      static_cast<const GetCurrentMonthUsageSummaryRequest &>(from));
}


void GetCurrentMonthUsageSummaryRequest::MergeFrom(const GetCurrentMonthUsageSummaryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetCurrentMonthUsageSummaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCurrentMonthUsageSummaryRequest::CopyFrom(const GetCurrentMonthUsageSummaryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetCurrentMonthUsageSummaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrentMonthUsageSummaryRequest::IsInitialized() const {
  return true;
}

void GetCurrentMonthUsageSummaryRequest::InternalSwap(GetCurrentMonthUsageSummaryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCurrentMonthUsageSummaryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[4]);
}

// ===================================================================

class GetCurrentMonthUsageSummaryResponse::_Internal {
 public:
};

GetCurrentMonthUsageSummaryResponse::GetCurrentMonthUsageSummaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetCurrentMonthUsageSummaryResponse)
}
GetCurrentMonthUsageSummaryResponse::GetCurrentMonthUsageSummaryResponse(const GetCurrentMonthUsageSummaryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cloud_storage_usage_, &from.cloud_storage_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_usage_without_discount_) -
    reinterpret_cast<char*>(&cloud_storage_usage_)) + sizeof(total_usage_without_discount_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetCurrentMonthUsageSummaryResponse)
}

inline void GetCurrentMonthUsageSummaryResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cloud_storage_usage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_usage_without_discount_) -
    reinterpret_cast<char*>(&cloud_storage_usage_)) + sizeof(total_usage_without_discount_));
}

GetCurrentMonthUsageSummaryResponse::~GetCurrentMonthUsageSummaryResponse() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetCurrentMonthUsageSummaryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCurrentMonthUsageSummaryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetCurrentMonthUsageSummaryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCurrentMonthUsageSummaryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetCurrentMonthUsageSummaryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cloud_storage_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_usage_without_discount_) -
      reinterpret_cast<char*>(&cloud_storage_usage_)) + sizeof(total_usage_without_discount_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCurrentMonthUsageSummaryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double cloud_storage_usage = 1 [json_name = "cloudStorageUsage"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          cloud_storage_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cloud_storage_usage_cost = 2 [json_name = "cloudStorageUsageCost"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          cloud_storage_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_upload_usage_cost = 3 [json_name = "dataUploadUsageCost"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          data_upload_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_upload_usage_quantity = 4 [json_name = "dataUploadUsageQuantity"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          data_upload_usage_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_egres_usage_cost = 5 [json_name = "dataEgresUsageCost"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          data_egres_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double data_egres_usage_quantity = 6 [json_name = "dataEgresUsageQuantity"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          data_egres_usage_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double standard_compute_usage_cost = 7 [json_name = "standardComputeUsageCost"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          standard_compute_usage_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double standard_compute_usage_quantity = 8 [json_name = "standardComputeUsageQuantity"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          standard_compute_usage_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_usage_quantity = 9 [json_name = "totalUsageQuantity"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          total_usage_quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_usage_with_discount = 10 [json_name = "totalUsageWithDiscount"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          total_usage_with_discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_usage_without_discount = 11 [json_name = "totalUsageWithoutDiscount"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          total_usage_without_discount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCurrentMonthUsageSummaryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetCurrentMonthUsageSummaryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double cloud_storage_usage = 1 [json_name = "cloudStorageUsage"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage = this->_internal_cloud_storage_usage();
  uint64_t raw_cloud_storage_usage;
  memcpy(&raw_cloud_storage_usage, &tmp_cloud_storage_usage, sizeof(tmp_cloud_storage_usage));
  if (raw_cloud_storage_usage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_cloud_storage_usage(), target);
  }

  // double cloud_storage_usage_cost = 2 [json_name = "cloudStorageUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage_cost = this->_internal_cloud_storage_usage_cost();
  uint64_t raw_cloud_storage_usage_cost;
  memcpy(&raw_cloud_storage_usage_cost, &tmp_cloud_storage_usage_cost, sizeof(tmp_cloud_storage_usage_cost));
  if (raw_cloud_storage_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_cloud_storage_usage_cost(), target);
  }

  // double data_upload_usage_cost = 3 [json_name = "dataUploadUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_cost = this->_internal_data_upload_usage_cost();
  uint64_t raw_data_upload_usage_cost;
  memcpy(&raw_data_upload_usage_cost, &tmp_data_upload_usage_cost, sizeof(tmp_data_upload_usage_cost));
  if (raw_data_upload_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_data_upload_usage_cost(), target);
  }

  // double data_upload_usage_quantity = 4 [json_name = "dataUploadUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_quantity = this->_internal_data_upload_usage_quantity();
  uint64_t raw_data_upload_usage_quantity;
  memcpy(&raw_data_upload_usage_quantity, &tmp_data_upload_usage_quantity, sizeof(tmp_data_upload_usage_quantity));
  if (raw_data_upload_usage_quantity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_data_upload_usage_quantity(), target);
  }

  // double data_egres_usage_cost = 5 [json_name = "dataEgresUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_cost = this->_internal_data_egres_usage_cost();
  uint64_t raw_data_egres_usage_cost;
  memcpy(&raw_data_egres_usage_cost, &tmp_data_egres_usage_cost, sizeof(tmp_data_egres_usage_cost));
  if (raw_data_egres_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_data_egres_usage_cost(), target);
  }

  // double data_egres_usage_quantity = 6 [json_name = "dataEgresUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_quantity = this->_internal_data_egres_usage_quantity();
  uint64_t raw_data_egres_usage_quantity;
  memcpy(&raw_data_egres_usage_quantity, &tmp_data_egres_usage_quantity, sizeof(tmp_data_egres_usage_quantity));
  if (raw_data_egres_usage_quantity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_data_egres_usage_quantity(), target);
  }

  // double standard_compute_usage_cost = 7 [json_name = "standardComputeUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_cost = this->_internal_standard_compute_usage_cost();
  uint64_t raw_standard_compute_usage_cost;
  memcpy(&raw_standard_compute_usage_cost, &tmp_standard_compute_usage_cost, sizeof(tmp_standard_compute_usage_cost));
  if (raw_standard_compute_usage_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_standard_compute_usage_cost(), target);
  }

  // double standard_compute_usage_quantity = 8 [json_name = "standardComputeUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_quantity = this->_internal_standard_compute_usage_quantity();
  uint64_t raw_standard_compute_usage_quantity;
  memcpy(&raw_standard_compute_usage_quantity, &tmp_standard_compute_usage_quantity, sizeof(tmp_standard_compute_usage_quantity));
  if (raw_standard_compute_usage_quantity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_standard_compute_usage_quantity(), target);
  }

  // double total_usage_quantity = 9 [json_name = "totalUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_quantity = this->_internal_total_usage_quantity();
  uint64_t raw_total_usage_quantity;
  memcpy(&raw_total_usage_quantity, &tmp_total_usage_quantity, sizeof(tmp_total_usage_quantity));
  if (raw_total_usage_quantity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_total_usage_quantity(), target);
  }

  // double total_usage_with_discount = 10 [json_name = "totalUsageWithDiscount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_with_discount = this->_internal_total_usage_with_discount();
  uint64_t raw_total_usage_with_discount;
  memcpy(&raw_total_usage_with_discount, &tmp_total_usage_with_discount, sizeof(tmp_total_usage_with_discount));
  if (raw_total_usage_with_discount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_total_usage_with_discount(), target);
  }

  // double total_usage_without_discount = 11 [json_name = "totalUsageWithoutDiscount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_without_discount = this->_internal_total_usage_without_discount();
  uint64_t raw_total_usage_without_discount;
  memcpy(&raw_total_usage_without_discount, &tmp_total_usage_without_discount, sizeof(tmp_total_usage_without_discount));
  if (raw_total_usage_without_discount != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_total_usage_without_discount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetCurrentMonthUsageSummaryResponse)
  return target;
}

size_t GetCurrentMonthUsageSummaryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetCurrentMonthUsageSummaryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double cloud_storage_usage = 1 [json_name = "cloudStorageUsage"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage = this->_internal_cloud_storage_usage();
  uint64_t raw_cloud_storage_usage;
  memcpy(&raw_cloud_storage_usage, &tmp_cloud_storage_usage, sizeof(tmp_cloud_storage_usage));
  if (raw_cloud_storage_usage != 0) {
    total_size += 1 + 8;
  }

  // double cloud_storage_usage_cost = 2 [json_name = "cloudStorageUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage_cost = this->_internal_cloud_storage_usage_cost();
  uint64_t raw_cloud_storage_usage_cost;
  memcpy(&raw_cloud_storage_usage_cost, &tmp_cloud_storage_usage_cost, sizeof(tmp_cloud_storage_usage_cost));
  if (raw_cloud_storage_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double data_upload_usage_cost = 3 [json_name = "dataUploadUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_cost = this->_internal_data_upload_usage_cost();
  uint64_t raw_data_upload_usage_cost;
  memcpy(&raw_data_upload_usage_cost, &tmp_data_upload_usage_cost, sizeof(tmp_data_upload_usage_cost));
  if (raw_data_upload_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double data_upload_usage_quantity = 4 [json_name = "dataUploadUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_quantity = this->_internal_data_upload_usage_quantity();
  uint64_t raw_data_upload_usage_quantity;
  memcpy(&raw_data_upload_usage_quantity, &tmp_data_upload_usage_quantity, sizeof(tmp_data_upload_usage_quantity));
  if (raw_data_upload_usage_quantity != 0) {
    total_size += 1 + 8;
  }

  // double data_egres_usage_cost = 5 [json_name = "dataEgresUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_cost = this->_internal_data_egres_usage_cost();
  uint64_t raw_data_egres_usage_cost;
  memcpy(&raw_data_egres_usage_cost, &tmp_data_egres_usage_cost, sizeof(tmp_data_egres_usage_cost));
  if (raw_data_egres_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double data_egres_usage_quantity = 6 [json_name = "dataEgresUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_quantity = this->_internal_data_egres_usage_quantity();
  uint64_t raw_data_egres_usage_quantity;
  memcpy(&raw_data_egres_usage_quantity, &tmp_data_egres_usage_quantity, sizeof(tmp_data_egres_usage_quantity));
  if (raw_data_egres_usage_quantity != 0) {
    total_size += 1 + 8;
  }

  // double standard_compute_usage_cost = 7 [json_name = "standardComputeUsageCost"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_cost = this->_internal_standard_compute_usage_cost();
  uint64_t raw_standard_compute_usage_cost;
  memcpy(&raw_standard_compute_usage_cost, &tmp_standard_compute_usage_cost, sizeof(tmp_standard_compute_usage_cost));
  if (raw_standard_compute_usage_cost != 0) {
    total_size += 1 + 8;
  }

  // double standard_compute_usage_quantity = 8 [json_name = "standardComputeUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_quantity = this->_internal_standard_compute_usage_quantity();
  uint64_t raw_standard_compute_usage_quantity;
  memcpy(&raw_standard_compute_usage_quantity, &tmp_standard_compute_usage_quantity, sizeof(tmp_standard_compute_usage_quantity));
  if (raw_standard_compute_usage_quantity != 0) {
    total_size += 1 + 8;
  }

  // double total_usage_quantity = 9 [json_name = "totalUsageQuantity"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_quantity = this->_internal_total_usage_quantity();
  uint64_t raw_total_usage_quantity;
  memcpy(&raw_total_usage_quantity, &tmp_total_usage_quantity, sizeof(tmp_total_usage_quantity));
  if (raw_total_usage_quantity != 0) {
    total_size += 1 + 8;
  }

  // double total_usage_with_discount = 10 [json_name = "totalUsageWithDiscount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_with_discount = this->_internal_total_usage_with_discount();
  uint64_t raw_total_usage_with_discount;
  memcpy(&raw_total_usage_with_discount, &tmp_total_usage_with_discount, sizeof(tmp_total_usage_with_discount));
  if (raw_total_usage_with_discount != 0) {
    total_size += 1 + 8;
  }

  // double total_usage_without_discount = 11 [json_name = "totalUsageWithoutDiscount"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_without_discount = this->_internal_total_usage_without_discount();
  uint64_t raw_total_usage_without_discount;
  memcpy(&raw_total_usage_without_discount, &tmp_total_usage_without_discount, sizeof(tmp_total_usage_without_discount));
  if (raw_total_usage_without_discount != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCurrentMonthUsageSummaryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCurrentMonthUsageSummaryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCurrentMonthUsageSummaryResponse::GetClassData() const { return &_class_data_; }

void GetCurrentMonthUsageSummaryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCurrentMonthUsageSummaryResponse *>(to)->MergeFrom(
      static_cast<const GetCurrentMonthUsageSummaryResponse &>(from));
}


void GetCurrentMonthUsageSummaryResponse::MergeFrom(const GetCurrentMonthUsageSummaryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetCurrentMonthUsageSummaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage = from._internal_cloud_storage_usage();
  uint64_t raw_cloud_storage_usage;
  memcpy(&raw_cloud_storage_usage, &tmp_cloud_storage_usage, sizeof(tmp_cloud_storage_usage));
  if (raw_cloud_storage_usage != 0) {
    _internal_set_cloud_storage_usage(from._internal_cloud_storage_usage());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cloud_storage_usage_cost = from._internal_cloud_storage_usage_cost();
  uint64_t raw_cloud_storage_usage_cost;
  memcpy(&raw_cloud_storage_usage_cost, &tmp_cloud_storage_usage_cost, sizeof(tmp_cloud_storage_usage_cost));
  if (raw_cloud_storage_usage_cost != 0) {
    _internal_set_cloud_storage_usage_cost(from._internal_cloud_storage_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_cost = from._internal_data_upload_usage_cost();
  uint64_t raw_data_upload_usage_cost;
  memcpy(&raw_data_upload_usage_cost, &tmp_data_upload_usage_cost, sizeof(tmp_data_upload_usage_cost));
  if (raw_data_upload_usage_cost != 0) {
    _internal_set_data_upload_usage_cost(from._internal_data_upload_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_upload_usage_quantity = from._internal_data_upload_usage_quantity();
  uint64_t raw_data_upload_usage_quantity;
  memcpy(&raw_data_upload_usage_quantity, &tmp_data_upload_usage_quantity, sizeof(tmp_data_upload_usage_quantity));
  if (raw_data_upload_usage_quantity != 0) {
    _internal_set_data_upload_usage_quantity(from._internal_data_upload_usage_quantity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_cost = from._internal_data_egres_usage_cost();
  uint64_t raw_data_egres_usage_cost;
  memcpy(&raw_data_egres_usage_cost, &tmp_data_egres_usage_cost, sizeof(tmp_data_egres_usage_cost));
  if (raw_data_egres_usage_cost != 0) {
    _internal_set_data_egres_usage_cost(from._internal_data_egres_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_data_egres_usage_quantity = from._internal_data_egres_usage_quantity();
  uint64_t raw_data_egres_usage_quantity;
  memcpy(&raw_data_egres_usage_quantity, &tmp_data_egres_usage_quantity, sizeof(tmp_data_egres_usage_quantity));
  if (raw_data_egres_usage_quantity != 0) {
    _internal_set_data_egres_usage_quantity(from._internal_data_egres_usage_quantity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_cost = from._internal_standard_compute_usage_cost();
  uint64_t raw_standard_compute_usage_cost;
  memcpy(&raw_standard_compute_usage_cost, &tmp_standard_compute_usage_cost, sizeof(tmp_standard_compute_usage_cost));
  if (raw_standard_compute_usage_cost != 0) {
    _internal_set_standard_compute_usage_cost(from._internal_standard_compute_usage_cost());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standard_compute_usage_quantity = from._internal_standard_compute_usage_quantity();
  uint64_t raw_standard_compute_usage_quantity;
  memcpy(&raw_standard_compute_usage_quantity, &tmp_standard_compute_usage_quantity, sizeof(tmp_standard_compute_usage_quantity));
  if (raw_standard_compute_usage_quantity != 0) {
    _internal_set_standard_compute_usage_quantity(from._internal_standard_compute_usage_quantity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_quantity = from._internal_total_usage_quantity();
  uint64_t raw_total_usage_quantity;
  memcpy(&raw_total_usage_quantity, &tmp_total_usage_quantity, sizeof(tmp_total_usage_quantity));
  if (raw_total_usage_quantity != 0) {
    _internal_set_total_usage_quantity(from._internal_total_usage_quantity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_with_discount = from._internal_total_usage_with_discount();
  uint64_t raw_total_usage_with_discount;
  memcpy(&raw_total_usage_with_discount, &tmp_total_usage_with_discount, sizeof(tmp_total_usage_with_discount));
  if (raw_total_usage_with_discount != 0) {
    _internal_set_total_usage_with_discount(from._internal_total_usage_with_discount());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_usage_without_discount = from._internal_total_usage_without_discount();
  uint64_t raw_total_usage_without_discount;
  memcpy(&raw_total_usage_without_discount, &tmp_total_usage_without_discount, sizeof(tmp_total_usage_without_discount));
  if (raw_total_usage_without_discount != 0) {
    _internal_set_total_usage_without_discount(from._internal_total_usage_without_discount());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCurrentMonthUsageSummaryResponse::CopyFrom(const GetCurrentMonthUsageSummaryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetCurrentMonthUsageSummaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCurrentMonthUsageSummaryResponse::IsInitialized() const {
  return true;
}

void GetCurrentMonthUsageSummaryResponse::InternalSwap(GetCurrentMonthUsageSummaryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCurrentMonthUsageSummaryResponse, total_usage_without_discount_)
      + sizeof(GetCurrentMonthUsageSummaryResponse::total_usage_without_discount_)
      - PROTOBUF_FIELD_OFFSET(GetCurrentMonthUsageSummaryResponse, cloud_storage_usage_)>(
          reinterpret_cast<char*>(&cloud_storage_usage_),
          reinterpret_cast<char*>(&other->cloud_storage_usage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCurrentMonthUsageSummaryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[5]);
}

// ===================================================================

class GetUnpaidBalanceRequest::_Internal {
 public:
};

GetUnpaidBalanceRequest::GetUnpaidBalanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetUnpaidBalanceRequest)
}
GetUnpaidBalanceRequest::GetUnpaidBalanceRequest(const GetUnpaidBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetUnpaidBalanceRequest)
}

inline void GetUnpaidBalanceRequest::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetUnpaidBalanceRequest::~GetUnpaidBalanceRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetUnpaidBalanceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUnpaidBalanceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  org_id_.Destroy();
}

void GetUnpaidBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetUnpaidBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetUnpaidBalanceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUnpaidBalanceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetUnpaidBalanceRequest.org_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUnpaidBalanceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetUnpaidBalanceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetUnpaidBalanceRequest.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetUnpaidBalanceRequest)
  return target;
}

size_t GetUnpaidBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetUnpaidBalanceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUnpaidBalanceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetUnpaidBalanceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUnpaidBalanceRequest::GetClassData() const { return &_class_data_; }

void GetUnpaidBalanceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetUnpaidBalanceRequest *>(to)->MergeFrom(
      static_cast<const GetUnpaidBalanceRequest &>(from));
}


void GetUnpaidBalanceRequest::MergeFrom(const GetUnpaidBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetUnpaidBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUnpaidBalanceRequest::CopyFrom(const GetUnpaidBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetUnpaidBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnpaidBalanceRequest::IsInitialized() const {
  return true;
}

void GetUnpaidBalanceRequest::InternalSwap(GetUnpaidBalanceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUnpaidBalanceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[6]);
}

// ===================================================================

class GetUnpaidBalanceResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& unpaid_balance_due_date(const GetUnpaidBalanceResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetUnpaidBalanceResponse::_Internal::unpaid_balance_due_date(const GetUnpaidBalanceResponse* msg) {
  return *msg->unpaid_balance_due_date_;
}
void GetUnpaidBalanceResponse::clear_unpaid_balance_due_date() {
  if (GetArenaForAllocation() == nullptr && unpaid_balance_due_date_ != nullptr) {
    delete unpaid_balance_due_date_;
  }
  unpaid_balance_due_date_ = nullptr;
}
GetUnpaidBalanceResponse::GetUnpaidBalanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetUnpaidBalanceResponse)
}
GetUnpaidBalanceResponse::GetUnpaidBalanceResponse(const GetUnpaidBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_unpaid_balance_due_date()) {
    unpaid_balance_due_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.unpaid_balance_due_date_);
  } else {
    unpaid_balance_due_date_ = nullptr;
  }
  unpaid_balance_ = from.unpaid_balance_;
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetUnpaidBalanceResponse)
}

inline void GetUnpaidBalanceResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unpaid_balance_due_date_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unpaid_balance_) -
    reinterpret_cast<char*>(&unpaid_balance_due_date_)) + sizeof(unpaid_balance_));
}

GetUnpaidBalanceResponse::~GetUnpaidBalanceResponse() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetUnpaidBalanceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetUnpaidBalanceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete unpaid_balance_due_date_;
}

void GetUnpaidBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetUnpaidBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetUnpaidBalanceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && unpaid_balance_due_date_ != nullptr) {
    delete unpaid_balance_due_date_;
  }
  unpaid_balance_due_date_ = nullptr;
  unpaid_balance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUnpaidBalanceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double unpaid_balance = 1 [json_name = "unpaidBalance"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          unpaid_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp unpaid_balance_due_date = 2 [json_name = "unpaidBalanceDueDate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_unpaid_balance_due_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetUnpaidBalanceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetUnpaidBalanceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double unpaid_balance = 1 [json_name = "unpaidBalance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_unpaid_balance = this->_internal_unpaid_balance();
  uint64_t raw_unpaid_balance;
  memcpy(&raw_unpaid_balance, &tmp_unpaid_balance, sizeof(tmp_unpaid_balance));
  if (raw_unpaid_balance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_unpaid_balance(), target);
  }

  // .google.protobuf.Timestamp unpaid_balance_due_date = 2 [json_name = "unpaidBalanceDueDate"];
  if (this->_internal_has_unpaid_balance_due_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::unpaid_balance_due_date(this),
        _Internal::unpaid_balance_due_date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetUnpaidBalanceResponse)
  return target;
}

size_t GetUnpaidBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetUnpaidBalanceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp unpaid_balance_due_date = 2 [json_name = "unpaidBalanceDueDate"];
  if (this->_internal_has_unpaid_balance_due_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unpaid_balance_due_date_);
  }

  // double unpaid_balance = 1 [json_name = "unpaidBalance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_unpaid_balance = this->_internal_unpaid_balance();
  uint64_t raw_unpaid_balance;
  memcpy(&raw_unpaid_balance, &tmp_unpaid_balance, sizeof(tmp_unpaid_balance));
  if (raw_unpaid_balance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetUnpaidBalanceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetUnpaidBalanceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetUnpaidBalanceResponse::GetClassData() const { return &_class_data_; }

void GetUnpaidBalanceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetUnpaidBalanceResponse *>(to)->MergeFrom(
      static_cast<const GetUnpaidBalanceResponse &>(from));
}


void GetUnpaidBalanceResponse::MergeFrom(const GetUnpaidBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetUnpaidBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unpaid_balance_due_date()) {
    _internal_mutable_unpaid_balance_due_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_unpaid_balance_due_date());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_unpaid_balance = from._internal_unpaid_balance();
  uint64_t raw_unpaid_balance;
  memcpy(&raw_unpaid_balance, &tmp_unpaid_balance, sizeof(tmp_unpaid_balance));
  if (raw_unpaid_balance != 0) {
    _internal_set_unpaid_balance(from._internal_unpaid_balance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetUnpaidBalanceResponse::CopyFrom(const GetUnpaidBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetUnpaidBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUnpaidBalanceResponse::IsInitialized() const {
  return true;
}

void GetUnpaidBalanceResponse::InternalSwap(GetUnpaidBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetUnpaidBalanceResponse, unpaid_balance_)
      + sizeof(GetUnpaidBalanceResponse::unpaid_balance_)
      - PROTOBUF_FIELD_OFFSET(GetUnpaidBalanceResponse, unpaid_balance_due_date_)>(
          reinterpret_cast<char*>(&unpaid_balance_due_date_),
          reinterpret_cast<char*>(&other->unpaid_balance_due_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUnpaidBalanceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[7]);
}

// ===================================================================

class GetInvoiceHistoryRequest::_Internal {
 public:
};

GetInvoiceHistoryRequest::GetInvoiceHistoryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetInvoiceHistoryRequest)
}
GetInvoiceHistoryRequest::GetInvoiceHistoryRequest(const GetInvoiceHistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetInvoiceHistoryRequest)
}

inline void GetInvoiceHistoryRequest::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetInvoiceHistoryRequest::~GetInvoiceHistoryRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetInvoiceHistoryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInvoiceHistoryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  org_id_.Destroy();
}

void GetInvoiceHistoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetInvoiceHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetInvoiceHistoryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInvoiceHistoryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetInvoiceHistoryRequest.org_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInvoiceHistoryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetInvoiceHistoryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetInvoiceHistoryRequest.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetInvoiceHistoryRequest)
  return target;
}

size_t GetInvoiceHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetInvoiceHistoryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInvoiceHistoryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetInvoiceHistoryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInvoiceHistoryRequest::GetClassData() const { return &_class_data_; }

void GetInvoiceHistoryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetInvoiceHistoryRequest *>(to)->MergeFrom(
      static_cast<const GetInvoiceHistoryRequest &>(from));
}


void GetInvoiceHistoryRequest::MergeFrom(const GetInvoiceHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetInvoiceHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInvoiceHistoryRequest::CopyFrom(const GetInvoiceHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetInvoiceHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvoiceHistoryRequest::IsInitialized() const {
  return true;
}

void GetInvoiceHistoryRequest::InternalSwap(GetInvoiceHistoryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvoiceHistoryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[8]);
}

// ===================================================================

class GetInvoiceHistoryResponse::_Internal {
 public:
};

GetInvoiceHistoryResponse::GetInvoiceHistoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  invoices_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetInvoiceHistoryResponse)
}
GetInvoiceHistoryResponse::GetInvoiceHistoryResponse(const GetInvoiceHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      invoices_(from.invoices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetInvoiceHistoryResponse)
}

inline void GetInvoiceHistoryResponse::SharedCtor() {
}

GetInvoiceHistoryResponse::~GetInvoiceHistoryResponse() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetInvoiceHistoryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetInvoiceHistoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetInvoiceHistoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetInvoiceHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetInvoiceHistoryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invoices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetInvoiceHistoryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.app.v1.InvoiceSummary invoices = 1 [json_name = "invoices"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invoices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetInvoiceHistoryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetInvoiceHistoryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.app.v1.InvoiceSummary invoices = 1 [json_name = "invoices"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_invoices_size()); i < n; i++) {
    const auto& repfield = this->_internal_invoices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetInvoiceHistoryResponse)
  return target;
}

size_t GetInvoiceHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetInvoiceHistoryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.v1.InvoiceSummary invoices = 1 [json_name = "invoices"];
  total_size += 1UL * this->_internal_invoices_size();
  for (const auto& msg : this->invoices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetInvoiceHistoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetInvoiceHistoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetInvoiceHistoryResponse::GetClassData() const { return &_class_data_; }

void GetInvoiceHistoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetInvoiceHistoryResponse *>(to)->MergeFrom(
      static_cast<const GetInvoiceHistoryResponse &>(from));
}


void GetInvoiceHistoryResponse::MergeFrom(const GetInvoiceHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetInvoiceHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  invoices_.MergeFrom(from.invoices_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetInvoiceHistoryResponse::CopyFrom(const GetInvoiceHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetInvoiceHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInvoiceHistoryResponse::IsInitialized() const {
  return true;
}

void GetInvoiceHistoryResponse::InternalSwap(GetInvoiceHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  invoices_.InternalSwap(&other->invoices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInvoiceHistoryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[9]);
}

// ===================================================================

class GetItemizedInvoiceRequest::_Internal {
 public:
};

GetItemizedInvoiceRequest::GetItemizedInvoiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetItemizedInvoiceRequest)
}
GetItemizedInvoiceRequest::GetItemizedInvoiceRequest(const GetItemizedInvoiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetItemizedInvoiceRequest)
}

inline void GetItemizedInvoiceRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetItemizedInvoiceRequest::~GetItemizedInvoiceRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetItemizedInvoiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetItemizedInvoiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void GetItemizedInvoiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetItemizedInvoiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetItemizedInvoiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetItemizedInvoiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetItemizedInvoiceRequest.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetItemizedInvoiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetItemizedInvoiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetItemizedInvoiceRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetItemizedInvoiceRequest)
  return target;
}

size_t GetItemizedInvoiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetItemizedInvoiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetItemizedInvoiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetItemizedInvoiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetItemizedInvoiceRequest::GetClassData() const { return &_class_data_; }

void GetItemizedInvoiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetItemizedInvoiceRequest *>(to)->MergeFrom(
      static_cast<const GetItemizedInvoiceRequest &>(from));
}


void GetItemizedInvoiceRequest::MergeFrom(const GetItemizedInvoiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetItemizedInvoiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetItemizedInvoiceRequest::CopyFrom(const GetItemizedInvoiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetItemizedInvoiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemizedInvoiceRequest::IsInitialized() const {
  return true;
}

void GetItemizedInvoiceRequest::InternalSwap(GetItemizedInvoiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemizedInvoiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[10]);
}

// ===================================================================

class GetItemizedInvoiceResponse::_Internal {
 public:
  static const ::viam::app::v1::Invoice& invoice(const GetItemizedInvoiceResponse* msg);
};

const ::viam::app::v1::Invoice&
GetItemizedInvoiceResponse::_Internal::invoice(const GetItemizedInvoiceResponse* msg) {
  return *msg->invoice_;
}
GetItemizedInvoiceResponse::GetItemizedInvoiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetItemizedInvoiceResponse)
}
GetItemizedInvoiceResponse::GetItemizedInvoiceResponse(const GetItemizedInvoiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_invoice()) {
    invoice_ = new ::viam::app::v1::Invoice(*from.invoice_);
  } else {
    invoice_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetItemizedInvoiceResponse)
}

inline void GetItemizedInvoiceResponse::SharedCtor() {
invoice_ = nullptr;
}

GetItemizedInvoiceResponse::~GetItemizedInvoiceResponse() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetItemizedInvoiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetItemizedInvoiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete invoice_;
}

void GetItemizedInvoiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetItemizedInvoiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetItemizedInvoiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && invoice_ != nullptr) {
    delete invoice_;
  }
  invoice_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetItemizedInvoiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.v1.Invoice invoice = 1 [json_name = "invoice"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetItemizedInvoiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetItemizedInvoiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.v1.Invoice invoice = 1 [json_name = "invoice"];
  if (this->_internal_has_invoice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::invoice(this),
        _Internal::invoice(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetItemizedInvoiceResponse)
  return target;
}

size_t GetItemizedInvoiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetItemizedInvoiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.app.v1.Invoice invoice = 1 [json_name = "invoice"];
  if (this->_internal_has_invoice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *invoice_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetItemizedInvoiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetItemizedInvoiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetItemizedInvoiceResponse::GetClassData() const { return &_class_data_; }

void GetItemizedInvoiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetItemizedInvoiceResponse *>(to)->MergeFrom(
      static_cast<const GetItemizedInvoiceResponse &>(from));
}


void GetItemizedInvoiceResponse::MergeFrom(const GetItemizedInvoiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetItemizedInvoiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_invoice()) {
    _internal_mutable_invoice()->::viam::app::v1::Invoice::MergeFrom(from._internal_invoice());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetItemizedInvoiceResponse::CopyFrom(const GetItemizedInvoiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetItemizedInvoiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemizedInvoiceResponse::IsInitialized() const {
  return true;
}

void GetItemizedInvoiceResponse::InternalSwap(GetItemizedInvoiceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(invoice_, other->invoice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetItemizedInvoiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[11]);
}

// ===================================================================

class GetBillingSummaryRequest::_Internal {
 public:
};

GetBillingSummaryRequest::GetBillingSummaryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetBillingSummaryRequest)
}
GetBillingSummaryRequest::GetBillingSummaryRequest(const GetBillingSummaryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetBillingSummaryRequest)
}

inline void GetBillingSummaryRequest::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetBillingSummaryRequest::~GetBillingSummaryRequest() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetBillingSummaryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBillingSummaryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  org_id_.Destroy();
}

void GetBillingSummaryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBillingSummaryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetBillingSummaryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBillingSummaryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetBillingSummaryRequest.org_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBillingSummaryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetBillingSummaryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetBillingSummaryRequest.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetBillingSummaryRequest)
  return target;
}

size_t GetBillingSummaryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetBillingSummaryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBillingSummaryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBillingSummaryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBillingSummaryRequest::GetClassData() const { return &_class_data_; }

void GetBillingSummaryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBillingSummaryRequest *>(to)->MergeFrom(
      static_cast<const GetBillingSummaryRequest &>(from));
}


void GetBillingSummaryRequest::MergeFrom(const GetBillingSummaryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetBillingSummaryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBillingSummaryRequest::CopyFrom(const GetBillingSummaryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetBillingSummaryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBillingSummaryRequest::IsInitialized() const {
  return true;
}

void GetBillingSummaryRequest::InternalSwap(GetBillingSummaryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBillingSummaryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[12]);
}

// ===================================================================

class GetBillingSummaryResponse::_Internal {
 public:
  static const ::viam::app::v1::CurrentMonthUsageSummary& usage_summary(const GetBillingSummaryResponse* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& current_month_due_date(const GetBillingSummaryResponse* msg);
};

const ::viam::app::v1::CurrentMonthUsageSummary&
GetBillingSummaryResponse::_Internal::usage_summary(const GetBillingSummaryResponse* msg) {
  return *msg->usage_summary_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
GetBillingSummaryResponse::_Internal::current_month_due_date(const GetBillingSummaryResponse* msg) {
  return *msg->current_month_due_date_;
}
void GetBillingSummaryResponse::clear_current_month_due_date() {
  if (GetArenaForAllocation() == nullptr && current_month_due_date_ != nullptr) {
    delete current_month_due_date_;
  }
  current_month_due_date_ = nullptr;
}
GetBillingSummaryResponse::GetBillingSummaryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  invoices_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.v1.GetBillingSummaryResponse)
}
GetBillingSummaryResponse::GetBillingSummaryResponse(const GetBillingSummaryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      invoices_(from.invoices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invoice_email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    invoice_email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_invoice_email().empty()) {
    invoice_email_.Set(from._internal_invoice_email(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_usage_summary()) {
    usage_summary_ = new ::viam::app::v1::CurrentMonthUsageSummary(*from.usage_summary_);
  } else {
    usage_summary_ = nullptr;
  }
  if (from._internal_has_current_month_due_date()) {
    current_month_due_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.current_month_due_date_);
  } else {
    current_month_due_date_ = nullptr;
  }
  ::memcpy(&statement_balance_, &from.statement_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_month_balance_) -
    reinterpret_cast<char*>(&statement_balance_)) + sizeof(current_month_balance_));
  // @@protoc_insertion_point(copy_constructor:viam.app.v1.GetBillingSummaryResponse)
}

inline void GetBillingSummaryResponse::SharedCtor() {
invoice_email_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  invoice_email_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&usage_summary_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&current_month_balance_) -
    reinterpret_cast<char*>(&usage_summary_)) + sizeof(current_month_balance_));
}

GetBillingSummaryResponse::~GetBillingSummaryResponse() {
  // @@protoc_insertion_point(destructor:viam.app.v1.GetBillingSummaryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBillingSummaryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  invoice_email_.Destroy();
  if (this != internal_default_instance()) delete usage_summary_;
  if (this != internal_default_instance()) delete current_month_due_date_;
}

void GetBillingSummaryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetBillingSummaryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.v1.GetBillingSummaryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invoices_.Clear();
  invoice_email_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && usage_summary_ != nullptr) {
    delete usage_summary_;
  }
  usage_summary_ = nullptr;
  if (GetArenaForAllocation() == nullptr && current_month_due_date_ != nullptr) {
    delete current_month_due_date_;
  }
  current_month_due_date_ = nullptr;
  ::memset(&statement_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_month_balance_) -
      reinterpret_cast<char*>(&statement_balance_)) + sizeof(current_month_balance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBillingSummaryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.v1.CurrentMonthUsageSummary usage_summary = 1 [json_name = "usageSummary"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_usage_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.v1.InvoiceSummary invoices = 2 [json_name = "invoices"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invoices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double statement_balance = 3 [json_name = "statementBalance"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          statement_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double current_balance = 4 [json_name = "currentBalance"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          current_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double current_month_balance = 5 [json_name = "currentMonthBalance"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          current_month_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp current_month_due_date = 7 [json_name = "currentMonthDueDate"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_month_due_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string invoice_email = 8 [json_name = "invoiceEmail"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_invoice_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.v1.GetBillingSummaryResponse.invoice_email"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBillingSummaryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.v1.GetBillingSummaryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.v1.CurrentMonthUsageSummary usage_summary = 1 [json_name = "usageSummary"];
  if (this->_internal_has_usage_summary()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::usage_summary(this),
        _Internal::usage_summary(this).GetCachedSize(), target, stream);
  }

  // repeated .viam.app.v1.InvoiceSummary invoices = 2 [json_name = "invoices"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_invoices_size()); i < n; i++) {
    const auto& repfield = this->_internal_invoices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double statement_balance = 3 [json_name = "statementBalance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_statement_balance = this->_internal_statement_balance();
  uint64_t raw_statement_balance;
  memcpy(&raw_statement_balance, &tmp_statement_balance, sizeof(tmp_statement_balance));
  if (raw_statement_balance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_statement_balance(), target);
  }

  // double current_balance = 4 [json_name = "currentBalance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_balance = this->_internal_current_balance();
  uint64_t raw_current_balance;
  memcpy(&raw_current_balance, &tmp_current_balance, sizeof(tmp_current_balance));
  if (raw_current_balance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_current_balance(), target);
  }

  // double current_month_balance = 5 [json_name = "currentMonthBalance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_month_balance = this->_internal_current_month_balance();
  uint64_t raw_current_month_balance;
  memcpy(&raw_current_month_balance, &tmp_current_month_balance, sizeof(tmp_current_month_balance));
  if (raw_current_month_balance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_current_month_balance(), target);
  }

  // .google.protobuf.Timestamp current_month_due_date = 7 [json_name = "currentMonthDueDate"];
  if (this->_internal_has_current_month_due_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::current_month_due_date(this),
        _Internal::current_month_due_date(this).GetCachedSize(), target, stream);
  }

  // string invoice_email = 8 [json_name = "invoiceEmail"];
  if (!this->_internal_invoice_email().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_invoice_email().data(), static_cast<int>(this->_internal_invoice_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.v1.GetBillingSummaryResponse.invoice_email");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_invoice_email(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.v1.GetBillingSummaryResponse)
  return target;
}

size_t GetBillingSummaryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.v1.GetBillingSummaryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.v1.InvoiceSummary invoices = 2 [json_name = "invoices"];
  total_size += 1UL * this->_internal_invoices_size();
  for (const auto& msg : this->invoices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string invoice_email = 8 [json_name = "invoiceEmail"];
  if (!this->_internal_invoice_email().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invoice_email());
  }

  // .viam.app.v1.CurrentMonthUsageSummary usage_summary = 1 [json_name = "usageSummary"];
  if (this->_internal_has_usage_summary()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *usage_summary_);
  }

  // .google.protobuf.Timestamp current_month_due_date = 7 [json_name = "currentMonthDueDate"];
  if (this->_internal_has_current_month_due_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_month_due_date_);
  }

  // double statement_balance = 3 [json_name = "statementBalance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_statement_balance = this->_internal_statement_balance();
  uint64_t raw_statement_balance;
  memcpy(&raw_statement_balance, &tmp_statement_balance, sizeof(tmp_statement_balance));
  if (raw_statement_balance != 0) {
    total_size += 1 + 8;
  }

  // double current_balance = 4 [json_name = "currentBalance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_balance = this->_internal_current_balance();
  uint64_t raw_current_balance;
  memcpy(&raw_current_balance, &tmp_current_balance, sizeof(tmp_current_balance));
  if (raw_current_balance != 0) {
    total_size += 1 + 8;
  }

  // double current_month_balance = 5 [json_name = "currentMonthBalance"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_month_balance = this->_internal_current_month_balance();
  uint64_t raw_current_month_balance;
  memcpy(&raw_current_month_balance, &tmp_current_month_balance, sizeof(tmp_current_month_balance));
  if (raw_current_month_balance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBillingSummaryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetBillingSummaryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBillingSummaryResponse::GetClassData() const { return &_class_data_; }

void GetBillingSummaryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetBillingSummaryResponse *>(to)->MergeFrom(
      static_cast<const GetBillingSummaryResponse &>(from));
}


void GetBillingSummaryResponse::MergeFrom(const GetBillingSummaryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.v1.GetBillingSummaryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  invoices_.MergeFrom(from.invoices_);
  if (!from._internal_invoice_email().empty()) {
    _internal_set_invoice_email(from._internal_invoice_email());
  }
  if (from._internal_has_usage_summary()) {
    _internal_mutable_usage_summary()->::viam::app::v1::CurrentMonthUsageSummary::MergeFrom(from._internal_usage_summary());
  }
  if (from._internal_has_current_month_due_date()) {
    _internal_mutable_current_month_due_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_current_month_due_date());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_statement_balance = from._internal_statement_balance();
  uint64_t raw_statement_balance;
  memcpy(&raw_statement_balance, &tmp_statement_balance, sizeof(tmp_statement_balance));
  if (raw_statement_balance != 0) {
    _internal_set_statement_balance(from._internal_statement_balance());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_balance = from._internal_current_balance();
  uint64_t raw_current_balance;
  memcpy(&raw_current_balance, &tmp_current_balance, sizeof(tmp_current_balance));
  if (raw_current_balance != 0) {
    _internal_set_current_balance(from._internal_current_balance());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_month_balance = from._internal_current_month_balance();
  uint64_t raw_current_month_balance;
  memcpy(&raw_current_month_balance, &tmp_current_month_balance, sizeof(tmp_current_month_balance));
  if (raw_current_month_balance != 0) {
    _internal_set_current_month_balance(from._internal_current_month_balance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBillingSummaryResponse::CopyFrom(const GetBillingSummaryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.v1.GetBillingSummaryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBillingSummaryResponse::IsInitialized() const {
  return true;
}

void GetBillingSummaryResponse::InternalSwap(GetBillingSummaryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  invoices_.InternalSwap(&other->invoices_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &invoice_email_, lhs_arena,
      &other->invoice_email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBillingSummaryResponse, current_month_balance_)
      + sizeof(GetBillingSummaryResponse::current_month_balance_)
      - PROTOBUF_FIELD_OFFSET(GetBillingSummaryResponse, usage_summary_)>(
          reinterpret_cast<char*>(&usage_summary_),
          reinterpret_cast<char*>(&other->usage_summary_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBillingSummaryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fv1_2fbilling_2eproto_getter, &descriptor_table_app_2fv1_2fbilling_2eproto_once,
      file_level_metadata_app_2fv1_2fbilling_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::app::v1::CurrentMonthUsageSummary*
Arena::CreateMaybeMessage< ::viam::app::v1::CurrentMonthUsageSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::CurrentMonthUsageSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::InvoiceSummary*
Arena::CreateMaybeMessage< ::viam::app::v1::InvoiceSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::InvoiceSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::BillableResourceEvent*
Arena::CreateMaybeMessage< ::viam::app::v1::BillableResourceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::BillableResourceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::Invoice*
Arena::CreateMaybeMessage< ::viam::app::v1::Invoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::Invoice >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetCurrentMonthUsageSummaryRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::GetCurrentMonthUsageSummaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetCurrentMonthUsageSummaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetCurrentMonthUsageSummaryResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::GetCurrentMonthUsageSummaryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetCurrentMonthUsageSummaryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetUnpaidBalanceRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::GetUnpaidBalanceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetUnpaidBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetUnpaidBalanceResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::GetUnpaidBalanceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetUnpaidBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetInvoiceHistoryRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::GetInvoiceHistoryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetInvoiceHistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetInvoiceHistoryResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::GetInvoiceHistoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetInvoiceHistoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetItemizedInvoiceRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::GetItemizedInvoiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetItemizedInvoiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetItemizedInvoiceResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::GetItemizedInvoiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetItemizedInvoiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetBillingSummaryRequest*
Arena::CreateMaybeMessage< ::viam::app::v1::GetBillingSummaryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetBillingSummaryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::v1::GetBillingSummaryResponse*
Arena::CreateMaybeMessage< ::viam::app::v1::GetBillingSummaryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::v1::GetBillingSummaryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
