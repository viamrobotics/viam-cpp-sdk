// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: app/model/v1/model.proto
#ifndef GRPC_app_2fmodel_2fv1_2fmodel_2eproto__INCLUDED
#define GRPC_app_2fmodel_2fv1_2fmodel_2eproto__INCLUDED

#include "app/model/v1/model.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace viam {
namespace app {
namespace model {
namespace v1 {

class ModelService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.app.model.v1.ModelService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::viam::app::model::v1::UploadRequest>> Upload(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::viam::app::model::v1::UploadRequest>>(UploadRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::viam::app::model::v1::UploadRequest>> AsyncUpload(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::viam::app::model::v1::UploadRequest>>(AsyncUploadRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::viam::app::model::v1::UploadRequest>> PrepareAsyncUpload(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::viam::app::model::v1::UploadRequest>>(PrepareAsyncUploadRaw(context, response, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest& request, ::viam::app::model::v1::DeleteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::DeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::DeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::DeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::DeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status Deploy(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest& request, ::viam::app::model::v1::DeployResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::DeployResponse>> AsyncDeploy(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::DeployResponse>>(AsyncDeployRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::DeployResponse>> PrepareAsyncDeploy(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::DeployResponse>>(PrepareAsyncDeployRaw(context, request, cq));
    }
    virtual ::grpc::Status Info(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest& request, ::viam::app::model::v1::InfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::InfoResponse>> AsyncInfo(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::InfoResponse>>(AsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::InfoResponse>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::InfoResponse>>(PrepareAsyncInfoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Upload(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response, ::grpc::ClientWriteReactor< ::viam::app::model::v1::UploadRequest>* reactor) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest* request, ::viam::app::model::v1::DeleteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Delete(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest* request, ::viam::app::model::v1::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Deploy(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest* request, ::viam::app::model::v1::DeployResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Deploy(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest* request, ::viam::app::model::v1::DeployResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Info(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest* request, ::viam::app::model::v1::InfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Info(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest* request, ::viam::app::model::v1::InfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::viam::app::model::v1::UploadRequest>* UploadRaw(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::viam::app::model::v1::UploadRequest>* AsyncUploadRaw(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::viam::app::model::v1::UploadRequest>* PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::DeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::DeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::DeployResponse>* AsyncDeployRaw(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::DeployResponse>* PrepareAsyncDeployRaw(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::InfoResponse>* AsyncInfoRaw(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::app::model::v1::InfoResponse>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::viam::app::model::v1::UploadRequest>> Upload(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::viam::app::model::v1::UploadRequest>>(UploadRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::viam::app::model::v1::UploadRequest>> AsyncUpload(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::viam::app::model::v1::UploadRequest>>(AsyncUploadRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::viam::app::model::v1::UploadRequest>> PrepareAsyncUpload(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::viam::app::model::v1::UploadRequest>>(PrepareAsyncUploadRaw(context, response, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest& request, ::viam::app::model::v1::DeleteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::DeleteResponse>> AsyncDelete(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::DeleteResponse>>(AsyncDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::DeleteResponse>> PrepareAsyncDelete(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::DeleteResponse>>(PrepareAsyncDeleteRaw(context, request, cq));
    }
    ::grpc::Status Deploy(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest& request, ::viam::app::model::v1::DeployResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::DeployResponse>> AsyncDeploy(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::DeployResponse>>(AsyncDeployRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::DeployResponse>> PrepareAsyncDeploy(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::DeployResponse>>(PrepareAsyncDeployRaw(context, request, cq));
    }
    ::grpc::Status Info(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest& request, ::viam::app::model::v1::InfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::InfoResponse>> AsyncInfo(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::InfoResponse>>(AsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::InfoResponse>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::InfoResponse>>(PrepareAsyncInfoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Upload(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response, ::grpc::ClientWriteReactor< ::viam::app::model::v1::UploadRequest>* reactor) override;
      void Delete(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest* request, ::viam::app::model::v1::DeleteResponse* response, std::function<void(::grpc::Status)>) override;
      void Delete(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest* request, ::viam::app::model::v1::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Deploy(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest* request, ::viam::app::model::v1::DeployResponse* response, std::function<void(::grpc::Status)>) override;
      void Deploy(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest* request, ::viam::app::model::v1::DeployResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Info(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest* request, ::viam::app::model::v1::InfoResponse* response, std::function<void(::grpc::Status)>) override;
      void Info(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest* request, ::viam::app::model::v1::InfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::viam::app::model::v1::UploadRequest>* UploadRaw(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response) override;
    ::grpc::ClientAsyncWriter< ::viam::app::model::v1::UploadRequest>* AsyncUploadRaw(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::viam::app::model::v1::UploadRequest>* PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::viam::app::model::v1::UploadResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::DeleteResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::DeleteResponse>* PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::viam::app::model::v1::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::DeployResponse>* AsyncDeployRaw(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::DeployResponse>* PrepareAsyncDeployRaw(::grpc::ClientContext* context, const ::viam::app::model::v1::DeployRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::InfoResponse>* AsyncInfoRaw(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::app::model::v1::InfoResponse>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::viam::app::model::v1::InfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Upload_;
    const ::grpc::internal::RpcMethod rpcmethod_Delete_;
    const ::grpc::internal::RpcMethod rpcmethod_Deploy_;
    const ::grpc::internal::RpcMethod rpcmethod_Info_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Upload(::grpc::ServerContext* context, ::grpc::ServerReader< ::viam::app::model::v1::UploadRequest>* reader, ::viam::app::model::v1::UploadResponse* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::viam::app::model::v1::DeleteRequest* request, ::viam::app::model::v1::DeleteResponse* response);
    virtual ::grpc::Status Deploy(::grpc::ServerContext* context, const ::viam::app::model::v1::DeployRequest* request, ::viam::app::model::v1::DeployResponse* response);
    virtual ::grpc::Status Info(::grpc::ServerContext* context, const ::viam::app::model::v1::InfoRequest* request, ::viam::app::model::v1::InfoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Upload() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::viam::app::model::v1::UploadRequest>* /*reader*/, ::viam::app::model::v1::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpload(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::viam::app::model::v1::UploadResponse, ::viam::app::model::v1::UploadRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::DeleteRequest* /*request*/, ::viam::app::model::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::viam::app::model::v1::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::model::v1::DeleteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Deploy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Deploy() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Deploy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deploy(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::DeployRequest* /*request*/, ::viam::app::model::v1::DeployResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeploy(::grpc::ServerContext* context, ::viam::app::model::v1::DeployRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::model::v1::DeployResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Info() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::InfoRequest* /*request*/, ::viam::app::model::v1::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::viam::app::model::v1::InfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::app::model::v1::InfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Upload<WithAsyncMethod_Delete<WithAsyncMethod_Deploy<WithAsyncMethod_Info<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Upload() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::viam::app::model::v1::UploadRequest, ::viam::app::model::v1::UploadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::viam::app::model::v1::UploadResponse* response) { return this->Upload(context, response); }));
    }
    ~WithCallbackMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::viam::app::model::v1::UploadRequest>* /*reader*/, ::viam::app::model::v1::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::viam::app::model::v1::UploadRequest>* Upload(
      ::grpc::CallbackServerContext* /*context*/, ::viam::app::model::v1::UploadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::model::v1::DeleteRequest, ::viam::app::model::v1::DeleteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::model::v1::DeleteRequest* request, ::viam::app::model::v1::DeleteResponse* response) { return this->Delete(context, request, response); }));}
    void SetMessageAllocatorFor_Delete(
        ::grpc::MessageAllocator< ::viam::app::model::v1::DeleteRequest, ::viam::app::model::v1::DeleteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::model::v1::DeleteRequest, ::viam::app::model::v1::DeleteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::DeleteRequest* /*request*/, ::viam::app::model::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::model::v1::DeleteRequest* /*request*/, ::viam::app::model::v1::DeleteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Deploy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Deploy() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::model::v1::DeployRequest, ::viam::app::model::v1::DeployResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::model::v1::DeployRequest* request, ::viam::app::model::v1::DeployResponse* response) { return this->Deploy(context, request, response); }));}
    void SetMessageAllocatorFor_Deploy(
        ::grpc::MessageAllocator< ::viam::app::model::v1::DeployRequest, ::viam::app::model::v1::DeployResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::model::v1::DeployRequest, ::viam::app::model::v1::DeployResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Deploy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deploy(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::DeployRequest* /*request*/, ::viam::app::model::v1::DeployResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Deploy(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::model::v1::DeployRequest* /*request*/, ::viam::app::model::v1::DeployResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Info() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::app::model::v1::InfoRequest, ::viam::app::model::v1::InfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::app::model::v1::InfoRequest* request, ::viam::app::model::v1::InfoResponse* response) { return this->Info(context, request, response); }));}
    void SetMessageAllocatorFor_Info(
        ::grpc::MessageAllocator< ::viam::app::model::v1::InfoRequest, ::viam::app::model::v1::InfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::app::model::v1::InfoRequest, ::viam::app::model::v1::InfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::InfoRequest* /*request*/, ::viam::app::model::v1::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Info(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::app::model::v1::InfoRequest* /*request*/, ::viam::app::model::v1::InfoResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Upload<WithCallbackMethod_Delete<WithCallbackMethod_Deploy<WithCallbackMethod_Info<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Upload() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::viam::app::model::v1::UploadRequest>* /*reader*/, ::viam::app::model::v1::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::DeleteRequest* /*request*/, ::viam::app::model::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Deploy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Deploy() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Deploy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deploy(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::DeployRequest* /*request*/, ::viam::app::model::v1::DeployResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Info() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::InfoRequest* /*request*/, ::viam::app::model::v1::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Upload() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::viam::app::model::v1::UploadRequest>* /*reader*/, ::viam::app::model::v1::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpload(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Delete() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::DeleteRequest* /*request*/, ::viam::app::model::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Deploy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Deploy() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Deploy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deploy(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::DeployRequest* /*request*/, ::viam::app::model::v1::DeployResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeploy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Info() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::InfoRequest* /*request*/, ::viam::app::model::v1::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Upload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Upload() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->Upload(context, response); }));
    }
    ~WithRawCallbackMethod_Upload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Upload(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::viam::app::model::v1::UploadRequest>* /*reader*/, ::viam::app::model::v1::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* Upload(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Delete() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Delete(context, request, response); }));
    }
    ~WithRawCallbackMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::DeleteRequest* /*request*/, ::viam::app::model::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Delete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Deploy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Deploy() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Deploy(context, request, response); }));
    }
    ~WithRawCallbackMethod_Deploy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Deploy(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::DeployRequest* /*request*/, ::viam::app::model::v1::DeployResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Deploy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Info() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Info(context, request, response); }));
    }
    ~WithRawCallbackMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::InfoRequest* /*request*/, ::viam::app::model::v1::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Info(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::model::v1::DeleteRequest, ::viam::app::model::v1::DeleteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::model::v1::DeleteRequest, ::viam::app::model::v1::DeleteResponse>* streamer) {
                       return this->StreamedDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::DeleteRequest* /*request*/, ::viam::app::model::v1::DeleteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::model::v1::DeleteRequest,::viam::app::model::v1::DeleteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Deploy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Deploy() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::model::v1::DeployRequest, ::viam::app::model::v1::DeployResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::model::v1::DeployRequest, ::viam::app::model::v1::DeployResponse>* streamer) {
                       return this->StreamedDeploy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Deploy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Deploy(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::DeployRequest* /*request*/, ::viam::app::model::v1::DeployResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeploy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::model::v1::DeployRequest,::viam::app::model::v1::DeployResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Info() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::app::model::v1::InfoRequest, ::viam::app::model::v1::InfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::app::model::v1::InfoRequest, ::viam::app::model::v1::InfoResponse>* streamer) {
                       return this->StreamedInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::viam::app::model::v1::InfoRequest* /*request*/, ::viam::app::model::v1::InfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::app::model::v1::InfoRequest,::viam::app::model::v1::InfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Deploy<WithStreamedUnaryMethod_Info<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Delete<WithStreamedUnaryMethod_Deploy<WithStreamedUnaryMethod_Info<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace model
}  // namespace app
}  // namespace viam


#endif  // GRPC_app_2fmodel_2fv1_2fmodel_2eproto__INCLUDED
