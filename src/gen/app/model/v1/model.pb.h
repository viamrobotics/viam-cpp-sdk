// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/model/v1/model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_2fmodel_2fv1_2fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_2fmodel_2fv1_2fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "tagger/v1/tagger.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_2fmodel_2fv1_2fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_2fmodel_2fv1_2fmodel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto;
namespace viam {
namespace app {
namespace model {
namespace v1 {
class DeleteRequest;
struct DeleteRequestDefaultTypeInternal;
extern DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
class DeleteResponse;
struct DeleteResponseDefaultTypeInternal;
extern DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
class DeployRequest;
struct DeployRequestDefaultTypeInternal;
extern DeployRequestDefaultTypeInternal _DeployRequest_default_instance_;
class DeployResponse;
struct DeployResponseDefaultTypeInternal;
extern DeployResponseDefaultTypeInternal _DeployResponse_default_instance_;
class File;
struct FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class FileData;
struct FileDataDefaultTypeInternal;
extern FileDataDefaultTypeInternal _FileData_default_instance_;
class InfoRequest;
struct InfoRequestDefaultTypeInternal;
extern InfoRequestDefaultTypeInternal _InfoRequest_default_instance_;
class InfoResponse;
struct InfoResponseDefaultTypeInternal;
extern InfoResponseDefaultTypeInternal _InfoResponse_default_instance_;
class Model;
struct ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class SyncedModel;
struct SyncedModelDefaultTypeInternal;
extern SyncedModelDefaultTypeInternal _SyncedModel_default_instance_;
class UploadMetadata;
struct UploadMetadataDefaultTypeInternal;
extern UploadMetadataDefaultTypeInternal _UploadMetadata_default_instance_;
class UploadRequest;
struct UploadRequestDefaultTypeInternal;
extern UploadRequestDefaultTypeInternal _UploadRequest_default_instance_;
class UploadResponse;
struct UploadResponseDefaultTypeInternal;
extern UploadResponseDefaultTypeInternal _UploadResponse_default_instance_;
}  // namespace v1
}  // namespace model
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::app::model::v1::DeleteRequest* Arena::CreateMaybeMessage<::viam::app::model::v1::DeleteRequest>(Arena*);
template<> ::viam::app::model::v1::DeleteResponse* Arena::CreateMaybeMessage<::viam::app::model::v1::DeleteResponse>(Arena*);
template<> ::viam::app::model::v1::DeployRequest* Arena::CreateMaybeMessage<::viam::app::model::v1::DeployRequest>(Arena*);
template<> ::viam::app::model::v1::DeployResponse* Arena::CreateMaybeMessage<::viam::app::model::v1::DeployResponse>(Arena*);
template<> ::viam::app::model::v1::File* Arena::CreateMaybeMessage<::viam::app::model::v1::File>(Arena*);
template<> ::viam::app::model::v1::FileData* Arena::CreateMaybeMessage<::viam::app::model::v1::FileData>(Arena*);
template<> ::viam::app::model::v1::InfoRequest* Arena::CreateMaybeMessage<::viam::app::model::v1::InfoRequest>(Arena*);
template<> ::viam::app::model::v1::InfoResponse* Arena::CreateMaybeMessage<::viam::app::model::v1::InfoResponse>(Arena*);
template<> ::viam::app::model::v1::Model* Arena::CreateMaybeMessage<::viam::app::model::v1::Model>(Arena*);
template<> ::viam::app::model::v1::SyncedModel* Arena::CreateMaybeMessage<::viam::app::model::v1::SyncedModel>(Arena*);
template<> ::viam::app::model::v1::UploadMetadata* Arena::CreateMaybeMessage<::viam::app::model::v1::UploadMetadata>(Arena*);
template<> ::viam::app::model::v1::UploadRequest* Arena::CreateMaybeMessage<::viam::app::model::v1::UploadRequest>(Arena*);
template<> ::viam::app::model::v1::UploadResponse* Arena::CreateMaybeMessage<::viam::app::model::v1::UploadResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace app {
namespace model {
namespace v1 {

enum Status : int {
  UNSPECIFIED = 0,
  FAIL = 1,
  OK = 2,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = UNSPECIFIED;
constexpr Status Status_MAX = OK;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class FileData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.FileData) */ {
 public:
  inline FileData() : FileData(nullptr) {}
  ~FileData() override;
  explicit PROTOBUF_CONSTEXPR FileData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileData(const FileData& from);
  FileData(FileData&& from) noexcept
    : FileData() {
    *this = ::std::move(from);
  }

  inline FileData& operator=(const FileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileData& operator=(FileData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileData* internal_default_instance() {
    return reinterpret_cast<const FileData*>(
               &_FileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FileData& a, FileData& b) {
    a.Swap(&b);
  }
  inline void Swap(FileData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FileData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FileData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.FileData";
  }
  protected:
  explicit FileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1 [json_name = "data"];
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.FileData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class File final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.File) */ {
 public:
  inline File() : File(nullptr) {}
  ~File() override;
  explicit PROTOBUF_CONSTEXPR File(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File(const File& from);
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  inline File& operator=(File&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File& default_instance() {
    return *internal_default_instance();
  }
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }
  inline void Swap(File* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  File* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<File>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const File& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const File& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.File";
  }
  protected:
  explicit File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSizeBytesFieldNumber = 2,
  };
  // string name = 1 [json_name = "name", (.tagger.v1.tags) = "bson:\"name\" json:\"name\""];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 size_bytes = 2 [json_name = "sizeBytes", (.tagger.v1.tags) = "bson:\"size_bytes\" json:\"size_bytes\""];
  void clear_size_bytes();
  int64_t size_bytes() const;
  void set_size_bytes(int64_t value);
  private:
  int64_t _internal_size_bytes() const;
  void _internal_set_size_bytes(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.File)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int64_t size_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class UploadMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.UploadMetadata) */ {
 public:
  inline UploadMetadata() : UploadMetadata(nullptr) {}
  ~UploadMetadata() override;
  explicit PROTOBUF_CONSTEXPR UploadMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadMetadata(const UploadMetadata& from);
  UploadMetadata(UploadMetadata&& from) noexcept
    : UploadMetadata() {
    *this = ::std::move(from);
  }

  inline UploadMetadata& operator=(const UploadMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadMetadata& operator=(UploadMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadMetadata* internal_default_instance() {
    return reinterpret_cast<const UploadMetadata*>(
               &_UploadMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UploadMetadata& a, UploadMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadMetadata& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.UploadMetadata";
  }
  protected:
  explicit UploadMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 4,
    kOrgIdFieldNumber = 1,
    kModelNameFieldNumber = 2,
    kAssociatedDatasetFieldNumber = 3,
  };
  // repeated .viam.app.model.v1.File files = 4 [json_name = "files"];
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::viam::app::model::v1::File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File >*
      mutable_files();
  private:
  const ::viam::app::model::v1::File& _internal_files(int index) const;
  ::viam::app::model::v1::File* _internal_add_files();
  public:
  const ::viam::app::model::v1::File& files(int index) const;
  ::viam::app::model::v1::File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File >&
      files() const;

  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string model_name = 2 [json_name = "modelName"];
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // string associated_dataset = 3 [json_name = "associatedDataset"];
  void clear_associated_dataset();
  const std::string& associated_dataset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associated_dataset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associated_dataset();
  PROTOBUF_NODISCARD std::string* release_associated_dataset();
  void set_allocated_associated_dataset(std::string* associated_dataset);
  private:
  const std::string& _internal_associated_dataset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_dataset(const std::string& value);
  std::string* _internal_mutable_associated_dataset();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.UploadMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File > files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_dataset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class UploadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.UploadRequest) */ {
 public:
  inline UploadRequest() : UploadRequest(nullptr) {}
  ~UploadRequest() override;
  explicit PROTOBUF_CONSTEXPR UploadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadRequest(const UploadRequest& from);
  UploadRequest(UploadRequest&& from) noexcept
    : UploadRequest() {
    *this = ::std::move(from);
  }

  inline UploadRequest& operator=(const UploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadRequest& operator=(UploadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadRequest& default_instance() {
    return *internal_default_instance();
  }
  enum UploadPacketCase {
    kMetadata = 1,
    kFileContents = 2,
    UPLOAD_PACKET_NOT_SET = 0,
  };

  static inline const UploadRequest* internal_default_instance() {
    return reinterpret_cast<const UploadRequest*>(
               &_UploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UploadRequest& a, UploadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.UploadRequest";
  }
  protected:
  explicit UploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 1,
    kFileContentsFieldNumber = 2,
  };
  // .viam.app.model.v1.UploadMetadata metadata = 1 [json_name = "metadata"];
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::viam::app::model::v1::UploadMetadata& metadata() const;
  PROTOBUF_NODISCARD ::viam::app::model::v1::UploadMetadata* release_metadata();
  ::viam::app::model::v1::UploadMetadata* mutable_metadata();
  void set_allocated_metadata(::viam::app::model::v1::UploadMetadata* metadata);
  private:
  const ::viam::app::model::v1::UploadMetadata& _internal_metadata() const;
  ::viam::app::model::v1::UploadMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::viam::app::model::v1::UploadMetadata* metadata);
  ::viam::app::model::v1::UploadMetadata* unsafe_arena_release_metadata();

  // .viam.app.model.v1.FileData file_contents = 2 [json_name = "fileContents"];
  bool has_file_contents() const;
  private:
  bool _internal_has_file_contents() const;
  public:
  void clear_file_contents();
  const ::viam::app::model::v1::FileData& file_contents() const;
  PROTOBUF_NODISCARD ::viam::app::model::v1::FileData* release_file_contents();
  ::viam::app::model::v1::FileData* mutable_file_contents();
  void set_allocated_file_contents(::viam::app::model::v1::FileData* file_contents);
  private:
  const ::viam::app::model::v1::FileData& _internal_file_contents() const;
  ::viam::app::model::v1::FileData* _internal_mutable_file_contents();
  public:
  void unsafe_arena_set_allocated_file_contents(
      ::viam::app::model::v1::FileData* file_contents);
  ::viam::app::model::v1::FileData* unsafe_arena_release_file_contents();

  void clear_upload_packet();
  UploadPacketCase upload_packet_case() const;
  // @@protoc_insertion_point(class_scope:viam.app.model.v1.UploadRequest)
 private:
  class _Internal;
  void set_has_metadata();
  void set_has_file_contents();

  inline bool has_upload_packet() const;
  inline void clear_has_upload_packet();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union UploadPacketUnion {
    constexpr UploadPacketUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::viam::app::model::v1::UploadMetadata* metadata_;
    ::viam::app::model::v1::FileData* file_contents_;
  } upload_packet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.DeleteRequest) */ {
 public:
  inline DeleteRequest() : DeleteRequest(nullptr) {}
  ~DeleteRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRequest(const DeleteRequest& from);
  DeleteRequest(DeleteRequest&& from) noexcept
    : DeleteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequest& operator=(DeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRequest*>(
               &_DeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteRequest& a, DeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.DeleteRequest";
  }
  protected:
  explicit DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kModelNameFieldNumber = 2,
  };
  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string model_name = 2 [json_name = "modelName"];
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.DeleteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeployRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.DeployRequest) */ {
 public:
  inline DeployRequest() : DeployRequest(nullptr) {}
  ~DeployRequest() override;
  explicit PROTOBUF_CONSTEXPR DeployRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeployRequest(const DeployRequest& from);
  DeployRequest(DeployRequest&& from) noexcept
    : DeployRequest() {
    *this = ::std::move(from);
  }

  inline DeployRequest& operator=(const DeployRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployRequest& operator=(DeployRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployRequest* internal_default_instance() {
    return reinterpret_cast<const DeployRequest*>(
               &_DeployRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeployRequest& a, DeployRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeployRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeployRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.DeployRequest";
  }
  protected:
  explicit DeployRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kModelNameFieldNumber = 2,
  };
  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string model_name = 2 [json_name = "modelName"];
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.DeployRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class Model final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.Model) */ {
 public:
  inline Model() : Model(nullptr) {}
  ~Model() override;
  explicit PROTOBUF_CONSTEXPR Model(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Model(const Model& from);
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  inline Model& operator=(Model&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Model& default_instance() {
    return *internal_default_instance();
  }
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }
  inline void Swap(Model* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Model* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Model* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Model>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Model& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Model& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Model* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.Model";
  }
  protected:
  explicit Model(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 3,
    kNameFieldNumber = 1,
    kTimeCreatedFieldNumber = 4,
    kSizeBytesFieldNumber = 2,
  };
  // repeated .viam.app.model.v1.File files = 3 [json_name = "files"];
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::viam::app::model::v1::File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File >*
      mutable_files();
  private:
  const ::viam::app::model::v1::File& _internal_files(int index) const;
  ::viam::app::model::v1::File* _internal_add_files();
  public:
  const ::viam::app::model::v1::File& files(int index) const;
  ::viam::app::model::v1::File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File >&
      files() const;

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp time_created = 4 [json_name = "timeCreated"];
  bool has_time_created() const;
  private:
  bool _internal_has_time_created() const;
  public:
  void clear_time_created();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_created() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time_created();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_created();
  void set_allocated_time_created(::PROTOBUF_NAMESPACE_ID::Timestamp* time_created);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_created() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_created();
  public:
  void unsafe_arena_set_allocated_time_created(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time_created);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_created();

  // int64 size_bytes = 2 [json_name = "sizeBytes"];
  void clear_size_bytes();
  int64_t size_bytes() const;
  void set_size_bytes(int64_t value);
  private:
  int64_t _internal_size_bytes() const;
  void _internal_set_size_bytes(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.Model)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File > files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* time_created_;
  int64_t size_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class InfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.InfoRequest) */ {
 public:
  inline InfoRequest() : InfoRequest(nullptr) {}
  ~InfoRequest() override;
  explicit PROTOBUF_CONSTEXPR InfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoRequest(const InfoRequest& from);
  InfoRequest(InfoRequest&& from) noexcept
    : InfoRequest() {
    *this = ::std::move(from);
  }

  inline InfoRequest& operator=(const InfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoRequest& operator=(InfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoRequest* internal_default_instance() {
    return reinterpret_cast<const InfoRequest*>(
               &_InfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(InfoRequest& a, InfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InfoRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.InfoRequest";
  }
  protected:
  explicit InfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
  };
  // string org_id = 1 [json_name = "orgId"];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.InfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class InfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.InfoResponse) */ {
 public:
  inline InfoResponse() : InfoResponse(nullptr) {}
  ~InfoResponse() override;
  explicit PROTOBUF_CONSTEXPR InfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoResponse(const InfoResponse& from);
  InfoResponse(InfoResponse&& from) noexcept
    : InfoResponse() {
    *this = ::std::move(from);
  }

  inline InfoResponse& operator=(const InfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoResponse& operator=(InfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoResponse* internal_default_instance() {
    return reinterpret_cast<const InfoResponse*>(
               &_InfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InfoResponse& a, InfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.InfoResponse";
  }
  protected:
  explicit InfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 1,
  };
  // repeated .viam.app.model.v1.Model model = 1 [json_name = "model"];
  int model_size() const;
  private:
  int _internal_model_size() const;
  public:
  void clear_model();
  ::viam::app::model::v1::Model* mutable_model(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::Model >*
      mutable_model();
  private:
  const ::viam::app::model::v1::Model& _internal_model(int index) const;
  ::viam::app::model::v1::Model* _internal_add_model();
  public:
  const ::viam::app::model::v1::Model& model(int index) const;
  ::viam::app::model::v1::Model* add_model();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::Model >&
      model() const;

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.InfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::Model > model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class UploadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.UploadResponse) */ {
 public:
  inline UploadResponse() : UploadResponse(nullptr) {}
  ~UploadResponse() override;
  explicit PROTOBUF_CONSTEXPR UploadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadResponse(const UploadResponse& from);
  UploadResponse(UploadResponse&& from) noexcept
    : UploadResponse() {
    *this = ::std::move(from);
  }

  inline UploadResponse& operator=(const UploadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadResponse& operator=(UploadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadResponse* internal_default_instance() {
    return reinterpret_cast<const UploadResponse*>(
               &_UploadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UploadResponse& a, UploadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.UploadResponse";
  }
  protected:
  explicit UploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string message = 1 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .viam.app.model.v1.Status status = 2 [json_name = "status"];
  void clear_status();
  ::viam::app::model::v1::Status status() const;
  void set_status(::viam::app::model::v1::Status value);
  private:
  ::viam::app::model::v1::Status _internal_status() const;
  void _internal_set_status(::viam::app::model::v1::Status value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.UploadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.DeleteResponse) */ {
 public:
  inline DeleteResponse() : DeleteResponse(nullptr) {}
  ~DeleteResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteResponse(const DeleteResponse& from);
  DeleteResponse(DeleteResponse&& from) noexcept
    : DeleteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResponse& operator=(DeleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteResponse*>(
               &_DeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteResponse& a, DeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.DeleteResponse";
  }
  protected:
  explicit DeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string message = 1 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .viam.app.model.v1.Status status = 2 [json_name = "status"];
  void clear_status();
  ::viam::app::model::v1::Status status() const;
  void set_status(::viam::app::model::v1::Status value);
  private:
  ::viam::app::model::v1::Status _internal_status() const;
  void _internal_set_status(::viam::app::model::v1::Status value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.DeleteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeployResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.DeployResponse) */ {
 public:
  inline DeployResponse() : DeployResponse(nullptr) {}
  ~DeployResponse() override;
  explicit PROTOBUF_CONSTEXPR DeployResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeployResponse(const DeployResponse& from);
  DeployResponse(DeployResponse&& from) noexcept
    : DeployResponse() {
    *this = ::std::move(from);
  }

  inline DeployResponse& operator=(const DeployResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeployResponse& operator=(DeployResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeployResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeployResponse* internal_default_instance() {
    return reinterpret_cast<const DeployResponse*>(
               &_DeployResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeployResponse& a, DeployResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeployResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeployResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeployResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeployResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeployResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeployResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeployResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.DeployResponse";
  }
  protected:
  explicit DeployResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string message = 1 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .viam.app.model.v1.Status status = 2 [json_name = "status"];
  void clear_status();
  ::viam::app::model::v1::Status status() const;
  void set_status(::viam::app::model::v1::Status value);
  private:
  ::viam::app::model::v1::Status _internal_status() const;
  void _internal_set_status(::viam::app::model::v1::Status value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.DeployResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class SyncedModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.app.model.v1.SyncedModel) */ {
 public:
  inline SyncedModel() : SyncedModel(nullptr) {}
  ~SyncedModel() override;
  explicit PROTOBUF_CONSTEXPR SyncedModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncedModel(const SyncedModel& from);
  SyncedModel(SyncedModel&& from) noexcept
    : SyncedModel() {
    *this = ::std::move(from);
  }

  inline SyncedModel& operator=(const SyncedModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncedModel& operator=(SyncedModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncedModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncedModel* internal_default_instance() {
    return reinterpret_cast<const SyncedModel*>(
               &_SyncedModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SyncedModel& a, SyncedModel& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncedModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncedModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SyncedModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SyncedModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SyncedModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SyncedModel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncedModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.app.model.v1.SyncedModel";
  }
  protected:
  explicit SyncedModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 4,
    kOrgIdFieldNumber = 1,
    kModelNameFieldNumber = 2,
    kAssociatedDatasetFieldNumber = 3,
    kBlobPathFieldNumber = 6,
    kSyncTimeFieldNumber = 7,
    kSizeBytesFieldNumber = 5,
  };
  // repeated .viam.app.model.v1.File files = 4 [json_name = "files", (.tagger.v1.tags) = "bson:\"files\" json:\"files\""];
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::viam::app::model::v1::File* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File >*
      mutable_files();
  private:
  const ::viam::app::model::v1::File& _internal_files(int index) const;
  ::viam::app::model::v1::File* _internal_add_files();
  public:
  const ::viam::app::model::v1::File& files(int index) const;
  ::viam::app::model::v1::File* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File >&
      files() const;

  // string org_id = 1 [json_name = "orgId", (.tagger.v1.tags) = "bson:\"org_id\" json:\"org_id\""];
  void clear_org_id();
  const std::string& org_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_org_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_org_id();
  PROTOBUF_NODISCARD std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string model_name = 2 [json_name = "modelName", (.tagger.v1.tags) = "bson:\"model_name\" json:\"model_name\""];
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // string associated_dataset = 3 [json_name = "associatedDataset", (.tagger.v1.tags) = "bson:\"associated_dataset\" json:\"associated_dataset\""];
  void clear_associated_dataset();
  const std::string& associated_dataset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_associated_dataset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_associated_dataset();
  PROTOBUF_NODISCARD std::string* release_associated_dataset();
  void set_allocated_associated_dataset(std::string* associated_dataset);
  private:
  const std::string& _internal_associated_dataset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_associated_dataset(const std::string& value);
  std::string* _internal_mutable_associated_dataset();
  public:

  // string blob_path = 6 [json_name = "blobPath", (.tagger.v1.tags) = "bson:\"blob_path\" json:\"blob_path\""];
  void clear_blob_path();
  const std::string& blob_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_blob_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_blob_path();
  PROTOBUF_NODISCARD std::string* release_blob_path();
  void set_allocated_blob_path(std::string* blob_path);
  private:
  const std::string& _internal_blob_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_blob_path(const std::string& value);
  std::string* _internal_mutable_blob_path();
  public:

  // .google.protobuf.Timestamp sync_time = 7 [json_name = "syncTime", (.tagger.v1.tags) = "bson:\"sync_time\" json:\"sync_time\""];
  bool has_sync_time() const;
  private:
  bool _internal_has_sync_time() const;
  public:
  void clear_sync_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& sync_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_sync_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_sync_time();
  void set_allocated_sync_time(::PROTOBUF_NAMESPACE_ID::Timestamp* sync_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_sync_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_sync_time();
  public:
  void unsafe_arena_set_allocated_sync_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* sync_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_sync_time();

  // int64 size_bytes = 5 [json_name = "sizeBytes", (.tagger.v1.tags) = "bson:\"size_bytes\" json:\"size_bytes\""];
  void clear_size_bytes();
  int64_t size_bytes() const;
  void set_size_bytes(int64_t value);
  private:
  int64_t _internal_size_bytes() const;
  void _internal_set_size_bytes(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.app.model.v1.SyncedModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File > files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr associated_dataset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_path_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* sync_time_;
  int64_t size_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_2fmodel_2fv1_2fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileData

// bytes data = 1 [json_name = "data"];
inline void FileData::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& FileData::data() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.FileData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileData::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.FileData.data)
}
inline std::string* FileData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.FileData.data)
  return _s;
}
inline const std::string& FileData::_internal_data() const {
  return data_.Get();
}
inline void FileData::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* FileData::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* FileData::release_data() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.FileData.data)
  return data_.Release();
}
inline void FileData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.FileData.data)
}

// -------------------------------------------------------------------

// File

// string name = 1 [json_name = "name", (.tagger.v1.tags) = "bson:\"name\" json:\"name\""];
inline void File::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& File::name() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.File.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void File::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.File.name)
}
inline std::string* File::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.File.name)
  return _s;
}
inline const std::string& File::_internal_name() const {
  return name_.Get();
}
inline void File::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* File::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.File.name)
  return name_.Release();
}
inline void File::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.File.name)
}

// int64 size_bytes = 2 [json_name = "sizeBytes", (.tagger.v1.tags) = "bson:\"size_bytes\" json:\"size_bytes\""];
inline void File::clear_size_bytes() {
  size_bytes_ = int64_t{0};
}
inline int64_t File::_internal_size_bytes() const {
  return size_bytes_;
}
inline int64_t File::size_bytes() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.File.size_bytes)
  return _internal_size_bytes();
}
inline void File::_internal_set_size_bytes(int64_t value) {
  
  size_bytes_ = value;
}
inline void File::set_size_bytes(int64_t value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:viam.app.model.v1.File.size_bytes)
}

// -------------------------------------------------------------------

// UploadMetadata

// string org_id = 1 [json_name = "orgId"];
inline void UploadMetadata::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& UploadMetadata::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadMetadata.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadMetadata::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.UploadMetadata.org_id)
}
inline std::string* UploadMetadata::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadMetadata.org_id)
  return _s;
}
inline const std::string& UploadMetadata::_internal_org_id() const {
  return org_id_.Get();
}
inline void UploadMetadata::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadMetadata::_internal_mutable_org_id() {
  
  return org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadMetadata::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.UploadMetadata.org_id)
  return org_id_.Release();
}
inline void UploadMetadata::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (org_id_.IsDefault()) {
    org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.UploadMetadata.org_id)
}

// string model_name = 2 [json_name = "modelName"];
inline void UploadMetadata::clear_model_name() {
  model_name_.ClearToEmpty();
}
inline const std::string& UploadMetadata::model_name() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadMetadata.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadMetadata::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.UploadMetadata.model_name)
}
inline std::string* UploadMetadata::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadMetadata.model_name)
  return _s;
}
inline const std::string& UploadMetadata::_internal_model_name() const {
  return model_name_.Get();
}
inline void UploadMetadata::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadMetadata::_internal_mutable_model_name() {
  
  return model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadMetadata::release_model_name() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.UploadMetadata.model_name)
  return model_name_.Release();
}
inline void UploadMetadata::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_name_.IsDefault()) {
    model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.UploadMetadata.model_name)
}

// string associated_dataset = 3 [json_name = "associatedDataset"];
inline void UploadMetadata::clear_associated_dataset() {
  associated_dataset_.ClearToEmpty();
}
inline const std::string& UploadMetadata::associated_dataset() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadMetadata.associated_dataset)
  return _internal_associated_dataset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadMetadata::set_associated_dataset(ArgT0&& arg0, ArgT... args) {
 
 associated_dataset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.UploadMetadata.associated_dataset)
}
inline std::string* UploadMetadata::mutable_associated_dataset() {
  std::string* _s = _internal_mutable_associated_dataset();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadMetadata.associated_dataset)
  return _s;
}
inline const std::string& UploadMetadata::_internal_associated_dataset() const {
  return associated_dataset_.Get();
}
inline void UploadMetadata::_internal_set_associated_dataset(const std::string& value) {
  
  associated_dataset_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadMetadata::_internal_mutable_associated_dataset() {
  
  return associated_dataset_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadMetadata::release_associated_dataset() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.UploadMetadata.associated_dataset)
  return associated_dataset_.Release();
}
inline void UploadMetadata::set_allocated_associated_dataset(std::string* associated_dataset) {
  if (associated_dataset != nullptr) {
    
  } else {
    
  }
  associated_dataset_.SetAllocated(associated_dataset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (associated_dataset_.IsDefault()) {
    associated_dataset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.UploadMetadata.associated_dataset)
}

// repeated .viam.app.model.v1.File files = 4 [json_name = "files"];
inline int UploadMetadata::_internal_files_size() const {
  return files_.size();
}
inline int UploadMetadata::files_size() const {
  return _internal_files_size();
}
inline void UploadMetadata::clear_files() {
  files_.Clear();
}
inline ::viam::app::model::v1::File* UploadMetadata::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadMetadata.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File >*
UploadMetadata::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.model.v1.UploadMetadata.files)
  return &files_;
}
inline const ::viam::app::model::v1::File& UploadMetadata::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::viam::app::model::v1::File& UploadMetadata::files(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadMetadata.files)
  return _internal_files(index);
}
inline ::viam::app::model::v1::File* UploadMetadata::_internal_add_files() {
  return files_.Add();
}
inline ::viam::app::model::v1::File* UploadMetadata::add_files() {
  ::viam::app::model::v1::File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:viam.app.model.v1.UploadMetadata.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File >&
UploadMetadata::files() const {
  // @@protoc_insertion_point(field_list:viam.app.model.v1.UploadMetadata.files)
  return files_;
}

// -------------------------------------------------------------------

// UploadRequest

// .viam.app.model.v1.UploadMetadata metadata = 1 [json_name = "metadata"];
inline bool UploadRequest::_internal_has_metadata() const {
  return upload_packet_case() == kMetadata;
}
inline bool UploadRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline void UploadRequest::set_has_metadata() {
  _oneof_case_[0] = kMetadata;
}
inline void UploadRequest::clear_metadata() {
  if (_internal_has_metadata()) {
    if (GetArenaForAllocation() == nullptr) {
      delete upload_packet_.metadata_;
    }
    clear_has_upload_packet();
  }
}
inline ::viam::app::model::v1::UploadMetadata* UploadRequest::release_metadata() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.UploadRequest.metadata)
  if (_internal_has_metadata()) {
    clear_has_upload_packet();
    ::viam::app::model::v1::UploadMetadata* temp = upload_packet_.metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    upload_packet_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::app::model::v1::UploadMetadata& UploadRequest::_internal_metadata() const {
  return _internal_has_metadata()
      ? *upload_packet_.metadata_
      : reinterpret_cast< ::viam::app::model::v1::UploadMetadata&>(::viam::app::model::v1::_UploadMetadata_default_instance_);
}
inline const ::viam::app::model::v1::UploadMetadata& UploadRequest::metadata() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadRequest.metadata)
  return _internal_metadata();
}
inline ::viam::app::model::v1::UploadMetadata* UploadRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.app.model.v1.UploadRequest.metadata)
  if (_internal_has_metadata()) {
    clear_has_upload_packet();
    ::viam::app::model::v1::UploadMetadata* temp = upload_packet_.metadata_;
    upload_packet_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UploadRequest::unsafe_arena_set_allocated_metadata(::viam::app::model::v1::UploadMetadata* metadata) {
  clear_upload_packet();
  if (metadata) {
    set_has_metadata();
    upload_packet_.metadata_ = metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.model.v1.UploadRequest.metadata)
}
inline ::viam::app::model::v1::UploadMetadata* UploadRequest::_internal_mutable_metadata() {
  if (!_internal_has_metadata()) {
    clear_upload_packet();
    set_has_metadata();
    upload_packet_.metadata_ = CreateMaybeMessage< ::viam::app::model::v1::UploadMetadata >(GetArenaForAllocation());
  }
  return upload_packet_.metadata_;
}
inline ::viam::app::model::v1::UploadMetadata* UploadRequest::mutable_metadata() {
  ::viam::app::model::v1::UploadMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadRequest.metadata)
  return _msg;
}

// .viam.app.model.v1.FileData file_contents = 2 [json_name = "fileContents"];
inline bool UploadRequest::_internal_has_file_contents() const {
  return upload_packet_case() == kFileContents;
}
inline bool UploadRequest::has_file_contents() const {
  return _internal_has_file_contents();
}
inline void UploadRequest::set_has_file_contents() {
  _oneof_case_[0] = kFileContents;
}
inline void UploadRequest::clear_file_contents() {
  if (_internal_has_file_contents()) {
    if (GetArenaForAllocation() == nullptr) {
      delete upload_packet_.file_contents_;
    }
    clear_has_upload_packet();
  }
}
inline ::viam::app::model::v1::FileData* UploadRequest::release_file_contents() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.UploadRequest.file_contents)
  if (_internal_has_file_contents()) {
    clear_has_upload_packet();
    ::viam::app::model::v1::FileData* temp = upload_packet_.file_contents_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    upload_packet_.file_contents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::app::model::v1::FileData& UploadRequest::_internal_file_contents() const {
  return _internal_has_file_contents()
      ? *upload_packet_.file_contents_
      : reinterpret_cast< ::viam::app::model::v1::FileData&>(::viam::app::model::v1::_FileData_default_instance_);
}
inline const ::viam::app::model::v1::FileData& UploadRequest::file_contents() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadRequest.file_contents)
  return _internal_file_contents();
}
inline ::viam::app::model::v1::FileData* UploadRequest::unsafe_arena_release_file_contents() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.app.model.v1.UploadRequest.file_contents)
  if (_internal_has_file_contents()) {
    clear_has_upload_packet();
    ::viam::app::model::v1::FileData* temp = upload_packet_.file_contents_;
    upload_packet_.file_contents_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UploadRequest::unsafe_arena_set_allocated_file_contents(::viam::app::model::v1::FileData* file_contents) {
  clear_upload_packet();
  if (file_contents) {
    set_has_file_contents();
    upload_packet_.file_contents_ = file_contents;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.model.v1.UploadRequest.file_contents)
}
inline ::viam::app::model::v1::FileData* UploadRequest::_internal_mutable_file_contents() {
  if (!_internal_has_file_contents()) {
    clear_upload_packet();
    set_has_file_contents();
    upload_packet_.file_contents_ = CreateMaybeMessage< ::viam::app::model::v1::FileData >(GetArenaForAllocation());
  }
  return upload_packet_.file_contents_;
}
inline ::viam::app::model::v1::FileData* UploadRequest::mutable_file_contents() {
  ::viam::app::model::v1::FileData* _msg = _internal_mutable_file_contents();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadRequest.file_contents)
  return _msg;
}

inline bool UploadRequest::has_upload_packet() const {
  return upload_packet_case() != UPLOAD_PACKET_NOT_SET;
}
inline void UploadRequest::clear_has_upload_packet() {
  _oneof_case_[0] = UPLOAD_PACKET_NOT_SET;
}
inline UploadRequest::UploadPacketCase UploadRequest::upload_packet_case() const {
  return UploadRequest::UploadPacketCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeleteRequest

// string org_id = 1 [json_name = "orgId"];
inline void DeleteRequest::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& DeleteRequest::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeleteRequest.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRequest::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeleteRequest.org_id)
}
inline std::string* DeleteRequest::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeleteRequest.org_id)
  return _s;
}
inline const std::string& DeleteRequest::_internal_org_id() const {
  return org_id_.Get();
}
inline void DeleteRequest::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRequest::_internal_mutable_org_id() {
  
  return org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRequest::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeleteRequest.org_id)
  return org_id_.Release();
}
inline void DeleteRequest::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (org_id_.IsDefault()) {
    org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeleteRequest.org_id)
}

// string model_name = 2 [json_name = "modelName"];
inline void DeleteRequest::clear_model_name() {
  model_name_.ClearToEmpty();
}
inline const std::string& DeleteRequest::model_name() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeleteRequest.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRequest::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeleteRequest.model_name)
}
inline std::string* DeleteRequest::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeleteRequest.model_name)
  return _s;
}
inline const std::string& DeleteRequest::_internal_model_name() const {
  return model_name_.Get();
}
inline void DeleteRequest::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteRequest::_internal_mutable_model_name() {
  
  return model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteRequest::release_model_name() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeleteRequest.model_name)
  return model_name_.Release();
}
inline void DeleteRequest::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_name_.IsDefault()) {
    model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeleteRequest.model_name)
}

// -------------------------------------------------------------------

// DeployRequest

// string org_id = 1 [json_name = "orgId"];
inline void DeployRequest::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& DeployRequest::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeployRequest.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeployRequest::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeployRequest.org_id)
}
inline std::string* DeployRequest::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeployRequest.org_id)
  return _s;
}
inline const std::string& DeployRequest::_internal_org_id() const {
  return org_id_.Get();
}
inline void DeployRequest::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DeployRequest::_internal_mutable_org_id() {
  
  return org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DeployRequest::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeployRequest.org_id)
  return org_id_.Release();
}
inline void DeployRequest::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (org_id_.IsDefault()) {
    org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeployRequest.org_id)
}

// string model_name = 2 [json_name = "modelName"];
inline void DeployRequest::clear_model_name() {
  model_name_.ClearToEmpty();
}
inline const std::string& DeployRequest::model_name() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeployRequest.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeployRequest::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeployRequest.model_name)
}
inline std::string* DeployRequest::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeployRequest.model_name)
  return _s;
}
inline const std::string& DeployRequest::_internal_model_name() const {
  return model_name_.Get();
}
inline void DeployRequest::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeployRequest::_internal_mutable_model_name() {
  
  return model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DeployRequest::release_model_name() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeployRequest.model_name)
  return model_name_.Release();
}
inline void DeployRequest::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_name_.IsDefault()) {
    model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeployRequest.model_name)
}

// -------------------------------------------------------------------

// Model

// string name = 1 [json_name = "name"];
inline void Model::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.Model.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Model::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.Model.name)
}
inline std::string* Model::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.Model.name)
  return _s;
}
inline const std::string& Model::_internal_name() const {
  return name_.Get();
}
inline void Model::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* Model::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.Model.name)
  return name_.Release();
}
inline void Model::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.Model.name)
}

// int64 size_bytes = 2 [json_name = "sizeBytes"];
inline void Model::clear_size_bytes() {
  size_bytes_ = int64_t{0};
}
inline int64_t Model::_internal_size_bytes() const {
  return size_bytes_;
}
inline int64_t Model::size_bytes() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.Model.size_bytes)
  return _internal_size_bytes();
}
inline void Model::_internal_set_size_bytes(int64_t value) {
  
  size_bytes_ = value;
}
inline void Model::set_size_bytes(int64_t value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:viam.app.model.v1.Model.size_bytes)
}

// repeated .viam.app.model.v1.File files = 3 [json_name = "files"];
inline int Model::_internal_files_size() const {
  return files_.size();
}
inline int Model::files_size() const {
  return _internal_files_size();
}
inline void Model::clear_files() {
  files_.Clear();
}
inline ::viam::app::model::v1::File* Model::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.Model.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File >*
Model::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.model.v1.Model.files)
  return &files_;
}
inline const ::viam::app::model::v1::File& Model::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::viam::app::model::v1::File& Model::files(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.Model.files)
  return _internal_files(index);
}
inline ::viam::app::model::v1::File* Model::_internal_add_files() {
  return files_.Add();
}
inline ::viam::app::model::v1::File* Model::add_files() {
  ::viam::app::model::v1::File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:viam.app.model.v1.Model.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File >&
Model::files() const {
  // @@protoc_insertion_point(field_list:viam.app.model.v1.Model.files)
  return files_;
}

// .google.protobuf.Timestamp time_created = 4 [json_name = "timeCreated"];
inline bool Model::_internal_has_time_created() const {
  return this != internal_default_instance() && time_created_ != nullptr;
}
inline bool Model::has_time_created() const {
  return _internal_has_time_created();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Model::_internal_time_created() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = time_created_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Model::time_created() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.Model.time_created)
  return _internal_time_created();
}
inline void Model::unsafe_arena_set_allocated_time_created(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_created) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_created_);
  }
  time_created_ = time_created;
  if (time_created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.model.v1.Model.time_created)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Model::release_time_created() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_created_;
  time_created_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Model::unsafe_arena_release_time_created() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.Model.time_created)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_created_;
  time_created_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Model::_internal_mutable_time_created() {
  
  if (time_created_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    time_created_ = p;
  }
  return time_created_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Model::mutable_time_created() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time_created();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.Model.time_created)
  return _msg;
}
inline void Model::set_allocated_time_created(::PROTOBUF_NAMESPACE_ID::Timestamp* time_created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_created_);
  }
  if (time_created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_created));
    if (message_arena != submessage_arena) {
      time_created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_created, submessage_arena);
    }
    
  } else {
    
  }
  time_created_ = time_created;
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.Model.time_created)
}

// -------------------------------------------------------------------

// InfoRequest

// string org_id = 1 [json_name = "orgId"];
inline void InfoRequest::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& InfoRequest::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.InfoRequest.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoRequest::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.InfoRequest.org_id)
}
inline std::string* InfoRequest::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.InfoRequest.org_id)
  return _s;
}
inline const std::string& InfoRequest::_internal_org_id() const {
  return org_id_.Get();
}
inline void InfoRequest::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InfoRequest::_internal_mutable_org_id() {
  
  return org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InfoRequest::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.InfoRequest.org_id)
  return org_id_.Release();
}
inline void InfoRequest::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (org_id_.IsDefault()) {
    org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.InfoRequest.org_id)
}

// -------------------------------------------------------------------

// InfoResponse

// repeated .viam.app.model.v1.Model model = 1 [json_name = "model"];
inline int InfoResponse::_internal_model_size() const {
  return model_.size();
}
inline int InfoResponse::model_size() const {
  return _internal_model_size();
}
inline void InfoResponse::clear_model() {
  model_.Clear();
}
inline ::viam::app::model::v1::Model* InfoResponse::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.InfoResponse.model)
  return model_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::Model >*
InfoResponse::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.model.v1.InfoResponse.model)
  return &model_;
}
inline const ::viam::app::model::v1::Model& InfoResponse::_internal_model(int index) const {
  return model_.Get(index);
}
inline const ::viam::app::model::v1::Model& InfoResponse::model(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.InfoResponse.model)
  return _internal_model(index);
}
inline ::viam::app::model::v1::Model* InfoResponse::_internal_add_model() {
  return model_.Add();
}
inline ::viam::app::model::v1::Model* InfoResponse::add_model() {
  ::viam::app::model::v1::Model* _add = _internal_add_model();
  // @@protoc_insertion_point(field_add:viam.app.model.v1.InfoResponse.model)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::Model >&
InfoResponse::model() const {
  // @@protoc_insertion_point(field_list:viam.app.model.v1.InfoResponse.model)
  return model_;
}

// -------------------------------------------------------------------

// UploadResponse

// string message = 1 [json_name = "message"];
inline void UploadResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& UploadResponse::message() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.UploadResponse.message)
}
inline std::string* UploadResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.UploadResponse.message)
  return _s;
}
inline const std::string& UploadResponse::_internal_message() const {
  return message_.Get();
}
inline void UploadResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* UploadResponse::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* UploadResponse::release_message() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.UploadResponse.message)
  return message_.Release();
}
inline void UploadResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.UploadResponse.message)
}

// .viam.app.model.v1.Status status = 2 [json_name = "status"];
inline void UploadResponse::clear_status() {
  status_ = 0;
}
inline ::viam::app::model::v1::Status UploadResponse::_internal_status() const {
  return static_cast< ::viam::app::model::v1::Status >(status_);
}
inline ::viam::app::model::v1::Status UploadResponse::status() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.UploadResponse.status)
  return _internal_status();
}
inline void UploadResponse::_internal_set_status(::viam::app::model::v1::Status value) {
  
  status_ = value;
}
inline void UploadResponse::set_status(::viam::app::model::v1::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:viam.app.model.v1.UploadResponse.status)
}

// -------------------------------------------------------------------

// DeleteResponse

// string message = 1 [json_name = "message"];
inline void DeleteResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DeleteResponse::message() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeleteResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeleteResponse.message)
}
inline std::string* DeleteResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeleteResponse.message)
  return _s;
}
inline const std::string& DeleteResponse::_internal_message() const {
  return message_.Get();
}
inline void DeleteResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteResponse::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteResponse::release_message() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeleteResponse.message)
  return message_.Release();
}
inline void DeleteResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeleteResponse.message)
}

// .viam.app.model.v1.Status status = 2 [json_name = "status"];
inline void DeleteResponse::clear_status() {
  status_ = 0;
}
inline ::viam::app::model::v1::Status DeleteResponse::_internal_status() const {
  return static_cast< ::viam::app::model::v1::Status >(status_);
}
inline ::viam::app::model::v1::Status DeleteResponse::status() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeleteResponse.status)
  return _internal_status();
}
inline void DeleteResponse::_internal_set_status(::viam::app::model::v1::Status value) {
  
  status_ = value;
}
inline void DeleteResponse::set_status(::viam::app::model::v1::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeleteResponse.status)
}

// -------------------------------------------------------------------

// DeployResponse

// string message = 1 [json_name = "message"];
inline void DeployResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& DeployResponse::message() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeployResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeployResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeployResponse.message)
}
inline std::string* DeployResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.DeployResponse.message)
  return _s;
}
inline const std::string& DeployResponse::_internal_message() const {
  return message_.Get();
}
inline void DeployResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* DeployResponse::_internal_mutable_message() {
  
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* DeployResponse::release_message() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.DeployResponse.message)
  return message_.Release();
}
inline void DeployResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.DeployResponse.message)
}

// .viam.app.model.v1.Status status = 2 [json_name = "status"];
inline void DeployResponse::clear_status() {
  status_ = 0;
}
inline ::viam::app::model::v1::Status DeployResponse::_internal_status() const {
  return static_cast< ::viam::app::model::v1::Status >(status_);
}
inline ::viam::app::model::v1::Status DeployResponse::status() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.DeployResponse.status)
  return _internal_status();
}
inline void DeployResponse::_internal_set_status(::viam::app::model::v1::Status value) {
  
  status_ = value;
}
inline void DeployResponse::set_status(::viam::app::model::v1::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:viam.app.model.v1.DeployResponse.status)
}

// -------------------------------------------------------------------

// SyncedModel

// string org_id = 1 [json_name = "orgId", (.tagger.v1.tags) = "bson:\"org_id\" json:\"org_id\""];
inline void SyncedModel::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& SyncedModel::org_id() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.SyncedModel.org_id)
  return _internal_org_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncedModel::set_org_id(ArgT0&& arg0, ArgT... args) {
 
 org_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.SyncedModel.org_id)
}
inline std::string* SyncedModel::mutable_org_id() {
  std::string* _s = _internal_mutable_org_id();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.SyncedModel.org_id)
  return _s;
}
inline const std::string& SyncedModel::_internal_org_id() const {
  return org_id_.Get();
}
inline void SyncedModel::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncedModel::_internal_mutable_org_id() {
  
  return org_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncedModel::release_org_id() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.SyncedModel.org_id)
  return org_id_.Release();
}
inline void SyncedModel::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(org_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (org_id_.IsDefault()) {
    org_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.SyncedModel.org_id)
}

// string model_name = 2 [json_name = "modelName", (.tagger.v1.tags) = "bson:\"model_name\" json:\"model_name\""];
inline void SyncedModel::clear_model_name() {
  model_name_.ClearToEmpty();
}
inline const std::string& SyncedModel::model_name() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.SyncedModel.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncedModel::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 model_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.SyncedModel.model_name)
}
inline std::string* SyncedModel::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.SyncedModel.model_name)
  return _s;
}
inline const std::string& SyncedModel::_internal_model_name() const {
  return model_name_.Get();
}
inline void SyncedModel::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncedModel::_internal_mutable_model_name() {
  
  return model_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncedModel::release_model_name() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.SyncedModel.model_name)
  return model_name_.Release();
}
inline void SyncedModel::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(model_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_name_.IsDefault()) {
    model_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.SyncedModel.model_name)
}

// string associated_dataset = 3 [json_name = "associatedDataset", (.tagger.v1.tags) = "bson:\"associated_dataset\" json:\"associated_dataset\""];
inline void SyncedModel::clear_associated_dataset() {
  associated_dataset_.ClearToEmpty();
}
inline const std::string& SyncedModel::associated_dataset() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.SyncedModel.associated_dataset)
  return _internal_associated_dataset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncedModel::set_associated_dataset(ArgT0&& arg0, ArgT... args) {
 
 associated_dataset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.SyncedModel.associated_dataset)
}
inline std::string* SyncedModel::mutable_associated_dataset() {
  std::string* _s = _internal_mutable_associated_dataset();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.SyncedModel.associated_dataset)
  return _s;
}
inline const std::string& SyncedModel::_internal_associated_dataset() const {
  return associated_dataset_.Get();
}
inline void SyncedModel::_internal_set_associated_dataset(const std::string& value) {
  
  associated_dataset_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncedModel::_internal_mutable_associated_dataset() {
  
  return associated_dataset_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncedModel::release_associated_dataset() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.SyncedModel.associated_dataset)
  return associated_dataset_.Release();
}
inline void SyncedModel::set_allocated_associated_dataset(std::string* associated_dataset) {
  if (associated_dataset != nullptr) {
    
  } else {
    
  }
  associated_dataset_.SetAllocated(associated_dataset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (associated_dataset_.IsDefault()) {
    associated_dataset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.SyncedModel.associated_dataset)
}

// repeated .viam.app.model.v1.File files = 4 [json_name = "files", (.tagger.v1.tags) = "bson:\"files\" json:\"files\""];
inline int SyncedModel::_internal_files_size() const {
  return files_.size();
}
inline int SyncedModel::files_size() const {
  return _internal_files_size();
}
inline void SyncedModel::clear_files() {
  files_.Clear();
}
inline ::viam::app::model::v1::File* SyncedModel::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.SyncedModel.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File >*
SyncedModel::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:viam.app.model.v1.SyncedModel.files)
  return &files_;
}
inline const ::viam::app::model::v1::File& SyncedModel::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::viam::app::model::v1::File& SyncedModel::files(int index) const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.SyncedModel.files)
  return _internal_files(index);
}
inline ::viam::app::model::v1::File* SyncedModel::_internal_add_files() {
  return files_.Add();
}
inline ::viam::app::model::v1::File* SyncedModel::add_files() {
  ::viam::app::model::v1::File* _add = _internal_add_files();
  // @@protoc_insertion_point(field_add:viam.app.model.v1.SyncedModel.files)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::app::model::v1::File >&
SyncedModel::files() const {
  // @@protoc_insertion_point(field_list:viam.app.model.v1.SyncedModel.files)
  return files_;
}

// int64 size_bytes = 5 [json_name = "sizeBytes", (.tagger.v1.tags) = "bson:\"size_bytes\" json:\"size_bytes\""];
inline void SyncedModel::clear_size_bytes() {
  size_bytes_ = int64_t{0};
}
inline int64_t SyncedModel::_internal_size_bytes() const {
  return size_bytes_;
}
inline int64_t SyncedModel::size_bytes() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.SyncedModel.size_bytes)
  return _internal_size_bytes();
}
inline void SyncedModel::_internal_set_size_bytes(int64_t value) {
  
  size_bytes_ = value;
}
inline void SyncedModel::set_size_bytes(int64_t value) {
  _internal_set_size_bytes(value);
  // @@protoc_insertion_point(field_set:viam.app.model.v1.SyncedModel.size_bytes)
}

// string blob_path = 6 [json_name = "blobPath", (.tagger.v1.tags) = "bson:\"blob_path\" json:\"blob_path\""];
inline void SyncedModel::clear_blob_path() {
  blob_path_.ClearToEmpty();
}
inline const std::string& SyncedModel::blob_path() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.SyncedModel.blob_path)
  return _internal_blob_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncedModel::set_blob_path(ArgT0&& arg0, ArgT... args) {
 
 blob_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.app.model.v1.SyncedModel.blob_path)
}
inline std::string* SyncedModel::mutable_blob_path() {
  std::string* _s = _internal_mutable_blob_path();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.SyncedModel.blob_path)
  return _s;
}
inline const std::string& SyncedModel::_internal_blob_path() const {
  return blob_path_.Get();
}
inline void SyncedModel::_internal_set_blob_path(const std::string& value) {
  
  blob_path_.Set(value, GetArenaForAllocation());
}
inline std::string* SyncedModel::_internal_mutable_blob_path() {
  
  return blob_path_.Mutable(GetArenaForAllocation());
}
inline std::string* SyncedModel::release_blob_path() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.SyncedModel.blob_path)
  return blob_path_.Release();
}
inline void SyncedModel::set_allocated_blob_path(std::string* blob_path) {
  if (blob_path != nullptr) {
    
  } else {
    
  }
  blob_path_.SetAllocated(blob_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (blob_path_.IsDefault()) {
    blob_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.SyncedModel.blob_path)
}

// .google.protobuf.Timestamp sync_time = 7 [json_name = "syncTime", (.tagger.v1.tags) = "bson:\"sync_time\" json:\"sync_time\""];
inline bool SyncedModel::_internal_has_sync_time() const {
  return this != internal_default_instance() && sync_time_ != nullptr;
}
inline bool SyncedModel::has_sync_time() const {
  return _internal_has_sync_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SyncedModel::_internal_sync_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = sync_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& SyncedModel::sync_time() const {
  // @@protoc_insertion_point(field_get:viam.app.model.v1.SyncedModel.sync_time)
  return _internal_sync_time();
}
inline void SyncedModel::unsafe_arena_set_allocated_sync_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* sync_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_time_);
  }
  sync_time_ = sync_time;
  if (sync_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.app.model.v1.SyncedModel.sync_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SyncedModel::release_sync_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = sync_time_;
  sync_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SyncedModel::unsafe_arena_release_sync_time() {
  // @@protoc_insertion_point(field_release:viam.app.model.v1.SyncedModel.sync_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = sync_time_;
  sync_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SyncedModel::_internal_mutable_sync_time() {
  
  if (sync_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    sync_time_ = p;
  }
  return sync_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* SyncedModel::mutable_sync_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_sync_time();
  // @@protoc_insertion_point(field_mutable:viam.app.model.v1.SyncedModel.sync_time)
  return _msg;
}
inline void SyncedModel::set_allocated_sync_time(::PROTOBUF_NAMESPACE_ID::Timestamp* sync_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_time_);
  }
  if (sync_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_time));
    if (message_arena != submessage_arena) {
      sync_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_time, submessage_arena);
    }
    
  } else {
    
  }
  sync_time_ = sync_time;
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.SyncedModel.sync_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace model
}  // namespace app
}  // namespace viam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::viam::app::model::v1::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::app::model::v1::Status>() {
  return ::viam::app::model::v1::Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_2fmodel_2fv1_2fmodel_2eproto
